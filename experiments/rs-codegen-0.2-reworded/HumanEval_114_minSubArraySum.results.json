{
  "name": "HumanEval_114_minSubArraySum",
  "language": "rs",
  "prompt": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n",
  "tests": "}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums {\n    min_sum = min(min_sum, i);\n  }\n  for i in nums {\n    min_sum = min(min_sum, nums[i + 1] + min_sum);\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmp6jz8phg5.rs:11:15\n   |\n11 |     min_sum = min(min_sum, i);\n   |               ^^^\n...\n19 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmp6jz8phg5.rs:14:15\n   |\n14 |     min_sum = min(min_sum, nums[i + 1] + min_sum);\n   |               ^^^\n...\n19 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n14 |     min_sum = main(min_sum, nums[i + 1] + min_sum);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp6jz8phg5.rs:14:28\n   |\n14 |     min_sum = min(min_sum, nums[i + 1] + min_sum);\n   |                            ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0425.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min = nums[0];\n  for i in nums.iter() {\n    min = min.min(i);\n  }\n  return min;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmppx7cggbd.rs:11:19\n   |\n11 |     min = min.min(i);\n   |                   ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n11 |     min = min.min(*i);\n   |                   +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums.len() - 1 {\n    min_sum = min(min_sum + nums[i], nums[i]);\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpfk6xlr1q.rs:11:15\n   |\n11 |     min_sum = min(min_sum + nums[i], nums[i]);\n   |               ^^^\n...\n16 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum + nums[i], nums[i]);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror[E0277]: `usize` is not an iterator\n  --> /tmp/tmpfk6xlr1q.rs:10:12\n   |\n10 |   for i in nums.len() - 1 {\n   |            ^^^^^^^^^^^^^^ `usize` is not an iterator\n   |\n   = help: the trait `Iterator` is not implemented for `usize`\n   = note: if you want to iterate between `start` until a value `end`, use the exclusive range syntax `start..end` or the inclusive range syntax `start..=end`\n   = note: required because of the requirements on the impl of `IntoIterator` for `usize`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0425.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums {\n    min_sum = min(min_sum + i, i);\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpd3b_ubo0.rs:11:15\n   |\n11 |     min_sum = min(min_sum + i, i);\n   |               ^^^\n...\n16 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum + i, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums {\n    min_sum = min(min_sum + i, i);\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpd3b_ubo0.rs:11:15\n   |\n11 |     min_sum = min(min_sum + i, i);\n   |               ^^^\n...\n16 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum + i, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min = nums[0];\n  for i in nums {\n    min = min.min(i);\n  }\n  return min;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `min`\n  --> /tmp/tmppmof974z.rs:11:5\n   |\n9  |   let min = nums[0];\n   |       ---\n   |       |\n   |       first assignment to `min`\n   |       help: consider making this binding mutable: `mut min`\n10 |   for i in nums {\n11 |     min = min.min(i);\n   |     ^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums {\n    min_sum = min(min_sum + i, i);\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpd3b_ubo0.rs:11:15\n   |\n11 |     min_sum = min(min_sum + i, i);\n   |               ^^^\n...\n16 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum + i, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums {\n    min_sum = min(min_sum + i, i);\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpd3b_ubo0.rs:11:15\n   |\n11 |     min_sum = min(min_sum + i, i);\n   |               ^^^\n...\n16 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum + i, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums {\n    min_sum = min(min_sum + i, i);\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpd3b_ubo0.rs:11:15\n   |\n11 |     min_sum = min(min_sum + i, i);\n   |               ^^^\n...\n16 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum + i, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums {\n    min_sum = min(min_sum + i, i);\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpd3b_ubo0.rs:11:15\n   |\n11 |     min_sum = min(min_sum + i, i);\n   |               ^^^\n...\n16 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum + i, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums {\n    min_sum = min(min_sum + i, i);\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpd3b_ubo0.rs:11:15\n   |\n11 |     min_sum = min(min_sum + i, i);\n   |               ^^^\n...\n16 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum + i, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums {\n    min_sum = min(min_sum + i, i);\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpd3b_ubo0.rs:11:15\n   |\n11 |     min_sum = min(min_sum + i, i);\n   |               ^^^\n...\n16 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum + i, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums {\n    min_sum = min(min_sum + i, i);\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpd3b_ubo0.rs:11:15\n   |\n11 |     min_sum = min(min_sum + i, i);\n   |               ^^^\n...\n16 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum + i, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums {\n    min_sum = min(min_sum + i, i);\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpd3b_ubo0.rs:11:15\n   |\n11 |     min_sum = min(min_sum + i, i);\n   |               ^^^\n...\n16 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum + i, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums {\n    min_sum = min(min_sum, i);\n  }\n  for i in nums {\n    for j in nums[i + 1 :] {\n      min_sum = min(min_sum, i + j);\n    }\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error: expected type, found `]`\n  --> /tmp/tmp40pkalfr.rs:14:26\n   |\n14 |     for j in nums[i + 1 :] {\n   |                         -^ expected type\n   |                         |\n   |                         help: maybe write a path separator here: `::`\n\nerror[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmp40pkalfr.rs:11:15\n   |\n11 |     min_sum = min(min_sum, i);\n   |               ^^^\n...\n21 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums.len() - 1 {\n    min_sum = nums[i] + min_sum;\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0277]: `usize` is not an iterator\n  --> /tmp/tmpwni7_o3n.rs:10:12\n   |\n10 |   for i in nums.len() - 1 {\n   |            ^^^^^^^^^^^^^^ `usize` is not an iterator\n   |\n   = help: the trait `Iterator` is not implemented for `usize`\n   = note: if you want to iterate between `start` until a value `end`, use the exclusive range syntax `start..end` or the inclusive range syntax `start..=end`\n   = note: required because of the requirements on the impl of `IntoIterator` for `usize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums {\n    min_sum = min(min_sum + i, i);\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpd3b_ubo0.rs:11:15\n   |\n11 |     min_sum = min(min_sum + i, i);\n   |               ^^^\n...\n16 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum + i, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums {\n    min_sum = min(min_sum + i, i);\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpd3b_ubo0.rs:11:15\n   |\n11 |     min_sum = min(min_sum + i, i);\n   |               ^^^\n...\n16 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum + i, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min = nums[0];\n  for i in nums {\n    min = min.min(i);\n  }\n  return min;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `min`\n  --> /tmp/tmppmof974z.rs:11:5\n   |\n9  |   let min = nums[0];\n   |       ---\n   |       |\n   |       first assignment to `min`\n   |       help: consider making this binding mutable: `mut min`\n10 |   for i in nums {\n11 |     min = min.min(i);\n   |     ^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums {\n    min_sum = min(min_sum, i);\n  }\n  for i in nums {\n    min_sum = min(min_sum, nums[i + 1] + min_sum);\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmp6jz8phg5.rs:11:15\n   |\n11 |     min_sum = min(min_sum, i);\n   |               ^^^\n...\n19 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmp6jz8phg5.rs:14:15\n   |\n14 |     min_sum = min(min_sum, nums[i + 1] + min_sum);\n   |               ^^^\n...\n19 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n14 |     min_sum = main(min_sum, nums[i + 1] + min_sum);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp6jz8phg5.rs:14:28\n   |\n14 |     min_sum = min(min_sum, nums[i + 1] + min_sum);\n   |                            ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0425.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums {\n    min_sum = min(min_sum + i, i);\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpd3b_ubo0.rs:11:15\n   |\n11 |     min_sum = min(min_sum + i, i);\n   |               ^^^\n...\n16 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum + i, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums {\n    min_sum = min(min_sum, i);\n  }\n  for i in nums {\n    min_sum = min(min_sum, nums[i + 1] + min_sum);\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmp6jz8phg5.rs:11:15\n   |\n11 |     min_sum = min(min_sum, i);\n   |               ^^^\n...\n19 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmp6jz8phg5.rs:14:15\n   |\n14 |     min_sum = min(min_sum, nums[i + 1] + min_sum);\n   |               ^^^\n...\n19 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n14 |     min_sum = main(min_sum, nums[i + 1] + min_sum);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp6jz8phg5.rs:14:28\n   |\n14 |     min_sum = min(min_sum, nums[i + 1] + min_sum);\n   |                            ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0425.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums {\n    min_sum = min(min_sum + i, i);\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpd3b_ubo0.rs:11:15\n   |\n11 |     min_sum = min(min_sum + i, i);\n   |               ^^^\n...\n16 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum + i, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums {\n    min_sum = min(min_sum + i, i);\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpd3b_ubo0.rs:11:15\n   |\n11 |     min_sum = min(min_sum + i, i);\n   |               ^^^\n...\n16 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum + i, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums {\n    min_sum = min(min_sum + i, i);\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpd3b_ubo0.rs:11:15\n   |\n11 |     min_sum = min(min_sum + i, i);\n   |               ^^^\n...\n16 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum + i, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min = nums[0];\n  let sum = 0;\n  for i in nums {\n    if i < 0 {\n      sum -= i;\n    } else {\n      sum += i;\n      if (sum < min) {\n        min = sum;\n      }\n      sum = 0;\n    }\n  }\n  return min;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpmmk6hi81.rs:16:10\n   |\n16 |       if (sum < min) {\n   |          ^         ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n16 -       if (sum < min) {\n16 +       if sum < min {\n   | \n\nerror[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmpmmk6hi81.rs:13:7\n   |\n10 |   let sum = 0;\n   |       ---\n   |       |\n   |       first assignment to `sum`\n   |       help: consider making this binding mutable: `mut sum`\n...\n13 |       sum -= i;\n   |       ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmpmmk6hi81.rs:15:7\n   |\n10 |   let sum = 0;\n   |       ---\n   |       |\n   |       first assignment to `sum`\n   |       help: consider making this binding mutable: `mut sum`\n...\n15 |       sum += i;\n   |       ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `min`\n  --> /tmp/tmpmmk6hi81.rs:17:9\n   |\n9  |   let min = nums[0];\n   |       ---\n   |       |\n   |       first assignment to `min`\n   |       help: consider making this binding mutable: `mut min`\n...\n17 |         min = sum;\n   |         ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmpmmk6hi81.rs:19:7\n   |\n10 |   let sum = 0;\n   |       ---\n   |       |\n   |       first assignment to `sum`\n   |       help: consider making this binding mutable: `mut sum`\n...\n19 |       sum = 0;\n   |       ^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 4 previous errors; 1 warning emitted\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums {\n    min_sum = min(min_sum, i);\n  }\n  for i in nums {\n    for j in nums[i + 1:];\n      j >= i;\n      j -= 1 {\n        min_sum = min(min_sum, j);\n      }\n    min_sum = min(min_sum, nums[i]);\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error: expected type, found `]`\n  --> /tmp/tmpwy2zfjua.rs:14:25\n   |\n14 |     for j in nums[i + 1:];\n   |                        -^ expected type\n   |                        |\n   |                        tried to parse a type due to this\n\nerror[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpwy2zfjua.rs:11:15\n   |\n11 |     min_sum = min(min_sum, i);\n   |               ^^^\n...\n24 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums {\n    min_sum = min(min_sum, i);\n  }\n  for i in nums {\n    for j in nums[i + 1 :] {\n      min_sum = min(min_sum, j + i);\n    }\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error: expected type, found `]`\n  --> /tmp/tmpb6b9ffnk.rs:14:26\n   |\n14 |     for j in nums[i + 1 :] {\n   |                         -^ expected type\n   |                         |\n   |                         help: maybe write a path separator here: `::`\n\nerror[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpb6b9ffnk.rs:11:15\n   |\n11 |     min_sum = min(min_sum, i);\n   |               ^^^\n...\n21 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums {\n    min_sum = min(min_sum, i);\n  }\n  for i in nums {\n    for j in nums[i + 1 : len(nums)]:\n      min_sum = min(min_sum, j - i);\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error: expected `{`, found `;`\n  --> /tmp/tmp6762pnkz.rs:15:36\n   |\n15 |       min_sum = min(min_sum, j - i);\n   |                                    ^ expected `{`\n\nerror[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmp6762pnkz.rs:11:15\n   |\n11 |     min_sum = min(min_sum, i);\n   |               ^^^\n...\n20 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums {\n    min_sum = min(min_sum + i, i);\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpd3b_ubo0.rs:11:15\n   |\n11 |     min_sum = min(min_sum + i, i);\n   |               ^^^\n...\n16 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum + i, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums.iter() {\n    min_sum = min(min_sum, i);\n  }\n  for i in nums.iter() {\n    min_sum = min(min_sum, nums.len() - i - 1);\n    min_sum = min(min_sum, nums.len() - i - 2);\n    min_sum = min(min_sum, nums.len() - i - 3);\n    min_sum = min(min_sum, nums.len() - i - 4);\n    min_sum = min(min_sum, nums.len() - i - 5);\n    min_sum = min(min_sum, nums.len() - i - 6);\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpdqve407k.rs:11:15\n   |\n11 |     min_sum = min(min_sum, i);\n   |               ^^^\n...\n24 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpdqve407k.rs:14:15\n   |\n14 |     min_sum = min(min_sum, nums.len() - i - 1);\n   |               ^^^\n...\n24 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n14 |     min_sum = main(min_sum, nums.len() - i - 1);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpdqve407k.rs:15:15\n   |\n15 |     min_sum = min(min_sum, nums.len() - i - 2);\n   |               ^^^\n...\n24 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n15 |     min_sum = main(min_sum, nums.len() - i - 2);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpdqve407k.rs:16:15\n   |\n16 |     min_sum = min(min_sum, nums.len() - i - 3);\n   |               ^^^\n...\n24 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n16 |     min_sum = main(min_sum, nums.len() - i - 3);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpdqve407k.rs:17:15\n   |\n17 |     min_sum = min(min_sum, nums.len() - i - 4);\n   |               ^^^\n...\n24 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums {\n    min_sum = min(min_sum + i, i);\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpd3b_ubo0.rs:11:15\n   |\n11 |     min_sum = min(min_sum + i, i);\n   |               ^^^\n...\n16 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum + i, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums.iter() {\n    min_sum = min(min_sum, i);\n  }\n  for i in nums.iter() {\n    min_sum = min(min_sum, nums.len() - i - 1);\n    min_sum = min(min_sum, nums.len() - i);\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmp_j29vhic.rs:11:15\n   |\n11 |     min_sum = min(min_sum, i);\n   |               ^^^\n...\n20 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmp_j29vhic.rs:14:15\n   |\n14 |     min_sum = min(min_sum, nums.len() - i - 1);\n   |               ^^^\n...\n20 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n14 |     min_sum = main(min_sum, nums.len() - i - 1);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmp_j29vhic.rs:15:15\n   |\n15 |     min_sum = min(min_sum, nums.len() - i);\n   |               ^^^\n...\n20 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n15 |     min_sum = main(min_sum, nums.len() - i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_j29vhic.rs:14:41\n   |\n14 |     min_sum = min(min_sum, nums.len() - i - 1);\n   |                                         ^ expected `usize`, found `isize`\n\nerror[E0277]: cannot subtract `&isize` from `usize`\n  --> /tmp/tmp_j29vhic.rs:14:39\n   |\n14 |     min_sum = min(min_sum, nums.len() - i - 1);\n   |                                       ^ no implementation for `usize - &isize`\n   |\n   = help: the trait `Sub<&isize>` is not implemented for `usize`\n   = help: the following other types implement trait `Sub<Rhs>`:\n             <&'a f32 as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n             <&'a i128 as Sub<i128>>\n             <&'a i16 as Sub<i16>>\n             <&'a i3",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums {\n    min_sum = min(min_sum + i, i);\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpd3b_ubo0.rs:11:15\n   |\n11 |     min_sum = min(min_sum + i, i);\n   |               ^^^\n...\n16 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum + i, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums {\n    min_sum = min(min_sum + i, i);\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpd3b_ubo0.rs:11:15\n   |\n11 |     min_sum = min(min_sum + i, i);\n   |               ^^^\n...\n16 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum + i, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums {\n    min_sum = min(min_sum + i, i);\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpd3b_ubo0.rs:11:15\n   |\n11 |     min_sum = min(min_sum + i, i);\n   |               ^^^\n...\n16 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum + i, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min = nums[0];\n  for i in nums {\n    min = min if min > i else i;\n  }\n  let sum = 0;\n  for i in nums {\n    sum += i;\n    if sum < min {\n      min = sum;\n    }\n  }\n  return min;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error: expected one of `!`, `.`, `::`, `;`, `?`, `{`, `}`, or an operator, found keyword `if`\n  --> /tmp/tmpqaf91je2.rs:11:15\n   |\n11 |     min = min if min > i else i;\n   |               ^^ expected one of 8 possible tokens\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums.iter() {\n    min_sum = min(min_sum, i);\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpfd5_n4yv.rs:11:15\n   |\n11 |     min_sum = min(min_sum, i);\n   |               ^^^\n...\n16 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums {\n    min_sum = min(min_sum + i, i);\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpd3b_ubo0.rs:11:15\n   |\n11 |     min_sum = min(min_sum + i, i);\n   |               ^^^\n...\n16 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum + i, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums {\n    min_sum = min(min_sum, i);\n  }\n  for i in nums {\n    for j in nums[i + 1 : len(nums)]:\n      min_sum = min(min_sum, i + j);\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error: expected `{`, found `;`\n  --> /tmp/tmpilgjurnh.rs:15:36\n   |\n15 |       min_sum = min(min_sum, i + j);\n   |                                    ^ expected `{`\n\nerror[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpilgjurnh.rs:11:15\n   |\n11 |     min_sum = min(min_sum, i);\n   |               ^^^\n...\n20 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min = nums[0];\n  for i in nums {\n    min = min.min(i);\n  }\n  return min;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `min`\n  --> /tmp/tmppmof974z.rs:11:5\n   |\n9  |   let min = nums[0];\n   |       ---\n   |       |\n   |       first assignment to `min`\n   |       help: consider making this binding mutable: `mut min`\n10 |   for i in nums {\n11 |     min = min.min(i);\n   |     ^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums {\n    min_sum = min(min_sum + i, i);\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpd3b_ubo0.rs:11:15\n   |\n11 |     min_sum = min(min_sum + i, i);\n   |               ^^^\n...\n16 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum + i, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums.iter() {\n    min_sum = min(min_sum, i);\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpfd5_n4yv.rs:11:15\n   |\n11 |     min_sum = min(min_sum, i);\n   |               ^^^\n...\n16 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums {\n    min_sum = min(min_sum, i);\n  }\n  for i in nums {\n    for j in nums[i + 1 :] {\n      min_sum = min(min_sum, j + i);\n    }\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error: expected type, found `]`\n  --> /tmp/tmpb6b9ffnk.rs:14:26\n   |\n14 |     for j in nums[i + 1 :] {\n   |                         -^ expected type\n   |                         |\n   |                         help: maybe write a path separator here: `::`\n\nerror[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpb6b9ffnk.rs:11:15\n   |\n11 |     min_sum = min(min_sum, i);\n   |               ^^^\n...\n21 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums.iter() {\n    min_sum = min(min_sum, i);\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpfd5_n4yv.rs:11:15\n   |\n11 |     min_sum = min(min_sum, i);\n   |               ^^^\n...\n16 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums.iter() {\n    min_sum = min(min_sum + i, i);\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmp8fmts83y.rs:11:15\n   |\n11 |     min_sum = min(min_sum + i, i);\n   |               ^^^\n...\n16 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum + i, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min = nums[0];\n  for i in nums.iter() {\n    min = min.min(i);\n  }\n  return min;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmppx7cggbd.rs:11:19\n   |\n11 |     min = min.min(i);\n   |                   ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n11 |     min = min.min(*i);\n   |                   +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums {\n    min_sum = min(min_sum, i);\n  }\n  for i in nums {\n    min_sum = min(min_sum, nums[i]);\n  }\n  for i in nums {\n    min_sum = min(min_sum, nums[i] + minSubArraySum(nums.slice(i + 1)));\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmp3qaflcgx.rs:11:15\n   |\n11 |     min_sum = min(min_sum, i);\n   |               ^^^\n...\n22 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmp3qaflcgx.rs:14:15\n   |\n14 |     min_sum = min(min_sum, nums[i]);\n   |               ^^^\n...\n22 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n14 |     min_sum = main(min_sum, nums[i]);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmp3qaflcgx.rs:17:15\n   |\n17 |     min_sum = min(min_sum, nums[i] + minSubArraySum(nums.slice(i + 1)));\n   |               ^^^\n...\n22 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n17 |     min_sum = main(min_sum, nums[i] + minSubArraySum(nums.slice(i + 1)));\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp3qaflcgx.rs:14:28\n   |\n14 |     min_sum = min(min_sum, nums[i]);\n   |                            ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp3qaflcgx.rs:17:28\n   |\n17 |     min_sum = min(min_sum, nums[i] + minSubArraySum(nums.slice(i + 1)));\n   |                            ^^^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums.iter() {\n    min_sum = min(min_sum, i);\n  }\n  for i in nums.iter() {\n    min_sum = min(min_sum, nums.get(i + 1) + min_sum);\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmphgqtuk9_.rs:11:15\n   |\n11 |     min_sum = min(min_sum, i);\n   |               ^^^\n...\n19 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmphgqtuk9_.rs:14:15\n   |\n14 |     min_sum = min(min_sum, nums.get(i + 1) + min_sum);\n   |               ^^^\n...\n19 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n14 |     min_sum = main(min_sum, nums.get(i + 1) + min_sum);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n   --> /tmp/tmphgqtuk9_.rs:14:37\n    |\n14  |     min_sum = min(min_sum, nums.get(i + 1) + min_sum);\n    |                                 --- ^^^^^ slice indices are of type `usize` or ranges of `usize`\n    |                                 |\n    |                                 required by a bound introduced by this call\n    |\n    = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n    = help: the trait `SliceIndex<[T]>` is implemented for `usize`\nnote: required by a bound in `core::slice::<impl [T]>::get`\n\nerror[E0369]: cannot add `isize` to `Option<&_>`\n  --> /tmp/tmphgqtuk9_.rs:14:44\n   |\n14 |     min_sum = min(min_sum, nums.get(i + 1) + min_sum);\n   |                            --------------- ^ ------- isize\n   |                            |\n   |                            Option<&_>\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0369, E0425.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums.iter() {\n    min_sum = min(min_sum + i, i);\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmp8fmts83y.rs:11:15\n   |\n11 |     min_sum = min(min_sum + i, i);\n   |               ^^^\n...\n16 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum + i, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums {\n    min_sum = min(min_sum + i, i);\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpd3b_ubo0.rs:11:15\n   |\n11 |     min_sum = min(min_sum + i, i);\n   |               ^^^\n...\n16 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum + i, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums {\n    min_sum = min(min_sum + i, i);\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpd3b_ubo0.rs:11:15\n   |\n11 |     min_sum = min(min_sum + i, i);\n   |               ^^^\n...\n16 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum + i, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let sum = 0;\n  let min_sum = nums[0];\n  for i in nums {\n    sum += i;\n    min_sum = min(min_sum, sum);\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpvwww1gfm.rs:13:15\n   |\n13 |     min_sum = min(min_sum, sum);\n   |               ^^^\n...\n18 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n13 |     min_sum = main(min_sum, sum);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min = nums[0];\n  for i in nums {\n    min = min.min(i);\n  }\n  return min;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `min`\n  --> /tmp/tmppmof974z.rs:11:5\n   |\n9  |   let min = nums[0];\n   |       ---\n   |       |\n   |       first assignment to `min`\n   |       help: consider making this binding mutable: `mut min`\n10 |   for i in nums {\n11 |     min = min.min(i);\n   |     ^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums.iter() {\n    min_sum = min(min_sum, i);\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpfd5_n4yv.rs:11:15\n   |\n11 |     min_sum = min(min_sum, i);\n   |               ^^^\n...\n16 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums.iter() {\n    min_sum = min(min_sum, i);\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpfd5_n4yv.rs:11:15\n   |\n11 |     min_sum = min(min_sum, i);\n   |               ^^^\n...\n16 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums {\n    min_sum = min(min_sum + i, i);\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpd3b_ubo0.rs:11:15\n   |\n11 |     min_sum = min(min_sum + i, i);\n   |               ^^^\n...\n16 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum + i, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let sum = 0;\n  let min_sum = nums[0];\n  for i in nums {\n    sum += i;\n    if (sum < min_sum) {\n      min_sum = sum;\n    }\n    if (sum < 0) {\n      sum = 0;\n    }\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpyclrehav.rs:13:8\n   |\n13 |     if (sum < min_sum) {\n   |        ^             ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n13 -     if (sum < min_sum) {\n13 +     if sum < min_sum {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpyclrehav.rs:16:8\n   |\n16 |     if (sum < 0) {\n   |        ^       ^\n   |\nhelp: remove these parentheses\n   |\n16 -     if (sum < 0) {\n16 +     if sum < 0 {\n   | \n\nerror[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmpyclrehav.rs:12:5\n   |\n9  |   let sum = 0;\n   |       ---\n   |       |\n   |       first assignment to `sum`\n   |       help: consider making this binding mutable: `mut sum`\n...\n12 |     sum += i;\n   |     ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `min_sum`\n  --> /tmp/tmpyclrehav.rs:14:7\n   |\n10 |   let min_sum = nums[0];\n   |       -------\n   |       |\n   |       first assignment to `min_sum`\n   |       help: consider making this binding mutable: `mut min_sum`\n...\n14 |       min_sum = sum;\n   |       ^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmpyclrehav.rs:17:7\n   |\n9  |   let sum = 0;\n   |       ---\n   |       |\n   |       first assignment to `sum`\n   |       help: consider making this binding mutable: `mut sum`\n...\n17 |       sum = 0;\n   |       ^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 3 previous errors; 2 warnings emitted\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums {\n    min_sum = min(min_sum + i, i);\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpd3b_ubo0.rs:11:15\n   |\n11 |     min_sum = min(min_sum + i, i);\n   |               ^^^\n...\n16 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum + i, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums {\n    min_sum = min(min_sum, i);\n  }\n  for i in nums {\n    min_sum = min(min_sum, nums[i]);\n  }\n  for i in nums {\n    min_sum = min(min_sum, nums[i] + minSubArraySum(nums.slice(i + 1)));\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmp3qaflcgx.rs:11:15\n   |\n11 |     min_sum = min(min_sum, i);\n   |               ^^^\n...\n22 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmp3qaflcgx.rs:14:15\n   |\n14 |     min_sum = min(min_sum, nums[i]);\n   |               ^^^\n...\n22 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n14 |     min_sum = main(min_sum, nums[i]);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmp3qaflcgx.rs:17:15\n   |\n17 |     min_sum = min(min_sum, nums[i] + minSubArraySum(nums.slice(i + 1)));\n   |               ^^^\n...\n22 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n17 |     min_sum = main(min_sum, nums[i] + minSubArraySum(nums.slice(i + 1)));\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp3qaflcgx.rs:14:28\n   |\n14 |     min_sum = min(min_sum, nums[i]);\n   |                            ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp3qaflcgx.rs:17:28\n   |\n17 |     min_sum = min(min_sum, nums[i] + minSubArraySum(nums.slice(i + 1)));\n   |                            ^^^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums {\n    min_sum = min(min_sum + i, i);\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpd3b_ubo0.rs:11:15\n   |\n11 |     min_sum = min(min_sum + i, i);\n   |               ^^^\n...\n16 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum + i, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums {\n    min_sum = min(min_sum, i);\n  }\n  for i in nums {\n    for j in nums[i + 1 :] {\n      min_sum = min(min_sum, j + i);\n    }\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error: expected type, found `]`\n  --> /tmp/tmpb6b9ffnk.rs:14:26\n   |\n14 |     for j in nums[i + 1 :] {\n   |                         -^ expected type\n   |                         |\n   |                         help: maybe write a path separator here: `::`\n\nerror[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpb6b9ffnk.rs:11:15\n   |\n11 |     min_sum = min(min_sum, i);\n   |               ^^^\n...\n21 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums {\n    min_sum = min(min_sum + i, i);\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpd3b_ubo0.rs:11:15\n   |\n11 |     min_sum = min(min_sum + i, i);\n   |               ^^^\n...\n16 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum + i, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums {\n    min_sum = min(min_sum + i, i);\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpd3b_ubo0.rs:11:15\n   |\n11 |     min_sum = min(min_sum + i, i);\n   |               ^^^\n...\n16 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum + i, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums {\n    min_sum = min(min_sum + i, i);\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpd3b_ubo0.rs:11:15\n   |\n11 |     min_sum = min(min_sum + i, i);\n   |               ^^^\n...\n16 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum + i, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums {\n    min_sum = min(min_sum + i, i);\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpd3b_ubo0.rs:11:15\n   |\n11 |     min_sum = min(min_sum + i, i);\n   |               ^^^\n...\n16 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum + i, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums {\n    min_sum = min(min_sum, i);\n  }\n  for i in nums {\n    for j in nums[i + 1:];\n      j < nums.len;\n      j += 1 {\n        min_sum = min(min_sum, i + j);\n      }\n    }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error: expected type, found `]`\n  --> /tmp/tmp2vddz_pp.rs:14:25\n   |\n14 |     for j in nums[i + 1:];\n   |                        -^ expected type\n   |                        |\n   |                        tried to parse a type due to this\n\nerror[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmp2vddz_pp.rs:11:15\n   |\n11 |     min_sum = min(min_sum, i);\n   |               ^^^\n...\n23 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums {\n    min_sum = min(min_sum + i, i);\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpd3b_ubo0.rs:11:15\n   |\n11 |     min_sum = min(min_sum + i, i);\n   |               ^^^\n...\n16 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum + i, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums {\n    min_sum = min(min_sum + i, i);\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpd3b_ubo0.rs:11:15\n   |\n11 |     min_sum = min(min_sum + i, i);\n   |               ^^^\n...\n16 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum + i, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min = nums[0];\n  for i in nums {\n    min = min.min(i);\n  }\n  return min;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `min`\n  --> /tmp/tmppmof974z.rs:11:5\n   |\n9  |   let min = nums[0];\n   |       ---\n   |       |\n   |       first assignment to `min`\n   |       help: consider making this binding mutable: `mut min`\n10 |   for i in nums {\n11 |     min = min.min(i);\n   |     ^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums {\n    min_sum = min(min_sum + i, i);\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpd3b_ubo0.rs:11:15\n   |\n11 |     min_sum = min(min_sum + i, i);\n   |               ^^^\n...\n16 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum + i, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums {\n    min_sum = min(min_sum + i, i);\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpd3b_ubo0.rs:11:15\n   |\n11 |     min_sum = min(min_sum + i, i);\n   |               ^^^\n...\n16 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum + i, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums.iter() {\n    min_sum = min(min_sum, i);\n  }\n  for i in nums.iter() {\n    min_sum = min(min_sum, nums.len() - i - 1);\n    min_sum = min(min_sum, nums.len() - i - 2);\n    min_sum = min(min_sum, nums.len() - i - 3);\n    min_sum = min(min_sum, nums.len() - i - 4);\n    min_sum = min(min_sum, nums.len() - i - 5);\n    min_sum = min(min_sum, nums.len() - i - 6);\n    min_sum = min(min_sum, nums.len() - i - 7);\n    min_sum = min(min_sum, nums.len() - i - 8);\n    min_sum = min(min_sum, nums.len() - i - 9);\n    min_sum = min(min_sum, nums.len() - i - 10);\n    min_sum = min(min_sum, nums.len() - i - 11);\n    min_sum = min(min_sum, nums.len() - i - 12);\n    min_sum = min(min_sum, nums.len() - i - 13);\n    min_sum = min(min_sum, nums.len() - i - 14);\n    min_sum = min(min_sum, nums.len() - i - 15);\n    min_sum = min(min_sum, nums.len() - i - 16);\n    min_sum = min(min_sum, nums.len() - i - 17);\n    min_sum = min(min_sum, nums.len() - i - 18);\n    min_sum = min(min_sum, nums.len() - i - 19);\n    min_sum = min(min_sum, nums.len() - i - 20);\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpck9cvoz0.rs:11:15\n   |\n11 |     min_sum = min(min_sum, i);\n   |               ^^^\n...\n38 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpck9cvoz0.rs:14:15\n   |\n14 |     min_sum = min(min_sum, nums.len() - i - 1);\n   |               ^^^\n...\n38 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n14 |     min_sum = main(min_sum, nums.len() - i - 1);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpck9cvoz0.rs:15:15\n   |\n15 |     min_sum = min(min_sum, nums.len() - i - 2);\n   |               ^^^\n...\n38 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n15 |     min_sum = main(min_sum, nums.len() - i - 2);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpck9cvoz0.rs:16:15\n   |\n16 |     min_sum = min(min_sum, nums.len() - i - 3);\n   |               ^^^\n...\n38 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n16 |     min_sum = main(min_sum, nums.len() - i - 3);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpck9cvoz0.rs:17:15\n   |\n17 |     min_sum = min(min_sum, nums.len() - i - 4);\n   |               ^^^\n...\n38 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums {\n    min_sum = min(min_sum, i);\n  }\n  for i in nums {\n    for j in nums[i + 1:];\n      j < nums.len;\n      j += 1 {\n        min_sum = min(min_sum, i + j);\n      }\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error: expected type, found `]`\n  --> /tmp/tmp0m1za9mu.rs:14:25\n   |\n14 |     for j in nums[i + 1:];\n   |                        -^ expected type\n   |                        |\n   |                        tried to parse a type due to this\n\nerror[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmp0m1za9mu.rs:11:15\n   |\n11 |     min_sum = min(min_sum, i);\n   |               ^^^\n...\n23 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums.iter() {\n    min_sum = min(min_sum, i);\n  }\n  for i in nums.iter() {\n    min_sum = min(min_sum, nums.len() - i - 1);\n    min_sum = min(min_sum, nums.len() - i - 2);\n    min_sum = min(min_sum, nums.len() - i - 3);\n    min_sum = min(min_sum, nums.len() - i - 4);\n    min_sum = min(min_sum, nums.len() - i - 5);\n    min_sum = min(min_sum, nums.len() - i - 6);\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpdqve407k.rs:11:15\n   |\n11 |     min_sum = min(min_sum, i);\n   |               ^^^\n...\n24 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpdqve407k.rs:14:15\n   |\n14 |     min_sum = min(min_sum, nums.len() - i - 1);\n   |               ^^^\n...\n24 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n14 |     min_sum = main(min_sum, nums.len() - i - 1);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpdqve407k.rs:15:15\n   |\n15 |     min_sum = min(min_sum, nums.len() - i - 2);\n   |               ^^^\n...\n24 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n15 |     min_sum = main(min_sum, nums.len() - i - 2);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpdqve407k.rs:16:15\n   |\n16 |     min_sum = min(min_sum, nums.len() - i - 3);\n   |               ^^^\n...\n24 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n16 |     min_sum = main(min_sum, nums.len() - i - 3);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpdqve407k.rs:17:15\n   |\n17 |     min_sum = min(min_sum, nums.len() - i - 4);\n   |               ^^^\n...\n24 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums {\n    min_sum = min(min_sum + i, i);\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpd3b_ubo0.rs:11:15\n   |\n11 |     min_sum = min(min_sum + i, i);\n   |               ^^^\n...\n16 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum + i, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums {\n    min_sum = min(min_sum, i);\n  }\n  for i in nums {\n    min_sum = min(min_sum, nums[i + 1] + min_sum);\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmp6jz8phg5.rs:11:15\n   |\n11 |     min_sum = min(min_sum, i);\n   |               ^^^\n...\n19 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmp6jz8phg5.rs:14:15\n   |\n14 |     min_sum = min(min_sum, nums[i + 1] + min_sum);\n   |               ^^^\n...\n19 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n14 |     min_sum = main(min_sum, nums[i + 1] + min_sum);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp6jz8phg5.rs:14:28\n   |\n14 |     min_sum = min(min_sum, nums[i + 1] + min_sum);\n   |                            ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0425.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums {\n    min_sum = min(min_sum, i);\n  }\n  for i in nums {\n    for j in nums[i + 1 :] {\n      min_sum = min(min_sum, j + i);\n    }\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error: expected type, found `]`\n  --> /tmp/tmpb6b9ffnk.rs:14:26\n   |\n14 |     for j in nums[i + 1 :] {\n   |                         -^ expected type\n   |                         |\n   |                         help: maybe write a path separator here: `::`\n\nerror[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpb6b9ffnk.rs:11:15\n   |\n11 |     min_sum = min(min_sum, i);\n   |               ^^^\n...\n21 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums {\n    min_sum = min(min_sum, i);\n  }\n  for i in nums {\n    min_sum = min(min_sum, nums[i]);\n  }\n  for i in nums {\n    min_sum = min(min_sum, nums[i] + minSubArraySum(nums.slice(i + 1)));\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmp3qaflcgx.rs:11:15\n   |\n11 |     min_sum = min(min_sum, i);\n   |               ^^^\n...\n22 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmp3qaflcgx.rs:14:15\n   |\n14 |     min_sum = min(min_sum, nums[i]);\n   |               ^^^\n...\n22 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n14 |     min_sum = main(min_sum, nums[i]);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmp3qaflcgx.rs:17:15\n   |\n17 |     min_sum = min(min_sum, nums[i] + minSubArraySum(nums.slice(i + 1)));\n   |               ^^^\n...\n22 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n17 |     min_sum = main(min_sum, nums[i] + minSubArraySum(nums.slice(i + 1)));\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp3qaflcgx.rs:14:28\n   |\n14 |     min_sum = min(min_sum, nums[i]);\n   |                            ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp3qaflcgx.rs:17:28\n   |\n17 |     min_sum = min(min_sum, nums[i] + minSubArraySum(nums.slice(i + 1)));\n   |                            ^^^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums {\n    min_sum = min(min_sum + i, i);\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpd3b_ubo0.rs:11:15\n   |\n11 |     min_sum = min(min_sum + i, i);\n   |               ^^^\n...\n16 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum + i, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums {\n    min_sum = min(min_sum + i, i);\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpd3b_ubo0.rs:11:15\n   |\n11 |     min_sum = min(min_sum + i, i);\n   |               ^^^\n...\n16 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum + i, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let sum = 0;\n  let min = nums[0];\n  for i in nums {\n    sum += i;\n    if (sum < min) {\n      min = sum;\n    }\n  }\n  return min;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp_a1fxlnz.rs:13:8\n   |\n13 |     if (sum < min) {\n   |        ^         ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n13 -     if (sum < min) {\n13 +     if sum < min {\n   | \n\nerror[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmp_a1fxlnz.rs:12:5\n   |\n9  |   let sum = 0;\n   |       ---\n   |       |\n   |       first assignment to `sum`\n   |       help: consider making this binding mutable: `mut sum`\n...\n12 |     sum += i;\n   |     ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `min`\n  --> /tmp/tmp_a1fxlnz.rs:14:7\n   |\n10 |   let min = nums[0];\n   |       ---\n   |       |\n   |       first assignment to `min`\n   |       help: consider making this binding mutable: `mut min`\n...\n14 |       min = sum;\n   |       ^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors; 1 warning emitted\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums {\n    min_sum = min(min_sum + i, i);\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpd3b_ubo0.rs:11:15\n   |\n11 |     min_sum = min(min_sum + i, i);\n   |               ^^^\n...\n16 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum + i, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums.iter() {\n    min_sum = min(min_sum, i);\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpfd5_n4yv.rs:11:15\n   |\n11 |     min_sum = min(min_sum, i);\n   |               ^^^\n...\n16 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums {\n    min_sum = min(min_sum + i, i);\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpd3b_ubo0.rs:11:15\n   |\n11 |     min_sum = min(min_sum + i, i);\n   |               ^^^\n...\n16 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum + i, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums.iter() {\n    min_sum = min(min_sum + i, i);\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmp8fmts83y.rs:11:15\n   |\n11 |     min_sum = min(min_sum + i, i);\n   |               ^^^\n...\n16 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum + i, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums {\n    min_sum = min(min_sum + i, i);\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpd3b_ubo0.rs:11:15\n   |\n11 |     min_sum = min(min_sum + i, i);\n   |               ^^^\n...\n16 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum + i, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums {\n    min_sum = min(min_sum + i, i);\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpd3b_ubo0.rs:11:15\n   |\n11 |     min_sum = min(min_sum + i, i);\n   |               ^^^\n...\n16 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum + i, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min = nums[0];\n  for i in nums {\n    min = min if min > i else i;\n  }\n  return min;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error: expected one of `!`, `.`, `::`, `;`, `?`, `{`, `}`, or an operator, found keyword `if`\n  --> /tmp/tmp01kyl61m.rs:11:15\n   |\n11 |     min = min if min > i else i;\n   |               ^^ expected one of 8 possible tokens\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums {\n    min_sum = min(min_sum + i, i);\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpd3b_ubo0.rs:11:15\n   |\n11 |     min_sum = min(min_sum + i, i);\n   |               ^^^\n...\n16 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum + i, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums.iter() {\n    min_sum = min(min_sum + i, i);\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmp8fmts83y.rs:11:15\n   |\n11 |     min_sum = min(min_sum + i, i);\n   |               ^^^\n...\n16 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum + i, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums {\n    min_sum = min(min_sum + i, i);\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpd3b_ubo0.rs:11:15\n   |\n11 |     min_sum = min(min_sum + i, i);\n   |               ^^^\n...\n16 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum + i, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums {\n    min_sum = min(min_sum + i, i);\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpd3b_ubo0.rs:11:15\n   |\n11 |     min_sum = min(min_sum + i, i);\n   |               ^^^\n...\n16 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum + i, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums {\n    min_sum = min(min_sum, i);\n  }\n  for i in nums {\n    for j in nums[i + 1 :] {\n      min_sum = min(min_sum, i + j);\n    }\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error: expected type, found `]`\n  --> /tmp/tmp40pkalfr.rs:14:26\n   |\n14 |     for j in nums[i + 1 :] {\n   |                         -^ expected type\n   |                         |\n   |                         help: maybe write a path separator here: `::`\n\nerror[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmp40pkalfr.rs:11:15\n   |\n11 |     min_sum = min(min_sum, i);\n   |               ^^^\n...\n21 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums.iter() {\n    min_sum = min(min_sum, i);\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpfd5_n4yv.rs:11:15\n   |\n11 |     min_sum = min(min_sum, i);\n   |               ^^^\n...\n16 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums {\n    min_sum = min(min_sum + i, i);\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpd3b_ubo0.rs:11:15\n   |\n11 |     min_sum = min(min_sum + i, i);\n   |               ^^^\n...\n16 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum + i, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums {\n    min_sum = min(min_sum + i, i);\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpd3b_ubo0.rs:11:15\n   |\n11 |     min_sum = min(min_sum + i, i);\n   |               ^^^\n...\n16 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum + i, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min = nums[0];\n  for i in nums {\n    min = min.min(i);\n  }\n  return min;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `min`\n  --> /tmp/tmppmof974z.rs:11:5\n   |\n9  |   let min = nums[0];\n   |       ---\n   |       |\n   |       first assignment to `min`\n   |       help: consider making this binding mutable: `mut min`\n10 |   for i in nums {\n11 |     min = min.min(i);\n   |     ^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let sum = 0;\n  let min_sum = nums[0];\n  for i in nums {\n    sum += i;\n    if (sum < min_sum) {\n      min_sum = sum;\n    }\n    if (sum < 0) {\n      sum = 0;\n    }\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpyclrehav.rs:13:8\n   |\n13 |     if (sum < min_sum) {\n   |        ^             ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n13 -     if (sum < min_sum) {\n13 +     if sum < min_sum {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpyclrehav.rs:16:8\n   |\n16 |     if (sum < 0) {\n   |        ^       ^\n   |\nhelp: remove these parentheses\n   |\n16 -     if (sum < 0) {\n16 +     if sum < 0 {\n   | \n\nerror[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmpyclrehav.rs:12:5\n   |\n9  |   let sum = 0;\n   |       ---\n   |       |\n   |       first assignment to `sum`\n   |       help: consider making this binding mutable: `mut sum`\n...\n12 |     sum += i;\n   |     ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `min_sum`\n  --> /tmp/tmpyclrehav.rs:14:7\n   |\n10 |   let min_sum = nums[0];\n   |       -------\n   |       |\n   |       first assignment to `min_sum`\n   |       help: consider making this binding mutable: `mut min_sum`\n...\n14 |       min_sum = sum;\n   |       ^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmpyclrehav.rs:17:7\n   |\n9  |   let sum = 0;\n   |       ---\n   |       |\n   |       first assignment to `sum`\n   |       help: consider making this binding mutable: `mut sum`\n...\n17 |       sum = 0;\n   |       ^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 3 previous errors; 2 warnings emitted\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums.iter() {\n    min_sum = min(min_sum, i);\n  }\n  for i in nums.iter() {\n    min_sum = min(min_sum, nums.get(i + 1) + min_sum);\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmphgqtuk9_.rs:11:15\n   |\n11 |     min_sum = min(min_sum, i);\n   |               ^^^\n...\n19 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmphgqtuk9_.rs:14:15\n   |\n14 |     min_sum = min(min_sum, nums.get(i + 1) + min_sum);\n   |               ^^^\n...\n19 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n14 |     min_sum = main(min_sum, nums.get(i + 1) + min_sum);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n   --> /tmp/tmphgqtuk9_.rs:14:37\n    |\n14  |     min_sum = min(min_sum, nums.get(i + 1) + min_sum);\n    |                                 --- ^^^^^ slice indices are of type `usize` or ranges of `usize`\n    |                                 |\n    |                                 required by a bound introduced by this call\n    |\n    = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n    = help: the trait `SliceIndex<[T]>` is implemented for `usize`\nnote: required by a bound in `core::slice::<impl [T]>::get`\n\nerror[E0369]: cannot add `isize` to `Option<&_>`\n  --> /tmp/tmphgqtuk9_.rs:14:44\n   |\n14 |     min_sum = min(min_sum, nums.get(i + 1) + min_sum);\n   |                            --------------- ^ ------- isize\n   |                            |\n   |                            Option<&_>\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0369, E0425.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums.iter() {\n    min_sum = min(min_sum + i, i);\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmp8fmts83y.rs:11:15\n   |\n11 |     min_sum = min(min_sum + i, i);\n   |               ^^^\n...\n16 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum + i, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums {\n    min_sum = min(min_sum + i, i);\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpd3b_ubo0.rs:11:15\n   |\n11 |     min_sum = min(min_sum + i, i);\n   |               ^^^\n...\n16 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum + i, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums {\n    min_sum = min(min_sum, i);\n  }\n  for i in nums {\n    for j in nums[i + 1 :] {\n      min_sum = min(min_sum, j - i);\n    }\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error: expected type, found `]`\n  --> /tmp/tmporz861il.rs:14:26\n   |\n14 |     for j in nums[i + 1 :] {\n   |                         -^ expected type\n   |                         |\n   |                         help: maybe write a path separator here: `::`\n\nerror[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmporz861il.rs:11:15\n   |\n11 |     min_sum = min(min_sum, i);\n   |               ^^^\n...\n21 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums {\n    min_sum = min(min_sum, i);\n  }\n  for i in nums {\n    min_sum = min(min_sum, nums[i + 1] + min_sum);\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmp6jz8phg5.rs:11:15\n   |\n11 |     min_sum = min(min_sum, i);\n   |               ^^^\n...\n19 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmp6jz8phg5.rs:14:15\n   |\n14 |     min_sum = min(min_sum, nums[i + 1] + min_sum);\n   |               ^^^\n...\n19 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n14 |     min_sum = main(min_sum, nums[i + 1] + min_sum);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp6jz8phg5.rs:14:28\n   |\n14 |     min_sum = min(min_sum, nums[i + 1] + min_sum);\n   |                            ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0425.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums.iter() {\n    min_sum = min(min_sum + i, i);\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmp8fmts83y.rs:11:15\n   |\n11 |     min_sum = min(min_sum + i, i);\n   |               ^^^\n...\n16 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum + i, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums.iter() {\n    min_sum = min(min_sum + i, i);\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmp8fmts83y.rs:11:15\n   |\n11 |     min_sum = min(min_sum + i, i);\n   |               ^^^\n...\n16 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum + i, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums.len() - 1 {\n    let sum = nums[i] + min_sum;\n    if (sum < min_sum) {\n      min_sum = sum;\n    }\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpsejywutz.rs:12:8\n   |\n12 |     if (sum < min_sum) {\n   |        ^             ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n12 -     if (sum < min_sum) {\n12 +     if sum < min_sum {\n   | \n\nerror[E0277]: `usize` is not an iterator\n  --> /tmp/tmpsejywutz.rs:10:12\n   |\n10 |   for i in nums.len() - 1 {\n   |            ^^^^^^^^^^^^^^ `usize` is not an iterator\n   |\n   = help: the trait `Iterator` is not implemented for `usize`\n   = note: if you want to iterate between `start` until a value `end`, use the exclusive range syntax `start..end` or the inclusive range syntax `start..=end`\n   = note: required because of the requirements on the impl of `IntoIterator` for `usize`\n\nerror: aborting due to previous error; 1 warning emitted\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums {\n    min_sum = min(min_sum, i);\n  }\n  for i in nums {\n    min_sum = min(min_sum, nums[i + 1] + min_sum);\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmp6jz8phg5.rs:11:15\n   |\n11 |     min_sum = min(min_sum, i);\n   |               ^^^\n...\n19 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmp6jz8phg5.rs:14:15\n   |\n14 |     min_sum = min(min_sum, nums[i + 1] + min_sum);\n   |               ^^^\n...\n19 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n14 |     min_sum = main(min_sum, nums[i + 1] + min_sum);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp6jz8phg5.rs:14:28\n   |\n14 |     min_sum = min(min_sum, nums[i + 1] + min_sum);\n   |                            ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0425.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums {\n    min_sum = min(min_sum + i, i);\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpd3b_ubo0.rs:11:15\n   |\n11 |     min_sum = min(min_sum + i, i);\n   |               ^^^\n...\n16 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum + i, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min = nums[0];\n  for i in nums {\n    min = min.min(i);\n  }\n  return min;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `min`\n  --> /tmp/tmppmof974z.rs:11:5\n   |\n9  |   let min = nums[0];\n   |       ---\n   |       |\n   |       first assignment to `min`\n   |       help: consider making this binding mutable: `mut min`\n10 |   for i in nums {\n11 |     min = min.min(i);\n   |     ^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums {\n    min_sum = min(min_sum + i, i);\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpd3b_ubo0.rs:11:15\n   |\n11 |     min_sum = min(min_sum + i, i);\n   |               ^^^\n...\n16 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum + i, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums {\n    min_sum = min(min_sum, i);\n  }\n  for i in nums {\n    min_sum = min(min_sum, nums[i+1] + min_sum);\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmplmbd5by5.rs:11:15\n   |\n11 |     min_sum = min(min_sum, i);\n   |               ^^^\n...\n19 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmplmbd5by5.rs:14:15\n   |\n14 |     min_sum = min(min_sum, nums[i+1] + min_sum);\n   |               ^^^\n...\n19 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n14 |     min_sum = main(min_sum, nums[i+1] + min_sum);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmplmbd5by5.rs:14:28\n   |\n14 |     min_sum = min(min_sum, nums[i+1] + min_sum);\n   |                            ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0425.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums {\n    min_sum = min(min_sum + i, i);\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpd3b_ubo0.rs:11:15\n   |\n11 |     min_sum = min(min_sum + i, i);\n   |               ^^^\n...\n16 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum + i, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums.len() - 1 {\n    let sum = nums[i] + min_sum;\n    if sum < min_sum {\n      min_sum = sum;\n    }\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0277]: `usize` is not an iterator\n  --> /tmp/tmpw69pph45.rs:10:12\n   |\n10 |   for i in nums.len() - 1 {\n   |            ^^^^^^^^^^^^^^ `usize` is not an iterator\n   |\n   = help: the trait `Iterator` is not implemented for `usize`\n   = note: if you want to iterate between `start` until a value `end`, use the exclusive range syntax `start..end` or the inclusive range syntax `start..=end`\n   = note: required because of the requirements on the impl of `IntoIterator` for `usize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums {\n    min_sum = min(min_sum, i);\n  }\n  for i in nums {\n    min_sum = min(min_sum, nums[i]);\n  }\n  for i in nums {\n    min_sum = min(min_sum, nums[i] + minSubArraySum(nums.slice(i + 1)));\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmp3qaflcgx.rs:11:15\n   |\n11 |     min_sum = min(min_sum, i);\n   |               ^^^\n...\n22 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmp3qaflcgx.rs:14:15\n   |\n14 |     min_sum = min(min_sum, nums[i]);\n   |               ^^^\n...\n22 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n14 |     min_sum = main(min_sum, nums[i]);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmp3qaflcgx.rs:17:15\n   |\n17 |     min_sum = min(min_sum, nums[i] + minSubArraySum(nums.slice(i + 1)));\n   |               ^^^\n...\n22 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n17 |     min_sum = main(min_sum, nums[i] + minSubArraySum(nums.slice(i + 1)));\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp3qaflcgx.rs:14:28\n   |\n14 |     min_sum = min(min_sum, nums[i]);\n   |                            ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp3qaflcgx.rs:17:28\n   |\n17 |     min_sum = min(min_sum, nums[i] + minSubArraySum(nums.slice(i + 1)));\n   |                            ^^^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums {\n    min_sum = min(min_sum + i, i);\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpd3b_ubo0.rs:11:15\n   |\n11 |     min_sum = min(min_sum + i, i);\n   |               ^^^\n...\n16 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum + i, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums {\n    min_sum = min(min_sum + i, i);\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpd3b_ubo0.rs:11:15\n   |\n11 |     min_sum = min(min_sum + i, i);\n   |               ^^^\n...\n16 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum + i, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums {\n    min_sum = min(min_sum + i, i);\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpd3b_ubo0.rs:11:15\n   |\n11 |     min_sum = min(min_sum + i, i);\n   |               ^^^\n...\n16 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum + i, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums {\n    min_sum = min(min_sum + i, i);\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpd3b_ubo0.rs:11:15\n   |\n11 |     min_sum = min(min_sum + i, i);\n   |               ^^^\n...\n16 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum + i, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums {\n    min_sum = min(min_sum, i);\n  }\n  for i in nums {\n    for j in nums[i + 1:];\n      j < nums.len;\n      j += 1 {\n        min_sum = min(min_sum, i + j);\n      }\n    }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error: expected type, found `]`\n  --> /tmp/tmp2vddz_pp.rs:14:25\n   |\n14 |     for j in nums[i + 1:];\n   |                        -^ expected type\n   |                        |\n   |                        tried to parse a type due to this\n\nerror[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmp2vddz_pp.rs:11:15\n   |\n11 |     min_sum = min(min_sum, i);\n   |               ^^^\n...\n23 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums {\n    min_sum = min(min_sum + i, i);\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpd3b_ubo0.rs:11:15\n   |\n11 |     min_sum = min(min_sum + i, i);\n   |               ^^^\n...\n16 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum + i, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums {\n    min_sum = min(min_sum + i, i);\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpd3b_ubo0.rs:11:15\n   |\n11 |     min_sum = min(min_sum + i, i);\n   |               ^^^\n...\n16 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum + i, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums {\n    min_sum = min(min_sum + i, i);\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpd3b_ubo0.rs:11:15\n   |\n11 |     min_sum = min(min_sum + i, i);\n   |               ^^^\n...\n16 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum + i, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums {\n    min_sum = min(min_sum + i, i);\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpd3b_ubo0.rs:11:15\n   |\n11 |     min_sum = min(min_sum + i, i);\n   |               ^^^\n...\n16 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum + i, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums.iter() {\n    min_sum = min(min_sum, i);\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpfd5_n4yv.rs:11:15\n   |\n11 |     min_sum = min(min_sum, i);\n   |               ^^^\n...\n16 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums {\n    min_sum = min(min_sum, i);\n  }\n  for i in nums {\n    for j in nums[i + 1 :] {\n      min_sum = min(min_sum, j + i);\n    }\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error: expected type, found `]`\n  --> /tmp/tmpb6b9ffnk.rs:14:26\n   |\n14 |     for j in nums[i + 1 :] {\n   |                         -^ expected type\n   |                         |\n   |                         help: maybe write a path separator here: `::`\n\nerror[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpb6b9ffnk.rs:11:15\n   |\n11 |     min_sum = min(min_sum, i);\n   |               ^^^\n...\n21 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min = nums[0];\n  for i in nums {\n    min = min if min > i else i;\n  }\n  let sum = 0;\n  for i in nums {\n    sum += i - min;\n    if sum < 0 {\n      sum = 0;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error: expected one of `!`, `.`, `::`, `;`, `?`, `{`, `}`, or an operator, found keyword `if`\n  --> /tmp/tmprmkuvdad.rs:11:15\n   |\n11 |     min = min if min > i else i;\n   |               ^^ expected one of 8 possible tokens\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums {\n    min_sum = min(min_sum, i);\n  }\n  for i in nums {\n    min_sum = min(min_sum, nums[i + 1] + min_sum);\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmp6jz8phg5.rs:11:15\n   |\n11 |     min_sum = min(min_sum, i);\n   |               ^^^\n...\n19 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmp6jz8phg5.rs:14:15\n   |\n14 |     min_sum = min(min_sum, nums[i + 1] + min_sum);\n   |               ^^^\n...\n19 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n14 |     min_sum = main(min_sum, nums[i + 1] + min_sum);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp6jz8phg5.rs:14:28\n   |\n14 |     min_sum = min(min_sum, nums[i + 1] + min_sum);\n   |                            ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0425.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min = nums[0];\n  for i in nums {\n    min = min.min(i);\n  }\n  return min;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `min`\n  --> /tmp/tmppmof974z.rs:11:5\n   |\n9  |   let min = nums[0];\n   |       ---\n   |       |\n   |       first assignment to `min`\n   |       help: consider making this binding mutable: `mut min`\n10 |   for i in nums {\n11 |     min = min.min(i);\n   |     ^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min = nums[0];\n  for i in nums {\n    min = min.min(i);\n  }\n  return min;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `min`\n  --> /tmp/tmppmof974z.rs:11:5\n   |\n9  |   let min = nums[0];\n   |       ---\n   |       |\n   |       first assignment to `min`\n   |       help: consider making this binding mutable: `mut min`\n10 |   for i in nums {\n11 |     min = min.min(i);\n   |     ^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums {\n    min_sum = min(min_sum + i, i);\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpd3b_ubo0.rs:11:15\n   |\n11 |     min_sum = min(min_sum + i, i);\n   |               ^^^\n...\n16 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum + i, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums {\n    min_sum = min(min_sum, i);\n  }\n  for i in nums {\n    min_sum = min(min_sum, nums[i]);\n  }\n  for i in nums {\n    for j in nums[i + 1 :] {\n      min_sum = min(min_sum, nums[i] + nums[j]);\n    }\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error: expected type, found `]`\n  --> /tmp/tmpcoyqblh4.rs:17:26\n   |\n17 |     for j in nums[i + 1 :] {\n   |                         -^ expected type\n   |                         |\n   |                         help: maybe write a path separator here: `::`\n\nerror[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpcoyqblh4.rs:11:15\n   |\n11 |     min_sum = min(min_sum, i);\n   |               ^^^\n...\n24 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpcoyqblh4.rs:14:15\n   |\n14 |     min_sum = min(min_sum, nums[i]);\n   |               ^^^\n...\n24 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n14 |     min_sum = main(min_sum, nums[i]);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpcoyqblh4.rs:14:28\n   |\n14 |     min_sum = min(min_sum, nums[i]);\n   |                            ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0425.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums {\n    min_sum = min(min_sum + i, i);\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpd3b_ubo0.rs:11:15\n   |\n11 |     min_sum = min(min_sum + i, i);\n   |               ^^^\n...\n16 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum + i, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums {\n    min_sum = min(min_sum + i, i);\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpd3b_ubo0.rs:11:15\n   |\n11 |     min_sum = min(min_sum + i, i);\n   |               ^^^\n...\n16 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum + i, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums {\n    min_sum = min(min_sum + i, i);\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpd3b_ubo0.rs:11:15\n   |\n11 |     min_sum = min(min_sum + i, i);\n   |               ^^^\n...\n16 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum + i, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums {\n    min_sum = min(min_sum + i, i);\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpd3b_ubo0.rs:11:15\n   |\n11 |     min_sum = min(min_sum + i, i);\n   |               ^^^\n...\n16 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum + i, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums.iter() {\n    min_sum = min(min_sum, i);\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpfd5_n4yv.rs:11:15\n   |\n11 |     min_sum = min(min_sum, i);\n   |               ^^^\n...\n16 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let sum = 0;\n  let min_sum = nums[0];\n  for i in nums {\n    sum += i;\n    if (sum < min_sum) {\n      min_sum = sum;\n    }\n    if (sum < 0) {\n      sum = 0;\n    }\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpyclrehav.rs:13:8\n   |\n13 |     if (sum < min_sum) {\n   |        ^             ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n13 -     if (sum < min_sum) {\n13 +     if sum < min_sum {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpyclrehav.rs:16:8\n   |\n16 |     if (sum < 0) {\n   |        ^       ^\n   |\nhelp: remove these parentheses\n   |\n16 -     if (sum < 0) {\n16 +     if sum < 0 {\n   | \n\nerror[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmpyclrehav.rs:12:5\n   |\n9  |   let sum = 0;\n   |       ---\n   |       |\n   |       first assignment to `sum`\n   |       help: consider making this binding mutable: `mut sum`\n...\n12 |     sum += i;\n   |     ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `min_sum`\n  --> /tmp/tmpyclrehav.rs:14:7\n   |\n10 |   let min_sum = nums[0];\n   |       -------\n   |       |\n   |       first assignment to `min_sum`\n   |       help: consider making this binding mutable: `mut min_sum`\n...\n14 |       min_sum = sum;\n   |       ^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmpyclrehav.rs:17:7\n   |\n9  |   let sum = 0;\n   |       ---\n   |       |\n   |       first assignment to `sum`\n   |       help: consider making this binding mutable: `mut sum`\n...\n17 |       sum = 0;\n   |       ^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 3 previous errors; 2 warnings emitted\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let sum = 0;\n  let min_sum = nums[0];\n  for i in nums {\n    sum += i;\n    if (sum < min_sum) {\n      min_sum = sum;\n    }\n    if (sum < 0) {\n      sum = 0;\n    }\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpyclrehav.rs:13:8\n   |\n13 |     if (sum < min_sum) {\n   |        ^             ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n13 -     if (sum < min_sum) {\n13 +     if sum < min_sum {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpyclrehav.rs:16:8\n   |\n16 |     if (sum < 0) {\n   |        ^       ^\n   |\nhelp: remove these parentheses\n   |\n16 -     if (sum < 0) {\n16 +     if sum < 0 {\n   | \n\nerror[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmpyclrehav.rs:12:5\n   |\n9  |   let sum = 0;\n   |       ---\n   |       |\n   |       first assignment to `sum`\n   |       help: consider making this binding mutable: `mut sum`\n...\n12 |     sum += i;\n   |     ^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `min_sum`\n  --> /tmp/tmpyclrehav.rs:14:7\n   |\n10 |   let min_sum = nums[0];\n   |       -------\n   |       |\n   |       first assignment to `min_sum`\n   |       help: consider making this binding mutable: `mut min_sum`\n...\n14 |       min_sum = sum;\n   |       ^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `sum`\n  --> /tmp/tmpyclrehav.rs:17:7\n   |\n9  |   let sum = 0;\n   |       ---\n   |       |\n   |       first assignment to `sum`\n   |       help: consider making this binding mutable: `mut sum`\n...\n17 |       sum = 0;\n   |       ^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 3 previous errors; 2 warnings emitted\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums {\n    min_sum = min(min_sum, i);\n  }\n  for i in nums {\n    min_sum = min(min_sum, nums[i + 1] + min_sum);\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmp6jz8phg5.rs:11:15\n   |\n11 |     min_sum = min(min_sum, i);\n   |               ^^^\n...\n19 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmp6jz8phg5.rs:14:15\n   |\n14 |     min_sum = min(min_sum, nums[i + 1] + min_sum);\n   |               ^^^\n...\n19 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n14 |     min_sum = main(min_sum, nums[i + 1] + min_sum);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp6jz8phg5.rs:14:28\n   |\n14 |     min_sum = min(min_sum, nums[i + 1] + min_sum);\n   |                            ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0425.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums {\n    min_sum = min(min_sum, i);\n  }\n  for i in nums {\n    min_sum = min(min_sum, nums[i + 1] + min_sum);\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmp6jz8phg5.rs:11:15\n   |\n11 |     min_sum = min(min_sum, i);\n   |               ^^^\n...\n19 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmp6jz8phg5.rs:14:15\n   |\n14 |     min_sum = min(min_sum, nums[i + 1] + min_sum);\n   |               ^^^\n...\n19 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n14 |     min_sum = main(min_sum, nums[i + 1] + min_sum);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp6jz8phg5.rs:14:28\n   |\n14 |     min_sum = min(min_sum, nums[i + 1] + min_sum);\n   |                            ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0425.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums {\n    min_sum = min(min_sum + i, i);\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpd3b_ubo0.rs:11:15\n   |\n11 |     min_sum = min(min_sum + i, i);\n   |               ^^^\n...\n16 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum + i, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums.iter() {\n    min_sum = min(min_sum + i, i);\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmp8fmts83y.rs:11:15\n   |\n11 |     min_sum = min(min_sum + i, i);\n   |               ^^^\n...\n16 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum + i, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums {\n    min_sum = min(min_sum + i, i);\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpd3b_ubo0.rs:11:15\n   |\n11 |     min_sum = min(min_sum + i, i);\n   |               ^^^\n...\n16 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum + i, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min = nums[0];\n  for i in nums {\n    min = min if min > i else i;\n  }\n  let sum = 0;\n  for i in nums {\n    sum += i - min;\n    if sum < 0 {\n      sum = 0;\n    }\n  }\n  return sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error: expected one of `!`, `.`, `::`, `;`, `?`, `{`, `}`, or an operator, found keyword `if`\n  --> /tmp/tmprmkuvdad.rs:11:15\n   |\n11 |     min = min if min > i else i;\n   |               ^^ expected one of 8 possible tokens\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums {\n    min_sum = min(min_sum + i, i);\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpd3b_ubo0.rs:11:15\n   |\n11 |     min_sum = min(min_sum + i, i);\n   |               ^^^\n...\n16 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum + i, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums {\n    min_sum = min(min_sum + i, i);\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpd3b_ubo0.rs:11:15\n   |\n11 |     min_sum = min(min_sum + i, i);\n   |               ^^^\n...\n16 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum + i, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums {\n    min_sum = min(min_sum, i);\n  }\n  for i in nums {\n    for j in nums[i + 1 :] {\n      min_sum = min(min_sum, j - i);\n    }\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error: expected type, found `]`\n  --> /tmp/tmporz861il.rs:14:26\n   |\n14 |     for j in nums[i + 1 :] {\n   |                         -^ expected type\n   |                         |\n   |                         help: maybe write a path separator here: `::`\n\nerror[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmporz861il.rs:11:15\n   |\n11 |     min_sum = min(min_sum, i);\n   |               ^^^\n...\n21 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums {\n    min_sum = min(min_sum + i, i);\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpd3b_ubo0.rs:11:15\n   |\n11 |     min_sum = min(min_sum + i, i);\n   |               ^^^\n...\n16 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum + i, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums {\n    min_sum = min(min_sum + i, i);\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpd3b_ubo0.rs:11:15\n   |\n11 |     min_sum = min(min_sum + i, i);\n   |               ^^^\n...\n16 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum + i, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums {\n    min_sum = min(min_sum + i, i);\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpd3b_ubo0.rs:11:15\n   |\n11 |     min_sum = min(min_sum + i, i);\n   |               ^^^\n...\n16 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum + i, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums.iter() {\n    min_sum = min(min_sum + i, i);\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmp8fmts83y.rs:11:15\n   |\n11 |     min_sum = min(min_sum + i, i);\n   |               ^^^\n...\n16 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum + i, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums {\n    min_sum = min(min_sum + i, i);\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpd3b_ubo0.rs:11:15\n   |\n11 |     min_sum = min(min_sum + i, i);\n   |               ^^^\n...\n16 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum + i, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums.iter() {\n    min_sum = min(min_sum, i);\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpfd5_n4yv.rs:11:15\n   |\n11 |     min_sum = min(min_sum, i);\n   |               ^^^\n...\n16 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums.iter() {\n    min_sum = min(min_sum + i, i);\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmp8fmts83y.rs:11:15\n   |\n11 |     min_sum = min(min_sum + i, i);\n   |               ^^^\n...\n16 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum + i, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums {\n    min_sum = min(min_sum + i, i);\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpd3b_ubo0.rs:11:15\n   |\n11 |     min_sum = min(min_sum + i, i);\n   |               ^^^\n...\n16 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum + i, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums.iter() {\n    min_sum = min(min_sum, i);\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpfd5_n4yv.rs:11:15\n   |\n11 |     min_sum = min(min_sum, i);\n   |               ^^^\n...\n16 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums {\n    min_sum = min(min_sum + i, i);\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpd3b_ubo0.rs:11:15\n   |\n11 |     min_sum = min(min_sum + i, i);\n   |               ^^^\n...\n16 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum + i, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums {\n    min_sum = min(min_sum + i, i);\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpd3b_ubo0.rs:11:15\n   |\n11 |     min_sum = min(min_sum + i, i);\n   |               ^^^\n...\n16 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum + i, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums {\n    min_sum = min(min_sum + i, i);\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpd3b_ubo0.rs:11:15\n   |\n11 |     min_sum = min(min_sum + i, i);\n   |               ^^^\n...\n16 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum + i, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums {\n    min_sum = min(min_sum, i);\n  }\n  for i in nums {\n    min_sum = min(min_sum, nums[i]);\n    for j in nums[i+1 : i+1+i] {\n      min_sum = min(min_sum, nums[i+j]);\n    }\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpsnif_wmb.rs:11:15\n   |\n11 |     min_sum = min(min_sum, i);\n   |               ^^^\n...\n22 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpsnif_wmb.rs:14:15\n   |\n14 |     min_sum = min(min_sum, nums[i]);\n   |               ^^^\n...\n22 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n14 |     min_sum = main(min_sum, nums[i]);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror[E0573]: expected type, found local variable `i`\n  --> /tmp/tmpsnif_wmb.rs:15:25\n   |\n15 |     for j in nums[i+1 : i+1+i] {\n   |                         ^ expecting a type here because of type ascription\n\nerror[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpsnif_wmb.rs:16:17\n   |\n16 |       min_sum = min(min_sum, nums[i+j]);\n   |                 ^^^\n...\n22 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n16 |       min_sum = main(min_sum, nums[i+j]);\n   |                 ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpsnif_wmb.rs:14:28\n   |\n14 |     min_sum = min(min_sum, nums[i]);\n   |                            ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums {\n    min_sum = min(min_sum + i, i);\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpd3b_ubo0.rs:11:15\n   |\n11 |     min_sum = min(min_sum + i, i);\n   |               ^^^\n...\n16 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum + i, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums.len() - 1 {\n    min_sum = nums[i] + min_sum;\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0277]: `usize` is not an iterator\n  --> /tmp/tmpwni7_o3n.rs:10:12\n   |\n10 |   for i in nums.len() - 1 {\n   |            ^^^^^^^^^^^^^^ `usize` is not an iterator\n   |\n   = help: the trait `Iterator` is not implemented for `usize`\n   = note: if you want to iterate between `start` until a value `end`, use the exclusive range syntax `start..end` or the inclusive range syntax `start..=end`\n   = note: required because of the requirements on the impl of `IntoIterator` for `usize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums {\n    min_sum = min(min_sum + i, i);\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpd3b_ubo0.rs:11:15\n   |\n11 |     min_sum = min(min_sum + i, i);\n   |               ^^^\n...\n16 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum + i, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min = nums[0];\n  for i in nums.len() - 1 {\n    min = min + nums[i];\n    if min < nums[i] {\n      min = nums[i];\n    }\n  }\n  return min;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0277]: `usize` is not an iterator\n  --> /tmp/tmpw0wm1uuk.rs:10:12\n   |\n10 |   for i in nums.len() - 1 {\n   |            ^^^^^^^^^^^^^^ `usize` is not an iterator\n   |\n   = help: the trait `Iterator` is not implemented for `usize`\n   = note: if you want to iterate between `start` until a value `end`, use the exclusive range syntax `start..end` or the inclusive range syntax `start..=end`\n   = note: required because of the requirements on the impl of `IntoIterator` for `usize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums {\n    min_sum = min(min_sum + i, i);\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpd3b_ubo0.rs:11:15\n   |\n11 |     min_sum = min(min_sum + i, i);\n   |               ^^^\n...\n16 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum + i, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min = nums[0];\n  for i in nums {\n    min = min.min(i);\n  }\n  return min;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `min`\n  --> /tmp/tmppmof974z.rs:11:5\n   |\n9  |   let min = nums[0];\n   |       ---\n   |       |\n   |       first assignment to `min`\n   |       help: consider making this binding mutable: `mut min`\n10 |   for i in nums {\n11 |     min = min.min(i);\n   |     ^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums {\n    min_sum = min(min_sum, i);\n  }\n  for i in nums {\n    for j in nums[i + 1 :] {\n      min_sum = min(min_sum, j - i);\n    }\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error: expected type, found `]`\n  --> /tmp/tmporz861il.rs:14:26\n   |\n14 |     for j in nums[i + 1 :] {\n   |                         -^ expected type\n   |                         |\n   |                         help: maybe write a path separator here: `::`\n\nerror[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmporz861il.rs:11:15\n   |\n11 |     min_sum = min(min_sum, i);\n   |               ^^^\n...\n21 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums {\n    min_sum = min(min_sum + i, i);\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpd3b_ubo0.rs:11:15\n   |\n11 |     min_sum = min(min_sum + i, i);\n   |               ^^^\n...\n16 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum + i, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums {\n    min_sum = min(min_sum, i);\n  }\n  for i in nums {\n    min_sum = min(min_sum, nums[i + 1] + min_sum);\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmp6jz8phg5.rs:11:15\n   |\n11 |     min_sum = min(min_sum, i);\n   |               ^^^\n...\n19 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmp6jz8phg5.rs:14:15\n   |\n14 |     min_sum = min(min_sum, nums[i + 1] + min_sum);\n   |               ^^^\n...\n19 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n14 |     min_sum = main(min_sum, nums[i + 1] + min_sum);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp6jz8phg5.rs:14:28\n   |\n14 |     min_sum = min(min_sum, nums[i + 1] + min_sum);\n   |                            ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0425.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums {\n    min_sum = min(min_sum + i, i);\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpd3b_ubo0.rs:11:15\n   |\n11 |     min_sum = min(min_sum + i, i);\n   |               ^^^\n...\n16 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum + i, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums {\n    min_sum = min(min_sum, i);\n  }\n  for i in nums {\n    min_sum = min(min_sum, nums[i + 1] + min_sum);\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmp6jz8phg5.rs:11:15\n   |\n11 |     min_sum = min(min_sum, i);\n   |               ^^^\n...\n19 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmp6jz8phg5.rs:14:15\n   |\n14 |     min_sum = min(min_sum, nums[i + 1] + min_sum);\n   |               ^^^\n...\n19 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n14 |     min_sum = main(min_sum, nums[i + 1] + min_sum);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp6jz8phg5.rs:14:28\n   |\n14 |     min_sum = min(min_sum, nums[i + 1] + min_sum);\n   |                            ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0425.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min = nums[0];\n  let sum = nums[0];\n  for i in nums.iter() {\n    if i > 0 {\n      sum += i;\n      if min > sum {\n        min = sum;\n      }\n    }\n  }\n  return min;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpvnmo0ep4.rs:12:12\n   |\n12 |     if i > 0 {\n   |            ^\n   |            |\n   |            expected `&isize`, found integer\n   |            help: consider borrowing here: `&0`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums {\n    min_sum = min(min_sum + i, i);\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpd3b_ubo0.rs:11:15\n   |\n11 |     min_sum = min(min_sum + i, i);\n   |               ^^^\n...\n16 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum + i, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums {\n    min_sum = min(min_sum, i);\n  }\n  for i in nums {\n    min_sum = min(min_sum, nums[i]);\n    for j in nums[i + 1 :] {\n      min_sum = min(min_sum, nums[i] + nums[j]);\n    }\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error: expected type, found `]`\n  --> /tmp/tmptmsvzno6.rs:15:26\n   |\n15 |     for j in nums[i + 1 :] {\n   |                         -^ expected type\n   |                         |\n   |                         help: maybe write a path separator here: `::`\n\nerror[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmptmsvzno6.rs:11:15\n   |\n11 |     min_sum = min(min_sum, i);\n   |               ^^^\n...\n22 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmptmsvzno6.rs:14:15\n   |\n14 |     min_sum = min(min_sum, nums[i]);\n   |               ^^^\n...\n22 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n14 |     min_sum = main(min_sum, nums[i]);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmptmsvzno6.rs:14:28\n   |\n14 |     min_sum = min(min_sum, nums[i]);\n   |                            ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0425.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums.iter() {\n    min_sum = min(min_sum + i, i);\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmp8fmts83y.rs:11:15\n   |\n11 |     min_sum = min(min_sum + i, i);\n   |               ^^^\n...\n16 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum + i, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums {\n    min_sum = min(min_sum + i, i);\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpd3b_ubo0.rs:11:15\n   |\n11 |     min_sum = min(min_sum + i, i);\n   |               ^^^\n...\n16 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum + i, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums {\n    min_sum = min(min_sum + i, i);\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpd3b_ubo0.rs:11:15\n   |\n11 |     min_sum = min(min_sum + i, i);\n   |               ^^^\n...\n16 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum + i, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums {\n    min_sum = min(min_sum + i, i);\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpd3b_ubo0.rs:11:15\n   |\n11 |     min_sum = min(min_sum + i, i);\n   |               ^^^\n...\n16 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum + i, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums {\n    min_sum = min(min_sum, i);\n  }\n  for i in nums {\n    for j in nums[i + 1:];\n      j < nums.len;\n      j += 1 {\n        min_sum = min(min_sum, i + j);\n      }\n    }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error: expected type, found `]`\n  --> /tmp/tmp2vddz_pp.rs:14:25\n   |\n14 |     for j in nums[i + 1:];\n   |                        -^ expected type\n   |                        |\n   |                        tried to parse a type due to this\n\nerror[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmp2vddz_pp.rs:11:15\n   |\n11 |     min_sum = min(min_sum, i);\n   |               ^^^\n...\n23 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min = nums[0];\n  for i in nums.iter() {\n    min = min.min(i);\n  }\n  return min;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmppx7cggbd.rs:11:19\n   |\n11 |     min = min.min(i);\n   |                   ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n11 |     min = min.min(*i);\n   |                   +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums {\n    min_sum = min(min_sum + i, i);\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpd3b_ubo0.rs:11:15\n   |\n11 |     min_sum = min(min_sum + i, i);\n   |               ^^^\n...\n16 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum + i, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums {\n    min_sum = min(min_sum, i);\n  }\n  for i in nums {\n    for j in nums[i + 1 :] {\n      min_sum = min(min_sum, j - i);\n    }\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error: expected type, found `]`\n  --> /tmp/tmporz861il.rs:14:26\n   |\n14 |     for j in nums[i + 1 :] {\n   |                         -^ expected type\n   |                         |\n   |                         help: maybe write a path separator here: `::`\n\nerror[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmporz861il.rs:11:15\n   |\n11 |     min_sum = min(min_sum, i);\n   |               ^^^\n...\n21 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums {\n    min_sum = min(min_sum + i, i);\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpd3b_ubo0.rs:11:15\n   |\n11 |     min_sum = min(min_sum + i, i);\n   |               ^^^\n...\n16 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum + i, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums {\n    min_sum = min(min_sum + i, i);\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpd3b_ubo0.rs:11:15\n   |\n11 |     min_sum = min(min_sum + i, i);\n   |               ^^^\n...\n16 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum + i, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums {\n    min_sum = min(min_sum + i, i);\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpd3b_ubo0.rs:11:15\n   |\n11 |     min_sum = min(min_sum + i, i);\n   |               ^^^\n...\n16 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum + i, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums {\n    min_sum = min(min_sum + i, i);\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpd3b_ubo0.rs:11:15\n   |\n11 |     min_sum = min(min_sum + i, i);\n   |               ^^^\n...\n16 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum + i, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums {\n    min_sum = min(min_sum + i, i);\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpd3b_ubo0.rs:11:15\n   |\n11 |     min_sum = min(min_sum + i, i);\n   |               ^^^\n...\n16 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum + i, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums {\n    min_sum = min(min_sum + i, i);\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpd3b_ubo0.rs:11:15\n   |\n11 |     min_sum = min(min_sum + i, i);\n   |               ^^^\n...\n16 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum + i, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums {\n    min_sum = min(min_sum + i, i);\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpd3b_ubo0.rs:11:15\n   |\n11 |     min_sum = min(min_sum + i, i);\n   |               ^^^\n...\n16 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum + i, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums {\n    min_sum = min(min_sum, i);\n  }\n  for i in nums {\n    for j in nums[i + 1:];\n      j < nums.len;\n      j += 1 {\n        min_sum = min(min_sum, j - i);\n      }\n    }\n  }\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error: unexpected closing delimiter: `}`\n  --> /tmp/tmpuhvnysto.rs:21:1\n   |\n8  | fn minSubArraySum(nums: Vec<isize>) -> isize {\n   |                                              - this opening brace...\n...\n20 |   }\n   |   - ...matches this closing brace\n21 | }\n   | ^ unexpected closing delimiter\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums.iter() {\n    min_sum = min(min_sum, i + minSubArraySum(nums.slice(i + 1)));\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpcjirb7ks.rs:11:15\n   |\n11 |     min_sum = min(min_sum, i + minSubArraySum(nums.slice(i + 1)));\n   |               ^^^\n...\n16 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum, i + minSubArraySum(nums.slice(i + 1)));\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror[E0599]: no method named `slice` found for struct `Vec<isize>` in the current scope\n  --> /tmp/tmpcjirb7ks.rs:11:52\n   |\n11 |     min_sum = min(min_sum, i + minSubArraySum(nums.slice(i + 1)));\n   |                                                    ^^^^^\n   |\n   = help: items from traits can only be used if the trait is in scope\nhelp: the following trait is implemented but not in scope; perhaps add a `use` for it:\n   |\n1  | use std::collections::vec_deque::ring_slices::RingSlices;\n   |\nhelp: there is an associated function with a similar name\n   |\n11 |     min_sum = min(min_sum, i + minSubArraySum(nums.as_slice(i + 1)));\n   |                                                    ~~~~~~~~\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0425, E0599.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums {\n    min_sum = min(min_sum + i, i);\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpd3b_ubo0.rs:11:15\n   |\n11 |     min_sum = min(min_sum + i, i);\n   |               ^^^\n...\n16 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum + i, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums {\n    min_sum = min(min_sum + i, i);\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpd3b_ubo0.rs:11:15\n   |\n11 |     min_sum = min(min_sum + i, i);\n   |               ^^^\n...\n16 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum + i, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums {\n    min_sum = min(min_sum, i);\n  }\n  for i in nums {\n    min_sum = min(min_sum, nums[i + 1] + min_sum);\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmp6jz8phg5.rs:11:15\n   |\n11 |     min_sum = min(min_sum, i);\n   |               ^^^\n...\n19 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmp6jz8phg5.rs:14:15\n   |\n14 |     min_sum = min(min_sum, nums[i + 1] + min_sum);\n   |               ^^^\n...\n19 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n14 |     min_sum = main(min_sum, nums[i + 1] + min_sum);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp6jz8phg5.rs:14:28\n   |\n14 |     min_sum = min(min_sum, nums[i + 1] + min_sum);\n   |                            ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0425.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums {\n    min_sum = min(min_sum, i);\n  }\n  for i in nums {\n    for j in nums[i + 1 :] {\n      min_sum = min(min_sum, j + i);\n    }\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error: expected type, found `]`\n  --> /tmp/tmpb6b9ffnk.rs:14:26\n   |\n14 |     for j in nums[i + 1 :] {\n   |                         -^ expected type\n   |                         |\n   |                         help: maybe write a path separator here: `::`\n\nerror[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpb6b9ffnk.rs:11:15\n   |\n11 |     min_sum = min(min_sum, i);\n   |               ^^^\n...\n21 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums {\n    min_sum = min(min_sum + i, i);\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpd3b_ubo0.rs:11:15\n   |\n11 |     min_sum = min(min_sum + i, i);\n   |               ^^^\n...\n16 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum + i, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums {\n    min_sum = min(min_sum + i, i);\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmpd3b_ubo0.rs:11:15\n   |\n11 |     min_sum = min(min_sum + i, i);\n   |               ^^^\n...\n16 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum + i, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min = nums[0];\n  for i in nums {\n    min = min.min(i);\n  }\n  return min;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `min`\n  --> /tmp/tmppmof974z.rs:11:5\n   |\n9  |   let min = nums[0];\n   |       ---\n   |       |\n   |       first assignment to `min`\n   |       help: consider making this binding mutable: `mut min`\n10 |   for i in nums {\n11 |     min = min.min(i);\n   |     ^^^^^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n/// of nums.\n/// Example\n/// >>> minSubArraySum(vec![2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(vec![-1, -2, -3])\n/// -6\nfn minSubArraySum(nums: Vec<isize>) -> isize {\n  let min_sum = nums[0];\n  for i in nums {\n    min_sum = min(min_sum, i);\n  }\n  for i in nums {\n    min_sum = min(min_sum, nums[i + 1] + min_sum);\n  }\n  return min_sum;\n}\n\nfn main() {\n    let candidate = minSubArraySum;\n    assert_eq!(candidate(vec![2, 3, 4, 1, 2, 4]), 1);\n    assert_eq!(candidate(vec![-1, -2, -3]), -6);\n    assert_eq!(candidate(vec![-1, -2, -3, 2, -10]), -14);\n    assert_eq!(candidate(vec![-9999999999999999]), -9999999999999999);\n    assert_eq!(candidate(vec![0, 10, 20, 1000000]), 0);\n    assert_eq!(candidate(vec![-1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![100, -1, -2, -3, 10, -5]), -6);\n    assert_eq!(candidate(vec![10, 11, 13, 8, 3, 4]), 3);\n    assert_eq!(candidate(vec![100, -33, 32, -1, 0, -2]), -33);\n    assert_eq!(candidate(vec![-10]), -10);\n    assert_eq!(candidate(vec![7]), 7);\n    assert_eq!(candidate(vec![1, -1]), -1);\n}\n",
      "timestamp": 1664292875,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmp6jz8phg5.rs:11:15\n   |\n11 |     min_sum = min(min_sum, i);\n   |               ^^^\n...\n19 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n11 |     min_sum = main(min_sum, i);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror[E0425]: cannot find function `min` in this scope\n  --> /tmp/tmp6jz8phg5.rs:14:15\n   |\n14 |     min_sum = min(min_sum, nums[i + 1] + min_sum);\n   |               ^^^\n...\n19 | fn main() {\n   | --------- similarly named function `main` defined here\n   |\nhelp: a function with a similar name exists\n   |\n14 |     min_sum = main(min_sum, nums[i + 1] + min_sum);\n   |               ~~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::min;\n   |\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp6jz8phg5.rs:14:28\n   |\n14 |     min_sum = min(min_sum, nums[i + 1] + min_sum);\n   |                            ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0425.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}