{
  "name": "HumanEval_30_get_positive",
  "language": "rs",
  "prompt": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n",
  "tests": "}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n    let positive = Vec::new(0);\n    for i in l {\n        if i > 0 {\n            positive = positive.push_back(i);\n        }\n    }\n    return positive;\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp07ia7sdy.rs:7:20\n    |\n7   |     let positive = Vec::new(0);\n    |                    ^^^^^^^^ - supplied 1 argument\n    |                    |\n    |                    expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmp07ia7sdy.rs:10:33\n   |\n10 |             positive = positive.push_back(i);\n   |                                 ^^^^^^^^^ method not found in `Vec<_>`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0061, E0599.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n  let positive = Vec::new(0);\n  for v in l {\n    if v > 0 {\n      positive = positive.push_back(v);\n    }\n  }\n  return positive;\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpoywzihog.rs:7:18\n    |\n7   |   let positive = Vec::new(0);\n    |                  ^^^^^^^^ - supplied 1 argument\n    |                  |\n    |                  expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmpoywzihog.rs:10:27\n   |\n10 |       positive = positive.push_back(v);\n   |                           ^^^^^^^^^ method not found in `Vec<_>`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0061, E0599.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n  let positive = Vec::new(0);\n  for v in l {\n    if v > 0 {\n      positive = positive.concat(v);\n    }\n  }\n  return positive;\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmperyx9497.rs:7:18\n    |\n7   |   let positive = Vec::new(0);\n    |                  ^^^^^^^^ - supplied 1 argument\n    |                  |\n    |                  expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmperyx9497.rs:10:27\n    |\n10  |       positive = positive.concat(v);\n    |                           ^^^^^^ - supplied 1 argument\n    |                           |\n    |                           expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0277]: the trait bound `[isize]: Concat<_>` is not satisfied\n   --> /tmp/tmperyx9497.rs:10:27\n    |\n10  |       positive = positive.concat(v);\n    |                           ^^^^^^ the trait `Concat<_>` is not implemented for `[isize]`\n    |\n    = help: the following other types implement trait `Concat<Item>`:\n              <[S] as Concat<str>>\n              <[V] as Concat<T>>\nnote: required by a bound in `slice::<impl [T]>::concat`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0061, E0277.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n    let positive = Vec::new(0);\n    for i in l {\n        if i > 0 {\n            positive = positive.append(i);\n        }\n    }\n    return positive;\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp5pj20kk0.rs:7:20\n    |\n7   |     let positive = Vec::new(0);\n    |                    ^^^^^^^^ - supplied 1 argument\n    |                    |\n    |                    expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp5pj20kk0.rs:10:40\n   |\n10 |             positive = positive.append(i);\n   |                                        ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp5pj20kk0.rs:10:24\n   |\n7  |     let positive = Vec::new(0);\n   |                    ----------- expected due to this value\n...\n10 |             positive = positive.append(i);\n   |                        ^^^^^^^^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |\n   = note: expected struct `Vec<_>`\n           found unit type `()`\nnote: method `append` modifies its receiver in-place\n  --> /tmp/tmp5pj20kk0.rs:10:33\n   |\n10 |             positive = positive.append(i);\n   |                        -------- ^^^^^^ this call modifies `positive` in-place\n   |                        |\n   |                        you probably want to use this value after calling the method...\n   = note: ...instead of the `()` output of method `append`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0061, E0308.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in l {\n        if i > 0 {\n            result.append(i);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpgbn12nu_.rs:10:27\n   |\n10 |             result.append(i);\n   |                           ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n    let positive = Vec::new(0);\n    for v in l {\n        if v > 0 {\n            positive = positive.append(v);\n        }\n    }\n    return positive;\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmptfdekz_0.rs:7:20\n    |\n7   |     let positive = Vec::new(0);\n    |                    ^^^^^^^^ - supplied 1 argument\n    |                    |\n    |                    expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptfdekz_0.rs:10:40\n   |\n10 |             positive = positive.append(v);\n   |                                        ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptfdekz_0.rs:10:24\n   |\n7  |     let positive = Vec::new(0);\n   |                    ----------- expected due to this value\n...\n10 |             positive = positive.append(v);\n   |                        ^^^^^^^^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |\n   = note: expected struct `Vec<_>`\n           found unit type `()`\nnote: method `append` modifies its receiver in-place\n  --> /tmp/tmptfdekz_0.rs:10:33\n   |\n10 |             positive = positive.append(v);\n   |                        -------- ^^^^^^ this call modifies `positive` in-place\n   |                        |\n   |                        you probably want to use this value after calling the method...\n   = note: ...instead of the `()` output of method `append`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0061, E0308.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  for i in l {\n    if i > 0 {\n      result.append(i);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp532ud2bo.rs:10:21\n   |\n10 |       result.append(i);\n   |                     ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n  let positive = Vec::new(0);\n  for v in l {\n    if v > 0 {\n      positive = positive.concat(v);\n    }\n  }\n  positive\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpgapjyy8o.rs:7:18\n    |\n7   |   let positive = Vec::new(0);\n    |                  ^^^^^^^^ - supplied 1 argument\n    |                  |\n    |                  expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpgapjyy8o.rs:10:27\n    |\n10  |       positive = positive.concat(v);\n    |                           ^^^^^^ - supplied 1 argument\n    |                           |\n    |                           expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0277]: the trait bound `[isize]: Concat<_>` is not satisfied\n   --> /tmp/tmpgapjyy8o.rs:10:27\n    |\n10  |       positive = positive.concat(v);\n    |                           ^^^^^^ the trait `Concat<_>` is not implemented for `[isize]`\n    |\n    = help: the following other types implement trait `Concat<Item>`:\n              <[S] as Concat<str>>\n              <[V] as Concat<T>>\nnote: required by a bound in `slice::<impl [T]>::concat`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0061, E0277.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  for i in l {\n    if i > 0 {\n      result.append(i);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp532ud2bo.rs:10:21\n   |\n10 |       result.append(i);\n   |                     ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n  let positive = Vec::new(0);\n  for v in l {\n    if v > 0 {\n      positive = positive.push_back(v);\n    }\n  }\n  positive\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp9yiwrf71.rs:7:18\n    |\n7   |   let positive = Vec::new(0);\n    |                  ^^^^^^^^ - supplied 1 argument\n    |                  |\n    |                  expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmp9yiwrf71.rs:10:27\n   |\n10 |       positive = positive.push_back(v);\n   |                           ^^^^^^^^^ method not found in `Vec<_>`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0061, E0599.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n    let positive = Vec::new(0);\n    for v in l {\n        if v > 0 {\n            positive = positive.concat(v);\n        }\n    }\n    return positive;\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpcx96xpi_.rs:7:20\n    |\n7   |     let positive = Vec::new(0);\n    |                    ^^^^^^^^ - supplied 1 argument\n    |                    |\n    |                    expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpcx96xpi_.rs:10:33\n    |\n10  |             positive = positive.concat(v);\n    |                                 ^^^^^^ - supplied 1 argument\n    |                                 |\n    |                                 expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0277]: the trait bound `[isize]: Concat<_>` is not satisfied\n   --> /tmp/tmpcx96xpi_.rs:10:33\n    |\n10  |             positive = positive.concat(v);\n    |                                 ^^^^^^ the trait `Concat<_>` is not implemented for `[isize]`\n    |\n    = help: the following other types implement trait `Concat<Item>`:\n              <[S] as Concat<str>>\n              <[V] as Concat<T>>\nnote: required by a bound in `slice::<impl [T]>::concat`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0061, E0277.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n    let positive = Vec::new(0);\n    for v in l {\n        if v > 0 {\n            positive = positive.append(v);\n        }\n    }\n    return positive;\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmptfdekz_0.rs:7:20\n    |\n7   |     let positive = Vec::new(0);\n    |                    ^^^^^^^^ - supplied 1 argument\n    |                    |\n    |                    expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptfdekz_0.rs:10:40\n   |\n10 |             positive = positive.append(v);\n   |                                        ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptfdekz_0.rs:10:24\n   |\n7  |     let positive = Vec::new(0);\n   |                    ----------- expected due to this value\n...\n10 |             positive = positive.append(v);\n   |                        ^^^^^^^^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |\n   = note: expected struct `Vec<_>`\n           found unit type `()`\nnote: method `append` modifies its receiver in-place\n  --> /tmp/tmptfdekz_0.rs:10:33\n   |\n10 |             positive = positive.append(v);\n   |                        -------- ^^^^^^ this call modifies `positive` in-place\n   |                        |\n   |                        you probably want to use this value after calling the method...\n   = note: ...instead of the `()` output of method `append`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0061, E0308.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in l {\n        if i > 0 {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in l {\n        if i > 0 {\n            result.append(i);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpgbn12nu_.rs:10:27\n   |\n10 |             result.append(i);\n   |                           ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in l {\n        if i > 0 {\n            result.append(i);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpgbn12nu_.rs:10:27\n   |\n10 |             result.append(i);\n   |                           ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n    let mut positive = Vec::new();\n    for i in l {\n        if i > 0 {\n            positive.push(i);\n        }\n    }\n    positive\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n    let positive = Vec::new(l.len);\n    for i in 0..l.len {\n        if l[i] > 0 {\n            positive[i] = l[i];\n        }\n    }\n    positive\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0616]: field `len` of struct `Vec` is private\n --> /tmp/tmp0_mbepyi.rs:7:31\n  |\n7 |     let positive = Vec::new(l.len);\n  |                               ^^^ private field\n  |\nhelp: a method `len` also exists, call it with parentheses\n  |\n7 |     let positive = Vec::new(l.len());\n  |                                  ++\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp0_mbepyi.rs:7:20\n    |\n7   |     let positive = Vec::new(l.len);\n    |                    ^^^^^^^^ ----- supplied 1 argument\n    |                    |\n    |                    expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0616]: field `len` of struct `Vec` is private\n --> /tmp/tmp0_mbepyi.rs:8:19\n  |\n8 |     for i in 0..l.len {\n  |                   ^^^ private field\n  |\nhelp: a method `len` also exists, call it with parentheses\n  |\n8 |     for i in 0..l.len() {\n  |                      ++\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0061, E0616.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n  let positive = Vec::new(0);\n  for v in l {\n    if v > 0 {\n      positive = positive.concat(v);\n    }\n  }\n  positive\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpgapjyy8o.rs:7:18\n    |\n7   |   let positive = Vec::new(0);\n    |                  ^^^^^^^^ - supplied 1 argument\n    |                  |\n    |                  expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpgapjyy8o.rs:10:27\n    |\n10  |       positive = positive.concat(v);\n    |                           ^^^^^^ - supplied 1 argument\n    |                           |\n    |                           expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0277]: the trait bound `[isize]: Concat<_>` is not satisfied\n   --> /tmp/tmpgapjyy8o.rs:10:27\n    |\n10  |       positive = positive.concat(v);\n    |                           ^^^^^^ the trait `Concat<_>` is not implemented for `[isize]`\n    |\n    = help: the following other types implement trait `Concat<Item>`:\n              <[S] as Concat<str>>\n              <[V] as Concat<T>>\nnote: required by a bound in `slice::<impl [T]>::concat`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0061, E0277.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n    let positive = Vec::new(0);\n    for i in l {\n        if i > 0 {\n            positive = positive.append(i);\n        }\n    }\n    return positive;\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp5pj20kk0.rs:7:20\n    |\n7   |     let positive = Vec::new(0);\n    |                    ^^^^^^^^ - supplied 1 argument\n    |                    |\n    |                    expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp5pj20kk0.rs:10:40\n   |\n10 |             positive = positive.append(i);\n   |                                        ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp5pj20kk0.rs:10:24\n   |\n7  |     let positive = Vec::new(0);\n   |                    ----------- expected due to this value\n...\n10 |             positive = positive.append(i);\n   |                        ^^^^^^^^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |\n   = note: expected struct `Vec<_>`\n           found unit type `()`\nnote: method `append` modifies its receiver in-place\n  --> /tmp/tmp5pj20kk0.rs:10:33\n   |\n10 |             positive = positive.append(i);\n   |                        -------- ^^^^^^ this call modifies `positive` in-place\n   |                        |\n   |                        you probably want to use this value after calling the method...\n   = note: ...instead of the `()` output of method `append`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0061, E0308.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in l {\n        if i > 0 {\n            result.append(i);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpgbn12nu_.rs:10:27\n   |\n10 |             result.append(i);\n   |                           ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n  let positive = Vec::new(0);\n  for v in l {\n    if v > 0 {\n      positive = positive.concat(v);\n    }\n  }\n  return positive;\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmperyx9497.rs:7:18\n    |\n7   |   let positive = Vec::new(0);\n    |                  ^^^^^^^^ - supplied 1 argument\n    |                  |\n    |                  expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmperyx9497.rs:10:27\n    |\n10  |       positive = positive.concat(v);\n    |                           ^^^^^^ - supplied 1 argument\n    |                           |\n    |                           expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0277]: the trait bound `[isize]: Concat<_>` is not satisfied\n   --> /tmp/tmperyx9497.rs:10:27\n    |\n10  |       positive = positive.concat(v);\n    |                           ^^^^^^ the trait `Concat<_>` is not implemented for `[isize]`\n    |\n    = help: the following other types implement trait `Concat<Item>`:\n              <[S] as Concat<str>>\n              <[V] as Concat<T>>\nnote: required by a bound in `slice::<impl [T]>::concat`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0061, E0277.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in l {\n        if i > 0 {\n            result.append(i);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpgbn12nu_.rs:10:27\n   |\n10 |             result.append(i);\n   |                           ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n  let positive = Vec::new(0);\n  for v in l {\n    if v > 0 {\n      positive = positive.append(v);\n    }\n  }\n  positive\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpbsi6u_06.rs:7:18\n    |\n7   |   let positive = Vec::new(0);\n    |                  ^^^^^^^^ - supplied 1 argument\n    |                  |\n    |                  expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpbsi6u_06.rs:10:34\n   |\n10 |       positive = positive.append(v);\n   |                                  ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpbsi6u_06.rs:10:18\n   |\n7  |   let positive = Vec::new(0);\n   |                  ----------- expected due to this value\n...\n10 |       positive = positive.append(v);\n   |                  ^^^^^^^^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |\n   = note: expected struct `Vec<_>`\n           found unit type `()`\nnote: method `append` modifies its receiver in-place\n  --> /tmp/tmpbsi6u_06.rs:10:27\n   |\n10 |       positive = positive.append(v);\n   |                  -------- ^^^^^^ this call modifies `positive` in-place\n   |                  |\n   |                  you probably want to use this value after calling the method...\n   = note: ...instead of the `()` output of method `append`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0061, E0308.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in l {\n        if i > 0 {\n            result.append(i);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpgbn12nu_.rs:10:27\n   |\n10 |             result.append(i);\n   |                           ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  for i in l {\n    if i > 0 {\n      result.append(i);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp532ud2bo.rs:10:21\n   |\n10 |       result.append(i);\n   |                     ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n    let positive = Vec::new(0);\n    for v in l {\n        if v > 0 {\n            positive = positive.append(v);\n        }\n    }\n    return positive;\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmptfdekz_0.rs:7:20\n    |\n7   |     let positive = Vec::new(0);\n    |                    ^^^^^^^^ - supplied 1 argument\n    |                    |\n    |                    expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptfdekz_0.rs:10:40\n   |\n10 |             positive = positive.append(v);\n   |                                        ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptfdekz_0.rs:10:24\n   |\n7  |     let positive = Vec::new(0);\n   |                    ----------- expected due to this value\n...\n10 |             positive = positive.append(v);\n   |                        ^^^^^^^^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |\n   = note: expected struct `Vec<_>`\n           found unit type `()`\nnote: method `append` modifies its receiver in-place\n  --> /tmp/tmptfdekz_0.rs:10:33\n   |\n10 |             positive = positive.append(v);\n   |                        -------- ^^^^^^ this call modifies `positive` in-place\n   |                        |\n   |                        you probably want to use this value after calling the method...\n   = note: ...instead of the `()` output of method `append`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0061, E0308.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n    let pos = 0;\n    for v in l {\n        if v > 0 {\n            pos += 1;\n        }\n    }\n    return l.slice(pos, l.len);\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0599]: no method named `slice` found for struct `Vec<isize>` in the current scope\n  --> /tmp/tmpnhmc4eme.rs:13:14\n   |\n13 |     return l.slice(pos, l.len);\n   |              ^^^^^\n   |\n   = help: items from traits can only be used if the trait is in scope\nhelp: the following trait is implemented but not in scope; perhaps add a `use` for it:\n   |\n1  | use std::collections::vec_deque::ring_slices::RingSlices;\n   |\nhelp: there is an associated function with a similar name\n   |\n13 |     return l.as_slice(pos, l.len);\n   |              ~~~~~~~~\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpnhmc4eme.rs:13:27\n   |\n13 |     return l.slice(pos, l.len);\n   |                           ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |     return l.slice(pos, l.len());\n   |                              ++\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0599, E0616.\nFor more information about an error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n  let positive = Vec::new(0);\n  for v in l {\n    if v > 0 {\n      positive = positive.push_back(v);\n    }\n  }\n  return positive;\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpoywzihog.rs:7:18\n    |\n7   |   let positive = Vec::new(0);\n    |                  ^^^^^^^^ - supplied 1 argument\n    |                  |\n    |                  expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmpoywzihog.rs:10:27\n   |\n10 |       positive = positive.push_back(v);\n   |                           ^^^^^^^^^ method not found in `Vec<_>`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0061, E0599.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  for i in l {\n    if i > 0 {\n      result.append(i);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp532ud2bo.rs:10:21\n   |\n10 |       result.append(i);\n   |                     ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n    let positive = Vec::new(l.len);\n    for i in 0..l.len {\n        if l[i] > 0 {\n            positive[i] = l[i];\n        }\n    }\n    positive\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0616]: field `len` of struct `Vec` is private\n --> /tmp/tmp0_mbepyi.rs:7:31\n  |\n7 |     let positive = Vec::new(l.len);\n  |                               ^^^ private field\n  |\nhelp: a method `len` also exists, call it with parentheses\n  |\n7 |     let positive = Vec::new(l.len());\n  |                                  ++\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp0_mbepyi.rs:7:20\n    |\n7   |     let positive = Vec::new(l.len);\n    |                    ^^^^^^^^ ----- supplied 1 argument\n    |                    |\n    |                    expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0616]: field `len` of struct `Vec` is private\n --> /tmp/tmp0_mbepyi.rs:8:19\n  |\n8 |     for i in 0..l.len {\n  |                   ^^^ private field\n  |\nhelp: a method `len` also exists, call it with parentheses\n  |\n8 |     for i in 0..l.len() {\n  |                      ++\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0061, E0616.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  for i in l {\n    if i > 0 {\n      result.append(i);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp532ud2bo.rs:10:21\n   |\n10 |       result.append(i);\n   |                     ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n    let positive = Vec::new(l.len);\n    for i in l.iter() {\n        if i.is_negative() {\n            continue;\n        }\n        positive.append(i);\n    }\n    return positive;\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0616]: field `len` of struct `Vec` is private\n --> /tmp/tmp0epl3ld3.rs:7:31\n  |\n7 |     let positive = Vec::new(l.len);\n  |                               ^^^ private field\n  |\nhelp: a method `len` also exists, call it with parentheses\n  |\n7 |     let positive = Vec::new(l.len());\n  |                                  ++\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp0epl3ld3.rs:7:20\n    |\n7   |     let positive = Vec::new(l.len);\n    |                    ^^^^^^^^ ----- supplied 1 argument\n    |                    |\n    |                    expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp0epl3ld3.rs:12:25\n   |\n12 |         positive.append(i);\n   |                         ^ types differ in mutability\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                      found reference `&isize`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0061, E0308, E0616.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n  let positive = Vec::new(0);\n  for v in l {\n    if v > 0 {\n      positive = positive.push_back(v);\n    }\n  }\n  return positive;\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpoywzihog.rs:7:18\n    |\n7   |   let positive = Vec::new(0);\n    |                  ^^^^^^^^ - supplied 1 argument\n    |                  |\n    |                  expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmpoywzihog.rs:10:27\n   |\n10 |       positive = positive.push_back(v);\n   |                           ^^^^^^^^^ method not found in `Vec<_>`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0061, E0599.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n    let positive = Vec::new(0);\n    for v in l {\n        if v > 0 {\n            positive = positive.append(v);\n        }\n    }\n    positive\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmprfitzkh1.rs:7:20\n    |\n7   |     let positive = Vec::new(0);\n    |                    ^^^^^^^^ - supplied 1 argument\n    |                    |\n    |                    expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0308]: mismatched types\n  --> /tmp/tmprfitzkh1.rs:10:40\n   |\n10 |             positive = positive.append(v);\n   |                                        ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmprfitzkh1.rs:10:24\n   |\n7  |     let positive = Vec::new(0);\n   |                    ----------- expected due to this value\n...\n10 |             positive = positive.append(v);\n   |                        ^^^^^^^^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |\n   = note: expected struct `Vec<_>`\n           found unit type `()`\nnote: method `append` modifies its receiver in-place\n  --> /tmp/tmprfitzkh1.rs:10:33\n   |\n10 |             positive = positive.append(v);\n   |                        -------- ^^^^^^ this call modifies `positive` in-place\n   |                        |\n   |                        you probably want to use this value after calling the method...\n   = note: ...instead of the `()` output of method `append`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0061, E0308.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n    let positive = Vec::new(0);\n    for v in l {\n        if v > 0 {\n            positive = positive.append(v);\n        }\n    }\n    return positive;\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmptfdekz_0.rs:7:20\n    |\n7   |     let positive = Vec::new(0);\n    |                    ^^^^^^^^ - supplied 1 argument\n    |                    |\n    |                    expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptfdekz_0.rs:10:40\n   |\n10 |             positive = positive.append(v);\n   |                                        ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptfdekz_0.rs:10:24\n   |\n7  |     let positive = Vec::new(0);\n   |                    ----------- expected due to this value\n...\n10 |             positive = positive.append(v);\n   |                        ^^^^^^^^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |\n   = note: expected struct `Vec<_>`\n           found unit type `()`\nnote: method `append` modifies its receiver in-place\n  --> /tmp/tmptfdekz_0.rs:10:33\n   |\n10 |             positive = positive.append(v);\n   |                        -------- ^^^^^^ this call modifies `positive` in-place\n   |                        |\n   |                        you probably want to use this value after calling the method...\n   = note: ...instead of the `()` output of method `append`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0061, E0308.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n  let positive = Vec::new(0);\n  for v in l {\n    if v > 0 {\n      positive = positive.push_back(v);\n    }\n  }\n  return positive;\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpoywzihog.rs:7:18\n    |\n7   |   let positive = Vec::new(0);\n    |                  ^^^^^^^^ - supplied 1 argument\n    |                  |\n    |                  expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmpoywzihog.rs:10:27\n   |\n10 |       positive = positive.push_back(v);\n   |                           ^^^^^^^^^ method not found in `Vec<_>`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0061, E0599.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n    let positive = Vec::new(0);\n    for v in l {\n        if v > 0 {\n            positive = positive.push_back(v);\n        }\n    }\n    return positive;\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpn8pj125p.rs:7:20\n    |\n7   |     let positive = Vec::new(0);\n    |                    ^^^^^^^^ - supplied 1 argument\n    |                    |\n    |                    expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmpn8pj125p.rs:10:33\n   |\n10 |             positive = positive.push_back(v);\n   |                                 ^^^^^^^^^ method not found in `Vec<_>`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0061, E0599.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in l {\n        if i > 0 {\n            result.append(i);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpgbn12nu_.rs:10:27\n   |\n10 |             result.append(i);\n   |                           ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in l {\n        if i > 0 {\n            result.append(i);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpgbn12nu_.rs:10:27\n   |\n10 |             result.append(i);\n   |                           ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n  let positive = Vec::new(0);\n  for v in l {\n    if v > 0 {\n      positive = positive.append(v);\n    }\n  }\n  positive\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpbsi6u_06.rs:7:18\n    |\n7   |   let positive = Vec::new(0);\n    |                  ^^^^^^^^ - supplied 1 argument\n    |                  |\n    |                  expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpbsi6u_06.rs:10:34\n   |\n10 |       positive = positive.append(v);\n   |                                  ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpbsi6u_06.rs:10:18\n   |\n7  |   let positive = Vec::new(0);\n   |                  ----------- expected due to this value\n...\n10 |       positive = positive.append(v);\n   |                  ^^^^^^^^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |\n   = note: expected struct `Vec<_>`\n           found unit type `()`\nnote: method `append` modifies its receiver in-place\n  --> /tmp/tmpbsi6u_06.rs:10:27\n   |\n10 |       positive = positive.append(v);\n   |                  -------- ^^^^^^ this call modifies `positive` in-place\n   |                  |\n   |                  you probably want to use this value after calling the method...\n   = note: ...instead of the `()` output of method `append`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0061, E0308.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n    let positive = Vec::new(0);\n    for v in l {\n        if v > 0 {\n            positive = positive.push_back(v);\n        }\n    }\n    return positive;\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpn8pj125p.rs:7:20\n    |\n7   |     let positive = Vec::new(0);\n    |                    ^^^^^^^^ - supplied 1 argument\n    |                    |\n    |                    expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmpn8pj125p.rs:10:33\n   |\n10 |             positive = positive.push_back(v);\n   |                                 ^^^^^^^^^ method not found in `Vec<_>`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0061, E0599.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n    let positive = Vec::new(0);\n    for v in l {\n        if v > 0 {\n            positive = positive.append(v);\n        }\n    }\n    return positive;\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmptfdekz_0.rs:7:20\n    |\n7   |     let positive = Vec::new(0);\n    |                    ^^^^^^^^ - supplied 1 argument\n    |                    |\n    |                    expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptfdekz_0.rs:10:40\n   |\n10 |             positive = positive.append(v);\n   |                                        ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptfdekz_0.rs:10:24\n   |\n7  |     let positive = Vec::new(0);\n   |                    ----------- expected due to this value\n...\n10 |             positive = positive.append(v);\n   |                        ^^^^^^^^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |\n   = note: expected struct `Vec<_>`\n           found unit type `()`\nnote: method `append` modifies its receiver in-place\n  --> /tmp/tmptfdekz_0.rs:10:33\n   |\n10 |             positive = positive.append(v);\n   |                        -------- ^^^^^^ this call modifies `positive` in-place\n   |                        |\n   |                        you probably want to use this value after calling the method...\n   = note: ...instead of the `()` output of method `append`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0061, E0308.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n  let pos = 0;\n  for i in l {\n    if i > 0 {\n      pos += 1;\n    }\n  }\n  return l.slice(pos, l.len);\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0599]: no method named `slice` found for struct `Vec<isize>` in the current scope\n  --> /tmp/tmpw03u051j.rs:13:12\n   |\n13 |   return l.slice(pos, l.len);\n   |            ^^^^^\n   |\n   = help: items from traits can only be used if the trait is in scope\nhelp: the following trait is implemented but not in scope; perhaps add a `use` for it:\n   |\n1  | use std::collections::vec_deque::ring_slices::RingSlices;\n   |\nhelp: there is an associated function with a similar name\n   |\n13 |   return l.as_slice(pos, l.len);\n   |            ~~~~~~~~\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpw03u051j.rs:13:25\n   |\n13 |   return l.slice(pos, l.len);\n   |                         ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |   return l.slice(pos, l.len());\n   |                            ++\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0599, E0616.\nFor more information about an error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n  let positive = Vec::new(0);\n  for v in l {\n    if v > 0 {\n      positive = positive.push_back(v);\n    }\n  }\n  positive\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp9yiwrf71.rs:7:18\n    |\n7   |   let positive = Vec::new(0);\n    |                  ^^^^^^^^ - supplied 1 argument\n    |                  |\n    |                  expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmp9yiwrf71.rs:10:27\n   |\n10 |       positive = positive.push_back(v);\n   |                           ^^^^^^^^^ method not found in `Vec<_>`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0061, E0599.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in l {\n        if i > 0 {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in l {\n        if i > 0 {\n            result.append(i);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpgbn12nu_.rs:10:27\n   |\n10 |             result.append(i);\n   |                           ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n  let positive = Vec::new(0);\n  for i in l {\n    if i > 0 {\n      positive = positive.append(i);\n    }\n  }\n  positive\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmphwr9st8c.rs:7:18\n    |\n7   |   let positive = Vec::new(0);\n    |                  ^^^^^^^^ - supplied 1 argument\n    |                  |\n    |                  expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphwr9st8c.rs:10:34\n   |\n10 |       positive = positive.append(i);\n   |                                  ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphwr9st8c.rs:10:18\n   |\n7  |   let positive = Vec::new(0);\n   |                  ----------- expected due to this value\n...\n10 |       positive = positive.append(i);\n   |                  ^^^^^^^^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |\n   = note: expected struct `Vec<_>`\n           found unit type `()`\nnote: method `append` modifies its receiver in-place\n  --> /tmp/tmphwr9st8c.rs:10:27\n   |\n10 |       positive = positive.append(i);\n   |                  -------- ^^^^^^ this call modifies `positive` in-place\n   |                  |\n   |                  you probably want to use this value after calling the method...\n   = note: ...instead of the `()` output of method `append`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0061, E0308.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in l {\n        if i > 0 {\n            result.append(i);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpgbn12nu_.rs:10:27\n   |\n10 |             result.append(i);\n   |                           ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n  let pos = 0;\n  for i in l {\n    if i > 0 {\n      pos += 1;\n    }\n  }\n  return Vec::from_iter(pos, l);\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0599]: no function or associated item named `from_iter` found for struct `Vec<_, _>` in the current scope\n  --> /tmp/tmp6ant28aj.rs:13:15\n   |\n13 |   return Vec::from_iter(pos, l);\n   |               ^^^^^^^^^ function or associated item not found in `Vec<_, _>`\n   |\n   = help: items from traits can only be used if the trait is in scope\nhelp: the following trait is implemented but not in scope; perhaps add a `use` for it:\n   |\n1  | use std::iter::FromIterator;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in l {\n        if i > 0 {\n            result.append(i);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpgbn12nu_.rs:10:27\n   |\n10 |             result.append(i);\n   |                           ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n    let positive = Vec::new(l.len);\n    for i in l.iter() {\n        if i.is_neg() {\n            continue;\n        }\n        positive.append(i);\n    }\n    return positive;\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0616]: field `len` of struct `Vec` is private\n --> /tmp/tmpt62wn1vp.rs:7:31\n  |\n7 |     let positive = Vec::new(l.len);\n  |                               ^^^ private field\n  |\nhelp: a method `len` also exists, call it with parentheses\n  |\n7 |     let positive = Vec::new(l.len());\n  |                                  ++\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpt62wn1vp.rs:7:20\n    |\n7   |     let positive = Vec::new(l.len);\n    |                    ^^^^^^^^ ----- supplied 1 argument\n    |                    |\n    |                    expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0599]: no method named `is_neg` found for reference `&isize` in the current scope\n --> /tmp/tmpt62wn1vp.rs:9:14\n  |\n9 |         if i.is_neg() {\n  |              ^^^^^^ help: there is an associated function with a similar name: `is_negative`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpt62wn1vp.rs:12:25\n   |\n12 |         positive.append(i);\n   |                         ^ types differ in mutability\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                      found reference `&isize`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0061, E0308, E0599, E0616.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n    let positive = Vec::new(0);\n    for i in l {\n        if i > 0 {\n            positive = positive.push_back(i);\n        }\n    }\n    return positive;\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp07ia7sdy.rs:7:20\n    |\n7   |     let positive = Vec::new(0);\n    |                    ^^^^^^^^ - supplied 1 argument\n    |                    |\n    |                    expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmp07ia7sdy.rs:10:33\n   |\n10 |             positive = positive.push_back(i);\n   |                                 ^^^^^^^^^ method not found in `Vec<_>`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0061, E0599.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n  let positive = Vec::new(0);\n  for v in l {\n    if v > 0 {\n      positive = positive.append(v);\n    }\n  }\n  positive\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpbsi6u_06.rs:7:18\n    |\n7   |   let positive = Vec::new(0);\n    |                  ^^^^^^^^ - supplied 1 argument\n    |                  |\n    |                  expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpbsi6u_06.rs:10:34\n   |\n10 |       positive = positive.append(v);\n   |                                  ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpbsi6u_06.rs:10:18\n   |\n7  |   let positive = Vec::new(0);\n   |                  ----------- expected due to this value\n...\n10 |       positive = positive.append(v);\n   |                  ^^^^^^^^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |\n   = note: expected struct `Vec<_>`\n           found unit type `()`\nnote: method `append` modifies its receiver in-place\n  --> /tmp/tmpbsi6u_06.rs:10:27\n   |\n10 |       positive = positive.append(v);\n   |                  -------- ^^^^^^ this call modifies `positive` in-place\n   |                  |\n   |                  you probably want to use this value after calling the method...\n   = note: ...instead of the `()` output of method `append`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0061, E0308.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n  let positive = Vec::new(0);\n  for i in l {\n    if i > 0 {\n      positive = positive.push_back(i);\n    }\n  }\n  return positive;\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmprtrom3ml.rs:7:18\n    |\n7   |   let positive = Vec::new(0);\n    |                  ^^^^^^^^ - supplied 1 argument\n    |                  |\n    |                  expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmprtrom3ml.rs:10:27\n   |\n10 |       positive = positive.push_back(i);\n   |                           ^^^^^^^^^ method not found in `Vec<_>`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0061, E0599.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  for i in l {\n    if i > 0 {\n      result.append(i);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp532ud2bo.rs:10:21\n   |\n10 |       result.append(i);\n   |                     ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n  let positive = Vec::new(0);\n  for v in l {\n    if v > 0 {\n      positive = positive.append(v);\n    }\n  }\n  positive\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpbsi6u_06.rs:7:18\n    |\n7   |   let positive = Vec::new(0);\n    |                  ^^^^^^^^ - supplied 1 argument\n    |                  |\n    |                  expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpbsi6u_06.rs:10:34\n   |\n10 |       positive = positive.append(v);\n   |                                  ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpbsi6u_06.rs:10:18\n   |\n7  |   let positive = Vec::new(0);\n   |                  ----------- expected due to this value\n...\n10 |       positive = positive.append(v);\n   |                  ^^^^^^^^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |\n   = note: expected struct `Vec<_>`\n           found unit type `()`\nnote: method `append` modifies its receiver in-place\n  --> /tmp/tmpbsi6u_06.rs:10:27\n   |\n10 |       positive = positive.append(v);\n   |                  -------- ^^^^^^ this call modifies `positive` in-place\n   |                  |\n   |                  you probably want to use this value after calling the method...\n   = note: ...instead of the `()` output of method `append`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0061, E0308.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n    let positive = Vec::new(0);\n    for v in l {\n        if v > 0 {\n            positive = positive.concat(v);\n        }\n    }\n    return positive;\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpcx96xpi_.rs:7:20\n    |\n7   |     let positive = Vec::new(0);\n    |                    ^^^^^^^^ - supplied 1 argument\n    |                    |\n    |                    expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpcx96xpi_.rs:10:33\n    |\n10  |             positive = positive.concat(v);\n    |                                 ^^^^^^ - supplied 1 argument\n    |                                 |\n    |                                 expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0277]: the trait bound `[isize]: Concat<_>` is not satisfied\n   --> /tmp/tmpcx96xpi_.rs:10:33\n    |\n10  |             positive = positive.concat(v);\n    |                                 ^^^^^^ the trait `Concat<_>` is not implemented for `[isize]`\n    |\n    = help: the following other types implement trait `Concat<Item>`:\n              <[S] as Concat<str>>\n              <[V] as Concat<T>>\nnote: required by a bound in `slice::<impl [T]>::concat`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0061, E0277.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n  let positive = Vec::new(0);\n  for v in l {\n    if v > 0 {\n      positive = positive.concat(v);\n    }\n  }\n  positive\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpgapjyy8o.rs:7:18\n    |\n7   |   let positive = Vec::new(0);\n    |                  ^^^^^^^^ - supplied 1 argument\n    |                  |\n    |                  expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpgapjyy8o.rs:10:27\n    |\n10  |       positive = positive.concat(v);\n    |                           ^^^^^^ - supplied 1 argument\n    |                           |\n    |                           expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0277]: the trait bound `[isize]: Concat<_>` is not satisfied\n   --> /tmp/tmpgapjyy8o.rs:10:27\n    |\n10  |       positive = positive.concat(v);\n    |                           ^^^^^^ the trait `Concat<_>` is not implemented for `[isize]`\n    |\n    = help: the following other types implement trait `Concat<Item>`:\n              <[S] as Concat<str>>\n              <[V] as Concat<T>>\nnote: required by a bound in `slice::<impl [T]>::concat`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0061, E0277.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in l {\n        if i > 0 {\n            result.append(i);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpgbn12nu_.rs:10:27\n   |\n10 |             result.append(i);\n   |                           ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n  let positive = Vec::new(0);\n  for v in l {\n    if v > 0 {\n      positive = positive.concat(v);\n    }\n  }\n  positive\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpgapjyy8o.rs:7:18\n    |\n7   |   let positive = Vec::new(0);\n    |                  ^^^^^^^^ - supplied 1 argument\n    |                  |\n    |                  expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpgapjyy8o.rs:10:27\n    |\n10  |       positive = positive.concat(v);\n    |                           ^^^^^^ - supplied 1 argument\n    |                           |\n    |                           expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0277]: the trait bound `[isize]: Concat<_>` is not satisfied\n   --> /tmp/tmpgapjyy8o.rs:10:27\n    |\n10  |       positive = positive.concat(v);\n    |                           ^^^^^^ the trait `Concat<_>` is not implemented for `[isize]`\n    |\n    = help: the following other types implement trait `Concat<Item>`:\n              <[S] as Concat<str>>\n              <[V] as Concat<T>>\nnote: required by a bound in `slice::<impl [T]>::concat`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0061, E0277.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in l {\n        if i > 0 {\n            result.append(i);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpgbn12nu_.rs:10:27\n   |\n10 |             result.append(i);\n   |                           ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  for i in l {\n    if i > 0 {\n      result.append(i);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp532ud2bo.rs:10:21\n   |\n10 |       result.append(i);\n   |                     ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n    let mut r = Vec::new();\n    for v in l {\n        if v > 0 {\n            r.push(v);\n        }\n    }\n    r\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  for i in l {\n    if i > 0 {\n      result.push(i);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n  let positive = Vec::new(0);\n  for v in l {\n    if v > 0 {\n      positive = positive.concat(v);\n    }\n  }\n  positive\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpgapjyy8o.rs:7:18\n    |\n7   |   let positive = Vec::new(0);\n    |                  ^^^^^^^^ - supplied 1 argument\n    |                  |\n    |                  expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpgapjyy8o.rs:10:27\n    |\n10  |       positive = positive.concat(v);\n    |                           ^^^^^^ - supplied 1 argument\n    |                           |\n    |                           expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0277]: the trait bound `[isize]: Concat<_>` is not satisfied\n   --> /tmp/tmpgapjyy8o.rs:10:27\n    |\n10  |       positive = positive.concat(v);\n    |                           ^^^^^^ the trait `Concat<_>` is not implemented for `[isize]`\n    |\n    = help: the following other types implement trait `Concat<Item>`:\n              <[S] as Concat<str>>\n              <[V] as Concat<T>>\nnote: required by a bound in `slice::<impl [T]>::concat`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0061, E0277.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n    let positive = Vec::new(0);\n    for v in l {\n        if v > 0 {\n            positive = positive.concat(v);\n        }\n    }\n    return positive;\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpcx96xpi_.rs:7:20\n    |\n7   |     let positive = Vec::new(0);\n    |                    ^^^^^^^^ - supplied 1 argument\n    |                    |\n    |                    expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpcx96xpi_.rs:10:33\n    |\n10  |             positive = positive.concat(v);\n    |                                 ^^^^^^ - supplied 1 argument\n    |                                 |\n    |                                 expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0277]: the trait bound `[isize]: Concat<_>` is not satisfied\n   --> /tmp/tmpcx96xpi_.rs:10:33\n    |\n10  |             positive = positive.concat(v);\n    |                                 ^^^^^^ the trait `Concat<_>` is not implemented for `[isize]`\n    |\n    = help: the following other types implement trait `Concat<Item>`:\n              <[S] as Concat<str>>\n              <[V] as Concat<T>>\nnote: required by a bound in `slice::<impl [T]>::concat`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0061, E0277.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n    let positive = Vec::new(0);\n    for v in l {\n        if v > 0 {\n            positive = positive.append(v);\n        }\n    }\n    return positive;\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmptfdekz_0.rs:7:20\n    |\n7   |     let positive = Vec::new(0);\n    |                    ^^^^^^^^ - supplied 1 argument\n    |                    |\n    |                    expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptfdekz_0.rs:10:40\n   |\n10 |             positive = positive.append(v);\n   |                                        ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptfdekz_0.rs:10:24\n   |\n7  |     let positive = Vec::new(0);\n   |                    ----------- expected due to this value\n...\n10 |             positive = positive.append(v);\n   |                        ^^^^^^^^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |\n   = note: expected struct `Vec<_>`\n           found unit type `()`\nnote: method `append` modifies its receiver in-place\n  --> /tmp/tmptfdekz_0.rs:10:33\n   |\n10 |             positive = positive.append(v);\n   |                        -------- ^^^^^^ this call modifies `positive` in-place\n   |                        |\n   |                        you probably want to use this value after calling the method...\n   = note: ...instead of the `()` output of method `append`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0061, E0308.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in l {\n        if i > 0 {\n            result.append(i);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpgbn12nu_.rs:10:27\n   |\n10 |             result.append(i);\n   |                           ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n    let positive = Vec::new(0);\n    for v in l {\n        if v > 0 {\n            positive = positive.concat(v);\n        }\n    }\n    return positive;\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpcx96xpi_.rs:7:20\n    |\n7   |     let positive = Vec::new(0);\n    |                    ^^^^^^^^ - supplied 1 argument\n    |                    |\n    |                    expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpcx96xpi_.rs:10:33\n    |\n10  |             positive = positive.concat(v);\n    |                                 ^^^^^^ - supplied 1 argument\n    |                                 |\n    |                                 expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0277]: the trait bound `[isize]: Concat<_>` is not satisfied\n   --> /tmp/tmpcx96xpi_.rs:10:33\n    |\n10  |             positive = positive.concat(v);\n    |                                 ^^^^^^ the trait `Concat<_>` is not implemented for `[isize]`\n    |\n    = help: the following other types implement trait `Concat<Item>`:\n              <[S] as Concat<str>>\n              <[V] as Concat<T>>\nnote: required by a bound in `slice::<impl [T]>::concat`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0061, E0277.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n  let positive = Vec::new(l.len);\n  for i in l.iter() {\n    if i.is_neg() {\n      continue;\n    }\n    positive.append(i);\n  }\n  return positive;\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "error[E0616]: field `len` of struct `Vec` is private\n --> /tmp/tmp5ko7safb.rs:7:29\n  |\n7 |   let positive = Vec::new(l.len);\n  |                             ^^^ private field\n  |\nhelp: a method `len` also exists, call it with parentheses\n  |\n7 |   let positive = Vec::new(l.len());\n  |                                ++\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp5ko7safb.rs:7:18\n    |\n7   |   let positive = Vec::new(l.len);\n    |                  ^^^^^^^^ ----- supplied 1 argument\n    |                  |\n    |                  expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0599]: no method named `is_neg` found for reference `&isize` in the current scope\n --> /tmp/tmp5ko7safb.rs:9:10\n  |\n9 |     if i.is_neg() {\n  |          ^^^^^^ help: there is an associated function with a similar name: `is_negative`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp5ko7safb.rs:12:21\n   |\n12 |     positive.append(i);\n   |                     ^ types differ in mutability\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                      found reference `&isize`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0061, E0308, E0599, E0616.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n    let pos = 0;\n    for i in l {\n        if i > 0 {\n            pos += 1;\n        }\n    }\n    return Vec::from_iter(l.iter().take(pos));\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "error[E0599]: no function or associated item named `from_iter` found for struct `Vec<_, _>` in the current scope\n  --> /tmp/tmpp3gz59iq.rs:13:17\n   |\n13 |     return Vec::from_iter(l.iter().take(pos));\n   |                 ^^^^^^^^^ function or associated item not found in `Vec<_, _>`\n   |\n   = help: items from traits can only be used if the trait is in scope\nhelp: the following trait is implemented but not in scope; perhaps add a `use` for it:\n   |\n1  | use std::iter::FromIterator;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  for i in l {\n    if i > 0 {\n      result.append(i);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp532ud2bo.rs:10:21\n   |\n10 |       result.append(i);\n   |                     ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in l {\n        if i > 0 {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n    let positive = Vec::new(0);\n    for v in l {\n        if v > 0 {\n            positive = positive.append(v);\n        }\n    }\n    return positive;\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmptfdekz_0.rs:7:20\n    |\n7   |     let positive = Vec::new(0);\n    |                    ^^^^^^^^ - supplied 1 argument\n    |                    |\n    |                    expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptfdekz_0.rs:10:40\n   |\n10 |             positive = positive.append(v);\n   |                                        ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptfdekz_0.rs:10:24\n   |\n7  |     let positive = Vec::new(0);\n   |                    ----------- expected due to this value\n...\n10 |             positive = positive.append(v);\n   |                        ^^^^^^^^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |\n   = note: expected struct `Vec<_>`\n           found unit type `()`\nnote: method `append` modifies its receiver in-place\n  --> /tmp/tmptfdekz_0.rs:10:33\n   |\n10 |             positive = positive.append(v);\n   |                        -------- ^^^^^^ this call modifies `positive` in-place\n   |                        |\n   |                        you probably want to use this value after calling the method...\n   = note: ...instead of the `()` output of method `append`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0061, E0308.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in l {\n        if i > 0 {\n            result.append(i);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpgbn12nu_.rs:10:27\n   |\n10 |             result.append(i);\n   |                           ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n    let mut r = Vec::new();\n    for v in l {\n        if v > 0 {\n            r.push(v);\n        }\n    }\n    r\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n    let mut r = Vec::new();\n    for v in l {\n        if v > 0 {\n            r.push(v);\n        }\n    }\n    r\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n  let positive = Vec::new(0);\n  for v in l {\n    if v > 0 {\n      positive = positive.append(v);\n    }\n  }\n  positive\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpbsi6u_06.rs:7:18\n    |\n7   |   let positive = Vec::new(0);\n    |                  ^^^^^^^^ - supplied 1 argument\n    |                  |\n    |                  expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpbsi6u_06.rs:10:34\n   |\n10 |       positive = positive.append(v);\n   |                                  ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpbsi6u_06.rs:10:18\n   |\n7  |   let positive = Vec::new(0);\n   |                  ----------- expected due to this value\n...\n10 |       positive = positive.append(v);\n   |                  ^^^^^^^^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |\n   = note: expected struct `Vec<_>`\n           found unit type `()`\nnote: method `append` modifies its receiver in-place\n  --> /tmp/tmpbsi6u_06.rs:10:27\n   |\n10 |       positive = positive.append(v);\n   |                  -------- ^^^^^^ this call modifies `positive` in-place\n   |                  |\n   |                  you probably want to use this value after calling the method...\n   = note: ...instead of the `()` output of method `append`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0061, E0308.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  for i in l {\n    if i > 0 {\n      result.append(i);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp532ud2bo.rs:10:21\n   |\n10 |       result.append(i);\n   |                     ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n  let mut positive = Vec::new();\n  for i in l {\n    if i > 0 {\n      positive.append(i);\n    }\n  }\n  positive\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpln0pj89d.rs:10:23\n   |\n10 |       positive.append(i);\n   |                       ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n    let positive = Vec::new(l.len);\n    for i in l.iter() {\n        if i.is_neg() {\n            continue;\n        }\n        positive.append(i);\n    }\n    return positive;\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0616]: field `len` of struct `Vec` is private\n --> /tmp/tmpt62wn1vp.rs:7:31\n  |\n7 |     let positive = Vec::new(l.len);\n  |                               ^^^ private field\n  |\nhelp: a method `len` also exists, call it with parentheses\n  |\n7 |     let positive = Vec::new(l.len());\n  |                                  ++\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpt62wn1vp.rs:7:20\n    |\n7   |     let positive = Vec::new(l.len);\n    |                    ^^^^^^^^ ----- supplied 1 argument\n    |                    |\n    |                    expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0599]: no method named `is_neg` found for reference `&isize` in the current scope\n --> /tmp/tmpt62wn1vp.rs:9:14\n  |\n9 |         if i.is_neg() {\n  |              ^^^^^^ help: there is an associated function with a similar name: `is_negative`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpt62wn1vp.rs:12:25\n   |\n12 |         positive.append(i);\n   |                         ^ types differ in mutability\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                      found reference `&isize`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0061, E0308, E0599, E0616.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in l {\n        if i > 0 {\n            result.append(i);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpgbn12nu_.rs:10:27\n   |\n10 |             result.append(i);\n   |                           ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n    let positive = Vec::new(0);\n    for v in l {\n        if v > 0 {\n            positive = positive.append(v);\n        }\n    }\n    positive\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmprfitzkh1.rs:7:20\n    |\n7   |     let positive = Vec::new(0);\n    |                    ^^^^^^^^ - supplied 1 argument\n    |                    |\n    |                    expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0308]: mismatched types\n  --> /tmp/tmprfitzkh1.rs:10:40\n   |\n10 |             positive = positive.append(v);\n   |                                        ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmprfitzkh1.rs:10:24\n   |\n7  |     let positive = Vec::new(0);\n   |                    ----------- expected due to this value\n...\n10 |             positive = positive.append(v);\n   |                        ^^^^^^^^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |\n   = note: expected struct `Vec<_>`\n           found unit type `()`\nnote: method `append` modifies its receiver in-place\n  --> /tmp/tmprfitzkh1.rs:10:33\n   |\n10 |             positive = positive.append(v);\n   |                        -------- ^^^^^^ this call modifies `positive` in-place\n   |                        |\n   |                        you probably want to use this value after calling the method...\n   = note: ...instead of the `()` output of method `append`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0061, E0308.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in l {\n        if i > 0 {\n            result.append(i);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpgbn12nu_.rs:10:27\n   |\n10 |             result.append(i);\n   |                           ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in l {\n        if i > 0 {\n            result.append(i);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpgbn12nu_.rs:10:27\n   |\n10 |             result.append(i);\n   |                           ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in l {\n        if i > 0 {\n            result.append(i);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpgbn12nu_.rs:10:27\n   |\n10 |             result.append(i);\n   |                           ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n    let pos = 0;\n    for i in l {\n        if i > 0 {\n            pos += 1;\n        }\n    }\n    return Vec::from_iter(pos, l);\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "error[E0599]: no function or associated item named `from_iter` found for struct `Vec<_, _>` in the current scope\n  --> /tmp/tmp2h1gpdtq.rs:13:17\n   |\n13 |     return Vec::from_iter(pos, l);\n   |                 ^^^^^^^^^ function or associated item not found in `Vec<_, _>`\n   |\n   = help: items from traits can only be used if the trait is in scope\nhelp: the following trait is implemented but not in scope; perhaps add a `use` for it:\n   |\n1  | use std::iter::FromIterator;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n    let positive = Vec::new(0);\n    for v in l {\n        if v > 0 {\n            positive = positive.append(v);\n        }\n    }\n    positive\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmprfitzkh1.rs:7:20\n    |\n7   |     let positive = Vec::new(0);\n    |                    ^^^^^^^^ - supplied 1 argument\n    |                    |\n    |                    expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0308]: mismatched types\n  --> /tmp/tmprfitzkh1.rs:10:40\n   |\n10 |             positive = positive.append(v);\n   |                                        ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmprfitzkh1.rs:10:24\n   |\n7  |     let positive = Vec::new(0);\n   |                    ----------- expected due to this value\n...\n10 |             positive = positive.append(v);\n   |                        ^^^^^^^^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |\n   = note: expected struct `Vec<_>`\n           found unit type `()`\nnote: method `append` modifies its receiver in-place\n  --> /tmp/tmprfitzkh1.rs:10:33\n   |\n10 |             positive = positive.append(v);\n   |                        -------- ^^^^^^ this call modifies `positive` in-place\n   |                        |\n   |                        you probably want to use this value after calling the method...\n   = note: ...instead of the `()` output of method `append`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0061, E0308.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n  let positive = Vec::new(0);\n  for v in l {\n    if v > 0 {\n      positive = positive.push_back(v);\n    }\n  }\n  return positive;\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpoywzihog.rs:7:18\n    |\n7   |   let positive = Vec::new(0);\n    |                  ^^^^^^^^ - supplied 1 argument\n    |                  |\n    |                  expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmpoywzihog.rs:10:27\n   |\n10 |       positive = positive.push_back(v);\n   |                           ^^^^^^^^^ method not found in `Vec<_>`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0061, E0599.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n    let positive = Vec::new(0);\n    for v in l {\n        if v > 0 {\n            positive = positive.append(v);\n        }\n    }\n    return positive;\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmptfdekz_0.rs:7:20\n    |\n7   |     let positive = Vec::new(0);\n    |                    ^^^^^^^^ - supplied 1 argument\n    |                    |\n    |                    expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptfdekz_0.rs:10:40\n   |\n10 |             positive = positive.append(v);\n   |                                        ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptfdekz_0.rs:10:24\n   |\n7  |     let positive = Vec::new(0);\n   |                    ----------- expected due to this value\n...\n10 |             positive = positive.append(v);\n   |                        ^^^^^^^^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |\n   = note: expected struct `Vec<_>`\n           found unit type `()`\nnote: method `append` modifies its receiver in-place\n  --> /tmp/tmptfdekz_0.rs:10:33\n   |\n10 |             positive = positive.append(v);\n   |                        -------- ^^^^^^ this call modifies `positive` in-place\n   |                        |\n   |                        you probably want to use this value after calling the method...\n   = note: ...instead of the `()` output of method `append`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0061, E0308.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n    let positive = Vec::new(0);\n    for v in l {\n        if v > 0 {\n            positive = positive.concat(v);\n        }\n    }\n    return positive;\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpcx96xpi_.rs:7:20\n    |\n7   |     let positive = Vec::new(0);\n    |                    ^^^^^^^^ - supplied 1 argument\n    |                    |\n    |                    expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpcx96xpi_.rs:10:33\n    |\n10  |             positive = positive.concat(v);\n    |                                 ^^^^^^ - supplied 1 argument\n    |                                 |\n    |                                 expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0277]: the trait bound `[isize]: Concat<_>` is not satisfied\n   --> /tmp/tmpcx96xpi_.rs:10:33\n    |\n10  |             positive = positive.concat(v);\n    |                                 ^^^^^^ the trait `Concat<_>` is not implemented for `[isize]`\n    |\n    = help: the following other types implement trait `Concat<Item>`:\n              <[S] as Concat<str>>\n              <[V] as Concat<T>>\nnote: required by a bound in `slice::<impl [T]>::concat`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0061, E0277.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n    let mut r = Vec::new();\n    for v in l {\n        if v > 0 {\n            r.push(v);\n        }\n    }\n    r\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n    let positive = Vec::new(0);\n    for v in l {\n        if v > 0 {\n            positive = positive.push_back(v);\n        }\n    }\n    return positive;\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpn8pj125p.rs:7:20\n    |\n7   |     let positive = Vec::new(0);\n    |                    ^^^^^^^^ - supplied 1 argument\n    |                    |\n    |                    expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmpn8pj125p.rs:10:33\n   |\n10 |             positive = positive.push_back(v);\n   |                                 ^^^^^^^^^ method not found in `Vec<_>`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0061, E0599.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n    let positive = Vec::new(0);\n    for i in l {\n        if i > 0 {\n            positive = positive.concat(i);\n        }\n    }\n    return positive;\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpjq2z9sau.rs:7:20\n    |\n7   |     let positive = Vec::new(0);\n    |                    ^^^^^^^^ - supplied 1 argument\n    |                    |\n    |                    expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpjq2z9sau.rs:10:33\n    |\n10  |             positive = positive.concat(i);\n    |                                 ^^^^^^ - supplied 1 argument\n    |                                 |\n    |                                 expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0277]: the trait bound `[isize]: Concat<_>` is not satisfied\n   --> /tmp/tmpjq2z9sau.rs:10:33\n    |\n10  |             positive = positive.concat(i);\n    |                                 ^^^^^^ the trait `Concat<_>` is not implemented for `[isize]`\n    |\n    = help: the following other types implement trait `Concat<Item>`:\n              <[S] as Concat<str>>\n              <[V] as Concat<T>>\nnote: required by a bound in `slice::<impl [T]>::concat`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0061, E0277.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n    let positive = Vec::new(0);\n    for v in l {\n        if v > 0 {\n            positive = positive.concat(v);\n        }\n    }\n    return positive;\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpcx96xpi_.rs:7:20\n    |\n7   |     let positive = Vec::new(0);\n    |                    ^^^^^^^^ - supplied 1 argument\n    |                    |\n    |                    expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpcx96xpi_.rs:10:33\n    |\n10  |             positive = positive.concat(v);\n    |                                 ^^^^^^ - supplied 1 argument\n    |                                 |\n    |                                 expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0277]: the trait bound `[isize]: Concat<_>` is not satisfied\n   --> /tmp/tmpcx96xpi_.rs:10:33\n    |\n10  |             positive = positive.concat(v);\n    |                                 ^^^^^^ the trait `Concat<_>` is not implemented for `[isize]`\n    |\n    = help: the following other types implement trait `Concat<Item>`:\n              <[S] as Concat<str>>\n              <[V] as Concat<T>>\nnote: required by a bound in `slice::<impl [T]>::concat`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0061, E0277.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in l {\n        if i > 0 {\n            result.append(i);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpgbn12nu_.rs:10:27\n   |\n10 |             result.append(i);\n   |                           ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in l {\n        if i > 0 {\n            result.append(i);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpgbn12nu_.rs:10:27\n   |\n10 |             result.append(i);\n   |                           ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n    let positive = Vec::new(0);\n    for v in l {\n        if v > 0 {\n            positive = positive.append(v);\n        }\n    }\n    return positive;\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmptfdekz_0.rs:7:20\n    |\n7   |     let positive = Vec::new(0);\n    |                    ^^^^^^^^ - supplied 1 argument\n    |                    |\n    |                    expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptfdekz_0.rs:10:40\n   |\n10 |             positive = positive.append(v);\n   |                                        ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptfdekz_0.rs:10:24\n   |\n7  |     let positive = Vec::new(0);\n   |                    ----------- expected due to this value\n...\n10 |             positive = positive.append(v);\n   |                        ^^^^^^^^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |\n   = note: expected struct `Vec<_>`\n           found unit type `()`\nnote: method `append` modifies its receiver in-place\n  --> /tmp/tmptfdekz_0.rs:10:33\n   |\n10 |             positive = positive.append(v);\n   |                        -------- ^^^^^^ this call modifies `positive` in-place\n   |                        |\n   |                        you probably want to use this value after calling the method...\n   = note: ...instead of the `()` output of method `append`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0061, E0308.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n  let positive = Vec::new(0);\n  for v in l {\n    if v > 0 {\n      positive = positive.concat(v);\n    }\n  }\n  positive\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpgapjyy8o.rs:7:18\n    |\n7   |   let positive = Vec::new(0);\n    |                  ^^^^^^^^ - supplied 1 argument\n    |                  |\n    |                  expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpgapjyy8o.rs:10:27\n    |\n10  |       positive = positive.concat(v);\n    |                           ^^^^^^ - supplied 1 argument\n    |                           |\n    |                           expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0277]: the trait bound `[isize]: Concat<_>` is not satisfied\n   --> /tmp/tmpgapjyy8o.rs:10:27\n    |\n10  |       positive = positive.concat(v);\n    |                           ^^^^^^ the trait `Concat<_>` is not implemented for `[isize]`\n    |\n    = help: the following other types implement trait `Concat<Item>`:\n              <[S] as Concat<str>>\n              <[V] as Concat<T>>\nnote: required by a bound in `slice::<impl [T]>::concat`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0061, E0277.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n  let positive = Vec::new(0);\n  for v in l {\n    if v > 0 {\n      positive = positive.concat(v);\n    }\n  }\n  positive\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpgapjyy8o.rs:7:18\n    |\n7   |   let positive = Vec::new(0);\n    |                  ^^^^^^^^ - supplied 1 argument\n    |                  |\n    |                  expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpgapjyy8o.rs:10:27\n    |\n10  |       positive = positive.concat(v);\n    |                           ^^^^^^ - supplied 1 argument\n    |                           |\n    |                           expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0277]: the trait bound `[isize]: Concat<_>` is not satisfied\n   --> /tmp/tmpgapjyy8o.rs:10:27\n    |\n10  |       positive = positive.concat(v);\n    |                           ^^^^^^ the trait `Concat<_>` is not implemented for `[isize]`\n    |\n    = help: the following other types implement trait `Concat<Item>`:\n              <[S] as Concat<str>>\n              <[V] as Concat<T>>\nnote: required by a bound in `slice::<impl [T]>::concat`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0061, E0277.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n  let positive = Vec::new(0);\n  for v in l {\n    if v > 0 {\n      positive = positive.append(v);\n    }\n  }\n  positive\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpbsi6u_06.rs:7:18\n    |\n7   |   let positive = Vec::new(0);\n    |                  ^^^^^^^^ - supplied 1 argument\n    |                  |\n    |                  expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpbsi6u_06.rs:10:34\n   |\n10 |       positive = positive.append(v);\n   |                                  ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpbsi6u_06.rs:10:18\n   |\n7  |   let positive = Vec::new(0);\n   |                  ----------- expected due to this value\n...\n10 |       positive = positive.append(v);\n   |                  ^^^^^^^^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |\n   = note: expected struct `Vec<_>`\n           found unit type `()`\nnote: method `append` modifies its receiver in-place\n  --> /tmp/tmpbsi6u_06.rs:10:27\n   |\n10 |       positive = positive.append(v);\n   |                  -------- ^^^^^^ this call modifies `positive` in-place\n   |                  |\n   |                  you probably want to use this value after calling the method...\n   = note: ...instead of the `()` output of method `append`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0061, E0308.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n    let mut r = Vec::new();\n    for v in l {\n        if v > 0 {\n            r.push(v);\n        }\n    }\n    r\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  for i in l {\n    if i > 0 {\n      result.append(i);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp532ud2bo.rs:10:21\n   |\n10 |       result.append(i);\n   |                     ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n    let positive = Vec::new(0);\n    for i in l {\n        if i > 0 {\n            positive = positive.push_back(i);\n        }\n    }\n    return positive;\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp07ia7sdy.rs:7:20\n    |\n7   |     let positive = Vec::new(0);\n    |                    ^^^^^^^^ - supplied 1 argument\n    |                    |\n    |                    expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmp07ia7sdy.rs:10:33\n   |\n10 |             positive = positive.push_back(i);\n   |                                 ^^^^^^^^^ method not found in `Vec<_>`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0061, E0599.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n  let mut positive = Vec::new();\n  for i in l {\n    if i > 0 {\n      positive.push(i);\n    }\n  }\n  positive\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n  let positive = Vec::new(0);\n  for v in l {\n    if v > 0 {\n      positive = positive.concat(v);\n    }\n  }\n  positive\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpgapjyy8o.rs:7:18\n    |\n7   |   let positive = Vec::new(0);\n    |                  ^^^^^^^^ - supplied 1 argument\n    |                  |\n    |                  expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpgapjyy8o.rs:10:27\n    |\n10  |       positive = positive.concat(v);\n    |                           ^^^^^^ - supplied 1 argument\n    |                           |\n    |                           expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0277]: the trait bound `[isize]: Concat<_>` is not satisfied\n   --> /tmp/tmpgapjyy8o.rs:10:27\n    |\n10  |       positive = positive.concat(v);\n    |                           ^^^^^^ the trait `Concat<_>` is not implemented for `[isize]`\n    |\n    = help: the following other types implement trait `Concat<Item>`:\n              <[S] as Concat<str>>\n              <[V] as Concat<T>>\nnote: required by a bound in `slice::<impl [T]>::concat`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0061, E0277.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in l {\n        if i > 0 {\n            result.append(i);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpgbn12nu_.rs:10:27\n   |\n10 |             result.append(i);\n   |                           ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n  let positive = Vec::new(0);\n  for v in l {\n    if v > 0 {\n      positive = positive.concat(v);\n    }\n  }\n  positive\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpgapjyy8o.rs:7:18\n    |\n7   |   let positive = Vec::new(0);\n    |                  ^^^^^^^^ - supplied 1 argument\n    |                  |\n    |                  expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpgapjyy8o.rs:10:27\n    |\n10  |       positive = positive.concat(v);\n    |                           ^^^^^^ - supplied 1 argument\n    |                           |\n    |                           expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0277]: the trait bound `[isize]: Concat<_>` is not satisfied\n   --> /tmp/tmpgapjyy8o.rs:10:27\n    |\n10  |       positive = positive.concat(v);\n    |                           ^^^^^^ the trait `Concat<_>` is not implemented for `[isize]`\n    |\n    = help: the following other types implement trait `Concat<Item>`:\n              <[S] as Concat<str>>\n              <[V] as Concat<T>>\nnote: required by a bound in `slice::<impl [T]>::concat`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0061, E0277.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in l {\n        if i > 0 {\n            result.append(i);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpgbn12nu_.rs:10:27\n   |\n10 |             result.append(i);\n   |                           ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n    let positive = Vec::new(0);\n    for v in l {\n        if v > 0 {\n            positive = positive.push_back(v);\n        }\n    }\n    return positive;\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpn8pj125p.rs:7:20\n    |\n7   |     let positive = Vec::new(0);\n    |                    ^^^^^^^^ - supplied 1 argument\n    |                    |\n    |                    expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmpn8pj125p.rs:10:33\n   |\n10 |             positive = positive.push_back(v);\n   |                                 ^^^^^^^^^ method not found in `Vec<_>`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0061, E0599.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n    let positive = Vec::new(0);\n    for v in l {\n        if v > 0 {\n            positive = positive.push_back(v);\n        }\n    }\n    return positive;\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpn8pj125p.rs:7:20\n    |\n7   |     let positive = Vec::new(0);\n    |                    ^^^^^^^^ - supplied 1 argument\n    |                    |\n    |                    expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmpn8pj125p.rs:10:33\n   |\n10 |             positive = positive.push_back(v);\n   |                                 ^^^^^^^^^ method not found in `Vec<_>`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0061, E0599.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n    let mut positive = Vec::new();\n    for i in l {\n        if i > 0 {\n            positive.push(i);\n        }\n    }\n    positive\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n    let positive = Vec::new(0);\n    for v in l {\n        if v > 0 {\n            positive = positive.push_back(v);\n        }\n    }\n    return positive;\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpn8pj125p.rs:7:20\n    |\n7   |     let positive = Vec::new(0);\n    |                    ^^^^^^^^ - supplied 1 argument\n    |                    |\n    |                    expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmpn8pj125p.rs:10:33\n   |\n10 |             positive = positive.push_back(v);\n   |                                 ^^^^^^^^^ method not found in `Vec<_>`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0061, E0599.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n    let pos = 0;\n    for i in l {\n        if i > 0 {\n            pos += 1;\n        }\n    }\n    return l.slice(pos, l.len);\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "error[E0599]: no method named `slice` found for struct `Vec<isize>` in the current scope\n  --> /tmp/tmp3vypkogz.rs:13:14\n   |\n13 |     return l.slice(pos, l.len);\n   |              ^^^^^\n   |\n   = help: items from traits can only be used if the trait is in scope\nhelp: the following trait is implemented but not in scope; perhaps add a `use` for it:\n   |\n1  | use std::collections::vec_deque::ring_slices::RingSlices;\n   |\nhelp: there is an associated function with a similar name\n   |\n13 |     return l.as_slice(pos, l.len);\n   |              ~~~~~~~~\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp3vypkogz.rs:13:27\n   |\n13 |     return l.slice(pos, l.len);\n   |                           ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |     return l.slice(pos, l.len());\n   |                              ++\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0599, E0616.\nFor more information about an error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  for v in l {\n    if v > 0 {\n      result.push(v);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n    let positive = Vec::new(0);\n    for v in l {\n        if v > 0 {\n            positive = positive.push_back(v);\n        }\n    }\n    return positive;\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpn8pj125p.rs:7:20\n    |\n7   |     let positive = Vec::new(0);\n    |                    ^^^^^^^^ - supplied 1 argument\n    |                    |\n    |                    expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmpn8pj125p.rs:10:33\n   |\n10 |             positive = positive.push_back(v);\n   |                                 ^^^^^^^^^ method not found in `Vec<_>`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0061, E0599.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n  let positive = Vec::new(0);\n  for v in l {\n    if v > 0 {\n      positive = positive.concat(v);\n    }\n  }\n  positive\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpgapjyy8o.rs:7:18\n    |\n7   |   let positive = Vec::new(0);\n    |                  ^^^^^^^^ - supplied 1 argument\n    |                  |\n    |                  expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpgapjyy8o.rs:10:27\n    |\n10  |       positive = positive.concat(v);\n    |                           ^^^^^^ - supplied 1 argument\n    |                           |\n    |                           expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0277]: the trait bound `[isize]: Concat<_>` is not satisfied\n   --> /tmp/tmpgapjyy8o.rs:10:27\n    |\n10  |       positive = positive.concat(v);\n    |                           ^^^^^^ the trait `Concat<_>` is not implemented for `[isize]`\n    |\n    = help: the following other types implement trait `Concat<Item>`:\n              <[S] as Concat<str>>\n              <[V] as Concat<T>>\nnote: required by a bound in `slice::<impl [T]>::concat`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0061, E0277.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n    let positive = Vec::new(0);\n    for v in l {\n        if v > 0 {\n            positive = positive.append(v);\n        }\n    }\n    return positive;\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmptfdekz_0.rs:7:20\n    |\n7   |     let positive = Vec::new(0);\n    |                    ^^^^^^^^ - supplied 1 argument\n    |                    |\n    |                    expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptfdekz_0.rs:10:40\n   |\n10 |             positive = positive.append(v);\n   |                                        ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptfdekz_0.rs:10:24\n   |\n7  |     let positive = Vec::new(0);\n   |                    ----------- expected due to this value\n...\n10 |             positive = positive.append(v);\n   |                        ^^^^^^^^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |\n   = note: expected struct `Vec<_>`\n           found unit type `()`\nnote: method `append` modifies its receiver in-place\n  --> /tmp/tmptfdekz_0.rs:10:33\n   |\n10 |             positive = positive.append(v);\n   |                        -------- ^^^^^^ this call modifies `positive` in-place\n   |                        |\n   |                        you probably want to use this value after calling the method...\n   = note: ...instead of the `()` output of method `append`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0061, E0308.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n    let positive = Vec::new(0);\n    for i in l {\n        if i > 0 {\n            positive = positive.push(i);\n        }\n    }\n    return positive;\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpyma75b0j.rs:7:20\n    |\n7   |     let positive = Vec::new(0);\n    |                    ^^^^^^^^ - supplied 1 argument\n    |                    |\n    |                    expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpyma75b0j.rs:10:24\n   |\n7  |     let positive = Vec::new(0);\n   |                    ----------- expected due to this value\n...\n10 |             positive = positive.push(i);\n   |                        ^^^^^^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |\n   = note: expected struct `Vec<isize>`\n           found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0061, E0308.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in l {\n        if i > 0 {\n            result.append(i);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpgbn12nu_.rs:10:27\n   |\n10 |             result.append(i);\n   |                           ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n    let positive = Vec::new(0);\n    for i in l {\n        if i > 0 {\n            positive = positive.concat(i);\n        }\n    }\n    return positive;\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpjq2z9sau.rs:7:20\n    |\n7   |     let positive = Vec::new(0);\n    |                    ^^^^^^^^ - supplied 1 argument\n    |                    |\n    |                    expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpjq2z9sau.rs:10:33\n    |\n10  |             positive = positive.concat(i);\n    |                                 ^^^^^^ - supplied 1 argument\n    |                                 |\n    |                                 expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0277]: the trait bound `[isize]: Concat<_>` is not satisfied\n   --> /tmp/tmpjq2z9sau.rs:10:33\n    |\n10  |             positive = positive.concat(i);\n    |                                 ^^^^^^ the trait `Concat<_>` is not implemented for `[isize]`\n    |\n    = help: the following other types implement trait `Concat<Item>`:\n              <[S] as Concat<str>>\n              <[V] as Concat<T>>\nnote: required by a bound in `slice::<impl [T]>::concat`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0061, E0277.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in l {\n        if i > 0 {\n            result.append(i);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpgbn12nu_.rs:10:27\n   |\n10 |             result.append(i);\n   |                           ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n  let positive = Vec::new(0);\n  for v in l {\n    if v > 0 {\n      positive = positive.append(v);\n    }\n  }\n  positive\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpbsi6u_06.rs:7:18\n    |\n7   |   let positive = Vec::new(0);\n    |                  ^^^^^^^^ - supplied 1 argument\n    |                  |\n    |                  expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpbsi6u_06.rs:10:34\n   |\n10 |       positive = positive.append(v);\n   |                                  ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpbsi6u_06.rs:10:18\n   |\n7  |   let positive = Vec::new(0);\n   |                  ----------- expected due to this value\n...\n10 |       positive = positive.append(v);\n   |                  ^^^^^^^^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |\n   = note: expected struct `Vec<_>`\n           found unit type `()`\nnote: method `append` modifies its receiver in-place\n  --> /tmp/tmpbsi6u_06.rs:10:27\n   |\n10 |       positive = positive.append(v);\n   |                  -------- ^^^^^^ this call modifies `positive` in-place\n   |                  |\n   |                  you probably want to use this value after calling the method...\n   = note: ...instead of the `()` output of method `append`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0061, E0308.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n    let positive = Vec::new(0);\n    for v in l {\n        if v > 0 {\n            positive = positive.concat(v);\n        }\n    }\n    return positive;\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpcx96xpi_.rs:7:20\n    |\n7   |     let positive = Vec::new(0);\n    |                    ^^^^^^^^ - supplied 1 argument\n    |                    |\n    |                    expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpcx96xpi_.rs:10:33\n    |\n10  |             positive = positive.concat(v);\n    |                                 ^^^^^^ - supplied 1 argument\n    |                                 |\n    |                                 expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0277]: the trait bound `[isize]: Concat<_>` is not satisfied\n   --> /tmp/tmpcx96xpi_.rs:10:33\n    |\n10  |             positive = positive.concat(v);\n    |                                 ^^^^^^ the trait `Concat<_>` is not implemented for `[isize]`\n    |\n    = help: the following other types implement trait `Concat<Item>`:\n              <[S] as Concat<str>>\n              <[V] as Concat<T>>\nnote: required by a bound in `slice::<impl [T]>::concat`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0061, E0277.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n    let positive = Vec::new(0);\n    for v in l {\n        if v > 0 {\n            positive = positive.append(v);\n        }\n    }\n    return positive;\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmptfdekz_0.rs:7:20\n    |\n7   |     let positive = Vec::new(0);\n    |                    ^^^^^^^^ - supplied 1 argument\n    |                    |\n    |                    expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptfdekz_0.rs:10:40\n   |\n10 |             positive = positive.append(v);\n   |                                        ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptfdekz_0.rs:10:24\n   |\n7  |     let positive = Vec::new(0);\n   |                    ----------- expected due to this value\n...\n10 |             positive = positive.append(v);\n   |                        ^^^^^^^^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |\n   = note: expected struct `Vec<_>`\n           found unit type `()`\nnote: method `append` modifies its receiver in-place\n  --> /tmp/tmptfdekz_0.rs:10:33\n   |\n10 |             positive = positive.append(v);\n   |                        -------- ^^^^^^ this call modifies `positive` in-place\n   |                        |\n   |                        you probably want to use this value after calling the method...\n   = note: ...instead of the `()` output of method `append`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0061, E0308.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n    let positive = Vec::new(0);\n    for v in l {\n        if v > 0 {\n            positive = positive.append(v);\n        }\n    }\n    return positive;\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmptfdekz_0.rs:7:20\n    |\n7   |     let positive = Vec::new(0);\n    |                    ^^^^^^^^ - supplied 1 argument\n    |                    |\n    |                    expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptfdekz_0.rs:10:40\n   |\n10 |             positive = positive.append(v);\n   |                                        ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptfdekz_0.rs:10:24\n   |\n7  |     let positive = Vec::new(0);\n   |                    ----------- expected due to this value\n...\n10 |             positive = positive.append(v);\n   |                        ^^^^^^^^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |\n   = note: expected struct `Vec<_>`\n           found unit type `()`\nnote: method `append` modifies its receiver in-place\n  --> /tmp/tmptfdekz_0.rs:10:33\n   |\n10 |             positive = positive.append(v);\n   |                        -------- ^^^^^^ this call modifies `positive` in-place\n   |                        |\n   |                        you probably want to use this value after calling the method...\n   = note: ...instead of the `()` output of method `append`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0061, E0308.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n    let positive = Vec::new(0);\n    for v in l {\n        if v > 0 {\n            positive = positive.concat(v);\n        }\n    }\n    return positive;\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpcx96xpi_.rs:7:20\n    |\n7   |     let positive = Vec::new(0);\n    |                    ^^^^^^^^ - supplied 1 argument\n    |                    |\n    |                    expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpcx96xpi_.rs:10:33\n    |\n10  |             positive = positive.concat(v);\n    |                                 ^^^^^^ - supplied 1 argument\n    |                                 |\n    |                                 expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0277]: the trait bound `[isize]: Concat<_>` is not satisfied\n   --> /tmp/tmpcx96xpi_.rs:10:33\n    |\n10  |             positive = positive.concat(v);\n    |                                 ^^^^^^ the trait `Concat<_>` is not implemented for `[isize]`\n    |\n    = help: the following other types implement trait `Concat<Item>`:\n              <[S] as Concat<str>>\n              <[V] as Concat<T>>\nnote: required by a bound in `slice::<impl [T]>::concat`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0061, E0277.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in l {\n        if i > 0 {\n            result.append(i);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpgbn12nu_.rs:10:27\n   |\n10 |             result.append(i);\n   |                           ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n  let positive = Vec::new(0);\n  for v in l {\n    if v > 0 {\n      positive = positive.append(v);\n    }\n  }\n  positive\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpbsi6u_06.rs:7:18\n    |\n7   |   let positive = Vec::new(0);\n    |                  ^^^^^^^^ - supplied 1 argument\n    |                  |\n    |                  expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpbsi6u_06.rs:10:34\n   |\n10 |       positive = positive.append(v);\n   |                                  ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpbsi6u_06.rs:10:18\n   |\n7  |   let positive = Vec::new(0);\n   |                  ----------- expected due to this value\n...\n10 |       positive = positive.append(v);\n   |                  ^^^^^^^^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |\n   = note: expected struct `Vec<_>`\n           found unit type `()`\nnote: method `append` modifies its receiver in-place\n  --> /tmp/tmpbsi6u_06.rs:10:27\n   |\n10 |       positive = positive.append(v);\n   |                  -------- ^^^^^^ this call modifies `positive` in-place\n   |                  |\n   |                  you probably want to use this value after calling the method...\n   = note: ...instead of the `()` output of method `append`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0061, E0308.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in l {\n        if i > 0 {\n            result.append(i);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpgbn12nu_.rs:10:27\n   |\n10 |             result.append(i);\n   |                           ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n  let positive = Vec::new(0);\n  for v in l {\n    if v > 0 {\n      positive = positive.append(v);\n    }\n  }\n  return positive;\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpt3xvo4vl.rs:7:18\n    |\n7   |   let positive = Vec::new(0);\n    |                  ^^^^^^^^ - supplied 1 argument\n    |                  |\n    |                  expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpt3xvo4vl.rs:10:34\n   |\n10 |       positive = positive.append(v);\n   |                                  ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpt3xvo4vl.rs:10:18\n   |\n7  |   let positive = Vec::new(0);\n   |                  ----------- expected due to this value\n...\n10 |       positive = positive.append(v);\n   |                  ^^^^^^^^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |\n   = note: expected struct `Vec<_>`\n           found unit type `()`\nnote: method `append` modifies its receiver in-place\n  --> /tmp/tmpt3xvo4vl.rs:10:27\n   |\n10 |       positive = positive.append(v);\n   |                  -------- ^^^^^^ this call modifies `positive` in-place\n   |                  |\n   |                  you probably want to use this value after calling the method...\n   = note: ...instead of the `()` output of method `append`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0061, E0308.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in l {\n        if i > 0 {\n            result.append(i);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpgbn12nu_.rs:10:27\n   |\n10 |             result.append(i);\n   |                           ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n  let positive = Vec::new(0);\n  for v in l {\n    if v > 0 {\n      positive = positive.push_back(v);\n    }\n  }\n  return positive;\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpoywzihog.rs:7:18\n    |\n7   |   let positive = Vec::new(0);\n    |                  ^^^^^^^^ - supplied 1 argument\n    |                  |\n    |                  expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmpoywzihog.rs:10:27\n   |\n10 |       positive = positive.push_back(v);\n   |                           ^^^^^^^^^ method not found in `Vec<_>`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0061, E0599.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n    let mut r = Vec::new();\n    for v in l {\n        if v > 0 {\n            r.push(v);\n        }\n    }\n    r\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in l {\n        if i > 0 {\n            result.append(i);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpgbn12nu_.rs:10:27\n   |\n10 |             result.append(i);\n   |                           ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n    let positive = Vec::new(0);\n    for v in l {\n        if v > 0 {\n            positive = positive.concat(v);\n        }\n    }\n    return positive;\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpcx96xpi_.rs:7:20\n    |\n7   |     let positive = Vec::new(0);\n    |                    ^^^^^^^^ - supplied 1 argument\n    |                    |\n    |                    expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpcx96xpi_.rs:10:33\n    |\n10  |             positive = positive.concat(v);\n    |                                 ^^^^^^ - supplied 1 argument\n    |                                 |\n    |                                 expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0277]: the trait bound `[isize]: Concat<_>` is not satisfied\n   --> /tmp/tmpcx96xpi_.rs:10:33\n    |\n10  |             positive = positive.concat(v);\n    |                                 ^^^^^^ the trait `Concat<_>` is not implemented for `[isize]`\n    |\n    = help: the following other types implement trait `Concat<Item>`:\n              <[S] as Concat<str>>\n              <[V] as Concat<T>>\nnote: required by a bound in `slice::<impl [T]>::concat`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0061, E0277.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n  let positive = Vec::new(0);\n  for v in l {\n    if v > 0 {\n      positive = positive.push_back(v);\n    }\n  }\n  positive\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp9yiwrf71.rs:7:18\n    |\n7   |   let positive = Vec::new(0);\n    |                  ^^^^^^^^ - supplied 1 argument\n    |                  |\n    |                  expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmp9yiwrf71.rs:10:27\n   |\n10 |       positive = positive.push_back(v);\n   |                           ^^^^^^^^^ method not found in `Vec<_>`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0061, E0599.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n    let positive = Vec::new(0);\n    for i in l {\n        if i > 0 {\n            positive = positive.append(i);\n        }\n    }\n    return positive;\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp5pj20kk0.rs:7:20\n    |\n7   |     let positive = Vec::new(0);\n    |                    ^^^^^^^^ - supplied 1 argument\n    |                    |\n    |                    expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp5pj20kk0.rs:10:40\n   |\n10 |             positive = positive.append(i);\n   |                                        ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp5pj20kk0.rs:10:24\n   |\n7  |     let positive = Vec::new(0);\n   |                    ----------- expected due to this value\n...\n10 |             positive = positive.append(i);\n   |                        ^^^^^^^^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |\n   = note: expected struct `Vec<_>`\n           found unit type `()`\nnote: method `append` modifies its receiver in-place\n  --> /tmp/tmp5pj20kk0.rs:10:33\n   |\n10 |             positive = positive.append(i);\n   |                        -------- ^^^^^^ this call modifies `positive` in-place\n   |                        |\n   |                        you probably want to use this value after calling the method...\n   = note: ...instead of the `()` output of method `append`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0061, E0308.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n    let pos = 0;\n    for i in l {\n        if i > 0 {\n            pos += 1;\n        }\n    }\n    return l.slice(pos, l.len);\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "error[E0599]: no method named `slice` found for struct `Vec<isize>` in the current scope\n  --> /tmp/tmp3vypkogz.rs:13:14\n   |\n13 |     return l.slice(pos, l.len);\n   |              ^^^^^\n   |\n   = help: items from traits can only be used if the trait is in scope\nhelp: the following trait is implemented but not in scope; perhaps add a `use` for it:\n   |\n1  | use std::collections::vec_deque::ring_slices::RingSlices;\n   |\nhelp: there is an associated function with a similar name\n   |\n13 |     return l.as_slice(pos, l.len);\n   |              ~~~~~~~~\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp3vypkogz.rs:13:27\n   |\n13 |     return l.slice(pos, l.len);\n   |                           ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |     return l.slice(pos, l.len());\n   |                              ++\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0599, E0616.\nFor more information about an error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n    let mut vec = Vec::new();\n    for i in l {\n        if i > 0 {\n            vec.push(i);\n        }\n    }\n    vec\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n  let positive = Vec::new(0);\n  for v in l {\n    if v > 0 {\n      positive = positive.concat(v);\n    }\n  }\n  positive\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpgapjyy8o.rs:7:18\n    |\n7   |   let positive = Vec::new(0);\n    |                  ^^^^^^^^ - supplied 1 argument\n    |                  |\n    |                  expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpgapjyy8o.rs:10:27\n    |\n10  |       positive = positive.concat(v);\n    |                           ^^^^^^ - supplied 1 argument\n    |                           |\n    |                           expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0277]: the trait bound `[isize]: Concat<_>` is not satisfied\n   --> /tmp/tmpgapjyy8o.rs:10:27\n    |\n10  |       positive = positive.concat(v);\n    |                           ^^^^^^ the trait `Concat<_>` is not implemented for `[isize]`\n    |\n    = help: the following other types implement trait `Concat<Item>`:\n              <[S] as Concat<str>>\n              <[V] as Concat<T>>\nnote: required by a bound in `slice::<impl [T]>::concat`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0061, E0277.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n    let positive = Vec::new(0);\n    for v in l {\n        if v > 0 {\n            positive = positive.concat(v);\n        }\n    }\n    return positive;\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpcx96xpi_.rs:7:20\n    |\n7   |     let positive = Vec::new(0);\n    |                    ^^^^^^^^ - supplied 1 argument\n    |                    |\n    |                    expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpcx96xpi_.rs:10:33\n    |\n10  |             positive = positive.concat(v);\n    |                                 ^^^^^^ - supplied 1 argument\n    |                                 |\n    |                                 expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0277]: the trait bound `[isize]: Concat<_>` is not satisfied\n   --> /tmp/tmpcx96xpi_.rs:10:33\n    |\n10  |             positive = positive.concat(v);\n    |                                 ^^^^^^ the trait `Concat<_>` is not implemented for `[isize]`\n    |\n    = help: the following other types implement trait `Concat<Item>`:\n              <[S] as Concat<str>>\n              <[V] as Concat<T>>\nnote: required by a bound in `slice::<impl [T]>::concat`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0061, E0277.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for v in l {\n        if v > 0 {\n            result.push(v);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  for i in l {\n    if i > 0 {\n      result.append(i);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp532ud2bo.rs:10:21\n   |\n10 |       result.append(i);\n   |                     ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n    let positive = Vec::new(0);\n    for v in l {\n        if v > 0 {\n            positive = positive.append(v);\n        }\n    }\n    return positive;\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmptfdekz_0.rs:7:20\n    |\n7   |     let positive = Vec::new(0);\n    |                    ^^^^^^^^ - supplied 1 argument\n    |                    |\n    |                    expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptfdekz_0.rs:10:40\n   |\n10 |             positive = positive.append(v);\n   |                                        ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptfdekz_0.rs:10:24\n   |\n7  |     let positive = Vec::new(0);\n   |                    ----------- expected due to this value\n...\n10 |             positive = positive.append(v);\n   |                        ^^^^^^^^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |\n   = note: expected struct `Vec<_>`\n           found unit type `()`\nnote: method `append` modifies its receiver in-place\n  --> /tmp/tmptfdekz_0.rs:10:33\n   |\n10 |             positive = positive.append(v);\n   |                        -------- ^^^^^^ this call modifies `positive` in-place\n   |                        |\n   |                        you probably want to use this value after calling the method...\n   = note: ...instead of the `()` output of method `append`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0061, E0308.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n    let positive = Vec::new(0);\n    for v in l {\n        if v > 0 {\n            positive = positive.append(v);\n        }\n    }\n    return positive;\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmptfdekz_0.rs:7:20\n    |\n7   |     let positive = Vec::new(0);\n    |                    ^^^^^^^^ - supplied 1 argument\n    |                    |\n    |                    expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptfdekz_0.rs:10:40\n   |\n10 |             positive = positive.append(v);\n   |                                        ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptfdekz_0.rs:10:24\n   |\n7  |     let positive = Vec::new(0);\n   |                    ----------- expected due to this value\n...\n10 |             positive = positive.append(v);\n   |                        ^^^^^^^^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |\n   = note: expected struct `Vec<_>`\n           found unit type `()`\nnote: method `append` modifies its receiver in-place\n  --> /tmp/tmptfdekz_0.rs:10:33\n   |\n10 |             positive = positive.append(v);\n   |                        -------- ^^^^^^ this call modifies `positive` in-place\n   |                        |\n   |                        you probably want to use this value after calling the method...\n   = note: ...instead of the `()` output of method `append`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0061, E0308.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n    let positive = Vec::new(0);\n    for v in l {\n        if v > 0 {\n            positive = positive.append(v);\n        }\n    }\n    return positive;\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmptfdekz_0.rs:7:20\n    |\n7   |     let positive = Vec::new(0);\n    |                    ^^^^^^^^ - supplied 1 argument\n    |                    |\n    |                    expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptfdekz_0.rs:10:40\n   |\n10 |             positive = positive.append(v);\n   |                                        ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptfdekz_0.rs:10:24\n   |\n7  |     let positive = Vec::new(0);\n   |                    ----------- expected due to this value\n...\n10 |             positive = positive.append(v);\n   |                        ^^^^^^^^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |\n   = note: expected struct `Vec<_>`\n           found unit type `()`\nnote: method `append` modifies its receiver in-place\n  --> /tmp/tmptfdekz_0.rs:10:33\n   |\n10 |             positive = positive.append(v);\n   |                        -------- ^^^^^^ this call modifies `positive` in-place\n   |                        |\n   |                        you probably want to use this value after calling the method...\n   = note: ...instead of the `()` output of method `append`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0061, E0308.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in l {\n        if i > 0 {\n            result.append(i);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpgbn12nu_.rs:10:27\n   |\n10 |             result.append(i);\n   |                           ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n    let mut positive = Vec::new();\n    for i in l {\n        if i > 0 {\n            positive.push(i);\n        }\n    }\n    positive\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  for i in l {\n    if i > 0 {\n      result.push(i);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n  let positive = Vec::new(0);\n  for i in l {\n    if i > 0 {\n      positive = positive.push_back(i);\n    }\n  }\n  return positive;\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmprtrom3ml.rs:7:18\n    |\n7   |   let positive = Vec::new(0);\n    |                  ^^^^^^^^ - supplied 1 argument\n    |                  |\n    |                  expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmprtrom3ml.rs:10:27\n   |\n10 |       positive = positive.push_back(i);\n   |                           ^^^^^^^^^ method not found in `Vec<_>`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0061, E0599.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in l {\n        if i > 0 {\n            result.append(i);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpgbn12nu_.rs:10:27\n   |\n10 |             result.append(i);\n   |                           ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n    let positive = Vec::new(0);\n    for i in l {\n        if i > 0 {\n            positive = positive.push_back(i);\n        }\n    }\n    return positive;\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp07ia7sdy.rs:7:20\n    |\n7   |     let positive = Vec::new(0);\n    |                    ^^^^^^^^ - supplied 1 argument\n    |                    |\n    |                    expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmp07ia7sdy.rs:10:33\n   |\n10 |             positive = positive.push_back(i);\n   |                                 ^^^^^^^^^ method not found in `Vec<_>`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0061, E0599.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n  let mut r = Vec::new();\n  for v in l {\n    if v > 0 {\n      r.push(v);\n    }\n  }\n  return r;\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n    let positive = Vec::new(0);\n    for v in l {\n        if v > 0 {\n            positive = positive.push_back(v);\n        }\n    }\n    return positive;\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpn8pj125p.rs:7:20\n    |\n7   |     let positive = Vec::new(0);\n    |                    ^^^^^^^^ - supplied 1 argument\n    |                    |\n    |                    expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmpn8pj125p.rs:10:33\n   |\n10 |             positive = positive.push_back(v);\n   |                                 ^^^^^^^^^ method not found in `Vec<_>`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0061, E0599.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in l {\n        if i > 0 {\n            result.append(i);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpgbn12nu_.rs:10:27\n   |\n10 |             result.append(i);\n   |                           ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in l {\n        if i > 0 {\n            result.append(i);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpgbn12nu_.rs:10:27\n   |\n10 |             result.append(i);\n   |                           ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  for i in l {\n    if i > 0 {\n      result.push(i);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n    let positive = Vec::new(0);\n    for v in l {\n        if v > 0 {\n            positive = positive.push_back(v);\n        }\n    }\n    return positive;\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpn8pj125p.rs:7:20\n    |\n7   |     let positive = Vec::new(0);\n    |                    ^^^^^^^^ - supplied 1 argument\n    |                    |\n    |                    expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmpn8pj125p.rs:10:33\n   |\n10 |             positive = positive.push_back(v);\n   |                                 ^^^^^^^^^ method not found in `Vec<_>`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0061, E0599.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n    let positive = Vec::new(0);\n    for v in l {\n        if v > 0 {\n            positive = positive.append(v);\n        }\n    }\n    return positive;\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmptfdekz_0.rs:7:20\n    |\n7   |     let positive = Vec::new(0);\n    |                    ^^^^^^^^ - supplied 1 argument\n    |                    |\n    |                    expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptfdekz_0.rs:10:40\n   |\n10 |             positive = positive.append(v);\n   |                                        ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptfdekz_0.rs:10:24\n   |\n7  |     let positive = Vec::new(0);\n   |                    ----------- expected due to this value\n...\n10 |             positive = positive.append(v);\n   |                        ^^^^^^^^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |\n   = note: expected struct `Vec<_>`\n           found unit type `()`\nnote: method `append` modifies its receiver in-place\n  --> /tmp/tmptfdekz_0.rs:10:33\n   |\n10 |             positive = positive.append(v);\n   |                        -------- ^^^^^^ this call modifies `positive` in-place\n   |                        |\n   |                        you probably want to use this value after calling the method...\n   = note: ...instead of the `()` output of method `append`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0061, E0308.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n  let positive = Vec::new(0);\n  for v in l {\n    if v > 0 {\n      positive = positive.push_back(v);\n    }\n  }\n  return positive;\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpoywzihog.rs:7:18\n    |\n7   |   let positive = Vec::new(0);\n    |                  ^^^^^^^^ - supplied 1 argument\n    |                  |\n    |                  expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmpoywzihog.rs:10:27\n   |\n10 |       positive = positive.push_back(v);\n   |                           ^^^^^^^^^ method not found in `Vec<_>`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0061, E0599.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n    let mut positive = Vec::new();\n    for i in l {\n        if i > 0 {\n            positive.push(i);\n        }\n    }\n    positive\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n    let positive = Vec::new(0);\n    for v in l {\n        if v > 0 {\n            positive = positive.concat(v);\n        }\n    }\n    return positive;\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpcx96xpi_.rs:7:20\n    |\n7   |     let positive = Vec::new(0);\n    |                    ^^^^^^^^ - supplied 1 argument\n    |                    |\n    |                    expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpcx96xpi_.rs:10:33\n    |\n10  |             positive = positive.concat(v);\n    |                                 ^^^^^^ - supplied 1 argument\n    |                                 |\n    |                                 expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0277]: the trait bound `[isize]: Concat<_>` is not satisfied\n   --> /tmp/tmpcx96xpi_.rs:10:33\n    |\n10  |             positive = positive.concat(v);\n    |                                 ^^^^^^ the trait `Concat<_>` is not implemented for `[isize]`\n    |\n    = help: the following other types implement trait `Concat<Item>`:\n              <[S] as Concat<str>>\n              <[V] as Concat<T>>\nnote: required by a bound in `slice::<impl [T]>::concat`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0061, E0277.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  for i in l {\n    if i > 0 {\n      result.append(i);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp532ud2bo.rs:10:21\n   |\n10 |       result.append(i);\n   |                     ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  for i in l {\n    if i > 0 {\n      result.append(i);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp532ud2bo.rs:10:21\n   |\n10 |       result.append(i);\n   |                     ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n    let mut r = Vec::new();\n    for i in l {\n        if i > 0 {\n            r.push(i);\n        }\n    }\n    r\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n    let pos = 0;\n    for i in l {\n        if i > 0 {\n            pos += 1;\n        }\n    }\n    return Vec::from_iter(l.iter().take(pos));\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "error[E0599]: no function or associated item named `from_iter` found for struct `Vec<_, _>` in the current scope\n  --> /tmp/tmpp3gz59iq.rs:13:17\n   |\n13 |     return Vec::from_iter(l.iter().take(pos));\n   |                 ^^^^^^^^^ function or associated item not found in `Vec<_, _>`\n   |\n   = help: items from traits can only be used if the trait is in scope\nhelp: the following trait is implemented but not in scope; perhaps add a `use` for it:\n   |\n1  | use std::iter::FromIterator;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n  let pos = 0;\n  for i in l {\n    if i > 0 {\n      pos += 1;\n    }\n  }\n  return Vec::from_iter(l.iter().take(pos));\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "error[E0599]: no function or associated item named `from_iter` found for struct `Vec<_, _>` in the current scope\n  --> /tmp/tmp8e1a58r9.rs:13:15\n   |\n13 |   return Vec::from_iter(l.iter().take(pos));\n   |               ^^^^^^^^^ function or associated item not found in `Vec<_, _>`\n   |\n   = help: items from traits can only be used if the trait is in scope\nhelp: the following trait is implemented but not in scope; perhaps add a `use` for it:\n   |\n1  | use std::iter::FromIterator;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n    let positive = Vec::new(0);\n    for i in l {\n        if i > 0 {\n            positive = positive.concat(i);\n        }\n    }\n    return positive;\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpjq2z9sau.rs:7:20\n    |\n7   |     let positive = Vec::new(0);\n    |                    ^^^^^^^^ - supplied 1 argument\n    |                    |\n    |                    expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpjq2z9sau.rs:10:33\n    |\n10  |             positive = positive.concat(i);\n    |                                 ^^^^^^ - supplied 1 argument\n    |                                 |\n    |                                 expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0277]: the trait bound `[isize]: Concat<_>` is not satisfied\n   --> /tmp/tmpjq2z9sau.rs:10:33\n    |\n10  |             positive = positive.concat(i);\n    |                                 ^^^^^^ the trait `Concat<_>` is not implemented for `[isize]`\n    |\n    = help: the following other types implement trait `Concat<Item>`:\n              <[S] as Concat<str>>\n              <[V] as Concat<T>>\nnote: required by a bound in `slice::<impl [T]>::concat`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0061, E0277.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n  let positive = Vec::new(0);\n  for v in l {\n    if v > 0 {\n      positive = positive.concat(v);\n    }\n  }\n  positive\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpgapjyy8o.rs:7:18\n    |\n7   |   let positive = Vec::new(0);\n    |                  ^^^^^^^^ - supplied 1 argument\n    |                  |\n    |                  expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpgapjyy8o.rs:10:27\n    |\n10  |       positive = positive.concat(v);\n    |                           ^^^^^^ - supplied 1 argument\n    |                           |\n    |                           expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0277]: the trait bound `[isize]: Concat<_>` is not satisfied\n   --> /tmp/tmpgapjyy8o.rs:10:27\n    |\n10  |       positive = positive.concat(v);\n    |                           ^^^^^^ the trait `Concat<_>` is not implemented for `[isize]`\n    |\n    = help: the following other types implement trait `Concat<Item>`:\n              <[S] as Concat<str>>\n              <[V] as Concat<T>>\nnote: required by a bound in `slice::<impl [T]>::concat`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0061, E0277.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n    let positive = Vec::new(0);\n    for v in l {\n        if v > 0 {\n            positive = positive.push_back(v);\n        }\n    }\n    return positive;\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpn8pj125p.rs:7:20\n    |\n7   |     let positive = Vec::new(0);\n    |                    ^^^^^^^^ - supplied 1 argument\n    |                    |\n    |                    expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmpn8pj125p.rs:10:33\n   |\n10 |             positive = positive.push_back(v);\n   |                                 ^^^^^^^^^ method not found in `Vec<_>`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0061, E0599.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n    let positive = Vec::new(0);\n    for v in l {\n        if v > 0 {\n            positive = positive.concat(v);\n        }\n    }\n    return positive;\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpcx96xpi_.rs:7:20\n    |\n7   |     let positive = Vec::new(0);\n    |                    ^^^^^^^^ - supplied 1 argument\n    |                    |\n    |                    expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpcx96xpi_.rs:10:33\n    |\n10  |             positive = positive.concat(v);\n    |                                 ^^^^^^ - supplied 1 argument\n    |                                 |\n    |                                 expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0277]: the trait bound `[isize]: Concat<_>` is not satisfied\n   --> /tmp/tmpcx96xpi_.rs:10:33\n    |\n10  |             positive = positive.concat(v);\n    |                                 ^^^^^^ the trait `Concat<_>` is not implemented for `[isize]`\n    |\n    = help: the following other types implement trait `Concat<Item>`:\n              <[S] as Concat<str>>\n              <[V] as Concat<T>>\nnote: required by a bound in `slice::<impl [T]>::concat`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0061, E0277.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n    let positive = Vec::new(0);\n    for v in l {\n        if v > 0 {\n            positive = positive.push_back(v);\n        }\n    }\n    return positive;\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpn8pj125p.rs:7:20\n    |\n7   |     let positive = Vec::new(0);\n    |                    ^^^^^^^^ - supplied 1 argument\n    |                    |\n    |                    expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmpn8pj125p.rs:10:33\n   |\n10 |             positive = positive.push_back(v);\n   |                                 ^^^^^^^^^ method not found in `Vec<_>`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0061, E0599.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in l {\n        if i > 0 {\n            result.append(i);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpgbn12nu_.rs:10:27\n   |\n10 |             result.append(i);\n   |                           ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in l {\n        if i > 0 {\n            result.append(i);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpgbn12nu_.rs:10:27\n   |\n10 |             result.append(i);\n   |                           ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n    let positive = Vec::new(0);\n    for v in l {\n        if v > 0 {\n            positive = positive.concat(v);\n        }\n    }\n    return positive;\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpcx96xpi_.rs:7:20\n    |\n7   |     let positive = Vec::new(0);\n    |                    ^^^^^^^^ - supplied 1 argument\n    |                    |\n    |                    expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpcx96xpi_.rs:10:33\n    |\n10  |             positive = positive.concat(v);\n    |                                 ^^^^^^ - supplied 1 argument\n    |                                 |\n    |                                 expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0277]: the trait bound `[isize]: Concat<_>` is not satisfied\n   --> /tmp/tmpcx96xpi_.rs:10:33\n    |\n10  |             positive = positive.concat(v);\n    |                                 ^^^^^^ the trait `Concat<_>` is not implemented for `[isize]`\n    |\n    = help: the following other types implement trait `Concat<Item>`:\n              <[S] as Concat<str>>\n              <[V] as Concat<T>>\nnote: required by a bound in `slice::<impl [T]>::concat`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0061, E0277.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n    let positive = Vec::new(0);\n    for v in l {\n        if v > 0 {\n            positive = positive.concat(v);\n        }\n    }\n    return positive;\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpcx96xpi_.rs:7:20\n    |\n7   |     let positive = Vec::new(0);\n    |                    ^^^^^^^^ - supplied 1 argument\n    |                    |\n    |                    expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpcx96xpi_.rs:10:33\n    |\n10  |             positive = positive.concat(v);\n    |                                 ^^^^^^ - supplied 1 argument\n    |                                 |\n    |                                 expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0277]: the trait bound `[isize]: Concat<_>` is not satisfied\n   --> /tmp/tmpcx96xpi_.rs:10:33\n    |\n10  |             positive = positive.concat(v);\n    |                                 ^^^^^^ the trait `Concat<_>` is not implemented for `[isize]`\n    |\n    = help: the following other types implement trait `Concat<Item>`:\n              <[S] as Concat<str>>\n              <[V] as Concat<T>>\nnote: required by a bound in `slice::<impl [T]>::concat`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0061, E0277.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n  let pos = 0;\n  for i in l {\n    if i > 0 {\n      pos += 1;\n    }\n  }\n  return Vec::from_iter(pos, l);\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0599]: no function or associated item named `from_iter` found for struct `Vec<_, _>` in the current scope\n  --> /tmp/tmp6ant28aj.rs:13:15\n   |\n13 |   return Vec::from_iter(pos, l);\n   |               ^^^^^^^^^ function or associated item not found in `Vec<_, _>`\n   |\n   = help: items from traits can only be used if the trait is in scope\nhelp: the following trait is implemented but not in scope; perhaps add a `use` for it:\n   |\n1  | use std::iter::FromIterator;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n    let positive = Vec::new(0);\n    for v in l {\n        if v > 0 {\n            positive = positive.append(v);\n        }\n    }\n    return positive;\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmptfdekz_0.rs:7:20\n    |\n7   |     let positive = Vec::new(0);\n    |                    ^^^^^^^^ - supplied 1 argument\n    |                    |\n    |                    expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptfdekz_0.rs:10:40\n   |\n10 |             positive = positive.append(v);\n   |                                        ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptfdekz_0.rs:10:24\n   |\n7  |     let positive = Vec::new(0);\n   |                    ----------- expected due to this value\n...\n10 |             positive = positive.append(v);\n   |                        ^^^^^^^^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |\n   = note: expected struct `Vec<_>`\n           found unit type `()`\nnote: method `append` modifies its receiver in-place\n  --> /tmp/tmptfdekz_0.rs:10:33\n   |\n10 |             positive = positive.append(v);\n   |                        -------- ^^^^^^ this call modifies `positive` in-place\n   |                        |\n   |                        you probably want to use this value after calling the method...\n   = note: ...instead of the `()` output of method `append`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0061, E0308.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n    let positive = Vec::new(0);\n    for v in l {\n        if v > 0 {\n            positive = positive.append(v);\n        }\n    }\n    return positive;\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmptfdekz_0.rs:7:20\n    |\n7   |     let positive = Vec::new(0);\n    |                    ^^^^^^^^ - supplied 1 argument\n    |                    |\n    |                    expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptfdekz_0.rs:10:40\n   |\n10 |             positive = positive.append(v);\n   |                                        ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptfdekz_0.rs:10:24\n   |\n7  |     let positive = Vec::new(0);\n   |                    ----------- expected due to this value\n...\n10 |             positive = positive.append(v);\n   |                        ^^^^^^^^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |\n   = note: expected struct `Vec<_>`\n           found unit type `()`\nnote: method `append` modifies its receiver in-place\n  --> /tmp/tmptfdekz_0.rs:10:33\n   |\n10 |             positive = positive.append(v);\n   |                        -------- ^^^^^^ this call modifies `positive` in-place\n   |                        |\n   |                        you probably want to use this value after calling the method...\n   = note: ...instead of the `()` output of method `append`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0061, E0308.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  for i in l {\n    if i > 0 {\n      result.append(i);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp532ud2bo.rs:10:21\n   |\n10 |       result.append(i);\n   |                     ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n    let positive = Vec::new(0);\n    for v in l {\n        if v > 0 {\n            positive = positive.push_back(v);\n        }\n    }\n    return positive;\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpn8pj125p.rs:7:20\n    |\n7   |     let positive = Vec::new(0);\n    |                    ^^^^^^^^ - supplied 1 argument\n    |                    |\n    |                    expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmpn8pj125p.rs:10:33\n   |\n10 |             positive = positive.push_back(v);\n   |                                 ^^^^^^^^^ method not found in `Vec<_>`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0061, E0599.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n  let mut r = Vec::new();\n  for v in l {\n    if v > 0 {\n      r.push(v);\n    }\n  }\n  return r;\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n    let pos = 0;\n    for i in l {\n        if i > 0 {\n            pos += 1;\n        }\n    }\n    return l.slice(pos, l.len);\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "error[E0599]: no method named `slice` found for struct `Vec<isize>` in the current scope\n  --> /tmp/tmp3vypkogz.rs:13:14\n   |\n13 |     return l.slice(pos, l.len);\n   |              ^^^^^\n   |\n   = help: items from traits can only be used if the trait is in scope\nhelp: the following trait is implemented but not in scope; perhaps add a `use` for it:\n   |\n1  | use std::collections::vec_deque::ring_slices::RingSlices;\n   |\nhelp: there is an associated function with a similar name\n   |\n13 |     return l.as_slice(pos, l.len);\n   |              ~~~~~~~~\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp3vypkogz.rs:13:27\n   |\n13 |     return l.slice(pos, l.len);\n   |                           ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |     return l.slice(pos, l.len());\n   |                              ++\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0599, E0616.\nFor more information about an error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n    let positive = Vec::new(0);\n    for v in l {\n        if v > 0 {\n            positive = positive.append(v);\n        }\n    }\n    return positive;\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmptfdekz_0.rs:7:20\n    |\n7   |     let positive = Vec::new(0);\n    |                    ^^^^^^^^ - supplied 1 argument\n    |                    |\n    |                    expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptfdekz_0.rs:10:40\n   |\n10 |             positive = positive.append(v);\n   |                                        ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptfdekz_0.rs:10:24\n   |\n7  |     let positive = Vec::new(0);\n   |                    ----------- expected due to this value\n...\n10 |             positive = positive.append(v);\n   |                        ^^^^^^^^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |\n   = note: expected struct `Vec<_>`\n           found unit type `()`\nnote: method `append` modifies its receiver in-place\n  --> /tmp/tmptfdekz_0.rs:10:33\n   |\n10 |             positive = positive.append(v);\n   |                        -------- ^^^^^^ this call modifies `positive` in-place\n   |                        |\n   |                        you probably want to use this value after calling the method...\n   = note: ...instead of the `()` output of method `append`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0061, E0308.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n    let positive = Vec::new(0);\n    for v in l {\n        if v > 0 {\n            positive = positive.concat(v);\n        }\n    }\n    return positive;\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpcx96xpi_.rs:7:20\n    |\n7   |     let positive = Vec::new(0);\n    |                    ^^^^^^^^ - supplied 1 argument\n    |                    |\n    |                    expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpcx96xpi_.rs:10:33\n    |\n10  |             positive = positive.concat(v);\n    |                                 ^^^^^^ - supplied 1 argument\n    |                                 |\n    |                                 expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0277]: the trait bound `[isize]: Concat<_>` is not satisfied\n   --> /tmp/tmpcx96xpi_.rs:10:33\n    |\n10  |             positive = positive.concat(v);\n    |                                 ^^^^^^ the trait `Concat<_>` is not implemented for `[isize]`\n    |\n    = help: the following other types implement trait `Concat<Item>`:\n              <[S] as Concat<str>>\n              <[V] as Concat<T>>\nnote: required by a bound in `slice::<impl [T]>::concat`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0061, E0277.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n  let positive = Vec::new(0);\n  for v in l {\n    if v > 0 {\n      positive = positive.push_back(v);\n    }\n  }\n  return positive;\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpoywzihog.rs:7:18\n    |\n7   |   let positive = Vec::new(0);\n    |                  ^^^^^^^^ - supplied 1 argument\n    |                  |\n    |                  expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmpoywzihog.rs:10:27\n   |\n10 |       positive = positive.push_back(v);\n   |                           ^^^^^^^^^ method not found in `Vec<_>`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0061, E0599.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n  let positive = Vec::new(0);\n  for v in l {\n    if v > 0 {\n      positive = positive.concat(v);\n    }\n  }\n  positive\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpgapjyy8o.rs:7:18\n    |\n7   |   let positive = Vec::new(0);\n    |                  ^^^^^^^^ - supplied 1 argument\n    |                  |\n    |                  expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpgapjyy8o.rs:10:27\n    |\n10  |       positive = positive.concat(v);\n    |                           ^^^^^^ - supplied 1 argument\n    |                           |\n    |                           expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0277]: the trait bound `[isize]: Concat<_>` is not satisfied\n   --> /tmp/tmpgapjyy8o.rs:10:27\n    |\n10  |       positive = positive.concat(v);\n    |                           ^^^^^^ the trait `Concat<_>` is not implemented for `[isize]`\n    |\n    = help: the following other types implement trait `Concat<Item>`:\n              <[S] as Concat<str>>\n              <[V] as Concat<T>>\nnote: required by a bound in `slice::<impl [T]>::concat`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0061, E0277.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n  let positive = Vec::new(0);\n  for v in l {\n    if v > 0 {\n      positive = positive.concat(v);\n    }\n  }\n  positive\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpgapjyy8o.rs:7:18\n    |\n7   |   let positive = Vec::new(0);\n    |                  ^^^^^^^^ - supplied 1 argument\n    |                  |\n    |                  expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpgapjyy8o.rs:10:27\n    |\n10  |       positive = positive.concat(v);\n    |                           ^^^^^^ - supplied 1 argument\n    |                           |\n    |                           expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0277]: the trait bound `[isize]: Concat<_>` is not satisfied\n   --> /tmp/tmpgapjyy8o.rs:10:27\n    |\n10  |       positive = positive.concat(v);\n    |                           ^^^^^^ the trait `Concat<_>` is not implemented for `[isize]`\n    |\n    = help: the following other types implement trait `Concat<Item>`:\n              <[S] as Concat<str>>\n              <[V] as Concat<T>>\nnote: required by a bound in `slice::<impl [T]>::concat`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0061, E0277.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n    let pos = 0;\n    for i in l {\n        if i > 0 {\n            pos += 1;\n        }\n    }\n    return l.slice(pos, l.len);\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "error[E0599]: no method named `slice` found for struct `Vec<isize>` in the current scope\n  --> /tmp/tmp3vypkogz.rs:13:14\n   |\n13 |     return l.slice(pos, l.len);\n   |              ^^^^^\n   |\n   = help: items from traits can only be used if the trait is in scope\nhelp: the following trait is implemented but not in scope; perhaps add a `use` for it:\n   |\n1  | use std::collections::vec_deque::ring_slices::RingSlices;\n   |\nhelp: there is an associated function with a similar name\n   |\n13 |     return l.as_slice(pos, l.len);\n   |              ~~~~~~~~\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp3vypkogz.rs:13:27\n   |\n13 |     return l.slice(pos, l.len);\n   |                           ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n13 |     return l.slice(pos, l.len());\n   |                              ++\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0599, E0616.\nFor more information about an error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in l {\n        if i > 0 {\n            result.append(i);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpgbn12nu_.rs:10:27\n   |\n10 |             result.append(i);\n   |                           ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  for i in l {\n    if i > 0 {\n      result.append(i);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp532ud2bo.rs:10:21\n   |\n10 |       result.append(i);\n   |                     ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n    let positive = Vec::new(0);\n    for v in l {\n        if v > 0 {\n            positive = positive.push_back(v);\n        }\n    }\n    return positive;\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpn8pj125p.rs:7:20\n    |\n7   |     let positive = Vec::new(0);\n    |                    ^^^^^^^^ - supplied 1 argument\n    |                    |\n    |                    expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmpn8pj125p.rs:10:33\n   |\n10 |             positive = positive.push_back(v);\n   |                                 ^^^^^^^^^ method not found in `Vec<_>`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0061, E0599.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n  let positive = Vec::new(0);\n  for v in l {\n    if v > 0 {\n      positive = positive.push_back(v);\n    }\n  }\n  return positive;\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpoywzihog.rs:7:18\n    |\n7   |   let positive = Vec::new(0);\n    |                  ^^^^^^^^ - supplied 1 argument\n    |                  |\n    |                  expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmpoywzihog.rs:10:27\n   |\n10 |       positive = positive.push_back(v);\n   |                           ^^^^^^^^^ method not found in `Vec<_>`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0061, E0599.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n  let positive = Vec::new(0);\n  for v in l {\n    if v > 0 {\n      positive = positive.append(v);\n    }\n  }\n  positive\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpbsi6u_06.rs:7:18\n    |\n7   |   let positive = Vec::new(0);\n    |                  ^^^^^^^^ - supplied 1 argument\n    |                  |\n    |                  expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpbsi6u_06.rs:10:34\n   |\n10 |       positive = positive.append(v);\n   |                                  ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpbsi6u_06.rs:10:18\n   |\n7  |   let positive = Vec::new(0);\n   |                  ----------- expected due to this value\n...\n10 |       positive = positive.append(v);\n   |                  ^^^^^^^^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |\n   = note: expected struct `Vec<_>`\n           found unit type `()`\nnote: method `append` modifies its receiver in-place\n  --> /tmp/tmpbsi6u_06.rs:10:27\n   |\n10 |       positive = positive.append(v);\n   |                  -------- ^^^^^^ this call modifies `positive` in-place\n   |                  |\n   |                  you probably want to use this value after calling the method...\n   = note: ...instead of the `()` output of method `append`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0061, E0308.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n  let positive = Vec::new(0);\n  for v in l {\n    if v > 0 {\n      positive = positive.concat(v);\n    }\n  }\n  positive\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpgapjyy8o.rs:7:18\n    |\n7   |   let positive = Vec::new(0);\n    |                  ^^^^^^^^ - supplied 1 argument\n    |                  |\n    |                  expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmpgapjyy8o.rs:10:27\n    |\n10  |       positive = positive.concat(v);\n    |                           ^^^^^^ - supplied 1 argument\n    |                           |\n    |                           expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0277]: the trait bound `[isize]: Concat<_>` is not satisfied\n   --> /tmp/tmpgapjyy8o.rs:10:27\n    |\n10  |       positive = positive.concat(v);\n    |                           ^^^^^^ the trait `Concat<_>` is not implemented for `[isize]`\n    |\n    = help: the following other types implement trait `Concat<Item>`:\n              <[S] as Concat<str>>\n              <[V] as Concat<T>>\nnote: required by a bound in `slice::<impl [T]>::concat`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0061, E0277.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n    let positive = Vec::new(0);\n    for v in l {\n        if v > 0 {\n            positive = positive.append(v);\n        }\n    }\n    return positive;\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmptfdekz_0.rs:7:20\n    |\n7   |     let positive = Vec::new(0);\n    |                    ^^^^^^^^ - supplied 1 argument\n    |                    |\n    |                    expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptfdekz_0.rs:10:40\n   |\n10 |             positive = positive.append(v);\n   |                                        ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptfdekz_0.rs:10:24\n   |\n7  |     let positive = Vec::new(0);\n   |                    ----------- expected due to this value\n...\n10 |             positive = positive.append(v);\n   |                        ^^^^^^^^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |\n   = note: expected struct `Vec<_>`\n           found unit type `()`\nnote: method `append` modifies its receiver in-place\n  --> /tmp/tmptfdekz_0.rs:10:33\n   |\n10 |             positive = positive.append(v);\n   |                        -------- ^^^^^^ this call modifies `positive` in-place\n   |                        |\n   |                        you probably want to use this value after calling the method...\n   = note: ...instead of the `()` output of method `append`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0061, E0308.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n    let positive = Vec::new(0);\n    for i in l {\n        if i > 0 {\n            positive = positive.append(i);\n        }\n    }\n    return positive;\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmp5pj20kk0.rs:7:20\n    |\n7   |     let positive = Vec::new(0);\n    |                    ^^^^^^^^ - supplied 1 argument\n    |                    |\n    |                    expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp5pj20kk0.rs:10:40\n   |\n10 |             positive = positive.append(i);\n   |                                        ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp5pj20kk0.rs:10:24\n   |\n7  |     let positive = Vec::new(0);\n   |                    ----------- expected due to this value\n...\n10 |             positive = positive.append(i);\n   |                        ^^^^^^^^^^^^^^^^^^ expected struct `Vec`, found `()`\n   |\n   = note: expected struct `Vec<_>`\n           found unit type `()`\nnote: method `append` modifies its receiver in-place\n  --> /tmp/tmp5pj20kk0.rs:10:33\n   |\n10 |             positive = positive.append(i);\n   |                        -------- ^^^^^^ this call modifies `positive` in-place\n   |                        |\n   |                        you probably want to use this value after calling the method...\n   = note: ...instead of the `()` output of method `append`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0061, E0308.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n  let positive = Vec::new(0);\n  for i in l {\n    if i > 0 {\n      positive = positive.concat(i);\n    }\n  }\n  return positive;\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293038,
      "stdout": "",
      "stderr": "error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmprjxaljt7.rs:7:18\n    |\n7   |   let positive = Vec::new(0);\n    |                  ^^^^^^^^ - supplied 1 argument\n    |                  |\n    |                  expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> /tmp/tmprjxaljt7.rs:10:27\n    |\n10  |       positive = positive.concat(i);\n    |                           ^^^^^^ - supplied 1 argument\n    |                           |\n    |                           expected 0 arguments\n    |\nnote: associated function defined here\n\nerror[E0277]: the trait bound `[isize]: Concat<_>` is not satisfied\n   --> /tmp/tmprjxaljt7.rs:10:27\n    |\n10  |       positive = positive.concat(i);\n    |                           ^^^^^^ the trait `Concat<_>` is not implemented for `[isize]`\n    |\n    = help: the following other types implement trait `Concat<Item>`:\n              <[S] as Concat<str>>\n              <[V] as Concat<T>>\nnote: required by a bound in `slice::<impl [T]>::concat`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0061, E0277.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return only positive numbers in the vector.\n/// >>> get_positive(vec![-1, 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in l {\n        if i > 0 {\n            result.append(i);\n        }\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1, -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1, -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n}\n",
      "timestamp": 1664293037,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpgbn12nu_.rs:10:27\n   |\n10 |             result.append(i);\n   |                           ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}