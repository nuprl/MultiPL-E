name: HumanEval_29_filter_by_prefix
language: rs
prompt: "/// Filter an input vector of strings only for ones that start with a given\
  \ prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// Vec::<String>::new()\n\
  /// >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
  cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
  abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
  \ String) -> Vec<String> {\n"
tests: "}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
  \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
  xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
  ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
  xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
completions: ["    let mut result = Vec::new();\n    for s in strings {\n        if\
    \ s.starts_with(prefix) {\n            result.push(s);\n        }\n    }\n   \
    \ return result;", "  let mut result = Vec::new();\n  for s in strings {\n   \
    \ if s.starts_with(prefix) {\n      result.push(s);\n    }\n  }\n  return result;",
  "  let mut result = Vec::new();\n  for string in strings {\n    if string.starts_with(prefix)\
    \ {\n      result.push(string);\n    }\n  }\n  return result;", "    let mut vec\
    \ = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix) {\n\
    \            vec.push(s);\n        }\n    }\n    vec", "  let mut result = Vec::new();\n\
    \  for s in strings {\n    if s.starts_with(prefix) {\n      result.push(s);\n\
    \    }\n  }\n  return result;", "    let mut result = Vec::new();\n    for s in\
    \ strings {\n        if s.starts_with(prefix) {\n            result.push(s);\n\
    \        }\n    }\n    return result;", "    let mut result = Vec::new();\n  \
    \  for s in strings {\n        if s.starts_with(prefix) {\n            result.push(s);\n\
    \        }\n    }\n    return result;", "    let mut vec = Vec::new();\n    for\
    \ s in strings {\n        if s.starts_with(prefix) {\n            vec.push(s);\n\
    \        }\n    }\n    vec", "  let mut result = Vec::new();\n  for string in\
    \ strings {\n    if string.starts_with(prefix) {\n      result.push(string);\n\
    \    }\n  }\n  return result;", "    let mut result = Vec::new();\n    for s in\
    \ strings {\n        if s.starts_with(prefix) {\n            result.push(s);\n\
    \        }\n    }\n    return result;", "  let mut out = Vec::new();\n  for i\
    \ in strings {\n    if i.starts_with(prefix) {\n      out.push(i);\n    }\n  }\n\
    \  out", "    let mut result = Vec::new();\n    for s in strings {\n        if\
    \ s.starts_with(prefix) {\n            result.push(s);\n        }\n    }\n   \
    \ return result;", "    let mut result = Vec::new();\n    for s in strings {\n\
    \        if s.starts_with(prefix) {\n            result.push(s);\n        }\n\
    \    }\n    return result;", "    let mut result = Vec::new();\n    for s in strings\
    \ {\n        if s.starts_with(prefix) {\n            result.push(s);\n       \
    \ }\n    }\n    return result;", "    let mut result = Vec::new();\n    for s\
    \ in strings {\n        if s.starts_with(prefix) {\n            result.push(s);\n\
    \        }\n    }\n    return result;", "  let mut result = Vec::new();\n  for\
    \ s in strings {\n    if s.starts_with(prefix) {\n      result.push(s);\n    }\n\
    \  }\n  return result;", "  let mut result = Vec::new();\n  for s in strings {\n\
    \    if s.starts_with(prefix) {\n      result.push(s);\n    }\n  }\n  return result;",
  "  let mut result = Vec::new();\n  for s in strings {\n    if s.starts_with(prefix)\
    \ {\n      result.push(s);\n    }\n  }\n  return result;", "    let mut result\
    \ = Vec::new();\n    for i in strings {\n        if i.starts_with(prefix) {\n\
    \            result.push(i);\n        }\n    }\n    return result;", "    let\
    \ mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix)\
    \ {\n            result.push(s);\n        }\n    }\n    return result;", "   \
    \ let mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix)\
    \ {\n            result.push(s);\n        }\n    }\n    return result;", "  let\
    \ mut result = Vec::new();\n  for i in strings {\n    if i.starts_with(prefix)\
    \ {\n      result.push(i);\n    }\n  }\n  return result;", "    let mut result\
    \ = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix) {\n\
    \            result.push(s);\n        }\n    }\n    return result;", "    let\
    \ mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix)\
    \ {\n            result.push(s);\n        }\n    }\n    return result;", "  let\
    \ mut result = Vec::new();\n  for s in strings {\n    if s.starts_with(prefix)\
    \ {\n      result.push(s);\n    }\n  }\n  return result;", "    let mut result\
    \ = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix) {\n\
    \            result.push(s);\n        }\n    }\n    return result;", "  let mut\
    \ result = Vec::new();\n  for string in strings {\n    if string.starts_with(prefix)\
    \ {\n      result.push(string);\n    }\n  }\n  return result;", "  let mut result\
    \ = Vec::new();\n  for string in strings {\n    if string.starts_with(prefix)\
    \ {\n      result.push(string);\n    }\n  }\n  return result;", "    let mut result\
    \ = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix) {\n\
    \            result.push(s);\n        }\n    }\n    return result;", "    let\
    \ mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix)\
    \ {\n            result.push(s);\n        }\n    }\n    return result;", "   \
    \ let mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix)\
    \ {\n            result.push(s);\n        }\n    }\n    return result;", "   \
    \ let mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix)\
    \ {\n            result.push(s);\n        }\n    }\n    return result;", "  let\
    \ mut result = Vec::new();\n  for s in strings {\n    if s.starts_with(prefix)\
    \ {\n      result.push(s);\n    }\n  }\n  return result;", "  let mut result =\
    \ Vec::new();\n  for s in strings {\n    if s.starts_with(prefix) {\n      result.push(s);\n\
    \    }\n  }\n  return result;", "  let mut result = Vec::new();\n  for s in strings\
    \ {\n    if s.starts_with(prefix) {\n      result.push(s);\n    }\n  }\n  return\
    \ result;", "  let mut result = Vec::new();\n  for s in strings {\n    if s.starts_with(prefix)\
    \ {\n      result.push(s);\n    }\n  }\n  return result;", "  let mut result =\
    \ Vec::new();\n  for string in strings {\n    if string.starts_with(prefix) {\n\
    \      result.push(string);\n    }\n  }\n  return result;", "  let mut result\
    \ = Vec::new();\n  for string in strings {\n    if string.starts_with(prefix)\
    \ {\n      result.push(string);\n    }\n  }\n  return result;", "    let mut result\
    \ = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix) {\n\
    \            result.push(s);\n        }\n    }\n    return result;", "    let\
    \ mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix)\
    \ {\n            result.push(s);\n        }\n    }\n    return result;", "   \
    \ let mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix)\
    \ {\n            result.push(s);\n        }\n    }\n    return result;", "   \
    \ let mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix)\
    \ {\n            result.push(s);\n        }\n    }\n    return result;", "   \
    \ let mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix)\
    \ {\n            result.push(s);\n        }\n    }\n    return result;", "   \
    \ let mut out = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix)\
    \ {\n            out.push(s);\n        }\n    }\n    return out;", "  let mut\
    \ result = Vec::new();\n  for s in strings {\n    if s.starts_with(prefix) {\n\
    \      result.push(s);\n    }\n  }\n  return result;", "  let mut result = Vec::new();\n\
    \  for s in strings {\n    if s.starts_with(prefix) {\n      result.push(s);\n\
    \    }\n  }\n  return result;", "  let mut result = Vec::new();\n  for string\
    \ in strings {\n    if string.starts_with(prefix) {\n      result.push(string);\n\
    \    }\n  }\n  return result;", "    let mut result = Vec::new();\n    for s in\
    \ strings {\n        if s.starts_with(prefix) {\n            result.push(s);\n\
    \        }\n    }\n    return result;", "  let mut result = Vec::new();\n  for\
    \ s in strings {\n    if s.starts_with(prefix) {\n      result.push(s);\n    }\n\
    \  }\n  return result;", "    let mut vec = Vec::new();\n    for s in strings\
    \ {\n        if s.starts_with(prefix) {\n            vec.push(s);\n        }\n\
    \    }\n    vec", "    let mut result = Vec::new();\n    for i in strings {\n\
    \        if i.starts_with(prefix) {\n            result.push(i);\n        }\n\
    \    }\n    return result;", "    let mut result = Vec::new();\n    for s in strings\
    \ {\n        if s.starts_with(prefix) {\n            result.push(s);\n       \
    \ }\n    }\n    return result;", "    let mut vec = Vec::new();\n    for s in\
    \ strings {\n        if s.starts_with(prefix) {\n            vec.push(s);\n  \
    \      }\n    }\n    vec", "  let mut result = Vec::new();\n  for s in strings\
    \ {\n    if s.starts_with(prefix) {\n      result.push(s);\n    }\n  }\n  return\
    \ result;", "    let mut result = Vec::new();\n    for s in strings {\n      \
    \  if s.starts_with(prefix) {\n            result.push(s);\n        }\n    }\n\
    \    return result;", "  let mut result = Vec::new();\n  for string in strings\
    \ {\n    if string.starts_with(prefix) {\n      result.push(string);\n    }\n\
    \  }\n  return result;", "  let mut result = Vec::new();\n  for s in strings {\n\
    \    if s.starts_with(prefix) {\n      result.push(s);\n    }\n  }\n  return result;",
  "    let mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix)\
    \ {\n            result.push(s);\n        }\n    }\n    return result;", "   \
    \ let mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix)\
    \ {\n            result.push(s);\n        }\n    }\n    return result;", "  let\
    \ mut result = Vec::new();\n  for s in strings {\n    if s.starts_with(prefix)\
    \ {\n      result.push(s);\n    }\n  }\n  return result;", "  let mut result =\
    \ Vec::new();\n  for s in strings {\n    if s.starts_with(prefix) {\n      result.push(s);\n\
    \    }\n  }\n  return result;", "  let mut result = Vec::new();\n  for string\
    \ in strings {\n    if string.starts_with(prefix) {\n      result.push(string);\n\
    \    }\n  }\n  return result;", "    let mut vec = Vec::new();\n    for string\
    \ in strings {\n        if string.starts_with(prefix) {\n            vec.push(string);\n\
    \        }\n    }\n    vec", "  let mut result = Vec::new();\n  for s in strings\
    \ {\n    if s.starts_with(prefix) {\n      result.push(s);\n    }\n  }\n  return\
    \ result;", "  let mut result = Vec::new();\n  for s in strings {\n    if s.starts_with(prefix)\
    \ {\n      result.push(s);\n    }\n  }\n  return result;", "  let mut result =\
    \ Vec::new();\n  for s in strings {\n    if s.starts_with(prefix) {\n      result.push(s);\n\
    \    }\n  }\n  return result;", "    let mut result = Vec::new();\n    for s in\
    \ strings {\n        if s.starts_with(prefix) {\n            result.push(s);\n\
    \        }\n    }\n    return result;", "  let mut result = Vec::new();\n  for\
    \ s in strings {\n    if s.starts_with(prefix) {\n      result.push(s);\n    }\n\
    \  }\n  return result;", "  let mut result = Vec::new();\n  for string in strings\
    \ {\n    if string.starts_with(prefix) {\n      result.push(string);\n    }\n\
    \  }\n  return result;", "    let mut result = Vec::new();\n    for s in strings\
    \ {\n        if s.starts_with(prefix) {\n            result.push(s);\n       \
    \ }\n    }\n    return result;", "    let mut result = Vec::new();\n    for s\
    \ in strings {\n        if s.starts_with(prefix) {\n            result.push(s);\n\
    \        }\n    }\n    return result;", "    let mut vec = Vec::new();\n    for\
    \ s in strings {\n        if s.starts_with(prefix) {\n            vec.push(s);\n\
    \        }\n    }\n    vec", "  let mut result = Vec::new();\n  for s in strings\
    \ {\n    if s.starts_with(prefix) {\n      result.push(s);\n    }\n  }\n  return\
    \ result;", "    let mut result = Vec::new();\n    for s in strings {\n      \
    \  if s.starts_with(prefix) {\n            result.push(s);\n        }\n    }\n\
    \    return result;", "  let mut result = Vec::new();\n  for s in strings {\n\
    \    if s.starts_with(prefix) {\n      result.push(s);\n    }\n  }\n  return result;",
  "  let mut result = Vec::new();\n  for s in strings {\n    if s.starts_with(prefix)\
    \ {\n      result.push(s);\n    }\n  }\n  return result;", "    let mut result\
    \ = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix) {\n\
    \            result.push(s);\n        }\n    }\n    return result;", "    let\
    \ mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix)\
    \ {\n            result.push(s);\n        }\n    }\n    return result;", "   \
    \ let mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix)\
    \ {\n            result.push(s);\n        }\n    }\n    return result;", "   \
    \ let mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix)\
    \ {\n            result.push(s);\n        }\n    }\n    return result;", "   \
    \ let mut vec = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix)\
    \ {\n            vec.push(s);\n        }\n    }\n    vec", "    let mut result\
    \ = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix) {\n\
    \            result.push(s);\n        }\n    }\n    return result;", "    let\
    \ mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix)\
    \ {\n            result.push(s);\n        }\n    }\n    return result;", "  let\
    \ mut result = Vec::new();\n  for string in strings {\n    if string.starts_with(prefix)\
    \ {\n      result.push(string);\n    }\n  }\n  return result;", "    let mut result\
    \ = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix) {\n\
    \            result.push(s);\n        }\n    }\n    return result;", "    let\
    \ mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix)\
    \ {\n            result.push(s);\n        }\n    }\n    return result;", "  let\
    \ mut result = Vec::new();\n  for s in strings {\n    if s.starts_with(prefix)\
    \ {\n      result.push(s);\n    }\n  }\n  return result;", "  let mut result =\
    \ Vec::new();\n  for s in strings {\n    if s.starts_with(prefix) {\n      result.push(s);\n\
    \    }\n  }\n  return result;", "    let mut result = Vec::new();\n    for s in\
    \ strings {\n        if s.starts_with(prefix) {\n            result.push(s);\n\
    \        }\n    }\n    return result;", "  let mut result = Vec::new();\n  for\
    \ string in strings {\n    if string.starts_with(prefix) {\n      result.push(string);\n\
    \    }\n  }\n  return result;", "    let mut result = Vec::new();\n    for s in\
    \ strings {\n        if s.starts_with(prefix) {\n            result.push(s);\n\
    \        }\n    }\n    return result;", "    let mut result = Vec::new();\n  \
    \  for s in strings {\n        if s.starts_with(prefix) {\n            result.push(s);\n\
    \        }\n    }\n    return result;", "    let mut result = Vec::new();\n  \
    \  for s in strings {\n        if s.starts_with(prefix) {\n            result.push(s);\n\
    \        }\n    }\n    return result;", "    let mut result = Vec::new();\n  \
    \  for s in strings {\n        if s.starts_with(prefix) {\n            result.push(s);\n\
    \        }\n    }\n    return result;", "    let mut result = Vec::new();\n  \
    \  for s in strings {\n        if s.starts_with(prefix) {\n            result.push(s);\n\
    \        }\n    }\n    return result;", "  let mut result = Vec::new();\n  for\
    \ string in strings {\n    if string.starts_with(prefix) {\n      result.push(string);\n\
    \    }\n  }\n  return result;", "  let mut result = Vec::new();\n  for string\
    \ in strings {\n    if string.starts_with(prefix) {\n      result.push(string);\n\
    \    }\n  }\n  return result;", "  let mut result = Vec::new();\n  for s in strings\
    \ {\n    if s.starts_with(prefix) {\n      result.push(s);\n    }\n  }\n  return\
    \ result;", "    let mut result = Vec::new();\n    for s in strings {\n      \
    \  if s.starts_with(prefix) {\n            result.push(s);\n        }\n    }\n\
    \    return result;", "  let mut result = Vec::new();\n  for string in strings\
    \ {\n    if string.starts_with(prefix) {\n      result.push(string);\n    }\n\
    \  }\n  return result;", "  let mut result = Vec::new();\n  for s in strings {\n\
    \    if s.starts_with(prefix) {\n      result.push(s);\n    }\n  }\n  return result;",
  "  let mut result = Vec::new();\n  for string in strings {\n    if string.starts_with(prefix)\
    \ {\n      result.push(string);\n    }\n  }\n  return result;", "    let mut result\
    \ = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix) {\n\
    \            result.push(s);\n        }\n    }\n    return result;", "    let\
    \ mut vec = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix)\
    \ {\n            vec.push(s);\n        }\n    }\n    vec", "    let mut vec =\
    \ Vec::new();\n    for s in strings {\n        if s.starts_with(prefix) {\n  \
    \          vec.push(s);\n        }\n    }\n    vec", "  let mut result = Vec::new();\n\
    \  for s in strings {\n    if s.starts_with(prefix) {\n      result.push(s);\n\
    \    }\n  }\n  return result;", "    let mut vec = Vec::new();\n    for i in strings\
    \ {\n        if i.starts_with(prefix) {\n            vec.push(i);\n        }\n\
    \    }\n    vec", "  let mut result = Vec::new();\n  for s in strings {\n    if\
    \ s.starts_with(prefix) {\n      result.push(s);\n    }\n  }\n  return result;",
  "    let mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix)\
    \ {\n            result.push(s);\n        }\n    }\n    return result;", "   \
    \ let mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix)\
    \ {\n            result.push(s);\n        }\n    }\n    return result;", "   \
    \ let mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix)\
    \ {\n            result.push(s);\n        }\n    }\n    return result;", "   \
    \ let mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix)\
    \ {\n            result.push(s);\n        }\n    }\n    return result;", "  let\
    \ mut result = Vec::new();\n  for string in strings {\n    if string.starts_with(prefix)\
    \ {\n      result.push(string);\n    }\n  }\n  return result;", "    let mut result\
    \ = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix) {\n\
    \            result.push(s);\n        }\n    }\n    return result;", "    let\
    \ mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix)\
    \ {\n            result.push(s);\n        }\n    }\n    return result;", "   \
    \ let mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix)\
    \ {\n            result.push(s);\n        }\n    }\n    return result;", "   \
    \ let mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix)\
    \ {\n            result.push(s);\n        }\n    }\n    return result;", "   \
    \ let mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix)\
    \ {\n            result.push(s);\n        }\n    }\n    return result;", "   \
    \ let mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix)\
    \ {\n            result.push(s);\n        }\n    }\n    return result;", "  let\
    \ mut result = Vec::new();\n  for s in strings {\n    if s.starts_with(prefix)\
    \ {\n      result.push(s);\n    }\n  }\n  return result;", "    let mut result\
    \ = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix) {\n\
    \            result.push(s);\n        }\n    }\n    return result;", "  let mut\
    \ result = Vec::new();\n  for string in strings {\n    if string.starts_with(prefix)\
    \ {\n      result.push(string);\n    }\n  }\n  return result;", "    let mut result\
    \ = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix) {\n\
    \            result.push(s);\n        }\n    }\n    return result;", "    let\
    \ mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix)\
    \ {\n            result.push(s);\n        }\n    }\n    return result;", "  let\
    \ mut result = Vec::new();\n  for s in strings {\n    if s.starts_with(prefix)\
    \ {\n      result.push(s);\n    }\n  }\n  return result;", "    let mut result\
    \ = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix) {\n\
    \            result.push(s);\n        }\n    }\n    return result;", "    let\
    \ mut vec = Vec::new();\n    for i in strings {\n        if i.starts_with(prefix)\
    \ {\n            vec.push(i);\n        }\n    }\n    vec", "  let mut result =\
    \ Vec::new();\n  for s in strings {\n    if s.starts_with(prefix) {\n      result.push(s);\n\
    \    }\n  }\n  return result;", "  let mut result = Vec::new();\n  for string\
    \ in strings {\n    if string.starts_with(prefix) {\n      result.push(string);\n\
    \    }\n  }\n  return result;", "  let mut result = Vec::new();\n  for s in strings\
    \ {\n    if s.starts_with(prefix) {\n      result.push(s);\n    }\n  }\n  return\
    \ result;", "  let mut out = Vec::new();\n  for i in strings {\n    if i.starts_with(prefix)\
    \ {\n      out.push(i);\n    }\n  }\n  out", "  let mut result = Vec::new();\n\
    \  for string in strings {\n    if string.starts_with(prefix) {\n      result.push(string);\n\
    \    }\n  }\n  return result;", "    let mut result = Vec::new();\n    for s in\
    \ strings {\n        if s.starts_with(prefix) {\n            result.push(s);\n\
    \        }\n    }\n    return result;", "    let mut vec = Vec::new();\n    for\
    \ s in strings {\n        if s.starts_with(prefix) {\n            vec.push(s);\n\
    \        }\n    }\n    vec", "    let mut result = Vec::new();\n    for s in strings\
    \ {\n        if s.starts_with(prefix) {\n            result.push(s);\n       \
    \ }\n    }\n    return result;", "  let mut result = Vec::new();\n  for s in strings\
    \ {\n    if s.starts_with(prefix) {\n      result.push(s);\n    }\n  }\n  return\
    \ result;", "    let mut result = Vec::new();\n    for s in strings {\n      \
    \  if s.starts_with(prefix) {\n            result.push(s);\n        }\n    }\n\
    \    return result;", "  let mut result = Vec::new();\n  for s in strings {\n\
    \    if s.starts_with(prefix) {\n      result.push(s);\n    }\n  }\n  return result;",
  "    let mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix)\
    \ {\n            result.push(s);\n        }\n    }\n    return result;", "  let\
    \ mut result = Vec::new();\n  for s in strings {\n    if s.starts_with(prefix)\
    \ {\n      result.push(s);\n    }\n  }\n  return result;", "    let mut result\
    \ = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix) {\n\
    \            result.push(s);\n        }\n    }\n    return result;", "    let\
    \ mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix)\
    \ {\n            result.push(s);\n        }\n    }\n    return result;", "   \
    \ let mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix)\
    \ {\n            result.push(s);\n        }\n    }\n    return result;", "   \
    \ let mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix)\
    \ {\n            result.push(s);\n        }\n    }\n    return result;", "   \
    \ let mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix)\
    \ {\n            result.push(s);\n        }\n    }\n    return result;", "   \
    \ let mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix)\
    \ {\n            result.push(s);\n        }\n    }\n    return result;", "   \
    \ let mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix)\
    \ {\n            result.push(s);\n        }\n    }\n    return result;", "  let\
    \ mut result = Vec::new();\n  for string in strings {\n    if string.starts_with(prefix)\
    \ {\n      result.push(string);\n    }\n  }\n  return result;", "    let mut result\
    \ = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix) {\n\
    \            result.push(s);\n        }\n    }\n    return result;", "    let\
    \ mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix)\
    \ {\n            result.push(s);\n        }\n    }\n    return result;", "   \
    \ let mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix)\
    \ {\n            result.push(s);\n        }\n    }\n    return result;", "   \
    \ let mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix)\
    \ {\n            result.push(s);\n        }\n    }\n    return result;", "  let\
    \ mut result = Vec::new();\n  for s in strings {\n    if s.starts_with(prefix)\
    \ {\n      result.push(s);\n    }\n  }\n  return result;", "    let mut vec =\
    \ Vec::new();\n    for s in strings {\n        if s.starts_with(prefix) {\n  \
    \          vec.push(s);\n        }\n    }\n    vec", "    let mut result = Vec::new();\n\
    \    for s in strings {\n        if s.starts_with(prefix) {\n            result.push(s);\n\
    \        }\n    }\n    return result;", "    let mut result = Vec::new();\n  \
    \  for s in strings {\n        if s.starts_with(prefix) {\n            result.push(s);\n\
    \        }\n    }\n    return result;", "    let mut result = Vec::new();\n  \
    \  for s in strings {\n        if s.starts_with(prefix) {\n            result.push(s);\n\
    \        }\n    }\n    return result;", "    let mut result = Vec::new();\n  \
    \  for s in strings {\n        if s.starts_with(prefix) {\n            result.push(s);\n\
    \        }\n    }\n    return result;", "  let mut out = Vec::new();\n  for s\
    \ in strings {\n    if s.starts_with(prefix) {\n      out.push(s);\n    }\n  }\n\
    \  return out;", "  let mut result = Vec::new();\n  for string in strings {\n\
    \    if string.starts_with(prefix) {\n      result.push(string);\n    }\n  }\n\
    \  return result;", "  let mut result = Vec::new();\n  for s in strings {\n  \
    \  if s.starts_with(prefix) {\n      result.push(s);\n    }\n  }\n  return result;",
  "    let mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix)\
    \ {\n            result.push(s);\n        }\n    }\n    return result;", "   \
    \ let mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix)\
    \ {\n            result.push(s);\n        }\n    }\n    return result;", "   \
    \ let mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix)\
    \ {\n            result.push(s);\n        }\n    }\n    return result;", "  let\
    \ mut result = Vec::new();\n  for s in strings {\n    if s.starts_with(prefix)\
    \ {\n      result.push(s);\n    }\n  }\n  return result;", "  let mut result =\
    \ Vec::new();\n  for string in strings {\n    if string.starts_with(prefix) {\n\
    \      result.push(string);\n    }\n  }\n  return result;", "  let mut result\
    \ = Vec::new();\n  for s in strings {\n    if s.starts_with(prefix) {\n      result.push(s);\n\
    \    }\n  }\n  return result;", "    let mut vec = Vec::new();\n    for s in strings\
    \ {\n        if s.starts_with(prefix) {\n            vec.push(s);\n        }\n\
    \    }\n    vec", "  let mut result = Vec::new();\n  for s in strings {\n    if\
    \ s.starts_with(prefix) {\n      result.push(s);\n    }\n  }\n  return result;",
  "    let mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix)\
    \ {\n            result.push(s);\n        }\n    }\n    return result;", "  let\
    \ mut result = Vec::new();\n  for s in strings {\n    if s.starts_with(prefix)\
    \ {\n      result.push(s);\n    }\n  }\n  return result;", "  let mut result =\
    \ Vec::new();\n  for string in strings {\n    if string.starts_with(prefix) {\n\
    \      result.push(string);\n    }\n  }\n  return result;", "    let mut vec =\
    \ Vec::new();\n    for s in strings {\n        if s.starts_with(prefix) {\n  \
    \          vec.push(s);\n        }\n    }\n    vec", "    let mut vec = Vec::new();\n\
    \    for s in strings {\n        if s.starts_with(prefix) {\n            vec.push(s);\n\
    \        }\n    }\n    vec", "    let mut result = Vec::new();\n    for s in strings\
    \ {\n        if s.starts_with(prefix) {\n            result.push(s);\n       \
    \ }\n    }\n    return result;", "    let mut out = Vec::new();\n    for s in\
    \ strings {\n        if s.starts_with(prefix) {\n            out.push(s);\n  \
    \      }\n    }\n    return out;", "    let mut result = Vec::new();\n    for\
    \ s in strings {\n        if s.starts_with(prefix) {\n            result.push(s);\n\
    \        }\n    }\n    return result;", "    let mut vec = Vec::new();\n    for\
    \ s in strings {\n        if s.starts_with(prefix) {\n            vec.push(s);\n\
    \        }\n    }\n    vec", "    let mut result = Vec::new();\n    for s in strings\
    \ {\n        if s.starts_with(prefix) {\n            result.push(s);\n       \
    \ }\n    }\n    return result;", "    let mut result = Vec::new();\n    for s\
    \ in strings {\n        if s.starts_with(prefix) {\n            result.push(s);\n\
    \        }\n    }\n    return result;", "    let mut result = Vec::new();\n  \
    \  for s in strings {\n        if s.starts_with(prefix) {\n            result.push(s);\n\
    \        }\n    }\n    return result;", "    let mut result = Vec::new();\n  \
    \  for s in strings {\n        if s.starts_with(prefix) {\n            result.push(s);\n\
    \        }\n    }\n    return result;", "  let mut result = Vec::new();\n  for\
    \ string in strings {\n    if string.starts_with(prefix) {\n      result.push(string);\n\
    \    }\n  }\n  return result;", "    let mut result = Vec::new();\n    for s in\
    \ strings {\n        if s.starts_with(prefix) {\n            result.push(s);\n\
    \        }\n    }\n    return result;", "  let mut result = Vec::new();\n  for\
    \ i in strings {\n    if i.starts_with(prefix) {\n      result.push(i);\n    }\n\
    \  }\n  return result;", "    let mut result = Vec::new();\n    for s in strings\
    \ {\n        if s.starts_with(prefix) {\n            result.push(s);\n       \
    \ }\n    }\n    return result;", "    let mut vec = Vec::new();\n    for string\
    \ in strings {\n        if string.starts_with(prefix) {\n            vec.push(string);\n\
    \        }\n    }\n    vec", "    let mut result = Vec::new();\n    for s in strings\
    \ {\n        if s.starts_with(prefix) {\n            result.push(s);\n       \
    \ }\n    }\n    return result;", "  let mut result = Vec::new();\n  for string\
    \ in strings {\n    if string.starts_with(prefix) {\n      result.push(string);\n\
    \    }\n  }\n  return result;", "    let mut vec = Vec::new();\n    for s in strings\
    \ {\n        if s.starts_with(prefix) {\n            vec.push(s);\n        }\n\
    \    }\n    vec", "  let mut result = Vec::new();\n  for s in strings {\n    if\
    \ s.starts_with(prefix) {\n      result.push(s);\n    }\n  }\n  return result;",
  "  let mut result = Vec::new();\n  for s in strings {\n    if s.starts_with(prefix)\
    \ {\n      result.push(s);\n    }\n  }\n  return result;", "    let mut result\
    \ = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix) {\n\
    \            result.push(s);\n        }\n    }\n    return result;", "  let mut\
    \ result = Vec::new();\n  for s in strings {\n    if s.starts_with(prefix) {\n\
    \      result.push(s);\n    }\n  }\n  return result;", "  let mut result = Vec::new();\n\
    \  for string in strings {\n    if string.starts_with(prefix) {\n      result.push(string);\n\
    \    }\n  }\n  return result;", "  let mut result = Vec::new();\n  for string\
    \ in strings {\n    if string.starts_with(prefix) {\n      result.push(string);\n\
    \    }\n  }\n  return result;", "    let mut result = Vec::new();\n    for s in\
    \ strings {\n        if s.starts_with(prefix) {\n            result.push(s);\n\
    \        }\n    }\n    return result;", "  let mut result = Vec::new();\n  for\
    \ string in strings {\n    if string.starts_with(prefix) {\n      result.push(string);\n\
    \    }\n  }\n  return result;", "    let mut vec = Vec::new();\n    for s in strings\
    \ {\n        if s.starts_with(prefix) {\n            vec.push(s);\n        }\n\
    \    }\n    vec", "    let mut result = Vec::new();\n    for s in strings {\n\
    \        if s.starts_with(prefix) {\n            result.push(s);\n        }\n\
    \    }\n    return result;"]
stop_tokens:
- "\n}"
