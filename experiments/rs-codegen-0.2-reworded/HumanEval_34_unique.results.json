{
  "name": "HumanEval_34_unique",
  "language": "rs",
  "prompt": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n",
  "tests": "}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in l {\n    if i == last {\n      continue;\n    }\n    last = i;\n    result.push(i);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 3, 5, 2, 3, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmpolw4r6f0.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in l {\n    if i == last {\n      continue;\n    }\n    last = i;\n    result.push(i);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 3, 5, 2, 3, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmpolw4r6f0.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in l {\n    if i == last {\n      continue;\n    }\n    last = i;\n    result.push(i);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 3, 5, 2, 3, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmpolw4r6f0.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in l {\n    if i == last {\n      continue;\n    }\n    last = i;\n    result.push(i);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 3, 5, 2, 3, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmpolw4r6f0.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut vec = Vec::new();\n  let mut last = -1;\n  for i in l {\n    if i == last {\n      continue;\n    }\n    last = i;\n    vec.push_back(i);\n  }\n  return vec;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293057,
      "stdout": "",
      "stderr": "error[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmp8o0aj1sj.rs:12:9\n   |\n12 |     vec.push_back(i);\n   |         ^^^^^^^^^ method not found in `Vec<_>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in l {\n    if i == last {\n      continue;\n    }\n    last = i;\n    result.push(i);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 3, 5, 2, 3, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmpolw4r6f0.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut vec = Vec::new();\n  let mut last = -1;\n  for i in l {\n    if i == last {\n      continue;\n    }\n    last = i;\n    vec.push_back(i);\n  }\n  return vec;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293057,
      "stdout": "",
      "stderr": "error[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmp8o0aj1sj.rs:12:9\n   |\n12 |     vec.push_back(i);\n   |         ^^^^^^^^^ method not found in `Vec<_>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in l {\n    if i == last {\n      continue;\n    }\n    last = i;\n    result.append(i);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293057,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp2vo642hf.rs:12:19\n   |\n12 |     result.append(i);\n   |                   ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in l {\n    if i == last {\n      continue;\n    }\n    last = i;\n    result.append(i);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293057,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp2vo642hf.rs:12:19\n   |\n12 |     result.append(i);\n   |                   ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut vec = Vec::new();\n  let mut last = -1;\n  for i in l {\n    if i == last {\n      continue;\n    }\n    vec.push(i);\n    last = i;\n  }\n  return vec;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 3, 5, 2, 3, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmpp78ruq6p.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in l {\n    if i == last {\n      continue;\n    }\n    last = i;\n    result.append(i);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293057,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp2vo642hf.rs:12:19\n   |\n12 |     result.append(i);\n   |                   ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in l {\n    if i == last {\n      continue;\n    }\n    result.push(i);\n    last = i;\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 3, 5, 2, 3, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmpv27zc_jo.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = 0;\n  for i in l {\n    if i != last {\n      result.append(i);\n      last = i;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293057,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpyseoudhm.rs:9:21\n  |\n9 |       result.append(i);\n  |                     ^ expected `&mut Vec<_>`, found `isize`\n  |\n  = note: expected mutable reference `&mut Vec<_>`\n                          found type `isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut vec = Vec::new();\n  for i in l {\n    if vec.len() == 0 || vec.last() != i {\n      vec.push(i);\n    }\n  }\n  vec\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293057,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp56rv69yk.rs:7:40\n  |\n7 |     if vec.len() == 0 || vec.last() != i {\n  |                                        ^ expected enum `Option`, found `isize`\n  |\n  = note: expected enum `Option<&_>`\n             found type `isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in l {\n    if i == last {\n      continue;\n    }\n    last = i;\n    result.push(i);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 3, 5, 2, 3, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmpolw4r6f0.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in l {\n    if i == last {\n      continue;\n    }\n    last = i;\n    result.push(i);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 3, 5, 2, 3, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmpolw4r6f0.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut vec = Vec::new();\n  let mut i = 0;\n  let mut j = 0;\n  let mut k = 0;\n  let mut cnt = 0;\n  let mut cnt2 = 0;\n  let mut cnt3 = 0;\n  let mut cnt4 = 0;\n  let mut cnt5 = 0;\n  let mut cnt6 = 0;\n  let mut cnt7 = 0;\n  let mut cnt8 = 0;\n  let mut cnt9 = 0;\n  let mut cnt10 = 0;\n  let mut cnt11 = 0;\n  let mut cnt12 = 0;\n  let mut cnt13 = 0;\n  let mut cnt14 = 0;\n  let mut cnt15 = 0;\n  let mut cnt16 = 0;\n  let mut cnt17 = 0;\n  let mut cnt18 = 0;\n  let mut cnt19 = 0;\n  let mut cnt20 = 0;\n  let mut cnt21 = 0;\n  let mut cnt22 = 0;\n  let mut cnt23 = 0;\n  let mut cnt24 = 0;\n  let mut cnt25 = 0;\n  let mut cnt26 = 0;\n  let mut cnt27 = 0;\n  let mut cnt28 = 0;\n  let mut cnt29 = 0;\n  let mut cnt30 = 0;\n  let mut cnt31 = 0;\n  let mut cnt32 = 0;\n  let mut cnt33 = 0;\n  let mut cnt34 = 0;\n  let mut cnt35 = 0;\n  let mut cnt36 = 0;\n  let mut cnt37 = 0;\n  let mut cnt38 = 0;\n  let mut cnt39 = 0;\n  let mut cnt40 = 0;\n  let mut cnt41 = 0;\n  let mut cnt42 = 0;\n  let mut cnt43 = 0;\n  let mut cnt44 = 0;\n  let mut cnt45 = 0;\n  let mut cnt46 = 0;\n  let mut cnt47 = 0;\n  let mut cnt48 = 0;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293057,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpfmqa3r8z.rs:4:29\n  |\n4 | fn unique(l: Vec<isize>) -> Vec<isize> {\n  |    ------                   ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in l {\n    if i == last {\n      continue;\n    }\n    last = i;\n    result.push(i);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 3, 5, 2, 3, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmpolw4r6f0.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in l {\n    if i == last {\n      continue;\n    }\n    result.push(i);\n    last = i;\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 3, 5, 2, 3, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmpv27zc_jo.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut seen = Vec::new();\n  for v in l {\n    if !seen.contains(v) {\n      result.append(v);\n      seen.append(v);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293057,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpgx7whsg8.rs:8:23\n  |\n8 |     if !seen.contains(v) {\n  |                       ^\n  |                       |\n  |                       expected reference, found `isize`\n  |                       help: consider borrowing here: `&v`\n  |\n  = note: expected reference `&_`\n                  found type `isize`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpgx7whsg8.rs:9:21\n  |\n9 |       result.append(v);\n  |                     ^ expected `&mut Vec<_>`, found `isize`\n  |\n  = note: expected mutable reference `&mut Vec<_>`\n                          found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpgx7whsg8.rs:10:19\n   |\n10 |       seen.append(v);\n   |                   ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in l {\n    if i == last {\n      continue;\n    }\n    last = i;\n    result.push(i);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 3, 5, 2, 3, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmpolw4r6f0.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in l {\n    if i == last {\n      continue;\n    }\n    result.push(i);\n    last = i;\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 3, 5, 2, 3, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmpv27zc_jo.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut vec = Vec::new();\n  let mut i = 0;\n  for v in l {\n    if !vec.contains(v) {\n      vec.push(v);\n    }\n  }\n  vec.sort();\n  vec.uniq();\n  return vec;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293057,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpl8bd02uh.rs:8:22\n  |\n8 |     if !vec.contains(v) {\n  |                      ^\n  |                      |\n  |                      expected reference, found `isize`\n  |                      help: consider borrowing here: `&v`\n  |\n  = note: expected reference `&_`\n                  found type `isize`\n\nerror[E0599]: no method named `uniq` found for struct `Vec<isize>` in the current scope\n  --> /tmp/tmpl8bd02uh.rs:13:7\n   |\n13 |   vec.uniq();\n   |       ^^^^ method not found in `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in l {\n    if i == last {\n      continue;\n    }\n    last = i;\n    result.push(i);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 3, 5, 2, 3, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmpolw4r6f0.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in l {\n    if i == last {\n      continue;\n    }\n    last = i;\n    result.push_back(i);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293057,
      "stdout": "",
      "stderr": "error[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmpi0n2os4f.rs:12:12\n   |\n12 |     result.push_back(i);\n   |            ^^^^^^^^^ method not found in `Vec<_>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = 0;\n  for i in l {\n    if i == last {\n      continue;\n    }\n    result.push(i);\n    last = i;\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 3, 5, 2, 3, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmpqzp49wac.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in l {\n    if i == last {\n      continue;\n    }\n    result.push(i);\n    last = i;\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 3, 5, 2, 3, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmpv27zc_jo.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in l {\n    if i == last {\n      continue;\n    }\n    last = i;\n    result.push(i);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 3, 5, 2, 3, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmpolw4r6f0.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in l {\n    if i == last {\n      continue;\n    }\n    result.push(i);\n    last = i;\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 3, 5, 2, 3, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmpv27zc_jo.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut vec = Vec::new();\n  let mut last = -1;\n  for i in l {\n    if i != last {\n      vec.push_back(i);\n      last = i;\n    }\n  }\n  return vec;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293057,
      "stdout": "",
      "stderr": "error[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n --> /tmp/tmphyoz3m4v.rs:9:11\n  |\n9 |       vec.push_back(i);\n  |           ^^^^^^^^^ method not found in `Vec<_>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in l {\n    if i == last {\n      continue;\n    }\n    result.push(i);\n    last = i;\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 3, 5, 2, 3, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmpv27zc_jo.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in l {\n    if i == last {\n      continue;\n    }\n    last = i;\n    result.push(i);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 3, 5, 2, 3, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmpolw4r6f0.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in l {\n    if i == last {\n      continue;\n    }\n    last = i;\n    result.push(i);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 3, 5, 2, 3, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmpolw4r6f0.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in l {\n    if i == last {\n      continue;\n    }\n    result.push(i);\n    last = i;\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 3, 5, 2, 3, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmpv27zc_jo.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in l {\n    if i == last {\n      continue;\n    }\n    last = i;\n    result.push(i);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 3, 5, 2, 3, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmpolw4r6f0.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut vec = Vec::new();\n  let mut last = -1;\n  for i in l {\n    if i == last {\n      continue;\n    }\n    last = i;\n    vec.push_back(i);\n  }\n  return vec;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293057,
      "stdout": "",
      "stderr": "error[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmp8o0aj1sj.rs:12:9\n   |\n12 |     vec.push_back(i);\n   |         ^^^^^^^^^ method not found in `Vec<_>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in l {\n    if i == last {\n      continue;\n    }\n    result.push(i);\n    last = i;\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 3, 5, 2, 3, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmpv27zc_jo.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in l {\n    if i == last {\n      continue;\n    }\n    last = i;\n    result.push(i);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 3, 5, 2, 3, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmpolw4r6f0.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for v in l {\n    if last != v {\n      result.push(v);\n      last = v;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 3, 5, 2, 3, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmpvq6w37m6.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in l {\n    if i == last {\n      continue;\n    }\n    last = i;\n    result.push(i);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 3, 5, 2, 3, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmpolw4r6f0.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut vec = Vec::new();\n  let mut last = -1;\n  for i in l {\n    if i == last {\n      continue;\n    }\n    last = i;\n    vec.push(i);\n  }\n  return vec;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 3, 5, 2, 3, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmptwm4mtph.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in l {\n    if i == last {\n      continue;\n    }\n    last = i;\n    result.push(i);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 3, 5, 2, 3, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmpolw4r6f0.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut vec = Vec::new();\n  let mut last = -1;\n  for i in l {\n    if i != last {\n      vec.push_back(i);\n      last = i;\n    }\n  }\n  return vec;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293057,
      "stdout": "",
      "stderr": "error[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n --> /tmp/tmphyoz3m4v.rs:9:11\n  |\n9 |       vec.push_back(i);\n  |           ^^^^^^^^^ method not found in `Vec<_>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut seen = Vec::new();\n  for v in l {\n    if !seen.contains(v) {\n      result.append(v);\n      seen.append(v);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293057,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpgx7whsg8.rs:8:23\n  |\n8 |     if !seen.contains(v) {\n  |                       ^\n  |                       |\n  |                       expected reference, found `isize`\n  |                       help: consider borrowing here: `&v`\n  |\n  = note: expected reference `&_`\n                  found type `isize`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpgx7whsg8.rs:9:21\n  |\n9 |       result.append(v);\n  |                     ^ expected `&mut Vec<_>`, found `isize`\n  |\n  = note: expected mutable reference `&mut Vec<_>`\n                          found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpgx7whsg8.rs:10:19\n   |\n10 |       seen.append(v);\n   |                   ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in l {\n    if i == last {\n      continue;\n    }\n    last = i;\n    result.push_back(i);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293057,
      "stdout": "",
      "stderr": "error[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmpi0n2os4f.rs:12:12\n   |\n12 |     result.push_back(i);\n   |            ^^^^^^^^^ method not found in `Vec<_>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in l {\n    if i == last {\n      continue;\n    }\n    last = i;\n    result.push(i);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 3, 5, 2, 3, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmpolw4r6f0.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut vec = Vec::new();\n  for i in l {\n    if vec.len() == 0 || vec.last() != i {\n      vec.push(i);\n    }\n  }\n  vec\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293057,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp56rv69yk.rs:7:40\n  |\n7 |     if vec.len() == 0 || vec.last() != i {\n  |                                        ^ expected enum `Option`, found `isize`\n  |\n  = note: expected enum `Option<&_>`\n             found type `isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut vec = Vec::new();\n  let mut seen = Vec::new();\n  for v in l {\n    if !seen.contains(&v) {\n      vec.push(&v);\n      seen.push(&v);\n    }\n  }\n  return vec;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293057,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpezji7k2i.rs:10:17\n   |\n10 |       seen.push(&v);\n   |                 ^^ expected `isize`, found `&isize`\n   |\nhelp: consider removing the borrow\n   |\n10 -       seen.push(&v);\n10 +       seen.push(v);\n   | \n\nerror[E0308]: mismatched types\n  --> /tmp/tmpezji7k2i.rs:13:10\n   |\n4  | fn unique(l: Vec<isize>) -> Vec<isize> {\n   |                             ---------- expected `Vec<isize>` because of return type\n...\n13 |   return vec;\n   |          ^^^ expected `isize`, found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut vec = Vec::new();\n  let mut last = -1;\n  for i in l {\n    if i != last {\n      vec.push_back(i);\n      last = i;\n    }\n  }\n  return vec;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293057,
      "stdout": "",
      "stderr": "error[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n --> /tmp/tmphyoz3m4v.rs:9:11\n  |\n9 |       vec.push_back(i);\n  |           ^^^^^^^^^ method not found in `Vec<_>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut vec = Vec![];\n  let mut i = 0;\n  for v in l {\n    if !vec.contains(v) {\n      vec = vec.append(v);\n    }\n  }\n  vec\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293057,
      "stdout": "",
      "stderr": "error: cannot find macro `Vec` in this scope\n  --> /tmp/tmpk7vauh16.rs:5:17\n   |\n5  |     let mut vec = Vec![];\n   |                   ^^^ help: a macro with a similar name exists (notice the capitalization): `vec`\n   |\n   = note: `Vec` is in scope, but it is a struct, not a macro\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut vec = Vec::new();\n  let mut last = -1;\n  for i in l {\n    if i == last {\n      continue;\n    }\n    vec.push_back(i);\n    last = i;\n  }\n  return vec;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293057,
      "stdout": "",
      "stderr": "error[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmpu2t7baei.rs:11:9\n   |\n11 |     vec.push_back(i);\n   |         ^^^^^^^^^ method not found in `Vec<_>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in l {\n    if i == last {\n      continue;\n    }\n    result.push(i);\n    last = i;\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 3, 5, 2, 3, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmpv27zc_jo.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in l {\n    if i == last {\n      continue;\n    }\n    last = i;\n    result.push(i);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 3, 5, 2, 3, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmpolw4r6f0.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in l {\n    if i == last {\n      continue;\n    }\n    result.push(i);\n    last = i;\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 3, 5, 2, 3, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmpv27zc_jo.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut vec = Vec::new();\n  let mut last = -1;\n  for i in l {\n    if i == last {\n      continue;\n    }\n    vec.push(i);\n    last = i;\n  }\n  return vec;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 3, 5, 2, 3, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmpp78ruq6p.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in l {\n    if i == last {\n      continue;\n    }\n    result.push(i);\n    last = i;\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 3, 5, 2, 3, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmpv27zc_jo.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in l {\n    if i == last {\n      continue;\n    }\n    result.push(i);\n    last = i;\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 3, 5, 2, 3, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmpv27zc_jo.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in l {\n    if i == last {\n      continue;\n    }\n    last = i;\n    result.append(i);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293057,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp2vo642hf.rs:12:19\n   |\n12 |     result.append(i);\n   |                   ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in l {\n    if i == last {\n      continue;\n    }\n    last = i;\n    result.push(i);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 3, 5, 2, 3, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmpolw4r6f0.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut vec = Vec::new();\n  let mut i = 0;\n  let mut j = 0;\n  let mut k = 0;\n  while i < l.len {\n    while j < l.len && l[i] == l[j] {\n      j += 1;\n    }\n    if j == i {\n      vec.push_back(l[i]);\n      i += 1;\n    } else {\n      k = i;\n      i = j;\n    }\n  }\n  vec.extend(k, l.len - k);\n  return vec;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293057,
      "stdout": "",
      "stderr": "error[E0616]: field `len` of struct `Vec` is private\n --> /tmp/tmpve6afuej.rs:9:15\n  |\n9 |   while i < l.len {\n  |               ^^^ private field\n  |\nhelp: a method `len` also exists, call it with parentheses\n  |\n9 |   while i < l.len() {\n  |                  ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpve6afuej.rs:10:17\n   |\n10 |     while j < l.len && l[i] == l[j] {\n   |                 ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n10 |     while j < l.len() && l[i] == l[j] {\n   |                    ++\n\nerror[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmpve6afuej.rs:14:11\n   |\n14 |       vec.push_back(l[i]);\n   |           ^^^^^^^^^ method not found in `Vec<_>`\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmpve6afuej.rs:21:19\n   |\n21 |   vec.extend(k, l.len - k);\n   |                   ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n21 |   vec.extend(k, l.len() - k);\n   |                      ++\n\nerror[E0061]: this function takes 1 argument but 2 arguments were supplied\n   --> /tmp/tmpve6afuej.rs:21:7\n    |\n21  |   vec.extend(k, l.len - k);\n    |       ^^^^^^ -  --------- supplied 2 arguments\n    |       |\n    |       expected 1 argument\n    |\nnote: associated function defined here\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations: E0061, E0599, E0616.\nFor more information about an error, try `rustc --explain E0061`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in l {\n    if i == last {\n      continue;\n    }\n    last = i;\n    result.push(i);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 3, 5, 2, 3, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmpolw4r6f0.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut vec = Vec![];\n  let mut i = 0;\n  for v in l {\n    if vec.len() == 0 || vec[vec.len() - 1] != v {\n      vec = vec.append(v);\n    }\n  }\n  vec\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293057,
      "stdout": "",
      "stderr": "error: cannot find macro `Vec` in this scope\n  --> /tmp/tmpg9zvu6wz.rs:5:17\n   |\n5  |     let mut vec = Vec![];\n   |                   ^^^ help: a macro with a similar name exists (notice the capitalization): `vec`\n   |\n   = note: `Vec` is in scope, but it is a struct, not a macro\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in l {\n    if i == last {\n      continue;\n    }\n    last = i;\n    result.push(i);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 3, 5, 2, 3, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmpolw4r6f0.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut vec = Vec::new();\n  let mut last = -1;\n  for i in l {\n    if i == last {\n      continue;\n    }\n    vec.push_back(i);\n    last = i;\n  }\n  return vec;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293057,
      "stdout": "",
      "stderr": "error[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmpu2t7baei.rs:11:9\n   |\n11 |     vec.push_back(i);\n   |         ^^^^^^^^^ method not found in `Vec<_>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in l {\n    if i == last {\n      continue;\n    }\n    last = i;\n    result.push(i);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 3, 5, 2, 3, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmpolw4r6f0.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in l {\n    if i == last {\n      continue;\n    }\n    result.push(i);\n    last = i;\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 3, 5, 2, 3, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmpv27zc_jo.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in l {\n    if i == last {\n      continue;\n    }\n    last = i;\n    result.push(i);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 3, 5, 2, 3, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmpolw4r6f0.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in l {\n    if i == last {\n      continue;\n    }\n    last = i;\n    result.push(i);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 3, 5, 2, 3, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmpolw4r6f0.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in l {\n    if i == last {\n      continue;\n    }\n    result.push(i);\n    last = i;\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 3, 5, 2, 3, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmpv27zc_jo.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in l {\n    if i == last {\n      continue;\n    }\n    last = i;\n    result.push(i);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 3, 5, 2, 3, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmpolw4r6f0.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut vec = Vec::new();\n  let mut last = -1;\n  for i in l {\n    if i == last {\n      continue;\n    }\n    vec.push_back(i);\n    last = i;\n  }\n  return vec;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293057,
      "stdout": "",
      "stderr": "error[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmpu2t7baei.rs:11:9\n   |\n11 |     vec.push_back(i);\n   |         ^^^^^^^^^ method not found in `Vec<_>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in l {\n    if i == last {\n      continue;\n    }\n    last = i;\n    result.push(i);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 3, 5, 2, 3, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmpolw4r6f0.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut r = Vec::new();\n  let mut i = 0;\n  for i in l.iter() {\n    if !r.contains(i) {\n      r.push(i);\n    }\n  }\n  return r;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293057,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp144u0yi6.rs:9:14\n  |\n9 |       r.push(i);\n  |              ^ expected `isize`, found `&isize`\n  |\nhelp: consider dereferencing the borrow\n  |\n9 |       r.push(*i);\n  |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut seen = Vec::new();\n  for i in l {\n    if !seen.contains(&i) {\n      result.append(&i);\n      seen.append(&i);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293057,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpp0kcyvfm.rs:9:21\n  |\n9 |       result.append(&i);\n  |                     ^^ types differ in mutability\n  |\n  = note: expected mutable reference `&mut Vec<_>`\n                     found reference `&isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpp0kcyvfm.rs:10:19\n   |\n10 |       seen.append(&i);\n   |                   ^^ types differ in mutability\n   |\n   = note: expected mutable reference `&mut Vec<isize>`\n                      found reference `&isize`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in l {\n    if i == last {\n      continue;\n    }\n    last = i;\n    result.push(i);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 3, 5, 2, 3, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmpolw4r6f0.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in l {\n    if i == last {\n      continue;\n    }\n    last = i;\n    result.push(i);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 3, 5, 2, 3, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmpolw4r6f0.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut vec = Vec::new();\n  let mut last = -1;\n  for i in l {\n    if i == last {\n      continue;\n    }\n    last = i;\n    vec.push_back(i);\n  }\n  return vec;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293057,
      "stdout": "",
      "stderr": "error[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmp8o0aj1sj.rs:12:9\n   |\n12 |     vec.push_back(i);\n   |         ^^^^^^^^^ method not found in `Vec<_>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut vec = Vec::new();\n  let mut last = -1;\n  for i in l {\n    if i == last {\n      continue;\n    }\n    vec.push_back(i);\n    last = i;\n  }\n  return vec;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293057,
      "stdout": "",
      "stderr": "error[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmpu2t7baei.rs:11:9\n   |\n11 |     vec.push_back(i);\n   |         ^^^^^^^^^ method not found in `Vec<_>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in l {\n    if i == last {\n      continue;\n    }\n    last = i;\n    result.push(i);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 3, 5, 2, 3, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmpolw4r6f0.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut vec = Vec::new();\n  let mut last = -1;\n  for i in l {\n    if i == last {\n      continue;\n    }\n    last = i;\n    vec.push_back(i);\n  }\n  return vec;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293057,
      "stdout": "",
      "stderr": "error[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmp8o0aj1sj.rs:12:9\n   |\n12 |     vec.push_back(i);\n   |         ^^^^^^^^^ method not found in `Vec<_>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut vec = Vec::new();\n  let mut last = -1;\n  for v in l {\n    if vec.len() == 0 || vec.last() != v {\n      vec.push(v);\n      last = v;\n    }\n  }\n  vec\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293057,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpsa9mb11t.rs:8:40\n  |\n8 |     if vec.len() == 0 || vec.last() != v {\n  |                                        ^ expected enum `Option`, found `isize`\n  |\n  = note: expected enum `Option<&_>`\n             found type `isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut vec = Vec::new();\n  for i in l {\n    if vec.len() == 0 || vec.last() != i {\n      vec.push(i);\n    }\n  }\n  return vec;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293057,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpk7itluwn.rs:7:40\n  |\n7 |     if vec.len() == 0 || vec.last() != i {\n  |                                        ^ expected enum `Option`, found `isize`\n  |\n  = note: expected enum `Option<&_>`\n             found type `isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut vec = Vec::new();\n  let mut last = -1;\n  for i in l {\n    if i == last {\n      continue;\n    }\n    vec.push_back(i);\n    last = i;\n  }\n  return vec;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293057,
      "stdout": "",
      "stderr": "error[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmpu2t7baei.rs:11:9\n   |\n11 |     vec.push_back(i);\n   |         ^^^^^^^^^ method not found in `Vec<_>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in l {\n    if i == last {\n      continue;\n    }\n    last = i;\n    result.push(i);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 3, 5, 2, 3, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmpolw4r6f0.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut vec = Vec::new();\n  let mut idx = 0;\n  for i in l {\n    if !vec.contains(i) {\n      vec.push(i);\n    }\n  }\n  vec.sort();\n  vec.unique();\n  return vec;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293057,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpw176qzqb.rs:8:22\n  |\n8 |     if !vec.contains(i) {\n  |                      ^\n  |                      |\n  |                      expected reference, found `isize`\n  |                      help: consider borrowing here: `&i`\n  |\n  = note: expected reference `&_`\n                  found type `isize`\n\nerror[E0599]: no method named `unique` found for struct `Vec<isize>` in the current scope\n  --> /tmp/tmpw176qzqb.rs:13:7\n   |\n13 |   vec.unique();\n   |       ^^^^^^ method not found in `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in l {\n    if i == last {\n      continue;\n    }\n    last = i;\n    result.push(i);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 3, 5, 2, 3, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmpolw4r6f0.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in l {\n    if i == last {\n      continue;\n    }\n    last = i;\n    result.push(i);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 3, 5, 2, 3, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmpolw4r6f0.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut seen = Vec::new();\n  for i in l {\n    if !seen.contains(i) {\n      result.append(i);\n      seen.append(i);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293057,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp6p7cf8lh.rs:8:23\n  |\n8 |     if !seen.contains(i) {\n  |                       ^\n  |                       |\n  |                       expected reference, found `isize`\n  |                       help: consider borrowing here: `&i`\n  |\n  = note: expected reference `&_`\n                  found type `isize`\n\nerror[E0308]: mismatched types\n --> /tmp/tmp6p7cf8lh.rs:9:21\n  |\n9 |       result.append(i);\n  |                     ^ expected `&mut Vec<_>`, found `isize`\n  |\n  = note: expected mutable reference `&mut Vec<_>`\n                          found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6p7cf8lh.rs:10:19\n   |\n10 |       seen.append(i);\n   |                   ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in l {\n    if i == last {\n      continue;\n    }\n    last = i;\n    result.push(i);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 3, 5, 2, 3, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmpolw4r6f0.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in l {\n    if i == last {\n      continue;\n    }\n    result.push(i);\n    last = i;\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 3, 5, 2, 3, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmpv27zc_jo.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in l {\n    if i == last {\n      continue;\n    }\n    last = i;\n    result.push(i);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 3, 5, 2, 3, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmpolw4r6f0.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in l {\n    if i == last {\n      continue;\n    }\n    last = i;\n    result.push(i);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 3, 5, 2, 3, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmpolw4r6f0.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in l {\n    if i == last {\n      continue;\n    }\n    result.push(i);\n    last = i;\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 3, 5, 2, 3, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmpv27zc_jo.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in l {\n    if i == last {\n      continue;\n    }\n    last = i;\n    result.push(i);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 3, 5, 2, 3, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmpolw4r6f0.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in l {\n    if i == last {\n      continue;\n    }\n    last = i;\n    result.push(i);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 3, 5, 2, 3, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmpolw4r6f0.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in l {\n    if i == last {\n      continue;\n    }\n    result.push(i);\n    last = i;\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 3, 5, 2, 3, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmpv27zc_jo.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in l {\n    if i == last {\n      continue;\n    }\n    result.push(i);\n    last = i;\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 3, 5, 2, 3, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmpv27zc_jo.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in l {\n    if i == last {\n      continue;\n    }\n    last = i;\n    result.push(i);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 3, 5, 2, 3, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmpolw4r6f0.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in l {\n    if i == last {\n      continue;\n    }\n    last = i;\n    result.push(i);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 3, 5, 2, 3, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmpolw4r6f0.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in l {\n    if i != last {\n      result.append(i);\n      last = i;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293057,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpz25rgzcq.rs:9:21\n  |\n9 |       result.append(i);\n  |                     ^ expected `&mut Vec<_>`, found `isize`\n  |\n  = note: expected mutable reference `&mut Vec<_>`\n                          found type `isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in l {\n    if i == last {\n      continue;\n    }\n    result.push(i);\n    last = i;\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 3, 5, 2, 3, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmpv27zc_jo.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in l {\n    if i == last {\n      continue;\n    }\n    last = i;\n    result.push(i);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 3, 5, 2, 3, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmpolw4r6f0.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in l {\n    if i == last {\n      continue;\n    }\n    result.push(i);\n    last = i;\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 3, 5, 2, 3, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmpv27zc_jo.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut vec = Vec::new();\n  let mut seen = Vec::new();\n  for i in l {\n    if !seen.contains(&i) {\n      vec.push(&i);\n      seen.push(&i);\n    }\n  }\n  return vec;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293057,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmprf8mpl8h.rs:10:17\n   |\n10 |       seen.push(&i);\n   |                 ^^ expected `isize`, found `&isize`\n   |\nhelp: consider removing the borrow\n   |\n10 -       seen.push(&i);\n10 +       seen.push(i);\n   | \n\nerror[E0308]: mismatched types\n  --> /tmp/tmprf8mpl8h.rs:13:10\n   |\n4  | fn unique(l: Vec<isize>) -> Vec<isize> {\n   |                             ---------- expected `Vec<isize>` because of return type\n...\n13 |   return vec;\n   |          ^^^ expected `isize`, found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = 0;\n  for i in l {\n    if i != last {\n      result.append(i);\n      last = i;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293057,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpyseoudhm.rs:9:21\n  |\n9 |       result.append(i);\n  |                     ^ expected `&mut Vec<_>`, found `isize`\n  |\n  = note: expected mutable reference `&mut Vec<_>`\n                          found type `isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut vec = Vec::new();\n  let mut last = -1;\n  for i in l {\n    if i == last {\n      continue;\n    }\n    last = i;\n    vec.push(i);\n  }\n  return vec;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 3, 5, 2, 3, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmptwm4mtph.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in l {\n    if i != last {\n      result.push(i);\n      last = i;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 3, 5, 2, 3, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmphvbh25c0.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut seen = Vec::new();\n  for i in l {\n    if !seen.contains(&i) {\n      result.append(&i);\n      seen.append(&i);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293057,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpp0kcyvfm.rs:9:21\n  |\n9 |       result.append(&i);\n  |                     ^^ types differ in mutability\n  |\n  = note: expected mutable reference `&mut Vec<_>`\n                     found reference `&isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpp0kcyvfm.rs:10:19\n   |\n10 |       seen.append(&i);\n   |                   ^^ types differ in mutability\n   |\n   = note: expected mutable reference `&mut Vec<isize>`\n                      found reference `&isize`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut vec = Vec::new();\n  let mut last = -1;\n  for i in l {\n    if i == last {\n      continue;\n    }\n    vec.push_back(i);\n    last = i;\n  }\n  return vec;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293057,
      "stdout": "",
      "stderr": "error[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmpu2t7baei.rs:11:9\n   |\n11 |     vec.push_back(i);\n   |         ^^^^^^^^^ method not found in `Vec<_>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in l {\n    if i == last {\n      continue;\n    }\n    result.push(i);\n    last = i;\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 3, 5, 2, 3, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmpv27zc_jo.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in l {\n    if i == last {\n      continue;\n    }\n    result.push(i);\n    last = i;\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 3, 5, 2, 3, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmpv27zc_jo.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in l {\n    if i == last {\n      continue;\n    }\n    last = i;\n    result.push(i);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 3, 5, 2, 3, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmpolw4r6f0.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in l {\n    if i != last {\n      result.push(i);\n      last = i;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 3, 5, 2, 3, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmphvbh25c0.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in l {\n    if i == last {\n      continue;\n    }\n    result.push(i);\n    last = i;\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 3, 5, 2, 3, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmpv27zc_jo.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in l {\n    if i == last {\n      continue;\n    }\n    last = i;\n    result.push(i);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 3, 5, 2, 3, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmpolw4r6f0.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in l {\n    if i == last {\n      continue;\n    }\n    last = i;\n    result.push(i);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 3, 5, 2, 3, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmpolw4r6f0.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut vec = Vec::new();\n  let mut last = -1;\n  for i in l {\n    if i == last {\n      continue;\n    }\n    vec.push_back(i);\n    last = i;\n  }\n  return vec;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293057,
      "stdout": "",
      "stderr": "error[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmpu2t7baei.rs:11:9\n   |\n11 |     vec.push_back(i);\n   |         ^^^^^^^^^ method not found in `Vec<_>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut vec = Vec::new();\n  let mut i = 0;\n  for v in l {\n    if vec.len() == 0 || vec.last() != v {\n      vec.push(v);\n    }\n  }\n  vec\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293057,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpxz2fw5uv.rs:8:40\n  |\n8 |     if vec.len() == 0 || vec.last() != v {\n  |                                        ^ expected enum `Option`, found `isize`\n  |\n  = note: expected enum `Option<&_>`\n             found type `isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in l {\n    if i == last {\n      continue;\n    }\n    last = i;\n    result.push(i);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 3, 5, 2, 3, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmpolw4r6f0.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut vec = Vec::new();\n  let mut last = -1;\n  for i in l {\n    if i == last {\n      continue;\n    }\n    vec.push_back(i);\n    last = i;\n  }\n  return vec;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293057,
      "stdout": "",
      "stderr": "error[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmpu2t7baei.rs:11:9\n   |\n11 |     vec.push_back(i);\n   |         ^^^^^^^^^ method not found in `Vec<_>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in l {\n    if i == last {\n      continue;\n    }\n    last = i;\n    result.append(i);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293057,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp2vo642hf.rs:12:19\n   |\n12 |     result.append(i);\n   |                   ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in l {\n    if i == last {\n      continue;\n    }\n    last = i;\n    result.push(i);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 3, 5, 2, 3, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmpolw4r6f0.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut r = Vec::new();\n  let mut i = 0;\n  let mut j = 0;\n  let mut k = 0;\n  let mut c = 0;\n  for (i = 0; i < l.len; i++) {\n    if (c == 0 || l[i] != l[j]) {\n      r.append(l[i]);\n      c = 1;\n    } else {\n      c = 0;\n      j = i;\n    }\n  }\n  return r;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293057,
      "stdout": "",
      "stderr": "error: expected one of `)`, `,`, `@`, or `|`, found `=`\n  --> /tmp/tmpalv3ulph.rs:10:10\n   |\n10 |   for (i = 0; i < l.len; i++) {\n   |          ^ expected one of `)`, `,`, `@`, or `|`\n\nerror: missing `in` in `for` loop\n  --> /tmp/tmpalv3ulph.rs:10:9\n   |\n10 |   for (i = 0; i < l.len; i++) {\n   |         ^ help: try adding `in` here\n\nerror: expected expression, found `=`\n  --> /tmp/tmpalv3ulph.rs:10:10\n   |\n10 |   for (i = 0; i < l.len; i++) {\n   |          ^ expected expression\n\nerror: aborting due to 3 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in l {\n    if i == last {\n      continue;\n    }\n    result.append(i);\n    last = i;\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293057,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp2yq9uufp.rs:11:19\n   |\n11 |     result.append(i);\n   |                   ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in l {\n    if i == last {\n      continue;\n    }\n    last = i;\n    result.append(i);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293057,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp2vo642hf.rs:12:19\n   |\n12 |     result.append(i);\n   |                   ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut vec = Vec::new();\n  let mut last = -1;\n  for v in l {\n    if last != v {\n      vec.push_back(v);\n      last = v;\n    }\n  }\n  return vec;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293057,
      "stdout": "",
      "stderr": "error[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n --> /tmp/tmp2m1iwgbk.rs:9:11\n  |\n9 |       vec.push_back(v);\n  |           ^^^^^^^^^ method not found in `Vec<_>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in l {\n    if i == last {\n      continue;\n    }\n    last = i;\n    result.push(i);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 3, 5, 2, 3, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmpolw4r6f0.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut vec = Vec::new();\n  let mut i = 0;\n  let mut j = 0;\n  let mut k = 0;\n  while (i < l.len) {\n    if (j == vec.len || l[i] != vec[j]) {\n      vec.push(l[i]);\n      i += 1;\n    } else {\n      k += 1;\n    }\n    j += 1;\n  }\n  vec.len = k;\n  return vec;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293057,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `while` condition\n --> /tmp/tmp78hkd4wc.rs:9:9\n  |\n9 |   while (i < l.len) {\n  |         ^         ^\n  |\n  = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n  |\n9 -   while (i < l.len) {\n9 +   while i < l.len {\n  | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp78hkd4wc.rs:10:8\n   |\n10 |     if (j == vec.len || l[i] != vec[j]) {\n   |        ^                              ^\n   |\nhelp: remove these parentheses\n   |\n10 -     if (j == vec.len || l[i] != vec[j]) {\n10 +     if j == vec.len || l[i] != vec[j] {\n   | \n\nerror[E0616]: field `len` of struct `Vec` is private\n --> /tmp/tmp78hkd4wc.rs:9:16\n  |\n9 |   while (i < l.len) {\n  |                ^^^ private field\n  |\nhelp: a method `len` also exists, call it with parentheses\n  |\n9 |   while (i < l.len()) {\n  |                   ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp78hkd4wc.rs:10:18\n   |\n10 |     if (j == vec.len || l[i] != vec[j]) {\n   |                  ^^^ private field\n   |\nhelp: a method `len` also exists, call it with parentheses\n   |\n10 |     if (j == vec.len() || l[i] != vec[j]) {\n   |                     ++\n\nerror[E0616]: field `len` of struct `Vec` is private\n  --> /tmp/tmp78hkd4wc.rs:18:7\n   |\n18 |   vec.len = k;\n   |       ^^^ private field\n\nerror: aborting due to 3 previous errors; 2 warnings emitted\n\nFor more information about this error, try `rustc --explain E0616`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = 0;\n  for i in l {\n    if i != last {\n      result.push(i);\n      last = i;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 3, 5, 2, 3, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmpa8xe7knu.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in l {\n    if i == last {\n      continue;\n    }\n    last = i;\n    result.push(i);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 3, 5, 2, 3, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmpolw4r6f0.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in l {\n    if i == last {\n      continue;\n    }\n    last = i;\n    result.push(i);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 3, 5, 2, 3, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmpolw4r6f0.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in l {\n    if i == last {\n      continue;\n    }\n    result.push(i);\n    last = i;\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 3, 5, 2, 3, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmpv27zc_jo.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in l {\n    if i == last {\n      continue;\n    }\n    last = i;\n    result.push(i);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 3, 5, 2, 3, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmpolw4r6f0.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut vec = Vec::new();\n  let mut last = -1;\n  for i in l {\n    if i == last {\n      continue;\n    }\n    vec.push_back(i);\n    last = i;\n  }\n  return vec;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293057,
      "stdout": "",
      "stderr": "error[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmpu2t7baei.rs:11:9\n   |\n11 |     vec.push_back(i);\n   |         ^^^^^^^^^ method not found in `Vec<_>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut vec = Vec::new();\n  let mut i = 0;\n  for v in l {\n    if vec.len() == 0 || vec.last() != v {\n      vec.push_back(v);\n    }\n  }\n  vec.sort();\n  return vec;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293057,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp3zz10rd9.rs:8:40\n  |\n8 |     if vec.len() == 0 || vec.last() != v {\n  |                                        ^ expected enum `Option`, found `isize`\n  |\n  = note: expected enum `Option<&_>`\n             found type `isize`\n\nerror[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n --> /tmp/tmp3zz10rd9.rs:9:11\n  |\n9 |       vec.push_back(v);\n  |           ^^^^^^^^^ method not found in `Vec<_>`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in l {\n    if i == last {\n      continue;\n    }\n    last = i;\n    result.push(i);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 3, 5, 2, 3, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmpolw4r6f0.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut vec = Vec::new();\n  let mut last = -1;\n  for i in l {\n    if i == last {\n      continue;\n    }\n    vec.push(i);\n    last = i;\n  }\n  return vec;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 3, 5, 2, 3, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmpp78ruq6p.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for v in l {\n    if last != v {\n      result.push(v);\n      last = v;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 3, 5, 2, 3, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmpvq6w37m6.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in l {\n    if i == last {\n      continue;\n    }\n    last = i;\n    result.append(i);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293057,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp2vo642hf.rs:12:19\n   |\n12 |     result.append(i);\n   |                   ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in l {\n    if i == last {\n      continue;\n    }\n    last = i;\n    result.push(i);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 3, 5, 2, 3, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmpolw4r6f0.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in l {\n    if i == last {\n      continue;\n    }\n    result.push(i);\n    last = i;\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 3, 5, 2, 3, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmpv27zc_jo.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut seen = Vec::new();\n\n  for i in l {\n    if !seen.contains(&i) {\n      result.append(&i);\n      seen.append(&i);\n    }\n  }\n\n  return result;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpexxj1e2y.rs:10:21\n   |\n10 |       result.append(&i);\n   |                     ^^ types differ in mutability\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                      found reference `&isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpexxj1e2y.rs:11:19\n   |\n11 |       seen.append(&i);\n   |                   ^^ types differ in mutability\n   |\n   = note: expected mutable reference `&mut Vec<isize>`\n                      found reference `&isize`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in l {\n    if i == last {\n      continue;\n    }\n    last = i;\n    result.push(i);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 3, 5, 2, 3, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmpolw4r6f0.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut vec = Vec::new();\n  let mut last = -1;\n  for i in l {\n    if i == last {\n      continue;\n    }\n    last = i;\n    vec.push_back(i);\n  }\n  return vec;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293057,
      "stdout": "",
      "stderr": "error[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmp8o0aj1sj.rs:12:9\n   |\n12 |     vec.push_back(i);\n   |         ^^^^^^^^^ method not found in `Vec<_>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in l {\n    if i == last {\n      continue;\n    }\n    result.push(i);\n    last = i;\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 3, 5, 2, 3, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmpv27zc_jo.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in l {\n    if i == last {\n      continue;\n    }\n    result.push(i);\n    last = i;\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 3, 5, 2, 3, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmpv27zc_jo.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut vec = Vec::new();\n  let mut idx = 0;\n  for i in l {\n    if !vec.contains(i) {\n      vec.push(i);\n    }\n  }\n  vec.sort();\n  vec.unique();\n  return vec;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293057,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpw176qzqb.rs:8:22\n  |\n8 |     if !vec.contains(i) {\n  |                      ^\n  |                      |\n  |                      expected reference, found `isize`\n  |                      help: consider borrowing here: `&i`\n  |\n  = note: expected reference `&_`\n                  found type `isize`\n\nerror[E0599]: no method named `unique` found for struct `Vec<isize>` in the current scope\n  --> /tmp/tmpw176qzqb.rs:13:7\n   |\n13 |   vec.unique();\n   |       ^^^^^^ method not found in `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut vec = Vec::new();\n  let mut last = -1;\n  for i in l {\n    if i == last {\n      continue;\n    }\n    vec.push_back(i);\n    last = i;\n  }\n  return vec;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293057,
      "stdout": "",
      "stderr": "error[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmpu2t7baei.rs:11:9\n   |\n11 |     vec.push_back(i);\n   |         ^^^^^^^^^ method not found in `Vec<_>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in l {\n    if i == last {\n      continue;\n    }\n    last = i;\n    result.append(i);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293057,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp2vo642hf.rs:12:19\n   |\n12 |     result.append(i);\n   |                   ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in l {\n    if i == last {\n      continue;\n    }\n    last = i;\n    result.push(i);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 3, 5, 2, 3, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmpolw4r6f0.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in l {\n    if i == last {\n      continue;\n    }\n    result.push(i);\n    last = i;\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 3, 5, 2, 3, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmpv27zc_jo.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut vec = Vec::new();\n  let mut i = 0;\n  let mut j = 0;\n  let mut k = 0;\n  let mut l = 0;\n  let mut m = 0;\n  let mut n = 0;\n  let mut o = 0;\n  let mut p = 0;\n  let mut q = 0;\n  let mut r = 0;\n  let mut s = 0;\n  let mut t = 0;\n  let mut u = 0;\n  let mut v = 0;\n  let mut w = 0;\n  let mut x = 0;\n  let mut y = 0;\n  let mut z = 0;\n  let mut a = 0;\n  let mut b = 0;\n  let mut c = 0;\n  let mut d = 0;\n  let mut e = 0;\n  let mut f = 0;\n  let mut g = 0;\n  let mut h = 0;\n  let mut i = 0;\n  let mut j = 0;\n  let mut k = 0;\n  let mut l = 0;\n  let mut m = 0;\n  let mut n = 0;\n  let mut o = 0;\n  let mut p = 0;\n  let mut q = 0;\n  let mut r = 0;\n  let mut s = 0;\n  let mut t = 0;\n  let mut u = 0;\n  let mut v = 0;\n  let mut w = 0;\n  let mut x = 0;\n  let mut y = 0;\n  let mut z = 0;\n  let mut a = 0;\n  let mut b = 0;\n  let mut c = 0;\n  let mut d = 0;\n  let mut e = 0;\n  let mut f = 0;\n  let mut g = 0;\n  let mut h = 0;\n  let mut i = 0;\n  let mut j = 0;\n  let mut k = 0;\n  let mut l = 0;\n  let mut m = 0;\n  let mut n = 0;\n  let mut o = 0;\n  let mut p = 0;\n  let mut q = 0;\n  let mut r = 0;\n  let mut s = 0\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293057,
      "stdout": "",
      "stderr": "error: expected `;`, found `}`\n  --> /tmp/tmprtfr_4nb.rs:68:16\n   |\n68 |   let mut s = 0\n   |                ^ help: add `;` here\n69 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmprtfr_4nb.rs:4:29\n  |\n4 | fn unique(l: Vec<isize>) -> Vec<isize> {\n  |    ------                   ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for v in l {\n    if last != v {\n      result.push(v);\n      last = v;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 3, 5, 2, 3, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmpvq6w37m6.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut vec = Vec::new();\n  let mut last = -1;\n  for v in l {\n    if vec.len() == 0 || vec.last() != v {\n      vec.push(v);\n    }\n  }\n  vec.sort();\n  vec.uniq();\n  return vec;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpb7h4xnnb.rs:8:40\n  |\n8 |     if vec.len() == 0 || vec.last() != v {\n  |                                        ^ expected enum `Option`, found `isize`\n  |\n  = note: expected enum `Option<&_>`\n             found type `isize`\n\nerror[E0599]: no method named `uniq` found for struct `Vec<isize>` in the current scope\n  --> /tmp/tmpb7h4xnnb.rs:13:7\n   |\n13 |   vec.uniq();\n   |       ^^^^ method not found in `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in l {\n    if i == last {\n      continue;\n    }\n    result.push(i);\n    last = i;\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 3, 5, 2, 3, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmpv27zc_jo.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut vec = Vec::new();\n  let mut last = -1;\n  for i in l {\n    if i == last {\n      continue;\n    }\n    vec.push(i);\n    last = i;\n  }\n  return vec;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 3, 5, 2, 3, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmpp78ruq6p.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in l {\n    if i == last {\n      continue;\n    }\n    last = i;\n    result.push(i);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 3, 5, 2, 3, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmpolw4r6f0.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut seen = Vec::new();\n  for v in l {\n    if !seen.contains(&v) {\n      result.append(&v);\n      seen.append(&v);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpue3o09fx.rs:9:21\n  |\n9 |       result.append(&v);\n  |                     ^^ types differ in mutability\n  |\n  = note: expected mutable reference `&mut Vec<_>`\n                     found reference `&isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpue3o09fx.rs:10:19\n   |\n10 |       seen.append(&v);\n   |                   ^^ types differ in mutability\n   |\n   = note: expected mutable reference `&mut Vec<isize>`\n                      found reference `&isize`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in l {\n    if i == last {\n      continue;\n    }\n    last = i;\n    result.push(i);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 3, 5, 2, 3, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmpolw4r6f0.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in l {\n    if i == last {\n      continue;\n    }\n    result.push(i);\n    last = i;\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 3, 5, 2, 3, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmpv27zc_jo.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in l {\n    if i == last {\n      continue;\n    }\n    last = i;\n    result.push(i);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 3, 5, 2, 3, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmpolw4r6f0.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for v in l {\n    if last != v {\n      result.push(v);\n      last = v;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 3, 5, 2, 3, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmpvq6w37m6.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut vec = Vec::new();\n  let mut last = -1;\n  for i in l {\n    if i == last {\n      continue;\n    }\n    vec.push_back(i);\n    last = i;\n  }\n  return vec;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293057,
      "stdout": "",
      "stderr": "error[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmpu2t7baei.rs:11:9\n   |\n11 |     vec.push_back(i);\n   |         ^^^^^^^^^ method not found in `Vec<_>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in l {\n    if i == last {\n      continue;\n    }\n    result.push(i);\n    last = i;\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 3, 5, 2, 3, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmpv27zc_jo.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in l {\n    if i == last {\n      continue;\n    }\n    last = i;\n    result.push(i);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 3, 5, 2, 3, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmpolw4r6f0.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut vec = Vec::new();\n  for i in l {\n    if !vec.contains(i) {\n      vec.push(i);\n    }\n  }\n  vec\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293057,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpqhhtrdul.rs:7:22\n  |\n7 |     if !vec.contains(i) {\n  |                      ^\n  |                      |\n  |                      expected reference, found `isize`\n  |                      help: consider borrowing here: `&i`\n  |\n  = note: expected reference `&_`\n                  found type `isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut vec = Vec::new();\n  let mut last = -1;\n  for i in l {\n    if i == last {\n      continue;\n    }\n    vec.push_back(i);\n    last = i;\n  }\n  return vec;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293057,
      "stdout": "",
      "stderr": "error[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmpu2t7baei.rs:11:9\n   |\n11 |     vec.push_back(i);\n   |         ^^^^^^^^^ method not found in `Vec<_>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in l {\n    if i == last {\n      continue;\n    }\n    last = i;\n    result.push(i);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 3, 5, 2, 3, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmpolw4r6f0.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in l {\n    if i == last {\n      continue;\n    }\n    result.push(i);\n    last = i;\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 3, 5, 2, 3, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmpv27zc_jo.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut vec = Vec::new();\n  let mut last = -1;\n  for i in l {\n    if i == last {\n      continue;\n    }\n    last = i;\n    vec.push_back(i);\n  }\n  return vec;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293057,
      "stdout": "",
      "stderr": "error[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmp8o0aj1sj.rs:12:9\n   |\n12 |     vec.push_back(i);\n   |         ^^^^^^^^^ method not found in `Vec<_>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in l {\n    if i == last {\n      continue;\n    }\n    last = i;\n    result.append(i);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293057,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp2vo642hf.rs:12:19\n   |\n12 |     result.append(i);\n   |                   ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in l {\n    if i == last {\n      continue;\n    }\n    last = i;\n    result.push(i);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 3, 5, 2, 3, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmpolw4r6f0.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut vec = Vec::new();\n  let mut last = -1;\n  for i in l {\n    if i == last {\n      continue;\n    }\n    vec.push_back(i);\n    last = i;\n  }\n  return vec;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293057,
      "stdout": "",
      "stderr": "error[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmpu2t7baei.rs:11:9\n   |\n11 |     vec.push_back(i);\n   |         ^^^^^^^^^ method not found in `Vec<_>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut vec = Vec::new();\n  let mut last = -1;\n  for i in l {\n    if i == last {\n      continue;\n    }\n    last = i;\n    vec.push_back(i);\n  }\n  return vec;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293057,
      "stdout": "",
      "stderr": "error[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmp8o0aj1sj.rs:12:9\n   |\n12 |     vec.push_back(i);\n   |         ^^^^^^^^^ method not found in `Vec<_>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in l {\n    if i == last {\n      continue;\n    }\n    last = i;\n    result.push(i);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 3, 5, 2, 3, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmpolw4r6f0.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut vec = Vec::new();\n  let mut last = -1;\n  for v in l {\n    if vec.len() == 0 || vec.last() != v {\n      vec.push(v);\n    }\n  }\n  vec.sort();\n  vec.uniq();\n  return vec;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpb7h4xnnb.rs:8:40\n  |\n8 |     if vec.len() == 0 || vec.last() != v {\n  |                                        ^ expected enum `Option`, found `isize`\n  |\n  = note: expected enum `Option<&_>`\n             found type `isize`\n\nerror[E0599]: no method named `uniq` found for struct `Vec<isize>` in the current scope\n  --> /tmp/tmpb7h4xnnb.rs:13:7\n   |\n13 |   vec.uniq();\n   |       ^^^^ method not found in `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut vec = Vec::new();\n  let mut last = -1;\n  for v in l {\n    if vec.len() == 0 || vec.last() != v {\n      vec.push(v);\n    }\n  }\n  vec.sort();\n  vec.uniq();\n  return vec;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpb7h4xnnb.rs:8:40\n  |\n8 |     if vec.len() == 0 || vec.last() != v {\n  |                                        ^ expected enum `Option`, found `isize`\n  |\n  = note: expected enum `Option<&_>`\n             found type `isize`\n\nerror[E0599]: no method named `uniq` found for struct `Vec<isize>` in the current scope\n  --> /tmp/tmpb7h4xnnb.rs:13:7\n   |\n13 |   vec.uniq();\n   |       ^^^^ method not found in `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut vec = Vec::new();\n  let mut last = -1;\n  for v in l {\n    if last != v {\n      vec.push(v);\n      last = v;\n    }\n  }\n  return vec;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 3, 5, 2, 3, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmpne4ao6_z.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut vec = Vec::new();\n  for i in l {\n    if vec.len() == 0 || vec.last() != i {\n      vec.push(i);\n    }\n  }\n  vec\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293057,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp56rv69yk.rs:7:40\n  |\n7 |     if vec.len() == 0 || vec.last() != i {\n  |                                        ^ expected enum `Option`, found `isize`\n  |\n  = note: expected enum `Option<&_>`\n             found type `isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in l {\n    if i == last {\n      continue;\n    }\n    result.push(i);\n    last = i;\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 3, 5, 2, 3, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmpv27zc_jo.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in l {\n    if i == last {\n      continue;\n    }\n    result.push(i);\n    last = i;\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 3, 5, 2, 3, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmpv27zc_jo.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in l {\n    if i == last {\n      continue;\n    }\n    result.push(i);\n    last = i;\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 3, 5, 2, 3, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmpv27zc_jo.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut vec = Vec::new();\n  let mut seen = Vec::new();\n  for i in l {\n    if !seen.contains(&i) {\n      vec.append(&i);\n      seen.append(&i);\n    }\n  }\n  vec\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmppcv61emk.rs:9:18\n  |\n9 |       vec.append(&i);\n  |                  ^^ types differ in mutability\n  |\n  = note: expected mutable reference `&mut Vec<_>`\n                     found reference `&isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmppcv61emk.rs:10:19\n   |\n10 |       seen.append(&i);\n   |                   ^^ types differ in mutability\n   |\n   = note: expected mutable reference `&mut Vec<isize>`\n                      found reference `&isize`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in l {\n    if i == last {\n      continue;\n    }\n    result.push(i);\n    last = i;\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 3, 5, 2, 3, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmpv27zc_jo.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in l {\n    if i == last {\n      continue;\n    }\n    last = i;\n    result.push(i);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 3, 5, 2, 3, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmpolw4r6f0.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut vec = Vec::new();\n  let mut last = -1;\n  for i in l {\n    if i == last {\n      continue;\n    }\n    vec.push_back(i);\n    last = i;\n  }\n  return vec;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293057,
      "stdout": "",
      "stderr": "error[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmpu2t7baei.rs:11:9\n   |\n11 |     vec.push_back(i);\n   |         ^^^^^^^^^ method not found in `Vec<_>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut vec = Vec::new();\n  let mut last = -1;\n  for i in l {\n    if i == last {\n      continue;\n    }\n    vec.push_back(i);\n    last = i;\n  }\n  return vec;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293057,
      "stdout": "",
      "stderr": "error[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmpu2t7baei.rs:11:9\n   |\n11 |     vec.push_back(i);\n   |         ^^^^^^^^^ method not found in `Vec<_>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in l {\n    if i == last {\n      continue;\n    }\n    last = i;\n    result.push(i);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 3, 5, 2, 3, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmpolw4r6f0.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = 0;\n  for i in l {\n    if i != last {\n      result.append(i);\n      last = i;\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293057,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpyseoudhm.rs:9:21\n  |\n9 |       result.append(i);\n  |                     ^ expected `&mut Vec<_>`, found `isize`\n  |\n  = note: expected mutable reference `&mut Vec<_>`\n                          found type `isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in l {\n    if i == last {\n      continue;\n    }\n    result.push(i);\n    last = i;\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 3, 5, 2, 3, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmpv27zc_jo.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in l {\n    if i == last {\n      continue;\n    }\n    last = i;\n    result.append(i);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293057,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp2vo642hf.rs:12:19\n   |\n12 |     result.append(i);\n   |                   ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  for i in l {\n    if !result.contains(i) {\n      result.push(i);\n    }\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293057,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpuq9r6ewg.rs:7:25\n  |\n7 |     if !result.contains(i) {\n  |                         ^\n  |                         |\n  |                         expected reference, found `isize`\n  |                         help: consider borrowing here: `&i`\n  |\n  = note: expected reference `&_`\n                  found type `isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in l {\n    if i == last {\n      continue;\n    }\n    result.push(i);\n    last = i;\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 3, 5, 2, 3, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmpv27zc_jo.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut vec = Vec::new();\n  let mut i = 0;\n  for v in l {\n    if vec.len() == 0 || vec.last() != v {\n      vec.push(v);\n    }\n  }\n  vec\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293057,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpxz2fw5uv.rs:8:40\n  |\n8 |     if vec.len() == 0 || vec.last() != v {\n  |                                        ^ expected enum `Option`, found `isize`\n  |\n  = note: expected enum `Option<&_>`\n             found type `isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in l {\n    if i == last {\n      continue;\n    }\n    last = i;\n    result.append(i);\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293057,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmp2vo642hf.rs:12:19\n   |\n12 |     result.append(i);\n   |                   ^ expected `&mut Vec<_>`, found `isize`\n   |\n   = note: expected mutable reference `&mut Vec<_>`\n                           found type `isize`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in l {\n    if i == last {\n      continue;\n    }\n    result.push(i);\n    last = i;\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 3, 5, 2, 3, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmpv27zc_jo.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut vec = Vec::new();\n  let mut i = 0;\n  let mut j = 0;\n  let mut k = 0;\n  let mut last = 0;\n  for i in l {\n    if i == last {\n      continue;\n    }\n    last = i;\n    vec.push_back(i);\n  }\n  vec.sort();\n  return vec;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "error[E0599]: no method named `push_back` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmpcju5miwx.rs:15:9\n   |\n15 |     vec.push_back(i);\n   |         ^^^^^^^^^ method not found in `Vec<_>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in l {\n    if i == last {\n      continue;\n    }\n    result.push(i);\n    last = i;\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 3, 5, 2, 3, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmpv27zc_jo.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = -1;\n  for i in l {\n    if i == last {\n      continue;\n    }\n    result.push(i);\n    last = i;\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 3, 5, 2, 3, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmpv27zc_jo.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return sorted unique elements in a vector\n/// >>> unique(vec![5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// vec![0, 2, 3, 5, 9, 123]\nfn unique(l: Vec<isize>) -> Vec<isize> {\n  let mut result = Vec::new();\n  let mut last = 0;\n  for i in l {\n    if i == last {\n      continue;\n    }\n    result.push(i);\n    last = i;\n  }\n  return result;\n}\n\nfn main() {\n    let candidate = unique;\n    assert_eq!(candidate(vec![5, 3, 5, 2, 3, 3, 9, 0, 123]), vec![0, 2, 3, 5, 9, 123]);\n}\n",
      "timestamp": 1664293058,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 3, 5, 2, 3, 9, 0, 123]`,\n right: `[0, 2, 3, 5, 9, 123]`', /tmp/tmpqzp49wac.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    }
  ]
}