{
  "name": "HumanEval_36_fizz_buzz",
  "language": "rs",
  "prompt": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n",
  "tests": "}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0;\n  for i in 0..n {\n    if i % 3 == 0 && i % 5 == 0 {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpgvw_rqoc.rs:12:7\n   |\n9  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n12 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0;\n  for i in 0..n {\n    if i % 11 == 0 || i % 13 == 0 {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmptxabo2al.rs:12:7\n   |\n9  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n12 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0;\n  for i in 0..n {\n    if i % 11 == 0 || i % 13 == 0 {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmptxabo2al.rs:12:7\n   |\n9  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n12 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0;\n  for i in 0..n {\n    if i % 11 == 0 || i % 13 == 0 {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmptxabo2al.rs:12:7\n   |\n9  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n12 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0;\n  for i in 0..n {\n    if i % 11 == 0 || i % 13 == 0 {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmptxabo2al.rs:12:7\n   |\n9  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n12 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0;\n  for i in 0..n {\n    if i % 11 == 0 || i % 13 == 0 {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmptxabo2al.rs:12:7\n   |\n9  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n12 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0;\n  for i in 0..n {\n    if i % 11 == 0 || i % 13 == 0 {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmptxabo2al.rs:12:7\n   |\n9  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n12 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0\n  for i in 0..n {\n    if (i % 11 == 0 || i % 13 == 0) {\n      count += 1\n    }\n  }\n  return count\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpx3zbn8yo.rs:9:16\n   |\n9  |   let count = 0\n   |                ^ help: add `;` here\n10 |   for i in 0..n {\n   |   --- unexpected token\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpx3zbn8yo.rs:11:8\n   |\n11 |     if (i % 11 == 0 || i % 13 == 0) {\n   |        ^                          ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n11 -     if (i % 11 == 0 || i % 13 == 0) {\n11 +     if i % 11 == 0 || i % 13 == 0 {\n   | \n\nerror: aborting due to previous error; 1 warning emitted\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0\n  for i in 0..n {\n    if i % 3 == 0 && i % 5 == 0 {\n      count += 1\n    }\n  }\n  return count\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmppffidsyz.rs:9:16\n   |\n9  |   let count = 0\n   |                ^ help: add `;` here\n10 |   for i in 0..n {\n   |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0;\n  for i in 0..n {\n    if i % 15 == 0 {\n      count += 1;\n    } else if i % 5 == 0 {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpmw6v6rmd.rs:12:7\n   |\n9  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n12 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpmw6v6rmd.rs:14:7\n   |\n9  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n14 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0;\n  for i in 0..n {\n    if (i % 11 == 0 || i % 13 == 0) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpjr3rb3qf.rs:11:8\n   |\n11 |     if (i % 11 == 0 || i % 13 == 0) {\n   |        ^                          ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n11 -     if (i % 11 == 0 || i % 13 == 0) {\n11 +     if i % 11 == 0 || i % 13 == 0 {\n   | \n\nerror[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpjr3rb3qf.rs:12:7\n   |\n9  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n12 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error; 1 warning emitted\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0\n  for i in 0..n {\n    if i % 3 == 0 && i % 5 == 0 {\n      count += 1\n    }\n  }\n  return count\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmppffidsyz.rs:9:16\n   |\n9  |   let count = 0\n   |                ^ help: add `;` here\n10 |   for i in 0..n {\n   |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0;\n  for i in 0..n {\n    if i % 11 == 0 || i % 13 == 0 {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmptxabo2al.rs:12:7\n   |\n9  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n12 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0;\n  for i in 0..n {\n    if i % 11 == 0 || i % 13 == 0 {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmptxabo2al.rs:12:7\n   |\n9  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n12 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0\n  for i in 0..n {\n    if i % 11 == 0 || i % 13 == 0 {\n      count += 1\n    }\n  }\n  return count\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp_mh1r1bh.rs:9:16\n   |\n9  |   let count = 0\n   |                ^ help: add `;` here\n10 |   for i in 0..n {\n   |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0\n  for i in 0..n {\n    if i % 11 == 0 || i % 13 == 0 {\n      count += 1\n    }\n  }\n  return count\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp_mh1r1bh.rs:9:16\n   |\n9  |   let count = 0\n   |                ^ help: add `;` here\n10 |   for i in 0..n {\n   |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0;\n  for i in 0..n {\n    if (i % 11 == 0 || i % 13 == 0) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpjr3rb3qf.rs:11:8\n   |\n11 |     if (i % 11 == 0 || i % 13 == 0) {\n   |        ^                          ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n11 -     if (i % 11 == 0 || i % 13 == 0) {\n11 +     if i % 11 == 0 || i % 13 == 0 {\n   | \n\nerror[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpjr3rb3qf.rs:12:7\n   |\n9  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n12 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error; 1 warning emitted\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0;\n  for isize i = 0; i < n; i += 1 {\n    if (i % 11 == 0 || i % 13 == 0) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error: missing `in` in `for` loop\n  --> /tmp/tmpxg0odc0s.rs:10:12\n   |\n10 |   for isize i = 0; i < n; i += 1 {\n   |            ^ help: try adding `in` here\n\nerror: expected `{`, found `;`\n  --> /tmp/tmpxg0odc0s.rs:10:18\n   |\n10 |   for isize i = 0; i < n; i += 1 {\n   |                  ^ expected `{`\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0;\n  for i in 0..n {\n    if i % 3 == 0 && i % 5 == 0 {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpgvw_rqoc.rs:12:7\n   |\n9  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n12 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0\n  for i in 0..n {\n    if i % 3 == 0 && i % 5 == 0 {\n      count += 1\n    }\n  }\n  return count\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmppffidsyz.rs:9:16\n   |\n9  |   let count = 0\n   |                ^ help: add `;` here\n10 |   for i in 0..n {\n   |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0;\n  for i in 0..n {\n    if i % 11 == 0 || i % 13 == 0 {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmptxabo2al.rs:12:7\n   |\n9  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n12 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0;\n  for i in 0..n {\n    if i % 3 == 0 && i % 5 == 0 {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpgvw_rqoc.rs:12:7\n   |\n9  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n12 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0\n  for i in 0..n {\n    if i % 15 == 0 {\n      count += 1\n    }\n    if i % 5 == 0 {\n      count += 1\n    }\n    if i % 3 == 0 {\n      count += 1\n    }\n  }\n  return count\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp5lnjghf5.rs:9:16\n   |\n9  |   let count = 0\n   |                ^ help: add `;` here\n10 |   for i in 0..n {\n   |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0\n  for i in 0..n {\n    if i % 3 == 0 && i % 5 == 0 {\n      count += 1\n    }\n  }\n  return count\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmppffidsyz.rs:9:16\n   |\n9  |   let count = 0\n   |                ^ help: add `;` here\n10 |   for i in 0..n {\n   |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0;\n  for i in 0..n {\n    if i % 15 == 0 {\n      count += 1;\n    }\n    if i % 5 == 0 {\n      count += 1;\n    }\n    if i % 3 == 0 {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpg4j0ndas.rs:12:7\n   |\n9  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n12 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpg4j0ndas.rs:15:7\n   |\n9  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n15 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpg4j0ndas.rs:18:7\n   |\n9  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n18 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0\n  for i in 0..n {\n    if i % 3 == 0 && i % 5 == 0 {\n      count += 1\n    }\n  }\n  return count\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmppffidsyz.rs:9:16\n   |\n9  |   let count = 0\n   |                ^ help: add `;` here\n10 |   for i in 0..n {\n   |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0\n  for i in 0..n {\n    if i % 11 == 0 || i % 13 == 0 {\n      count += 1\n    }\n  }\n  return count\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp_mh1r1bh.rs:9:16\n   |\n9  |   let count = 0\n   |                ^ help: add `;` here\n10 |   for i in 0..n {\n   |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0;\n  for i in 0..n {\n    if i % 3 == 0 && i % 5 == 0 {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpgvw_rqoc.rs:12:7\n   |\n9  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n12 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0\n  for i in 0..n {\n    if i % 11 == 0 || i % 13 == 0 {\n      count += 1\n    }\n  }\n  return count\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp_mh1r1bh.rs:9:16\n   |\n9  |   let count = 0\n   |                ^ help: add `;` here\n10 |   for i in 0..n {\n   |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0;\n  for i in 0..n {\n    if i % 11 == 0 || i % 13 == 0 {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmptxabo2al.rs:12:7\n   |\n9  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n12 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0;\n  for isize i = 0; i < n; i += 1 {\n    if i % 3 == 0 && i % 5 == 0 {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error: missing `in` in `for` loop\n  --> /tmp/tmpcfgff7t9.rs:10:12\n   |\n10 |   for isize i = 0; i < n; i += 1 {\n   |            ^ help: try adding `in` here\n\nerror: expected `{`, found `;`\n  --> /tmp/tmpcfgff7t9.rs:10:18\n   |\n10 |   for isize i = 0; i < n; i += 1 {\n   |                  ^ expected `{`\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0\n  for i in 0..n {\n    if i % 11 == 0 || i % 13 == 0 {\n      count += 1\n    }\n  }\n  return count\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp_mh1r1bh.rs:9:16\n   |\n9  |   let count = 0\n   |                ^ help: add `;` here\n10 |   for i in 0..n {\n   |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0\n  for i in 0..n {\n    if i % 11 == 0 || i % 13 == 0 {\n      count += 1\n    }\n  }\n  return count\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp_mh1r1bh.rs:9:16\n   |\n9  |   let count = 0\n   |                ^ help: add `;` here\n10 |   for i in 0..n {\n   |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0;\n  for i in 0..n {\n    if i % 3 == 0 && i % 5 == 0 {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpgvw_rqoc.rs:12:7\n   |\n9  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n12 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0\n  for i in 0..n {\n    if i % 11 == 0 || i % 13 == 0 {\n      count += 1\n    }\n  }\n  return count\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp_mh1r1bh.rs:9:16\n   |\n9  |   let count = 0\n   |                ^ help: add `;` here\n10 |   for i in 0..n {\n   |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0;\n  for i in 0..n {\n    if i % 11 == 0 || i % 13 == 0 {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmptxabo2al.rs:12:7\n   |\n9  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n12 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0;\n  let i = 0;\n  while i < n {\n    if i % 3 == 0 && i % 5 == 0 {\n      count += 1;\n    }\n    i += 1;\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpb5gk5m1c.rs:13:7\n   |\n9  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n13 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `i`\n  --> /tmp/tmpb5gk5m1c.rs:15:5\n   |\n10 |   let i = 0;\n   |       -\n   |       |\n   |       first assignment to `i`\n   |       help: consider making this binding mutable: `mut i`\n...\n15 |     i += 1;\n   |     ^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0\n  for i in 0..n {\n    if i % 11 == 0 || i % 13 == 0 {\n      count += 1\n    }\n  }\n  return count\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp_mh1r1bh.rs:9:16\n   |\n9  |   let count = 0\n   |                ^ help: add `;` here\n10 |   for i in 0..n {\n   |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0;\n  for i in 0..n {\n    if i % 11 == 0 || i % 13 == 0 {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmptxabo2al.rs:12:7\n   |\n9  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n12 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0;\n  let i = 0;\n  while i < n {\n    if i % 11 == 0 || i % 13 == 0 {\n      count += 1;\n    }\n    i += 1;\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpaurdk1ov.rs:13:7\n   |\n9  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n13 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `i`\n  --> /tmp/tmpaurdk1ov.rs:15:5\n   |\n10 |   let i = 0;\n   |       -\n   |       |\n   |       first assignment to `i`\n   |       help: consider making this binding mutable: `mut i`\n...\n15 |     i += 1;\n   |     ^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0\n  for i in 0..n {\n    if i % 11 == 0 || i % 13 == 0 {\n      count += 1\n    }\n  }\n  return count\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp_mh1r1bh.rs:9:16\n   |\n9  |   let count = 0\n   |                ^ help: add `;` here\n10 |   for i in 0..n {\n   |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0;\n  for i in 0..n {\n    if i % 11 == 0 || i % 13 == 0 {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmptxabo2al.rs:12:7\n   |\n9  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n12 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0\n  for i in 0..n {\n    if i % 11 == 0 || i % 13 == 0 {\n      count += 1\n    }\n  }\n  return count\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp_mh1r1bh.rs:9:16\n   |\n9  |   let count = 0\n   |                ^ help: add `;` here\n10 |   for i in 0..n {\n   |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0;\n  for i in 0..n {\n    if i % 3 == 0 && i % 5 == 0 {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpgvw_rqoc.rs:12:7\n   |\n9  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n12 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0\n  for i in 0..n {\n    if i % 3 == 0 && i % 5 == 0 {\n      count += 1\n    }\n  }\n  return count\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmppffidsyz.rs:9:16\n   |\n9  |   let count = 0\n   |                ^ help: add `;` here\n10 |   for i in 0..n {\n   |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0;\n  for i in 0..n {\n    if i % 15 == 0 {\n      count += 1;\n    }\n    if i % 5 == 0 {\n      count += 1;\n    }\n    if i % 3 == 0 {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpg4j0ndas.rs:12:7\n   |\n9  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n12 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpg4j0ndas.rs:15:7\n   |\n9  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n15 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpg4j0ndas.rs:18:7\n   |\n9  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n18 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0;\n  for isize i = 0; i < n; i += 1 {\n    if i % 11 == 0 || i % 13 == 0 {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error: missing `in` in `for` loop\n  --> /tmp/tmpxt4slc95.rs:10:12\n   |\n10 |   for isize i = 0; i < n; i += 1 {\n   |            ^ help: try adding `in` here\n\nerror: expected `{`, found `;`\n  --> /tmp/tmpxt4slc95.rs:10:18\n   |\n10 |   for isize i = 0; i < n; i += 1 {\n   |                  ^ expected `{`\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0\n  for i in 0..n {\n    if i % 11 == 0 || i % 13 == 0 {\n      count += 1\n    }\n  }\n  return count\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp_mh1r1bh.rs:9:16\n   |\n9  |   let count = 0\n   |                ^ help: add `;` here\n10 |   for i in 0..n {\n   |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0\n  for i in 0..n {\n    if i % 3 == 0 && i % 5 == 0 {\n      count += 1\n    }\n  }\n  return count\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmppffidsyz.rs:9:16\n   |\n9  |   let count = 0\n   |                ^ help: add `;` here\n10 |   for i in 0..n {\n   |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0\n  for i in 0..n {\n    if i % 11 == 0 || i % 13 == 0 {\n      count += 1\n    }\n  }\n  return count\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp_mh1r1bh.rs:9:16\n   |\n9  |   let count = 0\n   |                ^ help: add `;` here\n10 |   for i in 0..n {\n   |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0;\n  for i in 0..n {\n    if i % 11 == 0 || i % 13 == 0 {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmptxabo2al.rs:12:7\n   |\n9  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n12 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0\n  for i in 0..n {\n    if i % 11 == 0 || i % 13 == 0 {\n      count += 1\n    }\n  }\n  return count\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp_mh1r1bh.rs:9:16\n   |\n9  |   let count = 0\n   |                ^ help: add `;` here\n10 |   for i in 0..n {\n   |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0\n  for i in 0..n {\n    if i % 11 == 0 || i % 13 == 0 {\n      count += 1\n    }\n  }\n  return count\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp_mh1r1bh.rs:9:16\n   |\n9  |   let count = 0\n   |                ^ help: add `;` here\n10 |   for i in 0..n {\n   |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0;\n  for i in 0..n {\n    if (i % 11 == 0 || i % 13 == 0) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpjr3rb3qf.rs:11:8\n   |\n11 |     if (i % 11 == 0 || i % 13 == 0) {\n   |        ^                          ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n11 -     if (i % 11 == 0 || i % 13 == 0) {\n11 +     if i % 11 == 0 || i % 13 == 0 {\n   | \n\nerror[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpjr3rb3qf.rs:12:7\n   |\n9  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n12 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error; 1 warning emitted\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0;\n  for i in 0..n {\n    if (i % 3 == 0 && i % 5 == 0) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpah5lfsrf.rs:11:8\n   |\n11 |     if (i % 3 == 0 && i % 5 == 0) {\n   |        ^                        ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n11 -     if (i % 3 == 0 && i % 5 == 0) {\n11 +     if i % 3 == 0 && i % 5 == 0 {\n   | \n\nerror[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpah5lfsrf.rs:12:7\n   |\n9  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n12 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error; 1 warning emitted\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0;\n  for i in 0..n {\n    if i % 11 == 0 || i % 13 == 0 {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmptxabo2al.rs:12:7\n   |\n9  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n12 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0;\n  for i in 0..n {\n    if i % 15 == 0 {\n      count += 1;\n    }\n    if i % 5 == 0 {\n      count += 1;\n    }\n    if i % 3 == 0 {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpg4j0ndas.rs:12:7\n   |\n9  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n12 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpg4j0ndas.rs:15:7\n   |\n9  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n15 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpg4j0ndas.rs:18:7\n   |\n9  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n18 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0\n  for i in 0..n {\n    if i % 11 == 0 || i % 13 == 0 {\n      count += 1\n    }\n  }\n  return count\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp_mh1r1bh.rs:9:16\n   |\n9  |   let count = 0\n   |                ^ help: add `;` here\n10 |   for i in 0..n {\n   |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0;\n  for i in 0..n {\n    if i % 15 == 0 {\n      count += 1;\n    }\n    if i % 5 == 0 {\n      count += 1;\n    }\n    if i % 3 == 0 {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpg4j0ndas.rs:12:7\n   |\n9  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n12 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpg4j0ndas.rs:15:7\n   |\n9  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n15 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpg4j0ndas.rs:18:7\n   |\n9  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n18 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0\n  for i in 0..n {\n    if i % 3 == 0 && i % 5 == 0 {\n      count += 1\n    }\n  }\n  return count\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmppffidsyz.rs:9:16\n   |\n9  |   let count = 0\n   |                ^ help: add `;` here\n10 |   for i in 0..n {\n   |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0;\n  for i in 0..n {\n    if i % 11 == 0 || i % 13 == 0 {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmptxabo2al.rs:12:7\n   |\n9  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n12 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0;\n  for i in 0..n {\n    if i % 11 == 0 || i % 13 == 0 {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmptxabo2al.rs:12:7\n   |\n9  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n12 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0;\n  for i in 0..n {\n    if i % 15 == 0 {\n      count += 1;\n    }\n    if i % 5 == 0 {\n      count += 1;\n    }\n    if i % 3 == 0 {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpg4j0ndas.rs:12:7\n   |\n9  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n12 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpg4j0ndas.rs:15:7\n   |\n9  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n15 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpg4j0ndas.rs:18:7\n   |\n9  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n18 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0\n  for i in 0..n {\n    if (i % 11 == 0 || i % 13 == 0) {\n      count += 1\n    }\n  }\n  return count\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpx3zbn8yo.rs:9:16\n   |\n9  |   let count = 0\n   |                ^ help: add `;` here\n10 |   for i in 0..n {\n   |   --- unexpected token\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpx3zbn8yo.rs:11:8\n   |\n11 |     if (i % 11 == 0 || i % 13 == 0) {\n   |        ^                          ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n11 -     if (i % 11 == 0 || i % 13 == 0) {\n11 +     if i % 11 == 0 || i % 13 == 0 {\n   | \n\nerror: aborting due to previous error; 1 warning emitted\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0;\n  for i in 0..n {\n    if (i % 11 == 0 || i % 13 == 0) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpjr3rb3qf.rs:11:8\n   |\n11 |     if (i % 11 == 0 || i % 13 == 0) {\n   |        ^                          ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n11 -     if (i % 11 == 0 || i % 13 == 0) {\n11 +     if i % 11 == 0 || i % 13 == 0 {\n   | \n\nerror[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpjr3rb3qf.rs:12:7\n   |\n9  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n12 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error; 1 warning emitted\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0\n  for i in 0..n {\n    if i % 3 == 0 && i % 5 == 0 {\n      count += 1\n    }\n  }\n  return count\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmppffidsyz.rs:9:16\n   |\n9  |   let count = 0\n   |                ^ help: add `;` here\n10 |   for i in 0..n {\n   |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0;\n  for i in 0..n {\n    if i % 11 == 0 || i % 13 == 0 {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmptxabo2al.rs:12:7\n   |\n9  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n12 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0\n  for i in 0..n {\n    if i % 15 == 0 {\n      count += 1\n    }\n    if i % 5 == 0 {\n      count += 1\n    }\n    if i % 3 == 0 {\n      count += 1\n    }\n  }\n  return count\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp5lnjghf5.rs:9:16\n   |\n9  |   let count = 0\n   |                ^ help: add `;` here\n10 |   for i in 0..n {\n   |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0\n  for i in 0..n {\n    if i % 3 == 0 && i % 5 == 0 {\n      count += 1\n    }\n  }\n  return count\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmppffidsyz.rs:9:16\n   |\n9  |   let count = 0\n   |                ^ help: add `;` here\n10 |   for i in 0..n {\n   |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0;\n  for i in 0..n {\n    if (i % 11 == 0 || i % 13 == 0) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpjr3rb3qf.rs:11:8\n   |\n11 |     if (i % 11 == 0 || i % 13 == 0) {\n   |        ^                          ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n11 -     if (i % 11 == 0 || i % 13 == 0) {\n11 +     if i % 11 == 0 || i % 13 == 0 {\n   | \n\nerror[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpjr3rb3qf.rs:12:7\n   |\n9  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n12 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error; 1 warning emitted\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0;\n  for i in 0..n {\n    if i % 11 == 0 || i % 13 == 0 {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmptxabo2al.rs:12:7\n   |\n9  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n12 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0\n  for i in 0..n {\n    if i % 11 == 0 || i % 13 == 0 {\n      count += 1\n    }\n  }\n  return count\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp_mh1r1bh.rs:9:16\n   |\n9  |   let count = 0\n   |                ^ help: add `;` here\n10 |   for i in 0..n {\n   |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0\n  for i in 0..n {\n    if i % 15 == 0 {\n      count += 1\n    }\n    if i % 5 == 0 {\n      count += 1\n    }\n    if i % 3 == 0 {\n      count += 1\n    }\n  }\n  return count\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp5lnjghf5.rs:9:16\n   |\n9  |   let count = 0\n   |                ^ help: add `;` here\n10 |   for i in 0..n {\n   |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0\n  for i in 0..n {\n    if i % 11 == 0 || i % 13 == 0 {\n      count += 1\n    }\n  }\n  return count\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp_mh1r1bh.rs:9:16\n   |\n9  |   let count = 0\n   |                ^ help: add `;` here\n10 |   for i in 0..n {\n   |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0\n  for i in 0..n {\n    if i % 3 == 0 && i % 5 == 0 {\n      count += 1\n    }\n  }\n  return count\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmppffidsyz.rs:9:16\n   |\n9  |   let count = 0\n   |                ^ help: add `;` here\n10 |   for i in 0..n {\n   |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0;\n  for i in 0..n {\n    if i % 15 == 0 {\n      count += 1;\n    }\n    if i % 5 == 0 {\n      count += 1;\n    }\n    if i % 3 == 0 {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpg4j0ndas.rs:12:7\n   |\n9  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n12 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpg4j0ndas.rs:15:7\n   |\n9  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n15 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpg4j0ndas.rs:18:7\n   |\n9  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n18 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0\n  for i in 0..n {\n    if i % 11 == 0 || i % 13 == 0 {\n      count += 1\n    }\n  }\n  return count\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp_mh1r1bh.rs:9:16\n   |\n9  |   let count = 0\n   |                ^ help: add `;` here\n10 |   for i in 0..n {\n   |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0;\n  for i in 0..n {\n    if i % 11 == 0 || i % 13 == 0 {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmptxabo2al.rs:12:7\n   |\n9  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n12 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0;\n  for i in 0..n {\n    if i % 3 == 0 && i % 5 == 0 {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpgvw_rqoc.rs:12:7\n   |\n9  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n12 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0;\n  for isize i = 0; i < n; i += 1 {\n    if i % 11 == 0 || i % 13 == 0 {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error: missing `in` in `for` loop\n  --> /tmp/tmpxt4slc95.rs:10:12\n   |\n10 |   for isize i = 0; i < n; i += 1 {\n   |            ^ help: try adding `in` here\n\nerror: expected `{`, found `;`\n  --> /tmp/tmpxt4slc95.rs:10:18\n   |\n10 |   for isize i = 0; i < n; i += 1 {\n   |                  ^ expected `{`\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0\n  for i in 0..n {\n    if i % 11 == 0 || i % 13 == 0 {\n      count += 1\n    }\n  }\n  return count\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp_mh1r1bh.rs:9:16\n   |\n9  |   let count = 0\n   |                ^ help: add `;` here\n10 |   for i in 0..n {\n   |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0;\n  for i in 0..n {\n    if i % 15 == 0 {\n      count += 1;\n    }\n    if i % 5 == 0 {\n      count += 1;\n    }\n    if i % 3 == 0 {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpg4j0ndas.rs:12:7\n   |\n9  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n12 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpg4j0ndas.rs:15:7\n   |\n9  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n15 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpg4j0ndas.rs:18:7\n   |\n9  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n18 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0;\n  for i in 0..n {\n    if i % 11 == 0 || i % 13 == 0 {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmptxabo2al.rs:12:7\n   |\n9  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n12 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0;\n  for i in 0..n {\n    if i % 3 == 0 && i % 5 == 0 {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpgvw_rqoc.rs:12:7\n   |\n9  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n12 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0;\n  for i in 0..n {\n    if i % 15 == 0 {\n      count += 1;\n    }\n    if i % 5 == 0 {\n      count += 1;\n    }\n    if i % 3 == 0 {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpg4j0ndas.rs:12:7\n   |\n9  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n12 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpg4j0ndas.rs:15:7\n   |\n9  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n15 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpg4j0ndas.rs:18:7\n   |\n9  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n18 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0;\n  for i in 0..n {\n    if i % 11 == 0 || i % 13 == 0 {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmptxabo2al.rs:12:7\n   |\n9  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n12 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0\n  for i in 0..n {\n    if i % 11 == 0 || i % 13 == 0 {\n      count += 1\n    }\n  }\n  return count\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp_mh1r1bh.rs:9:16\n   |\n9  |   let count = 0\n   |                ^ help: add `;` here\n10 |   for i in 0..n {\n   |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0\n  for i in 0..n {\n    if i % 11 == 0 || i % 13 == 0 {\n      count += 1\n    }\n  }\n  return count\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp_mh1r1bh.rs:9:16\n   |\n9  |   let count = 0\n   |                ^ help: add `;` here\n10 |   for i in 0..n {\n   |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0;\n  let i = 0;\n  while i < n {\n    if i % 11 == 0 || i % 13 == 0 {\n      count += 1;\n    }\n    i += 1;\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpaurdk1ov.rs:13:7\n   |\n9  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n13 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `i`\n  --> /tmp/tmpaurdk1ov.rs:15:5\n   |\n10 |   let i = 0;\n   |       -\n   |       |\n   |       first assignment to `i`\n   |       help: consider making this binding mutable: `mut i`\n...\n15 |     i += 1;\n   |     ^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0;\n  let i = 0;\n  while i < n {\n    if i % 3 == 0 && i % 5 == 0 {\n      count += 1;\n    }\n    i += 1;\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpb5gk5m1c.rs:13:7\n   |\n9  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n13 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `i`\n  --> /tmp/tmpb5gk5m1c.rs:15:5\n   |\n10 |   let i = 0;\n   |       -\n   |       |\n   |       first assignment to `i`\n   |       help: consider making this binding mutable: `mut i`\n...\n15 |     i += 1;\n   |     ^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0;\n  for i in 0..n {\n    if i % 11 == 0 || i % 13 == 0 {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmptxabo2al.rs:12:7\n   |\n9  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n12 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0;\n  for i in 0..n {\n    if i % 11 == 0 || i % 13 == 0 {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmptxabo2al.rs:12:7\n   |\n9  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n12 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0\n  for i in 0..n {\n    if i % 3 == 0 {\n      count += 1\n    }\n    if i % 5 == 0 {\n      count += 1\n    }\n    if i % 7 == 0 {\n      count += 1\n    }\n  }\n  return count\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp0hrk635k.rs:9:16\n   |\n9  |   let count = 0\n   |                ^ help: add `;` here\n10 |   for i in 0..n {\n   |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0\n  for i in 0..n {\n    if i % 11 == 0 || i % 13 == 0 {\n      count += 1\n    }\n  }\n  return count\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp_mh1r1bh.rs:9:16\n   |\n9  |   let count = 0\n   |                ^ help: add `;` here\n10 |   for i in 0..n {\n   |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0;\n  for i in 1..n {\n    if i % 11 == 0 || i % 13 == 0 {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpqtq70_96.rs:12:7\n   |\n9  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n12 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0;\n  for i in 0..n {\n    if i % 11 == 0 || i % 13 == 0 {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmptxabo2al.rs:12:7\n   |\n9  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n12 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0;\n  for i in 0..n {\n    if i % 11 == 0 || i % 13 == 0 {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmptxabo2al.rs:12:7\n   |\n9  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n12 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0\n  for i in 0..n {\n    if i % 11 == 0 || i % 13 == 0 {\n      count += 1\n    }\n  }\n  return count\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp_mh1r1bh.rs:9:16\n   |\n9  |   let count = 0\n   |                ^ help: add `;` here\n10 |   for i in 0..n {\n   |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0;\n  for i in 0..n {\n    if i % 11 == 0 || i % 13 == 0 {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmptxabo2al.rs:12:7\n   |\n9  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n12 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0;\n  for i in 0..n {\n    if i % 11 == 0 || i % 13 == 0 {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmptxabo2al.rs:12:7\n   |\n9  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n12 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0;\n  for i in 0..n {\n    if i % 11 == 0 || i % 13 == 0 {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmptxabo2al.rs:12:7\n   |\n9  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n12 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0\n  for i in 0..n {\n    if i % 11 == 0 || i % 13 == 0 {\n      count += 1\n    }\n  }\n  return count\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp_mh1r1bh.rs:9:16\n   |\n9  |   let count = 0\n   |                ^ help: add `;` here\n10 |   for i in 0..n {\n   |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0;\n  for i in 0..n {\n    if i % 3 == 0 && i % 5 == 0 {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpgvw_rqoc.rs:12:7\n   |\n9  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n12 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0\n  for i in 0..n {\n    if i % 15 == 0 {\n      count += 1\n    }\n    if i % 5 == 0 {\n      count += 1\n    }\n    if i % 3 == 0 {\n      count += 1\n    }\n  }\n  return count\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp5lnjghf5.rs:9:16\n   |\n9  |   let count = 0\n   |                ^ help: add `;` here\n10 |   for i in 0..n {\n   |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0\n  for i in 0..n {\n    if i % 11 == 0 || i % 13 == 0 {\n      count += 1\n    }\n  }\n  return count\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp_mh1r1bh.rs:9:16\n   |\n9  |   let count = 0\n   |                ^ help: add `;` here\n10 |   for i in 0..n {\n   |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0\n  for i in 0..n {\n    if i % 11 == 0 || i % 13 == 0 {\n      count += 1\n    }\n  }\n  return count\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp_mh1r1bh.rs:9:16\n   |\n9  |   let count = 0\n   |                ^ help: add `;` here\n10 |   for i in 0..n {\n   |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0\n  for i in 0..n {\n    if i % 3 == 0 && i % 5 == 0 {\n      count += 1\n    }\n  }\n  return count\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmppffidsyz.rs:9:16\n   |\n9  |   let count = 0\n   |                ^ help: add `;` here\n10 |   for i in 0..n {\n   |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0\n  for i in 0..n {\n    if i % 15 == 0 {\n      count += 1\n    }\n    if i % 5 == 0 {\n      count += 1\n    }\n    if i % 3 == 0 {\n      count += 1\n    }\n  }\n  return count\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp5lnjghf5.rs:9:16\n   |\n9  |   let count = 0\n   |                ^ help: add `;` here\n10 |   for i in 0..n {\n   |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0;\n  for i in 1..n {\n    if i % 11 == 0 || i % 13 == 0 {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpqtq70_96.rs:12:7\n   |\n9  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n12 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0\n  for i in 0..n {\n    if i % 11 == 0 || i % 13 == 0 {\n      count += 1\n    }\n  }\n  return count\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp_mh1r1bh.rs:9:16\n   |\n9  |   let count = 0\n   |                ^ help: add `;` here\n10 |   for i in 0..n {\n   |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0\n  for i in 0..n {\n    if i % 11 == 0 || i % 13 == 0 {\n      count += 1\n    }\n  }\n  return count\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp_mh1r1bh.rs:9:16\n   |\n9  |   let count = 0\n   |                ^ help: add `;` here\n10 |   for i in 0..n {\n   |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0;\n  for i in 0..n {\n    if i % 3 == 0 && i % 5 == 0 {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpgvw_rqoc.rs:12:7\n   |\n9  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n12 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0\n  for i in 0..n {\n    if i % 3 == 0 && i % 5 == 0 {\n      count += 1\n    }\n  }\n  return count\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmppffidsyz.rs:9:16\n   |\n9  |   let count = 0\n   |                ^ help: add `;` here\n10 |   for i in 0..n {\n   |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0\n  for i in 0..n {\n    if i % 11 == 0 || i % 13 == 0 {\n      count += 1\n    }\n  }\n  return count\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp_mh1r1bh.rs:9:16\n   |\n9  |   let count = 0\n   |                ^ help: add `;` here\n10 |   for i in 0..n {\n   |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0;\n  for i in 0..n {\n    if i % 3 == 0 && i % 5 == 0 {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpgvw_rqoc.rs:12:7\n   |\n9  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n12 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0\n  for i in 0..n {\n    if i % 11 == 0 || i % 13 == 0 {\n      count += 1\n    }\n  }\n  return count\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp_mh1r1bh.rs:9:16\n   |\n9  |   let count = 0\n   |                ^ help: add `;` here\n10 |   for i in 0..n {\n   |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0;\n  for i in 0..n {\n    if (i % 11 == 0 || i % 13 == 0) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpjr3rb3qf.rs:11:8\n   |\n11 |     if (i % 11 == 0 || i % 13 == 0) {\n   |        ^                          ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n11 -     if (i % 11 == 0 || i % 13 == 0) {\n11 +     if i % 11 == 0 || i % 13 == 0 {\n   | \n\nerror[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpjr3rb3qf.rs:12:7\n   |\n9  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n12 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error; 1 warning emitted\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0;\n  let i = 0;\n  while i < n {\n    if i % 3 == 0 && i % 5 == 0 {\n      count += 1;\n    }\n    i += 1;\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpb5gk5m1c.rs:13:7\n   |\n9  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n13 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `i`\n  --> /tmp/tmpb5gk5m1c.rs:15:5\n   |\n10 |   let i = 0;\n   |       -\n   |       |\n   |       first assignment to `i`\n   |       help: consider making this binding mutable: `mut i`\n...\n15 |     i += 1;\n   |     ^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0;\n  for i in 0..n {\n    if i % 3 == 0 && i % 5 == 0 {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpgvw_rqoc.rs:12:7\n   |\n9  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n12 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0;\n  let i = 0;\n  while i < n {\n    if i % 11 == 0 || i % 13 == 0 {\n      count += 1;\n    }\n    i += 1;\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpaurdk1ov.rs:13:7\n   |\n9  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n13 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `i`\n  --> /tmp/tmpaurdk1ov.rs:15:5\n   |\n10 |   let i = 0;\n   |       -\n   |       |\n   |       first assignment to `i`\n   |       help: consider making this binding mutable: `mut i`\n...\n15 |     i += 1;\n   |     ^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0;\n  for i in 0..n {\n    if i % 11 == 0 || i % 13 == 0 {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmptxabo2al.rs:12:7\n   |\n9  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n12 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0\n  for i in 0..n {\n    if (i % 11 == 0 || i % 13 == 0) {\n      count += 1\n    }\n  }\n  return count\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpx3zbn8yo.rs:9:16\n   |\n9  |   let count = 0\n   |                ^ help: add `;` here\n10 |   for i in 0..n {\n   |   --- unexpected token\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpx3zbn8yo.rs:11:8\n   |\n11 |     if (i % 11 == 0 || i % 13 == 0) {\n   |        ^                          ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n11 -     if (i % 11 == 0 || i % 13 == 0) {\n11 +     if i % 11 == 0 || i % 13 == 0 {\n   | \n\nerror: aborting due to previous error; 1 warning emitted\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0;\n  for i in 0..n {\n    if i % 11 == 0 || i % 13 == 0 {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmptxabo2al.rs:12:7\n   |\n9  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n12 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0\n  for i in 0..n {\n    if i % 15 == 0 {\n      count += 1\n    }\n    if i % 5 == 0 {\n      count += 1\n    }\n    if i % 3 == 0 {\n      count += 1\n    }\n  }\n  return count\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp5lnjghf5.rs:9:16\n   |\n9  |   let count = 0\n   |                ^ help: add `;` here\n10 |   for i in 0..n {\n   |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0\n  for i in 0..n {\n    if i % 11 == 0 || i % 13 == 0 {\n      count += 1\n    }\n  }\n  return count\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp_mh1r1bh.rs:9:16\n   |\n9  |   let count = 0\n   |                ^ help: add `;` here\n10 |   for i in 0..n {\n   |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0\n  for i in 0..n {\n    if (i % 11 == 0 || i % 13 == 0) {\n      count += 1\n    }\n  }\n  return count\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpx3zbn8yo.rs:9:16\n   |\n9  |   let count = 0\n   |                ^ help: add `;` here\n10 |   for i in 0..n {\n   |   --- unexpected token\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpx3zbn8yo.rs:11:8\n   |\n11 |     if (i % 11 == 0 || i % 13 == 0) {\n   |        ^                          ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n11 -     if (i % 11 == 0 || i % 13 == 0) {\n11 +     if i % 11 == 0 || i % 13 == 0 {\n   | \n\nerror: aborting due to previous error; 1 warning emitted\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0;\n  for i in 0..n {\n    if (i % 11 == 0 || i % 13 == 0) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpjr3rb3qf.rs:11:8\n   |\n11 |     if (i % 11 == 0 || i % 13 == 0) {\n   |        ^                          ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n11 -     if (i % 11 == 0 || i % 13 == 0) {\n11 +     if i % 11 == 0 || i % 13 == 0 {\n   | \n\nerror[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpjr3rb3qf.rs:12:7\n   |\n9  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n12 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error; 1 warning emitted\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0;\n  let i = 0;\n  while i < n {\n    if (i % 11 == 0 || i % 13 == 0) {\n      count += 1;\n    }\n    i += 1;\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `if` condition\n  --> /tmp/tmptwnhblwu.rs:12:8\n   |\n12 |     if (i % 11 == 0 || i % 13 == 0) {\n   |        ^                          ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n12 -     if (i % 11 == 0 || i % 13 == 0) {\n12 +     if i % 11 == 0 || i % 13 == 0 {\n   | \n\nerror[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmptwnhblwu.rs:13:7\n   |\n9  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n13 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `i`\n  --> /tmp/tmptwnhblwu.rs:15:5\n   |\n10 |   let i = 0;\n   |       -\n   |       |\n   |       first assignment to `i`\n   |       help: consider making this binding mutable: `mut i`\n...\n15 |     i += 1;\n   |     ^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors; 1 warning emitted\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0\n  for i in 0..n {\n    if i % 11 == 0 || i % 13 == 0 {\n      count += 1\n    }\n  }\n  return count\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp_mh1r1bh.rs:9:16\n   |\n9  |   let count = 0\n   |                ^ help: add `;` here\n10 |   for i in 0..n {\n   |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0;\n  let i = 1;\n  while i <= n {\n    if i % 11 == 0 || i % 13 == 0 {\n      count += 1;\n    }\n    i += 1;\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpfigc58bc.rs:13:7\n   |\n9  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n13 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `i`\n  --> /tmp/tmpfigc58bc.rs:15:5\n   |\n10 |   let i = 1;\n   |       -\n   |       |\n   |       first assignment to `i`\n   |       help: consider making this binding mutable: `mut i`\n...\n15 |     i += 1;\n   |     ^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0\n  for i in 0..n {\n    if i % 11 == 0 || i % 13 == 0 {\n      count += 1\n    }\n  }\n  return count\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp_mh1r1bh.rs:9:16\n   |\n9  |   let count = 0\n   |                ^ help: add `;` here\n10 |   for i in 0..n {\n   |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0;\n  for i in 0..n {\n    if i % 3 == 0 && i % 5 == 0 {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpgvw_rqoc.rs:12:7\n   |\n9  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n12 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0\n  for i in 0..n {\n    if i % 3 == 0 && i % 5 == 0 {\n      count += 1\n    }\n  }\n  return count\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmppffidsyz.rs:9:16\n   |\n9  |   let count = 0\n   |                ^ help: add `;` here\n10 |   for i in 0..n {\n   |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0\n  for i in 0..n {\n    if i % 3 == 0 && i % 5 == 0 {\n      count += 1\n    }\n  }\n  return count\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmppffidsyz.rs:9:16\n   |\n9  |   let count = 0\n   |                ^ help: add `;` here\n10 |   for i in 0..n {\n   |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0;\n  for i in 0..n {\n    if i % 3 == 0 && i % 5 == 0 {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpgvw_rqoc.rs:12:7\n   |\n9  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n12 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0;\n  let i = 0;\n  while i < n {\n    if i % 3 == 0 && i % 5 == 0 {\n      count += 1;\n    }\n    i += 1;\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpb5gk5m1c.rs:13:7\n   |\n9  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n13 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `i`\n  --> /tmp/tmpb5gk5m1c.rs:15:5\n   |\n10 |   let i = 0;\n   |       -\n   |       |\n   |       first assignment to `i`\n   |       help: consider making this binding mutable: `mut i`\n...\n15 |     i += 1;\n   |     ^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0;\n  for i in 0..n {\n    if i % 11 == 0 || i % 13 == 0 {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmptxabo2al.rs:12:7\n   |\n9  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n12 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0;\n  for i in 0..n {\n    if i % 11 == 0 || i % 13 == 0 {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmptxabo2al.rs:12:7\n   |\n9  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n12 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0;\n  for i in 0..n {\n    if i % 11 == 0 || i % 13 == 0 {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmptxabo2al.rs:12:7\n   |\n9  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n12 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0;\n  for i in 0..n {\n    if (i % 3 == 0) {\n      count += 1;\n    }\n    if (i % 5 == 0) {\n      count += 1;\n    }\n    if (i % 7 == 0) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp5t0e2t0b.rs:11:8\n   |\n11 |     if (i % 3 == 0) {\n   |        ^          ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n11 -     if (i % 3 == 0) {\n11 +     if i % 3 == 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp5t0e2t0b.rs:14:8\n   |\n14 |     if (i % 5 == 0) {\n   |        ^          ^\n   |\nhelp: remove these parentheses\n   |\n14 -     if (i % 5 == 0) {\n14 +     if i % 5 == 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp5t0e2t0b.rs:17:8\n   |\n17 |     if (i % 7 == 0) {\n   |        ^          ^\n   |\nhelp: remove these parentheses\n   |\n17 -     if (i % 7 == 0) {\n17 +     if i % 7 == 0 {\n   | \n\nerror[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmp5t0e2t0b.rs:12:7\n   |\n9  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n12 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmp5t0e2t0b.rs:15:7\n   |\n9  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n15 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmp5t0e2t0b.rs:18:7\n   |\n9  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n18 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 3 previous errors; 3 warnings emitted\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0\n  for i in 0..n {\n    if i % 11 == 0 || i % 13 == 0 {\n      count += 1\n    }\n  }\n  return count\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp_mh1r1bh.rs:9:16\n   |\n9  |   let count = 0\n   |                ^ help: add `;` here\n10 |   for i in 0..n {\n   |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0;\n  for isize i = 0; i < n; i += 1 {\n    if i % 3 == 0 && i % 5 == 0 {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error: missing `in` in `for` loop\n  --> /tmp/tmpcfgff7t9.rs:10:12\n   |\n10 |   for isize i = 0; i < n; i += 1 {\n   |            ^ help: try adding `in` here\n\nerror: expected `{`, found `;`\n  --> /tmp/tmpcfgff7t9.rs:10:18\n   |\n10 |   for isize i = 0; i < n; i += 1 {\n   |                  ^ expected `{`\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0\n  for i in 0..n {\n    if i % 3 == 0 && i % 5 == 0 {\n      count += 1\n    }\n  }\n  return count\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmppffidsyz.rs:9:16\n   |\n9  |   let count = 0\n   |                ^ help: add `;` here\n10 |   for i in 0..n {\n   |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0;\n  for i in 0..n {\n    if i % 11 == 0 || i % 13 == 0 {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmptxabo2al.rs:12:7\n   |\n9  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n12 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0;\n  for i in 0..n {\n    if (i % 3 == 0 && i % 5 == 0) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpah5lfsrf.rs:11:8\n   |\n11 |     if (i % 3 == 0 && i % 5 == 0) {\n   |        ^                        ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n11 -     if (i % 3 == 0 && i % 5 == 0) {\n11 +     if i % 3 == 0 && i % 5 == 0 {\n   | \n\nerror[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpah5lfsrf.rs:12:7\n   |\n9  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n12 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error; 1 warning emitted\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0;\n  for i in 0..n {\n    if i % 3 == 0 && i % 5 == 0 {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpgvw_rqoc.rs:12:7\n   |\n9  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n12 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0;\n  let i = 0;\n  while i < n {\n    if (i % 11 == 0 || i % 13 == 0) {\n      count += 1;\n    }\n    i += 1;\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `if` condition\n  --> /tmp/tmptwnhblwu.rs:12:8\n   |\n12 |     if (i % 11 == 0 || i % 13 == 0) {\n   |        ^                          ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n12 -     if (i % 11 == 0 || i % 13 == 0) {\n12 +     if i % 11 == 0 || i % 13 == 0 {\n   | \n\nerror[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmptwnhblwu.rs:13:7\n   |\n9  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n13 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `i`\n  --> /tmp/tmptwnhblwu.rs:15:5\n   |\n10 |   let i = 0;\n   |       -\n   |       |\n   |       first assignment to `i`\n   |       help: consider making this binding mutable: `mut i`\n...\n15 |     i += 1;\n   |     ^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors; 1 warning emitted\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0\n  for i in 0..n {\n    if i % 11 == 0 || i % 13 == 0 {\n      count += 1\n    }\n  }\n  return count\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp_mh1r1bh.rs:9:16\n   |\n9  |   let count = 0\n   |                ^ help: add `;` here\n10 |   for i in 0..n {\n   |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0\n  for i in 0..n {\n    if i % 15 == 0 {\n      count += 1\n    }\n    if i % 5 == 0 {\n      count += 1\n    }\n    if i % 3 == 0 {\n      count += 1\n    }\n  }\n  return count\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp5lnjghf5.rs:9:16\n   |\n9  |   let count = 0\n   |                ^ help: add `;` here\n10 |   for i in 0..n {\n   |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0\n  for i in 0..n {\n    if i % 3 == 0 {\n      count += 1\n    }\n    if i % 5 == 0 {\n      count += 1\n    }\n    if i % 7 == 0 {\n      count += 1\n    }\n  }\n  return count\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp0hrk635k.rs:9:16\n   |\n9  |   let count = 0\n   |                ^ help: add `;` here\n10 |   for i in 0..n {\n   |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0;\n  for i in 0..n {\n    if i % 3 == 0 && i % 5 == 0 {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpgvw_rqoc.rs:12:7\n   |\n9  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n12 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0;\n  for isize i = 0; i < n; i += 1 {\n    if (i % 11 == 0 || i % 13 == 0) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error: missing `in` in `for` loop\n  --> /tmp/tmpxg0odc0s.rs:10:12\n   |\n10 |   for isize i = 0; i < n; i += 1 {\n   |            ^ help: try adding `in` here\n\nerror: expected `{`, found `;`\n  --> /tmp/tmpxg0odc0s.rs:10:18\n   |\n10 |   for isize i = 0; i < n; i += 1 {\n   |                  ^ expected `{`\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0;\n  for i in 0..n {\n    if i % 3 == 0 && i % 5 == 0 {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpgvw_rqoc.rs:12:7\n   |\n9  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n12 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0;\n  for i in 0..n {\n    if i % 11 == 0 || i % 13 == 0 {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmptxabo2al.rs:12:7\n   |\n9  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n12 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0;\n  for i in 0..n {\n    if i % 11 == 0 || i % 13 == 0 {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmptxabo2al.rs:12:7\n   |\n9  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n12 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0\n  for i in 0..n {\n    if i % 11 == 0 || i % 13 == 0 {\n      count += 1\n    }\n  }\n  return count\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp_mh1r1bh.rs:9:16\n   |\n9  |   let count = 0\n   |                ^ help: add `;` here\n10 |   for i in 0..n {\n   |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0\n  for i in 0..n {\n    if i % 3 == 0 && i % 5 == 0 {\n      count += 1\n    }\n  }\n  return count\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmppffidsyz.rs:9:16\n   |\n9  |   let count = 0\n   |                ^ help: add `;` here\n10 |   for i in 0..n {\n   |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0;\n  for i in 0..n {\n    if i % 11 == 0 || i % 13 == 0 {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmptxabo2al.rs:12:7\n   |\n9  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n12 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0\n  for i in 0..n {\n    if i % 3 == 0 && i % 5 == 0 {\n      count += 1\n    }\n  }\n  return count\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmppffidsyz.rs:9:16\n   |\n9  |   let count = 0\n   |                ^ help: add `;` here\n10 |   for i in 0..n {\n   |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0\n  for i in 0..n {\n    if i % 11 == 0 || i % 13 == 0 {\n      count += 1\n    }\n  }\n  return count\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp_mh1r1bh.rs:9:16\n   |\n9  |   let count = 0\n   |                ^ help: add `;` here\n10 |   for i in 0..n {\n   |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0;\n  for i in 0..n {\n    if i % 11 == 0 || i % 13 == 0 {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmptxabo2al.rs:12:7\n   |\n9  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n12 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0\n  for i in 0..n {\n    if i % 3 == 0 && i % 5 == 0 {\n      count += 1\n    }\n  }\n  return count\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmppffidsyz.rs:9:16\n   |\n9  |   let count = 0\n   |                ^ help: add `;` here\n10 |   for i in 0..n {\n   |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0;\n  for i in 0..n {\n    if i % 11 == 0 || i % 13 == 0 {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmptxabo2al.rs:12:7\n   |\n9  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n12 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0;\n  for i in 0..n {\n    if i % 3 == 0 && i % 5 == 0 {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpgvw_rqoc.rs:12:7\n   |\n9  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n12 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0;\n  for i in 0..n {\n    if i % 3 == 0 && i % 5 == 0 {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpgvw_rqoc.rs:12:7\n   |\n9  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n12 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0;\n  for i in 0..n {\n    if i % 3 == 0 && i % 5 == 0 {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpgvw_rqoc.rs:12:7\n   |\n9  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n12 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0;\n  for i in 0..n {\n    if (i % 11 == 0 || i % 13 == 0) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpjr3rb3qf.rs:11:8\n   |\n11 |     if (i % 11 == 0 || i % 13 == 0) {\n   |        ^                          ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n11 -     if (i % 11 == 0 || i % 13 == 0) {\n11 +     if i % 11 == 0 || i % 13 == 0 {\n   | \n\nerror[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpjr3rb3qf.rs:12:7\n   |\n9  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n12 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error; 1 warning emitted\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0\n  for i in 0..n {\n    if i % 11 == 0 || i % 13 == 0 {\n      count += 1\n    }\n  }\n  return count\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp_mh1r1bh.rs:9:16\n   |\n9  |   let count = 0\n   |                ^ help: add `;` here\n10 |   for i in 0..n {\n   |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0;\n  for i in 0..n {\n    if i % 3 == 0 && i % 5 == 0 {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpgvw_rqoc.rs:12:7\n   |\n9  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n12 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0\n  for i in 0..n {\n    if i % 11 == 0 || i % 13 == 0 {\n      count += 1\n    }\n  }\n  return count\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp_mh1r1bh.rs:9:16\n   |\n9  |   let count = 0\n   |                ^ help: add `;` here\n10 |   for i in 0..n {\n   |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0\n  for i in 0..n {\n    if i % 11 == 0 || i % 13 == 0 {\n      count += 1\n    }\n  }\n  return count\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp_mh1r1bh.rs:9:16\n   |\n9  |   let count = 0\n   |                ^ help: add `;` here\n10 |   for i in 0..n {\n   |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0\n  for i in 0..n {\n    if i % 11 == 0 || i % 13 == 0 {\n      count += 1\n    }\n  }\n  return count\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp_mh1r1bh.rs:9:16\n   |\n9  |   let count = 0\n   |                ^ help: add `;` here\n10 |   for i in 0..n {\n   |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0;\n  for i in 0..n {\n    if i % 11 == 0 || i % 13 == 0 {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmptxabo2al.rs:12:7\n   |\n9  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n12 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0\n  for i in 0..n {\n    if i % 11 == 0 || i % 13 == 0 {\n      count += 1\n    }\n  }\n  return count\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp_mh1r1bh.rs:9:16\n   |\n9  |   let count = 0\n   |                ^ help: add `;` here\n10 |   for i in 0..n {\n   |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0\n  for i in 0..n {\n    if (i % 11 == 0 || i % 13 == 0) {\n      count += 1\n    }\n  }\n  return count\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpx3zbn8yo.rs:9:16\n   |\n9  |   let count = 0\n   |                ^ help: add `;` here\n10 |   for i in 0..n {\n   |   --- unexpected token\n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmpx3zbn8yo.rs:11:8\n   |\n11 |     if (i % 11 == 0 || i % 13 == 0) {\n   |        ^                          ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n11 -     if (i % 11 == 0 || i % 13 == 0) {\n11 +     if i % 11 == 0 || i % 13 == 0 {\n   | \n\nerror: aborting due to previous error; 1 warning emitted\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0;\n  for i in 0..n {\n    if i % 3 == 0 && i % 5 == 0 {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpgvw_rqoc.rs:12:7\n   |\n9  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n12 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0;\n  for i in 1..n {\n    if i % 11 == 0 || i % 13 == 0 {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpqtq70_96.rs:12:7\n   |\n9  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n12 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0\n  for i in 0..n {\n    if i % 11 == 0 || i % 13 == 0 {\n      count += 1\n    }\n  }\n  return count\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp_mh1r1bh.rs:9:16\n   |\n9  |   let count = 0\n   |                ^ help: add `;` here\n10 |   for i in 0..n {\n   |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0;\n  for i in 0..n {\n    if i % 3 == 0 && i % 5 == 0 {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpgvw_rqoc.rs:12:7\n   |\n9  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n12 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0\n  for i in 0..n {\n    if i % 3 == 0 && i % 5 == 0 {\n      count += 1\n    }\n  }\n  return count\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmppffidsyz.rs:9:16\n   |\n9  |   let count = 0\n   |                ^ help: add `;` here\n10 |   for i in 0..n {\n   |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0\n  for i in 0..n {\n    if i % 3 == 0 && i % 5 == 0 {\n      count += 1\n    }\n  }\n  return count\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmppffidsyz.rs:9:16\n   |\n9  |   let count = 0\n   |                ^ help: add `;` here\n10 |   for i in 0..n {\n   |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0;\n  for i in 0..n {\n    if i % 11 == 0 || i % 13 == 0 {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmptxabo2al.rs:12:7\n   |\n9  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n12 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0\n  for i in 0..n {\n    if i % 3 == 0 && i % 5 == 0 {\n      count += 1\n    }\n  }\n  return count\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmppffidsyz.rs:9:16\n   |\n9  |   let count = 0\n   |                ^ help: add `;` here\n10 |   for i in 0..n {\n   |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0;\n  for i in 0..n {\n    if i % 11 == 0 || i % 13 == 0 {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmptxabo2al.rs:12:7\n   |\n9  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n12 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0;\n  for i in 0..n {\n    if i % 15 == 0 {\n      count += 1;\n    }\n    if i % 5 == 0 {\n      count += 1;\n    }\n    if i % 3 == 0 {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpg4j0ndas.rs:12:7\n   |\n9  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n12 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpg4j0ndas.rs:15:7\n   |\n9  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n15 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpg4j0ndas.rs:18:7\n   |\n9  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n18 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0\n  for i in 0..n {\n    if i % 11 == 0 || i % 13 == 0 {\n      count += 1\n    }\n  }\n  return count\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp_mh1r1bh.rs:9:16\n   |\n9  |   let count = 0\n   |                ^ help: add `;` here\n10 |   for i in 0..n {\n   |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0;\n  let i = 0;\n  while i < n {\n    if i % 3 == 0 && i % 5 == 0 {\n      count += 1;\n    }\n    i += 1;\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpb5gk5m1c.rs:13:7\n   |\n9  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n13 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `i`\n  --> /tmp/tmpb5gk5m1c.rs:15:5\n   |\n10 |   let i = 0;\n   |       -\n   |       |\n   |       first assignment to `i`\n   |       help: consider making this binding mutable: `mut i`\n...\n15 |     i += 1;\n   |     ^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0\n  for i in 0..n {\n    if i % 11 == 0 || i % 13 == 0 {\n      count += 1\n    }\n  }\n  return count\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp_mh1r1bh.rs:9:16\n   |\n9  |   let count = 0\n   |                ^ help: add `;` here\n10 |   for i in 0..n {\n   |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0;\n  for i in 0..n {\n    if (i % 3 == 0) {\n      count += 1;\n    }\n    if (i % 5 == 0) {\n      count += 1;\n    }\n    if (i % 7 == 0) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "warning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp5t0e2t0b.rs:11:8\n   |\n11 |     if (i % 3 == 0) {\n   |        ^          ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n11 -     if (i % 3 == 0) {\n11 +     if i % 3 == 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp5t0e2t0b.rs:14:8\n   |\n14 |     if (i % 5 == 0) {\n   |        ^          ^\n   |\nhelp: remove these parentheses\n   |\n14 -     if (i % 5 == 0) {\n14 +     if i % 5 == 0 {\n   | \n\nwarning: unnecessary parentheses around `if` condition\n  --> /tmp/tmp5t0e2t0b.rs:17:8\n   |\n17 |     if (i % 7 == 0) {\n   |        ^          ^\n   |\nhelp: remove these parentheses\n   |\n17 -     if (i % 7 == 0) {\n17 +     if i % 7 == 0 {\n   | \n\nerror[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmp5t0e2t0b.rs:12:7\n   |\n9  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n12 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmp5t0e2t0b.rs:15:7\n   |\n9  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n15 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmp5t0e2t0b.rs:18:7\n   |\n9  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n18 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 3 previous errors; 3 warnings emitted\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0\n  let i = 0\n  while i < n {\n    if i % 3 == 0 && i % 5 == 0 {\n      count += 1\n    }\n    i += 1\n  }\n  return count\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp4eznxzff.rs:9:16\n   |\n9  |   let count = 0\n   |                ^ help: add `;` here\n10 |   let i = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `while`\n  --> /tmp/tmp4eznxzff.rs:10:12\n   |\n10 |   let i = 0\n   |            ^ help: add `;` here\n11 |   while i < n {\n   |   ----- unexpected token\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0;\n  for i in 0..n {\n    if i % 3 == 0 && i % 5 == 0 {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpgvw_rqoc.rs:12:7\n   |\n9  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n12 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0;\n  for i in 0..n {\n    if i % 11 == 0 || i % 13 == 0 {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmptxabo2al.rs:12:7\n   |\n9  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n12 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0;\n  for i in 0..n {\n    if i % 11 == 0 || i % 13 == 0 {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmptxabo2al.rs:12:7\n   |\n9  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n12 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0;\n  let i = 0;\n  while i < n {\n    if i % 3 == 0 {\n      count += 1;\n    }\n    if i % 5 == 0 {\n      count += 1;\n    }\n    i += 1;\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpta9riajj.rs:13:7\n   |\n9  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n13 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpta9riajj.rs:16:7\n   |\n9  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n16 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `i`\n  --> /tmp/tmpta9riajj.rs:18:5\n   |\n10 |   let i = 0;\n   |       -\n   |       |\n   |       first assignment to `i`\n   |       help: consider making this binding mutable: `mut i`\n...\n18 |     i += 1;\n   |     ^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0\n  for i in 0..n {\n    if i % 3 == 0 && i % 5 == 0 {\n      count += 1\n    }\n  }\n  return count\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmppffidsyz.rs:9:16\n   |\n9  |   let count = 0\n   |                ^ help: add `;` here\n10 |   for i in 0..n {\n   |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0;\n  for i in 0..n {\n    if i % 3 == 0 && i % 5 == 0 {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpgvw_rqoc.rs:12:7\n   |\n9  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n12 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0\n  for i in 0..n {\n    if i % 11 == 0 || i % 13 == 0 {\n      count += 1\n    }\n  }\n  return count\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmp_mh1r1bh.rs:9:16\n   |\n9  |   let count = 0\n   |                ^ help: add `;` here\n10 |   for i in 0..n {\n   |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0;\n  for i in 0..n {\n    if i % 11 == 0 || i % 13 == 0 {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmptxabo2al.rs:12:7\n   |\n9  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n12 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0;\n  for i in 0..n {\n    if i % 3 == 0 {\n      count += 1;\n    }\n    if i % 5 == 0 {\n      count += 1;\n    }\n    if i % 15 == 0 {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpj6svo1j3.rs:12:7\n   |\n9  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n12 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpj6svo1j3.rs:15:7\n   |\n9  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n15 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror[E0384]: cannot assign twice to immutable variable `count`\n  --> /tmp/tmpj6svo1j3.rs:18:7\n   |\n9  |   let count = 0;\n   |       -----\n   |       |\n   |       first assignment to `count`\n   |       help: consider making this binding mutable: `mut count`\n...\n18 |       count += 1;\n   |       ^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(50)\n/// 0\n/// >>> fizz_buzz(78)\n/// 2\n/// >>> fizz_buzz(79)\n/// 3\nfn fizz_buzz(n: isize) -> isize {\n  let count = 0\n  for i in 0..n {\n    if i % 3 == 0 {\n      count += 1\n    }\n    if i % 5 == 0 {\n      count += 1\n    }\n    if i % 15 == 0 {\n      count += 1\n    }\n  }\n  return count\n}\n\nfn main() {\n    let candidate = fizz_buzz;\n    assert_eq!(candidate(50), 0);\n    assert_eq!(candidate(78), 2);\n    assert_eq!(candidate(79), 3);\n    assert_eq!(candidate(100), 3);\n    assert_eq!(candidate(200), 6);\n    assert_eq!(candidate(4000), 192);\n    assert_eq!(candidate(10000), 639);\n    assert_eq!(candidate(100000), 8026);\n}\n",
      "timestamp": 1664293097,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `for`\n  --> /tmp/tmpv7dtvatt.rs:9:16\n   |\n9  |   let count = 0\n   |                ^ help: add `;` here\n10 |   for i in 0..n {\n   |   --- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}