name: HumanEval_41_car_race_collision
language: rs
prompt: "/// Imagine a road that's a perfectly straight infinitely long line.\n///\
  \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
  /// are driving right to left.   The two sets of cars start out being very far from\n\
  /// each other.  All cars move in the same speed.  Two cars are said to collide\n\
  /// when a car that's moving left to right hits a car that's moving right to left.\n\
  /// However, the cars are infinitely sturdy and strong; as a result, they continue\
  \ moving\n/// in their trajectory as if they did not collide.\n/// This function\
  \ outputs the number of such collisions.\nfn car_race_collision(n: isize) -> isize\
  \ {\n"
tests: "}\n\nfn main() {\n    let candidate = car_race_collision;\n    assert_eq!(candidate(2),\
  \ 4);\n    assert_eq!(candidate(3), 9);\n    assert_eq!(candidate(4), 16);\n   \
  \ assert_eq!(candidate(8), 64);\n    assert_eq!(candidate(10), 100);\n}\n"
completions: ["  let cars = [0] * n;\n  let collisions = 0;\n  for i in 0..n {\n \
    \   cars[i] = i;\n  }\n  for i in 0..n {\n    for j in 0..n {\n      if i < j\
    \ {\n        if cars[i] + 1 == cars[j] {\n          collisions += 1;\n       \
    \   cars[i] = cars[n - 1];\n          cars[j] = cars[0];\n        }\n      }\n\
    \    }\n  }\n  return collisions;", "  let cars: [isize, isize] = [0, 0];\n  let\
    \ collisions: isize = 0;\n  for i in 0..n {\n    cars[0] = i;\n    for j in 0..n\
    \ {\n      cars[1] = j;\n      if cars[0] < cars[1] {\n        if cars[0] + 1\
    \ == cars[1] {\n          collisions += 1;\n        }\n      } else {\n      \
    \  if cars[0] - 1 == cars[1] {\n          collisions += 1;\n        }\n      }\n\
    \    }\n  }\n  return collisions;", "  let cars = [0] * n\n  let collisions =\
    \ 0\n  for i in 0..n {\n    cars[i] = i\n  }\n  for i in 0..n {\n    for j in\
    \ 0..n {\n      if i < j {\n        if cars[i] + 1 == cars[j] {\n          collisions\
    \ += 1\n          cars[i] = cars[j]\n          cars[j] = i\n        }\n      }\n\
    \    }\n  }\n  return collisions", "  let cars: [isize, isize] = [0, 0];\n  let\
    \ collisions: isize = 0;\n  for i in 0..n {\n    cars[0] = i;\n    for j in 0..n\
    \ {\n      cars[1] = j;\n      if cars[0] < cars[1] {\n        cars[0] += 1;\n\
    \      } else {\n        cars[0] -= 1;\n      }\n      if cars[0] == cars[1] {\n\
    \        collisions += 1;\n      }\n    }\n  }\n  return collisions;", "  let\
    \ cars: [isize, isize] = [0, 0];\n  let collisions: isize = 0;\n  for i in 0..n\
    \ {\n    cars[0] = i;\n    for j in 0..n {\n      cars[1] = j;\n      if cars[0]\
    \ < cars[1] {\n        if cars[0] + 1 == cars[1] {\n          collisions += 1;\n\
    \        } else {\n          cars[0] += 1;\n        }\n      } else {\n      \
    \  if cars[1] + 1 == cars[0] {\n          collisions += 1;\n        } else {\n\
    \          cars[1] += 1;\n        }\n      }\n    }\n  }\n  return collisions;",
  "  let cars = [0] * n;\n  let collisions = 0;\n  for i in 0..n {\n    cars[i] =\
    \ i;\n  }\n  for i in 0..n {\n    for j in 0..n {\n      if i < j {\n        if\
    \ cars[i] + 1 == cars[j] {\n          collisions += 1;\n          cars[i] = cars[n\
    \ - 1];\n          cars[j] = cars[0];\n        }\n      }\n    }\n  }\n  return\
    \ collisions;", "  let cars_left = n\n  let cars_right = n\n  let cars_left_pos\
    \ = 0\n  let cars_right_pos = 0\n  let cars_left_speed = 1\n  let cars_right_speed\
    \ = -1\n  let cars_left_collisions = 0\n  let cars_right_collisions = 0\n  while\
    \ cars_left > 0 || cars_right > 0 {\n    if cars_left > 0 {\n      cars_left_pos\
    \ += cars_left_speed\n      cars_left -= 1\n    }\n    if cars_right > 0 {\n \
    \     cars_right_pos += cars_right_speed\n      cars_right -= 1\n    }\n    if\
    \ cars_left_pos > cars_right_pos {\n      cars_left_collisions += 1\n      cars_left_speed\
    \ = -cars_left_speed\n    } else if cars_left_pos < cars_right_pos {\n      cars_right_collisions\
    \ += 1\n      cars_right_speed = -cars_right_speed\n    }\n  }\n  return cars_left_collisions\
    \ + cars_right_collisions", "  let cars = [0] * n;\n  let collisions = 0;\n  for\
    \ i in 0..n {\n    cars[i] = i;\n  }\n  for i in 0..n {\n    for j in 0..n {\n\
    \      if i < j {\n        if cars[i] < cars[j] {\n          collisions += 1;\n\
    \          cars[i] += 1;\n          cars[j] -= 1;\n        }\n      }\n    }\n\
    \  }\n  return collisions;", "  let cars = [0] * n;\n  let collisions = 0;\n \
    \ for i in 0..n {\n    cars[i] = i;\n  }\n  for i in 0..n {\n    for j in 0..n\
    \ {\n      if i < j {\n        if cars[i] + 1 == cars[j] {\n          collisions\
    \ += 1;\n          cars[i] = cars[j] + 1;\n        }\n      }\n    }\n  }\n  return\
    \ collisions;", "  let cars = [0] * n;\n  let collisions = 0;\n  for i in 0..n\
    \ {\n    cars[i] = i;\n  }\n  for i in 0..n {\n    for j in 0..n {\n      if i\
    \ != j {\n        if cars[i] + cars[j] == 0 {\n          collisions += 1;\n  \
    \      }\n      }\n    }\n  }\n  return collisions;", "  let cars = [0] * n;\n\
    \  let collisions = 0;\n  for i in 0..n {\n    cars[i] = i;\n  }\n  for i in 0..n\
    \ {\n    for j in 0..n {\n      if i < j {\n        if cars[i] + 1 == cars[j]\
    \ {\n          collisions += 1;\n          cars[i] = cars[j];\n          cars[j]\
    \ = i;\n        }\n      }\n    }\n  }\n  return collisions;", "  let cars: [isize,\
    \ isize] = [0, 0];\n  let collisions: isize = 0;\n  for i in 0..n {\n    cars[0]\
    \ = i;\n    for j in 0..n {\n      cars[1] = j;\n      if cars[0] < cars[1] {\n\
    \        cars[0] += 1;\n      } else {\n        cars[0] -= 1;\n      }\n     \
    \ if cars[0] == cars[1] {\n        collisions += 1;\n      }\n    }\n  }\n  return\
    \ collisions;", "  let cars = [0] * n;\n  let collisions = 0;\n  for i in 0..n\
    \ {\n    cars[i] = i;\n  }\n  for i in 0..n {\n    for j in 0..n {\n      if i\
    \ != j {\n        if cars[i] < cars[j] {\n          cars[i] += 1;\n        } else\
    \ if cars[i] > cars[j] {\n          cars[i] -= 1;\n        } else {\n        \
    \  collisions += 1;\n        }\n      }\n    }\n  }\n  return collisions;", " \
    \ let cars = [0] * n;\n  let collisions = 0;\n  for i in 0..n {\n    cars[i] =\
    \ i;\n  }\n  for i in 0..n {\n    for j in 0..n {\n      if i < j {\n        if\
    \ cars[i] < cars[j] {\n          cars[i] += 1;\n        } else if cars[i] > cars[j]\
    \ {\n          cars[j] += 1;\n        } else {\n          collisions += 1;\n \
    \       }\n      }\n    }\n  }\n  return collisions;", "  let cars = [0] * n;\n\
    \  let collisions = 0;\n  for i in 0..n {\n    cars[i] = i;\n  }\n  for i in 0..n\
    \ {\n    for j in 0..n {\n      if i != j {\n        if cars[i] < cars[j] {\n\
    \          cars[i] += 1;\n        } else if cars[i] > cars[j] {\n          cars[i]\
    \ -= 1;\n        } else {\n          collisions += 1;\n        }\n      }\n  \
    \  }\n  }\n  return collisions;", "  let cars: [isize, isize] = [0, 0];\n  let\
    \ collisions: isize = 0;\n  for i in 0..n {\n    cars[0] = i;\n    for j in 0..n\
    \ {\n      cars[1] = j;\n      if cars[0] > cars[1] {\n        cars[0] -= 1;\n\
    \        cars[1] += 1;\n      } else {\n        cars[0] += 1;\n        cars[1]\
    \ -= 1;\n      }\n      if cars[0] == cars[1] {\n        collisions += 1;\n  \
    \    }\n    }\n  }\n  return collisions;", "  let cars: [isize, isize] = [0, 0];\n\
    \  let collisions: isize = 0;\n  for i in 0..n {\n    cars[0] = i;\n    for j\
    \ in 0..n {\n      cars[1] = j;\n      if cars[0] < cars[1] {\n        cars[0]\
    \ += 1;\n      } else {\n        cars[0] -= 1;\n      }\n      if cars[0] == cars[1]\
    \ {\n        collisions += 1;\n      }\n    }\n  }\n  return collisions;", " \
    \ let cars = [0] * n;\n  let collisions = 0;\n  for i in 0..n {\n    cars[i] =\
    \ i;\n  }\n  for i in 0..n {\n    for j in 0..n {\n      if i < j {\n        if\
    \ cars[i] + 1 == cars[j] {\n          collisions += 1;\n          cars[i] = cars[n\
    \ - 1];\n          cars[j] = cars[0];\n        }\n      }\n    }\n  }\n  return\
    \ collisions;", "  let cars: [isize, isize] = [0, 0];\n  let collisions: isize\
    \ = 0;\n  for i in 0..n {\n    cars[0] = i;\n    for j in 0..n {\n      cars[1]\
    \ = (n - 1) - j;\n      if cars[0] > cars[1] {\n        collisions += 1;\n   \
    \   }\n    }\n  }\n  return collisions;", "  let cars = [0] * n\n  let collisions\
    \ = 0\n  for i in 0..n {\n    cars[i] = i\n  }\n  for i in 0..n {\n    for j in\
    \ 0..n {\n      if i < j {\n        if cars[i] + 1 == cars[j] {\n          collisions\
    \ += 1\n          cars[i] = cars[j]\n        }\n      }\n    }\n  }\n  return\
    \ collisions", "  let cars = [0] * n;\n  let collisions = 0;\n  for i in 0..n\
    \ {\n    cars[i] = i;\n  }\n  for i in 0..n {\n    for j in 0..n {\n      if i\
    \ != j {\n        if cars[i] < cars[j] {\n          cars[i] += 1;\n        } else\
    \ if cars[i] > cars[j] {\n          cars[j] += 1;\n        } else {\n        \
    \  collisions += 1;\n        }\n      }\n    }\n  }\n  return collisions;", " \
    \ let cars = [0] * n;\n  let collisions = 0;\n  for i in 0..n {\n    cars[i] =\
    \ i;\n  }\n  for i in 0..n {\n    for j in 0..n {\n      if i < j {\n        if\
    \ cars[i] + 1 == cars[j] {\n          collisions += 1;\n          cars[i] = cars[n\
    \ - 1];\n          cars[j] = cars[0];\n        }\n      }\n    }\n  }\n  return\
    \ collisions;", "  let cars: [isize, isize] = [0, 0];\n  let collisions: isize\
    \ = 0;\n  for i in 0..n {\n    cars[0] = i;\n    for j in 0..n {\n      cars[1]\
    \ = j;\n      if cars[0] < cars[1] {\n        if cars[0] + 1 == cars[1] {\n  \
    \        collisions += 1;\n        }\n      } else {\n        if cars[0] - 1 ==\
    \ cars[1] {\n          collisions += 1;\n        }\n      }\n    }\n  }\n  return\
    \ collisions;", "  let cars = [0] * n;\n  let collisions = 0;\n  for i in 0..n\
    \ {\n    cars[i] = i;\n  }\n  for i in 0..n {\n    for j in 0..n {\n      if i\
    \ != j {\n        if cars[i] < cars[j] {\n          cars[i] += 1;\n        } else\
    \ if cars[i] > cars[j] {\n          cars[i] -= 1;\n        } else {\n        \
    \  collisions += 1;\n        }\n      }\n    }\n  }\n  return collisions;", " \
    \ let cars: [isize, isize] = [0, 0];\n  let collisions: isize = 0;\n  let i: isize\
    \ = 0;\n  let j: isize = 0;\n  for i in 0..n {\n    for j in 0..n {\n      if\
    \ i != j {\n        cars[i] += 1;\n        cars[j] += 1;\n        if cars[i] >\
    \ cars[j] {\n          collisions += 1;\n        }\n      }\n    }\n  }\n  return\
    \ collisions;", "  let cars = [0] * n;\n  let collisions = 0;\n  for i in 0..n\
    \ {\n    cars[i] = i;\n  }\n  for i in 0..n {\n    for j in 0..n {\n      if i\
    \ != j {\n        if cars[i] < cars[j] {\n          cars[i] += 1;\n        } else\
    \ if cars[i] > cars[j] {\n          cars[j] += 1;\n        } else {\n        \
    \  collisions += 1;\n        }\n      }\n    }\n  }\n  return collisions;", " \
    \ let cars = [0] * n;\n  let collisions = 0;\n  for i in 0..n {\n    cars[i] =\
    \ i;\n  }\n  for i in 0..n {\n    for j in 0..n {\n      if i < j {\n        if\
    \ cars[i] + 1 == cars[j] {\n          collisions += 1;\n          cars[i] = cars[n\
    \ - 1];\n          cars[j] = cars[0];\n        }\n      }\n    }\n  }\n  return\
    \ collisions;", "  let cars: [isize, isize] = [0, 0];\n  let collisions: isize\
    \ = 0;\n  for i in 0..n {\n    cars[0] = i;\n    for j in 0..n {\n      cars[1]\
    \ = j;\n      if cars[0] < cars[1] {\n        cars[0] += 1;\n      } else {\n\
    \        cars[0] -= 1;\n      }\n      if cars[0] == cars[1] {\n        collisions\
    \ += 1;\n      }\n    }\n  }\n  return collisions;", "  let cars: [isize, isize]\
    \ = [0, 0];\n  let collisions: isize = 0;\n  for i in 0..n {\n    cars[0] = i;\n\
    \    for j in 0..n {\n      cars[1] = j;\n      if cars[0] < cars[1] {\n     \
    \   cars[0] += 1;\n      } else {\n        cars[0] -= 1;\n      }\n      if cars[0]\
    \ == cars[1] {\n        collisions += 1;\n      }\n    }\n  }\n  return collisions;",
  "  let cars: [isize, isize] = [0, 0];\n  let collisions: isize = 0;\n  for i in\
    \ 0..n {\n    cars[0] = i;\n    for j in 0..n {\n      cars[1] = j;\n      if\
    \ cars[0] < cars[1] {\n        if cars[0] + 1 == cars[1] {\n          collisions\
    \ += 1;\n        }\n      } else {\n        if cars[0] - 1 == cars[1] {\n    \
    \      collisions += 1;\n        }\n      }\n    }\n  }\n  return collisions;",
  "  let cars: [isize, isize] = [0, 0];\n  let collisions: isize = 0;\n  for i in\
    \ 0..n {\n    cars[0] = i;\n    for j in 0..n {\n      cars[1] = j;\n      if\
    \ cars[0] < cars[1] {\n        cars[0] += 1;\n      } else {\n        cars[0]\
    \ -= 1;\n      }\n      if cars[0] == cars[1] {\n        collisions += 1;\n  \
    \    }\n    }\n  }\n  return collisions;", "  let cars: [isize, isize] = [0, 0];\n\
    \  let collisions: isize = 0;\n  for i in 0..n {\n    cars[0] = i;\n    for j\
    \ in 0..n {\n      cars[1] = j;\n      if cars[0] < cars[1] {\n        if cars[0]\
    \ + 1 == cars[1] {\n          collisions += 1;\n        }\n      } else {\n  \
    \      if cars[0] - 1 == cars[1] {\n          collisions += 1;\n        }\n  \
    \    }\n    }\n  }\n  return collisions;", "  let cars: [isize, isize] = [0, 0];\n\
    \  let cars_left: [isize, isize] = [0, 0];\n  let cars_right: [isize, isize] =\
    \ [0, 0];\n  let cars_left_left: [isize, isize] = [0, 0];\n  let cars_right_right:\
    \ [isize, isize] = [0, 0];\n  let cars_left_right: [isize, isize] = [0, 0];\n\
    \  let cars_right_left: [isize, isize] = [0, 0];\n  let cars_left_left_left: [isize,\
    \ isize] = [0, 0];\n  let cars_right_right_right: [isize, isize] = [0, 0];\n \
    \ let cars_left_right_left: [isize, isize] = [0, 0];\n  let cars_right_left_right:\
    \ [isize, isize] = [0, 0];\n  let cars_left_left_right: [isize, isize] = [0, 0];\n\
    \  let cars_right_right_left: [isize, isize] = [0, 0];\n  let cars_left_right_right:\
    \ [isize, isize] = [0, 0];\n  let cars_right_left_left: [isize, isize] = [0, 0];\n\
    \  let cars_left_left_left_left: [isize, isize] = [0, 0];\n  let cars_right_right_right_right:\
    \ [isize, isize] = [0, 0];\n  let cars_left_right_left_right: [isize, isize] =\
    \ [0, 0];\n  let cars_right_left_right_left: [isize, isize] = [0, 0];\n  let cars_left_left_right_right:\
    \ [isize, isize] = [0, 0];\n  let cars_right_left_left_left: [isize, isize] =\
    \ [0, 0];\n  let cars_left_left_left_left_left: [isize,", "  let cars: [isize,\
    \ isize] = [0, 0];\n  let collisions: isize = 0;\n  for i in 0..n {\n    cars[0]\
    \ = i;\n    for j in 0..n {\n      cars[1] = j;\n      if cars[0] < cars[1] {\n\
    \        if cars[0] + 1 == cars[1] {\n          collisions += 1;\n        } else\
    \ {\n          cars[0] += 1;\n        }\n      } else {\n        if cars[0] -\
    \ 1 == cars[1] {\n          collisions += 1;\n        } else {\n          cars[1]\
    \ += 1;\n        }\n      }\n    }\n  }\n  return collisions;", "  let cars: [isize,\
    \ isize] = [0, 0];\n  let collisions: isize = 0;\n  for i in 0..n {\n    cars[0]\
    \ = i;\n    for j in 0..n {\n      cars[1] = j;\n      if cars[0] < cars[1] {\n\
    \        if cars[0] + 1 == cars[1] {\n          collisions += 1;\n        } else\
    \ {\n          cars[0] += 1;\n        }\n      } else {\n        if cars[1] +\
    \ 1 == cars[0] {\n          collisions += 1;\n        } else {\n          cars[1]\
    \ += 1;\n        }\n      }\n    }\n  }\n  return collisions;", "  let cars: [isize,\
    \ isize] = [0, 0];\n  let collisions: isize = 0;\n  for i in 0..n {\n    cars[0]\
    \ = i;\n    for j in 0..n {\n      cars[1] = j;\n      if cars[0] < cars[1] {\n\
    \        if cars[0] + 1 == cars[1] {\n          collisions += 1;\n        }\n\
    \      } else {\n        if cars[0] - 1 == cars[1] {\n          collisions +=\
    \ 1;\n        }\n      }\n    }\n  }\n  return collisions;", "  let cars = [0]\
    \ * n;\n  let collisions = 0;\n  for i in 0..n {\n    cars[i] = i;\n  }\n  for\
    \ i in 0..n {\n    for j in 0..n {\n      if i < j {\n        if cars[i] + 1 ==\
    \ cars[j] {\n          collisions += 1;\n          cars[i] = cars[n - 1];\n  \
    \        cars[j] = cars[0];\n        }\n      }\n    }\n  }\n  return collisions;",
  "  let cars: [isize, isize] = [0, 0];\n  let collisions: isize = 0;\n  for i in\
    \ 0..n {\n    cars[0] = i;\n    for j in 0..n {\n      cars[1] = j;\n      if\
    \ cars[0] < cars[1] {\n        cars[0] += 1;\n      } else if cars[0] > cars[1]\
    \ {\n        cars[0] -= 1;\n      } else {\n        collisions += 1;\n      }\n\
    \    }\n  }\n  return collisions;", "  let cars: [isize, isize] = [0, 0];\n  let\
    \ collisions: isize = 0;\n  for i in 0..n {\n    cars[0] = i;\n    for j in 0..n\
    \ {\n      cars[1] = j;\n      if cars[0] < cars[1] {\n        if cars[0] + 1\
    \ == cars[1] {\n          collisions += 1;\n        }\n      } else {\n      \
    \  if cars[0] - 1 == cars[1] {\n          collisions += 1;\n        }\n      }\n\
    \    }\n  }\n  return collisions;", "  let cars = [0] * n;\n  let collisions =\
    \ 0;\n  for i in 0..n {\n    cars[i] = i;\n  }\n  for i in 0..n {\n    for j in\
    \ 0..n {\n      if i != j {\n        if cars[i] < cars[j] {\n          cars[i]\
    \ += 1;\n        } else if cars[i] > cars[j] {\n          cars[i] -= 1;\n    \
    \    } else {\n          collisions += 1;\n        }\n      }\n    }\n  }\n  return\
    \ collisions;", "  let cars = [0] * n;\n  let collisions = 0;\n  for i in 0..n\
    \ {\n    cars[i] = i;\n  }\n  for i in 0..n {\n    for j in 0..n {\n      if i\
    \ != j {\n        if cars[i] < cars[j] {\n          cars[i] += 1;\n        } else\
    \ if cars[i] > cars[j] {\n          cars[i] -= 1;\n        } else {\n        \
    \  collisions += 1;\n        }\n      }\n    }\n  }\n  return collisions;", " \
    \ let cars: [isize, isize] = [0, 0];\n  let cars_left: [isize, isize] = [0, 0];\n\
    \  let cars_right: [isize, isize] = [0, 0];\n  let cars_left_left: [isize, isize]\
    \ = [0, 0];\n  let cars_left_right: [isize, isize] = [0, 0];\n  let cars_right_left:\
    \ [isize, isize] = [0, 0];\n  let cars_right_right: [isize, isize] = [0, 0];\n\
    \  let cars_left_left_left: [isize, isize] = [0, 0];\n  let cars_left_left_right:\
    \ [isize, isize] = [0, 0];\n  let cars_left_right_left: [isize, isize] = [0, 0];\n\
    \  let cars_left_right_right: [isize, isize] = [0, 0];\n  let cars_right_left_left:\
    \ [isize, isize] = [0, 0];\n  let cars_right_left_right: [isize, isize] = [0,\
    \ 0];\n  let cars_right_right_left: [isize, isize] = [0, 0];\n  let cars_right_right_right:\
    \ [isize, isize] = [0, 0];\n  let cars_left_left_left_left: [isize, isize] = [0,\
    \ 0];\n  let cars_left_left_left_right: [isize, isize] = [0, 0];\n  let cars_left_left_right_left:\
    \ [isize, isize] = [0, 0];\n  let cars_left_left_right_right: [isize, isize] =\
    \ [0, 0];\n  let cars_left_right_left_left: [isize, isize] = [0, 0];\n  let cars_left_right_left_right:\
    \ [isize, isize] = [0, 0];\n  let cars_left_right_right_left: [isize, isize",
  "  let cars: [isize, isize] = [0, 0];\n  let collisions: isize = 0;\n  for i in\
    \ 0..n {\n    cars[0] = i;\n    for j in 0..n {\n      cars[1] = j;\n      if\
    \ cars[0] < cars[1] {\n        if cars[0] + 1 == cars[1] {\n          collisions\
    \ += 1;\n        } else {\n          cars[0] += 1;\n        }\n      } else {\n\
    \        if cars[0] - 1 == cars[1] {\n          collisions += 1;\n        } else\
    \ {\n          cars[1] += 1;\n        }\n      }\n    }\n  }\n  return collisions;",
  "  let cars = [0] * n;\n  let collisions = 0;\n  for i in 0..n {\n    cars[i] =\
    \ i;\n  }\n  for i in 0..n {\n    for j in 0..n {\n      if i != j {\n       \
    \ if cars[i] < cars[j] {\n          cars[i] += 1;\n        } else if cars[i] >\
    \ cars[j] {\n          cars[i] -= 1;\n        } else {\n          collisions +=\
    \ 1;\n        }\n      }\n    }\n  }\n  return collisions;", "  let cars = [0]\
    \ * n;\n  let collisions = 0;\n  for i in 0..n {\n    cars[i] = i;\n  }\n  for\
    \ i in 0..n {\n    for j in 0..n {\n      if i != j {\n        if cars[i] < cars[j]\
    \ {\n          cars[i] += 1;\n        } else if cars[i] > cars[j] {\n        \
    \  cars[j] += 1;\n        } else {\n          collisions += 1;\n        }\n  \
    \    }\n    }\n  }\n  return collisions;", "  let cars: [isize, isize] = [0, 0];\n\
    \  let collisions: isize = 0;\n  for i in 0..n {\n    cars[0] = i;\n    for j\
    \ in 0..n {\n      cars[1] = j;\n      if cars[0] < cars[1] {\n        cars[0]\
    \ += 1;\n      } else {\n        cars[0] -= 1;\n      }\n      if cars[0] == cars[1]\
    \ {\n        collisions += 1;\n      }\n    }\n  }\n  return collisions;", " \
    \ let cars: [isize, isize] = [0, 0];\n  let collisions: isize = 0;\n  for i in\
    \ 0..n {\n    cars[0] = i;\n    for j in 0..n {\n      cars[1] = j;\n      if\
    \ cars[0] < cars[1] {\n        if cars[0] + 1 == cars[1] {\n          collisions\
    \ += 1;\n        } else {\n          collisions += car_race_collision(cars[0]\
    \ + 1);\n        }\n      } else if cars[0] > cars[1] {\n        if cars[1] +\
    \ 1 == cars[0] {\n          collisions += 1;\n        } else {\n          collisions\
    \ += car_race_collision(cars[1] + 1);\n        }\n      }\n    }\n  }\n  return\
    \ collisions;", "  let cars = [0] * n;\n  let collisions = 0;\n  for i in 0..n\
    \ {\n    cars[i] = i;\n  }\n  for i in 0..n {\n    for j in 0..n {\n      if i\
    \ != j {\n        if cars[i] < cars[j] {\n          cars[i] += 1;\n        } else\
    \ if cars[i] > cars[j] {\n          cars[i] -= 1;\n        } else {\n        \
    \  collisions += 1;\n        }\n      }\n    }\n  }\n  return collisions;", " \
    \ let cars: [isize, isize] = [0, 0];\n  let collisions: isize = 0;\n  for i in\
    \ 0..n {\n    cars[0] = i;\n    for j in 0..n {\n      cars[1] = j;\n      if\
    \ cars[0] < cars[1] {\n        if cars[0] + 1 == cars[1] {\n          collisions\
    \ += 1;\n        }\n      } else {\n        if cars[0] - 1 == cars[1] {\n    \
    \      collisions += 1;\n        }\n      }\n    }\n  }\n  return collisions;",
  "  let cars: [isize, isize] = [0, 0];\n  let collisions: isize = 0;\n  for i in\
    \ 0..n {\n    cars[0] = i;\n    for j in 0..n {\n      cars[1] = j;\n      if\
    \ cars[0] < cars[1] {\n        if cars[0] + 1 == cars[1] {\n          collisions\
    \ += 1;\n        }\n      } else {\n        if cars[0] - 1 == cars[1] {\n    \
    \      collisions += 1;\n        }\n      }\n    }\n  }\n  return collisions;",
  "  let cars = [0] * n;\n  let collisions = 0;\n  for i in 0..n {\n    cars[i] =\
    \ i;\n  }\n  for i in 0..n {\n    for j in 0..n {\n      if i < j {\n        if\
    \ cars[i] + 1 == cars[j] {\n          collisions += 1;\n          cars[i] = cars[n\
    \ - 1];\n          cars[j] = cars[0];\n        }\n      }\n    }\n  }\n  return\
    \ collisions;", "  let cars = [0] * n\n  let collisions = 0\n  for i in 0..n {\n\
    \    cars[i] = i\n  }\n  for i in 0..n {\n    for j in 0..n {\n      if i < j\
    \ {\n        if cars[i] + 1 == cars[j] {\n          collisions += 1\n        \
    \  cars[i] = cars[n]\n          cars[j] = cars[n]\n        }\n      }\n    }\n\
    \  }\n  return collisions", "  let cars: [isize, isize] = [0, 0];\n  let collisions:\
    \ isize = 0;\n  let car_index: isize = 0;\n  let car_index_inc: isize = 1;\n \
    \ let car_index_dec: isize = -1;\n  let car_index_inc_dec: isize = 1;\n  let car_index_dec_inc:\
    \ isize = -1;\n  let car_index_inc_dec_inc: isize = 1;\n  let car_index_dec_inc_dec:\
    \ isize = -1;\n  let car_index_dec_dec_inc: isize = -1;\n  let car_index_dec_dec_dec:\
    \ isize = -1;\n  let car_index_inc_dec_dec: isize = 1;\n  let car_index_dec_dec_dec_inc:\
    \ isize = -1;\n  let car_index_inc_dec_dec_dec: isize = 1;\n  let car_index_inc_dec_dec_dec_inc:\
    \ isize = -1;\n  let car_index_inc_dec_dec_dec_dec: isize = 1;\n  let car_index_inc_dec_dec_dec_dec_inc:\
    \ isize = -1;\n  let car_index_inc_dec_dec_dec_dec_dec: isize = 1;\n  let car_index_inc_dec_dec_dec_dec_dec_inc:\
    \ isize = -1;\n  let car_index_inc_dec_dec_dec_dec_dec_dec: isize = 1;\n  let\
    \ car_index_inc_dec_dec_dec_dec_dec_dec_inc: isize = -1;\n  let car_index_inc_dec_dec_dec_dec_dec_dec_dec:\
    \ isize = 1;\n  let car_index_inc_dec_dec_dec_dec_dec_dec_dec_inc: isize = -1;\n\
    \  let car_index_inc_dec_dec_dec_dec_dec_dec_dec_dec: isize = 1;\n  let car_index_inc_dec_dec",
  "  let cars = [0] * n;\n  let collisions = 0;\n  for i in 0..n {\n    cars[i] =\
    \ i;\n  }\n  for i in 0..n {\n    for j in 0..n {\n      if i != j {\n       \
    \ if cars[i] < cars[j] {\n          cars[i] += 1;\n        } else if cars[i] >\
    \ cars[j] {\n          cars[i] -= 1;\n        } else {\n          collisions +=\
    \ 1;\n        }\n      }\n    }\n  }\n  return collisions;", "  let cars = [0]\
    \ * n;\n  let collisions = 0;\n  for i in 0..n {\n    cars[i] = i;\n  }\n  for\
    \ i in 0..n {\n    for j in 0..n {\n      if i != j {\n        if cars[i] < cars[j]\
    \ {\n          cars[i] += 1;\n        } else if cars[i] > cars[j] {\n        \
    \  cars[i] -= 1;\n        } else {\n          collisions += 1;\n        }\n  \
    \    }\n    }\n  }\n  return collisions;", "  let cars = [0] * n;\n  let collisions\
    \ = 0;\n  for i in 0..n {\n    cars[i] = i;\n  }\n  for i in 0..n {\n    for j\
    \ in 0..n {\n      if i < j {\n        if cars[i] + 1 == cars[j] {\n         \
    \ collisions += 1;\n          cars[i] = cars[n - 1];\n          cars[j] = cars[0];\n\
    \        }\n      }\n    }\n  }\n  return collisions;", "  let cars: [isize, isize]\
    \ = [0, 0];\n  let collisions: isize = 0;\n  for i in 0..n {\n    cars[0] = i;\n\
    \    for j in 0..n {\n      cars[1] = j;\n      if cars[0] < cars[1] {\n     \
    \   if cars[0] + 1 == cars[1] {\n          collisions += 1;\n        }\n     \
    \ } else if cars[0] > cars[1] {\n        if cars[1] + 1 == cars[0] {\n       \
    \   collisions += 1;\n        }\n      }\n    }\n  }\n  return collisions;", " \
    \ let cars = [0] * n;\n  let collisions = 0;\n  for i in 0..n {\n    cars[i] =\
    \ i;\n  }\n  for i in 0..n {\n    for j in 0..n {\n      if i < j {\n        if\
    \ cars[i] < cars[j] {\n          cars[i] += 1;\n        } else {\n          cars[i]\
    \ -= 1;\n        }\n      }\n    }\n  }\n  for i in 0..n {\n    if cars[i] < 0\
    \ {\n      collisions += 1;\n    }\n  }\n  return collisions;", "  let cars =\
    \ [0] * n;\n  let collisions = 0;\n  for i in 0..n {\n    cars[i] = i;\n  }\n\
    \  for i in 0..n {\n    for j in 0..n {\n      if i == j {\n        continue;\n\
    \      }\n      if cars[i] < cars[j] {\n        cars[i] += 1;\n      } else if\
    \ cars[i] > cars[j] {\n        cars[j] += 1;\n      } else {\n        collisions\
    \ += 1;\n      }\n    }\n  }\n  return collisions;", "  let cars: [isize, isize]\
    \ = [0, 0];\n  let collisions: isize = 0;\n  for i in 0..n {\n    cars[0] = i;\n\
    \    for j in 0..n {\n      cars[1] = j;\n      if cars[0] > cars[1] {\n     \
    \   collisions += 1;\n      }\n    }\n  }\n  return collisions;", "  let cars\
    \ = make(n, 0);\n  let collisions = 0;\n  for i in 0..n {\n    cars[i] = i;\n\
    \  }\n  for i in 0..n {\n    for j in 0..n {\n      if i < j {\n        if cars[i]\
    \ + 1 == cars[j] {\n          collisions += 1;\n          cars[i] = cars[n - 1];\n\
    \          cars[j] = cars[0];\n        }\n      }\n    }\n  }\n  return collisions;",
  "  let cars_left = n\n  let cars_right = n\n  let cars_left_pos = 0\n  let cars_right_pos\
    \ = 0\n  let cars_left_speed = 1\n  let cars_right_speed = -1\n  let cars_left_collisions\
    \ = 0\n  let cars_right_collisions = 0\n  while cars_left > 0 || cars_right >\
    \ 0 {\n    if cars_left > 0 {\n      cars_left_pos += cars_left_speed\n      cars_left\
    \ -= 1\n    }\n    if cars_right > 0 {\n      cars_right_pos += cars_right_speed\n\
    \      cars_right -= 1\n    }\n    if cars_left_pos > cars_right_pos {\n     \
    \ cars_left_collisions += 1\n    } else if cars_left_pos < cars_right_pos {\n\
    \      cars_right_collisions += 1\n    }\n  }\n  return cars_left_collisions +\
    \ cars_right_collisions", "  let cars = [0] * n\n  let collisions = 0\n  for i\
    \ in 0..n {\n    cars[i] = i\n  }\n  for i in 0..n {\n    for j in 0..n {\n  \
    \    if i != j {\n        if cars[i] < cars[j] {\n          cars[i] += 1\n   \
    \     } else if cars[i] > cars[j] {\n          cars[i] -= 1\n        } else {\n\
    \          collisions += 1\n        }\n      }\n    }\n  }\n  return collisions",
  "  let cars: [isize, isize] = [0, 0];\n  let collisions: isize = 0;\n  for i in\
    \ 0..n {\n    cars[0] = i;\n    for j in 0..n {\n      cars[1] = j;\n      if\
    \ cars[0] < cars[1] {\n        if cars[0] + 1 == cars[1] {\n          collisions\
    \ += 1;\n        }\n      } else {\n        if cars[0] - 1 == cars[1] {\n    \
    \      collisions += 1;\n        }\n      }\n    }\n  }\n  return collisions;",
  "  let cars = make(n, 0);\n  let collisions = 0;\n  for i in 0..n {\n    cars[i]\
    \ = i;\n  }\n  for i in 0..n {\n    for j in 0..n {\n      if i < j {\n      \
    \  if cars[i] + 1 == cars[j] {\n          collisions += 1;\n          cars[i]\
    \ = cars[n - 1];\n          cars[j] = cars[0];\n        }\n      }\n    }\n  }\n\
    \  return collisions;", "  let cars = [0] * n;\n  let collisions = 0;\n  for i\
    \ in 0..n {\n    cars[i] = i;\n  }\n  for i in 0..n {\n    for j in 0..n {\n \
    \     if i == j {\n        continue;\n      }\n      if cars[i] < cars[j] {\n\
    \        cars[i] += 1;\n      } else {\n        cars[i] -= 1;\n      }\n     \
    \ if cars[i] < cars[j] {\n        cars[j] += 1;\n      } else {\n        cars[j]\
    \ -= 1;\n      }\n      if cars[i] == cars[j] {\n        collisions += 1;\n  \
    \    }\n    }\n  }\n  return collisions;", "  let cars = [0] * n;\n  let collisions\
    \ = 0;\n  for i in 0..n {\n    cars[i] = i;\n  }\n  for i in 0..n {\n    for j\
    \ in 0..n {\n      if i < j {\n        if cars[i] + 1 == cars[j] {\n         \
    \ collisions += 1;\n          cars[i] = cars[n - 1];\n          cars[j] = cars[0];\n\
    \        }\n      }\n    }\n  }\n  return collisions;", "  let cars: [isize, isize]\
    \ = [0, 0];\n  let collisions: isize = 0;\n  for i in 0..n {\n    cars[0] = i;\n\
    \    for j in 0..n {\n      cars[1] = j;\n      if cars[0] < cars[1] {\n     \
    \   if cars[0] + 1 == cars[1] {\n          collisions += 1;\n        }\n     \
    \ } else if cars[0] > cars[1] {\n        if cars[0] - 1 == cars[1] {\n       \
    \   collisions += 1;\n        }\n      }\n    }\n  }\n  return collisions;", " \
    \ let cars = [0] * n;\n  let collisions = 0;\n  for i in 0..n {\n    cars[i] =\
    \ i;\n  }\n  for i in 0..n {\n    for j in 0..n {\n      if i < j {\n        if\
    \ cars[i] < cars[j] {\n          cars[i] += 1;\n          cars[j] -= 1;\n    \
    \    } else if cars[i] > cars[j] {\n          cars[i] -= 1;\n          cars[j]\
    \ += 1;\n        } else {\n          collisions += 1;\n        }\n      }\n  \
    \  }\n  }\n  return collisions;", "  let cars = make(n, 0);\n  let collisions\
    \ = 0;\n  for i in 0..n {\n    cars[i] = i;\n  }\n  for i in 0..n {\n    for j\
    \ in 0..n {\n      if i != j {\n        if cars[i] + cars[j] == 0 {\n        \
    \  collisions += 1;\n        }\n      }\n    }\n  }\n  return collisions;", " \
    \ let cars = [0] * n;\n  let collisions = 0;\n  for i in 0..n {\n    cars[i] =\
    \ i;\n  }\n  for i in 0..n {\n    for j in 0..n {\n      if i < j {\n        if\
    \ cars[i] + 1 == cars[j] {\n          collisions += 1;\n          cars[i] = cars[n\
    \ - 1];\n          cars[j] = cars[0];\n        }\n      }\n    }\n  }\n  return\
    \ collisions;", "  let cars = [0] * n;\n  let collisions = 0;\n  for i in 0..n\
    \ {\n    cars[i] = i;\n  }\n  for i in 0..n {\n    for j in 0..n {\n      if i\
    \ != j {\n        if cars[i] + 1 == cars[j] {\n          collisions += 1;\n  \
    \        cars[i] = cars[j] + 1;\n        }\n      }\n    }\n  }\n  return collisions;",
  "  let cars: [isize, isize] = [0, 0];\n  let collisions: isize = 0;\n  for i in\
    \ 0..n {\n    cars[0] = i;\n    for j in 0..n {\n      cars[1] = j;\n      if\
    \ cars[0] < cars[1] {\n        if cars[0] + 1 == cars[1] {\n          collisions\
    \ += 1;\n        }\n      } else {\n        if cars[0] - 1 == cars[1] {\n    \
    \      collisions += 1;\n        }\n      }\n    }\n  }\n  return collisions;",
  "  let cars: [isize, isize] = [0, 0];\n  let collisions: isize = 0;\n  for i in\
    \ 0..n {\n    cars[0] = i;\n    for j in 0..n {\n      cars[1] = j;\n      if\
    \ cars[0] < cars[1] {\n        if cars[0] + 1 == cars[1] {\n          collisions\
    \ += 1;\n        } else {\n          cars[0] += 1;\n        }\n      } else {\n\
    \        if cars[0] - 1 == cars[1] {\n          collisions += 1;\n        } else\
    \ {\n          cars[1] += 1;\n        }\n      }\n    }\n  }\n  return collisions;",
  "  let cars_left = n;\n  let cars_right = n;\n  let collisions = 0;\n  while cars_left\
    \ > 0 || cars_right > 0 {\n    if cars_left > 0 {\n      cars_left -= 1;\n   \
    \   cars_right += 1;\n    } else {\n      cars_left += 1;\n      cars_right -=\
    \ 1;\n    }\n    collisions += 1;\n  }\n  return collisions;", "  let cars_left\
    \ = n\n  let cars_right = n\n  let cars_left_pos = 0\n  let cars_right_pos = 0\n\
    \  let cars_left_speed = 1\n  let cars_right_speed = -1\n  let cars_left_collision\
    \ = 0\n  let cars_right_collision = 0\n  let cars_left_collision_count = 0\n \
    \ let cars_right_collision_count = 0\n  let cars_left_collision_count_max = 0\n\
    \  let cars_right_collision_count_max = 0\n  let cars_left_collision_count_min\
    \ = 0\n  let cars_right_collision_count_min = 0\n  let cars_left_collision_count_sum\
    \ = 0\n  let cars_right_collision_count_sum = 0\n  let cars_left_collision_count_sum_max\
    \ = 0\n  let cars_right_collision_count_sum_max = 0\n  let cars_left_collision_count_sum_min\
    \ = 0\n  let cars_right_collision_count_sum_min = 0\n  let cars_left_collision_count_sum_sum\
    \ = 0\n  let cars_right_collision_count_sum_sum = 0\n  let cars_left_collision_count_sum_sum_max\
    \ = 0\n  let cars_right_collision_count_sum_sum_max = 0\n  let cars_left_collision_count_sum_sum_min\
    \ = 0\n  let cars_right_collision_count_sum_sum_min = 0\n  let cars_left_collision_count_sum_sum_sum\
    \ = 0\n  let cars_right_collision_count_sum_sum_sum = 0\n  let cars_left_collision_count_sum_sum_sum_max\
    \ = 0\n  let cars_right_collision_count_sum_sum_sum_max = 0\n  let cars_left_collision_count_sum_sum_sum_min\
    \ = 0\n  let cars_right_collision_count_sum_sum_sum_min = 0\n  let cars_left_collision_count_sum_sum_sum_",
  "  let cars = [0] * n;\n  let collisions = 0;\n  for i in 0..n {\n    cars[i] =\
    \ i;\n  }\n  for i in 0..n {\n    for j in 0..n {\n      if i < j {\n        if\
    \ cars[i] + 1 == cars[j] {\n          collisions += 1;\n          cars[i] = cars[n\
    \ - 1];\n          cars[j] = cars[0];\n        }\n      }\n    }\n  }\n  return\
    \ collisions;", "  let cars: [isize, isize] = [0, 0];\n  let collisions: isize\
    \ = 0;\n  for i in 0..n {\n    cars[0] = i;\n    for j in 0..n {\n      cars[1]\
    \ = j;\n      if cars[0] < cars[1] {\n        cars[0] += 1;\n      } else {\n\
    \        cars[0] -= 1;\n      }\n      if cars[0] == cars[1] {\n        collisions\
    \ += 1;\n      }\n    }\n  }\n  return collisions;", "  let cars: [isize, isize]\
    \ = [0, 0];\n  let collisions: isize = 0;\n  for i in 0..n {\n    cars[0] = i;\n\
    \    for j in 0..n {\n      cars[1] = (n - 1) - j;\n      if cars[0] > cars[1]\
    \ {\n        collisions += 1;\n      }\n    }\n  }\n  return collisions;", " \
    \ let cars = [0] * n;\n  let collisions = 0;\n  for i in 0..n {\n    cars[i] =\
    \ i;\n  }\n  for i in 0..n {\n    for j in 0..n {\n      if i < j {\n        if\
    \ cars[i] < cars[j] {\n          collisions += 1;\n          cars[i] += 1;\n \
    \         cars[j] -= 1;\n        }\n      }\n    }\n  }\n  return collisions;",
  "  let cars: [isize, isize] = [0, 0];\n  let collisions: isize = 0;\n  for i in\
    \ 0..n {\n    cars[0] = i;\n    for j in 0..n {\n      cars[1] = (n - 1) - j;\n\
    \      if cars[0] < cars[1] {\n        collisions += 1;\n      }\n    }\n  }\n\
    \  return collisions;", "  let cars: [isize, isize] = [0, 0];\n  let cars_left:\
    \ [isize, isize] = [0, 0];\n  let cars_right: [isize, isize] = [0, 0];\n  let\
    \ cars_left_left: [isize, isize] = [0, 0];\n  let cars_left_right: [isize, isize]\
    \ = [0, 0];\n  let cars_right_left: [isize, isize] = [0, 0];\n  let cars_right_right:\
    \ [isize, isize] = [0, 0];\n  let cars_left_left_left: [isize, isize] = [0, 0];\n\
    \  let cars_left_left_right: [isize, isize] = [0, 0];\n  let cars_left_right_left:\
    \ [isize, isize] = [0, 0];\n  let cars_left_right_right: [isize, isize] = [0,\
    \ 0];\n  let cars_right_left_left: [isize, isize] = [0, 0];\n  let cars_right_left_right:\
    \ [isize, isize] = [0, 0];\n  let cars_right_right_left: [isize, isize] = [0,\
    \ 0];\n  let cars_right_right_right: [isize, isize] = [0, 0];\n\n  for i in 0..n\
    \ {\n    cars[i] = i;\n    cars_left[i] = i;\n    cars_right[i] = i;\n    cars_left_left[i]\
    \ = i;\n    cars_left_right[i] = i;\n    cars_right_left[i] = i;\n    cars_right_right[i]\
    \ = i;\n    cars_left_left_left[i] = i;\n    cars_left_left_right[i] = i;\n  \
    \  cars_left_right_left[i] = i;\n    cars_left_right_right[i] = i;\n    cars_right_left_left[i]\
    \ = i;\n    cars_right_left_", "  let cars: [isize, isize] = [0, 0];\n  let collisions:\
    \ isize = 0;\n  for i in 0..n {\n    cars[0] = i;\n    for j in 0..n {\n     \
    \ cars[1] = j;\n      if cars[0] < cars[1] {\n        if cars[0] + 1 == cars[1]\
    \ {\n          collisions += 1;\n        }\n      } else {\n        if cars[0]\
    \ - 1 == cars[1] {\n          collisions += 1;\n        }\n      }\n    }\n  }\n\
    \  return collisions;", "  let cars = [0] * n;\n  let collisions = 0;\n  for i\
    \ in 0..n {\n    cars[i] = i;\n  }\n  for i in 0..n {\n    for j in 0..n {\n \
    \     if i < j {\n        if cars[i] + 1 == cars[j] {\n          collisions +=\
    \ 1;\n          cars[i] = cars[n - 1];\n          cars[j] = cars[0];\n       \
    \ }\n      }\n    }\n  }\n  return collisions;", "  let cars = [0] * n;\n  let\
    \ collisions = 0;\n  for i in 0..n {\n    cars[i] = i;\n  }\n  for i in 0..n {\n\
    \    for j in 0..n {\n      if i < j {\n        if cars[i] + 1 == cars[j] {\n\
    \          collisions += 1;\n          cars[i] = cars[n - 1];\n          cars[j]\
    \ = cars[0];\n        }\n      }\n    }\n  }\n  return collisions;", "  let cars:\
    \ [isize, isize] = [0, 0];\n  let collisions: isize = 0;\n  for i in 0..n {\n\
    \    cars[0] = i;\n    for j in 0..n {\n      cars[1] = (n - 1) - j;\n      if\
    \ cars[0] < cars[1] {\n        collisions += 1;\n      }\n    }\n  }\n  return\
    \ collisions;", "  let cars: [isize, isize] = [0, 0];\n  let collisions: isize\
    \ = 0;\n  for i in 0..n {\n    cars[0] = i;\n    for j in 0..n {\n      cars[1]\
    \ = j;\n      if cars[0] < cars[1] {\n        if cars[0] + 1 == cars[1] {\n  \
    \        collisions += 1;\n        } else {\n          cars[0] += 1;\n       \
    \ }\n      } else {\n        if cars[1] + 1 == cars[0] {\n          collisions\
    \ += 1;\n        } else {\n          cars[1] += 1;\n        }\n      }\n    }\n\
    \  }\n  return collisions;", "  let cars = make_array(n);\n  let collisions =\
    \ 0;\n  for (i in 0..n) {\n    cars[i] = i;\n  }\n  for (i in 0..n) {\n    for\
    \ (j in 0..n) {\n      if (i < j) {\n        if (cars[i] + 1 == cars[j]) {\n \
    \         collisions += 1;\n        }\n      }\n    }\n  }\n  return collisions;",
  "  let cars = [0] * n;\n  let collisions = 0;\n  for i in 0..n {\n    cars[i] =\
    \ i;\n  }\n  for i in 0..n {\n    for j in 0..n {\n      if i != j {\n       \
    \ if cars[i] < cars[j] {\n          cars[i] += 1;\n        } else if cars[i] >\
    \ cars[j] {\n          cars[j] += 1;\n        } else {\n          collisions +=\
    \ 1;\n        }\n      }\n    }\n  }\n  return collisions;", "  let cars_left\
    \ = n\n  let cars_right = n\n  let cars_left_count = 0\n  let cars_right_count\
    \ = 0\n  let cars_left_left = 0\n  let cars_left_right = 0\n  let cars_right_left\
    \ = 0\n  let cars_right_right = 0\n  let cars_left_left_count = 0\n  let cars_left_right_count\
    \ = 0\n  let cars_right_left_count = 0\n  let cars_right_right_count = 0\n  let\
    \ cars_left_left_left = 0\n  let cars_left_left_right = 0\n  let cars_left_right_left\
    \ = 0\n  let cars_left_right_right = 0\n  let cars_right_left_left = 0\n  let\
    \ cars_right_left_right = 0\n  let cars_right_right_left = 0\n  let cars_right_right_right\
    \ = 0\n  let cars_left_left_left_count = 0\n  let cars_left_left_right_count =\
    \ 0\n  let cars_left_right_left_count = 0\n  let cars_left_right_right_count =\
    \ 0\n  let cars_right_left_left_count = 0\n  let cars_right_left_right_count =\
    \ 0\n  let cars_right_right_left_count = 0\n  let cars_right_right_right_count\
    \ = 0\n  let cars_left_left_left_left = 0\n  let cars_left_left_left_right = 0\n\
    \  let cars_left_left_right_left = 0\n  let cars_left_left_right_right = 0\n \
    \ let cars_left_right_left_left = 0\n  let cars_left_right_left_right = 0\n  let\
    \ cars_left_right_right_left = 0\n  let cars_left_right_right_right = 0\n  let\
    \ cars_right_left_left_left = 0\n  let cars_right_left_left_right = 0\n  let cars_right_left_right_left\
    \ = 0\n  let cars_right_left_right_right = 0\n  let cars_right_right_left_left\
    \ =", "  let cars = [0] * n;\n  let collisions = 0;\n  for i in 0..n {\n    cars[i]\
    \ = i;\n  }\n  for i in 0..n {\n    for j in 0..n {\n      if i != j {\n     \
    \   if cars[i] < cars[j] {\n          cars[i] += 1;\n        } else if cars[i]\
    \ > cars[j] {\n          cars[i] -= 1;\n        } else {\n          collisions\
    \ += 1;\n        }\n      }\n    }\n  }\n  return collisions;", "  let cars =\
    \ [0] * n;\n  let collisions = 0;\n  for i in 0..n {\n    cars[i] = i;\n  }\n\
    \  for i in 0..n {\n    for j in 0..n {\n      if i != j {\n        if cars[i]\
    \ < cars[j] {\n          cars[i] += 1;\n        } else if cars[i] > cars[j] {\n\
    \          cars[i] -= 1;\n        } else {\n          collisions += 1;\n     \
    \   }\n      }\n    }\n  }\n  return collisions;", "  let cars = [0] * n;\n  let\
    \ collisions = 0;\n  for i in 0..n {\n    cars[i] = i;\n  }\n  for i in 0..n {\n\
    \    for j in 0..n {\n      if i < j {\n        if cars[i] < cars[j] {\n     \
    \     collisions += 1;\n          cars[i] = cars[j];\n        }\n      }\n   \
    \ }\n  }\n  return collisions;", "  let cars_left = n\n  let cars_right = n\n\
    \  let cars_left_pos = 0\n  let cars_right_pos = 0\n  let cars_left_speed = 1\n\
    \  let cars_right_speed = -1\n  let cars_left_collisions = 0\n  let cars_right_collisions\
    \ = 0\n  while cars_left > 0 || cars_right > 0 {\n    if cars_left > 0 {\n   \
    \   cars_left_pos += cars_left_speed\n      cars_left -= 1\n    }\n    if cars_right\
    \ > 0 {\n      cars_right_pos += cars_right_speed\n      cars_right -= 1\n   \
    \ }\n    if cars_left_pos > cars_right_pos {\n      cars_left_collisions += 1\n\
    \    } else if cars_right_pos > cars_left_pos {\n      cars_right_collisions +=\
    \ 1\n    }\n  }\n  return cars_left_collisions + cars_right_collisions", "  let\
    \ cars: [isize, isize] = [0, 0];\n  let collisions: isize = 0;\n  for i in 0..n\
    \ {\n    cars[0] = i;\n    for j in 0..n {\n      cars[1] = j;\n      if cars[0]\
    \ < cars[1] {\n        cars[0] += 1;\n      } else {\n        cars[0] -= 1;\n\
    \      }\n      if cars[0] == cars[1] {\n        collisions += 1;\n      }\n \
    \   }\n  }\n  return collisions;", "  let cars_left = n\n  let cars_right = n\n\
    \  let cars_left_pos = 0\n  let cars_right_pos = 0\n  let cars_left_speed = 1\n\
    \  let cars_right_speed = -1\n  let cars_left_collisions = 0\n  let cars_right_collisions\
    \ = 0\n  while cars_left > 0 || cars_right > 0 {\n    if cars_left > 0 {\n   \
    \   if cars_left_pos < cars_left_speed {\n        cars_left_pos += 1\n      }\
    \ else {\n        cars_left_pos = 0\n        cars_left -= 1\n      }\n    }\n\
    \    if cars_right > 0 {\n      if cars_right_pos < cars_right_speed {\n     \
    \   cars_right_pos += 1\n      } else {\n        cars_right_pos = 0\n        cars_right\
    \ -= 1\n      }\n    }\n    if cars_left_pos == cars_right_pos {\n      cars_left_collisions\
    \ += 1\n      cars_right_collisions += 1\n    }\n  }\n  return cars_left_collisions\
    \ + cars_right_collisions", "  let cars = [0] * n;\n  let collisions = 0;\n  for\
    \ i in 0..n {\n    cars[i] = i;\n  }\n  for i in 0..n {\n    for j in 0..n {\n\
    \      if i != j {\n        if cars[i] < cars[j] {\n          cars[i] += 1;\n\
    \        } else if cars[i] > cars[j] {\n          cars[j] += 1;\n        } else\
    \ {\n          collisions += 1;\n        }\n      }\n    }\n  }\n  return collisions;",
  "  let cars = [0] * n;\n  let collisions = 0;\n  for i in 0..n {\n    cars[i] =\
    \ i;\n  }\n  for i in 0..n {\n    for j in 0..n {\n      if i < j {\n        if\
    \ cars[i] + 1 == cars[j] {\n          collisions += 1;\n          cars[i] = cars[n\
    \ - 1];\n          cars[j] = cars[0];\n        }\n      }\n    }\n  }\n  return\
    \ collisions;", "  let cars = [0] * n\n  let collisions = 0\n  for i in 0..n {\n\
    \    cars[i] = i\n  }\n  for i in 0..n {\n    for j in 0..n {\n      if i != j\
    \ {\n        if cars[i] < cars[j] {\n          cars[i] += 1\n        } else if\
    \ cars[i] > cars[j] {\n          cars[i] -= 1\n        } else {\n          collisions\
    \ += 1\n        }\n      }\n    }\n  }\n  return collisions", "  let cars = [0]\
    \ * n;\n  let collisions = 0;\n  for i in 0..n {\n    cars[i] = i;\n  }\n  for\
    \ i in 0..n {\n    for j in 0..n {\n      if i < j {\n        if cars[i] + 1 ==\
    \ cars[j] {\n          cars[i] = cars[j] + 1;\n          collisions += 1;\n  \
    \      }\n      }\n    }\n  }\n  return collisions;", "  let cars = [0] * n;\n\
    \  let collisions = 0;\n  for i in 0..n {\n    cars[i] = i;\n  }\n  for i in 0..n\
    \ {\n    for j in 0..n {\n      if i != j {\n        if cars[i] < cars[j] {\n\
    \          cars[i] += 1;\n        } else if cars[i] > cars[j] {\n          cars[i]\
    \ -= 1;\n        } else {\n          collisions += 1;\n        }\n      }\n  \
    \  }\n  }\n  return collisions;", "  let cars = [0] * n;\n  let collisions = 0;\n\
    \  for i in 0..n {\n    cars[i] = i;\n  }\n  for i in 0..n {\n    for j in 0..n\
    \ {\n      if i < j {\n        if cars[i] < cars[j] {\n          cars[i] += 1;\n\
    \        } else {\n          cars[i] -= 1;\n        }\n      }\n    }\n  }\n \
    \ for i in 0..n {\n    if cars[i] != i {\n      collisions += 1;\n    }\n  }\n\
    \  return collisions;", "  let cars = [0] * n;\n  let collisions = 0;\n  for i\
    \ in 0..n {\n    cars[i] = i;\n  }\n  for i in 0..n {\n    for j in 0..n {\n \
    \     if i != j {\n        if cars[i] < cars[j] {\n          cars[i] += 1;\n \
    \       } else if cars[i] > cars[j] {\n          cars[i] -= 1;\n        } else\
    \ {\n          collisions += 1;\n        }\n      }\n    }\n  }\n  return collisions;",
  "  let cars: [isize, isize] = [0, 0];\n  let collisions: isize = 0;\n  for i in\
    \ 0..n {\n    cars[0] = i;\n    for j in 0..n {\n      cars[1] = j;\n      if\
    \ cars[0] < cars[1] {\n        if cars[0] + 1 == cars[1] {\n          collisions\
    \ += 1;\n        }\n      } else {\n        if cars[0] - 1 == cars[1] {\n    \
    \      collisions += 1;\n        }\n      }\n    }\n  }\n  return collisions;",
  "  let cars = [0] * n;\n  let collisions = 0;\n  for i in 0..n {\n    cars[i] =\
    \ i;\n  }\n  for i in 0..n {\n    for j in 0..n {\n      if i != j {\n       \
    \ if cars[i] < cars[j] {\n          cars[i] += 1;\n        } else if cars[i] >\
    \ cars[j] {\n          cars[i] -= 1;\n        } else {\n          collisions +=\
    \ 1;\n        }\n      }\n    }\n  }\n  return collisions;", "  let cars = [0]\
    \ * n;\n  let collisions = 0;\n  for i in 0..n {\n    cars[i] = i;\n  }\n  for\
    \ i in 0..n {\n    for j in 0..n {\n      if i != j {\n        if cars[i] + 1\
    \ == cars[j] {\n          collisions += 1;\n          cars[i] = cars[n - 1];\n\
    \          cars[j] = cars[0];\n        }\n      }\n    }\n  }\n  return collisions;",
  "  let cars = [0] * n;\n  let collisions = 0;\n  for i in 0..n {\n    cars[i] =\
    \ i;\n  }\n  for i in 0..n {\n    for j in 0..n {\n      if i < j {\n        if\
    \ cars[i] < cars[j] {\n          cars[i] += 1;\n        } else if cars[i] > cars[j]\
    \ {\n          cars[i] -= 1;\n        } else {\n          collisions += 1;\n \
    \       }\n      }\n    }\n  }\n  return collisions;", "  let cars = make(n, 0);\n\
    \  let collisions = 0;\n  let left_to_right = 0;\n  let right_to_left = 0;\n \
    \ let left_to_right_collisions = 0;\n  let right_to_left_collisions = 0;\n  for\
    \ i in 0..n {\n    cars[i] = i;\n  }\n  for i in 0..n {\n    let car_i = cars[i];\n\
    \    let car_i_left = car_i - 1;\n    let car_i_right = car_i + 1;\n    if car_i_left\
    \ < 0 {\n      car_i_left = n - 1;\n    }\n    if car_i_right >= n {\n      car_i_right\
    \ = 0;\n    }\n    if cars[car_i_left] < cars[car_i_right] {\n      left_to_right\
    \ += 1;\n      if cars[car_i_left] == cars[car_i_right] {\n        left_to_right_collisions\
    \ += 1;\n      }\n    } else if cars[car_i_left] > cars[car_i_right] {\n     \
    \ right_to_left += 1;\n      if cars[car_i_left] == cars[car_i_right] {\n    \
    \    right_to_left_collisions += 1;\n      }\n    }\n  }\n  collisions = left_to_right_collisions\
    \ + right_to_left_collisions;\n  return collisions;", "  let cars = [0] * n;\n\
    \  let collisions = 0;\n  for i in 0..n {\n    cars[i] = i;\n  }\n  for i in 0..n\
    \ {\n    for j in 0..n {\n      if i < j {\n        if cars[i] + 1 == cars[j]\
    \ {\n          collisions += 1;\n          cars[i] = cars[j] = i;\n          break;\n\
    \        }\n      }\n    }\n  }\n  return collisions;", "  let cars = [0] * n\n\
    \  let collisions = 0\n  for i in 0..n {\n    cars[i] = i\n  }\n  for i in 0..n\
    \ {\n    for j in 0..n {\n      if i < j {\n        if cars[i] + 1 == cars[j]\
    \ {\n          cars[i] = cars[j] + 1\n          collisions += 1\n        }\n \
    \     }\n    }\n  }\n  return collisions", "  let cars = [0] * n;\n  let collisions\
    \ = 0;\n  for i in 0..n {\n    cars[i] = i;\n  }\n  for i in 0..n {\n    for j\
    \ in 0..n {\n      if i != j {\n        if cars[i] < cars[j] {\n          cars[i]\
    \ += 1;\n        } else if cars[i] > cars[j] {\n          cars[j] += 1;\n    \
    \    } else {\n          collisions += 1;\n        }\n      }\n    }\n  }\n  return\
    \ collisions;", "  let cars = [0] * n\n  let collisions = 0\n  for i in 0..n {\n\
    \    cars[i] = i\n  }\n  for i in 0..n {\n    for j in 0..n {\n      if i != j\
    \ {\n        if cars[i] < cars[j] {\n          cars[i] += 1\n        } else if\
    \ cars[i] > cars[j] {\n          cars[i] -= 1\n        } else {\n          collisions\
    \ += 1\n        }\n      }\n    }\n  }\n  return collisions", "  let cars: [isize,\
    \ isize] = [0, 0];\n  let collisions: isize = 0;\n  for i in 0..n {\n    cars[0]\
    \ = i;\n    for j in 0..n {\n      cars[1] = j;\n      if cars[0] > cars[1] {\n\
    \        cars[0] -= 1;\n        cars[1] += 1;\n      } else {\n        cars[0]\
    \ += 1;\n        cars[1] -= 1;\n      }\n      if cars[0] == cars[1] {\n     \
    \   collisions += 1;\n      }\n    }\n  }\n  return collisions;", "  let cars\
    \ = make(n, 0);\n  let collisions = 0;\n  for i in 0..n {\n    cars[i] = i;\n\
    \  }\n  for i in 0..n {\n    for j in 0..n {\n      if i != j {\n        if cars[i]\
    \ < cars[j] {\n          collisions += 1;\n          cars[i] += 1;\n         \
    \ cars[j] -= 1;\n        } else {\n          cars[i] -= 1;\n          cars[j]\
    \ += 1;\n        }\n      }\n    }\n  }\n  return collisions;", "  let cars: [isize,\
    \ isize] = [0, 0];\n  let collisions: isize = 0;\n  for i in 0..n {\n    cars[0]\
    \ = i;\n    for j in 0..n {\n      cars[1] = j;\n      if cars[0] < cars[1] {\n\
    \        cars[0] += 1;\n      } else {\n        cars[0] -= 1;\n      }\n     \
    \ if cars[0] == cars[1] {\n        collisions += 1;\n      }\n    }\n  }\n  return\
    \ collisions;", "  let cars: [isize, isize] = [0, 0];\n  let collisions: isize\
    \ = 0;\n  for i in 0..n {\n    cars[0] = i;\n    for j in 0..n {\n      cars[1]\
    \ = j;\n      if cars[0] < cars[1] {\n        if cars[0] + 1 == cars[1] {\n  \
    \        collisions += 1;\n        }\n      } else if cars[0] > cars[1] {\n  \
    \      if cars[1] + 1 == cars[0] {\n          collisions += 1;\n        }\n  \
    \    }\n    }\n  }\n  return collisions;", "  let cars = [0] * n\n  let collisions\
    \ = 0\n  for i in 0..n {\n    cars[i] = i\n  }\n  for i in 0..n {\n    for j in\
    \ 0..n {\n      if i != j {\n        if cars[i] < cars[j] {\n          cars[i]\
    \ += 1\n        } else if cars[i] > cars[j] {\n          cars[i] -= 1\n      \
    \  } else {\n          collisions += 1\n        }\n      }\n    }\n  }\n  return\
    \ collisions", "  let cars: [isize, isize] = [0, 0];\n  let collisions: isize\
    \ = 0;\n  for i in 0..n {\n    cars[i] = i;\n  }\n  for i in 0..n {\n    for j\
    \ in 0..n {\n      if i != j {\n        if cars[i] < cars[j] {\n          cars[i]\
    \ += 1;\n        } else if cars[i] > cars[j] {\n          cars[j] += 1;\n    \
    \    } else {\n          collisions += 1;\n        }\n      }\n    }\n  }\n  return\
    \ collisions;", "  let cars_left = n\n  let cars_right = n\n  let cars_left_pos\
    \ = 0\n  let cars_right_pos = 0\n  let cars_left_speed = 1\n  let cars_right_speed\
    \ = -1\n  let cars_left_collisions = 0\n  let cars_right_collisions = 0\n  while\
    \ cars_left > 0 || cars_right > 0 {\n    if cars_left > 0 {\n      if cars_left_pos\
    \ + cars_left_speed < cars_right_pos {\n        cars_left_collisions += 1\n  \
    \      cars_left_pos += cars_left_speed\n        cars_left -= 1\n      } else\
    \ {\n        cars_left_pos += cars_left_speed\n        cars_left -= 1\n      }\n\
    \    }\n    if cars_right > 0 {\n      if cars_right_pos + cars_right_speed >\
    \ cars_left_pos {\n        cars_right_collisions += 1\n        cars_right_pos\
    \ += cars_right_speed\n        cars_right -= 1\n      } else {\n        cars_right_pos\
    \ += cars_right_speed\n        cars_right -= 1\n      }\n    }\n  }\n  return\
    \ cars_left_collisions + cars_right_collisions", "  let cars = [0] * n;\n  let\
    \ collisions = 0;\n  for i in 0..n {\n    cars[i] = i;\n  }\n  for i in 0..n {\n\
    \    for j in 0..n {\n      if i != j {\n        if cars[i] < cars[j] {\n    \
    \      cars[i] += 1;\n        } else if cars[i] > cars[j] {\n          cars[i]\
    \ -= 1;\n        } else {\n          collisions += 1;\n        }\n      }\n  \
    \  }\n  }\n  return collisions;", "  let cars: [isize, isize] = [0, 0];\n  let\
    \ collisions: isize = 0;\n  for i in 0..n {\n    cars[0] = i;\n    for j in 0..n\
    \ {\n      cars[1] = j;\n      if cars[0] < cars[1] {\n        if cars[0] + 1\
    \ == cars[1] {\n          collisions += 1;\n        } else {\n          cars[0]\
    \ += 1;\n        }\n      } else {\n        if cars[1] + 1 == cars[0] {\n    \
    \      collisions += 1;\n        } else {\n          cars[1] += 1;\n        }\n\
    \      }\n    }\n  }\n  return collisions;", "  let cars = [0] * n;\n  let collisions\
    \ = 0;\n  for i in 0..n {\n    cars[i] = i;\n  }\n  for i in 0..n {\n    for j\
    \ in 0..n {\n      if i != j {\n        if cars[i] < cars[j] {\n          cars[i]\
    \ += 1;\n        } else if cars[i] > cars[j] {\n          cars[i] -= 1;\n    \
    \    } else {\n          collisions += 1;\n        }\n      }\n    }\n  }\n  return\
    \ collisions;", "  let cars = [0] * n;\n  let collisions = 0;\n  for i in 0..n\
    \ {\n    cars[i] = i;\n  }\n  for i in 0..n {\n    for j in 0..n {\n      if i\
    \ < j {\n        if cars[i] + 1 == cars[j] {\n          collisions += 1;\n   \
    \       cars[i] = cars[n - 1];\n          cars[j] = cars[0];\n        }\n    \
    \  }\n    }\n  }\n  return collisions;", "  let cars = make(n, 0);\n  let collisions\
    \ = 0;\n  for i in 0..n {\n    cars[i] = i;\n  }\n  for i in 0..n {\n    for j\
    \ in 0..n {\n      if i != j {\n        let x = cars[i];\n        let y = cars[j];\n\
    \        let x_next = cars[(i + 1) % n];\n        let y_next = cars[(j + 1) %\
    \ n];\n        if x < y {\n          if x_next > y {\n            collisions +=\
    \ 1;\n          }\n        } else {\n          if y_next > x {\n            collisions\
    \ += 1;\n          }\n        }\n      }\n    }\n  }\n  return collisions;", " \
    \ let cars: [isize, isize] = [0, 0];\n  let collisions: isize = 0;\n  for i in\
    \ 0..n {\n    cars[0] = i;\n    for j in 0..n {\n      cars[1] = j;\n      if\
    \ cars[0] < cars[1] {\n        if cars[0] + 1 == cars[1] {\n          collisions\
    \ += 1;\n        }\n      } else if cars[0] > cars[1] {\n        if cars[1] +\
    \ 1 == cars[0] {\n          collisions += 1;\n        }\n      }\n    }\n  }\n\
    \  return collisions;", "  let cars = [0] * n\n  let collisions = 0\n  for i in\
    \ 0..n {\n    cars[i] = i\n  }\n  for i in 0..n {\n    for j in 0..n {\n     \
    \ if i < j {\n        if cars[i] + 1 == cars[j] {\n          collisions += 1\n\
    \          cars[i] = cars[n]\n          cars[j] = cars[n]\n        }\n      }\n\
    \    }\n  }\n  return collisions", "  let cars = [0] * n\n  let collisions = 0\n\
    \  for i in 0..n {\n    cars[i] = i\n  }\n  for i in 0..n {\n    for j in 0..n\
    \ {\n      if i != j {\n        if cars[i] < cars[j] {\n          cars[i] += 1\n\
    \        } else if cars[i] > cars[j] {\n          cars[j] += 1\n        } else\
    \ {\n          collisions += 1\n        }\n      }\n    }\n  }\n  return collisions",
  "  let cars: [isize, isize] = [0, 0];\n  let collisions: isize = 0;\n  for i in\
    \ 0..n {\n    cars[0] = i;\n    for j in 0..n {\n      cars[1] = j;\n      if\
    \ cars[0] < cars[1] {\n        if cars[0] + 1 == cars[1] {\n          collisions\
    \ += 1;\n        }\n      } else {\n        if cars[0] - 1 == cars[1] {\n    \
    \      collisions += 1;\n        }\n      }\n    }\n  }\n  return collisions;",
  "  let cars: [isize, isize] = [0, 0];\n  let collisions: isize = 0;\n  for i in\
    \ 0..n {\n    cars[0] = i;\n    for j in 0..n {\n      cars[1] = j;\n      if\
    \ cars[0] > cars[1] {\n        cars[0] -= 1;\n        cars[1] += 1;\n      } else\
    \ {\n        cars[0] += 1;\n        cars[1] -= 1;\n      }\n      if cars[0] ==\
    \ cars[1] {\n        collisions += 1;\n      }\n    }\n  }\n  return collisions;",
  "  let cars = [0] * n;\n  let collisions = 0;\n  for i in 0..n {\n    cars[i] =\
    \ i;\n  }\n  for i in 0..n {\n    for j in 0..n {\n      if i != j {\n       \
    \ if cars[i] < cars[j] {\n          cars[i] += 1;\n        } else if cars[i] >\
    \ cars[j] {\n          cars[i] -= 1;\n        } else {\n          collisions +=\
    \ 1;\n        }\n      }\n    }\n  }\n  return collisions;", "  let cars = [0]\
    \ * n;\n  let collisions = 0;\n  for i in 0..n {\n    cars[i] = i;\n  }\n  for\
    \ i in 0..n {\n    for j in 0..n {\n      if i < j {\n        if cars[i] + 1 ==\
    \ cars[j] {\n          collisions += 1;\n          cars[i] = cars[j];\n      \
    \  }\n      }\n    }\n  }\n  return collisions;", "  let cars = [0] * n;\n  let\
    \ collisions = 0;\n  for i in 0..n {\n    cars[i] = i;\n  }\n  for i in 0..n {\n\
    \    for j in 0..n {\n      if i != j {\n        if cars[i] < cars[j] {\n    \
    \      cars[i] += 1;\n        } else if cars[i] > cars[j] {\n          cars[j]\
    \ += 1;\n        } else {\n          collisions += 1;\n        }\n      }\n  \
    \  }\n  }\n  return collisions;", "  let cars = [0] * n;\n  let collisions = 0;\n\
    \  for i in 0..n {\n    cars[i] = i;\n  }\n  for i in 0..n {\n    for j in 0..n\
    \ {\n      if i != j {\n        if cars[i] < cars[j] {\n          cars[i] += 1;\n\
    \        } else if cars[i] > cars[j] {\n          cars[i] -= 1;\n        } else\
    \ {\n          collisions += 1;\n        }\n      }\n    }\n  }\n  return collisions;",
  "  let cars: [isize, isize] = [0, 0];\n  let collisions: isize = 0;\n  for i in\
    \ 0..n {\n    cars[0] = i;\n    for j in 0..n {\n      cars[1] = j;\n      if\
    \ cars[0] > cars[1] {\n        cars[0] -= 1;\n        cars[1] += 1;\n      } else\
    \ {\n        cars[0] += 1;\n        cars[1] -= 1;\n      }\n      if cars[0] ==\
    \ cars[1] {\n        collisions += 1;\n      }\n    }\n  }\n  return collisions;",
  "  let cars: [isize, isize] = [0, 0];\n  let collisions: isize = 0;\n  for i in\
    \ 0..n {\n    cars[0] = i;\n    for j in 0..n {\n      cars[1] = j;\n      if\
    \ cars[0] > cars[1] {\n        cars[0] -= 1;\n        cars[1] += 1;\n      } else\
    \ {\n        cars[0] += 1;\n        cars[1] -= 1;\n      }\n      if cars[0] ==\
    \ cars[1] {\n        collisions += 1;\n      }\n    }\n  }\n  return collisions;",
  "  let cars: [isize, isize] = [0, 0];\n  let collisions: isize = 0;\n  for i in\
    \ 0..n {\n    cars[0] = i;\n    for j in 0..n {\n      cars[1] = (n - 1) - j;\n\
    \      if cars[0] > cars[1] {\n        collisions += 1;\n      }\n    }\n  }\n\
    \  return collisions;", "  let cars: [isize, isize] = [0, 0];\n  let collisions:\
    \ isize = 0;\n  for i in 0..n {\n    cars[0] = i;\n    for j in 0..n {\n     \
    \ cars[1] = j;\n      if cars[0] < cars[1] {\n        cars[0] += 1;\n      } else\
    \ {\n        cars[0] -= 1;\n      }\n      if cars[0] == cars[1] {\n        collisions\
    \ += 1;\n      }\n    }\n  }\n  return collisions;", "  let cars: [isize, isize]\
    \ = [0, 0];\n  let collisions: isize = 0;\n  for i in 0..n {\n    cars[0] = i;\n\
    \    for j in 0..n {\n      cars[1] = j;\n      if cars[0] < cars[1] {\n     \
    \   cars[0] += 1;\n      } else {\n        cars[0] -= 1;\n      }\n      if cars[0]\
    \ == cars[1] {\n        collisions += 1;\n      }\n    }\n  }\n  return collisions;",
  "  let cars: [isize, isize] = [0, 0];\n  let collisions: isize = 0;\n  for i in\
    \ 0..n {\n    cars[0] = i;\n    for j in 0..n {\n      cars[1] = j;\n      if\
    \ cars[0] > cars[1] {\n        cars[0] -= 1;\n        cars[1] += 1;\n      } else\
    \ {\n        cars[0] += 1;\n        cars[1] -= 1;\n      }\n      if cars[0] ==\
    \ cars[1] {\n        collisions += 1;\n      }\n    }\n  }\n  return collisions;",
  "  let cars = [0] * n;\n  let collisions = 0;\n  for i in 0..n {\n    cars[i] =\
    \ i;\n  }\n  for i in 0..n {\n    for j in 0..n {\n      if i != j {\n       \
    \ if cars[i] + 1 == cars[j] {\n          collisions += 1;\n          cars[i] =\
    \ cars[j];\n        }\n      }\n    }\n  }\n  return collisions;", "  let cars\
    \ = [0] * n;\n  let collisions = 0;\n  for i in 0..n {\n    cars[i] = i;\n  }\n\
    \  for i in 0..n {\n    for j in 0..n {\n      if i < j {\n        if cars[i]\
    \ + 1 == cars[j] {\n          collisions += 1;\n          cars[i] = cars[n - 1];\n\
    \          cars[j] = cars[0];\n        }\n      }\n    }\n  }\n  return collisions;",
  "  let cars: [isize, isize] = [0, 0];\n  let collisions: isize = 0;\n  for i in\
    \ 0..n {\n    cars[0] = i;\n    for j in 0..n {\n      cars[1] = j;\n      if\
    \ cars[0] < cars[1] {\n        if cars[0] + 1 == cars[1] {\n          collisions\
    \ += 1;\n        }\n      } else {\n        if cars[0] - 1 == cars[1] {\n    \
    \      collisions += 1;\n        }\n      }\n    }\n  }\n  return collisions;",
  "  let cars: [isize, isize] = [0, 0];\n  let collisions: isize = 0;\n  for i in\
    \ 0..n {\n    cars[0] = i;\n    for j in 0..n {\n      cars[1] = j;\n      if\
    \ cars[0] < cars[1] {\n        if cars[0] + 1 == cars[1] {\n          collisions\
    \ += 1;\n        } else {\n          cars[0] += 1;\n        }\n      } else {\n\
    \        if cars[1] + 1 == cars[0] {\n          collisions += 1;\n        } else\
    \ {\n          cars[1] += 1;\n        }\n      }\n    }\n  }\n  return collisions;",
  "  let cars = [0] * n;\n  let collisions = 0;\n  for i in 0..n {\n    cars[i] =\
    \ i;\n  }\n  for i in 0..n {\n    for j in 0..n {\n      if i != j {\n       \
    \ if cars[i] < cars[j] {\n          cars[i] += 1;\n        } else if cars[i] >\
    \ cars[j] {\n          cars[i] -= 1;\n        } else {\n          collisions +=\
    \ 1;\n        }\n      }\n    }\n  }\n  return collisions;", "  let cars = [0]\
    \ * n;\n  let collisions = 0;\n  for i in 0..n {\n    cars[i] = i;\n  }\n  for\
    \ i in 0..n {\n    for j in 0..n {\n      if i != j {\n        if cars[i] < cars[j]\
    \ {\n          cars[i] += 1;\n        } else if cars[i] > cars[j] {\n        \
    \  cars[j] += 1;\n        } else {\n          collisions += 1;\n        }\n  \
    \    }\n    }\n  }\n  return collisions;", "  let cars: [isize, isize] = [0, 0];\n\
    \  let collisions: isize = 0;\n  for i in 0..n {\n    cars[0] = i;\n    for j\
    \ in 0..n {\n      cars[1] = j;\n      if cars[0] < cars[1] {\n        cars[0]\
    \ += 1;\n      } else {\n        cars[0] -= 1;\n      }\n      if cars[0] == cars[1]\
    \ {\n        collisions += 1;\n      }\n    }\n  }\n  return collisions;", " \
    \ let cars: [isize, isize] = [0, 0];\n  let collisions: isize = 0;\n  for i in\
    \ 0..n {\n    cars[0] = i;\n    for j in 0..n {\n      cars[1] = j;\n      if\
    \ cars[0] < cars[1] {\n        if cars[0] + 1 == cars[1] {\n          collisions\
    \ += 1;\n        }\n      } else {\n        if cars[0] - 1 == cars[1] {\n    \
    \      collisions += 1;\n        }\n      }\n    }\n  }\n  return collisions;",
  "  let cars = [0] * n;\n  let collisions = 0;\n  for i in 0..n {\n    cars[i] =\
    \ i;\n  }\n  for i in 0..n {\n    for j in 0..n {\n      if i != j {\n       \
    \ if cars[i] < cars[j] {\n          cars[i] += 1;\n        } else if cars[i] >\
    \ cars[j] {\n          cars[j] += 1;\n        } else {\n          collisions +=\
    \ 1;\n        }\n      }\n    }\n  }\n  return collisions;", "  let cars: [isize,\
    \ isize] = [0, 0];\n  let collisions: isize = 0;\n  for i in 0..n {\n    cars[0]\
    \ = i;\n    for j in 0..n {\n      cars[1] = j;\n      if cars[0] < cars[1] {\n\
    \        if cars[0] + 1 == cars[1] {\n          collisions += 1;\n        }\n\
    \      } else {\n        if cars[0] - 1 == cars[1] {\n          collisions +=\
    \ 1;\n        }\n      }\n    }\n  }\n  return collisions;", "  let cars = [0]\
    \ * n;\n  let collisions = 0;\n  for i in 0..n {\n    cars[i] = i;\n  }\n  for\
    \ i in 0..n {\n    for j in 0..n {\n      if i != j {\n        if cars[i] < cars[j]\
    \ {\n          cars[i] += 1;\n        } else if cars[i] > cars[j] {\n        \
    \  cars[i] -= 1;\n        } else {\n          collisions += 1;\n        }\n  \
    \    }\n    }\n  }\n  return collisions;", "  let cars: [isize, isize] = [0, 0];\n\
    \  let collisions: isize = 0;\n  for i in 0..n {\n    cars[0] = i;\n    for j\
    \ in 0..n {\n      cars[1] = j;\n      if cars[0] > cars[1] {\n        cars[0]\
    \ -= 1;\n        cars[1] += 1;\n      } else if cars[0] < cars[1] {\n        cars[0]\
    \ += 1;\n        cars[1] -= 1;\n      } else {\n        collisions += 1;\n   \
    \   }\n    }\n  }\n  return collisions;", "  let cars = [0] * n;\n  let collisions\
    \ = 0;\n  for i in 0..n {\n    cars[i] = i;\n  }\n  for i in 0..n {\n    for j\
    \ in 0..n {\n      if i != j {\n        if cars[i] < cars[j] {\n          cars[i]\
    \ += 1;\n        } else if cars[i] > cars[j] {\n          cars[j] += 1;\n    \
    \    } else {\n          collisions += 1;\n        }\n      }\n    }\n  }\n  return\
    \ collisions;", "  let cars_left = n\n  let cars_right = n\n  let cars_left_pos\
    \ = 0\n  let cars_right_pos = 0\n  let cars_left_vel = 1\n  let cars_right_vel\
    \ = -1\n  let cars_left_collisions = 0\n  let cars_right_collisions = 0\n  while\
    \ cars_left > 0 || cars_right > 0 {\n    if cars_left > 0 {\n      cars_left_pos\
    \ += cars_left_vel\n      cars_left -= 1\n    }\n    if cars_right > 0 {\n   \
    \   cars_right_pos += cars_right_vel\n      cars_right -= 1\n    }\n    if cars_left_pos\
    \ > cars_right_pos {\n      cars_left_collisions += 1\n    } else if cars_left_pos\
    \ < cars_right_pos {\n      cars_right_collisions += 1\n    }\n  }\n  return cars_left_collisions\
    \ + cars_right_collisions", "  let cars: [isize, isize] = [0, 0];\n  let collisions:\
    \ isize = 0;\n  for i in 0..n {\n    cars[0] = i;\n    for j in 0..n {\n     \
    \ cars[1] = j;\n      if cars[0] < cars[1] {\n        if cars[0] + 1 == cars[1]\
    \ {\n          collisions += 1;\n        }\n      } else {\n        if cars[0]\
    \ - 1 == cars[1] {\n          collisions += 1;\n        }\n      }\n    }\n  }\n\
    \  return collisions;", "  let cars: [isize, isize] = [0, 0];\n  let collisions:\
    \ isize = 0;\n  for i in 0..n {\n    cars[0] = i;\n    for j in 0..n {\n     \
    \ cars[1] = j;\n      if cars[0] > cars[1] {\n        collisions += 1;\n     \
    \ }\n    }\n  }\n  return collisions;", "  let cars = [0] * n\n  let collisions\
    \ = 0\n  for i in 0..n {\n    cars[i] = i\n  }\n  for i in 0..n {\n    for j in\
    \ 0..n {\n      if i < j {\n        if cars[i] + 1 == cars[j] {\n          collisions\
    \ += 1\n          cars[i] = cars[j]\n        }\n      }\n    }\n  }\n  return\
    \ collisions", "  let cars = [0] * n;\n  let collisions = 0;\n  for i in 0..n\
    \ {\n    cars[i] = i;\n  }\n  for i in 0..n {\n    for j in 0..n {\n      if i\
    \ != j {\n        if cars[i] + cars[j] == 0 {\n          collisions += 1;\n  \
    \      }\n      }\n    }\n  }\n  return collisions;", "  let cars = [0] * n;\n\
    \  let collisions = 0;\n  for i in 0..n {\n    cars[i] = i;\n  }\n  for i in 0..n\
    \ {\n    for j in 0..n {\n      if i < j {\n        if cars[i] + 1 == cars[j]\
    \ {\n          collisions += 1;\n          cars[i] = cars[n - 1];\n          cars[j]\
    \ = cars[0];\n        }\n      }\n    }\n  }\n  return collisions;", "  let cars:\
    \ [isize, isize] = [0, 0];\n  let collisions: isize = 0;\n  for i in 0..n {\n\
    \    cars[0] = i;\n    for j in 0..n {\n      cars[1] = j;\n      if cars[0] <\
    \ cars[1] {\n        if cars[0] + 1 == cars[1] {\n          collisions += 1;\n\
    \        } else {\n          collisions += car_race_collision(cars[1] - cars[0]);\n\
    \        }\n      } else {\n        if cars[1] + 1 == cars[0] {\n          collisions\
    \ += 1;\n        } else {\n          collisions += car_race_collision(cars[0]\
    \ - cars[1]);\n        }\n      }\n    }\n  }\n  return collisions;", "  let cars:\
    \ [isize, isize] = [0, 0];\n  let collisions: isize = 0;\n  for i in 0..n {\n\
    \    cars[0] = i;\n    for j in 0..n {\n      cars[1] = j;\n      if cars[0] >\
    \ cars[1] {\n        cars[0] -= 1;\n        cars[1] += 1;\n      } else {\n  \
    \      cars[0] += 1;\n        cars[1] -= 1;\n      }\n      if cars[0] == cars[1]\
    \ {\n        collisions += 1;\n      }\n    }\n  }\n  return collisions;", " \
    \ let cars = [0] * n;\n  let collisions = 0;\n  for i in 0..n {\n    cars[i] =\
    \ i;\n  }\n  for i in 0..n {\n    for j in 0..n {\n      if i != j {\n       \
    \ if cars[i] + 1 == cars[j] {\n          collisions += 1;\n          cars[i] =\
    \ cars[j];\n        }\n      }\n    }\n  }\n  return collisions;", "  let cars\
    \ = [0] * n;\n  let collisions = 0;\n  for i in 0..n {\n    cars[i] = i;\n  }\n\
    \  for i in 0..n {\n    for j in 0..n {\n      if i != j {\n        if cars[i]\
    \ < cars[j] {\n          cars[i] += 1;\n        } else if cars[i] > cars[j] {\n\
    \          cars[i] -= 1;\n        } else {\n          collisions += 1;\n     \
    \   }\n      }\n    }\n  }\n  return collisions;", "  let cars: [isize, isize]\
    \ = [0, 0];\n  let collisions: isize = 0;\n  for i in 0..n {\n    cars[0] = i;\n\
    \    for j in 0..n {\n      cars[1] = j;\n      if cars[0] > cars[1] {\n     \
    \   cars[0] -= 1;\n        cars[1] += 1;\n      } else {\n        cars[0] += 1;\n\
    \        cars[1] -= 1;\n      }\n      if cars[0] == cars[1] {\n        collisions\
    \ += 1;\n      }\n    }\n  }\n  return collisions;", "  let cars = [0] * n;\n\
    \  let collisions = 0;\n  for i in 0..n {\n    cars[i] = i;\n  }\n  for i in 0..n\
    \ {\n    for j in 0..n {\n      if i < j {\n        if cars[i] + 1 == cars[j]\
    \ {\n          collisions += 1;\n          cars[i] = cars[j] + 1;\n        }\n\
    \      }\n    }\n  }\n  return collisions;", "  let cars: [isize, isize] = [0,\
    \ 0];\n  let collisions: isize = 0;\n  for i in 0..n {\n    cars[0] = i;\n   \
    \ for j in 0..n {\n      cars[1] = (n - 1) - j;\n      if cars[0] > cars[1] {\n\
    \        collisions += 1;\n      }\n    }\n  }\n  return collisions;", "  let\
    \ cars: [isize, isize] = [0, 0];\n  let collisions: isize = 0;\n  for i in 0..n\
    \ {\n    cars[0] = i;\n    for j in 0..n {\n      cars[1] = j;\n      if cars[0]\
    \ < cars[1] {\n        if cars[0] + 1 == cars[1] {\n          collisions += 1;\n\
    \        } else {\n          cars[0] += 1;\n        }\n      } else {\n      \
    \  if cars[1] + 1 == cars[0] {\n          collisions += 1;\n        } else {\n\
    \          cars[1] += 1;\n        }\n      }\n    }\n  }\n  return collisions;",
  "  let cars: [isize, isize] = [0, 0];\n  let collisions: isize = 0;\n  for i in\
    \ 0..n {\n    cars[0] = i;\n    for j in 0..n {\n      cars[1] = j;\n      if\
    \ cars[0] < cars[1] {\n        if cars[0] + 1 == cars[1] {\n          collisions\
    \ += 1;\n        }\n      } else if cars[0] > cars[1] {\n        if cars[1] +\
    \ 1 == cars[0] {\n          collisions += 1;\n        }\n      }\n    }\n  }\n\
    \  return collisions;", "  let cars: [isize, isize] = [0, 0];\n  let cars_left:\
    \ [isize, isize] = [0, 0];\n  let cars_right: [isize, isize] = [0, 0];\n  let\
    \ cars_left_left: [isize, isize] = [0, 0];\n  let cars_right_right: [isize, isize]\
    \ = [0, 0];\n  let cars_left_right: [isize, isize] = [0, 0];\n  let cars_right_left:\
    \ [isize, isize] = [0, 0];\n  let cars_left_left_left: [isize, isize] = [0, 0];\n\
    \  let cars_right_right_right: [isize, isize] = [0, 0];\n  let cars_left_right_right:\
    \ [isize, isize] = [0, 0];\n  let cars_right_left_left: [isize, isize] = [0, 0];\n\
    \  let cars_left_left_left_left: [isize, isize] = [0, 0];\n  let cars_right_right_right_right:\
    \ [isize, isize] = [0, 0];\n  let cars_left_right_right_right: [isize, isize]\
    \ = [0, 0];\n  let cars_right_left_left_left: [isize, isize] = [0, 0];\n  let\
    \ cars_left_left_left_left_left: [isize, isize] = [0, 0];\n  let cars_right_right_right_right_right:\
    \ [isize, isize] = [0, 0];\n  let cars_left_right_right_right_right: [isize, isize]\
    \ = [0, 0];\n  let cars_right_left_left_left_left: [isize, isize] = [0, 0];\n\
    \  let cars_left_left_left_left_left_left: [isize, isize] = [0, 0];\n  let cars_right_right_right_right_right_right:\
    \ [isize, isize] =", "  let cars = [0] * n;\n  let collisions = 0;\n  for i in\
    \ 0..n {\n    cars[i] = i;\n  }\n  for i in 0..n {\n    for j in 0..n {\n    \
    \  if i == j {\n        continue;\n      }\n      if cars[i] < cars[j] {\n   \
    \     cars[i] += 1;\n      } else if cars[i] > cars[j] {\n        cars[i] -= 1;\n\
    \      } else {\n        collisions += 1;\n      }\n    }\n  }\n  return collisions;",
  "  let cars: [isize, isize] = [0, 0];\n  let collisions: isize = 0;\n  for i in\
    \ 0..n {\n    cars[0] = i;\n    for j in 0..n {\n      cars[1] = j;\n      if\
    \ cars[0] < cars[1] {\n        cars[0] += 1;\n      } else if cars[0] > cars[1]\
    \ {\n        cars[0] -= 1;\n      } else {\n        collisions += 1;\n      }\n\
    \    }\n  }\n  return collisions;", "  let cars: [isize, isize] = [0, 0];\n  let\
    \ cars_left: [isize, isize] = [0, 0];\n  let cars_right: [isize, isize] = [0,\
    \ 0];\n  let cars_left_left: [isize, isize] = [0, 0];\n  let cars_left_right:\
    \ [isize, isize] = [0, 0];\n  let cars_right_left: [isize, isize] = [0, 0];\n\
    \  let cars_right_right: [isize, isize] = [0, 0];\n  let cars_left_left_left:\
    \ [isize, isize] = [0, 0];\n  let cars_left_left_right: [isize, isize] = [0, 0];\n\
    \  let cars_left_right_left: [isize, isize] = [0, 0];\n  let cars_left_right_right:\
    \ [isize, isize] = [0, 0];\n  let cars_right_left_left: [isize, isize] = [0, 0];\n\
    \  let cars_right_left_right: [isize, isize] = [0, 0];\n  let cars_right_right_left:\
    \ [isize, isize] = [0, 0];\n  let cars_right_right_right: [isize, isize] = [0,\
    \ 0];\n  let cars_left_left_left_left: [isize, isize] = [0, 0];\n  let cars_left_left_left_right:\
    \ [isize, isize] = [0, 0];\n  let cars_left_left_right_left: [isize, isize] =\
    \ [0, 0];\n  let cars_left_left_right_right: [isize, isize] = [0, 0];\n  let cars_left_right_left_left:\
    \ [isize, isize] = [0, 0];\n  let cars_left_right_left_right: [isize, isize] =\
    \ [0, 0];\n  let cars_left_right_right_left: [isize, isize", "  let cars: [isize,\
    \ isize] = [0, 0];\n  let collisions: isize = 0;\n  for i in 0..n {\n    cars[0]\
    \ = i;\n    for j in 0..n {\n      cars[1] = j;\n      if cars[0] < cars[1] {\n\
    \        if cars[0] + 1 == cars[1] {\n          collisions += 1;\n        }\n\
    \      } else {\n        if cars[0] - 1 == cars[1] {\n          collisions +=\
    \ 1;\n        }\n      }\n    }\n  }\n  return collisions;", "  let cars: [isize,\
    \ isize] = [0, 0];\n  let cars_left: [isize, isize] = [0, 0];\n  let cars_right:\
    \ [isize, isize] = [0, 0];\n  let cars_left_left: [isize, isize] = [0, 0];\n \
    \ let cars_right_right: [isize, isize] = [0, 0];\n  let cars_left_right: [isize,\
    \ isize] = [0, 0];\n  let cars_right_left: [isize, isize] = [0, 0];\n\n  for i\
    \ in 0..n {\n    cars[0] = i;\n    cars_left[0] = i;\n    cars_right[0] = n -\
    \ i - 1;\n    for j in 1..n {\n      cars[j] = n - j;\n      cars_left[j] = n\
    \ - j - 1;\n      cars_right[j] = j - 1;\n    }\n    for j in 0..n {\n      for\
    \ k in 0..n {\n        if (cars[j] == cars[k]) {\n          if (j < k) {\n   \
    \         cars_left_left[j] = cars_left_left[j] + 1;\n          } else {\n   \
    \         cars_right_right[j] = cars_right_right[j] + 1;\n          }\n      \
    \  }\n        if (cars[j] == cars[k] + 1) {\n          if (j < k) {\n        \
    \    cars_left_right[j] = cars_left_right[j] + 1;\n          } else {\n      \
    \      cars_right_left[j] = cars_right_left[j] + 1;\n          }\n        }\n\
    \      }\n    }\n  }\n  let collisions: isize = 0;\n  for j in 0..n {\n    if\
    \ (cars_left_left[j] > 0) {\n      collisions = collisions + 1;\n    }\n    if\
    \ (cars_right_right[j] > 0) {\n      collisions = collisions + 1;\n    }\n  }\n\
    \  return collisions;", "  let cars: [isize, isize] = [0, 0];\n  let collisions:\
    \ isize = 0;\n  for i in 0..n {\n    cars[0] = i;\n    for j in 0..n {\n     \
    \ cars[1] = j;\n      if cars[0] > cars[1] {\n        cars[0] -= 1;\n        cars[1]\
    \ += 1;\n      } else {\n        cars[0] += 1;\n        cars[1] -= 1;\n      }\n\
    \      if cars[0] == cars[1] {\n        collisions += 1;\n      }\n    }\n  }\n\
    \  return collisions;", "  let cars: [isize, isize] = [0, 0];\n  let collisions:\
    \ isize = 0;\n  for i in 0..n {\n    cars[0] = i;\n    for j in 0..n {\n     \
    \ cars[1] = j;\n      if cars[0] < cars[1] {\n        if cars[0] + 1 == cars[1]\
    \ {\n          collisions += 1;\n        }\n      } else {\n        if cars[0]\
    \ - 1 == cars[1] {\n          collisions += 1;\n        }\n      }\n    }\n  }\n\
    \  return collisions;", "  let cars: [isize, isize] = [0, 0];\n  let collisions:\
    \ isize = 0;\n  for i in 0..n {\n    cars[0] = i;\n    for j in 0..n {\n     \
    \ cars[1] = j;\n      if cars[0] > cars[1] {\n        collisions += 1;\n     \
    \ }\n    }\n  }\n  return collisions;", "  let cars = [0] * n;\n  let collisions\
    \ = 0;\n  for i in 0..n {\n    cars[i] = i;\n  }\n  for i in 0..n {\n    for j\
    \ in 0..n {\n      if i != j {\n        if cars[i] < cars[j] {\n          cars[i]\
    \ += 1;\n        } else if cars[i] > cars[j] {\n          cars[i] -= 1;\n    \
    \    } else {\n          collisions += 1;\n        }\n      }\n    }\n  }\n  return\
    \ collisions;", "  let cars: [isize, isize] = [0, 0];\n  let collisions: isize\
    \ = 0;\n  for i in 0..n {\n    cars[0] = i;\n    for j in 0..n {\n      cars[1]\
    \ = j;\n      if cars[0] > cars[1] {\n        cars[0] -= 1;\n        cars[1] +=\
    \ 1;\n      } else {\n        cars[0] += 1;\n        cars[1] -= 1;\n      }\n\
    \      if cars[0] == cars[1] {\n        collisions += 1;\n      }\n    }\n  }\n\
    \  return collisions;", "  let cars: [isize, isize] = [0, 0];\n  let collisions:\
    \ isize = 0;\n  for i in 0..n {\n    cars[0] = i;\n    cars[1] = n - i - 1;\n\
    \    if cars[0] > cars[1] {\n      cars[0], cars[1] = cars[1], cars[0];\n    }\n\
    \    if cars[0] == cars[1] {\n      collisions += 1;\n    }\n  }\n  return collisions;",
  "  let cars = [0] * n;\n  let collisions = 0;\n  for i in 0..n {\n    cars[i] =\
    \ i;\n  }\n  for i in 0..n {\n    for j in 0..n {\n      if i == j {\n       \
    \ continue;\n      }\n      if cars[i] < cars[j] {\n        cars[i] += 1;\n  \
    \    } else if cars[i] > cars[j] {\n        cars[i] -= 1;\n      } else {\n  \
    \      collisions += 1;\n      }\n    }\n  }\n  return collisions;", "  let cars\
    \ = [0] * n;\n  let collisions = 0;\n  for i in 0..n {\n    cars[i] = i;\n  }\n\
    \  for i in 0..n {\n    for j in 0..n {\n      if i != j {\n        if cars[i]\
    \ < cars[j] {\n          cars[i] += 1;\n        } else if cars[i] > cars[j] {\n\
    \          cars[j] += 1;\n        } else {\n          collisions += 1;\n     \
    \   }\n      }\n    }\n  }\n  return collisions;", "  let cars: [isize, isize]\
    \ = [0, 0];\n  let collisions: isize = 0;\n  for i in 0..n {\n    cars[0] = i;\n\
    \    for j in 0..n {\n      cars[1] = j;\n      if cars[0] < cars[1] {\n     \
    \   if cars[0] + 1 == cars[1] {\n          collisions += 1;\n        }\n     \
    \ } else if cars[0] > cars[1] {\n        if cars[1] + 1 == cars[0] {\n       \
    \   collisions += 1;\n        }\n      }\n    }\n  }\n  return collisions;", " \
    \ let cars = [0] * n;\n  let collisions = 0;\n  for i in 0..n {\n    cars[i] =\
    \ i;\n  }\n  for i in 0..n {\n    for j in 0..n {\n      if i != j {\n       \
    \ if cars[i] < cars[j] {\n          cars[i] += 1;\n        } else if cars[i] >\
    \ cars[j] {\n          cars[i] -= 1;\n        } else {\n          collisions +=\
    \ 1;\n        }\n      }\n    }\n  }\n  return collisions;", "  let cars: [isize,\
    \ isize] = [0, 0];\n  let cars_left: [isize, isize] = [0, 0];\n  let cars_right:\
    \ [isize, isize] = [0, 0];\n  let cars_left_left: [isize, isize] = [0, 0];\n \
    \ let cars_left_right: [isize, isize] = [0, 0];\n  let cars_right_left: [isize,\
    \ isize] = [0, 0];\n  let cars_right_right: [isize, isize] = [0, 0];\n  let cars_left_left_left:\
    \ [isize, isize] = [0, 0];\n  let cars_left_left_right: [isize, isize] = [0, 0];\n\
    \  let cars_left_right_left: [isize, isize] = [0, 0];\n  let cars_left_right_right:\
    \ [isize, isize] = [0, 0];\n  let cars_right_left_left: [isize, isize] = [0, 0];\n\
    \  let cars_right_left_right: [isize, isize] = [0, 0];\n  let cars_right_right_left:\
    \ [isize, isize] = [0, 0];\n  let cars_right_right_right: [isize, isize] = [0,\
    \ 0];\n  let cars_left_left_left_left: [isize, isize] = [0, 0];\n  let cars_left_left_left_right:\
    \ [isize, isize] = [0, 0];\n  let cars_left_left_right_left: [isize, isize] =\
    \ [0, 0];\n  let cars_left_left_right_right: [isize, isize] = [0, 0];\n  let cars_left_right_left_left:\
    \ [isize, isize] = [0, 0];\n  let cars_left_right_left_right: [isize, isize] =\
    \ [0, 0];\n  let cars_left_right_right_left: [isize, isize", "  let cars: [isize,\
    \ isize] = [0, 0];\n  let collisions: isize = 0;\n  for i in 0..n {\n    cars[0]\
    \ = i;\n    for j in 0..n {\n      cars[1] = j;\n      if cars[0] < cars[1] {\n\
    \        if cars[0] + 1 == cars[1] {\n          collisions += 1;\n        }\n\
    \      } else {\n        if cars[0] - 1 == cars[1] {\n          collisions +=\
    \ 1;\n        }\n      }\n    }\n  }\n  return collisions;", "  let cars: [isize,\
    \ isize] = [0, 0];\n  let collisions: isize = 0;\n  for i in 0..n {\n    cars[0]\
    \ = i;\n    for j in 0..n {\n      cars[1] = j;\n      if cars[0] < cars[1] {\n\
    \        if cars[0] + 1 == cars[1] {\n          collisions += 1;\n        }\n\
    \      } else {\n        if cars[0] - 1 == cars[1] {\n          collisions +=\
    \ 1;\n        }\n      }\n    }\n  }\n  return collisions;", "  let cars: [isize,\
    \ isize] = [0, 0];\n  let collisions: isize = 0;\n  for i in 0..n {\n    cars[0]\
    \ = i;\n    for j in 0..n {\n      cars[1] = j;\n      if cars[0] < cars[1] {\n\
    \        if cars[0] + 1 == cars[1] {\n          collisions += 1;\n        }\n\
    \      } else {\n        if cars[0] - 1 == cars[1] {\n          collisions +=\
    \ 1;\n        }\n      }\n    }\n  }\n  return collisions;", "  let cars: [isize,\
    \ isize] = [0, 0];\n  let collisions: isize = 0;\n  for i in 0..n {\n    cars[0]\
    \ = i;\n    for j in 0..n {\n      cars[1] = j;\n      if cars[0] < cars[1] {\n\
    \        cars[0] += 1;\n      } else {\n        cars[0] -= 1;\n      }\n     \
    \ if cars[0] == cars[1] {\n        collisions += 1;\n      }\n    }\n  }\n  return\
    \ collisions;", "  let cars: [isize, isize] = [0, 0];\n  let collisions: isize\
    \ = 0;\n  for i in 0..n {\n    cars[0] = i;\n    for j in 0..n {\n      cars[1]\
    \ = j;\n      if cars[0] < cars[1] {\n        cars[0] += 1;\n      } else {\n\
    \        cars[0] -= 1;\n      }\n      if cars[0] == cars[1] {\n        collisions\
    \ += 1;\n      }\n    }\n  }\n  return collisions;", "  let cars: [isize, isize]\
    \ = [0, 0];\n  let collisions: isize = 0;\n  let car_idx: isize = 0;\n  let car_idx_next:\
    \ isize = 0;\n  let car_idx_prev: isize = 0;\n  let car_idx_prev_next: isize =\
    \ 0;\n  let car_idx_next_prev: isize = 0;\n  let car_idx_prev_next_next: isize\
    \ = 0;\n  let car_idx_next_prev_next: isize = 0;\n  let car_idx_prev_next_prev:\
    \ isize = 0;\n  let car_idx_next_prev_prev: isize = 0;\n  let car_idx_prev_next_prev_prev:\
    \ isize = 0;\n  let car_idx_next_prev_prev_prev: isize = 0;\n  let car_idx_prev_next_prev_prev_prev:\
    \ isize = 0;\n  let car_idx_next_prev_prev_prev_prev_prev: isize = 0;\n  let car_idx_prev_next_prev_prev_prev_prev_prev:\
    \ isize = 0;\n  let car_idx_next_prev_prev_prev_prev_prev_prev_prev: isize = 0;\n\
    \  let car_idx_prev_next_prev_prev_prev_prev_prev_prev_prev: isize = 0;\n  let\
    \ car_idx_next_prev_prev_prev_prev_prev_prev_prev_prev_prev: isize = 0;\n  let\
    \ car_idx_prev_next_prev_prev_prev_prev_prev_prev_prev_prev_prev: isize = 0;\n\
    \  let car_idx_next_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev: isize\
    \ = 0;\n  let car_idx_prev_next_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev:\
    \ isize = 0;\n  let car_idx_next_prev", "  let cars: [isize, isize] = [0, 0];\n\
    \  let cars_left: [isize, isize] = [0, 0];\n  let cars_right: [isize, isize] =\
    \ [0, 0];\n  let cars_left_left: [isize, isize] = [0, 0];\n  let cars_left_right:\
    \ [isize, isize] = [0, 0];\n  let cars_right_left: [isize, isize] = [0, 0];\n\
    \  let cars_right_right: [isize, isize] = [0, 0];\n  let cars_left_left_left:\
    \ [isize, isize] = [0, 0];\n  let cars_left_left_right: [isize, isize] = [0, 0];\n\
    \  let cars_left_right_left: [isize, isize] = [0, 0];\n  let cars_left_right_right:\
    \ [isize, isize] = [0, 0];\n  let cars_right_left_left: [isize, isize] = [0, 0];\n\
    \  let cars_right_left_right: [isize, isize] = [0, 0];\n  let cars_right_right_left:\
    \ [isize, isize] = [0, 0];\n  let cars_right_right_right: [isize, isize] = [0,\
    \ 0];\n  let cars_left_left_left_left: [isize, isize] = [0, 0];\n  let cars_left_left_left_right:\
    \ [isize, isize] = [0, 0];\n  let cars_left_left_right_left: [isize, isize] =\
    \ [0, 0];\n  let cars_left_left_right_right: [isize, isize] = [0, 0];\n  let cars_left_right_left_left:\
    \ [isize, isize] = [0, 0];\n  let cars_left_right_left_right: [isize, isize] =\
    \ [0, 0];\n  let cars_left_right_right_left: [isize, isize", "  let cars = [0]\
    \ * n;\n  let collisions = 0;\n  for i in 0..n {\n    cars[i] = i;\n  }\n  for\
    \ i in 0..n {\n    for j in 0..n {\n      if i != j {\n        if cars[i] < cars[j]\
    \ {\n          cars[i] += 1;\n        } else if cars[i] > cars[j] {\n        \
    \  cars[i] -= 1;\n        } else {\n          collisions += 1;\n        }\n  \
    \    }\n    }\n  }\n  return collisions;", "  let cars = [0] * n\n  let collisions\
    \ = 0\n  for i in 0..n {\n    cars[i] = i\n  }\n  for i in 0..n {\n    for j in\
    \ 0..n {\n      if i != j {\n        if cars[i] < cars[j] {\n          cars[i]\
    \ += 1\n        } else if cars[i] > cars[j] {\n          cars[i] -= 1\n      \
    \  } else {\n          collisions += 1\n        }\n      }\n    }\n  }\n  return\
    \ collisions", "  let cars = [0] * n;\n  let collisions = 0;\n  for i in 0..n\
    \ {\n    cars[i] = i;\n  }\n  for i in 0..n {\n    for j in 0..n {\n      if i\
    \ != j {\n        if cars[i] < cars[j] {\n          cars[i] += 1;\n        } else\
    \ if cars[i] > cars[j] {\n          cars[i] -= 1;\n        } else {\n        \
    \  collisions += 1;\n        }\n      }\n    }\n  }\n  return collisions;", " \
    \ let cars = [0] * n;\n  let collisions = 0;\n  for i in 0..n {\n    cars[i] =\
    \ i;\n  }\n  for i in 0..n {\n    for j in 0..n {\n      if i != j {\n       \
    \ if cars[i] < cars[j] {\n          cars[i] += 1;\n        } else if cars[i] >\
    \ cars[j] {\n          cars[i] -= 1;\n        } else {\n          collisions +=\
    \ 1;\n        }\n      }\n    }\n  }\n  return collisions;", "  let cars: [isize,\
    \ isize] = [0, 0];\n  let collisions: isize = 0;\n  for i in 0..n {\n    cars[0]\
    \ = i;\n    for j in 0..n {\n      cars[1] = j;\n      if cars[0] < cars[1] {\n\
    \        if cars[0] + 1 == cars[1] {\n          collisions += 1;\n        }\n\
    \      } else {\n        if cars[0] - 1 == cars[1] {\n          collisions +=\
    \ 1;\n        }\n      }\n    }\n  }\n  return collisions;", "  let cars: [isize,\
    \ isize] = [0, 0];\n  let collisions: isize = 0;\n  for i in 0..n {\n    cars[0]\
    \ = i;\n    for j in 0..n {\n      cars[1] = j;\n      if cars[0] > cars[1] {\n\
    \        cars[0] -= 1;\n        cars[1] += 1;\n      } else {\n        cars[0]\
    \ += 1;\n        cars[1] -= 1;\n      }\n      if cars[0] == cars[1] {\n     \
    \   collisions += 1;\n      }\n    }\n  }\n  return collisions;", "  let cars:\
    \ [isize, isize] = [0, 0];\n  let collisions: isize = 0;\n  for i in 0..n {\n\
    \    cars[0] = i;\n    for j in 0..n {\n      cars[1] = j;\n      if cars[0] <\
    \ cars[1] {\n        if cars[0] + 1 == cars[1] {\n          collisions += 1;\n\
    \        }\n      } else {\n        if cars[0] - 1 == cars[1] {\n          collisions\
    \ += 1;\n        }\n      }\n    }\n  }\n  return collisions;", "  let cars =\
    \ [0] * n;\n  let collisions = 0;\n  for i in 0..n {\n    cars[i] = i;\n  }\n\
    \  for i in 0..n {\n    for j in 0..n {\n      if i != j {\n        if cars[i]\
    \ < cars[j] {\n          cars[i] += 1;\n        } else if cars[i] > cars[j] {\n\
    \          cars[j] += 1;\n        } else {\n          collisions += 1;\n     \
    \   }\n      }\n    }\n  }\n  return collisions;", "  let cars = [0] * n;\n  let\
    \ collisions = 0;\n  for i in 0..n {\n    cars[i] = i;\n  }\n  for i in 0..n {\n\
    \    for j in 0..n {\n      if i == j {\n        continue;\n      }\n      if\
    \ cars[i] < cars[j] {\n        cars[i] += 1;\n      } else if cars[i] > cars[j]\
    \ {\n        cars[i] -= 1;\n      } else {\n        collisions += 1;\n      }\n\
    \    }\n  }\n  return collisions;"]
stop_tokens:
- "\n}"
