{
  "name": "HumanEval_56_correct_bracketing",
  "language": "rs",
  "prompt": "/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(String::from(\"<\"))\n/// false\n/// >>> correct_bracketing(String::from(\"<>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"<<><>>\"))\n/// true\n/// >>> correct_bracketing(String::from(\"><<>\"))\n/// false\nfn correct_bracketing(brackets: String) -> bool {\n",
  "tests": "}\n\nfn main() {\n    let candidate = correct_bracketing;\n    assert_eq!(candidate(String::from(\"<>\")), true);\n    assert_eq!(candidate(String::from(\"<<><>>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<><>><>\")), true);\n    assert_eq!(candidate(String::from(\"<><><<<><><>><>><<><><<>>>\")), true);\n    assert_eq!(candidate(String::from(\"<<<><>>>>\")), false);\n    assert_eq!(candidate(String::from(\"><<>\")), false);\n    assert_eq!(candidate(String::from(\"<\")), false);\n    assert_eq!(candidate(String::from(\"<<<<\")), false);\n    assert_eq!(candidate(String::from(\">\")), false);\n    assert_eq!(candidate(String::from(\"<<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>><<>\")), false);\n    assert_eq!(candidate(String::from(\"<><><<><>><>>><>\")), false);\n}\n",
  "completions": [
    "  let bracket_count = 0\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      if (brackets[0] != '<') {\n        return false\n      }\n    } else if (bracket_count == 1) {\n      if (brackets[0] != '>') {\n        return false\n      }\n    } else {\n      if (brackets[0] != '<') {\n        return false\n      }\n    }\n    bracket_count += 1\n  }\n  return bracket_count == 2",
    "  let bracket_stack = []\n  let bracket_count = 0\n  for i in range(0, brackets.length()) {\n    if (brackets[i] == '<') {\n      bracket_stack.push(i)\n      bracket_count += 1\n    } else if (brackets[i] == '>') {\n      if (bracket_stack.is_empty()) {\n        return false\n      }\n      let last_bracket = bracket_stack.pop()\n      if (last_bracket != i) {\n        return false\n      }\n      bracket_count -= 1\n    }\n  }\n  return bracket_count == 0",
    "  let opening_brackets = 0\n  let closing_brackets = 0\n  for _ in brackets.chars() {\n    if (brackets[i] == \"<\") {\n      opening_brackets += 1\n    } else if (brackets[i] == \">\") {\n      closing_brackets += 1\n    }\n  }\n  return opening_brackets == closing_brackets",
    "  let bracket_count = 0\n  for _ in brackets.chars() {\n    if is_opening_bracket(brackets.char()) {\n      bracket_count += 1\n    } else if is_closing_bracket(brackets.char()) {\n      bracket_count -= 1\n    }\n  }\n  return bracket_count == 0",
    "  let bracket_count = 0\n  for _ in brackets.chars() {\n    if is_opening_bracket(brackets.char()) {\n      bracket_count += 1\n    } else if is_closing_bracket(brackets.char()) {\n      bracket_count -= 1\n    }\n    if bracket_count < 0 {\n      return false\n    }\n  }\n  return bracket_count == 0",
    "  let bracket_count = 0\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n  for c in brackets {\n    if c == \"<\" {\n      opening_bracket = c\n    } else if c == \">\" {\n      closing_bracket = c\n    } else {\n      if opening_bracket != \"\" && closing_bracket != \"\" {\n        if opening_bracket != closing_bracket {\n          return false\n        }\n      }\n    }\n    bracket_count += 1\n  }\n  return bracket_count == 2",
    "  let bracket_stack = []\n  for i in range(0, brackets.length()) {\n    let bracket = brackets[i]\n    if bracket == \"<\" {\n      bracket_stack.push(bracket)\n    } else if bracket == \">\" {\n      if bracket_stack.is_empty() {\n        return false\n      } else if bracket_stack.pop() != \"<\" {\n        return false\n      }\n    }\n  }\n  return bracket_stack.is_empty()",
    "  let opening_brackets = 0\n  let closing_brackets = 0\n\n  for _ in brackets.chars() {\n    if (brackets[i] == \"<\") {\n      opening_brackets += 1\n    } else if (brackets[i] == \">\") {\n      closing_brackets += 1\n    }\n  }\n\n  return opening_brackets == closing_brackets",
    "  let bracket_count = 0\n  for _ in brackets.chars() {\n    if is_opening_bracket(brackets.char()) {\n      bracket_count += 1\n    } else if is_closing_bracket(brackets.char()) {\n      bracket_count -= 1\n    }\n    if bracket_count < 0 {\n      return false\n    }\n  }\n  return bracket_count == 0",
    "  let opening_brackets = 0\n  let closing_brackets = 0\n  for _ in brackets.chars() {\n    if (brackets[i] == \"<\") {\n      opening_brackets += 1\n    } else if (brackets[i] == \">\") {\n      closing_brackets += 1\n    }\n  }\n  return opening_brackets == closing_brackets",
    "  let bracket_stack = []\n  for _ in brackets.chars() {\n    if bracket_stack.is_empty() {\n      bracket_stack.append(Char(ord(\"<\")))\n    } else if bracket_stack.last() == Char(ord(\"<\")) {\n      bracket_stack.append(Char(ord(\">\")))\n    } else {\n      bracket_stack.pop()\n    }\n  }\n  return bracket_stack.is_empty()",
    "  let bracket_stack = []\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n  for i in brackets.chars() {\n    if i == \"<\" {\n      opening_bracket = \"\"\n      closing_bracket = \"\"\n      bracket_stack = []\n    } else if i == \">\" {\n      if bracket_stack.is_empty() {\n        return false\n      }\n      if opening_bracket != \"\" {\n        opening_bracket = \"\"\n        closing_bracket = \"\"\n        bracket_stack = []\n      } else {\n        opening_bracket = closing_bracket\n        closing_bracket = \"\"\n        bracket_stack = []\n      }\n    } else {\n      if opening_bracket == \"\" {\n        opening_bracket = i\n      } else if closing_bracket == \"\" {\n        closing_bracket = i\n      } else {\n        bracket_stack.push(i)\n      }\n    }\n  }\n  return bracket_stack.is_empty()",
    "  let bracket_count = 0\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n  for _ in brackets {\n    if opening_bracket == \"\" {\n      opening_bracket = String.from(brackets.charAt(0))\n    } else if closing_bracket == \"\" {\n      closing_bracket = String.from(brackets.charAt(0))\n    } else if opening_bracket == closing_bracket {\n      bracket_count += 1\n      opening_bracket = \"\"\n      closing_bracket = \"\"\n    } else {\n      return false\n    }\n  }\n  return bracket_count == 0",
    "  let bracket_count = 0\n  let opening_bracket_count = 0\n  let closing_bracket_count = 0\n  let opening_bracket_index = 0\n  let closing_bracket_index = 0\n  let opening_bracket_index_set = false\n  let closing_bracket_index_set = false\n\n  for i in range(0, brackets.length()) {\n    if (brackets[i] == \"<\") {\n      opening_bracket_count += 1\n      opening_bracket_index = i\n      opening_bracket_index_set = true\n    } else if (brackets[i] == \">\") {\n      closing_bracket_count += 1\n      closing_bracket_index = i\n      closing_bracket_index_set = true\n    }\n  }\n\n  if (opening_bracket_count != closing_bracket_count) {\n    return false\n  }\n\n  if (!opening_bracket_index_set) {\n    return false\n  }\n\n  if (!closing_bracket_index_set) {\n    return false\n  }\n\n  if (opening_bracket_index > closing_bracket_index) {\n    return false\n  }\n\n  for i in range(0, brackets.length()) {\n    if (brackets[i] == \"<\") {\n      if (i != opening_bracket_index) {\n        return false\n      }\n    } else if (brackets[i] == \">\") {\n      if (i != closing_bracket_index) {\n        return false\n      }\n    }\n  }\n\n  return true",
    "  let bracket_stack = []\n  let bracket_count = 0\n\n  for i in range(0, brackets.length()) {\n    if (brackets[i] == \"<\") {\n      bracket_stack.push(i)\n      bracket_count += 1\n    } else if (brackets[i] == \">\") {\n      if (bracket_stack.length == 0) {\n        return false\n      }\n      let last_bracket = bracket_stack.pop()\n      if (last_bracket != i - 1) {\n        return false\n      }\n      bracket_count -= 1\n    }\n  }\n\n  if (bracket_stack.length != 0) {\n    return false\n  }\n\n  return bracket_count == 0",
    "  let opening_brackets = 0\n  let closing_brackets = 0\n\n  for _ in brackets.chars() {\n    if (brackets[i] == \"<\") {\n      opening_brackets += 1\n    } else if (brackets[i] == \">\") {\n      closing_brackets += 1\n    }\n  }\n\n  return opening_brackets == closing_brackets",
    "  let bracket_count = 0\n  for _ in brackets.chars() {\n    if is_opening_bracket(brackets.char()) {\n      bracket_count += 1\n    } else if is_closing_bracket(brackets.char()) {\n      bracket_count -= 1\n    }\n    if bracket_count < 0 {\n      return false\n    }\n  }\n  return bracket_count == 0",
    "  let opening_brackets = 0\n  let closing_brackets = 0\n  for _ in brackets.chars() {\n    if (brackets[i] == \"<\") {\n      opening_brackets += 1\n    } else if (brackets[i] == \">\") {\n      closing_brackets += 1\n    }\n  }\n  return opening_brackets == closing_brackets",
    "  let bracket_count = 0\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n  for c in brackets {\n    if c == \"<\" {\n      opening_bracket = c\n      closing_bracket = \">\"\n      bracket_count += 1\n    } else if c == \">\" {\n      opening_bracket = \">\"\n      closing_bracket = \"<\"\n      bracket_count -= 1\n    }\n    if bracket_count < 0 {\n      return false\n    }\n  }\n  return bracket_count == 0",
    "  let bracket_count = 0\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      if (brackets[0] != '<') {\n        return false\n      }\n    } else if (bracket_count == 1) {\n      if (brackets[0] != '>') {\n        return false\n      }\n    } else {\n      if (brackets[0] != '<') {\n        return false\n      }\n    }\n    bracket_count += 1\n  }\n  return bracket_count == 2",
    "  let bracket_count = 0\n  let open_bracket = false\n  for _ in brackets.chars() {\n    if open_bracket {\n      if (bracket_count == 0) {\n        return false\n      }\n      bracket_count -= 1\n    } else {\n      if (bracket_count == 0) {\n        open_bracket = true\n      } else {\n        bracket_count += 1\n      }\n    }\n  }\n  return bracket_count == 0",
    "  let bracket_count = 0\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      opening_bracket = _\n    } else if (_ == \">\") {\n      bracket_count -= 1\n    } else if (_ == \"<\") {\n      bracket_count += 1\n    }\n    if (bracket_count == 0) {\n      closing_bracket = _\n    }\n  }\n  return opening_bracket == closing_bracket",
    "  let bracket_count = 0\n  let open_brackets = []\n  for c in brackets {\n    if c == \"<\" {\n      bracket_count += 1\n      open_brackets.push(c)\n    } else if c == \">\" {\n      if bracket_count == 0 {\n        return false\n      }\n      bracket_count -= 1\n    }\n  }\n  return bracket_count == 0",
    "  let bracket_count = 0\n  for _ in brackets.chars() {\n    if is_opening_bracket(brackets.char()) {\n      bracket_count += 1\n    } else if is_closing_bracket(brackets.char()) {\n      bracket_count -= 1\n    }\n    if bracket_count < 0 {\n      return false\n    }\n  }\n  return bracket_count == 0",
    "  let bracket_count = 0\n  let open_brackets = []\n  for i in range(0, brackets.length()) {\n    if brackets[i] == \"<\" {\n      bracket_count += 1\n      open_brackets.push(i)\n    } else if brackets[i] == \">\" {\n      if bracket_count == 0 {\n        return false\n      }\n      bracket_count -= 1\n      open_brackets.pop()\n    }\n  }\n  return bracket_count == 0",
    "  let opening_brackets = 0\n  let closing_brackets = 0\n  for _ in brackets.chars() {\n    if (brackets[i] == \"<\") {\n      opening_brackets += 1\n    } else if (brackets[i] == \">\") {\n      closing_brackets += 1\n    }\n  }\n  return opening_brackets == closing_brackets",
    "  let bracket_count = 0\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      if (brackets[0] != '<') {\n        return false\n      }\n    } else if (bracket_count == 1) {\n      if (brackets[0] != '>') {\n        return false\n      }\n    } else {\n      if (brackets[0] != '<') {\n        return false\n      }\n      if (brackets[1] != '>') {\n        return false\n      }\n    }\n    bracket_count += 1\n  }\n  return bracket_count == 2",
    "  let bracket_count = 0\n  let bracket_stack = []\n  for i in range(0, brackets.length()) {\n    let bracket = brackets[i]\n    if bracket == \"<\" {\n      bracket_count += 1\n      bracket_stack.push(bracket)\n    } else if bracket == \">\" {\n      if bracket_count == 0 {\n        return false\n      } else if bracket_count == 1 {\n        bracket_count -= 1\n        bracket_stack.pop()\n      } else {\n        bracket_count -= 1\n      }\n    }\n  }\n  return bracket_count == 0",
    "  let bracket_stack = []\n  let bracket_count = 0\n  for i in range(0, brackets.length()) {\n    if (brackets[i] == \"<\") {\n      bracket_stack.push(i)\n      bracket_count += 1\n    } else if (brackets[i] == \">\") {\n      if (bracket_stack.length == 0) {\n        return false\n      }\n      let last_bracket = bracket_stack.pop()\n      if (last_bracket != i - 1) {\n        return false\n      }\n      bracket_count -= 1\n    }\n  }\n  if (bracket_stack.length != 0) {\n    return false\n  }\n  return bracket_count == 0",
    "  let bracket_count = 0\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n  for c in brackets {\n    if c == \"<\" {\n      if opening_bracket == \"\" {\n        opening_bracket = c\n      } else {\n        opening_bracket += c\n      }\n    } else if c == \">\" {\n      if closing_bracket == \"\" {\n        closing_bracket = c\n      } else {\n        closing_bracket += c\n      }\n    } else {\n      if opening_bracket != \"\" {\n        if closing_bracket != \"\" {\n          if opening_bracket != closing_bracket {\n            return false\n          }\n        } else {\n          return false\n        }\n      }\n    }\n  }\n  return true",
    "  let opening_brackets = 0\n  let closing_brackets = 0\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n  for _ in brackets.chars() {\n    if opening_brackets == 0 {\n      opening_bracket = String.fromCharCode(c)\n    } else if closing_brackets == 0 {\n      closing_bracket = String.fromCharCode(c)\n    } else if opening_bracket == closing_bracket {\n      opening_brackets -= 1\n      closing_brackets -= 1\n    } else {\n      opening_brackets += 1\n    }\n  }\n  return opening_brackets == 0",
    "  let bracket_count = 0\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      if (brackets[0] != '<') {\n        return false\n      }\n    } else if (bracket_count == 1) {\n      if (brackets[0] != '>') {\n        return false\n      }\n    } else {\n      if (brackets[0] != '<') {\n        return false\n      }\n    }\n    bracket_count += 1\n  }\n  return bracket_count == 2",
    "  let bracket_count = 0\n  let open_bracket = false\n  for _ in brackets.chars() {\n    if open_bracket {\n      if is_open_bracket(chr(brackets.char_at(bracket_count))) {\n        bracket_count += 1\n      } else {\n        return false\n      }\n    } else {\n      if is_close_bracket(chr(brackets.char_at(bracket_count))) {\n        bracket_count += 1\n      } else {\n        return false\n      }\n    }\n    open_bracket = !open_bracket\n  }\n  return bracket_count == brackets.length()",
    "  let bracket_count = 0\n  let opening_bracket_count = 0\n  let closing_bracket_count = 0\n  let opening_bracket_stack = []\n  let closing_bracket_stack = []\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      opening_bracket_count += 1\n      opening_bracket_stack.push(0)\n    } else if (bracket_count == 1) {\n      closing_bracket_count += 1\n      closing_bracket_stack.push(0)\n    } else if (bracket_count > 1) {\n      opening_bracket_count -= 1\n      closing_bracket_count -= 1\n      opening_bracket_stack.pop()\n      closing_bracket_stack.pop()\n    }\n    bracket_count += 1\n  }\n  return opening_bracket_count == 0 && closing_bracket_count == 0",
    "  let bracket_count = 0\n  let open_brackets = []\n  let close_brackets = []\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      open_brackets.push(brackets.index)\n    } else if (bracket_count == 1) {\n      close_brackets.push(brackets.index)\n    }\n    if (brackets[brackets.index] == \"<\") {\n      bracket_count += 1\n    } else if (brackets[brackets.index] == \">\") {\n      bracket_count -= 1\n    }\n  }\n  if (bracket_count != 0) {\n    return false\n  }\n  for (let i = 0; i < open_brackets.length; i++) {\n    if (open_brackets[i] != close_brackets[i]) {\n      return false\n    }\n  }\n  return true",
    "  let bracket_stack = []\n  for i in range(0, brackets.length()) {\n    if brackets[i] == \"<\" {\n      bracket_stack.push(i)\n    } else if brackets[i] == \">\" {\n      if bracket_stack.is_empty() {\n        return false\n      } else if bracket_stack.pop() != i - 1 {\n        return false\n      }\n    }\n  }\n  return bracket_stack.is_empty()",
    "  let bracket_stack: List[String] = []\n  let opening_bracket: String = \"\"\n  let closing_bracket: String = \"\"\n  for c in brackets {\n    if c == \"<\" {\n      opening_bracket = c\n    } else if c == \">\" {\n      closing_bracket = c\n    } else {\n      if opening_bracket != \"\" {\n        if closing_bracket != \"\" {\n          if opening_bracket != closing_bracket {\n            return false\n          }\n          opening_bracket = \"\"\n          closing_bracket = \"\"\n        } else {\n          opening_bracket = \"\"\n        }\n      }\n      if opening_bracket == \"\" {\n        bracket_stack.push(c)\n      }\n    }\n  }\n  return opening_bracket == \"\"",
    "  let bracket_count = 0\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      if (brackets[0] != '<') {\n        return false\n      }\n    } else if (bracket_count == 1) {\n      if (brackets[0] != '>') {\n        return false\n      }\n    } else {\n      if (brackets[0] != '<') {\n        return false\n      }\n    }\n    bracket_count += 1\n  }\n  return bracket_count == 2",
    "  let bracket_stack = []\n  let bracket_count = 0\n  for i in range(0, brackets.length()) {\n    if brackets[i] == '<' {\n      bracket_stack.push(bracket_count)\n      bracket_count += 1\n    } else if brackets[i] == '>' {\n      bracket_count -= 1\n      if bracket_count < 0 {\n        return false\n      }\n      if bracket_stack.pop() != bracket_count {\n        return false\n      }\n    }\n  }\n  return bracket_count == 0",
    "  let bracket_count = 0\n  let open_bracket_index = 0\n  let open_bracket_count = 0\n  let open_bracket_stack = []\n  let close_bracket_index = 0\n  let close_bracket_count = 0\n  let close_bracket_stack = []\n\n  for i in range(0, brackets.length()) {\n    if (brackets[i] == \"<\") {\n      open_bracket_count += 1\n      open_bracket_stack.push(i)\n    } else if (brackets[i] == \">\") {\n      close_bracket_count += 1\n      close_bracket_stack.push(i)\n    } else if (brackets[i] == \"<\") {\n      if (open_bracket_count == 0) {\n        return false\n      }\n      if (open_bracket_stack.length == 0) {\n        return false\n      }\n      if (open_bracket_stack[open_bracket_stack.length - 1] != i) {\n        return false\n      }\n      open_bracket_count -= 1\n      open_bracket_stack.pop()\n    } else if (brackets[i] == \">\") {\n      if (close_bracket_count == 0) {\n        return false\n      }\n      if (close_bracket_stack.length == 0) {\n        return false\n      }\n      if (close_bracket_stack[close_bracket_stack.length - 1] != i) {\n        return false\n      }\n      close_bracket_count -= 1\n      close_bracket_stack.pop()\n    }\n  }\n\n  if (open_bracket_count != 0) {\n    return false\n  }\n  if (close_bracket_count != 0) {\n    return false\n  }\n\n  return true",
    "  let bracket_count = 0\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      opening_bracket = _\n    } else if (_ == \">\") {\n      if (bracket_count == 0) {\n        return false\n      }\n      bracket_count -= 1\n    } else if (_ == \"<\") {\n      bracket_count += 1\n    }\n  }\n  if (bracket_count != 0) {\n    return false\n  }\n  return opening_bracket == closing_bracket",
    "  let bracket_count = 0\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      if (brackets[0] != '<') {\n        return false\n      }\n    } else if (bracket_count == 1) {\n      if (brackets[0] != '>') {\n        return false\n      }\n    } else {\n      if (brackets[0] != '<') {\n        return false\n      }\n    }\n    bracket_count += 1\n  }\n  return bracket_count == 2",
    "  let bracket_stack = []\n  let bracket_count = 0\n  let open_bracket = false\n  for c in brackets {\n    if c == \"<\" {\n      if open_bracket {\n        bracket_stack.push(c)\n        bracket_count += 1\n      } else {\n        open_bracket = true\n      }\n    } else if c == \">\" {\n      if open_bracket {\n        if bracket_stack.pop() != \"<\" {\n          return false\n        }\n        bracket_count -= 1\n      } else {\n        open_bracket = false\n      }\n    }\n  }\n  return bracket_count == 0",
    "  let bracket_count = 0\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n  for c in brackets {\n    if c == \"<\" {\n      opening_bracket = c\n      closing_bracket = \">\"\n      bracket_count += 1\n    } else if c == \">\" {\n      if opening_bracket == \"\" {\n        return false\n      }\n      if opening_bracket != closing_bracket {\n        return false\n      }\n      opening_bracket = \"\"\n      closing_bracket = \"\"\n      bracket_count -= 1\n    }\n  }\n  return bracket_count == 0",
    "  let bracket_stack = []\n  for i in range(0, brackets.length()) {\n    if brackets[i] == '<' {\n      bracket_stack.push(i)\n    } else if brackets[i] == '>' {\n      if len(bracket_stack) == 0 {\n        return false\n      } else {\n        let last_index = bracket_stack.pop()\n        if brackets[last_index] != '<' {\n          return false\n        }\n      }\n    }\n  }\n  return len(bracket_stack) == 0",
    "  let bracket_stack = []\n  let open_bracket_count = 0\n  for i in range(0, brackets.length()) {\n    if (brackets[i] == \"<\") {\n      open_bracket_count += 1\n    } else if (brackets[i] == \">\") {\n      open_bracket_count -= 1\n    }\n    if (open_bracket_count == 0) {\n      bracket_stack.pop()\n    } else if (open_bracket_count < 0) {\n      bracket_stack.push(brackets[i])\n    }\n  }\n  return bracket_stack.length == 0",
    "  let bracket_count = 0\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n  for i in range(0, brackets.length()) {\n    if (brackets[i] == \"<\") {\n      opening_bracket = brackets[i]\n      closing_bracket = \">\"\n      bracket_count += 1\n    } else if (brackets[i] == \">\") {\n      opening_bracket = \">\"\n      closing_bracket = \"<\"\n      bracket_count -= 1\n    }\n    if (bracket_count < 0) {\n      return false\n    }\n  }\n  return bracket_count == 0",
    "  let bracket_count = 0\n  let bracket_stack = []\n  for i in range(0, brackets.length()) {\n    let c = brackets[i]\n    if c == '<' {\n      bracket_count += 1\n      bracket_stack.push(c)\n    } else if c == '>' {\n      if bracket_count == 0 {\n        return false\n      }\n      bracket_count -= 1\n      if bracket_count == 0 {\n        bracket_stack.pop()\n      }\n    }\n  }\n  return bracket_count == 0",
    "  let bracket_count = 0\n  let open_bracket_index = 0\n  let close_bracket_index = 0\n  for i in range(0, brackets.length) {\n    if brackets[i] == \"<\" {\n      bracket_count += 1\n      open_bracket_index = i\n    } else if brackets[i] == \">\" {\n      bracket_count -= 1\n      close_bracket_index = i\n    }\n  }\n  return bracket_count == 0",
    "  let bracket_count = 0\n  let open_bracket = false\n  let open_bracket_stack = []\n  for i in range(0, brackets.length()) {\n    if (brackets[i] == \"<\") {\n      if (open_bracket) {\n        open_bracket_stack.pop()\n      }\n      open_bracket = true\n      bracket_count += 1\n    } else if (brackets[i] == \">\") {\n      if (!open_bracket) {\n        return false\n      }\n      open_bracket = false\n      bracket_count -= 1\n      if (bracket_count == 0) {\n        open_bracket_stack.pop()\n      }\n    } else {\n      if (open_bracket) {\n        open_bracket_stack.push(i)\n      }\n    }\n  }\n  return bracket_count == 0 && open_bracket_stack.empty()",
    "  let bracket_stack = []\n  for _ in brackets.chars() {\n    if bracket_stack.is_empty() {\n      bracket_stack.push(Char::from(brackets[0]))\n    } else if bracket_stack.peek() == Char::from(brackets[0]) {\n      bracket_stack.pop()\n    } else {\n      return false\n    }\n  }\n  return bracket_stack.is_empty()",
    "  let bracket_count = 0\n  let bracket_stack = []\n  for i in range(0, brackets.length()) {\n    let bracket = brackets[i]\n    if bracket == \"<\" {\n      bracket_stack.push(bracket)\n      bracket_count += 1\n    } else if bracket == \">\" {\n      if bracket_stack.is_empty() {\n        return false\n      }\n      let last_bracket = bracket_stack.pop()\n      if last_bracket != \"<\" {\n        return false\n      }\n      bracket_count -= 1\n    }\n  }\n  return bracket_count == 0",
    "  let bracket_count = 0\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n  for c in brackets {\n    if c == \"<\" {\n      if opening_bracket == \"\" {\n        opening_bracket = c\n      } else {\n        opening_bracket += c\n      }\n      bracket_count += 1\n    } else if c == \">\" {\n      if closing_bracket == \"\" {\n        closing_bracket = c\n      } else {\n        closing_bracket += c\n      }\n      bracket_count -= 1\n    }\n  }\n  return bracket_count == 0 and opening_bracket == closing_bracket",
    "  let bracket_stack = []\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n  for c in brackets {\n    if c == \"<\" {\n      opening_bracket = c\n    } else if c == \">\" {\n      if opening_bracket == \"\" {\n        return false\n      }\n      if closing_bracket != \"\" {\n        bracket_stack.pop()\n      }\n      closing_bracket = c\n    } else {\n      if opening_bracket == \"\" {\n        return false\n      }\n      if closing_bracket == \"\" {\n        bracket_stack.push(c)\n      }\n    }\n  }\n  if opening_bracket != \"\" {\n    return false\n  }\n  if closing_bracket != \"\" {\n    return false\n  }\n  return bracket_stack.empty()",
    "  let bracket_count = 0\n  let bracket_stack = []\n  for _ in brackets.chars() {\n    if bracket_count == 0 {\n      if bracket_stack.is_empty() {\n        return true\n      } else {\n        bracket_stack.pop()\n      }\n    } else {\n      bracket_stack.push(bracket_count)\n      bracket_count -= 1\n    }\n  }\n  return bracket_stack.is_empty()",
    "  let bracket_count = 0\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      if (brackets[0] != '<') {\n        return false\n      }\n    } else if (bracket_count == 1) {\n      if (brackets[0] != '>') {\n        return false\n      }\n    } else {\n      if (brackets[0] != '<') {\n        return false\n      }\n    }\n    bracket_count += 1\n  }\n  return bracket_count == 2",
    "  let bracket_count = 0\n  let open_brackets = []\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      open_brackets.push(false)\n    }\n    if (bracket_count == 0 && brackets[i] == \"<\") {\n      open_brackets[i] = true\n    }\n    if (bracket_count == 0 && brackets[i] == \">\") {\n      open_brackets[i] = false\n    }\n    if (bracket_count == 1 && brackets[i] == \"<\") {\n      open_brackets[i] = true\n    }\n    if (bracket_count == 1 && brackets[i] == \">\") {\n      open_brackets[i] = false\n    }\n    if (bracket_count == 2 && brackets[i] == \"<\") {\n      open_brackets[i] = true\n    }\n    if (bracket_count == 2 && brackets[i] == \">\") {\n      open_brackets[i] = false\n    }\n    if (bracket_count == 3 && brackets[i] == \"<\") {\n      open_brackets[i] = true\n    }\n    if (bracket_count == 3 && brackets[i] == \">\") {\n      open_brackets[i] = false\n    }\n    if (bracket_count == 4 && brackets[i] == \"<\") {\n      open_brackets[i] = true\n    }\n    if (bracket_count == 4 && brackets[i] == \">\") {\n      open_brackets[i] = false\n    }\n    if (bracket_count == 5 && brackets[i] == \"<\") {\n      open_brackets[i] = true\n    }\n    if (bracket_count == 5 && brackets[i] == \">\") {\n      open_brackets[i] = false\n    }\n    if (bracket_count == 6 && brackets[i] == \"<\") {\n      open_brackets[i] = true\n    }\n    if (bracket_count == 6 && brackets[i] == \">\") {\n      open_",
    "  let bracket_stack = []\n  for i in range(0, brackets.length()) {\n    let c = brackets[i]\n    if c == \"<\" {\n      if bracket_stack.length == 0 {\n        bracket_stack.push(c)\n      } else if bracket_stack.last() == \">\" {\n        bracket_stack.pop()\n      } else {\n        bracket_stack.push(c)\n      }\n    } else if c == \">\" {\n      if bracket_stack.length == 0 {\n        return false\n      } else if bracket_stack.last() == \"<\" {\n        bracket_stack.pop()\n      } else {\n        bracket_stack.push(c)\n      }\n    }\n  }\n  return bracket_stack.length == 0",
    "  let opening_brackets = 0\n  let closing_brackets = 0\n  for _ in brackets.chars() {\n    if (brackets[i] == \"<\") {\n      opening_brackets += 1\n    } else if (brackets[i] == \">\") {\n      closing_brackets += 1\n    }\n  }\n  return opening_brackets == closing_brackets",
    "  let bracket_stack = []\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n  for c in brackets {\n    if c == \"<\" {\n      opening_bracket = c\n    } else if c == \">\" {\n      if opening_bracket == \"\" {\n        return false\n      }\n      if opening_bracket == closing_bracket {\n        opening_bracket = \"\"\n        closing_bracket = \"\"\n      } else {\n        closing_bracket = c\n      }\n    } else {\n      if opening_bracket == \"\" {\n        return false\n      }\n      if opening_bracket != closing_bracket {\n        return false\n      }\n      opening_bracket = \"\"\n      closing_bracket = \"\"\n    }\n  }\n  return opening_bracket == \"\"",
    "  let bracket_count = 0\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      if (brackets[0] != '<') {\n        return false\n      }\n    } else if (bracket_count == 1) {\n      if (brackets[0] != '>') {\n        return false\n      }\n    } else {\n      if (brackets[0] != '<') {\n        return false\n      }\n    }\n    bracket_count += 1\n  }\n  return bracket_count == 2",
    "  let bracket_count = 0\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n  for _ in brackets.chars() {\n    if bracket_count == 0 {\n      opening_bracket = _\n    } else if _ == \"<\" {\n      bracket_count += 1\n    } else if _ == \">\" {\n      bracket_count -= 1\n    } else {\n      throw \"Invalid bracket\"\n    }\n    if bracket_count == 0 {\n      closing_bracket = _\n    }\n  }\n  return opening_bracket == closing_bracket",
    "  let bracket_stack = []\n  let opening_bracket_count = 0\n  let closing_bracket_count = 0\n  for _ in brackets.chars() {\n    if (bracket_stack.is_empty()) {\n      opening_bracket_count += 1\n    } else {\n      if (bracket_stack.last() == \"<\") {\n        opening_bracket_count -= 1\n      } else {\n        closing_bracket_count += 1\n      }\n    }\n    bracket_stack.push(bracket_stack.last())\n  }\n  return opening_bracket_count == 0 && closing_bracket_count == 0",
    "  let bracket_stack = []\n  for i in range(0, brackets.length()) {\n    if brackets[i] == '<' {\n      if bracket_stack.is_empty() {\n        bracket_stack.push(i)\n      } else {\n        if bracket_stack.last() == i - 1 {\n          bracket_stack.pop()\n        } else {\n          return false\n        }\n      }\n    } else if brackets[i] == '>' {\n      if bracket_stack.is_empty() {\n        return false\n      } else {\n        if bracket_stack.last() == i - 1 {\n          bracket_stack.pop()\n        } else {\n          return false\n        }\n      }\n    }\n  }\n  return bracket_stack.is_empty()",
    "  let bracket_stack = []\n  let bracket_count = 0\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n  let opening_bracket_count = 0\n  let closing_bracket_count = 0\n\n  for _ in brackets.chars() {\n    if (bracket_stack.is_empty()) {\n      opening_bracket = \"\"\n      opening_bracket_count = 0\n      closing_bracket = \"\"\n      closing_bracket_count = 0\n    }\n\n    if (bracket_stack.is_empty()) {\n      opening_bracket = \"\"\n      opening_bracket_count = 0\n      closing_bracket = \"\"\n      closing_bracket_count = 0\n    }\n\n    if (bracket_stack.is_empty()) {\n      opening_bracket = \"\"\n      opening_bracket_count = 0\n      closing_bracket = \"\"\n      closing_bracket_count = 0\n    }\n\n    if (bracket_stack.is_empty()) {\n      opening_bracket = \"\"\n      opening_bracket_count = 0\n      closing_bracket = \"\"\n      closing_bracket_count = 0\n    }\n\n    if (bracket_stack.is_empty()) {\n      opening_bracket = \"\"\n      opening_bracket_count = 0\n      closing_bracket = \"\"\n      closing_bracket_count = 0\n    }\n\n    if (bracket_stack.is_empty()) {\n      opening_bracket = \"\"\n      opening_bracket_count = 0\n      closing_bracket = \"\"\n      closing_bracket_count = 0\n    }\n\n    if (bracket_stack.is_empty()) {\n      opening_bracket = \"\"\n      opening_bracket_count = 0\n      closing_bracket = \"\"\n      closing_bracket_count = 0\n    }\n\n    if (bracket_stack.is_empty()) {\n      opening_bracket = \"\"\n      opening_bracket_count = 0\n      closing_bracket = \"\"\n      closing_bracket_count = 0\n    }\n\n    if (bracket",
    "  let bracket_count = 0\n  let open_brackets = []\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      if (brackets[0] == '<') {\n        open_brackets.push(0)\n      } else {\n        return false\n      }\n    } else if (bracket_count == 1) {\n      if (brackets[0] == '>') {\n        if (open_brackets.pop() != 0) {\n          return false\n        }\n      } else {\n        return false\n      }\n    } else {\n      if (brackets[0] == '<') {\n        open_brackets.push(0)\n      } else if (brackets[0] == '>') {\n        if (open_brackets.pop() != 0) {\n          return false\n        }\n      }\n    }\n    bracket_count += 1\n  }\n  return bracket_count == 0",
    "  let opening_brackets = 0\n  let closing_brackets = 0\n  for _ in brackets.chars() {\n    if (brackets[i] == \"<\") {\n      opening_brackets += 1\n    } else if (brackets[i] == \">\") {\n      closing_brackets += 1\n    }\n  }\n  return opening_brackets == closing_brackets",
    "  let bracket_stack = []\n  for i in range(0, brackets.length()) {\n    let bracket = brackets[i]\n    if bracket == \"<\" {\n      if bracket_stack.length == 0 {\n        bracket_stack.push(bracket)\n      } else {\n        let last_bracket = bracket_stack.pop()\n        if last_bracket != \">\" {\n          return false\n        }\n      }\n    } else {\n      bracket_stack.push(bracket)\n    }\n  }\n  return bracket_stack.length == 0",
    "  let bracket_count = 0\n  let bracket_stack = []\n  for i in range(0, brackets.length()) {\n    if (brackets[i] == \"<\") {\n      bracket_count += 1\n    } else if (brackets[i] == \">\") {\n      bracket_count -= 1\n    } else {\n      bracket_stack.push(brackets[i])\n    }\n    if (bracket_count < 0) {\n      return false\n    }\n  }\n  return bracket_count == 0",
    "  let bracket_stack = []\n  let bracket_count = 0\n\n  for i in range(0, brackets.length()) {\n    if (brackets[i] == \"<\") {\n      bracket_stack.push(i)\n      bracket_count += 1\n    } else if (brackets[i] == \">\") {\n      if (bracket_stack.is_empty()) {\n        return false\n      } else if (bracket_stack.pop() != i - 1) {\n        return false\n      } else {\n        bracket_count -= 1\n      }\n    }\n  }\n\n  return bracket_count == 0",
    "  let bracket_count = 0\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n  for c in brackets {\n    if c == \"<\" {\n      opening_bracket = c\n      closing_bracket = \">\"\n    } else if c == \">\" {\n      opening_bracket = \">\"\n      closing_bracket = \"<\"\n    } else {\n      bracket_count += 1\n    }\n  }\n  return bracket_count == 0 or bracket_count == brackets.length() - 1",
    "  let bracket_stack = []\n  for i in range(0, brackets.length()) {\n    let bracket = brackets[i]\n    if bracket == \"<\" {\n      bracket_stack.push(bracket)\n    } else if bracket == \">\" {\n      if bracket_stack.is_empty() {\n        return false\n      } else if bracket_stack.pop() != \"<\" {\n        return false\n      }\n    }\n  }\n  return bracket_stack.is_empty()",
    "  let bracket_stack = []\n  for i in range(0, brackets.length()) {\n    let bracket = brackets[i]\n    if bracket == \"<\" {\n      bracket_stack.push(bracket)\n    } else if bracket == \">\" {\n      if bracket_stack.is_empty() {\n        return false\n      } else if bracket_stack.pop() != \"<\" {\n        return false\n      }\n    }\n  }\n  return bracket_stack.is_empty()",
    "  let bracket_count = 0\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      if (brackets[0] != '<') {\n        return false\n      }\n    } else if (bracket_count == 1) {\n      if (brackets[0] != '>') {\n        return false\n      }\n    } else {\n      if (brackets[0] != '<') {\n        return false\n      }\n    }\n    bracket_count += 1\n  }\n  return bracket_count == 2",
    "  let opening_brackets = 0\n  let closing_brackets = 0\n  for _ in brackets.chars() {\n    if (brackets[i] == \"<\") {\n      opening_brackets += 1\n    } else if (brackets[i] == \">\") {\n      closing_brackets += 1\n    }\n  }\n  return opening_brackets == closing_brackets",
    "  let bracket_count = 0\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n  for c in brackets {\n    if c == \"<\" {\n      opening_bracket = c\n      closing_bracket = \">\"\n    } else if c == \">\" {\n      opening_bracket = \">\"\n      closing_bracket = \"<\"\n    } else {\n      if opening_bracket == \"\" {\n        return false\n      } else {\n        opening_bracket = \"\"\n        closing_bracket = \"\"\n      }\n    }\n    bracket_count += 1\n  }\n  return bracket_count == 0",
    "  let bracket_count = 0\n  let open_bracket = false\n  for c in brackets {\n    if c == \"<\" {\n      if open_bracket {\n        bracket_count += 1\n      }\n      open_bracket = true\n    } else if c == \">\" {\n      if open_bracket {\n        bracket_count -= 1\n      }\n      open_bracket = false\n    }\n  }\n  return bracket_count == 0",
    "  let bracket_count = 0\n  let open_bracket = false\n  for c in brackets {\n    if c == \"<\" {\n      if open_bracket {\n        bracket_count += 1\n      }\n      open_bracket = true\n    } else if c == \">\" {\n      if !open_bracket {\n        return false\n      }\n      open_bracket = false\n      if bracket_count == 0 {\n        return false\n      }\n      bracket_count -= 1\n    }\n  }\n  if bracket_count != 0 {\n    return false\n  }\n  return true",
    "  let bracket_count = 0\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n  for i in range(0, brackets.length()) {\n    if (brackets[i] == \"<\") {\n      opening_bracket = brackets[i]\n      closing_bracket = \">\"\n      bracket_count += 1\n    } else if (brackets[i] == \">\") {\n      opening_bracket = \">\"\n      closing_bracket = \"<\"\n      bracket_count -= 1\n    }\n    if (bracket_count < 0) {\n      return false\n    }\n  }\n  return bracket_count == 0",
    "  let bracket_stack = []\n  let bracket_count = 0\n  for i in range(0, brackets.length()) {\n    if (brackets[i] == \"<\") {\n      bracket_stack.push(i)\n      bracket_count += 1\n    } else if (brackets[i] == \">\") {\n      if (bracket_stack.is_empty()) {\n        return false\n      } else {\n        bracket_stack.pop()\n        bracket_count -= 1\n      }\n    }\n  }\n  return bracket_count == 0",
    "  let opening_brackets = 0\n  let closing_brackets = 0\n  for _ in brackets.chars() {\n    if (brackets[i] == \"<\") {\n      opening_brackets += 1\n    } else if (brackets[i] == \">\") {\n      closing_brackets += 1\n    }\n  }\n  return opening_brackets == closing_brackets",
    "  let bracket_count = 0\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      opening_bracket = _\n    } else if (bracket_count == 1) {\n      closing_bracket = _\n    } else if (bracket_count == 2) {\n      if (_ != \">\") {\n        return false\n      }\n      bracket_count = 0\n    } else {\n      bracket_count += 1\n    }\n  }\n  return opening_bracket == \"(\" && closing_bracket == \")\"",
    "  let bracket_count = 0\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      opening_bracket = _\n    } else if (bracket_count == 1) {\n      closing_bracket = _\n    } else if (bracket_count == 2) {\n      if (_ != \">\") {\n        return false\n      }\n      bracket_count = 0\n    } else {\n      bracket_count += 1\n    }\n  }\n  return opening_bracket == \"(\" && closing_bracket == \")\"",
    "  let bracket_count = 0\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n  for c in brackets {\n    if c == \"<\" {\n      opening_bracket = c\n      closing_bracket = \">\"\n      bracket_count += 1\n    } else if c == \">\" {\n      if opening_bracket == \"\" {\n        return false\n      }\n      if opening_bracket == c {\n        bracket_count -= 1\n      }\n      opening_bracket = \"\"\n      closing_bracket = \"\"\n    }\n  }\n  if bracket_count != 0 {\n    return false\n  }\n  return true",
    "  let bracket_stack = []\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n  for i in range(0, brackets.length()) {\n    if (brackets[i] == \"<\") {\n      opening_bracket = brackets[i]\n    } else if (brackets[i] == \">\") {\n      closing_bracket = brackets[i]\n    } else {\n      if (opening_bracket != \"\") {\n        if (closing_bracket != \"\") {\n          if (opening_bracket != closing_bracket) {\n            return false\n          }\n          opening_bracket = \"\"\n          closing_bracket = \"\"\n        } else {\n          closing_bracket = \"\"\n        }\n      }\n    }\n  }\n  return opening_bracket == \"\"",
    "  let bracket_stack = []\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n  for _ in brackets.chars() {\n    if opening_bracket == \"\" {\n      if _ == \"<\" {\n        opening_bracket = _\n      } else {\n        return false\n      }\n    } else if closing_bracket == \"\" {\n      if _ == \">\" {\n        closing_bracket = _\n      } else {\n        return false\n      }\n    } else if _ == \"<\" {\n      if opening_bracket == \">\" {\n        opening_bracket = \"\"\n        closing_bracket = \"\"\n      } else {\n        return false\n      }\n    } else if _ == \">\" {\n      if opening_bracket == \"<\" {\n        opening_bracket = \"\"\n        closing_bracket = \"\"\n      } else {\n        return false\n      }\n    } else {\n      return false\n    }\n  }\n  return opening_bracket == closing_bracket",
    "  let bracket_count = 0\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      if (brackets[0] != '<') {\n        return false\n      }\n    } else if (bracket_count == 1) {\n      if (brackets[0] != '>') {\n        return false\n      }\n    } else {\n      bracket_count -= 1\n    }\n  }\n  return bracket_count == 0",
    "  let bracket_stack = []\n  for i in range(0, brackets.length()) {\n    if brackets[i] == \"<\" {\n      bracket_stack.push(i)\n    } else if brackets[i] == \">\" {\n      if bracket_stack.is_empty() {\n        return false\n      } else {\n        let last_bracket = bracket_stack.pop()\n        if brackets[last_bracket] != \"<\" {\n          return false\n        }\n      }\n    }\n  }\n  return bracket_stack.is_empty()",
    "  let bracket_count = 0\n  let open_bracket = false\n  for c in brackets {\n    if c == \"<\" {\n      if open_bracket {\n        bracket_count += 1\n      }\n      open_bracket = true\n    } else if c == \">\" {\n      if open_bracket {\n        bracket_count -= 1\n      }\n      open_bracket = false\n    }\n  }\n  return bracket_count == 0",
    "  let opening_brackets = 0\n  let closing_brackets = 0\n  for _ in brackets.chars() {\n    if (brackets[i] == \"<\") {\n      opening_brackets += 1\n    } else if (brackets[i] == \">\") {\n      closing_brackets += 1\n    }\n  }\n  return opening_brackets == closing_brackets",
    "  let bracket_count = 0\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      if (brackets[0] != '<') {\n        return false\n      }\n    } else if (bracket_count == 1) {\n      if (brackets[0] != '>') {\n        return false\n      }\n    } else {\n      bracket_count -= 1\n    }\n  }\n  return bracket_count == 0",
    "  let bracket_count = 0\n  let open_bracket = false\n  for _ in brackets.chars() {\n    if open_bracket {\n      if (bracket_count == 0) {\n        return false\n      }\n      bracket_count -= 1\n    } else {\n      if (bracket_count == 0) {\n        open_bracket = true\n      } else {\n        bracket_count += 1\n      }\n    }\n  }\n  return bracket_count == 0",
    "  let bracket_stack = []\n  for i in range(0, brackets.length()) {\n    if brackets[i] == \"<\" {\n      bracket_stack.push(i)\n    } else if brackets[i] == \">\" {\n      if bracket_stack.is_empty() {\n        return false\n      }\n      let opening_bracket = bracket_stack.pop()\n      if brackets[opening_bracket] != \"<\" {\n        return false\n      }\n    }\n  }\n  return bracket_stack.is_empty()",
    "  let opening_brackets = 0\n  let closing_brackets = 0\n  for _ in brackets.chars() {\n    if (brackets[i] == \"<\") {\n      opening_brackets += 1\n    } else if (brackets[i] == \">\") {\n      closing_brackets += 1\n    }\n  }\n  return opening_brackets == closing_brackets",
    "  let bracket_count = 0\n  for _ in brackets.chars() {\n    if is_opening_bracket(brackets.char()) {\n      bracket_count += 1\n    } else if is_closing_bracket(brackets.char()) {\n      bracket_count -= 1\n    }\n  }\n  return bracket_count == 0",
    "  let opening_brackets = 0\n  let closing_brackets = 0\n\n  for _ in brackets.chars() {\n    if (brackets[i] == \"<\") {\n      opening_brackets += 1\n    } else if (brackets[i] == \">\") {\n      closing_brackets += 1\n    }\n  }\n\n  return opening_brackets == closing_brackets",
    "  let bracket_stack = []\n  for i in range(0, brackets.length()) {\n    if brackets[i] == \"<\" {\n      if bracket_stack.length == 0 {\n        bracket_stack.push(i)\n      } else {\n        if brackets[bracket_stack.last()] != \">\" {\n          return false\n        }\n        bracket_stack.pop()\n      }\n    } else if brackets[i] == \">\" {\n      if bracket_stack.length == 0 {\n        return false\n      } else {\n        bracket_stack.push(i)\n      }\n    }\n  }\n  return bracket_stack.length == 0",
    "  let bracket_count = 0\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n  for _ in brackets.chars() {\n    if bracket_count == 0 {\n      opening_bracket = String.fromCharCode(c)\n    } else if bracket_count == 1 {\n      closing_bracket = String.fromCharCode(c)\n    } else if c == '<' {\n      bracket_count -= 1\n    } else if c == '>' {\n      bracket_count += 1\n    }\n  }\n  return opening_bracket == closing_bracket",
    "  let opening_brackets = 0\n  let closing_brackets = 0\n\n  for _ in brackets.chars() {\n    if (brackets[i] == \"<\") {\n      opening_brackets += 1\n    } else if (brackets[i] == \">\") {\n      closing_brackets += 1\n    }\n  }\n\n  return opening_brackets == closing_brackets",
    "  let bracket_stack = []\n  let bracket_count = 0\n  let open_bracket = false\n  for c in brackets {\n    if c == \"<\" {\n      if open_bracket {\n        bracket_stack.push(c)\n        bracket_count += 1\n      } else {\n        open_bracket = true\n      }\n    } else if c == \">\" {\n      if open_bracket {\n        if bracket_stack.pop() != \"<\" {\n          return false\n        }\n        bracket_count -= 1\n      } else {\n        open_bracket = false\n      }\n    }\n  }\n  return bracket_count == 0",
    "  let bracket_count = 0\n  for _ in brackets.chars() {\n    if is_opening_bracket(brackets.char()) {\n      bracket_count += 1\n    } else if is_closing_bracket(brackets.char()) {\n      bracket_count -= 1\n    }\n    if bracket_count < 0 {\n      return false\n    }\n  }\n  return bracket_count == 0",
    "  let bracket_stack = []\n  for i in range(0, brackets.length()) {\n    if brackets[i] == \"<\" {\n      bracket_stack.push(i)\n    } else if brackets[i] == \">\" {\n      if bracket_stack.is_empty() {\n        return false\n      } else {\n        let last_index = bracket_stack.pop()\n        if brackets[last_index] != \"<\" {\n          return false\n        }\n      }\n    }\n  }\n  return bracket_stack.is_empty()",
    "  let bracket_count = 0\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      opening_bracket = _\n    } else if (bracket_count == 1) {\n      closing_bracket = _\n    } else if (bracket_count == 2) {\n      if (_ != \">\") {\n        return false\n      }\n      bracket_count = 0\n    } else {\n      bracket_count += 1\n    }\n  }\n  if (bracket_count != 0) {\n    return false\n  }\n  return opening_bracket == closing_bracket",
    "  let bracket_count = 0\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      if (brackets[0] != '<') {\n        return false\n      }\n    } else if (bracket_count == 1) {\n      if (brackets[0] != '>') {\n        return false\n      }\n    } else {\n      if (brackets[0] != '<') {\n        return false\n      }\n    }\n    bracket_count += 1\n  }\n  return bracket_count == 2",
    "  let bracket_count = 0\n  let open_brackets = 0\n  let close_brackets = 0\n\n  for _ in brackets.chars() {\n    if (brackets[i] == \"<\") {\n      open_brackets += 1\n    } else if (brackets[i] == \">\") {\n      close_brackets += 1\n    }\n  }\n\n  if (open_brackets == close_brackets) {\n    return true\n  } else {\n    return false\n  }",
    "  let bracket_count = 0\n  let open_bracket = false\n  for _ in brackets.chars() {\n    if open_bracket {\n      if is_opening_bracket(brackets.char()) {\n        bracket_count += 1\n      } else {\n        return false\n      }\n    } else {\n      if is_closing_bracket(brackets.char()) {\n        bracket_count -= 1\n      } else {\n        return false\n      }\n    }\n    open_bracket = !open_bracket\n  }\n  return bracket_count == 0",
    "  let bracket_count = 0\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      if (brackets[0] != '<') {\n        return false\n      }\n    } else if (bracket_count == 1) {\n      if (brackets[0] != '>') {\n        return false\n      }\n    } else {\n      bracket_count -= 1\n    }\n  }\n  return bracket_count == 0",
    "  let bracket_stack: List[String] = []\n  for c in brackets {\n    if c == \"<\" {\n      bracket_stack.push(c)\n    } else if c == \">\" {\n      if bracket_stack.is_empty() {\n        return false\n      } else if bracket_stack.pop() != \"<\" {\n        return false\n      }\n    }\n  }\n  return bracket_stack.is_empty()",
    "  let bracket_count = 0\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      if (brackets[0] != '<') {\n        return false\n      }\n    } else if (bracket_count == 1) {\n      if (brackets[0] != '>') {\n        return false\n      }\n    } else {\n      if (brackets[0] != '<') {\n        return false\n      }\n    }\n    bracket_count += 1\n  }\n  return bracket_count == 2",
    "  let opening_brackets = 0\n  let closing_brackets = 0\n  for _ in brackets.chars() {\n    if (brackets[i] == \"<\") {\n      opening_brackets += 1\n    } else if (brackets[i] == \">\") {\n      closing_brackets += 1\n    }\n  }\n  return opening_brackets == closing_brackets",
    "  let bracket_count = 0\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      opening_bracket = _\n    } else if (_ == \"<\") {\n      bracket_count += 1\n    } else if (_ == \">\") {\n      bracket_count -= 1\n    }\n  }\n  return opening_bracket == closing_bracket",
    "  let bracket_stack = []\n  let bracket_count = 0\n  for i in range(0, brackets.length()) {\n    if brackets[i] == \"<\" {\n      bracket_stack.push(i)\n      bracket_count += 1\n    } else if brackets[i] == \">\" {\n      if bracket_stack.is_empty() {\n        return false\n      }\n      let last_bracket = bracket_stack.pop()\n      if brackets[last_bracket] != \"<\" {\n        return false\n      }\n      bracket_count -= 1\n    }\n  }\n  return bracket_count == 0",
    "  let bracket_stack = []\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n  for c in brackets {\n    if c == \"<\" {\n      opening_bracket = c\n    } else if c == \">\" {\n      if opening_bracket == \"\" {\n        return false\n      }\n      if closing_bracket != \"\" {\n        return false\n      }\n      closing_bracket = c\n    } else {\n      if opening_bracket == \"\" {\n        return false\n      }\n      if closing_bracket == \"\" {\n        bracket_stack.push(c)\n      } else {\n        if c != closing_bracket {\n          return false\n        }\n        bracket_stack.pop()\n        if bracket_stack.empty() {\n          opening_bracket = \"\"\n          closing_bracket = \"\"\n        }\n      }\n    }\n  }\n  return opening_bracket == \"\"",
    "  let opening_brackets = 0\n  let closing_brackets = 0\n  for _ in brackets.chars() {\n    if (brackets[i] == \"<\") {\n      opening_brackets += 1\n    } else if (brackets[i] == \">\") {\n      closing_brackets += 1\n    }\n  }\n  return opening_brackets == closing_brackets",
    "  let bracket_stack = []\n  for i in range(0, brackets.length()) {\n    if brackets[i] == \"<\" {\n      bracket_stack.push(i)\n    } else if brackets[i] == \">\" {\n      if bracket_stack.is_empty() {\n        return false\n      }\n      let last_bracket = bracket_stack.pop()\n      if brackets[last_bracket] != \"<\" {\n        return false\n      }\n    }\n  }\n  return bracket_stack.is_empty()",
    "  let bracket_stack = []\n  let opening_bracket_count = 0\n  let closing_bracket_count = 0\n\n  for _ in brackets.chars() {\n    if (bracket_stack.is_empty()) {\n      opening_bracket_count += 1\n    } else {\n      if (bracket_stack.pop() == \"<\") {\n        opening_bracket_count -= 1\n      } else {\n        closing_bracket_count += 1\n      }\n    }\n\n    if (opening_bracket_count == 0 && closing_bracket_count == 0) {\n      return true\n    }\n  }\n\n  return false",
    "  let bracket_count = 0\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      if (brackets[0] != '<') {\n        return false\n      }\n    } else if (bracket_count == 1) {\n      if (brackets[0] != '>') {\n        return false\n      }\n    } else {\n      bracket_count -= 1\n    }\n  }\n  return bracket_count == 0",
    "  let bracket_count = 0\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      if (brackets[0] != '<') {\n        return false\n      }\n    } else if (bracket_count == 1) {\n      if (brackets[0] != '>') {\n        return false\n      }\n    } else {\n      bracket_count -= 1\n    }\n  }\n  return bracket_count == 0",
    "  let bracket_count = 0\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n  for c in brackets {\n    if c == \"<\" {\n      opening_bracket = c\n      closing_bracket = \">\"\n      bracket_count += 1\n    } else if c == \">\" {\n      opening_bracket = \">\"\n      closing_bracket = \"<\"\n      bracket_count -= 1\n    }\n  }\n  return bracket_count == 0 and opening_bracket == closing_bracket",
    "  let opening_brackets = 0\n  let closing_brackets = 0\n  for _ in brackets.chars() {\n    if (brackets[i] == \"<\") {\n      opening_brackets += 1\n    } else if (brackets[i] == \">\") {\n      closing_brackets += 1\n    }\n  }\n  return opening_brackets == closing_brackets",
    "  let bracket_count = 0\n  for _ in brackets.chars() {\n    if is_opening_bracket(brackets.char()) {\n      bracket_count += 1\n    } else if is_closing_bracket(brackets.char()) {\n      bracket_count -= 1\n    }\n    if bracket_count < 0 {\n      return false\n    }\n  }\n  return bracket_count == 0",
    "  let bracket_stack = []\n  for i in range(0, brackets.length()) {\n    if brackets[i] == \"<\" {\n      if bracket_stack.length == 0 {\n        bracket_stack.push(i)\n      } else {\n        if brackets[bracket_stack.last()] != \">\" {\n          return false\n        }\n        bracket_stack.pop()\n      }\n    } else if brackets[i] == \">\" {\n      if bracket_stack.length == 0 {\n        return false\n      } else {\n        bracket_stack.push(i)\n      }\n    }\n  }\n  return bracket_stack.length == 0",
    "  let bracket_stack = []\n  for i in range(0, brackets.length()) {\n    if brackets[i] == \"<\" {\n      bracket_stack.push(i)\n    } else if brackets[i] == \">\" {\n      if bracket_stack.is_empty() {\n        return false\n      } else if bracket_stack.pop() != i - 1 {\n        return false\n      }\n    }\n  }\n  return bracket_stack.is_empty()",
    "  let bracket_count = 0\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n  for _ in brackets.chars() {\n    if bracket_count == 0 {\n      opening_bracket = _\n    } else if _ == \">\" {\n      if opening_bracket == \"<\" {\n        opening_bracket = \"\"\n      } else {\n        bracket_count -= 1\n      }\n    } else if _ == \"<\" {\n      if opening_bracket == \">\" {\n        opening_bracket = \"\"\n      } else {\n        bracket_count += 1\n      }\n    }\n  }\n  return bracket_count == 0",
    "  let bracket_count = 0\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      if (brackets[0] != '<') {\n        return false\n      }\n    } else if (bracket_count == 1) {\n      if (brackets[0] != '>') {\n        return false\n      }\n    } else {\n      if (brackets[0] != '<') {\n        return false\n      }\n    }\n    bracket_count += 1\n  }\n  return bracket_count == 2",
    "  let bracket_count = 0\n  let open_bracket = false\n  for _ in brackets.chars() {\n    if open_bracket {\n      if is_open_bracket(brackets.char()) {\n        bracket_count += 1\n      } else {\n        return false\n      }\n    } else {\n      if is_close_bracket(brackets.char()) {\n        bracket_count -= 1\n      } else {\n        return false\n      }\n    }\n    open_bracket = !open_bracket\n  }\n  return bracket_count == 0",
    "  let bracket_stack: List[String] = []\n  let opening_bracket: String\n  for _ in brackets.split(\"\") {\n    if (bracket_stack.is_empty()) {\n      opening_bracket = \"\"\n    } else {\n      opening_bracket = bracket_stack.pop()\n    }\n    if (opening_bracket == \"<\") {\n      bracket_stack.push(\"<\")\n    } else if (opening_bracket == \">\") {\n      if (bracket_stack.is_empty()) {\n        return false\n      } else {\n        bracket_stack.pop()\n      }\n    }\n  }\n  return bracket_stack.is_empty()",
    "  let bracket_count = 0\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      if (brackets[0] != '<') {\n        return false\n      }\n    } else if (bracket_count == 1) {\n      if (brackets[0] != '>') {\n        return false\n      }\n    } else {\n      bracket_count -= 1\n    }\n  }\n  return bracket_count == 0",
    "  let bracket_stack = []\n  let bracket_count = 0\n\n  for i in range(0, brackets.length()) {\n    let bracket = brackets[i]\n    if bracket == \"<\" {\n      bracket_stack.push(bracket)\n      bracket_count += 1\n    } else if bracket == \">\" {\n      if bracket_stack.is_empty() {\n        return false\n      } else if bracket_stack.pop() != \"<\" {\n        return false\n      } else {\n        bracket_count -= 1\n      }\n    }\n  }\n\n  return bracket_count == 0",
    "  let opening_brackets = 0\n  let closing_brackets = 0\n  for _ in brackets.chars() {\n    if (brackets[i] == \"<\") {\n      opening_brackets += 1\n    } else if (brackets[i] == \">\") {\n      closing_brackets += 1\n    }\n  }\n  return opening_brackets == closing_brackets",
    "  let bracket_count = 0\n  let open_brackets = 0\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      if (open_brackets == 0) {\n        open_brackets += 1\n      } else {\n        return false\n      }\n    } else if (bracket_count == 1) {\n      if (open_brackets == 0) {\n        open_brackets += 1\n      } else {\n        open_brackets -= 1\n      }\n    } else if (bracket_count == 2) {\n      if (open_brackets == 0) {\n        open_brackets += 1\n      } else {\n        open_brackets -= 1\n      }\n    }\n    bracket_count -= 1\n  }\n  return open_brackets == 0",
    "  let bracket_count = 0\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      if (brackets[0] != '<') {\n        return false\n      }\n    } else if (bracket_count == 1) {\n      if (brackets[0] != '>') {\n        return false\n      }\n    } else {\n      if (brackets[0] != '<') {\n        return false\n      }\n    }\n    bracket_count += 1\n  }\n  return bracket_count == 2",
    "  let bracket_count = 0\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      if (brackets[0] != '<') {\n        return false\n      }\n    } else if (bracket_count == 1) {\n      if (brackets[0] != '>') {\n        return false\n      }\n    } else {\n      if (brackets[0] != '<') {\n        return false\n      }\n    }\n    bracket_count += 1\n  }\n  return bracket_count == 2",
    "  let bracket_stack = []\n  let bracket_count = 0\n  let bracket_open = false\n  for c in brackets {\n    if c == \"<\" {\n      if bracket_open {\n        bracket_stack.push(c)\n        bracket_count += 1\n      } else {\n        bracket_open = true\n      }\n    } else if c == \">\" {\n      if bracket_open {\n        if bracket_stack.pop() != \"<\" {\n          return false\n        }\n        bracket_count -= 1\n      } else {\n        return false\n      }\n    }\n  }\n  return bracket_count == 0",
    "  let bracket_count = 0\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n  for c in brackets {\n    if c == \"<\" {\n      opening_bracket = c\n      closing_bracket = \">\"\n      bracket_count += 1\n    } else if c == \">\" {\n      if opening_bracket == \"\" {\n        return false\n      }\n      if opening_bracket != closing_bracket {\n        return false\n      }\n      opening_bracket = \"\"\n      closing_bracket = \"\"\n      bracket_count -= 1\n    }\n  }\n  return bracket_count == 0",
    "  let bracket_stack = []\n  let bracket_count = 0\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n  let opening_bracket_index = 0\n  let closing_bracket_index = 0\n  for i in range(0, brackets.length()) {\n    let c = brackets[i]\n    if c == \"<\" {\n      if bracket_stack.length > 0 {\n        opening_bracket = brackets[opening_bracket_index]\n        opening_bracket_index += 1\n      }\n      bracket_stack.push(c)\n      bracket_count += 1\n    } else if c == \">\" {\n      if bracket_stack.length > 0 {\n        closing_bracket = brackets[closing_bracket_index]\n        closing_bracket_index += 1\n      }\n      if bracket_stack.length == 0 {\n        return false\n      }\n      if opening_bracket != closing_bracket {\n        return false\n      }\n      bracket_stack.pop()\n      bracket_count -= 1\n    }\n  }\n  if bracket_stack.length > 0 {\n    return false\n  }\n  return bracket_count == 0",
    "  let bracket_stack = []\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n  for c in brackets {\n    if c == \"<\" {\n      opening_bracket = c\n    } else if c == \">\" {\n      closing_bracket = c\n    } else {\n      if opening_bracket != \"\" && closing_bracket != \"\" {\n        if opening_bracket != closing_bracket {\n          return false\n        }\n        opening_bracket = \"\"\n        closing_bracket = \"\"\n      }\n    }\n    if opening_bracket == \"\" {\n      bracket_stack.push(c)\n    } else {\n      if c != bracket_stack.pop() {\n        return false\n      }\n    }\n  }\n  return bracket_stack.is_empty()",
    "  let bracket_count = 0\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      if (brackets[0] != '<') {\n        return false\n      }\n    } else if (bracket_count == 1) {\n      if (brackets[0] != '>') {\n        return false\n      }\n    } else {\n      if (brackets[0] != '<') {\n        return false\n      }\n    }\n    bracket_count += 1\n  }\n  return bracket_count == 2",
    "  let bracket_count = 0\n  let bracket_stack = []\n  for i in range(0, brackets.length()) {\n    if (brackets[i] == \"<\") {\n      bracket_count += 1\n    } else if (brackets[i] == \">\") {\n      bracket_count -= 1\n    }\n    if (bracket_count < 0) {\n      return false\n    }\n    if (bracket_count == 0) {\n      bracket_stack.pop()\n    } else {\n      bracket_stack.push(brackets[i])\n    }\n  }\n  return bracket_count == 0",
    "  let bracket_count = 0\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      if (brackets[0] != '<') {\n        return false\n      }\n    } else if (bracket_count == 1) {\n      if (brackets[0] != '>') {\n        return false\n      }\n    } else {\n      if (brackets[0] != '<') {\n        return false\n      }\n    }\n    bracket_count += 1\n  }\n  return bracket_count == 2",
    "  let bracket_stack = []\n  for i in range(0, brackets.length()) {\n    if brackets[i] == \"<\" {\n      if bracket_stack.is_empty() {\n        bracket_stack.push(i)\n      } else {\n        if brackets[bracket_stack.last()] != \">\" {\n          return false\n        }\n        bracket_stack.pop()\n      }\n    } else if brackets[i] == \">\" {\n      if bracket_stack.is_empty() {\n        return false\n      } else {\n        bracket_stack.pop()\n      }\n    }\n  }\n  return bracket_stack.is_empty()",
    "  let bracket_count = 0\n  let open_brackets = []\n  for i in range(0, brackets.length()) {\n    if brackets[i] == \"<\" {\n      open_brackets.push(i)\n      bracket_count += 1\n    } else if brackets[i] == \">\" {\n      if bracket_count == 0 {\n        return false\n      }\n      bracket_count -= 1\n      if bracket_count == 0 {\n        open_brackets.pop()\n      }\n    }\n  }\n  return bracket_count == 0",
    "  let bracket_count = 0\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      if (brackets[0] != '<') {\n        return false\n      }\n    } else if (bracket_count == 1) {\n      if (brackets[0] != '>') {\n        return false\n      }\n    } else {\n      if (brackets[0] != '<') {\n        return false\n      }\n    }\n    bracket_count += 1\n  }\n  return bracket_count == 2",
    "  let bracket_count = 0\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n  for _ in brackets {\n    if opening_bracket == \"\" {\n      opening_bracket = String.from(brackets[0])\n    } else if closing_bracket == \"\" {\n      closing_bracket = String.from(brackets[0])\n    } else if opening_bracket == closing_bracket {\n      bracket_count += 1\n      opening_bracket = \"\"\n      closing_bracket = \"\"\n    } else {\n      opening_bracket = \"\"\n      closing_bracket = \"\"\n    }\n  }\n  return bracket_count == 0",
    "  let bracket_count = 0\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      if (brackets.charAt(0) != '<') {\n        return false\n      }\n    } else if (bracket_count == 1) {\n      if (brackets.charAt(0) != '>') {\n        return false\n      }\n    } else {\n      bracket_count -= 1\n    }\n  }\n  return bracket_count == 0",
    "  let opening_brackets = 0\n  let closing_brackets = 0\n\n  for _ in brackets.chars() {\n    if (brackets[i] == \"<\") {\n      opening_brackets += 1\n    } else if (brackets[i] == \">\") {\n      closing_brackets += 1\n    }\n  }\n\n  return opening_brackets == closing_brackets",
    "  let bracket_stack = []\n  for i in range(0, brackets.length()) {\n    if brackets[i] == \"<\" {\n      if bracket_stack.is_empty() {\n        bracket_stack.push(i)\n      } else {\n        if brackets[bracket_stack.last()] == \">\" {\n          bracket_stack.pop()\n        } else {\n          return false\n        }\n      }\n    } else if brackets[i] == \">\" {\n      if bracket_stack.is_empty() {\n        return false\n      } else {\n        bracket_stack.pop()\n      }\n    }\n  }\n  return bracket_stack.is_empty()",
    "  let bracket_count = 0\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      if (brackets[0] != '<') {\n        return false\n      }\n    } else if (bracket_count == 1) {\n      if (brackets[0] != '>') {\n        return false\n      }\n    } else {\n      bracket_count -= 1\n    }\n  }\n  return bracket_count == 0",
    "  let bracket_stack = []\n  for i in range(0, brackets.length()) {\n    let bracket = brackets[i]\n    if bracket == \"<\" {\n      bracket_stack.push(bracket)\n    } else if bracket == \">\" {\n      if bracket_stack.is_empty() {\n        return false\n      } else if bracket_stack.pop() != \"<\" {\n        return false\n      }\n    }\n  }\n  return bracket_stack.is_empty()",
    "  let opening_brackets = 0\n  let closing_brackets = 0\n  for _ in brackets.chars() {\n    if (brackets[i] == \"<\") {\n      opening_brackets += 1\n    } else if (brackets[i] == \">\") {\n      closing_brackets += 1\n    }\n  }\n  return opening_brackets == closing_brackets",
    "  let opening_brackets = 0\n  let closing_brackets = 0\n  for _ in brackets.chars() {\n    if (brackets[i] == \"<\") {\n      opening_brackets += 1\n    } else if (brackets[i] == \">\") {\n      closing_brackets += 1\n    }\n  }\n  return opening_brackets == closing_brackets",
    "  let bracket_stack = []\n  for i in range(0, brackets.length()) {\n    if brackets[i] == \"<\" {\n      bracket_stack.push(i)\n    } else if brackets[i] == \">\" {\n      if bracket_stack.is_empty() {\n        return false\n      }\n      let open_bracket_index = bracket_stack.pop()\n      if brackets[open_bracket_index] != \"<\" {\n        return false\n      }\n    }\n  }\n  return bracket_stack.is_empty()",
    "  let bracket_count = 0\n  let open_bracket = false\n  for c in brackets {\n    if c == \"<\" {\n      if open_bracket {\n        bracket_count += 1\n      }\n      open_bracket = true\n    } else if c == \">\" {\n      if open_bracket {\n        bracket_count -= 1\n      }\n      open_bracket = false\n    }\n  }\n  return bracket_count == 0",
    "  let bracket_stack = []\n  for i in range(0, brackets.length()) {\n    if brackets[i] == \"<\" {\n      bracket_stack.push(i)\n    } else if brackets[i] == \">\" {\n      if bracket_stack.is_empty() {\n        return false\n      }\n      if brackets[bracket_stack.last()] != \"<\" {\n        return false\n      }\n      bracket_stack.pop()\n    }\n  }\n  return bracket_stack.is_empty()",
    "  let bracket_count = 0\n  let bracket_stack = []\n  let bracket_stack_index = 0\n  let bracket_stack_top = 0\n  let bracket_stack_top_index = 0\n  let bracket_stack_top_index_end = 0\n  let bracket_stack_top_index_start = 0\n  let bracket_stack_top_index_start_end = 0\n  let bracket_stack_top_index_start_start = 0\n  let bracket_stack_top_index_start_start_end = 0\n  let bracket_stack_top_index_start_start_start = 0\n  let bracket_stack_top_index_start_start_start_end = 0\n  let bracket_stack_top_index_start_start_start_start = 0\n  let bracket_stack_top_index_start_start_start_start_end = 0\n  let bracket_stack_top_index_start_start_start_start_start = 0\n  let bracket_stack_top_index_start_start_start_start_start_end = 0\n  let bracket_stack_top_index_start_start_start_start_start_start = 0\n  let bracket_stack_top_index_start_start_start_start_start_start_end = 0\n  let bracket_stack_top_index_start_start_start_start_start_start_start = 0\n  let bracket_stack_top_index_start_start_start_start_start_start_start_end = 0\n  let bracket_stack_top_index_start_start_start_start_start_start_start_start = 0\n  let bracket_stack_top_index_start_start_start_start_start_start_start_start_end = 0\n  let bracket_stack_top_index_start_start_start_start_start_start_start_start_start = 0\n  let bracket_stack_top_index_start_start_start_start_start_start_start_start_start_end = 0\n  let bracket_stack_top_index_start_start_start_start_start_start_start_start_start_start = 0\n  let bracket_",
    "  let bracket_count = 0\n  let open_bracket = false\n  for _ in brackets.chars() {\n    if open_bracket {\n      if bracket_count == 0 {\n        return false\n      }\n      bracket_count -= 1\n    } else {\n      if bracket_count == 0 {\n        open_bracket = true\n      } else {\n        bracket_count += 1\n      }\n    }\n  }\n  return bracket_count == 0",
    "  let bracket_stack = []\n  for _ in brackets.chars() {\n    if bracket_stack.is_empty() {\n      bracket_stack.append(Char(brackets.char_at(0)))\n    } else if bracket_stack.last() == Char('<') {\n      if brackets.char_at(0) == '>' {\n        bracket_stack.pop()\n      } else {\n        return false\n      }\n    } else {\n      bracket_stack.append(Char(brackets.char_at(0)))\n    }\n  }\n  return bracket_stack.is_empty()",
    "  let bracket_count = 0\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      if (brackets[0] != '<') {\n        return false\n      }\n    } else if (bracket_count == 1) {\n      if (brackets[0] != '>') {\n        return false\n      }\n    } else {\n      if (brackets[0] != '<') {\n        return false\n      }\n    }\n    bracket_count += 1\n  }\n  return bracket_count == 2",
    "  let bracket_count = 0\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      if (brackets[0] != '<') {\n        return false\n      }\n    } else if (bracket_count == 1) {\n      if (brackets[0] != '>') {\n        return false\n      }\n    } else {\n      if (brackets[0] != '<') {\n        return false\n      }\n    }\n    bracket_count += 1\n  }\n  return bracket_count == 2",
    "  let bracket_count = 0\n  let open_bracket = false\n  for c in brackets {\n    if c == \"<\" {\n      if open_bracket {\n        bracket_count += 1\n      }\n      open_bracket = true\n    } else if c == \">\" {\n      if !open_bracket {\n        return false\n      }\n      open_bracket = false\n      if bracket_count == 0 {\n        return false\n      }\n      bracket_count -= 1\n    }\n  }\n  return bracket_count == 0",
    "  let bracket_stack = []\n  for i in range(0, brackets.length()) {\n    if brackets[i] == \"<\" {\n      bracket_stack.push(i)\n    } else if brackets[i] == \">\" {\n      if bracket_stack.is_empty() {\n        return false\n      }\n      let last_index = bracket_stack.pop()\n      if brackets[last_index] != \"<\" {\n        return false\n      }\n    }\n  }\n  return bracket_stack.is_empty()",
    "  let bracket_count = 0\n  for _ in brackets.chars() {\n    if is_opening_bracket(brackets.char()) {\n      bracket_count += 1\n    } else if is_closing_bracket(brackets.char()) {\n      bracket_count -= 1\n    }\n  }\n  return bracket_count == 0",
    "  let opening_brackets = 0\n  let closing_brackets = 0\n  for _ in brackets.chars() {\n    if (brackets[i] == \"<\") {\n      opening_brackets += 1\n    } else if (brackets[i] == \">\") {\n      closing_brackets += 1\n    }\n  }\n  return opening_brackets == closing_brackets",
    "  let bracket_count = 0\n  let bracket_stack = []\n  for i in range(0, brackets.length()) {\n    if (brackets[i] == \"<\") {\n      bracket_count += 1\n      bracket_stack.push(i)\n    } else if (brackets[i] == \">\") {\n      if (bracket_count == 0) {\n        return false\n      }\n      bracket_count -= 1\n      let last_bracket = bracket_stack.pop()\n      if (last_bracket != i) {\n        return false\n      }\n    }\n  }\n  return bracket_count == 0",
    "  let bracket_stack = []\n  for i in range(0, brackets.length()) {\n    if brackets[i] == \"<\" {\n      if bracket_stack.is_empty() {\n        bracket_stack.push(i)\n      } else {\n        if brackets[bracket_stack.last()] != \">\" {\n          return false\n        }\n        bracket_stack.pop()\n      }\n    } else if brackets[i] == \">\" {\n      if bracket_stack.is_empty() {\n        return false\n      } else {\n        bracket_stack.pop()\n      }\n    }\n  }\n  return bracket_stack.is_empty()",
    "  let bracket_count = 0\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      if (brackets[0] != '<') {\n        return false\n      }\n    } else if (bracket_count == 1) {\n      if (brackets[0] != '>') {\n        return false\n      }\n    } else {\n      if (brackets[0] != '<') {\n        return false\n      }\n    }\n    bracket_count += 1\n  }\n  return bracket_count == 2",
    "  let bracket_stack = []\n  for _ in brackets.chars() {\n    if bracket_stack.is_empty() {\n      bracket_stack.append(Char(ord(c)))\n    } else if bracket_stack.last() == Char(ord(\"<\")) {\n      if ord(c) == ord(\">\") {\n        bracket_stack.pop()\n      } else {\n        return false\n      }\n    } else if bracket_stack.last() == Char(ord(\">\")) {\n      if ord(c) == ord(\"<\") {\n        bracket_stack.pop()\n      } else {\n        return false\n      }\n    } else {\n      return false\n    }\n  }\n  return bracket_stack.is_empty()",
    "  let bracket_count = 0\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      if (brackets[0] != '<') {\n        return false\n      }\n    } else if (bracket_count == 1) {\n      if (brackets[0] != '>') {\n        return false\n      }\n    } else {\n      if (brackets[0] != '<') {\n        return false\n      }\n    }\n    bracket_count += 1\n  }\n  return bracket_count == 2",
    "  let opening_brackets = 0\n  let closing_brackets = 0\n  for _ in brackets.chars() {\n    if (brackets[i] == \"<\") {\n      opening_brackets += 1\n    } else if (brackets[i] == \">\") {\n      closing_brackets += 1\n    }\n  }\n  return opening_brackets == closing_brackets",
    "  let bracket_count = 0\n  let open_bracket_index = 0\n  let open_bracket_count = 0\n  let close_bracket_index = 0\n  let close_bracket_count = 0\n\n  for i in range(0, brackets.length) {\n    if (brackets[i] == \"<\") {\n      open_bracket_count += 1\n      open_bracket_index = i\n    } else if (brackets[i] == \">\") {\n      close_bracket_count += 1\n      close_bracket_index = i\n    }\n  }\n\n  if (open_bracket_count != close_bracket_count) {\n    return false\n  }\n\n  for i in range(0, brackets.length) {\n    if (brackets[i] == \"<\") {\n      if (i == open_bracket_index) {\n        bracket_count += 1\n      } else {\n        bracket_count -= 1\n      }\n    }\n  }\n\n  return bracket_count == 0",
    "  let bracket_count = 0\n  for _ in brackets.chars() {\n    if is_opening_bracket(brackets.char()) {\n      bracket_count += 1\n    } else if is_closing_bracket(brackets.char()) {\n      bracket_count -= 1\n    }\n    if bracket_count < 0 {\n      return false\n    }\n  }\n  return bracket_count == 0",
    "  let bracket_stack = []\n  for _ in brackets.chars() {\n    if bracket_stack.is_empty() {\n      if (brackets[0] == '<') {\n        bracket_stack.append(\">\")\n      } else {\n        bracket_stack.append(\"<\")\n      }\n    } else {\n      if (brackets[0] == '<') {\n        if (bracket_stack[0] != '>') {\n          return false\n        }\n        bracket_stack.pop()\n      } else {\n        if (bracket_stack[0] != '<') {\n          return false\n        }\n        bracket_stack.pop()\n      }\n    }\n  }\n  return bracket_stack.is_empty()",
    "  let opening_brackets = 0\n  let closing_brackets = 0\n  for _ in brackets.chars() {\n    if (brackets[i] == \"<\") {\n      opening_brackets += 1\n    } else if (brackets[i] == \">\") {\n      closing_brackets += 1\n    }\n  }\n  return opening_brackets == closing_brackets",
    "  let opening_brackets = 0\n  let closing_brackets = 0\n  for _ in brackets.chars() {\n    if (brackets[i] == \"<\") {\n      opening_brackets += 1\n    } else if (brackets[i] == \">\") {\n      closing_brackets += 1\n    }\n  }\n  return opening_brackets == closing_brackets",
    "  let bracket_count = 0\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      if (brackets[0] != '<') {\n        return false\n      }\n    } else if (bracket_count == 1) {\n      if (brackets[0] != '>') {\n        return false\n      }\n    } else {\n      if (brackets[0] != '<') {\n        return false\n      }\n    }\n    bracket_count += 1\n  }\n  return bracket_count == 2",
    "  let bracket_count = 0\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      if (brackets[0] != '<') {\n        return false\n      }\n    } else if (bracket_count == 1) {\n      if (brackets[0] != '>') {\n        return false\n      }\n    } else {\n      if (brackets[0] != '<') {\n        return false\n      }\n    }\n    bracket_count += 1\n  }\n  return bracket_count == 2",
    "  let bracket_count = 0\n  let opening_bracket_index = 0\n  let closing_bracket_index = 0\n\n  for (i, c) in brackets.chars() {\n    if (c == \"<\") {\n      opening_bracket_index = i\n      bracket_count += 1\n    } else if (c == \">\") {\n      closing_bracket_index = i\n      bracket_count -= 1\n    }\n  }\n\n  return bracket_count == 0 and opening_bracket_index < closing_bracket_index",
    "  let opening_brackets = 0\n  let closing_brackets = 0\n  for _ in brackets.chars() {\n    if (brackets[i] == \"<\") {\n      opening_brackets += 1\n    } else if (brackets[i] == \">\") {\n      closing_brackets += 1\n    }\n  }\n  return opening_brackets == closing_brackets",
    "  let bracket_stack = []\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n  for i in brackets.chars() {\n    if i == \"<\" {\n      opening_bracket = i\n    } else if i == \">\" {\n      closing_bracket = i\n    } else {\n      if opening_bracket != \"\" {\n        if closing_bracket != \"\" {\n          if opening_bracket != closing_bracket {\n            return false\n          }\n        } else {\n          bracket_stack.push(opening_bracket)\n        }\n      }\n    }\n  }\n  if bracket_stack.length == 0 {\n    return true\n  }\n  return false",
    "  let bracket_count = 0\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n  for c in brackets {\n    if c == \"<\" {\n      if opening_bracket == \"\" {\n        opening_bracket = c\n      } else {\n        opening_bracket += c\n      }\n    } else if c == \">\" {\n      if closing_bracket == \"\" {\n        closing_bracket = c\n      } else {\n        closing_bracket += c\n      }\n    } else {\n      if opening_bracket != \"\" {\n        if closing_bracket == \"\" {\n          closing_bracket = c\n        } else {\n          closing_bracket += c\n        }\n      }\n    }\n    if opening_bracket != \"\" && closing_bracket != \"\" {\n      bracket_count += 1\n    }\n  }\n  return bracket_count == 0 || bracket_count == brackets.count(\">\")",
    "  let opening_brackets = 0\n  let closing_brackets = 0\n\n  for _ in brackets.chars() {\n    if (brackets[i] == \"<\") {\n      opening_brackets += 1\n    } else if (brackets[i] == \">\") {\n      closing_brackets += 1\n    }\n  }\n\n  return opening_brackets == closing_brackets",
    "  let opening_brackets = 0\n  let closing_brackets = 0\n  for _ in brackets.chars() {\n    if (brackets[i] == \"<\") {\n      opening_brackets += 1\n    } else if (brackets[i] == \">\") {\n      closing_brackets += 1\n    }\n  }\n  return opening_brackets == closing_brackets",
    "  let bracket_count = 0\n  let open_brackets = []\n  for i in range(0, brackets.length()) {\n    if brackets[i] == \"<\" {\n      bracket_count += 1\n      open_brackets.append(i)\n    } else if brackets[i] == \">\" {\n      if bracket_count == 0 {\n        return false\n      }\n      bracket_count -= 1\n    }\n  }\n  if bracket_count != 0 {\n    return false\n  }\n  return true",
    "  let bracket_count = 0\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n  let opening_bracket_index = 0\n  let closing_bracket_index = 0\n\n  for i in range(0, brackets.length) {\n    if (brackets[i] == \"<\") {\n      opening_bracket_index = i\n      opening_bracket = brackets[i]\n      bracket_count += 1\n    } else if (brackets[i] == \">\") {\n      closing_bracket_index = i\n      closing_bracket = brackets[i]\n      bracket_count -= 1\n    }\n  }\n\n  if (bracket_count != 0) {\n    return false\n  }\n\n  if (opening_bracket_index == 0 || closing_bracket_index == 0) {\n    return false\n  }\n\n  if (opening_bracket_index > closing_bracket_index) {\n    return false\n  }\n\n  if (opening_bracket != closing_bracket) {\n    return false\n  }\n\n  return true",
    "  let opening_brackets = 0\n  let closing_brackets = 0\n  for _ in brackets.chars() {\n    if (brackets[i] == \"<\") {\n      opening_brackets += 1\n    } else if (brackets[i] == \">\") {\n      closing_brackets += 1\n    }\n  }\n  return opening_brackets == closing_brackets",
    "  let bracket_stack = []\n  for i in range(0, brackets.length()) {\n    if brackets[i] == \"<\" {\n      if bracket_stack.is_empty() {\n        bracket_stack.push(i)\n      } else {\n        if bracket_stack.last() == i - 1 {\n          bracket_stack.pop()\n        } else {\n          return false\n        }\n      }\n    } else if brackets[i] == \">\" {\n      if bracket_stack.is_empty() {\n        return false\n      } else {\n        if bracket_stack.last() == i - 1 {\n          bracket_stack.pop()\n        } else {\n          return false\n        }\n      }\n    }\n  }\n  return bracket_stack.is_empty()",
    "  let bracket_count = 0\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      if (brackets[0] != '<') {\n        return false\n      }\n    } else if (bracket_count == 1) {\n      if (brackets[0] != '>') {\n        return false\n      }\n    } else {\n      if (brackets[0] != '<') {\n        return false\n      }\n    }\n    bracket_count += 1\n  }\n  return bracket_count == 2",
    "  let bracket_count = 0\n  let open_bracket_count = 0\n  let close_bracket_count = 0\n  let open_bracket_stack = []\n  let close_bracket_stack = []\n  for _ in brackets.split(\"\") {\n    if (open_bracket_count > 0) {\n      if (open_bracket_stack.length == 0) {\n        return false\n      }\n      if (open_bracket_stack.pop() != \"<\") {\n        return false\n      }\n      open_bracket_count -= 1\n    }\n    if (close_bracket_count > 0) {\n      if (close_bracket_stack.length == 0) {\n        return false\n      }\n      if (close_bracket_stack.pop() != \">\") {\n        return false\n      }\n      close_bracket_count -= 1\n    }\n    if (bracket_count > 0) {\n      if (open_bracket_count == 0) {\n        open_bracket_stack.push(\"<\")\n      }\n      if (close_bracket_count == 0) {\n        close_bracket_stack.push(\">\")\n      }\n      bracket_count += 1\n    }\n  }\n  return open_bracket_count == 0 && close_bracket_count == 0",
    "  let bracket_count = 0\n  let open_bracket = false\n  for _ in brackets.chars() {\n    if open_bracket {\n      if bracket_count == 0 {\n        return false\n      }\n      bracket_count -= 1\n    } else {\n      if bracket_count == 0 {\n        open_bracket = true\n      } else {\n        bracket_count += 1\n      }\n    }\n  }\n  return bracket_count == 0",
    "  let bracket_stack = []\n  for i in range(0, brackets.length()) {\n    let c = brackets[i]\n    if c == \"<\" {\n      bracket_stack.push(c)\n    } else if c == \">\" {\n      if bracket_stack.is_empty() {\n        return false\n      } else if bracket_stack.pop() != \"<\" {\n        return false\n      }\n    }\n  }\n  return bracket_stack.is_empty()",
    "  let bracket_count = 0\n  let opening_bracket_index = 0\n  let closing_bracket_index = 0\n  for i in range(0, brackets.length()) {\n    if (brackets[i] == \"<\") {\n      opening_bracket_index = i\n      bracket_count += 1\n    } else if (brackets[i] == \">\") {\n      closing_bracket_index = i\n      bracket_count -= 1\n    }\n    if (bracket_count < 0) {\n      return false\n    }\n  }\n  if (bracket_count != 0) {\n    return false\n  }\n  return opening_bracket_index == closing_bracket_index",
    "  let bracket_stack = []\n  for i in range(0, brackets.length()) {\n    if brackets[i] == \"<\" {\n      if bracket_stack.is_empty() {\n        bracket_stack.push(i)\n      } else {\n        if brackets[bracket_stack.last()] != \">\" {\n          return false\n        }\n        bracket_stack.pop()\n      }\n    } else if brackets[i] == \">\" {\n      if bracket_stack.is_empty() {\n        return false\n      } else {\n        bracket_stack.pop()\n      }\n    }\n  }\n  return bracket_stack.is_empty()",
    "  let opening_brackets = 0\n  let closing_brackets = 0\n  for _ in brackets.chars() {\n    if (brackets[i] == \"<\") {\n      opening_brackets += 1\n    } else if (brackets[i] == \">\") {\n      closing_brackets += 1\n    }\n  }\n  return opening_brackets == closing_brackets",
    "  let bracket_stack = []\n  let opening_bracket = \"\"\n  let closing_bracket = \"\"\n  for i in range(0, brackets.length()) {\n    let c = brackets[i]\n    if c == \"<\" {\n      opening_bracket = c\n    } else if c == \">\" {\n      if opening_bracket == \"\" {\n        return false\n      }\n      if closing_bracket != \"\" {\n        return false\n      }\n      closing_bracket = c\n    } else {\n      if opening_bracket == \"\" {\n        return false\n      }\n      if closing_bracket == \"\" {\n        bracket_stack.push(opening_bracket)\n      } else {\n        if opening_bracket != closing_bracket {\n          return false\n        }\n        opening_bracket = \"\"\n        closing_bracket = \"\"\n      }\n    }\n  }\n  if opening_bracket != \"\" {\n    return false\n  }\n  if closing_bracket != \"\" {\n    return false\n  }\n  return true",
    "  let bracket_stack = []\n  for i in range(0, brackets.length()) {\n    if brackets[i] == \"<\" {\n      if bracket_stack.length == 0 {\n        bracket_stack.push(i)\n      } else {\n        if brackets[bracket_stack.last] == \">\" {\n          bracket_stack.pop()\n        } else {\n          bracket_stack.push(i)\n        }\n      }\n    } else if brackets[i] == \">\" {\n      if bracket_stack.length == 0 {\n        return false\n      } else {\n        if brackets[bracket_stack.last] == \"<\" {\n          bracket_stack.pop()\n        } else {\n          return false\n        }\n      }\n    }\n  }\n  return bracket_stack.length == 0",
    "  let opening_brackets = 0\n  let closing_brackets = 0\n  for _ in brackets.chars() {\n    if (brackets[i] == \"<\") {\n      opening_brackets += 1\n    } else if (brackets[i] == \">\") {\n      closing_brackets += 1\n    }\n  }\n  return opening_brackets == closing_brackets",
    "  let bracket_count = 0\n  let open_bracket = false\n  for c in brackets {\n    if c == \"<\" {\n      if open_bracket {\n        bracket_count += 1\n      }\n      open_bracket = true\n    } else if c == \">\" {\n      if !open_bracket {\n        bracket_count += 1\n      }\n      open_bracket = false\n    }\n  }\n  return bracket_count == 0",
    "  let bracket_stack = []\n  let bracket_count = 0\n  for i in range(0, brackets.length()) {\n    if brackets[i] == \"<\" {\n      bracket_stack.push(i)\n      bracket_count += 1\n    } else if brackets[i] == \">\" {\n      if bracket_stack.is_empty() {\n        return false\n      } else if bracket_stack.pop() != i - 1 {\n        return false\n      } else {\n        bracket_count -= 1\n      }\n    }\n  }\n  return bracket_count == 0",
    "  let bracket_count = 0\n  for _ in brackets.chars() {\n    if (bracket_count == 0) {\n      if (brackets[0] != '<') {\n        return false\n      }\n    } else if (bracket_count == 1) {\n      if (brackets[0] != '>') {\n        return false\n      }\n    } else {\n      if (brackets[0] != '<') {\n        return false\n      }\n    }\n    bracket_count += 1\n  }\n  return bracket_count == 2",
    "  let bracket_stack = []\n  for i in range(0, brackets.length()) {\n    if brackets[i] == \"<\" {\n      if bracket_stack.is_empty() {\n        bracket_stack.append(i)\n      } else {\n        if bracket_stack.last() == i - 1 {\n          bracket_stack.pop()\n        } else {\n          return false\n        }\n      }\n    } else if brackets[i] == \">\" {\n      if bracket_stack.is_empty() {\n        return false\n      } else {\n        if bracket_stack.last() == i - 1 {\n          bracket_stack.pop()\n        } else {\n          return false\n        }\n      }\n    }\n  }\n  return bracket_stack.is_empty()"
  ],
  "stop_tokens": [
    "\n}"
  ]
}