{
  "name": "HumanEval_13_greatest_common_divisor",
  "language": "rs",
  "prompt": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n",
  "tests": "}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n    if a == 0 || b == 0 {\n        return 0\n    }\n    if a == 1 || b == 1 {\n        return 1\n    }\n    if a == b {\n        return a\n    }\n    if a > b {\n        return greatest_common_divisor(b, a % b)\n    }\n    return greatest_common_divisor(a, b % a)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `0`,\n right: `5`', /tmp/tmprwi34_re.rs:25:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n    if a == 0 || b == 0 {\n        return 0\n    }\n    if a == 1 || b == 1 {\n        return 1\n    }\n    if a == b {\n        return a\n    }\n    if a % b == 0 {\n        return b\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 1\n  }\n  if a == 1 || b == 1 {\n    return a\n  }\n  if a == b {\n    return a\n  }\n  return greatest_common_divisor(b, a % b)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3`,\n right: `1`', /tmp/tmp8ivd6fno.rs:21:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 0\n  }\n  if a == 1 || b == 1 {\n    return 1\n  }\n  if a == b {\n    return a\n  }\n  if a % b == 0 {\n    return b\n  }\n  return greatest_common_divisor(b, a % b)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 1\n  }\n  if a == 1 || b == 1 {\n    return a\n  }\n  if a == b {\n    return a\n  }\n  if a % b == 0 {\n    return b\n  }\n  return greatest_common_divisor(b, a % b)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3`,\n right: `1`', /tmp/tmpt7grx77f.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 1\n  }\n  if a == 1 || b == 1 {\n    return a\n  }\n  if a == b {\n    return a\n  }\n  if a % b == 0 {\n    return b\n  }\n  return greatest_common_divisor(b, a % b)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3`,\n right: `1`', /tmp/tmpt7grx77f.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 1\n  }\n  if a == 1 || b == 1 {\n    return a\n  }\n  if a == b {\n    return a\n  }\n  if a % b == 0 {\n    return b\n  }\n  return greatest_common_divisor(b, a % b)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3`,\n right: `1`', /tmp/tmpt7grx77f.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 0\n  }\n\n  let gcd = 1\n  while a != 0 {\n    let t = a\n    a = b % a\n    b = t\n  }\n\n  return b\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmp1hdurxtn.rs:11:14\n   |\n11 |   let gcd = 1\n   |              ^ help: add `;` here\n12 |   while a != 0 {\n   |   ----- unexpected token\n\nerror: expected `;`, found `a`\n  --> /tmp/tmp1hdurxtn.rs:13:14\n   |\n13 |     let t = a\n   |              ^ help: add `;` here\n14 |     a = b % a\n   |     - unexpected token\n\nerror: expected `;`, found `b`\n  --> /tmp/tmp1hdurxtn.rs:14:14\n   |\n14 |     a = b % a\n   |              ^ help: add `;` here\n15 |     b = t\n   |     - unexpected token\n\nerror: aborting due to 3 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n    if a == 0 || b == 0 {\n        return 0\n    }\n    if a == 1 || b == 1 {\n        return 1\n    }\n    if a == b {\n        return a\n    }\n    if a % b == 0 {\n        return b\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 1\n  }\n  if a == 1 || b == 1 {\n    return a\n  }\n  if a == b {\n    return a\n  }\n  if a % b == 0 {\n    return b\n  }\n  return greatest_common_divisor(b, a % b)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3`,\n right: `1`', /tmp/tmpt7grx77f.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 0\n  } else if a == 1 || b == 1 {\n    return 1\n  } else if a == b {\n    return a\n  } else {\n    return greatest_common_divisor(b, a % b)\n  }\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `0`,\n right: `5`', /tmp/tmpo9uoimjn.rs:21:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n    if a == 0 || b == 0 {\n        return 0\n    }\n    if a == 1 || b == 1 {\n        return 1\n    }\n    if a == b {\n        return a\n    }\n    if a % b == 0 {\n        return b\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 1\n  }\n  if a == 1 || b == 1 {\n    return a\n  }\n  return greatest_common_divisor(b, a % b)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3`,\n right: `1`', /tmp/tmpnbjdafg3.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 1\n  }\n  if a == 1 || b == 1 {\n    return a\n  }\n  if a == b {\n    return a\n  }\n  if a % b == 0 {\n    return b\n  }\n  return greatest_common_divisor(b, a % b)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3`,\n right: `1`', /tmp/tmpt7grx77f.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 1\n  }\n  if a < b {\n    a, b = b, a\n  }\n  while b != 0 {\n    let r = a % b\n    a = b\n    b = r\n  }\n  return a\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error: expected `:`, found `=`\n  --> /tmp/tmpdzjgwdzu.rs:11:10\n   |\n11 |     a, b = b, a\n   |         -^\n   |         |\n   |         help: replace equals symbol with a colon: `:`\n\nerror: struct literals are not allowed here\n  --> /tmp/tmpdzjgwdzu.rs:10:10\n   |\n10 |     if a < b {\n   |  __________^\n11 | |     a, b = b, a\n12 | |   }\n   | |___^\n   |\nhelp: surround the struct literal with parentheses\n   |\n10 ~   if a < (b {\n11 |     a, b = b, a\n12 ~   })\n   |\n\nerror: expected `;`, found `a`\n  --> /tmp/tmpdzjgwdzu.rs:14:18\n   |\n14 |     let r = a % b\n   |                  ^ help: add `;` here\n15 |     a = b\n   |     - unexpected token\n\nerror: expected `;`, found `b`\n  --> /tmp/tmpdzjgwdzu.rs:15:10\n   |\n15 |     a = b\n   |          ^ help: add `;` here\n16 |     b = r\n   |     - unexpected token\n\nerror: expected `{`, found keyword `while`\n  --> /tmp/tmpdzjgwdzu.rs:13:3\n   |\n10 |   if a < b {\n   |   -- this `if` expression has a condition, but no block\n...\n13 |   while b != 0 {\n   |   ^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n13 ~   { while b != 0 {\n14 |     let r = a % b\n15 |     a = b\n16 |     b = r\n17 ~   } }\n   |\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 0\n  }\n\n  let gcd = 1\n  while a != 0 {\n    let temp = a\n    a = b % a\n    b = temp\n  }\n\n  return b\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmpqa2g5e9f.rs:11:14\n   |\n11 |   let gcd = 1\n   |              ^ help: add `;` here\n12 |   while a != 0 {\n   |   ----- unexpected token\n\nerror: expected `;`, found `a`\n  --> /tmp/tmpqa2g5e9f.rs:13:17\n   |\n13 |     let temp = a\n   |                 ^ help: add `;` here\n14 |     a = b % a\n   |     - unexpected token\n\nerror: expected `;`, found `b`\n  --> /tmp/tmpqa2g5e9f.rs:14:14\n   |\n14 |     a = b % a\n   |              ^ help: add `;` here\n15 |     b = temp\n   |     - unexpected token\n\nerror: aborting due to 3 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 1\n  }\n  if a == 1 || b == 1 {\n    return a\n  }\n  if a == b {\n    return a\n  }\n  if a % b == 0 {\n    return b\n  }\n  return greatest_common_divisor(b, a % b)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3`,\n right: `1`', /tmp/tmpt7grx77f.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 1\n  }\n\n  let gcd = 0\n  let x = 0\n  let y = 0\n\n  while (a != 0) {\n    x = a % b\n    y = b % a\n    gcd = x + y\n    a = b\n    b = gcd\n  }\n\n  return gcd\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp60a30iiq.rs:11:14\n   |\n11 |   let gcd = 0\n   |              ^ help: add `;` here\n12 |   let x = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp60a30iiq.rs:12:12\n   |\n12 |   let x = 0\n   |            ^ help: add `;` here\n13 |   let y = 0\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `while`\n  --> /tmp/tmp60a30iiq.rs:13:12\n   |\n13 |   let y = 0\n   |            ^ help: add `;` here\n14 | \n15 |   while (a != 0) {\n   |   ----- unexpected token\n\nerror: expected `;`, found `y`\n  --> /tmp/tmp60a30iiq.rs:16:14\n   |\n16 |     x = a % b\n   |              ^ help: add `;` here\n17 |     y = b % a\n   |     - unexpected token\n\nerror: expected `;`, found `gcd`\n  --> /tmp/tmp60a30iiq.rs:17:14\n   |\n17 |     y = b % a\n   |              ^ help: add `;` here\n18 |     gcd = x + y\n   |     --- unexpected token\n\nerror: expected `;`, found `a`\n  --> /tmp/tmp60a30iiq.rs:18:16\n   |\n18 |     gcd = x + y\n   |                ^ help: add `;` here\n19 |     a = b\n   |     - unexpected token\n\nerror: expected `;`, found `b`\n  --> /tmp/tmp60a30iiq.rs:19:10\n   |\n19 |     a = b\n   |          ^ help: add `;` here\n20 |     b = gcd\n   |     - unexpected token\n\nwarning: unnecessary parentheses around `while` condition\n  --> /tmp/tmp60a30iiq.rs:15:9\n   |\n15 |   while (a != 0) {\n   |         ^      ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n15 -   while (a != 0) {\n15 +   while a != 0 {\n   | \n\nerror: aborting due to 7 previous errors; 1 warning emitted\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 0\n  }\n  if a == 1 || b == 1 {\n    return 1\n  }\n  if a == b {\n    return a\n  }\n  if a % b == 0 {\n    return b\n  }\n  return greatest_common_divisor(b, a % b)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 0\n  }\n  if a == 1 || b == 1 {\n    return 1\n  }\n  if a == b {\n    return a\n  }\n  if a < b {\n    return greatest_common_divisor(b, a)\n  }\n  return greatest_common_divisor(a, b)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293352,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n    if a == 0 || b == 0 {\n        return 0\n    }\n    if a == 1 || b == 1 {\n        return 1\n    }\n    if a == b {\n        return a\n    }\n    if a % b == 0 {\n        return b\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 0\n  }\n  if a == 1 || b == 1 {\n    return 1\n  }\n  if a == b {\n    return a\n  }\n  if a % b == 0 {\n    return b\n  }\n  return greatest_common_divisor(b, a % b)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 1\n  }\n  if a == 1 || b == 1 {\n    return a\n  }\n  if a == b {\n    return a\n  }\n  if a % b == 0 {\n    return b\n  }\n  return greatest_common_divisor(b, a % b)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3`,\n right: `1`', /tmp/tmpt7grx77f.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 0\n  }\n  if a == 1 || b == 1 {\n    return 1\n  }\n  if a == b {\n    return a\n  }\n  return greatest_common_divisor(b, a % b)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `0`,\n right: `5`', /tmp/tmpzkes88lo.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 1\n  } else if a == 1 || b == 1 {\n    return a\n  } else if a == b {\n    return a\n  } else {\n    return greatest_common_divisor(b, a % b)\n  }\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3`,\n right: `1`', /tmp/tmphk5_ccvr.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 0\n  }\n  if a == 1 || b == 1 {\n    return 1\n  }\n  if a == b {\n    return a\n  }\n  if a < b {\n    a, b = b, a\n  }\n  return greatest_common_divisor(b, a % b)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error: expected `:`, found `=`\n  --> /tmp/tmp0zp4vn2o.rs:17:10\n   |\n17 |     a, b = b, a\n   |         -^\n   |         |\n   |         help: replace equals symbol with a colon: `:`\n\nerror: struct literals are not allowed here\n  --> /tmp/tmp0zp4vn2o.rs:16:10\n   |\n16 |     if a < b {\n   |  __________^\n17 | |     a, b = b, a\n18 | |   }\n   | |___^\n   |\nhelp: surround the struct literal with parentheses\n   |\n16 ~   if a < (b {\n17 |     a, b = b, a\n18 ~   })\n   |\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmp0zp4vn2o.rs:19:3\n   |\n16 |   if a < b {\n   |   -- this `if` expression has a condition, but no block\n...\n19 |   return greatest_common_divisor(b, a % b)\n   |   ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n19 |   { return greatest_common_divisor(b, a % b) }\n   |   +                                          +\n\nerror: aborting due to 3 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n    if a == 0 || b == 0 {\n        return 0\n    }\n    if a == 1 || b == 1 {\n        return 1\n    }\n    if a == b {\n        return a\n    }\n    if a % b == 0 {\n        return b\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 1\n  }\n  if a == 1 || b == 1 {\n    return a\n  }\n  return greatest_common_divisor(b, a % b)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3`,\n right: `1`', /tmp/tmpnbjdafg3.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 1\n  }\n\n  let gcd = 1\n  let x = a\n  let y = b\n\n  while x != 0 {\n    let temp = x\n    x = y % x\n    y = temp\n  }\n\n  return y\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp7y7xozb8.rs:11:14\n   |\n11 |   let gcd = 1\n   |              ^ help: add `;` here\n12 |   let x = a\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp7y7xozb8.rs:12:12\n   |\n12 |   let x = a\n   |            ^ help: add `;` here\n13 |   let y = b\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `while`\n  --> /tmp/tmp7y7xozb8.rs:13:12\n   |\n13 |   let y = b\n   |            ^ help: add `;` here\n14 | \n15 |   while x != 0 {\n   |   ----- unexpected token\n\nerror: expected `;`, found `x`\n  --> /tmp/tmp7y7xozb8.rs:16:17\n   |\n16 |     let temp = x\n   |                 ^ help: add `;` here\n17 |     x = y % x\n   |     - unexpected token\n\nerror: expected `;`, found `y`\n  --> /tmp/tmp7y7xozb8.rs:17:14\n   |\n17 |     x = y % x\n   |              ^ help: add `;` here\n18 |     y = temp\n   |     - unexpected token\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 1\n  }\n\n  let gcd = 1\n  while a != 0 {\n    if a > b {\n      a = a % b\n    } else {\n      b = b % a\n    }\n\n    gcd = gcd * a\n  }\n\n  return gcd\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmpdy4p4pl1.rs:11:14\n   |\n11 |   let gcd = 1\n   |              ^ help: add `;` here\n12 |   while a != 0 {\n   |   ----- unexpected token\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 1\n  }\n  if a == 1 || b == 1 {\n    return a\n  }\n  return greatest_common_divisor(b, a % b)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3`,\n right: `1`', /tmp/tmpnbjdafg3.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 0\n  }\n  if a == 1 || b == 1 {\n    return 1\n  }\n  if a == b {\n    return a\n  }\n  if a < b {\n    a, b = b, a\n  }\n  return greatest_common_divisor(b, a % b)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error: expected `:`, found `=`\n  --> /tmp/tmp0zp4vn2o.rs:17:10\n   |\n17 |     a, b = b, a\n   |         -^\n   |         |\n   |         help: replace equals symbol with a colon: `:`\n\nerror: struct literals are not allowed here\n  --> /tmp/tmp0zp4vn2o.rs:16:10\n   |\n16 |     if a < b {\n   |  __________^\n17 | |     a, b = b, a\n18 | |   }\n   | |___^\n   |\nhelp: surround the struct literal with parentheses\n   |\n16 ~   if a < (b {\n17 |     a, b = b, a\n18 ~   })\n   |\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmp0zp4vn2o.rs:19:3\n   |\n16 |   if a < b {\n   |   -- this `if` expression has a condition, but no block\n...\n19 |   return greatest_common_divisor(b, a % b)\n   |   ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n19 |   { return greatest_common_divisor(b, a % b) }\n   |   +                                          +\n\nerror: aborting due to 3 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 1\n  }\n  if a == 1 || b == 1 {\n    return a\n  }\n  return greatest_common_divisor(b, a % b)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3`,\n right: `1`', /tmp/tmpnbjdafg3.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 0\n  }\n  if a == 1 || b == 1 {\n    return 1\n  }\n  if a == b {\n    return a\n  }\n  return greatest_common_divisor(b, a % b)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `0`,\n right: `5`', /tmp/tmpzkes88lo.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 1\n  }\n  if a == 1 || b == 1 {\n    return a\n  }\n  if a == b {\n    return a\n  }\n  if a % b == 0 {\n    return b\n  }\n  return greatest_common_divisor(b, a % b)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3`,\n right: `1`', /tmp/tmpt7grx77f.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 1\n  }\n  if a == 1 || b == 1 {\n    return a\n  }\n  if a == b {\n    return a\n  }\n  if a % b == 0 {\n    return b\n  }\n  return greatest_common_divisor(b, a % b)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3`,\n right: `1`', /tmp/tmpt7grx77f.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 0\n  }\n  if a == 1 || b == 1 {\n    return 1\n  }\n  if a == b {\n    return a\n  }\n  if a % b == 0 {\n    return b\n  }\n  return greatest_common_divisor(b, a % b)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 0\n  }\n  if a == 1 || b == 1 {\n    return 1\n  }\n  if a == b {\n    return a\n  }\n  if a % b == 0 {\n    return b\n  }\n  return greatest_common_divisor(b, a % b)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 1\n  }\n  if a == 1 || b == 1 {\n    return a\n  }\n  if a == b {\n    return a\n  }\n  if a % b == 0 {\n    return b\n  }\n  return greatest_common_divisor(b, a % b)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3`,\n right: `1`', /tmp/tmpt7grx77f.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 1\n  }\n  if a == 1 || b == 1 {\n    return a\n  }\n  if a == b {\n    return a\n  }\n  if a % b == 0 {\n    return b\n  }\n  return greatest_common_divisor(b, a % b)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3`,\n right: `1`', /tmp/tmpt7grx77f.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 0\n  }\n\n  if a == 1 || b == 1 {\n    return 1\n  }\n\n  if a == b {\n    return a\n  }\n\n  if a % b == 0 {\n    return b\n  }\n\n  return greatest_common_divisor(b, a % b)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n    if a == 0 || b == 0 {\n        return 1\n    }\n    if a == 1 || b == 1 {\n        return a\n    }\n    if a == b {\n        return a\n    }\n    if a % b == 0 {\n        return b\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3`,\n right: `1`', /tmp/tmp951sq5ke.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 1\n  }\n  if a == 1 || b == 1 {\n    return a\n  }\n  if a == b {\n    return a\n  }\n  if a % b == 0 {\n    return b\n  }\n  return greatest_common_divisor(b, a % b)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3`,\n right: `1`', /tmp/tmpt7grx77f.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 0\n  }\n  if a == 1 || b == 1 {\n    return 1\n  }\n  if a == b {\n    return a\n  }\n  if a % b == 0 {\n    return b\n  }\n  return greatest_common_divisor(b, a % b)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 1\n  }\n  if a == 1 || b == 1 {\n    return a\n  }\n  return greatest_common_divisor(b, a % b)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3`,\n right: `1`', /tmp/tmpnbjdafg3.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 1\n  }\n  if a == 1 || b == 1 {\n    return a\n  }\n  if a == b {\n    return a\n  }\n  if a % b == 0 {\n    return b\n  }\n  return greatest_common_divisor(b, a % b)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3`,\n right: `1`', /tmp/tmpt7grx77f.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n    if a == 0 || b == 0 {\n        return 0\n    }\n    if a == 1 || b == 1 {\n        return 1\n    }\n    if a == b {\n        return a\n    }\n    if a % b == 0 {\n        return b\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n    if a == 0 || b == 0 {\n        return 0\n    }\n    if a == 1 || b == 1 {\n        return 1\n    }\n    if a == b {\n        return a\n    }\n    if a > b {\n        return greatest_common_divisor(b, a % b)\n    }\n    return greatest_common_divisor(a, b % a)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `0`,\n right: `5`', /tmp/tmprwi34_re.rs:25:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 1\n  }\n  if a == 1 || b == 1 {\n    return a\n  }\n  return greatest_common_divisor(b, a % b)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3`,\n right: `1`', /tmp/tmpnbjdafg3.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 0\n  }\n  if a == 1 || b == 1 {\n    return 1\n  }\n  if a == b {\n    return a\n  }\n  if a < b {\n    a, b = b, a\n  }\n  while b != 0 {\n    a, b = b, a % b\n  }\n  return a\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error: expected `:`, found `=`\n  --> /tmp/tmpo6aaqy7m.rs:17:10\n   |\n17 |     a, b = b, a\n   |         -^\n   |         |\n   |         help: replace equals symbol with a colon: `:`\n\nerror: struct literals are not allowed here\n  --> /tmp/tmpo6aaqy7m.rs:16:10\n   |\n16 |     if a < b {\n   |  __________^\n17 | |     a, b = b, a\n18 | |   }\n   | |___^\n   |\nhelp: surround the struct literal with parentheses\n   |\n16 ~   if a < (b {\n17 |     a, b = b, a\n18 ~   })\n   |\n\nerror: expected one of `!`, `.`, `::`, `;`, `?`, `{`, `}`, or an operator, found `,`\n  --> /tmp/tmpo6aaqy7m.rs:20:6\n   |\n20 |     a, b = b, a % b\n   |      ^ expected one of 8 possible tokens\n\nerror: expected `{`, found keyword `while`\n  --> /tmp/tmpo6aaqy7m.rs:19:3\n   |\n16 |   if a < b {\n   |   -- this `if` expression has a condition, but no block\n...\n19 |   while b != 0 {\n   |   ^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n19 ~   { while b != 0 {\n20 |     a, b = b, a % b\n21 ~   } }\n   |\n\nerror: aborting due to 4 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 1\n  }\n  if a == 1 || b == 1 {\n    return a\n  }\n  return greatest_common_divisor(b, a % b)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3`,\n right: `1`', /tmp/tmpnbjdafg3.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 0\n  }\n  if a == 1 || b == 1 {\n    return 1\n  }\n  if a == b {\n    return a\n  }\n  return greatest_common_divisor(b, a % b)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `0`,\n right: `5`', /tmp/tmpzkes88lo.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 0\n  }\n  if a == 1 || b == 1 {\n    return 1\n  }\n  if a == b {\n    return a\n  }\n  if a % b == 0 {\n    return b\n  }\n  return greatest_common_divisor(b, a % b)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 0\n  }\n  if a == 1 || b == 1 {\n    return 1\n  }\n  if a == b {\n    return a\n  }\n  if a % b == 0 {\n    return b\n  }\n  return greatest_common_divisor(b, a % b)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 1\n  }\n  if a == 1 || b == 1 {\n    return a\n  }\n  if a == b {\n    return a\n  }\n  if a % b == 0 {\n    return b\n  }\n  return greatest_common_divisor(b, a % b)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3`,\n right: `1`', /tmp/tmpt7grx77f.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 0\n  }\n\n  if a == 1 || b == 1 {\n    return 1\n  }\n\n  if a == b {\n    return a\n  }\n\n  if a % b == 0 {\n    return b\n  }\n\n  return greatest_common_divisor(b, a % b)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n    if a == 0 || b == 0 {\n        return 1\n    }\n    if a == 1 || b == 1 {\n        return a\n    }\n    if a == b {\n        return a\n    }\n    if a % b == 0 {\n        return b\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3`,\n right: `1`', /tmp/tmp951sq5ke.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n    if a == 0 || b == 0 {\n        return 1\n    }\n    if a == 1 || b == 1 {\n        return a\n    }\n    if a == b {\n        return a\n    }\n    if a % b == 0 {\n        return b\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3`,\n right: `1`', /tmp/tmp951sq5ke.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 1\n  }\n  if a == 1 || b == 1 {\n    return a\n  }\n  if a == b {\n    return a\n  }\n  if a % b == 0 {\n    return b\n  }\n  return greatest_common_divisor(b, a % b)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3`,\n right: `1`', /tmp/tmpt7grx77f.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 1\n  }\n  if a == 1 || b == 1 {\n    return a\n  }\n  if a == b {\n    return a\n  }\n  if a % b == 0 {\n    return b\n  }\n  return greatest_common_divisor(b, a % b)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3`,\n right: `1`', /tmp/tmpt7grx77f.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 1\n  }\n  if a == 1 || b == 1 {\n    return a\n  }\n  if a == b {\n    return a\n  }\n  if a % b == 0 {\n    return b\n  }\n  return greatest_common_divisor(b, a % b)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3`,\n right: `1`', /tmp/tmpt7grx77f.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n    if a == 0 || b == 0 {\n        return 0\n    }\n    if a == 1 || b == 1 {\n        return 1\n    }\n    if a == b {\n        return a\n    }\n    if a < b {\n        return greatest_common_divisor(b, a)\n    }\n    return greatest_common_divisor(a, b)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293352,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 0\n  }\n  if a == 1 || b == 1 {\n    return 1\n  }\n  if a == b {\n    return a\n  }\n  if a % b == 0 {\n    return b\n  }\n  return greatest_common_divisor(b, a % b)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 1\n  }\n  if a == 1 || b == 1 {\n    return a\n  }\n  if a == b {\n    return a\n  }\n  if a % b == 0 {\n    return b\n  }\n  return greatest_common_divisor(b, a % b)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3`,\n right: `1`', /tmp/tmpt7grx77f.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 1\n  }\n\n  let gcd = 1\n  while b != 0 {\n    let temp = a % b\n    a = b\n    b = temp\n    gcd = gcd * temp\n  }\n\n  return gcd\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmp1m9m64sd.rs:11:14\n   |\n11 |   let gcd = 1\n   |              ^ help: add `;` here\n12 |   while b != 0 {\n   |   ----- unexpected token\n\nerror: expected `;`, found `a`\n  --> /tmp/tmp1m9m64sd.rs:13:21\n   |\n13 |     let temp = a % b\n   |                     ^ help: add `;` here\n14 |     a = b\n   |     - unexpected token\n\nerror: expected `;`, found `b`\n  --> /tmp/tmp1m9m64sd.rs:14:10\n   |\n14 |     a = b\n   |          ^ help: add `;` here\n15 |     b = temp\n   |     - unexpected token\n\nerror: expected `;`, found `gcd`\n  --> /tmp/tmp1m9m64sd.rs:15:13\n   |\n15 |     b = temp\n   |             ^ help: add `;` here\n16 |     gcd = gcd * temp\n   |     --- unexpected token\n\nerror: aborting due to 4 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n    if a == 0 {\n        return b\n    }\n    if b == 0 {\n        return a\n    }\n    if a < b {\n        a, b = b, a\n    }\n    while b != 0 {\n        a, b = b, a % b\n    }\n    return a\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error: expected `:`, found `=`\n  --> /tmp/tmptqkp1oaw.rs:14:14\n   |\n14 |         a, b = b, a\n   |             -^\n   |             |\n   |             help: replace equals symbol with a colon: `:`\n\nerror: struct literals are not allowed here\n  --> /tmp/tmptqkp1oaw.rs:13:12\n   |\n13 |       if a < b {\n   |  ____________^\n14 | |         a, b = b, a\n15 | |     }\n   | |_____^\n   |\nhelp: surround the struct literal with parentheses\n   |\n13 ~     if a < (b {\n14 |         a, b = b, a\n15 ~     })\n   |\n\nerror: expected one of `!`, `.`, `::`, `;`, `?`, `{`, `}`, or an operator, found `,`\n  --> /tmp/tmptqkp1oaw.rs:17:10\n   |\n17 |         a, b = b, a % b\n   |          ^ expected one of 8 possible tokens\n\nerror: expected `{`, found keyword `while`\n  --> /tmp/tmptqkp1oaw.rs:16:5\n   |\n13 |     if a < b {\n   |     -- this `if` expression has a condition, but no block\n...\n16 |     while b != 0 {\n   |     ^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n16 ~     { while b != 0 {\n17 |         a, b = b, a % b\n18 ~     } }\n   |\n\nerror: aborting due to 4 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 0\n  }\n  if a == 1 || b == 1 {\n    return 1\n  }\n  if a == b {\n    return a\n  }\n  if a % b == 0 {\n    return b\n  }\n  return greatest_common_divisor(b, a % b)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 1\n  }\n  if a == 1 || b == 1 {\n    return a\n  }\n  if a == b {\n    return a\n  }\n  if a % b == 0 {\n    return b\n  }\n  return greatest_common_divisor(b, a % b)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3`,\n right: `1`', /tmp/tmpt7grx77f.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 0\n  }\n  if a == 1 || b == 1 {\n    return 1\n  }\n  if a == b {\n    return a\n  }\n  if a < b {\n    a, b = b, a\n  }\n  return greatest_common_divisor(b, a % b)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error: expected `:`, found `=`\n  --> /tmp/tmp0zp4vn2o.rs:17:10\n   |\n17 |     a, b = b, a\n   |         -^\n   |         |\n   |         help: replace equals symbol with a colon: `:`\n\nerror: struct literals are not allowed here\n  --> /tmp/tmp0zp4vn2o.rs:16:10\n   |\n16 |     if a < b {\n   |  __________^\n17 | |     a, b = b, a\n18 | |   }\n   | |___^\n   |\nhelp: surround the struct literal with parentheses\n   |\n16 ~   if a < (b {\n17 |     a, b = b, a\n18 ~   })\n   |\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmp0zp4vn2o.rs:19:3\n   |\n16 |   if a < b {\n   |   -- this `if` expression has a condition, but no block\n...\n19 |   return greatest_common_divisor(b, a % b)\n   |   ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n19 |   { return greatest_common_divisor(b, a % b) }\n   |   +                                          +\n\nerror: aborting due to 3 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 0\n  }\n  if a == 1 || b == 1 {\n    return 1\n  }\n  if a == b {\n    return a\n  }\n  if a < b {\n    a, b = b, a\n  }\n  return greatest_common_divisor(b, a % b)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error: expected `:`, found `=`\n  --> /tmp/tmp0zp4vn2o.rs:17:10\n   |\n17 |     a, b = b, a\n   |         -^\n   |         |\n   |         help: replace equals symbol with a colon: `:`\n\nerror: struct literals are not allowed here\n  --> /tmp/tmp0zp4vn2o.rs:16:10\n   |\n16 |     if a < b {\n   |  __________^\n17 | |     a, b = b, a\n18 | |   }\n   | |___^\n   |\nhelp: surround the struct literal with parentheses\n   |\n16 ~   if a < (b {\n17 |     a, b = b, a\n18 ~   })\n   |\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmp0zp4vn2o.rs:19:3\n   |\n16 |   if a < b {\n   |   -- this `if` expression has a condition, but no block\n...\n19 |   return greatest_common_divisor(b, a % b)\n   |   ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n19 |   { return greatest_common_divisor(b, a % b) }\n   |   +                                          +\n\nerror: aborting due to 3 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 0\n  }\n  if a == 1 || b == 1 {\n    return 1\n  }\n  if a == b {\n    return a\n  }\n  if a % b == 0 {\n    return b\n  }\n  return greatest_common_divisor(b, a % b)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 1\n  }\n  if a == 1 || b == 1 {\n    return a\n  }\n  if a == b {\n    return a\n  }\n  if a % b == 0 {\n    return b\n  }\n  return greatest_common_divisor(b, a % b)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3`,\n right: `1`', /tmp/tmpt7grx77f.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n    if a == 0 || b == 0 {\n        return 0\n    }\n    if a == 1 || b == 1 {\n        return 1\n    }\n    if a == b {\n        return a\n    }\n    if a < b {\n        a, b = b, a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error: expected `:`, found `=`\n  --> /tmp/tmpul5afv2c.rs:17:14\n   |\n17 |         a, b = b, a\n   |             -^\n   |             |\n   |             help: replace equals symbol with a colon: `:`\n\nerror: struct literals are not allowed here\n  --> /tmp/tmpul5afv2c.rs:16:12\n   |\n16 |       if a < b {\n   |  ____________^\n17 | |         a, b = b, a\n18 | |     }\n   | |_____^\n   |\nhelp: surround the struct literal with parentheses\n   |\n16 ~     if a < (b {\n17 |         a, b = b, a\n18 ~     })\n   |\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmpul5afv2c.rs:19:5\n   |\n16 |     if a < b {\n   |     -- this `if` expression has a condition, but no block\n...\n19 |     return greatest_common_divisor(b, a % b)\n   |     ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n19 |     { return greatest_common_divisor(b, a % b) }\n   |     +                                          +\n\nerror: aborting due to 3 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 1\n  }\n  if a == 1 || b == 1 {\n    return a\n  }\n  if a == b {\n    return a\n  }\n  if a % b == 0 {\n    return b\n  }\n  return greatest_common_divisor(b, a % b)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3`,\n right: `1`', /tmp/tmpt7grx77f.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 0\n  }\n  if a == 1 || b == 1 {\n    return 1\n  }\n  if a == b {\n    return a\n  }\n  if a % b == 0 {\n    return b\n  }\n  return greatest_common_divisor(b, a % b)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n    if a == 0 {\n        return b\n    }\n    if b == 0 {\n        return a\n    }\n    if a < b {\n        a, b = b, a\n    }\n    while b % a != 0 {\n        b = b - b % a\n    }\n    return a\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error: expected `:`, found `=`\n  --> /tmp/tmp31g4oqsl.rs:14:14\n   |\n14 |         a, b = b, a\n   |             -^\n   |             |\n   |             help: replace equals symbol with a colon: `:`\n\nerror: struct literals are not allowed here\n  --> /tmp/tmp31g4oqsl.rs:13:12\n   |\n13 |       if a < b {\n   |  ____________^\n14 | |         a, b = b, a\n15 | |     }\n   | |_____^\n   |\nhelp: surround the struct literal with parentheses\n   |\n13 ~     if a < (b {\n14 |         a, b = b, a\n15 ~     })\n   |\n\nerror: expected `{`, found keyword `while`\n  --> /tmp/tmp31g4oqsl.rs:16:5\n   |\n13 |     if a < b {\n   |     -- this `if` expression has a condition, but no block\n...\n16 |     while b % a != 0 {\n   |     ^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n16 ~     { while b % a != 0 {\n17 |         b = b - b % a\n18 ~     } }\n   |\n\nerror: aborting due to 3 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n    if a == 0 || b == 0 {\n        return 0\n    }\n    if a == 1 || b == 1 {\n        return 1\n    }\n    if a == b {\n        return a\n    }\n    if a > b {\n        return greatest_common_divisor(b, a % b)\n    }\n    return greatest_common_divisor(a, b % a)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `0`,\n right: `5`', /tmp/tmprwi34_re.rs:25:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 0\n  }\n\n  let gcd = 1\n  let x = a\n  let y = b\n\n  while x != 0 {\n    let temp = x\n    x = y % x\n    y = temp\n  }\n\n  return y\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmpavx5b_tm.rs:11:14\n   |\n11 |   let gcd = 1\n   |              ^ help: add `;` here\n12 |   let x = a\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpavx5b_tm.rs:12:12\n   |\n12 |   let x = a\n   |            ^ help: add `;` here\n13 |   let y = b\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `while`\n  --> /tmp/tmpavx5b_tm.rs:13:12\n   |\n13 |   let y = b\n   |            ^ help: add `;` here\n14 | \n15 |   while x != 0 {\n   |   ----- unexpected token\n\nerror: expected `;`, found `x`\n  --> /tmp/tmpavx5b_tm.rs:16:17\n   |\n16 |     let temp = x\n   |                 ^ help: add `;` here\n17 |     x = y % x\n   |     - unexpected token\n\nerror: expected `;`, found `y`\n  --> /tmp/tmpavx5b_tm.rs:17:14\n   |\n17 |     x = y % x\n   |              ^ help: add `;` here\n18 |     y = temp\n   |     - unexpected token\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 1\n  }\n\n  if a == 1 || b == 1 {\n    return a\n  }\n\n  return greatest_common_divisor(b % a, a)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `5`', /tmp/tmpv5kqo5am.rs:21:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 1\n  }\n\n  let gcd = 1\n  while b != 0 {\n    let temp = a\n    a = b\n    b = temp % b\n    gcd = gcd * a\n  }\n\n  return gcd\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmpte_19f6l.rs:11:14\n   |\n11 |   let gcd = 1\n   |              ^ help: add `;` here\n12 |   while b != 0 {\n   |   ----- unexpected token\n\nerror: expected `;`, found `a`\n  --> /tmp/tmpte_19f6l.rs:13:17\n   |\n13 |     let temp = a\n   |                 ^ help: add `;` here\n14 |     a = b\n   |     - unexpected token\n\nerror: expected `;`, found `b`\n  --> /tmp/tmpte_19f6l.rs:14:10\n   |\n14 |     a = b\n   |          ^ help: add `;` here\n15 |     b = temp % b\n   |     - unexpected token\n\nerror: expected `;`, found `gcd`\n  --> /tmp/tmpte_19f6l.rs:15:17\n   |\n15 |     b = temp % b\n   |                 ^ help: add `;` here\n16 |     gcd = gcd * a\n   |     --- unexpected token\n\nerror: aborting due to 4 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n    if a == 0 || b == 0 {\n        return 0\n    }\n    if a == 1 || b == 1 {\n        return 1\n    }\n    if a == b {\n        return a\n    }\n    if a > b {\n        return greatest_common_divisor(b, a % b)\n    }\n    return greatest_common_divisor(a, b % a)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `0`,\n right: `5`', /tmp/tmprwi34_re.rs:25:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 0\n  }\n  if a == 1 || b == 1 {\n    return 1\n  }\n  if a == b {\n    return a\n  }\n  if a % b == 0 {\n    return b\n  }\n  return greatest_common_divisor(b, a % b)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 1\n  }\n  if a == 1 || b == 1 {\n    return a\n  }\n  if a == b {\n    return a\n  }\n  return greatest_common_divisor(b, a % b)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3`,\n right: `1`', /tmp/tmp8ivd6fno.rs:21:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 1\n  }\n  if a == 1 || b == 1 {\n    return a\n  }\n  if a == b {\n    return a\n  }\n  if a % b == 0 {\n    return b\n  }\n  return greatest_common_divisor(b, a % b)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3`,\n right: `1`', /tmp/tmpt7grx77f.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 0\n  }\n  if a == 1 || b == 1 {\n    return 1\n  }\n  if a == b {\n    return a\n  }\n  if a % b == 0 {\n    return b\n  }\n  return greatest_common_divisor(b, a % b)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 1\n  }\n  if a == 1 || b == 1 {\n    return a\n  }\n  if a == b {\n    return a\n  }\n  return greatest_common_divisor(b, a % b)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3`,\n right: `1`', /tmp/tmp8ivd6fno.rs:21:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 0\n  }\n\n  if a == 1 || b == 1 {\n    return 1\n  }\n\n  if a == b {\n    return a\n  }\n\n  return greatest_common_divisor(b, a % b)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `0`,\n right: `5`', /tmp/tmpfb9ql5xc.rs:25:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 1\n  }\n  if a == 1 || b == 1 {\n    return a\n  }\n  if a == b {\n    return a\n  }\n  if a % b == 0 {\n    return b\n  }\n  return greatest_common_divisor(b, a % b)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3`,\n right: `1`', /tmp/tmpt7grx77f.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 1\n  }\n  if a == 1 || b == 1 {\n    return a\n  }\n  if a == b {\n    return a\n  }\n  if a % b == 0 {\n    return b\n  }\n  return greatest_common_divisor(b, a % b)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3`,\n right: `1`', /tmp/tmpt7grx77f.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 1\n  }\n  if a == 1 || b == 1 {\n    return a\n  }\n  if a == b {\n    return a\n  }\n  if a % b == 0 {\n    return b\n  }\n  return greatest_common_divisor(b, a % b)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3`,\n right: `1`', /tmp/tmpt7grx77f.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 0\n  }\n  if a == 1 || b == 1 {\n    return 1\n  }\n  if a == b {\n    return a\n  }\n  return greatest_common_divisor(b, a % b)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `0`,\n right: `5`', /tmp/tmpzkes88lo.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 1\n  }\n  if a == 1 || b == 1 {\n    return a\n  }\n  if a == b {\n    return a\n  }\n  if a % b == 0 {\n    return b\n  }\n  return greatest_common_divisor(b, a % b)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3`,\n right: `1`', /tmp/tmpt7grx77f.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n    if a == 0 || b == 0 {\n        return 1\n    }\n    if a == 1 || b == 1 {\n        return a\n    }\n    if a == b {\n        return a\n    }\n    if a % b == 0 {\n        return b\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3`,\n right: `1`', /tmp/tmp951sq5ke.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 1\n  }\n\n  let gcd = 1\n  let a_mod_b = a % b\n\n  while a_mod_b != 0 {\n    a_mod_b = a % b\n    gcd = b\n    b = a\n    a = a_mod_b\n  }\n\n  return gcd\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp8f73h0ny.rs:11:14\n   |\n11 |   let gcd = 1\n   |              ^ help: add `;` here\n12 |   let a_mod_b = a % b\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `while`\n  --> /tmp/tmp8f73h0ny.rs:12:22\n   |\n12 |   let a_mod_b = a % b\n   |                      ^ help: add `;` here\n13 | \n14 |   while a_mod_b != 0 {\n   |   ----- unexpected token\n\nerror: expected `;`, found `gcd`\n  --> /tmp/tmp8f73h0ny.rs:15:20\n   |\n15 |     a_mod_b = a % b\n   |                    ^ help: add `;` here\n16 |     gcd = b\n   |     --- unexpected token\n\nerror: expected `;`, found `b`\n  --> /tmp/tmp8f73h0ny.rs:16:12\n   |\n16 |     gcd = b\n   |            ^ help: add `;` here\n17 |     b = a\n   |     - unexpected token\n\nerror: expected `;`, found `a`\n  --> /tmp/tmp8f73h0ny.rs:17:10\n   |\n17 |     b = a\n   |          ^ help: add `;` here\n18 |     a = a_mod_b\n   |     - unexpected token\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 1\n  }\n  if a < b {\n    a, b = b, a\n  }\n  return a % b\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error: expected `:`, found `=`\n  --> /tmp/tmp6ung695_.rs:11:10\n   |\n11 |     a, b = b, a\n   |         -^\n   |         |\n   |         help: replace equals symbol with a colon: `:`\n\nerror: struct literals are not allowed here\n  --> /tmp/tmp6ung695_.rs:10:10\n   |\n10 |     if a < b {\n   |  __________^\n11 | |     a, b = b, a\n12 | |   }\n   | |___^\n   |\nhelp: surround the struct literal with parentheses\n   |\n10 ~   if a < (b {\n11 |     a, b = b, a\n12 ~   })\n   |\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmp6ung695_.rs:13:3\n   |\n10 |   if a < b {\n   |   -- this `if` expression has a condition, but no block\n...\n13 |   return a % b\n   |   ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n13 |   { return a % b }\n   |   +              +\n\nerror: aborting due to 3 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 {\n    return b\n  }\n  if b == 0 {\n    return a\n  }\n  if a < b {\n    a, b = b, a\n  }\n  while b != 0 {\n    let r = a % b\n    a = b\n    b = r\n  }\n  return a\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error: expected `:`, found `=`\n  --> /tmp/tmp9x81qjtv.rs:14:10\n   |\n14 |     a, b = b, a\n   |         -^\n   |         |\n   |         help: replace equals symbol with a colon: `:`\n\nerror: struct literals are not allowed here\n  --> /tmp/tmp9x81qjtv.rs:13:10\n   |\n13 |     if a < b {\n   |  __________^\n14 | |     a, b = b, a\n15 | |   }\n   | |___^\n   |\nhelp: surround the struct literal with parentheses\n   |\n13 ~   if a < (b {\n14 |     a, b = b, a\n15 ~   })\n   |\n\nerror: expected `;`, found `a`\n  --> /tmp/tmp9x81qjtv.rs:17:18\n   |\n17 |     let r = a % b\n   |                  ^ help: add `;` here\n18 |     a = b\n   |     - unexpected token\n\nerror: expected `;`, found `b`\n  --> /tmp/tmp9x81qjtv.rs:18:10\n   |\n18 |     a = b\n   |          ^ help: add `;` here\n19 |     b = r\n   |     - unexpected token\n\nerror: expected `{`, found keyword `while`\n  --> /tmp/tmp9x81qjtv.rs:16:3\n   |\n13 |   if a < b {\n   |   -- this `if` expression has a condition, but no block\n...\n16 |   while b != 0 {\n   |   ^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n16 ~   { while b != 0 {\n17 |     let r = a % b\n18 |     a = b\n19 |     b = r\n20 ~   } }\n   |\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n    if a == 0 {\n        return b\n    }\n    if b == 0 {\n        return a\n    }\n    if a == b {\n        return a\n    }\n    if a < b {\n        a, b = b, a\n    }\n    while b != 0 {\n        a, b = b, a % b\n    }\n    return a\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error: expected `:`, found `=`\n  --> /tmp/tmp5bwwfq20.rs:17:14\n   |\n17 |         a, b = b, a\n   |             -^\n   |             |\n   |             help: replace equals symbol with a colon: `:`\n\nerror: struct literals are not allowed here\n  --> /tmp/tmp5bwwfq20.rs:16:12\n   |\n16 |       if a < b {\n   |  ____________^\n17 | |         a, b = b, a\n18 | |     }\n   | |_____^\n   |\nhelp: surround the struct literal with parentheses\n   |\n16 ~     if a < (b {\n17 |         a, b = b, a\n18 ~     })\n   |\n\nerror: expected one of `!`, `.`, `::`, `;`, `?`, `{`, `}`, or an operator, found `,`\n  --> /tmp/tmp5bwwfq20.rs:20:10\n   |\n20 |         a, b = b, a % b\n   |          ^ expected one of 8 possible tokens\n\nerror: expected `{`, found keyword `while`\n  --> /tmp/tmp5bwwfq20.rs:19:5\n   |\n16 |     if a < b {\n   |     -- this `if` expression has a condition, but no block\n...\n19 |     while b != 0 {\n   |     ^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n19 ~     { while b != 0 {\n20 |         a, b = b, a % b\n21 ~     } }\n   |\n\nerror: aborting due to 4 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 0\n  }\n  if a == 1 || b == 1 {\n    return 1\n  }\n  if a == b {\n    return a\n  }\n  if a % b == 0 {\n    return b\n  }\n  return greatest_common_divisor(b, a % b)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 1\n  }\n\n  let gcd = 0\n  let x = a\n  let y = b\n\n  while x != 0 {\n    gcd = y % x\n    y = x\n    x = gcd\n  }\n\n  return gcd\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp3jqmy1kp.rs:11:14\n   |\n11 |   let gcd = 0\n   |              ^ help: add `;` here\n12 |   let x = a\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp3jqmy1kp.rs:12:12\n   |\n12 |   let x = a\n   |            ^ help: add `;` here\n13 |   let y = b\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `while`\n  --> /tmp/tmp3jqmy1kp.rs:13:12\n   |\n13 |   let y = b\n   |            ^ help: add `;` here\n14 | \n15 |   while x != 0 {\n   |   ----- unexpected token\n\nerror: expected `;`, found `y`\n  --> /tmp/tmp3jqmy1kp.rs:16:16\n   |\n16 |     gcd = y % x\n   |                ^ help: add `;` here\n17 |     y = x\n   |     - unexpected token\n\nerror: expected `;`, found `x`\n  --> /tmp/tmp3jqmy1kp.rs:17:10\n   |\n17 |     y = x\n   |          ^ help: add `;` here\n18 |     x = gcd\n   |     - unexpected token\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n    if a == 0 || b == 0 {\n        return 0\n    }\n    if a == 1 || b == 1 {\n        return 1\n    }\n    if a == b {\n        return a\n    }\n    if a > b {\n        return greatest_common_divisor(b, a % b)\n    }\n    return greatest_common_divisor(a, b % a)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `0`,\n right: `5`', /tmp/tmprwi34_re.rs:25:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 1\n  }\n  if a == 1 || b == 1 {\n    return a\n  }\n  return greatest_common_divisor(b, a % b)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3`,\n right: `1`', /tmp/tmpnbjdafg3.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 0\n  }\n  if a == 1 || b == 1 {\n    return 1\n  }\n  if a == b {\n    return a\n  }\n  if a > b {\n    return greatest_common_divisor(b, a % b)\n  }\n  return greatest_common_divisor(a, b % a)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `0`,\n right: `5`', /tmp/tmp89677es5.rs:25:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 0\n  }\n  if a == 1 || b == 1 {\n    return 1\n  }\n  if a == b {\n    return a\n  }\n  if a % b == 0 {\n    return b\n  }\n  return greatest_common_divisor(b, a % b)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 1\n  }\n  if a == 1 || b == 1 {\n    return a\n  }\n  return greatest_common_divisor(b, a % b)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3`,\n right: `1`', /tmp/tmpnbjdafg3.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 1\n  }\n  if a == 1 || b == 1 {\n    return a\n  }\n  if a == b {\n    return a\n  }\n  if a % b == 0 {\n    return b\n  }\n  return greatest_common_divisor(b, a % b)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3`,\n right: `1`', /tmp/tmpt7grx77f.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n    if a == 0 || b == 0 {\n        return 0\n    }\n    if a == 1 || b == 1 {\n        return 1\n    }\n    if a == b {\n        return a\n    }\n    if a % b == 0 {\n        return b\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 0\n  }\n  if a == 1 || b == 1 {\n    return 1\n  }\n  if a == b {\n    return a\n  }\n  if a % b == 0 {\n    return b\n  }\n  return greatest_common_divisor(b, a % b)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 0\n  }\n  if a == 1 || b == 1 {\n    return 1\n  }\n  if a == b {\n    return a\n  }\n  if a % b == 0 {\n    return b\n  }\n  return greatest_common_divisor(b, a % b)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 1\n  }\n  if a == 1 || b == 1 {\n    return a\n  }\n  if a == b {\n    return a\n  }\n  return greatest_common_divisor(b, a % b)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3`,\n right: `1`', /tmp/tmp8ivd6fno.rs:21:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 1\n  }\n  if a == 1 || b == 1 {\n    return a\n  }\n  if a == b {\n    return a\n  }\n  if a % b == 0 {\n    return b\n  }\n  return greatest_common_divisor(b, a % b)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3`,\n right: `1`', /tmp/tmpt7grx77f.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 1\n  }\n  if a < b {\n    a, b = b, a\n  }\n  while b != 0 {\n    let r = a % b\n    a = b\n    b = r\n  }\n  return a\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error: expected `:`, found `=`\n  --> /tmp/tmpdzjgwdzu.rs:11:10\n   |\n11 |     a, b = b, a\n   |         -^\n   |         |\n   |         help: replace equals symbol with a colon: `:`\n\nerror: struct literals are not allowed here\n  --> /tmp/tmpdzjgwdzu.rs:10:10\n   |\n10 |     if a < b {\n   |  __________^\n11 | |     a, b = b, a\n12 | |   }\n   | |___^\n   |\nhelp: surround the struct literal with parentheses\n   |\n10 ~   if a < (b {\n11 |     a, b = b, a\n12 ~   })\n   |\n\nerror: expected `;`, found `a`\n  --> /tmp/tmpdzjgwdzu.rs:14:18\n   |\n14 |     let r = a % b\n   |                  ^ help: add `;` here\n15 |     a = b\n   |     - unexpected token\n\nerror: expected `;`, found `b`\n  --> /tmp/tmpdzjgwdzu.rs:15:10\n   |\n15 |     a = b\n   |          ^ help: add `;` here\n16 |     b = r\n   |     - unexpected token\n\nerror: expected `{`, found keyword `while`\n  --> /tmp/tmpdzjgwdzu.rs:13:3\n   |\n10 |   if a < b {\n   |   -- this `if` expression has a condition, but no block\n...\n13 |   while b != 0 {\n   |   ^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n13 ~   { while b != 0 {\n14 |     let r = a % b\n15 |     a = b\n16 |     b = r\n17 ~   } }\n   |\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n    if a == 0 {\n        return b\n    }\n    if b == 0 {\n        return a\n    }\n    if a < b {\n        a, b = b, a\n    }\n    while b != 0 {\n        let r = a % b\n        a = b\n        b = r\n    }\n    return a\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error: expected `:`, found `=`\n  --> /tmp/tmptb94evf5.rs:14:14\n   |\n14 |         a, b = b, a\n   |             -^\n   |             |\n   |             help: replace equals symbol with a colon: `:`\n\nerror: struct literals are not allowed here\n  --> /tmp/tmptb94evf5.rs:13:12\n   |\n13 |       if a < b {\n   |  ____________^\n14 | |         a, b = b, a\n15 | |     }\n   | |_____^\n   |\nhelp: surround the struct literal with parentheses\n   |\n13 ~     if a < (b {\n14 |         a, b = b, a\n15 ~     })\n   |\n\nerror: expected `;`, found `a`\n  --> /tmp/tmptb94evf5.rs:17:22\n   |\n17 |         let r = a % b\n   |                      ^ help: add `;` here\n18 |         a = b\n   |         - unexpected token\n\nerror: expected `;`, found `b`\n  --> /tmp/tmptb94evf5.rs:18:14\n   |\n18 |         a = b\n   |              ^ help: add `;` here\n19 |         b = r\n   |         - unexpected token\n\nerror: expected `{`, found keyword `while`\n  --> /tmp/tmptb94evf5.rs:16:5\n   |\n13 |     if a < b {\n   |     -- this `if` expression has a condition, but no block\n...\n16 |     while b != 0 {\n   |     ^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n16 ~     { while b != 0 {\n17 |         let r = a % b\n18 |         a = b\n19 |         b = r\n20 ~     } }\n   |\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 0\n  }\n  if a == 1 || b == 1 {\n    return 1\n  }\n  if a == b {\n    return a\n  }\n  if a % b == 0 {\n    return b\n  }\n  return greatest_common_divisor(b, a % b)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 1\n  }\n  if a == 1 || b == 1 {\n    return a\n  }\n  return greatest_common_divisor(b, a % b)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3`,\n right: `1`', /tmp/tmpnbjdafg3.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 0\n  }\n  if a == 1 || b == 1 {\n    return 1\n  }\n  if a == b {\n    return a\n  }\n  return greatest_common_divisor(b, a % b)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `0`,\n right: `5`', /tmp/tmpzkes88lo.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 1\n  }\n  if a == 1 || b == 1 {\n    return a\n  }\n  if a == b {\n    return a\n  }\n  if a % b == 0 {\n    return b\n  }\n  return greatest_common_divisor(b, a % b)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3`,\n right: `1`', /tmp/tmpt7grx77f.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 1\n  }\n  if a == 1 || b == 1 {\n    return a\n  }\n  if a == b {\n    return a\n  }\n  if a % b == 0 {\n    return b\n  }\n  return greatest_common_divisor(b, a % b)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3`,\n right: `1`', /tmp/tmpt7grx77f.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 1\n  }\n\n  let gcd = 1\n  let x = a\n  let y = b\n  while x != 0 {\n    let temp = x\n    x = y % x\n    y = temp\n  }\n\n  gcd = y\n  return gcd\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmps9buvlse.rs:11:14\n   |\n11 |   let gcd = 1\n   |              ^ help: add `;` here\n12 |   let x = a\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmps9buvlse.rs:12:12\n   |\n12 |   let x = a\n   |            ^ help: add `;` here\n13 |   let y = b\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `while`\n  --> /tmp/tmps9buvlse.rs:13:12\n   |\n13 |   let y = b\n   |            ^ help: add `;` here\n14 |   while x != 0 {\n   |   ----- unexpected token\n\nerror: expected `;`, found `x`\n  --> /tmp/tmps9buvlse.rs:15:17\n   |\n15 |     let temp = x\n   |                 ^ help: add `;` here\n16 |     x = y % x\n   |     - unexpected token\n\nerror: expected `;`, found `y`\n  --> /tmp/tmps9buvlse.rs:16:14\n   |\n16 |     x = y % x\n   |              ^ help: add `;` here\n17 |     y = temp\n   |     - unexpected token\n\nerror: expected `;`, found keyword `return`\n  --> /tmp/tmps9buvlse.rs:20:10\n   |\n20 |   gcd = y\n   |          ^ help: add `;` here\n21 |   return gcd\n   |   ------ unexpected token\n\nerror: aborting due to 6 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n    if a == 0 || b == 0 {\n        return 0\n    }\n    if a == 1 || b == 1 {\n        return 1\n    }\n    if a == b {\n        return a\n    }\n    if a % b == 0 {\n        return b\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 1\n  }\n  if a == 1 || b == 1 {\n    return a\n  }\n  if a == b {\n    return a\n  }\n  if a % b == 0 {\n    return b\n  }\n  return greatest_common_divisor(b, a % b)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3`,\n right: `1`', /tmp/tmpt7grx77f.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 1\n  }\n  if a == 1 || b == 1 {\n    return a\n  }\n  if a == b {\n    return a\n  }\n  if a < b {\n    return greatest_common_divisor(b, a)\n  }\n  return greatest_common_divisor(a, b)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293352,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 1\n  }\n  if a == 1 || b == 1 {\n    return a\n  }\n  if a == b {\n    return a\n  }\n  if a < b {\n    return greatest_common_divisor(b, a)\n  }\n  return greatest_common_divisor(a, b)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293352,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 1\n  }\n  if a == 1 || b == 1 {\n    return a\n  }\n  if a == b {\n    return a\n  }\n  if a % b == 0 {\n    return b\n  }\n  return greatest_common_divisor(b, a % b)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3`,\n right: `1`', /tmp/tmpt7grx77f.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 1\n  }\n  if a == 1 || b == 1 {\n    return a\n  }\n  if a == b {\n    return a\n  }\n  if a % b == 0 {\n    return b\n  }\n  return greatest_common_divisor(b, a % b)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3`,\n right: `1`', /tmp/tmpt7grx77f.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 1\n  }\n  if a == 1 || b == 1 {\n    return a\n  }\n  return greatest_common_divisor(b, a % b)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3`,\n right: `1`', /tmp/tmpnbjdafg3.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 1\n  }\n  if a == 1 || b == 1 {\n    return a\n  }\n  return greatest_common_divisor(b, a % b)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3`,\n right: `1`', /tmp/tmpnbjdafg3.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 1\n  }\n  if a == 1 || b == 1 {\n    return a\n  }\n  if a == b {\n    return a\n  }\n  if a % b == 0 {\n    return b\n  }\n  return greatest_common_divisor(b, a % b)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3`,\n right: `1`', /tmp/tmpt7grx77f.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 1\n  }\n  if a == 1 || b == 1 {\n    return a\n  }\n  if a == b {\n    return a\n  }\n  if a % b == 0 {\n    return b\n  }\n  return greatest_common_divisor(b, a % b)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3`,\n right: `1`', /tmp/tmpt7grx77f.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 1\n  }\n  if a == 1 || b == 1 {\n    return a\n  }\n  return greatest_common_divisor(b % a, a)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `5`', /tmp/tmpi9kkifz4.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 0\n  } else if a == 1 || b == 1 {\n    return 1\n  } else if a == b {\n    return a\n  } else {\n    return greatest_common_divisor(b, a % b)\n  }\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `0`,\n right: `5`', /tmp/tmpo9uoimjn.rs:21:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 1\n  }\n  if a == 1 || b == 1 {\n    return a\n  }\n  return greatest_common_divisor(b, a % b)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3`,\n right: `1`', /tmp/tmpnbjdafg3.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n    if a == 0 || b == 0 {\n        return 0\n    } else if a == 1 || b == 1 {\n        return 1\n    } else if a == b {\n        return a\n    } else {\n        return greatest_common_divisor(b, a % b)\n    }\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `0`,\n right: `5`', /tmp/tmpozo01_fm.rs:21:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 1\n  }\n  if a == 1 || b == 1 {\n    return a\n  }\n  return greatest_common_divisor(b, a % b)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3`,\n right: `1`', /tmp/tmpnbjdafg3.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 1\n  }\n  if a == 1 || b == 1 {\n    return a\n  }\n  if a == b {\n    return a\n  }\n  if a % b == 0 {\n    return b\n  }\n  return greatest_common_divisor(b, a % b)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3`,\n right: `1`', /tmp/tmpt7grx77f.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 0\n  }\n  if a == 1 || b == 1 {\n    return 1\n  }\n  if a == b {\n    return a\n  }\n  if a % b == 0 {\n    return b\n  }\n  return greatest_common_divisor(b, a % b)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 1\n  }\n  if a == 1 || b == 1 {\n    return a\n  }\n  if a == b {\n    return a\n  }\n  if a % b == 0 {\n    return b\n  }\n  return greatest_common_divisor(b, a % b)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3`,\n right: `1`', /tmp/tmpt7grx77f.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 1\n  }\n  if a == 1 || b == 1 {\n    return a\n  }\n  if a == b {\n    return a\n  }\n  if a % b == 0 {\n    return b\n  }\n  return greatest_common_divisor(b, a % b)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3`,\n right: `1`', /tmp/tmpt7grx77f.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 1\n  }\n  if a == 1 || b == 1 {\n    return a\n  }\n  if a == b {\n    return a\n  }\n  if a < b {\n    return greatest_common_divisor(b, a)\n  }\n  return greatest_common_divisor(a, b)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293352,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 1\n  }\n  if a == 1 || b == 1 {\n    return a\n  }\n  if a == b {\n    return a\n  }\n  if a % b == 0 {\n    return b\n  }\n  return greatest_common_divisor(b, a % b)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3`,\n right: `1`', /tmp/tmpt7grx77f.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 1\n  }\n  if a == 1 || b == 1 {\n    return a\n  }\n  if a == b {\n    return a\n  }\n  if a % b == 0 {\n    return b\n  }\n  return greatest_common_divisor(b, a % b)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3`,\n right: `1`', /tmp/tmpt7grx77f.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n    if a == 0 || b == 0 {\n        return 0\n    }\n    if a == 1 || b == 1 {\n        return 1\n    }\n    if a == b {\n        return a\n    }\n    if a > b {\n        return greatest_common_divisor(b, a % b)\n    }\n    return greatest_common_divisor(a, b % a)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `0`,\n right: `5`', /tmp/tmprwi34_re.rs:25:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n    if a == 0 || b == 0 {\n        return 1\n    }\n    if a == 1 || b == 1 {\n        return a\n    }\n    if a == b {\n        return a\n    }\n    if a % b == 0 {\n        return b\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3`,\n right: `1`', /tmp/tmp951sq5ke.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 0\n  }\n\n  let gcd = 1\n  while a != 0 {\n    let temp = a\n    a = b % a\n    b = temp\n  }\n\n  return b\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmpqa2g5e9f.rs:11:14\n   |\n11 |   let gcd = 1\n   |              ^ help: add `;` here\n12 |   while a != 0 {\n   |   ----- unexpected token\n\nerror: expected `;`, found `a`\n  --> /tmp/tmpqa2g5e9f.rs:13:17\n   |\n13 |     let temp = a\n   |                 ^ help: add `;` here\n14 |     a = b % a\n   |     - unexpected token\n\nerror: expected `;`, found `b`\n  --> /tmp/tmpqa2g5e9f.rs:14:14\n   |\n14 |     a = b % a\n   |              ^ help: add `;` here\n15 |     b = temp\n   |     - unexpected token\n\nerror: aborting due to 3 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 1\n  }\n  if a == 1 || b == 1 {\n    return a\n  }\n  if a == b {\n    return a\n  }\n  return greatest_common_divisor(b, a % b)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3`,\n right: `1`', /tmp/tmp8ivd6fno.rs:21:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 1\n  }\n  if a == 1 || b == 1 {\n    return a\n  }\n  if a == b {\n    return a\n  }\n  if a % b == 0 {\n    return b\n  }\n  return greatest_common_divisor(b, a % b)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3`,\n right: `1`', /tmp/tmpt7grx77f.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 1\n  }\n  if a == 1 || b == 1 {\n    return a\n  }\n  if a == b {\n    return a\n  }\n  if a % b == 0 {\n    return b\n  }\n  return greatest_common_divisor(b, a % b)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3`,\n right: `1`', /tmp/tmpt7grx77f.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 1\n  }\n  if a == 1 || b == 1 {\n    return a\n  }\n  return greatest_common_divisor(b, a % b)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3`,\n right: `1`', /tmp/tmpnbjdafg3.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 1\n  }\n  if a == 1 || b == 1 {\n    return a\n  }\n  if a == b {\n    return a\n  }\n  return greatest_common_divisor(b, a % b)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3`,\n right: `1`', /tmp/tmp8ivd6fno.rs:21:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n    if a == 0 || b == 0 {\n        return 1\n    }\n    if a == 1 || b == 1 {\n        return a\n    }\n    if a == b {\n        return a\n    }\n    if a % b == 0 {\n        return b\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3`,\n right: `1`', /tmp/tmp951sq5ke.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 1\n  }\n  if a == 1 || b == 1 {\n    return a\n  }\n  if a == b {\n    return a\n  }\n  if a % b == 0 {\n    return b\n  }\n  return greatest_common_divisor(b, a % b)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3`,\n right: `1`', /tmp/tmpt7grx77f.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 1\n  }\n  if a == 1 || b == 1 {\n    return a\n  }\n  if a == b {\n    return a\n  }\n  if a % b == 0 {\n    return b\n  }\n  return greatest_common_divisor(b, a % b)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3`,\n right: `1`', /tmp/tmpt7grx77f.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n    if a == 0 || b == 0 {\n        return 0\n    }\n    if a == 1 || b == 1 {\n        return 1\n    }\n    if a == b {\n        return a\n    }\n    if a > b {\n        return greatest_common_divisor(b, a % b)\n    }\n    return greatest_common_divisor(a, b % a)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `0`,\n right: `5`', /tmp/tmprwi34_re.rs:25:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n    if a == 0 || b == 0 {\n        return 0\n    }\n    if a == 1 || b == 1 {\n        return 1\n    }\n    if a == b {\n        return a\n    }\n    if a < b {\n        a, b = b, a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error: expected `:`, found `=`\n  --> /tmp/tmpul5afv2c.rs:17:14\n   |\n17 |         a, b = b, a\n   |             -^\n   |             |\n   |             help: replace equals symbol with a colon: `:`\n\nerror: struct literals are not allowed here\n  --> /tmp/tmpul5afv2c.rs:16:12\n   |\n16 |       if a < b {\n   |  ____________^\n17 | |         a, b = b, a\n18 | |     }\n   | |_____^\n   |\nhelp: surround the struct literal with parentheses\n   |\n16 ~     if a < (b {\n17 |         a, b = b, a\n18 ~     })\n   |\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmpul5afv2c.rs:19:5\n   |\n16 |     if a < b {\n   |     -- this `if` expression has a condition, but no block\n...\n19 |     return greatest_common_divisor(b, a % b)\n   |     ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n19 |     { return greatest_common_divisor(b, a % b) }\n   |     +                                          +\n\nerror: aborting due to 3 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 1\n  }\n  if a == 1 || b == 1 {\n    return a\n  }\n  if a == b {\n    return a\n  }\n  if a % b == 0 {\n    return b\n  }\n  return greatest_common_divisor(b, a % b)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3`,\n right: `1`', /tmp/tmpt7grx77f.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 0\n  }\n  if a == 1 || b == 1 {\n    return 1\n  }\n  if a == b {\n    return a\n  }\n  if a % b == 0 {\n    return b\n  }\n  return greatest_common_divisor(b, a % b)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n    if a == 0 || b == 0 {\n        return 1\n    }\n    if a == 1 || b == 1 {\n        return a\n    }\n    if a == b {\n        return a\n    }\n    if a < b {\n        return greatest_common_divisor(b, a)\n    }\n    return greatest_common_divisor(a, b)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293352,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 0\n  }\n  if a == 1 || b == 1 {\n    return 1\n  }\n  if a == b {\n    return a\n  }\n  if a % b == 0 {\n    return b\n  }\n  return greatest_common_divisor(b, a % b)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 0\n  } else if a == 1 || b == 1 {\n    return 1\n  } else if a == b {\n    return a\n  } else {\n    return greatest_common_divisor(b, a % b)\n  }\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `0`,\n right: `5`', /tmp/tmpo9uoimjn.rs:21:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 0\n  }\n  if a == 1 || b == 1 {\n    return 1\n  }\n  if a == b {\n    return a\n  }\n  if a % b == 0 {\n    return b\n  }\n  return greatest_common_divisor(b, a % b)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 0\n  }\n  if a == 1 || b == 1 {\n    return 1\n  }\n  if a == b {\n    return a\n  }\n  return greatest_common_divisor(b, a % b)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `0`,\n right: `5`', /tmp/tmpzkes88lo.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n    if a == 0 {\n        return b\n    } else if b == 0 {\n        return a\n    } else {\n        return greatest_common_divisor(b, a % b)\n    }\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 1\n  }\n  if a == 1 || b == 1 {\n    return a\n  }\n  if a == b {\n    return a\n  }\n  return greatest_common_divisor(b, a % b)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3`,\n right: `1`', /tmp/tmp8ivd6fno.rs:21:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 0\n  }\n\n  if a == 1 || b == 1 {\n    return 1\n  }\n\n  if a == b {\n    return a\n  }\n\n  if a < b {\n    a, b = b, a\n  }\n\n  let r = 0\n  while b != 0 {\n    r = a % b\n    a = b\n    b = r\n  }\n\n  return a\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error: expected `:`, found `=`\n  --> /tmp/tmp2tg20ndm.rs:20:10\n   |\n20 |     a, b = b, a\n   |         -^\n   |         |\n   |         help: replace equals symbol with a colon: `:`\n\nerror: struct literals are not allowed here\n  --> /tmp/tmp2tg20ndm.rs:19:10\n   |\n19 |     if a < b {\n   |  __________^\n20 | |     a, b = b, a\n21 | |   }\n   | |___^\n   |\nhelp: surround the struct literal with parentheses\n   |\n19 ~   if a < (b {\n20 |     a, b = b, a\n21 ~   })\n   |\n\nerror: expected `{`, found keyword `let`\n  --> /tmp/tmp2tg20ndm.rs:23:3\n   |\n19 |   if a < b {\n   |   -- this `if` expression has a condition, but no block\n...\n23 |   let r = 0\n   |   ^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n23 |   { let r = 0 }\n   |   +           +\n\nerror: aborting due to 3 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n    if a == 0 || b == 0 {\n        return 0\n    }\n    if a == 1 || b == 1 {\n        return 1\n    }\n    if a == b {\n        return a\n    }\n    if a > b {\n        return greatest_common_divisor(b, a % b)\n    }\n    return greatest_common_divisor(a, b % a)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `0`,\n right: `5`', /tmp/tmprwi34_re.rs:25:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 1\n  }\n  if a == 1 || b == 1 {\n    return a\n  }\n  if a == b {\n    return a\n  }\n  if a % b == 0 {\n    return b\n  }\n  return greatest_common_divisor(b, a % b)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3`,\n right: `1`', /tmp/tmpt7grx77f.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 1\n  }\n  if a == 1 || b == 1 {\n    return a\n  }\n  if a == b {\n    return a\n  }\n  if a % b == 0 {\n    return b\n  }\n  return greatest_common_divisor(b, a % b)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3`,\n right: `1`', /tmp/tmpt7grx77f.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 1\n  }\n  if a == 1 || b == 1 {\n    return a\n  }\n  if a == b {\n    return a\n  }\n  if a % b == 0 {\n    return b\n  }\n  return greatest_common_divisor(b, a % b)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3`,\n right: `1`', /tmp/tmpt7grx77f.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 0\n  }\n  if a == 1 || b == 1 {\n    return 1\n  }\n  if a == b {\n    return a\n  }\n  if a < b {\n    a, b = b, a\n  }\n  return greatest_common_divisor(b, a % b)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error: expected `:`, found `=`\n  --> /tmp/tmp0zp4vn2o.rs:17:10\n   |\n17 |     a, b = b, a\n   |         -^\n   |         |\n   |         help: replace equals symbol with a colon: `:`\n\nerror: struct literals are not allowed here\n  --> /tmp/tmp0zp4vn2o.rs:16:10\n   |\n16 |     if a < b {\n   |  __________^\n17 | |     a, b = b, a\n18 | |   }\n   | |___^\n   |\nhelp: surround the struct literal with parentheses\n   |\n16 ~   if a < (b {\n17 |     a, b = b, a\n18 ~   })\n   |\n\nerror: expected `{`, found keyword `return`\n  --> /tmp/tmp0zp4vn2o.rs:19:3\n   |\n16 |   if a < b {\n   |   -- this `if` expression has a condition, but no block\n...\n19 |   return greatest_common_divisor(b, a % b)\n   |   ^^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n19 |   { return greatest_common_divisor(b, a % b) }\n   |   +                                          +\n\nerror: aborting due to 3 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 1\n  }\n\n  let gcd = 1\n  while a != 0 {\n    let temp = a\n    a = b % a\n    b = temp\n  }\n\n  return b\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmpkibihdea.rs:11:14\n   |\n11 |   let gcd = 1\n   |              ^ help: add `;` here\n12 |   while a != 0 {\n   |   ----- unexpected token\n\nerror: expected `;`, found `a`\n  --> /tmp/tmpkibihdea.rs:13:17\n   |\n13 |     let temp = a\n   |                 ^ help: add `;` here\n14 |     a = b % a\n   |     - unexpected token\n\nerror: expected `;`, found `b`\n  --> /tmp/tmpkibihdea.rs:14:14\n   |\n14 |     a = b % a\n   |              ^ help: add `;` here\n15 |     b = temp\n   |     - unexpected token\n\nerror: aborting due to 3 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 1\n  }\n\n  let gcd = 1\n  let x = a\n  let y = b\n\n  while x != 0 {\n    let temp = x\n    x = y % x\n    y = temp\n  }\n\n  return y\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `let`\n  --> /tmp/tmp7y7xozb8.rs:11:14\n   |\n11 |   let gcd = 1\n   |              ^ help: add `;` here\n12 |   let x = a\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp7y7xozb8.rs:12:12\n   |\n12 |   let x = a\n   |            ^ help: add `;` here\n13 |   let y = b\n   |   --- unexpected token\n\nerror: expected `;`, found keyword `while`\n  --> /tmp/tmp7y7xozb8.rs:13:12\n   |\n13 |   let y = b\n   |            ^ help: add `;` here\n14 | \n15 |   while x != 0 {\n   |   ----- unexpected token\n\nerror: expected `;`, found `x`\n  --> /tmp/tmp7y7xozb8.rs:16:17\n   |\n16 |     let temp = x\n   |                 ^ help: add `;` here\n17 |     x = y % x\n   |     - unexpected token\n\nerror: expected `;`, found `y`\n  --> /tmp/tmp7y7xozb8.rs:17:14\n   |\n17 |     x = y % x\n   |              ^ help: add `;` here\n18 |     y = temp\n   |     - unexpected token\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 1\n  }\n\n  if a == 1 || b == 1 {\n    return a\n  }\n\n  if a == b {\n    return a\n  }\n\n  if a < b {\n    a, b = b, a\n  }\n\n  let gcd = 1\n  while b != 0 {\n    gcd = gcd * b\n    b = a % b\n    a = b\n  }\n\n  return gcd\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error: expected `:`, found `=`\n  --> /tmp/tmpvyx_oxmq.rs:20:10\n   |\n20 |     a, b = b, a\n   |         -^\n   |         |\n   |         help: replace equals symbol with a colon: `:`\n\nerror: struct literals are not allowed here\n  --> /tmp/tmpvyx_oxmq.rs:19:10\n   |\n19 |     if a < b {\n   |  __________^\n20 | |     a, b = b, a\n21 | |   }\n   | |___^\n   |\nhelp: surround the struct literal with parentheses\n   |\n19 ~   if a < (b {\n20 |     a, b = b, a\n21 ~   })\n   |\n\nerror: expected `{`, found keyword `let`\n  --> /tmp/tmpvyx_oxmq.rs:23:3\n   |\n19 |   if a < b {\n   |   -- this `if` expression has a condition, but no block\n...\n23 |   let gcd = 1\n   |   ^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n23 |   { let gcd = 1 }\n   |   +             +\n\nerror: aborting due to 3 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 1\n  }\n  if a == 1 || b == 1 {\n    return a\n  }\n  return greatest_common_divisor(b, a % b)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3`,\n right: `1`', /tmp/tmpnbjdafg3.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 0\n  }\n  if a == 1 || b == 1 {\n    return 1\n  }\n  if a == b {\n    return a\n  }\n  if a % b == 0 {\n    return b\n  }\n  return greatest_common_divisor(b, a % b)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 0\n  }\n  if a == 1 || b == 1 {\n    return 1\n  }\n  if a == b {\n    return a\n  }\n  if a % b == 0 {\n    return b\n  }\n  return greatest_common_divisor(b, a % b)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n    if a == 0 || b == 0 {\n        return 0\n    } else if a == 1 || b == 1 {\n        return 1\n    } else if a == b {\n        return a\n    } else {\n        return greatest_common_divisor(b, a % b)\n    }\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `0`,\n right: `5`', /tmp/tmpozo01_fm.rs:21:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 1\n  }\n\n  let gcd = 1\n  while b != 0 {\n    let temp = a\n    a = b\n    b = temp % b\n    gcd = gcd * b\n  }\n\n  return gcd\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmpqeaf63dz.rs:11:14\n   |\n11 |   let gcd = 1\n   |              ^ help: add `;` here\n12 |   while b != 0 {\n   |   ----- unexpected token\n\nerror: expected `;`, found `a`\n  --> /tmp/tmpqeaf63dz.rs:13:17\n   |\n13 |     let temp = a\n   |                 ^ help: add `;` here\n14 |     a = b\n   |     - unexpected token\n\nerror: expected `;`, found `b`\n  --> /tmp/tmpqeaf63dz.rs:14:10\n   |\n14 |     a = b\n   |          ^ help: add `;` here\n15 |     b = temp % b\n   |     - unexpected token\n\nerror: expected `;`, found `gcd`\n  --> /tmp/tmpqeaf63dz.rs:15:17\n   |\n15 |     b = temp % b\n   |                 ^ help: add `;` here\n16 |     gcd = gcd * b\n   |     --- unexpected token\n\nerror: aborting due to 4 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 1\n  }\n  if a == 1 || b == 1 {\n    return a\n  }\n  if a == b {\n    return a\n  }\n  if a % b == 0 {\n    return b\n  }\n  return greatest_common_divisor(b, a % b)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3`,\n right: `1`', /tmp/tmpt7grx77f.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 0\n  } else if a == 1 || b == 1 {\n    return 1\n  } else if a == b {\n    return a\n  } else {\n    return greatest_common_divisor(b, a % b)\n  }\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `0`,\n right: `5`', /tmp/tmpo9uoimjn.rs:21:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 0\n  }\n  if a == 1 || b == 1 {\n    return 1\n  }\n  if a == b {\n    return a\n  }\n  if a % b == 0 {\n    return b\n  }\n  return greatest_common_divisor(b, a % b)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n    if a == 0 || b == 0 {\n        return 0\n    }\n    if a == 1 || b == 1 {\n        return 1\n    }\n    if a == b {\n        return a\n    }\n    if a % b == 0 {\n        return b\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 1\n  }\n  if a < b {\n    a, b = b, a\n  }\n  while b != 0 {\n    let r = a % b\n    a = b\n    b = r\n  }\n  return a\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error: expected `:`, found `=`\n  --> /tmp/tmpdzjgwdzu.rs:11:10\n   |\n11 |     a, b = b, a\n   |         -^\n   |         |\n   |         help: replace equals symbol with a colon: `:`\n\nerror: struct literals are not allowed here\n  --> /tmp/tmpdzjgwdzu.rs:10:10\n   |\n10 |     if a < b {\n   |  __________^\n11 | |     a, b = b, a\n12 | |   }\n   | |___^\n   |\nhelp: surround the struct literal with parentheses\n   |\n10 ~   if a < (b {\n11 |     a, b = b, a\n12 ~   })\n   |\n\nerror: expected `;`, found `a`\n  --> /tmp/tmpdzjgwdzu.rs:14:18\n   |\n14 |     let r = a % b\n   |                  ^ help: add `;` here\n15 |     a = b\n   |     - unexpected token\n\nerror: expected `;`, found `b`\n  --> /tmp/tmpdzjgwdzu.rs:15:10\n   |\n15 |     a = b\n   |          ^ help: add `;` here\n16 |     b = r\n   |     - unexpected token\n\nerror: expected `{`, found keyword `while`\n  --> /tmp/tmpdzjgwdzu.rs:13:3\n   |\n10 |   if a < b {\n   |   -- this `if` expression has a condition, but no block\n...\n13 |   while b != 0 {\n   |   ^^^^^ expected `{`\n   |\nhelp: try placing this code inside a block\n   |\n13 ~   { while b != 0 {\n14 |     let r = a % b\n15 |     a = b\n16 |     b = r\n17 ~   } }\n   |\n\nerror: aborting due to 5 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 1\n  }\n  if a == 1 || b == 1 {\n    return a\n  }\n  if a == b {\n    return a\n  }\n  return greatest_common_divisor(b, a % b)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3`,\n right: `1`', /tmp/tmp8ivd6fno.rs:21:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 0\n  }\n  if a == 1 || b == 1 {\n    return 1\n  }\n  if a == b {\n    return a\n  }\n  return greatest_common_divisor(b, a % b)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `0`,\n right: `5`', /tmp/tmpzkes88lo.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 0\n  }\n  if a == 1 || b == 1 {\n    return 1\n  }\n  if a == b {\n    return a\n  }\n  return greatest_common_divisor(b, a % b)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `0`,\n right: `5`', /tmp/tmpzkes88lo.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 0\n  }\n  if a == 1 || b == 1 {\n    return 1\n  }\n  if a == b {\n    return a\n  }\n  return greatest_common_divisor(b, a % b)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `0`,\n right: `5`', /tmp/tmpzkes88lo.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 0\n  }\n  if a == 1 || b == 1 {\n    return 1\n  }\n  if a == b {\n    return a\n  }\n  if a % b == 0 {\n    return b\n  }\n  return greatest_common_divisor(b, a % b)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 0\n  }\n  if a == 1 || b == 1 {\n    return 1\n  }\n  if a == b {\n    return a\n  }\n  return greatest_common_divisor(b, a % b)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `0`,\n right: `5`', /tmp/tmpzkes88lo.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 1\n  }\n  if a == 1 || b == 1 {\n    return a\n  }\n  return greatest_common_divisor(b, a % b)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3`,\n right: `1`', /tmp/tmpnbjdafg3.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 1\n  }\n  if a == 1 || b == 1 {\n    return a\n  }\n  if a == b {\n    return a\n  }\n  return greatest_common_divisor(b, a % b)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3`,\n right: `1`', /tmp/tmp8ivd6fno.rs:21:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 1\n  }\n  if a == 1 || b == 1 {\n    return a\n  }\n  if a == b {\n    return a\n  }\n  if a % b == 0 {\n    return b\n  }\n  return greatest_common_divisor(b, a % b)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3`,\n right: `1`', /tmp/tmpt7grx77f.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 1\n  }\n  if a == 1 || b == 1 {\n    return a\n  }\n  return greatest_common_divisor(b, a % b)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3`,\n right: `1`', /tmp/tmpnbjdafg3.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 1\n  }\n  if a == 1 || b == 1 {\n    return a\n  }\n  return greatest_common_divisor(b % a, a)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `5`', /tmp/tmpi9kkifz4.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n    if a == 0 || b == 0 {\n        return 1\n    }\n    if a == 1 || b == 1 {\n        return a\n    }\n    if a == b {\n        return a\n    }\n    if a % b == 0 {\n        return b\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3`,\n right: `1`', /tmp/tmp951sq5ke.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 1\n  }\n\n  if a == 1 || b == 1 {\n    return a\n  }\n\n  return greatest_common_divisor(b, a % b)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3`,\n right: `1`', /tmp/tmp9sfe6b_x.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 1\n  } else if a == 1 || b == 1 {\n    return a\n  } else {\n    return greatest_common_divisor(b, a % b)\n  }\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3`,\n right: `1`', /tmp/tmp57uz7hx2.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 1\n  }\n  if a == 1 || b == 1 {\n    return a\n  }\n  if a == b {\n    return a\n  }\n  if a % b == 0 {\n    return b\n  }\n  return greatest_common_divisor(b, a % b)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3`,\n right: `1`', /tmp/tmpt7grx77f.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 0\n  }\n  if a == 1 || b == 1 {\n    return 1\n  }\n  if a == b {\n    return a\n  }\n  if a % b == 0 {\n    return b\n  }\n  return greatest_common_divisor(b, a % b)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 0\n  }\n  if a == 1 || b == 1 {\n    return 1\n  }\n  if a == b {\n    return a\n  }\n  if a < b {\n    return greatest_common_divisor(b, a)\n  }\n  return greatest_common_divisor(a, b)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293352,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n  if a == 0 || b == 0 {\n    return 1\n  }\n\n  let gcd = 1\n  while (a != 0) {\n    let temp = a\n    a = b % a\n    b = temp\n  }\n\n  return b\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "error: expected `;`, found keyword `while`\n  --> /tmp/tmpg1u070b_.rs:11:14\n   |\n11 |   let gcd = 1\n   |              ^ help: add `;` here\n12 |   while (a != 0) {\n   |   ----- unexpected token\n\nerror: expected `;`, found `a`\n  --> /tmp/tmpg1u070b_.rs:13:17\n   |\n13 |     let temp = a\n   |                 ^ help: add `;` here\n14 |     a = b % a\n   |     - unexpected token\n\nerror: expected `;`, found `b`\n  --> /tmp/tmpg1u070b_.rs:14:14\n   |\n14 |     a = b % a\n   |              ^ help: add `;` here\n15 |     b = temp\n   |     - unexpected token\n\nwarning: unnecessary parentheses around `while` condition\n  --> /tmp/tmpg1u070b_.rs:12:9\n   |\n12 |   while (a != 0) {\n   |         ^      ^\n   |\n   = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n   |\n12 -   while (a != 0) {\n12 +   while a != 0 {\n   | \n\nerror: aborting due to 3 previous errors; 1 warning emitted\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3, 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfn greatest_common_divisor(a: isize, b: isize) -> isize {\n    if a == 0 || b == 0 {\n        return 0\n    }\n    if a == 1 || b == 1 {\n        return 1\n    }\n    if a == b {\n        return a\n    }\n    if a > b {\n        return greatest_common_divisor(b, a % b)\n    }\n    return greatest_common_divisor(a, b % a)\n}\n\nfn main() {\n    let candidate = greatest_common_divisor;\n    assert_eq!(candidate(3, 7), 1);\n    assert_eq!(candidate(10, 15), 5);\n    assert_eq!(candidate(49, 14), 7);\n    assert_eq!(candidate(144, 60), 12);\n}\n",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `0`,\n right: `5`', /tmp/tmprwi34_re.rs:25:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    }
  ]
}