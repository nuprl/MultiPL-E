name: HumanEval_97_multiply
language: rb
prompt: "# Complete the function that takes two integers and returns \n# the product\
  \ of their unit digits.\n# Assume the input is always valid.\n# Examples:\ndef multiply(a,\
  \ b)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_multiply\n\
  \    candidate = method(:multiply)\n    assert_equal(16, candidate.call(148, 412))\n\
  \    assert_equal(72, candidate.call(19, 28))\n    assert_equal(0, candidate.call(2020,\
  \ 1851))\n    assert_equal(20, candidate.call(14, -15))\n    assert_equal(42, candidate.call(76,\
  \ 67))\n    assert_equal(49, candidate.call(17, 27))\n    assert_equal(0, candidate.call(0,\
  \ 1))\n    assert_equal(0, candidate.call(0, 0))\n  end\nend\n"
completions: ["  product = 1\n  while a > 0\n    if a % 10 * b > 0\n      product\
    \ *= b\n      a /= 10\n    else\n      product *= a\n      a *= 10\n    end\n\
    \  end\n  product\nend", "  # write code here\n  if b==1\n    return a\n  else\n\
    \    multiply(a, b-1)\n  end\nend", "  return a if b == 0 else a*b #not needed\n\
    end\nmultiply(1, 6)\nmultiply(1, 0)", '  return a * b', "  product = a * b\n \
    \ \n  # Iterate through the digits of the product and \n  # add them to the sum\n\
    \  # (The sum of unit digits will always be less than or equal \n  # to the product\
    \ of its digits.)\n  \n  sum = 0\n  product = product.to_i\n  \n  while product\
    \ > 0\n    sum = sum + product.modulo(10)\n    product = product / 10\n  end\n\
    \  \n  return sum\nend", "  return a if b < 10 else multiply(multiply(a, b/10),\
    \ 10)\nend\nmultiply(4, 6)\nmultiply(3, 7)\nmultiply(-1, 7)\nmultiply(1, 5)\n\
    multiply(2, 3)\nmultiply(12, 3)\nmultiply(100, 2)\nmultiply(200, 1)\nmultiply(300,\
    \ -1)\nmultiply(10000, 7)\nmultiply(100000000, 2)\nmultiply(1000000000, 5)\nmultiply(10000000000,\
    \ 3)\nmultiply(100000000000, 4)\nmultiply(1000000000000000000, 3)\nmultiply(10000000000000000000,\
    \ 5)\nmultiply(100000000000000000000, 4)\nmultiply(1000000000000000000000, 7)\n\
    multiply(10000000000000000000001, 6)\nmultiply(10000000000000000000001, 7)", " \
    \ return (a * b) if a < 10 and b < 10\n  return ((a % 10) * b) % 10\nend", " \
    \ return a * b\nend", "  if a == 0 and b == 0\n    return 0\n  else if a == 0\n\
    \    return b\n  else if b == 0\n    return a\n  end\n  \n  a * multiply(a/10,\
    \ b/10)\nend", "    return a*b\nend\n</cell>\n<cell>", "  \nend", '    return
    a*b', "  if a > b\n    return 0\n  else\n    a = a % 10\n    b = b % 10\n    if\
    \ a < b\n      return a * b\n    else\n      return multiply(a, b / 10)", "  return\
    \ (a * b).to_s.size\nend", "  if a < 1 or b < 1\n    return -1\n  \n  product\
    \ = 1\n  \n  while a > 0 or b > 0:\n    if a > 0 and b > 0 \n      digits = a%10*b%10\n\
    \      product = product * digits\n      a = a // 10\n      b = b // 10\n    \n\
    \    elif a > 0 and b == 0\n      a = a // 10\n      product = product * a\n \
    \   \n    elif a == 0 and b > 0\n      b = b // 10\n    \n    elif a < 0 and b\
    \ > 0\n      b = b // 10\n    \n    elif a < 0 and b == 0\n      product = product\
    \ * b\n    \n  return product\nend", "end\n</cell>\n<cell>\nmultiply(10, 10)\n\
    </cell>\n<cell>\nmultiply(5, 0)\n</cell>\n<cell>\nmultiply(0, 0)\n</cell>\n<cell>\n\
    multiply(9, 5)\n</cell>\n<cell>\nmultiply(10, 10)\n</cell>\n<text>\nProblem 8",
  "  if b == 0\n    return 0\n  end\n  \n  if a == 0 || b == 0\n    return 0\n  end",
  "  return a*b\nend\n</cell>\n<code language=julia-1.5>\n@code_native multiply(1,2)\n\
    </cell>\n<code language=julia-1.5>\n@code_native multiply(1,0)\n</cell>\n<text>\n\
    Great! Now we can use our new function for calculating the product of digits to\
    \ solve the problem above.", "\traise \"not implemented\"\nend", "  product =\
    \ 1\n  for i in 0...b do\n    product = product * a\n  end\n  return product\n\
    end", "    return a * (b / 10)\nend\n</cell>\n<text>\nLet's test your function",
  '  return a * b ', "    if a > 1000 and b > 1000:\n        print \"ERROR\"\n   \
    \ else:\n        print \"%d\" % (a*b)", "  if a == 0\n    return b\n  \n  n =\
    \ multiply(a / 10, 10)\n  n = n + b\n  return n", "  res = 0\n  for i in 0...9\n\
    \    res = res * 10 + a[i] * b[i]\n    return res\n  end\nend", "  return a*b\n\
    end\n</cell>\n<code language=julia-0.6>", "    product = 1\n    while a > 0 and\
    \ b > 0\n        q = a % 10\n        product = product * q + b % 10\n        a\
    \ = a / 10\n        b = b / 10\n    return product\nend\n</cell>\n<text>\nProblem\
    \ 3\nLet's test our work on the multiplication problem. Write a program that takes\
    \ in two positive integers and returns the product of their unit digits. If the\
    \ product of their unit digits is greater than 60, return 'BIG'. The product of\
    \ their unit digits can be as big as 60.", "\tproduct = 1\n\twhile a > 0 and b\
    \ > 0\n\t\ta = a % 10\n\t\tb = b % 10\n\t\tproduct = product * a + (10 * b) if\
    \ a > b\n\tend\n\tproduct\nend", '  return a * b ', "  product = 1\n  while b\
    \ > 0\n    product = product * 10\n    b = b - 1\n  end\n  while a > 0\n    product\
    \ = product * a\n    a = a - 1\n  end\n  return product\nend", "    product =\
    \ 1\n    digits = [int(x) for x in str(a)]\n    digits.extend(int(x) for x in\
    \ str(b))\n    for i in xrange(len(digits)):\n        product = product * digits[i]\n\
    \    return product", "  # Write your code here.\nend", "  res = []\n  while a.length\
    \ != 0\n    res << a.shift\n  end\n  while b.length != 0\n    a,b = b.split(/\\\
    D/)\n    res << a.to_i * b.to_i\n  end\n  res.join.to_s rescue 0\nend", "  digits\
    \ = ''\n  for i in 0...a.length\n    digits = digits + a.slice(i,i+1) + 'x' +\
    \ b.slice(i,i+1)\n  end\n  \n  case digits.length\n    when 0 then nil\n    when\
    \ 1 then digits.to_i\n    else digits[0...-1].to_i\n  end \nend", '    return
    a * b ', "  # Complete the code here\n  \n  # Extra credit for not hardcoding\
    \ the result\n  result = a if a%10==0 else (a%10) * b\n  return result", "  #\
    \ Your code here\n  \n  # Use a while loop to keep going until either one of the\
    \ values is zero.\n  # Remember that zero is a special case for multiplication\n\
    \  total = 1\n  while (a or b) > 0 do\n    if (b > 0) and (a % b == 0)\n     \
    \ break\n    total = total * b \n    a = a // b\n    b = b % b\n  end\n  \n  total\n\
    end", "  \nend", "  \n  total = 0\n  \n  if b.zero?\n    return a\n  end", '  return
    b * a ', '    return b * digit_sum(a)', "    product = 0\n    while a != 0 or\
    \ b != 0 do\n        product = product + (a % 10) * b % 10\n        a, b = b %\
    \ 10, a % 10\n    end\n    return product\nend\n</cell>\n<cell>", "  \n  # Check\
    \ if one or both values are invalid.\n  if a > 9 or b > 9\n    # Return an error\
    \ message.\n    return \"Invalid input.\"\n  else\n    # Initialize result to\
    \ 1.\n    result = 1\n  \n    # Divide both numbers with 10 until the remainder\
    \ is 0.\n    until a % 10 == 0 and b % 10 == 0\n      # Add the first number to\
    \ the result.\n      result = result * 10 + a\n      # Divide the second number\
    \ with 10 until the remainder is 0.\n      until b % 10 == 0\n        # Add the\
    \ second number to the result.\n        result = result * 10 + b\n      # Remove\
    \ the first number from the remainder.\n      a = a % 10\n      # Remove the second\
    \ number from the remainder.\n      b = b % 10\n    # Remove the first number\
    \ from the result.\n    result = result * 10 + a\n    # Remove the first number\
    \ from the result.\n    result = result * 10 + b\n    # Return the result.\n \
    \   return result\n  end\nend", "  return a*b\nend", "  if a == 0 || b == 0\n\
    \    puts \"Invalid input\"\n  else\n    product = a.to_i * b.to_i\n    puts product\
    \ % 10\n  end\nend", "  return (a*b).to_s.length\nend", "  if a == 0\n    return\
    \ b\n  elsif b == 0\n    return a\n  else\n    return (a * b)/10\n  end\nend",
  "    \n    product = 0\n    for i in range(a,b+1):\n        product = product +\
    \ i % 10\n    \n    return product", "  return 0 if a * b == 0 else (a * b / digit_sum(a)\
    \ * digit_sum(b))\nend", "  if a == b\n    return a\n  else\n    return a * b\n\
    \  end\nend\nmultiply(7, 10)", "  \n  # Write your code here.\n  \n  return a*b\n\
    end\nmultiply(6, 3)\nmultiply(6, 4)\nmultiply(7, 4)\nmultiply(5, 8)\nmultiply(2,\
    \ 2)\nmultiply(2, 8)\nmultiply(2, 4)\nmultiply(4, 2)\nmultiply(4, 8)\nmultiply(2,\
    \ 9)\nmultiply(9, 2)\nmultiply(9, 4)\nmultiply(9, 9)\nmultiply(10, 9)\nmultiply(11,\
    \ 6)\nmultiply(10, 10)\nmultiply(11, 10)\nmultiply(12, 2)\nmultiply(12, 4)\nmultiply(10,\
    \ 12)\nmultiply(11, 12)\nmultiply(12, 12)\nmultiply(12, 12)\nmultiply(13, 6)\n\
    multiply(13, 7)\nmultiply(13, 8)\nmultiply(13, 9)\nmultiply(13, 12)\nmultiply(13,\
    \ 10)\nmultiply(13, 12)\nmultiply(13, 14)\nmultiply(14, 6)\nmultiply(14, 7)\n\
    multiply(14, 8)\nmultiply(14, 9)\nmultiply(14, 12)\nmultiply(14, 10)\nmultiply(14,\
    \ 12)\nmultiply(14, 14)\nmultiply(15, 6)\nmultiply(15, 7)\nmultiply(15, 8)\nmultiply(15,\
    \ 9)\nmultiply(15, 12)\nmultiply(15, 10)\nmultiply(15, 12)\nmultiply(15, 14)\n\
    multiply(15, 15)\nmultiply(16, 3)\nmultiply(16, 4)\nmultiply(17, 4)\nmultiply(16,\
    \ 8)\nmultiply(16, 6)\nmultiply(16, 7)\nmultiply(16, 9)\nmultiply(16, 10)\nmultiply(16,\
    \ 12)\nmultiply(16, 14)\nmultiply(16, 16)\nmultiply(17, 6)\nmultiply(17, 7)\n\
    multiply(17, 8)\nmultiply(17, 9)\nmultiply(17, 10)\nmultiply(17, 12)\nmultiply(17,\
    \ 14)\nmultiply(17, 16)\nmultiply(18, 4)\nmultiply(18, 6)\nmultiply(18, 8)\nmultiply(18,\
    \ 10)\nmultiply(18, 12)\nmultiply(18, 14)\nmultiply(18, 16)\nmultiply(18, 18)\n\
    multiply(19, 6)\nmultiply(19, 8)\nmultiply(19, 10)\nmultiply(19, 12)\nmultiply(19,\
    \ 14)\nmultiply(19, 16)\nmultiply(19, 18)\nmultiply(20, 10)\nmultiply(20, 12)\n\
    multiply(20, 14)\nmultiply(20, 16)\nmultiply(20, 18)\nmultiply(21, 10)\nmultiply(21,\
    \ 12)\nmultiply(21, 14)\nmultiply(21, 16)\nmultiply(21, 18)\nmultiply(22, 10)\n\
    multiply(22, 12)\nmultiply(22, 14)\nmultiply(22, 16)\nmultiply(22, 18)\nmultiply(23,\
    \ 10)\nmultiply(23, 12)\nmultiply(23, 14)\nmultiply(23, 16)\nmultiply(23, 18)\n\
    multiply(24, 10)\nmultiply(24, 12)\nmultiply(24, 14)\nmultiply(24, 16)\nmultiply(24,\
    \ 18)\nmultiply(25, 10)\nmultiply(25, 12)\nmultiply(25, 14)\nmultiply(25, 16)\n\
    multiply(25, 18)\nmultiply(26, 10)\nmultiply(26, 12)\nmultiply(26, 14)\nmultiply(26,\
    \ 16)\nmultiply(26, 18)\nmultiply(27, 10)\nmultiply(27, 12)\nmultiply(27, 14)\n\
    multiply(27, 16)\nmultiply(27, 18)\nmultiply(28, 10)\nmultiply(28, 12)\nmultiply(",
  "  raise ArgumentError, 'invalid arguments' unless valid_unit_digits?(a)\n  raise\
    \ ArgumentError, 'invalid arguments' unless valid_unit_digits?(b)\n  raise ArgumentError,\
    \ 'invalid arguments' unless valid_unit_digits?(a / b)\n  (a / b).to_s.chars.map\
    \ { |x| x * b }.join\nend\n</cell>\n<text>\nTest Your Solution", "    # Write\
    \ your code here.\n    \n    result = a * b\n    return result", "  return a *\
    \ b # use 'return' keyword!", "  # Complete this function\nend\n</cell>\n<text>\n\
    Test your function by running the cell below.", "  if a <= 0\n    return 0\n \
    \ elsif b <= 0\n    return 0\n  else\n    return a + b\n  end\nend", "  return\
    \ a * b\nend", "    if b == 0 then\n        raise StandardError \"Negative number\"\
    \n    else if b % 10 == 0 then \n        return a * b\n    else \n        return\
    \ multiply(a * 10, b)", "  return a * b \nend", "    \n    result = 1\n    \n\
    \    if a > 0 and b > 0\n        \n        unit1 = get_unit(a)\n        unit2\
    \ = get_unit(b)\n        \n        if unit1 != unit2\n            \n         \
    \   return multiply(a-unit1, b-unit2)\n            \n        else:\n         \
    \   \n            if unit1 == \"1\" and unit2 == \"1\"\n                \n   \
    \             result = 1\n                \n            elif unit1 == \"1\" and\
    \ unit2 == \"0\"\n            \n                result = a * b\n            \n\
    \            elif unit1 == \"0\" and unit2 == \"0\"\n                \n      \
    \          result = a * b\n            \n            elif unit1 == \"1\" and unit2\
    \ == \"1\"\n                \n                result = a * b\n               \
    \ \n            elif unit1 == \"0\" and unit2 == \"1\"\n                \n   \
    \             result = a * b\n            \n            elif unit1 == \"1\" and\
    \ unit2 == \"0\"\n                \n                result = a * b\n         \
    \       \n            elif unit1 == \"0\" and unit2 == \"0\"\n               \
    \ \n                result = a * b\n                \n            elif unit1 ==\
    \ \"1\" or unit2 == \"1\"\n                \n                result = multiply(a,\
    \ b)\n                \n            elif unit1 == \"0\" or unit2 == \"1\"\n  \
    \              \n                result = multiply(a, b)\n                \n \
    \           elif unit1 == \"1\" and unit2 == \"0\"\n                \n       \
    \         result = multiply(a, b)\n                \n            elif unit1 ==\
    \ \"0\" and unit2 == \"0\"\n                \n                result = multiply(a,\
    \ b)\n                \n            elif unit1 == \"1\" and unit2 == \"1\"\n \
    \               \n                result = multiply(a, b)\n                \n\
    \            elif unit1 == \"0\" and unit2 == \"1\"\n                \n      \
    \          result = multiply(a, b)\n                \n            elif unit1 ==\
    \ \"1\" and unit2 == \"0\"\n                \n                result = multiply(a,\
    \ b)\n                \n            elif unit1 == \"0\" and unit2 == \"0\"\n \
    \               \n                result = multiply(a, b)\n                \n\
    \            elif unit1 == \"1\" and unit2 == \"1\"\n                \n      \
    \          result = multiply(a, b)\n                \n            elif unit1 ==\
    \ \"0\" and unit2 == \"1\"\n                \n                result = multiply(a,\
    \ b)\n                \n            elif unit1 == \"1\" and unit2 == \"0\"\n \
    \               \n                result = multiply(a, b)\n                \n\
    \            elif unit1 == \"0\" and unit2 == \"0\"\n                \n      \
    \          result = multiply(a, b)\n                \n            elif unit1 ==\
    \ \"1\" and unit2 == \"1\"\n                \n                result = multiply(a,\
    \ b)\n                \n            elif unit1 == \"0\" and unit2 == \"1\"\n \
    \               \n                result = multiply(a, b)\n                \n\
    \            elif unit1 == \"1\" and unit2 == \"0\"\n                \n      \
    \          result = multiply(a, b)\n                \n            elif unit1 ==\
    \ \"0\" and unit2 == \"0\"\n                \n                result = multiply(a,\
    \ b)\n                \n            elif unit1 == \"", "  puts \"Enter an integer\"\
    \n  a = gets.to_i\n  b = gets.to_i\n  if b == 0 || a == 0 || b < a\n    puts \"\
    Invalid input\"\n  else\n    puts a.to_s.chars.inject(:*)\n  end\nend\n</code>\n\
    <|/ a tags=ruby,number-systems |>\n<| c |>\nI love you. Thank you.\n<|/ c |>\n\
    <| c |>\nYour second code block has some bugs. For example, if `a` equals 2 and\
    \ `b` equals 1, the output will be `11`. The correct output should be `2`.\n<|/\
    \ c |>\n<| c |>\nThank you! I fixed that bug. Thanks for catching that.\n<|/ c\
    \ |>\n<| c |>\nPlease use `{|a, b| ... }`, not `{ |a, b| ... }`, when declaring\
    \ a block.\n<|/ c |>\n<| c |>\nThank you, I have edited the code block to use\
    \ `{ }`.\n<|/ c |>\n<| a tags=ruby,number-systems |>\nI wrote a solution that\
    \ uses the digits method of Integer class:\n<code>", "    return a * b\nend",
  '  return a * b if a > 0 and b > 0 && a * b == a if a > 0 and b > 0 else 0', " \
    \ if a == 0 and b == 0 then\n    return 1\n  else\n    return 0\n  end\nend\n\
    print(multiply(5, 8)) # Should print 24\nprint(multiply(1, 2)) # Should print\
    \ 0\nprint(multiply(0, 2)) # Should print 0\nprint(multiply(7, 4)) # Should print\
    \ 4\nprint(multiply(4, 0)) # Should print 0\nprint(multiply(0, 2)) # Should print\
    \ 0\nprint(multiply(4, 0)) # Should print 0\nprint(multiply(2, 1)) # Should print\
    \ 0\nprint(multiply(2, 0)) # Should print 2\nprint(multiply(0, 1)) # Should print\
    \ 0\nprint(multiply(0, 0)) # Should print 0\n</cell>\n<text>\n2. Problem 2. -\
    \ Adding numbers\nProblem 2 is the same as the previous one, but you are allowed\
    \ to add the numbers that are divisible by four.\nProblem 2 has the following\
    \ specifications:", '    return a * b ', "  product = a * b\n  return product\n\
    end", '  result = a * b', "  if a == 0 \n    return 0\n  else if a > 0 and b >\
    \ 0\n    return (10*multiply(a/10, b/10))\n  else\n    return 0\nend\nputs multiply(2,\
    \ 3)\nputs multiply(4, 6)\nputs multiply(10, 2)\nputs multiply(10, 5)\nputs multiply(15,\
    \ 8)", "  if a == 0\n    puts \"Sorry, you can't multiply by zero!\"\n    return\n\
    \  end\n  c = a * b\n  c = c.to_s\n  puts \"#{a} x #{b} = #{c}\"\nend", "    return\
    \ a * b\n</code>\n<|/ a tags=ruby,ruby-on-rails |>\n<| a dscore=0 |>\n<code>",
  "  \n  result = a * b\n  \n  return result\n  ", "  product = 1\n  while a > 0 and\
    \ b > 0\n    if a < 10\n      product = product * a\n      a = a / 10\n    else\n\
    \      a = a / 10\n      product = product * b\n      b = b / 10\n    end\n  end\n\
    \  return product\nend", "  \n  # Write your code here", "  \n  res = 0\n  for\
    \ i in (2..5)\n    unit = a%10\n    res += unit*b%10\n    b = b/10\n    a = a/10\n\
    \    return res\n  return res\nend", "  return a*b\nend", "  c = a*b\n  return\
    \ c", "    return a * b\nend", "  return a * b\nend\n</cell>\n<cell>", "  digits\
    \ = getDigits(a)\n  product = getUnitDigits(digits, b)\n  \n  return product\n\
    end", "  return 0 if a == 0 or b == 0\n  return a if b == 0 else a*b \nend", " \
    \ \n  # Your code goes here\n  \n  \n  # Solution\n  \n  \n  \n  # Alternative\
    \ Solution\n  \n  # Since this problem is so simple, we can just use string manipulation\n\
    \  # to get the result\n  result = a * 10 + b\n  result = result % 11\n  \n  return\
    \ result\nend\n</cell>\n<cell>", "  if a >= b\n    return 0\n  else\n    mul =\
    \ 0\n    while b != 0\n      carry = a%10\n      a = a/10\n      mul = mul + carry*b\n\
    \      b = b/10\n    end\n    return mul\n  end\nend", "  puts \"#{a} * #{b} =\
    \ #{a*b}\"\nend\nmultiply(5, 2)", "  return a if b == 0 else multiply(b % a, a)\n\
    end", "  if b == 0 \n    return 0\n  else \n    return multiply(a, b // 10) *\
    \ 10 + b % 10\n</code>\n<|/ a dscore=0 |>\n<| a |>\nHere's another way using recursion.\
    \ \n<code>\nint multiplication(int num1, int num2){\n  if (num1==0 && num2==0){\n\
    \    return 1;\n  }\n  return multiplication(num1/10, num2*10) + num1%10*multiplication(num1/10,\
    \ num2%10);\n}\n</code>\n<|/ a tags=algorithm,recursion,java dscore=0 |>\n<| a\
    \ |>\n<code>\nstatic int multiply(int a, int b)\n{\n    if (b == 0)\n        return\
    \ 0;\n    if (a > 9 || a < 0)\n        return -1;\n    int t = multiply(a / 10,\
    \ b);\n    if (t != -1)\n        return 10 * t + a % 10;\n    return t;\n}\n</code>\n\
    <|/ a dscore=0 tags=algorithm,recursion,java |>\n<| a tags=algorithm,recursion,java\
    \ |>\n<code>\nstatic int multiply(int a, int b) {\n    if (b == 0) return 0;\n\
    \    if (a > 9 || a < 0) return -1;\n    if (b > 9 || b < 0) return -1;\n    if\
    \ (a > 9 || a < b) return -1;", "  if b == 0 \n    return 0\n  else \n    return\
    \ a*b\n  ", "  product = 0\n  i = 0\n  while i < a.length\n    if a[i] == 1\n\
    \      product += b[i]\n    end\n    i += 1\n  end\n  product\nend", "  a % b\
    \ == 0\nend", "  result = 1\n  while (b > 0)\n    (result *= a)\n    (b -= 10)\n\
    \  end\n  result\nend", "  return nil if a.nil? or b.nil?\n  \n  return nil if\
    \ a == 0\n  return nil if b == 0\n  \n  if a.to_s.length <= b.to_s.length\n  \
    \  a = a.to_s.split(\"\").map{|c| c.to_i}\n    b = b.to_s.split(\"\").map{|c|\
    \ c.to_i}\n  else\n    b = b.to_s.split(\"\").map{|c| c.to_i}\n    a = a.to_s.split(\"\
    \").map{|c| c.to_i}\n  end", "  return (a*b).to_s(10)\nend \n</code>\n<|/ a tags=ruby,ruby-on-rails\
    \ dscore=1 |>\n<| c |>\nThank you very much for explaining what to_s does. I didn't\
    \ know that until now.\n<|/ c |>\n<| a |>\nYou could use the following methods\
    \ to find the sum of digits of a number:\n<code>", "  if a > 9 || b > 9 || a <\
    \ 1 || b < 1\n    return nil\n  end\n  \n  res = 0\n  \n  while a > 0 || b > 0\n\
    \    res += a % 10 * b % 10\n    a, b = b // 10, a // 10\n  end\n  return res\n\
    end", "  if a.nil? || b.nil? || a.to_s.length <1 || b.to_s.length <1\n    nil\n\
    \  else\n    if a == b\n      a.to_s\n    else\n      multiply_helper(a, b)\n\
    \    end\n  end\nend", "  puts \"\\na: %d, b: %d, product: %d\" % (a, b, a*b)\n\
    end", "    product = nil\n    \n    # Compute and return the product of the two\
    \ given integer values\n    # Unit digit products are computed by simply dividing\
    \ each unit digit of a value by 10\n    # Example: 2 units digits, 5 is 2*10/10\
    \ = 5\n    \n    # Write your solution below:\n    return 0", "  if a == 0 or\
    \ b == 0\n    0\n  else\n    digits(a) * digits(b)\n  end\nend\n</cell>\n<cell>\n\
    multiply(10, 6)\n</cell>\n<text>\nProblem 4\nThe digits of a number are called\
    \ the units of a number.\nWrite a function that returns true if the unit is 'one'\
    \ and false otherwise.\nExamples:", "  return a * b if a == b \n  return a * b\
    \ \nend", "  return a * b\nend\n</cell>\n<code language=julia-0.6>\nmultiply(2,\
    \ 3)\n</cell>\n<text>\nUnit Tests\nUnit testing is about making sure that your\
    \ code works as expected. We will use unit tests to check:", "    # Create a variable\
    \ to store your product\n    product = 1\n    # Divide the two numbers and store\
    \ them in the variable\n    product /= 10 * b\n    product /= 10 * a\n    return\
    \ product\n</code>\nNow we have two functions that calculate our product for us.\
    \ We can now create a third function that accepts a variable number of arguments\
    \ and calls both of the other two functions:\n<code>", "  if a == 0 or b == 0\n\
    \  0\n  else\n  a.to_i * b.to_i\n  end\nend", "    product = 1\n    \n    # Use\
    \ the += operator to add up the units of a.\n    # Don't forget to add one to\
    \ the units of b.\n    \n    \n    # Return the product of the units of a.\n \
    \   # Don't forget to return the product of the units of b.\n    \n    \n    #\
    \ Write the solution as an expression in a single line.\n    \n</cell>\n<cell>",
  "  return a * b\nend", "  product = a * b\n  return product\nend\nmultiply(3, 5)\n\
    </cell>\n<text>\nNow use your multiply function to get the product of the unit\
    \ digits of an integer, and verify that it returns the value 25.  Use your multiply\
    \ function in the following cell to find the product of the unit digits of an\
    \ integer.", "\t\n\t# Write your code below!\n\t\n\treturn 0\nend ", "  return\
    \ a*b\nend", "    return a * b \nend\nmultiply(3, 4)", "  # Convert both numbers\
    \ to strings.\n  a = a.to_s\n  b = b.to_s\n  # Return the product of their unit\
    \ digits.\n  a.zip(b.chars).inject(:*)\nend", "    product *= a\n    product *=\
    \ b\n    return product\n</code>\nThe main function will look like this:\n<code>\n\
    \ main\n    units = get_units(num)\n    product = 1\n    product *= multiply(units[0],\
    \ units[1])\n    product *= multiply(units[1], units[2])\n    product *= multiply(units[2],\
    \ units[3])\n    product *= multiply(units[3], units[4])\n    product *= multiply(units[4],\
    \ units[5])\n    product *= multiply(units[5], units[6])\n    return product\n\
    end\n</code>\nYou can see that it was a bit more code than the previous version,\
    \ but now that the code is clearly structured, it becomes easier to make changes\
    \ and test the logic.\n<|/ a dscore=0 |>\n<| a |>\nThis code will do the job:\n\
    <code>", "  return a * b\nend", '  return a * b # Replace this comment with your
    own code', "  return a * b\nend", " \nend", "  if b > 0 \n    multiply(b, a%b)\n\
    \  else\n    a * b\n  end\nend", "  raise \"Invalid input\" unless valid?(a)\n\
    \  raise \"Invalid input\" unless valid?(b)\n  raise \"Invalid input\" unless\
    \ valid?(a << b)\n  raise \"Invalid input\" unless valid?((a << b).to_i)\n  raise\
    \ \"Invalid input\" unless valid?((a << b).to_f)\n  raise \"Invalid input\" unless\
    \ valid?((a << b).to_s)\n  raise \"Invalid input\" unless valid?((a << b).to_a)\n\
    \  raise \"Invalid input\" unless valid?((a << b).to_f)\n  raise \"Invalid input\"\
    \ unless valid?((a << b).to_i)\n  raise \"Invalid input\" unless valid?((a <<\
    \ b).to_s)\n  raise \"Invalid input\" unless valid?((a << b).to_a)\n  raise \"\
    Invalid input\" unless valid?((a << b).to_f)\n  raise \"Invalid input\" unless\
    \ valid?((a << b).to_i)\n  raise \"Invalid input\" unless valid?((a << b).to_s)\n\
    \  raise \"Invalid input\" unless valid?((a << b).to_a)\n  raise \"Invalid input\"\
    \ unless valid?((a << b).to_f)\n  raise \"Invalid input\" unless valid?((a <<\
    \ b).to_i)\n  raise \"Invalid input\" unless valid?((a << b).to_s)\n  raise \"\
    Invalid input\" unless valid?((a << b).to_a)\n  raise \"Invalid input\" unless\
    \ valid?((a << b).to_f)\n  raise \"Invalid input\" unless valid?((a << b).to_i)\n\
    \  raise \"Invalid input\" unless valid?((a << b).to_s)\n  raise \"Invalid input\"\
    \ unless valid?((a << b).to_a)\n  raise \"Invalid input\" unless valid?((a <<\
    \ b).to_f)\n  raise \"Invalid input\" unless valid?((a << b).to_i)\n  raise \"\
    Invalid input\" unless valid?((a << b).to_s)\n  raise \"Invalid input\" unless\
    \ valid?((a << b).to_a)\n  raise \"Invalid input\" unless valid?((a << b).to_f)\n\
    \  raise \"Invalid input\" unless valid?((a << b).to_i)\n  raise \"Invalid input\"\
    \ unless valid?((a << b).to_s)\n  raise \"Invalid input\" unless valid?((a <<\
    \ b).to_a)\n", '  return a * b', "  x = a\n  y = b\n  while (x != 0)\n    y, x\
    \ = x % 10, y + x\n  return y * y\nend", "  return a*b\nend\nmultiply(12, 7) #\
    \ => 42\nmultiply(3, 12) # => 72\nmultiply(-12, 7) # => -4\nmultiply(-3, 4) #\
    \ => 12\nmultiply(3, 0) # => 0\nmultiply(0, 3) # => 0\nmultiply(8, 9) # => 8\n\
    multiply(0, 9) # => 0\nmultiply(10, -1) # => 10\nmultiply(10, -5) # => 10\nmultiply(-10,\
    \ -1) # => -10\nmultiply(-10, -5) # => -10\nmultiply(-1, 1) # => -1\nmultiply(-1,\
    \ 5) # => -1\nmultiply(-56, 5) # => -56\nmultiply(-15, 15) # => 0\nmultiply(-12,\
    \ 1) # => -1\nmultiply(-12, -1) # => -12\nmultiply(-1, -1) # => -1\nmultiply(-12,\
    \ 1) # => -1\nmultiply(-1, 1) # => -1\nmultiply(-1, -1) # => -1\nmultiply(-12,\
    \ 1) # => -1\nmultiply(-1, 1) # => -1\nmultiply(-1, -1) # => -1\nmultiply(-12,\
    \ 1) # => -1\nmultiply(-1, 1) # => -1\nmultiply(-1, -1) # => -1\nmultiply(-12,\
    \ 1) # => -1\nmultiply(-1, 1) # => -1\nmultiply(-1, -1) # => -1\nmultiply(-12,\
    \ 1) # => -1\nmultiply(-1, 1) # => -1\nmultiply(-1, -1) # => -1\nmultiply(-12,\
    \ 1) # => -1\nmultiply(-1, 1) # => -1\nmultiply(-1, -1) # => -1\nmultiply(-12,\
    \ 1) # => -1\nmultiply(-1, 1) # => -1\nmultiply(-1, -1) # => -1\nmultiply(-12,\
    \ 1) # => -1\nmultiply(-1, 1) # => -1\nmultiply(-1, -1) # => -1\nmultiply(-12,\
    \ 1) # => -1\nmultiply(-1, 1) # => -1\nmultiply(-1, -1) # => -1\nmultiply(-12,\
    \ 1) # => -1\nmultiply(-1, 1) # => -1\nmultiply(-1, -1) # => -1\nmultiply(-12,\
    \ 1) # => -1\nmultiply(-1, 1) # => -1\nmultiply(-1, -1) # => -1\nmultiply(-12,\
    \ 1) # => -1\nmultiply(-1, 1) # => -1\nmultiply(-1, -1) # => -1\nmultiply(-12,\
    \ 1) # => -1\nmultiply(-1, 1) # => -1\nmultiply(-1, -1) # => -1\nmultiply(-12,\
    \ 1) # => -1\nmultiply(-1, 1) # => -1\nmultiply(-1, -1) # => -1\nmultiply(-12,\
    \ 1) # => -1\nmultiply(-1, 1) # => -1\nmultiply(-1, -1) # => -1\nmultiply(-12,\
    \ 1) # => -1\nmultiply(-1, 1) # => -1\nmultiply(-1, -1) # => -1\nmultiply(-12,\
    \ 1) # => -1\nmultiply(-1, 1) # => ", "    product = multiply(a / b, b / a)\n\
    \    return product * a / b if product > 1 else product", "  return a*b\nend\n\
    </cell>\n<text>\nNow let's test the function by multiplying two valid inputs,\
    \ one with 2 and one with 7:", "  return a * b\nend", "    \n    # Base case:\
    \ a = b = 1 \n    if a == 1 and b == 1 \n        return 1 \n    \n    # Recursive\
    \ case: b > a \n    if b > a \n        return multiply(a * 10 + b, b) \n    \n\
    \    # Recursive case: a > b \n    if a > b \n        return multiply(a, b * 10\
    \ + a) \n    \n    # Return result of multiplication \n    return (a * b) / 10 ",
  "  # Your code here\n  raise NotImplementedError()\nend", "  product = 1\n  while\
    \ a && b\n     product = product * a % 10\n     a = a / 10\n     b = b / 10\n\
    \  end\n  product\nend", "  \n  # Complete the code.\n  \nend\n</cell>\n<text>\n\
    Test your solution", "    # Only change the code below this line. \n    return\
    \ a*b ", "\tresult = 0\n\tfor i in 0...a\n\t\tresult *= b\n\tresult\nend", '  ',
  "  result = 0\n  if a < b\n    a, b = b, a\n    while b != 0\n      result = result\
    \ + a % b\n      a = a / b\n      b = a % b\n  end\n  result\nend\nmultiply(1,\
    \ 2)\nmultiply(1, 3)\nmultiply(1, 4)\nmultiply(1, 5)\nmultiply(1, 6)\nmultiply(1,\
    \ 7)\nmultiply(1, 8)\nmultiply(1, 9)\nmultiply(2, 1)\nmultiply(3, 1)\nmultiply(4,\
    \ 1)\nmultiply(5, 1)\nmultiply(6, 1)\nmultiply(7, 1)\nmultiply(8, 1)\nmultiply(9,\
    \ 1)\nmultiply(10, 2)\nmultiply(10, 3)\nmultiply(10, 4)\nmultiply(10, 5)\nmultiply(10,\
    \ 6)\nmultiply(10, 7)\nmultiply(10, 8)\nmultiply(10, 9)\nmultiply(10, 10)\nmultiply(10,\
    \ 11)\nmultiply(10, 12)\nmultiply(10, 13)\nmultiply(10, 14)\nmultiply(10, 15)\n\
    multiply(10, 16)\nmultiply(10, 17)\nmultiply(10, 18)\nmultiply(10, 19)\nmultiply(10,\
    \ 20)\nmultiply(10, 21)\nmultiply(10, 22)\nmultiply(10, 23)\nmultiply(10, 24)\n\
    multiply(10, 25)\nmultiply(10, 26)\nmultiply(10, 27)\nmultiply(10, 28)\nmultiply(10,\
    \ 29)\nmultiply(10, 30)\nmultiply(10, 31)\nmultiply(10, 32)\nmultiply(10, 33)\n\
    multiply(10, 34)\nmultiply(10, 35)\nmultiply(10, 36)\nmultiply(10, 37)\nmultiply(10,\
    \ 38)\nmultiply(10, 39)\nmultiply(10, 40)\nmultiply(10, 41)\nmultiply(10, 42)\n\
    multiply(10, 43)\nmultiply(10, 44)\nmultiply(10, 45)\nmultiply(10, 46)\nmultiply(10,\
    \ 47)\nmultiply(10, 48)\nmultiply(10, 49)\nmultiply(10, 50)\nmultiply(10, 51)\n\
    multiply(10, 52)\nmultiply(10, 53)\nmultiply(10, 54)\nmultiply(10, 55)\nmultiply(10,\
    \ 56)\nmultiply(10, 57)\nmultiply(10, 58)\nmultiply(10, 59)\nmultiply(10, 60)\n\
    multiply(10, 61)\nmultiply(10, 62)\nmultiply(10, 63)\nmultiply(10, 64)\nmultiply(10,\
    \ 65)\nmultiply(10, 66)\nmultiply(10, 67)\nmultiply(10, 68)\nmultiply(10, 69)\n\
    multiply(10, 70)\nmultiply(10, 71)\nmultiply(10, 72)\nmultiply(10, 73)\nmultiply(10,\
    \ 74)\nmultiply(10, 75)\nmultiply(10, 76)\nmultiply(10, 77)\nmultiply(10, 78)\n\
    multiply(10, 79)\nmultiply(10, 80)\nmultiply(10, 81)\nmultiply(10, 82)\nmultiply(10,\
    \ 83)\nmultiply(10, 84)\nmultiply(10, 85)\nmultiply(10, 86)\nmultiply(10, 87)\n\
    multiply(10, ", "  return (a*b).to_i\nend", '  return a * b ', "    return a b\n\
    end\n</cell>\n<code language=julia-1.0>", "  # If the units have the same value,\
    \ the product will be the same.\n  product = a * b\n  if a.unit == b.unit\n  \
    \  return product\n  else # If the units differ, the product will be different.\n\
    \    # Find the smallest units that are multiples of both units.\n    a_prime,\
    \ b_prime = divide_units(a.unit, b.unit)\n    # If the units are the same, return\
    \ the product.\n    if a_prime == b_prime\n      return product\n    # Otherwise,\
    \ we need to divide both units so that they have the same \n    # number of units.\
    \ Then we can multiply them and return the product.\n    # Note that we are multiplying\
    \ units, so we need only one unit remaining.\n    a_divided, b_divided = divide_units(a_prime,\
    \ b_prime)\n    return multiply(a_divided, b_divided) * product\nend\n</cell>\n\
    <cell>\nmultiply(2, 3)\n</cell>\n<cell>\nmultiply(2, 4)\n</cell>\n<cell>\nmultiply(2,\
    \ 5)\n</cell>\n<cell>\nmultiply(2, 6)\n</cell>\n<cell>\nmultiply(2, 7)\n</cell>\n\
    <cell>\nmultiply(2, 8)\n</cell>\n<text>\nProblem 3\nWrite a function that divides\
    \ two units by converting them to different units.", "  result = 1\n  # Your code\
    \ here...\n  return result\nend", "    count = 0\n    while b > 0\n        if\
    \ b % 10 == 0\n            count += a\n        b /= 10\n        a *= 10\n    end\n\
    \    count\nend", "  # Return the product of a and b.\nend\nmultiply(1, 2)", " \
    \ return ((a / 10 * b) / 100) if (a / 10 * b).to_i >= 100 else ((a / 10 * b) /\
    \ 10)\nend\n</cell>\n<code language=julia-1.0>", "  ab = []\n  while a != 0\n\
    \    ab << a\n    a /= 10\n  end\n  ab.push(b);\n  while ab.length > 1\n    product\
    \ = 1\n    first = ab.pop\n    second = ab.pop\n    while second != 0\n      product\
    \ *= second\n      second /= 10\n    end\n    ab << first\n  end\n  ab.shift\n\
    \  return ab[0]\nend\n</cell>\n<code language=julia-0.5>", "  product = 1\n  while\
    \ b do\n    product = product * a\n    a = a / 10\n    b = b / 10\n  end\n  return\
    \ product\nend", "  # Your code here\nend", "  \nend", "  \n  carry = 1\n  result\
    \ = 0", "  if a < b\n    (a, b) = (b, a)\n  end\n  \n  return 0 if (a == 0) ||\
    \ (b == 0)\n  \n  sum = 0\n  \n  # Use a for loop to iteratively multiply a %\
    \ b by 10 and add the\n  # product to the sum.\n  (0...a).each { |i| sum += (b\
    \ % a) * 10 }\n  \n  return sum\nend", "  \n  c = a*b\n  return c\nend\n</cell>\n\
    <code language=julia-0.6>", "  product = 1\n  i = 0\n  while i < a.length\n  \
    \  product = product * 10 + a[i]\n    i += 1\n  i = 0\n  while i < b.length\n\
    \    product = product * 10 + b[i]\n    i += 1\n  return product\nend", "  c =\
    \ 0\n  while a > 0 or b > 0 do\n    if a > 0 and b > 0 do\n      c = c * a % 10\n\
    \      a = a / 10\n      b = b / 10\n    else if a > 0 do\n      c = c * a % 10\n\
    \      a = a / 10\n    else if b > 0 do\n      c = c * b % 10\n      b = b / 10\n\
    \    else do\n      break\n    end\n  end\n  return c\nend\nmultiply(2, 3)\n</cell>\n\
    <text>\nNow we can use the function we wrote to compute the product of two integers\
    \ to solve our unit digit problem:", "    product = 1\n    digits = Math.log10(a)\n\
    \    product = product * Math.pow(10, digits)\n    digits = Math.log10(b)\n  \
    \  product = product * Math.pow(10, digits)\n    return product\nend", "  # Complete\
    \ this function\nend", "  product = 1\n  \n  while a != 0 and b != 0\n    product\
    \ = product * a % 10 * b % 10\n    a = a / 10 \n    b = b / 10\n  \n  return product",
  "    if a.length <= 1 && b.length <= 1\n        return a[b]\n    end", " result\
    \ = 1\n for num in a\n   result = result * num\n end\n \n for num in b\n   result\
    \ = result * num\n end\n \n return result\nend", "  return a * b \nend", "  #\
    \ Write your code here.\n  if a < 1 or b < 1\n    return 0\n  end\n  \n  return\
    \ ((a / 10) * b) / 10\nend", "  x = a.to_s.reverse.to_i\n  y = b.to_s.reverse.to_i\n\
    \  z = 0\n  while (x < y)\n    z = z * 10 + a.to_s.reverse.to_i[x..y-1].inject(0)\
    \ {|m,i| m * 10 + i }\n    x += 1\n    y -= 1\n  end\n  z\nend", "  \n  if a ==\
    \ 0 and b == 0 \n    return 0\n  elsif b == 0\n    return a\n  elsif a == 0\n\
    \    return b\n  elsif a == 1 && b == 0 \n    return 0\n  elsif a == 1 && b ==\
    \ 1 \n    return 1\n  elsif a == 1 && b == 0 \n    return 1\n  elsif a == 1 &&\
    \ b == 1 \n    return 1\n  elsif a == 0 && b == 1 \n    return 0\n  elsif a ==\
    \ 0 && b == 1 \n    return 1\n  elsif a == 0 && b == 0 \n    return 0\n  else\n\
    \    return 0 \n  end\nend", "    digit_a = a.to_s\n    digit_b = b.to_s\n   \
    \ digit_a = '0' + (digit_a + '0' * (len(digit_b) - 1)).slice(-len(digit_b))\n\
    \    digit_a = '0' + digit_a\n    return digit_a*digit_b\nend", '  return a *
    b', "  return (a * b).to_s.chars.map(&:to_i).reduce(:*)\nend", "  return (a*b).to_s.reverse.to_i\n\
    end", "    prod = 1\n    while b != 0:\n        quo = a % b\n        a, b = b,\
    \ quo\n        prod *= b\n    return prod\n</cell>\n<text>\nThe two unit digit\
    \ problem\nThe unit digit problem takes two integer $a$ and $b$ and outputs the\
    \ product of the unit digits of $a$ and $b$.  For example:", "  product = 0\n\
    \  while a or b\n    product = product + (a % 10) * b % 10\n    a = a / 10\n \
    \   b = b / 10\n  end\n  return product\nend", "  # If only one is zero or negative,\
    \ return the other.\n  case(a, 0, b)\n    when -1\n      a\n    when 0\n     \
    \ b\n    when 1\n      a * b\n  end\nend\n</pre>", "  return a * b\nend", "  #\
    \ Your code here\n  return 0\nend", "  return (a * b / 100) * 10\nend", "  # Convert\
    \ a and b to Strings\n  a = a.to_s\n  b = b.to_s\n  # Create an empty String\n\
    \  product = \"\"\n  # Loop through both Strings\n  for i in 0...a.length\n  \
    \  for j in 0...b.length\n      # Get the digit in both Strings and multiply them\n\
    \      product = product + (a[i..(i+1)] * b[j..(j+1)])\n    end\n  end\n  return\
    \ product.to_i\nend", "  # This could be written as\n  # return (a / b) * b\n\
    \  # However, a % b is 0 when b is 10, and 1 otherwise\n  product = 1\n  while\
    \ b > 0\n    if b % 2 == 0\n      product *= a\n      a /= 2\n    else\n     \
    \ product *= a\n      a /= 2\n    end\n    b /= 2\n  end\n  product\nend", " \
    \ if a == 0 or b == 0\n    return 0;\n  else\n    return ((a % 10 ) * (b % 10))\
    \ % 10;\n  end\nend", "  return a*b\nend", "  return a * b \nend", "  p =  a *\
    \ b\n  return p if p == a * b \n  p =  a * b\n  return p if p == a * b \n  p =\
    \  a * b\n  return p if p == a * b \n  p =  a * b\n  return p if p == a * b \n\
    \  p =  a * b\n  return p if p == a * b \n  p =  a * b\n  return p if p == a *\
    \ b \n  p =  a * b\n  return p if p == a * b \n  p =  a * b\n  return p if p ==\
    \ a * b \n  p =  a * b\n  return p if p == a * b \n  p =  a * b\n  return p if\
    \ p == a * b \n  p =  a * b\n  return p if p == a * b \n  p =  a * b\n  return\
    \ p if p == a * b \n  p =  a * b\n  return p if p == a * b \n  p =  a * b\n  return\
    \ p if p == a * b \n  p =  a * b\n  return p if p == a * b \n  p =  a * b\n  return\
    \ p if p == a * b \n  p =  a * b\n  return p if p == a * b \n  p =  a * b\n  return\
    \ p if p == a * b \n  p =  a * b\n  return p if p == a * b \n  p =  a * b\n  return\
    \ p if p == a * b \n  p =  a * b\n  return p if p == a * b \n  p =  a * b\n  return\
    \ p if p == a * b \n  p =  a * b\n  return p if p == a * b \n  p =  a * b\n  return\
    \ p if p == a * b \n  p =  a * b\n  return p if p == a * b \n  p =  a * b\n  return\
    \ p if p == a * b \n  p =  a * b\n  return p if p == a * b \n  p =  a * b\n  return\
    \ p if p == a * b \n  p =  a * b\n  return p if p == a * b \n  p =  a * b\n  return\
    \ p if p == a * b \n  p =  a * b\n  return p if p == a * b \n  p =  a * b\n  return\
    \ p if p == a * b \n  p =  a * b\n  return p if p == a * b \n  p =  a * b\n  return\
    \ p if p == a * b \n  p =  a * b\n  return p if p == a * b \n  p =  a * b\n  return\
    \ p if p == a * b \n  p =  a * b\n  return p ", "  begin\n   if a == 0 then\n\
    \    return b\n   end\n   if a == 1 then\n    return b * a\n   end\n   if a ==\
    \ 2 then\n    return b * a * a\n   end\n   if a == 3 then\n    return b * a *\
    \ a * a\n   end\n   if a == 4 then\n    return b * a * a * a * a\n   end\n   if\
    \ a == 5 then\n    return b * a * a * a * a * a\n   end\n   if a == 6 then\n \
    \   return b * a * a * a * a * a * a\n   end\n   if a == 7 then\n    return b\
    \ * a * a * a * a * a * a * a\n   end\n   if a == 8 then\n    return b * a * a\
    \ * a * a * a * a * a * a\n   end\n   if a == 9 then\n    return b * a * a * a\
    \ * a * a * a * a * a * a\n   end\n  rescue ArgumentError => err\n    puts \"\
    Invalid arguments\"\n  end\nend", "    return a <=> b # compare the two units\n\
    end", '  return a * b', "  return (a * b)\nend", "  # TODO: Your code here\n \
    \ raise \"not implemented\"\nend\n</cell>\n<text>\nNotice that we raise a NotImplementedError\
    \ here. This means that if we call the function on real numbers, it will raise\
    \ an error because the unit digits of the numbers are not equal. In this case,\
    \ we could do something different, but we will just return the product as is.\
    \ This way, the function always returns the correct result.", end, "  a = a.to_s\n\
    \  b = b.to_s\n  if a.length == 0 and b.length == 0\n    return 0\n  \n  if a.length\
    \ == 0\n    return b\n  \n  if b.length == 0\n    return a\n  \n  product = 1\n\
    \  \n  a.each_char do |digit|\n    product.times {product *= (b % (10 ** (a.length\
    \ - digit.length))) }\n  end\n  \n  return product\nend\nmultiply(5, 6) # => 42\n\
    multiply(10, 5) # => 50\nmultiply(5, 10) # => 25\nmultiply(10, 10) # => 100\n\
    multiply(5, 12) # => 50\nmultiply(10, 4) # => 100\nmultiply(10, 6) # => 200\n\
    multiply(10, 8) # => 4000\nmultiply(10, 9) # => 1000000000\nmultiply(12, 6) #\
    \ => 36\nmultiply(6, 2) # => 6\nmultiply(6, 4) # => 12\nmultiply(6, 6) # => 24\n\
    multiply(6, 8) # => 720\nmultiply(12, 2) # => 12\nmultiply(12, 4) # => 24\nmultiply(12,\
    \ 6) # => 48\nmultiply(12, 8) # => 24000\nmultiply(6, 9) # => 100000000000\nmultiply(9,\
    \ 1) # => 9\nmultiply(9, 2) # => 27\nmultiply(9, 4) # => 90\nmultiply(9, 6) #\
    \ => 1728\nmultiply(9, 8) # => 43728\nmultiply(9, 9) # => 999999999\nmultiply(9,\
    \ 10) # => 1000000000\nmultiply(9, 12) # => 10000000000\nmultiply(9, 16) # =>\
    \ 10000000000000\nmultiply(9, 18) # => 100000000000000\nmultiply(10, 4) # => 100000000000\n\
    multiply(10, 6) # => 10000000000000\nmultiply(10, 8) # => 100000000000000\nmultiply(10,\
    \ 9) # => 10000000000000000\nmultiply(10, 10) # => 1000000000000000000\nmultiply(10,\
    \ 11) # => 10000000000000000000\nmultiply(10, 12) # => 100000000000000000000\n\
    multiply(10, 16) # => 10000000000000000000000000\nmultiply(10, 18) # => 1000000000000000000000000000\n\
    multiply(10, 19) # => 1000000000000000000000000000000\nmultiply(11, 2) # => 11\n\
    multiply(11, 4) # => 111\nmultiply(11, 6) # => 1111\nmultiply(11, 8) # => 11111\n\
    multiply(11, 9) # => 11111111\nmultiply(11, 10) # => 111111111\nmultiply(11, 12)\
    \ # => 11111111111\nmultiply(11, 16) # => 11111111111111\nmultiply(11, 18) # =>\
    \ 11111111111111100\nmultiply(11, 19) # => 111111111111111000\nmultiply(12, 2)\
    \ # => 12\nmultiply(12, 4) # => 112\nmultiply(12, 6) # => 1122\nmultiply(12, 8)\
    \ # => 11222\nmultiply(12, 9) # ", "  if b == 0\n     return 0\n  else\n     return\
    \ multiply(a, b / 10) * 10\n  end\nend\n</cell>\n<code language=julia-0.6>", " \
    \ return a*b if a<b && b<10 else -1\nend", "  while b > 0\n    a *= 10\n    b\
    \ -= 1\n  end\n  return a\nend", "    # your code here\n    \n    prod = 1\n \
    \   \n    for i in range(a, b+1):\n        prod *= i\n    \n    return prod\n\
    \        ", "  return a * b\nend", "  return a*b unless b > 0 \n  raise ArgumentError\
    \ unless valid? a\n  raise ArgumentError unless valid? b\n  raise ArgumentError\
    \ unless valid? a*b\n  return if b > a # No need to do anything\n  raise ArgumentError\
    \ unless valid? b*a\n  raise ArgumentError unless valid? a*b\n  puts \"Invalid\
    \ input! The first number must be greater than (or equal to) the second number.\"\
    \nend", '  return a * b', "  return a * b\nend", "  \n  # initialize product to\
    \ 1\n  product = 1\n  \n  # loop through digits\n  while a > 0\n    digit = a\
    \ % 10\n    product = product * digit\n    a = a / 10\n  end\n  \n  product =\
    \ product * b\n  return product\nend\nmultiply(2, 22) # => 220\nmultiply(2, 15)\
    \ # => 30\nmultiply(4, 20) # => 500\nmultiply(2, 0) # => 1\nmultiply(9, 10) #\
    \ => 210\nmultiply(6, 10) # => 6\nmultiply(10, 9) # => 10\nmultiply(0, 10) # =>\
    \ 1\nmultiply(1, 10) # => 10\nmultiply(15, 10) # => 30\nmultiply(10, 2) # => 200\n\
    multiply(6, 2) # => 6\nmultiply(9, 2) # => 3\nmultiply(10, 1) # => 10\nmultiply(11,\
    \ 1) # => 11\nmultiply(10, 0) # => 1\nmultiply(12, 1) # => 12\nmultiply(0, 0)\
    \ # => 1\nmultiply(1, 0) # => 1\nmultiply(9, 9) # => 9\nmultiply(1, 9) # => 9\n\
    multiply(0, 9) # => 9\nmultiply(2, 9) # => 9\nmultiply(10, 9) # => 9\nmultiply(9,\
    \ 0) # => 9\nmultiply(1, 0) # => 9\nmultiply(10, 1) # => 9\nmultiply(11, 1) #\
    \ => 9\nmultiply(12, 1) # => 9\nmultiply(9, 10) # => 9\nmultiply(10, 2) # => 9\n\
    multiply(6, 2) # => 9\nmultiply(9, 2) # => 9\nmultiply(10, 1) # => 9\nmultiply(11,\
    \ 1) # => 9\nmultiply(12, 1) # => 9\nmultiply(9, 2) # => 9\nmultiply(10, 1) #\
    \ => 9\nmultiply(11, 1) # => 9\nmultiply(12, 1) # => 9\nmultiply(9, 0) # => 9\n\
    multiply(1, 0) # => 9\nmultiply(10, 1) # => 9\nmultiply(11, 1) # => 9\nmultiply(12,\
    \ 1) # => 9\nmultiply(9, 10) # => 9\nmultiply(10, 2) # => 9\nmultiply(6, 2) #\
    \ => 9\nmultiply(9, 2) # => 9\nmultiply(10, 1) # => 9\nmultiply(11, 1) # => 9\n\
    multiply(12, 1) # => 9\nmultiply(9, 0) # => 9\nmultiply(1, 0) # => 9\nmultiply(10,\
    \ 1) # => 9\nmultiply(11, 1) # => 9\nmultiply(12, 1) # => 9\nmultiply(9, 10) #\
    \ => 9\nmultiply(10, 2) # => 9\nmultiply(6, 2) # => 9\nmultiply(9, 2) # => 9\n\
    multiply(10, 1) # => 9\nmultiply(11, 1) # => 9\nmultiply(12, 1) # => 9\nmultiply(9,\
    \ 2) # => ", "  return a * b unless b == 0\n  c = multiply(a/10, b)\n  return\
    \ a*c + b/10 unless c < 10\n  return a * 10 + c\nend\n</cell>\n<cell>\nmultiply(7,\
    \ 8)\n</cell>\n<text>\nQ4. Write a function sum, which takes in a list of integers\
    \ and returns the sum of its unit digits.", "  \n  # Add your code here\n  return\
    \ 0\nend", "  sum = 0\n  for i in 0...a.length do\n    sum = sum + (a[i].to_i\
    \ * b[i].to_i)\n  end\n  sum\nend\nmultiply([1,2,3],[4,5])", "    # Write your\
    \ solution here.\n    return a * b\nend", "  return a*b\nend", '    return a*b',
  "  if b < 0\n    return 0\n  end\n  return a * b \nend\n</cell>\n<text>\nRun the\
    \ cell below to test the two functions you wrote above. This will help you make\
    \ sure you get the correct answer.", "    \n    product = 1\n    \n    # Complete\
    \ this function\n    while a >= b:\n        c = a%10 * b\n        product = product\
    \ * c\n        a = a/10\n        b = b%10\n    return product", "  (a.length <\
    \ b.length ? a : b).length.times do\n    (a.length < b.length ? a : b).to_i.times\
    \ do\n      a.to_i * b.to_i\n    end\n  end\nend", "  if b > 0 \n  \tputs \"The\
    \ result cannot be greater than the number of digits\"\n  \texit\n  end\n  \n\
    \  return a * b\nend", "  return a * b\nend\n</cell>\n<code language=julia-1.0>\n\
    multiply(3, 4)\n</cell>\n<code language=julia-1.0>\nmultiply(6, 5)\n</cell>\n\
    <text>\nExercise 4\nCreate a function that returns True if the numbers of its\
    \ arguments\nare a multiple of 3; otherwise, return False.\nExample:\nisMultiple(12,\
    \ 10) = true\nisMultiple(12, 5) = false", "  \n  # Write your code here.\n  return\
    \ a * b\nend\nmultiply(2, 3)\nmultiply(10, 10)\nmultiply(10, 1)\n</cell>\n<text>\n\
    Problem 3\nThe multiplication table should look like this:\n \nYou should return\
    \ it as an array.", "  return a*b\nend\n</cell>\n<code language=julia-1.6>\nmultiply(10,\
    \ 10)\n</cell>\n<text>\nMultiply two arrays", "  digits = (0..9).to_a\n  d = digits.map\
    \ { |i| a.dig * b.dig } \n  result = d.sum\n  d.each { |i| result *= i }\n  result\n\
    end\nmultiply(7, 2)\n</cell>\n<text>\nQ3. What is the product of $7$ and $2$?\n\
    The answer is $40$"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
