name: HumanEval_102_choose_num
language: rb
prompt: "# This function takes two positive numbers x and y and returns the\n# biggest\
  \ even integer number that is in the range [x, y] inclusive. If \n# there's no such\
  \ number, then the function should return -1.\n# For example:\ndef choose_num(x,\
  \ y)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_choose_num\n\
  \    candidate = method(:choose_num)\n    assert_equal(14, candidate.call(12, 15))\n\
  \    assert_equal(-1, candidate.call(13, 12))\n    assert_equal(12354, candidate.call(33,\
  \ 12354))\n    assert_equal(-1, candidate.call(5234, 5233))\n    assert_equal(28,\
  \ candidate.call(6, 29))\n    assert_equal(-1, candidate.call(27, 10))\n    assert_equal(-1,\
  \ candidate.call(7, 7))\n    assert_equal(546, candidate.call(546, 546))\n  end\n\
  end\n"
completions: ["    even_integers = 0\n    while x <= y \n        if x % 2 == 0\n \
    \           even_integers += x\n            x += 1\n        else\n           \
    \ x += 1\n        end\n    end\n    return even_integers\nend", "    if x <= 0\
    \ or y <= 0 \n        return -1", "    if x == y\n        num = x\n    elsif x\
    \ <= y\n        num = x\n    else\n        num = y\n    end\n    while num < x\n\
    \        num += 1\n        if num % 2 == 0\n            break\n        end\n \
    \   end\n    while num > y\n        num -= 1\n        if num % 2 == 0\n      \
    \      break\n        end\n    end\n    return num\nend\n</cell>\n<code language=julia-1.5>\n\
    choose_num(6, 4)\n</cell>\n<code language=julia-1.5>\nchoose_num(13, 13)\n</cell>\n\
    <code language=julia-1.5>\nchoose_num(6, 2)\n</cell>\n<code language=julia-1.5>\n\
    choose_num(7, 7)\n</cell>\n<text>\nExercise\nLet's see how we can write this in\
    \ Julia. Try this out yourself.", "    if x > y \n      then return x\n      else\
    \ return y\n    else return x\n  end\nputs choose_num(5,10)\n</code>\n<|/ a |>\n\
    <| a |>\nIn ruby, you can make use of modulo operator:\n<code>", "    \n    #\
    \ Your code goes here:\n    \n    return -1", "  if x > y\n    x == y\n  return\
    \ -1 if (x < 0 || y < 0) && x > y\n  \n  even = 0\n  odd = 0\n  while even < x\
    \ && odd < y\n    if even < y\n      even += 2\n      odd += 2\n    elsif even\
    \ < x\n      even += 1\n      odd += 2\n    else # even < x\n      even += 2\n\
    \      odd += 1\n  end\n  return odd if (even + odd > x)\n  return even\nend\n\
    print(choose_num(20, 5)) # => 6\nprint(choose_num(9, 5)) # => 4\nprint(choose_num(25,\
    \ 7)) # => 4\nprint(choose_num(25, 15)) # => -1\n</cell>\n<text>\nHow many positive\
    \ integers less than N are there that are divisible by 7?", "    if x > y\n  \
    \      x, y = y, x\n    \n    evens_upto = x-y\n    \n    if evens_upto < 0\n\
    \        return -1", "  numbers = (0..x).to_a\n  numbers.sort { |a,b| a.to_i <\
    \ b.to_i }\n  numbers.find { |x| x % 2 == 0 }\nend\n</code>\n<|/ a tags=ruby,arrays\
    \ dscore=0 |>\n<| a dscore=0 tags=ruby,arrays |>\n<code>", "  if x < y\n    return\
    \ -1\n  else x > y\n    return -1\n  else\n    largest_even = y\n    while x >\
    \ y\n      largest_even = largest_even % x\n      x = x - largest_even\n    end\n\
    \    x\n  end\nend", "  even = 1\n  while even <= y\n    even = 2 * even\n  end\n\
    \  while even >= x\n    even = even / 2\n  end\n  return even\nend\nchoose_num(7,\
    \ 8)", "    i = x\n    j = y", "  nums = []\n  for i in (2..x)\n    num = i *\
    \ i\n    if num > y\n      return -1\n    nums << num\n  end\n  nums.sort.last\n\
    end", "  if x > y\n    x, y = y, x\n  end\n  while x > 0\n    break if y % 2 ==\
    \ 0\n    x -= 2\n  end\n  while x < y\n    break if y % 2 == 0\n    x += 2\n \
    \ end\n  return y if x == y\n  y -= 1 if x % 2 == 0\n  y -= 1 if y % 2 == 1\n\
    \  return y\nend\n</code>\n<|/ a dscore=4 tags=ruby |>\n<| c |>\nWhat is `choose_num(x,y)`?\n\
    <|/ c |>\n<| c |>\nIt's a function that calculates `y` when `x > y`, i.e. it takes\
    \ the larger of the two arguments. I call it `choose_num` because I didn't know\
    \ what the function would have to be called; I assumed a mathematical function,\
    \ just like the one used in OP's code. I called it the same thing as in OP's code.\n\
    <|/ c |>\n<| c |>\nThanks for the answer, but this isn't the code I ended up using.\
    \ I was looking to solve the problem with just one function and without using\
    \ loops.\n<|/ c |>\n<| c |>\n: Oh, I see. What I posted is a single function that\
    \ returns the answer in any number of ways. I'm glad you were able to find a solution\
    \ that worked for you as well.\n<|/ c |>\n<| c |>\n: Sorry I didn't see your answer\
    \ before I posted my own. Yours was very similar to what I was looking for. Thanks!\n\
    <|/ c |>\n<| a |>\n<code>", "  a = b = 0\n  while a <= x\n    b += 1\n    if b\
    \ % 2 == 0\n      a = b\n    else\n      a += 2\n    end\n  end\n  while b <=\
    \ y\n    a += 1\n    if a % 2 == 0\n      b = a\n    else\n      b += 2\n    end\n\
    \  end\n  return a\nend\n</code>\n<|/ a dscore=3 tags=ruby |>\n<| a tags=ruby\
    \ dscore=2 |>\n<code>", "\tmin = x\n\tmax = y\n\twhile min <= max\n\t\tmid = min\
    \ + (max - min)/2\n\t\tguess = mid\n\t\tguess = guess + (mid/2) #the middle number\
    \ should be divided by 2 since it's an even number\n\t\tguess = guess - (mid*2)\
    \ #the middle number should be multiplied by 2 since it's an odd number\n\t\t\
    guess = guess / 2 #the middle number should be divided by 2 since it's an even\
    \ number\n\t\tguess = guess * 2 #the middle number should be multiplied by 2 since\
    \ it's an odd number\n\t\tguess = guess + 1 #the middle number should be incremented\
    \ by 1 since it is odd\n\t\tif guess > y\n\t\t\tmax = mid\n\t\telsif guess < x\n\
    \t\t\tmin = mid\n\t\telsif guess == y\n\t\t\tmin = mid\n\t\t\tmax = mid\n\t\t\
    else\n\t\t\tmin = mid\n\t\t\tmax = mid\n\t\tend\n\tend\n\tmin\nend", "  num =\
    \ -1\n  while x > 0 and y > 0\n    num = x + y if num.to_i <= x + y end\n    if\
    \ num.to_i >= 0\n      break\n    end\n    x -= 1\n    y -= 1\n  end\n  num\n\
    end", "  return x + y if x * y % 2 == 0 else -1\nend\n</cell>\n<code language=julia-0.4>\n\
    choose_num(20, 5) # 20 + 5 = 25 -> 25 is the largest even number in the range\n\
    </cell>\n<text>\nAs an exercise, write choose_num so that it returns the greatest\
    \ even number in the given range [x, y] inclusive.", "    biggest = nil\n    biggest\
    \ = x if (y <= x && x <= y) \n    biggest = y if (y <= x && x > y) \n    biggest\
    \ = x if (x > y && x <= y) \n    biggest = y if (x > y && y <= x) \n    biggest\
    \ = -1 if (x > y && x > y)\n    return biggest\nend", "    beginning_num = x\n\
    \    end_num = y\n    flag = 1\n    while beginning_num <= end_num\n        beginning_num\
    \ += 2\n        if beginning_num > end_num\n            beginning_num -= 1\n \
    \           flag = 0\n            break\n        if beginning_num % 2 == 0\n \
    \           beginning_num += 1\n        end\n    end\n    if beginning_num > end_num\n\
    \        beginning_num -= 1\n    end\n    return beginning_num if flag == 0 \n\
    \    return -1\nend\n        ", "  if x > y\n    return x\n  else\n    return\
    \ y\n  end\nend", "  if x > y\n    return y\n  elsif x < y\n    return x\n  elsif\
    \ x == y\n    return 0\n  else\n    return -1\n  end\nend", "    even = num.even?\n\
    \    (num.include?(x) && num.include?(y) && even) ? num[x..y].max : -1\nend\n\
    </code>\n<|/ a dscore=0 tags=ruby |>\n<| c |>\nJust to clarify, the OP wants to\
    \ get the largest integer in the range `[x,y]`, but your code returns the largest\
    \ integer in the range `[x,y]`. Am I missing something?\n<|/ c |>\n<| a tags=ruby\
    \ dscore=0 |>\nHow about using Enumerable#min_by?\n<code>", "  return x if x >\
    \ y ? x : y\nend", "  max = -1\n  nums = Array.new(y)\n  nums[x] = 1\n  until\
    \ nums.length == y\n    evens = Array.new\n    for num in nums\n      if not num\
    \ % 2\n        evens << num\n      end\n    end\n    max = evens.max if evens.any?\n\
    \  end\n  max\nend", "    num = 0\n    while x < y\n        if x % 2 == 0\n  \
    \          if y % 2 == 0\n                num += 1\n            else\n       \
    \         y -= 1\n        end\n        x += 1\n        if x == y\n           \
    \ return num\n        end\n    end\n    return -1\nend\nprint(choose_num(20, 30))\n\
    print(choose_num(20, 20))\nprint(choose_num(20, 21))\nprint(choose_num(20, 40))",
  "    if x < 0 or y < 0 \n        return -1\n    biggest_even_num = (x + y) /2\n\
    \    while (x <= biggest_even_num and y > biggest_even_num)\n        biggest_even_num\
    \ = (biggest_even_num + biggest_even_num)/2\n    while (x > biggest_even_num and\
    \ y > biggest_even_num)\n        biggest_even_num = (biggest_even_num + biggest_even_num)/2\n\
    \    return biggest_even_num\n</code>\n<|/ a |>\n<| a dscore=0 |>\nMy implementation\
    \ would be :\n<code>\n// returns -1 if not applicable\nint max(int x, int y)\n\
    {\n    if(x>y)\n        return(max(y,x));\n    return(x);\n}\n// returns -1 if\
    \ not applicable\nint min(int x, int y)\n{\n    if(x<y)\n        return(min(x,y));\n\
    \    return(x);\n}\nint choose_num(int x, int y)\n{\n    int even = 0;\n    int\
    \ odd = 0;\n    int biggest = 0;\n    int biggestEven = 0;\n    for(int i=x; i<y;\
    \ i++)\n    {\n        if((i & 1) == 0)\n        {\n            even = i + even;\n\
    \        }\n        else\n        {\n            odd = i + odd;\n        }\n \
    \   }\n    biggest = max(even,odd);\n    biggestEven = min(biggest,even);\n  \
    \  return biggestEven;\n}\n</code>\n<|/ a tags=math,c++,algorithm |>\n<| c |>\n\
    How is this different from my solution?\n<|/ c |>\n<| c |>\nMy solution is simpler,\
    \ but this one is more efficient. My solution is O(n), yours is O(n^2)\n<|/ c\
    \ |>\n<| a tags=math,c++,algorithm |>\nIf all numbers are positive integers, you\
    \ can do something like this\n<code>\nint choose_num(int x, int y){\n    int max_x\
    \ = max_num(x);\n    int max_y = max_num(y);\n    int max_even;\n    int max_odd;\n\
    \    int max_even_x = max_num(max_x);\n    int max_even_y = max_num(max_y);\n\
    \    int max_even_even = max_num(max_even_x);\n    int max_even_odd = max_num(max_even_y);\n\
    \    if(max_x >= max_y){\n        max_even = max_even_even;\n        max_odd =\
    \ max_even_odd;\n    }\n    else if(max_x == max_y){\n        max_even = max_even_even;",
  "  puts \"Give first number: \"\n  a = gets.chomp.to_i\n  puts \"Give second number:\
    \ \"\n  b = gets.chomp.to_i\n  puts \"Give range: \"\n  c = gets.chomp.to_i\n\
    \  if x > y || x < 0 || y < 0\n    return -1\n  else\n    while b < c\n      if\
    \ a % 2 == 0 && b % 2 == 0 && c % 2 == 0\n        return -1\n      elsif a % 2\
    \ == 0 && b % 2 == 0 && c % 2 != 0\n        b = b + 1\n      elsif a % 2 != 0\
    \ && b % 2 != 0 && c % 2 == 0\n        c = c - 1\n      elsif a % 2 != 0 && b\
    \ % 2 != 0 && c % 2 != 0\n        a = a - 2\n      end\n    end\n    return a\n\
    \  end\nend\n</code>\nIf you run this on IRB console, it asks you to input the\
    \ first number, the second number and the range from which you want the number\
    \ to be generated.\n<code>", "  max_num = (x + y) / 2\n  if x > y\n    temp =\
    \ x\n    x = y\n    y = temp\n  until x > y\n  \n  if max_num == x\n    max_num\
    \ = y\n  \n  max_num\nend", "    puts \"x: #{x}\"\n    puts \"y: #{y}\"\n    evens\
    \ = (0..x).select {|z| z % 2 == 0}\n    puts \"evens: #{evens}\"\n    odds = (y..x).select\
    \ {|z| z % 2 == 1}\n    puts \"odds: #{odds}\"\n    evens.inject(0) {|acc, z|\
    \ acc + (z + 1)} if evens.any?\n    puts \"evens inject #{evens.inject{|acc, z|\
    \ acc + (z + 1)}}\"\n    odds.inject(0) {|acc, z| acc + (z + 1)} if odds.any?\n\
    \    puts \"odds inject #{odds.inject{|acc, z| acc + (z + 1)}}\"\n    puts \"\"\
    \n    evens.reduce(0) {|acc, z| acc + (z + 1)} if evens.any?\n    puts \"evens\
    \ reduce #{evens.reduce{|acc, z| acc + (z + 1)}}\"\n    odds.reduce(0) {|acc,\
    \ z| acc + (z + 1)} if odds.any?\n    puts \"odds reduce #{odds.reduce{|acc, z|\
    \ acc + (z + 1)}}\"\n    puts \"\"\n    evens.max {|a, b| a} if evens.any?\n \
    \   puts \"evens max #{evens.max{|a, b| a}}\"\n    odds.max {|a, b| a} if odds.any?\n\
    \    puts \"odds max #{odds.max{|a, b| a}}\"\nend", "  num = x if x % 2 == 0 else\
    \ y\n  puts num\n  return num if num >= 0 and num <= y else -1\nend", "  x_even\
    \ = x % 2 == 0\n  y_even = y % 2 == 0\n  x_odd = x % 2 != 0\n  y_odd = y % 2 !=\
    \ 0\n  if x_even && y_even && !x_odd && !y_odd\n    return x if x > y else y\n\
    \  elsif x_even && !y_even && x_odd && y_odd\n    return x if x > y else y\n \
    \ elsif x_even && y_even && !x_odd && y_odd\n    return x if x > y else y\n  elsif\
    \ x_even && !y_even && !x_odd && y_odd\n    return x if x > y else y\n  elsif\
    \ !x_even && y_even && !x_odd && y_odd\n    return x if x > y else y\n  elsif\
    \ !x_even && !y_even && x_odd && y_odd\n    return x if x > y else y\n  elsif\
    \ !x_even && !y_even && !x_odd && y_odd\n    return x if x > y else y\n  end\n\
    end", "  if x <= 0 or y <= 0\n    puts \"The argument should be positive!\"\n\
    \    return -1\n  elsif x > y\n    puts \"The x argument should be less than the\
    \ y argument!\"\n    return -1\n  else\n    even_integer = 1\n    while even_integer\
    \ <= y do\n      if x % 2 == 0\n        return even_integer\n      else\n    \
    \    even_integer += 1\n      end\n    end\n  end\nend", "  x_even = x.even?\n\
    \  y_even = y.even?\n  return x_even && y_even ? ((x_even ? 0 : x) + y_even) :\
    \ (x_even || y_even ? y : -1)\nend", "  ((x >= y or x == -1) and (y >= -1 or y\
    \ == -1)) ? x : -1\nend", "  \n  while x <= y\n    if x % 2 == 0 and y % 2 ==\
    \ 0\n      return x\n    else \n      x = x+1\n      y = y-1\n  end\n  return\
    \ -1\nend", "  num = -1\n  for i in 1..y do\n    tmp = x + i\n    if tmp mod 2\
    \ = 0 then\n      num = tmp\n      break\n    end\n  end\n  return num\nend\n\
    </cell>\n<cell>", "  biggest = x + y\n  smaller = x - y\n  \n  while biggest !=\
    \ -1 && smaller != -1\n    if biggest % 2 == 0 and smaller % 2 == 0\n      biggest,\
    \ smaller = smaller, biggest - biggest/2\n    else\n      biggest, smaller = biggest\
    \ - biggest/2, smaller - smaller/2\n    end\n  end\n  \n  return biggest if biggest\
    \ != -1 and smaller != -1\n  return -1\nend\n</cell>\n<code language=julia-1.5>\n\
    choose_num(10, 20)\n</cell>\n<code language=julia-1.5>", "    biggest = nil\n\
    \    for i in 0...y\n        if biggest == nil or biggest > i then\n         \
    \   biggest = i\n        end\n    end\n    biggest\nend\n</code>\n<|/ q dscore=0\
    \ |>\n<| c |>\n`for i in 0...y` will actually go from 0 to y inclusive, i.e. 0\
    \ to y exclusive. `for i in 0...y-1` will give you all numbers 0 through y-1 in\
    \ ascending order (assuming y > 0).\n<|/ c |>\n<| c |>\nYou should learn how to\
    \ debug your programs and find out where the problems are. Learn how to print\
    \ the values of the variables and also the return values from functions. If you\
    \ don't know how to use the debugger, you can learn how to do it [here](https://stackoverflow.com/questions/25385173/what-is-a-debugger-and-how-can-it-help-me-diagnose-problems).\
    \ Or you can just use a print statement right before your `for` loop to see what\
    \ values your variables have at that point.\n<|/ c |>\n<| c |>\n`choose_num(4,2)`\
    \ returns `3`, not `4`. Apart from that, there are several mistakes: 1) You use\
    \ an `each` loop on a range that only goes up to `y`, but you test `y` against\
    \ `i` in the loop. `each` does `for i in 0...n`, which makes `i` go up to `n-1`.\
    \ 2) You `return` too early, because you test `biggest` against `x` in the loop\
    \ too. 3) You don't really need `each` here. `for` would be sufficient: `for i\
    \ in 0...y`.\n<|/ c |>\n<| c |>\n`choose_num(4,2)` returns `3` but that's not\
    \ correct. `choose_num(4, 2)` returns `4`. The function returns the biggest even\
    \ number that is between x and y.\n<|/ c |>\n<| a |>\nThe issue was that Ruby\
    \ loops through ranges from 0 to n-1, while you wanted the numbers from 0 to n.\
    \ There are several ways to do this. \nOne way is to subtract one from the start\
    \ of your loop:\n<code>", "    if x > y\n        return x if y % 2 == 0 # If both\
    \ x and y are even, choose x if y % 2 = 0\n        return y\n    return y", " \
    \ if x >= y\n    return -1\n  i = 1\n  while i <= x/2\n    if x%i == 0 and y%i\
    \ == 0\n      return i\n    i += 1\n  raise \"There is no such number\"\nend\n\
    </cell>\n<text>\nLet's try it out:", "  begin\n    puts \"x should be greater\
    \ than 0\"\n    x -= 1 if x <0\n    puts \"x should be less than or equal to\"\
    \ x\n    y -= 1 if y <0\n    puts \"y should be less than or equal to\" y\n  \
    \  puts \"x should be less than or equal to\" x\n    puts \"y should be greater\
    \ than or equal to\" y\n    \n    if x > y\n      puts \"x should be greater than\
    \ y\"\n      puts \"x should be greater than or equal to\" x\n      puts \"y should\
    \ be greater than or equal to\" y\n      return -1\n    elsif x < y\n      puts\
    \ \"y should be greater than x\"\n      puts \"y should be greater than or equal\
    \ to\" y\n      puts \"x should be greater than or equal to\" x\n      puts \"\
    x should be greater than or equal to\" y\n      return -1\n    elsif y == 0\n\
    \      return -1\n    else\n      begin\n        puts \"x should be less than\
    \ or equal to\" x\n        puts \"y should be less than or equal to\" y\n    \
    \    \n        if x > y\n          puts \"x should be greater than or equal to\"\
    \ x\n          puts \"y should be greater than or equal to\" y\n          return\
    \ -1\n        elsif x < y\n          puts \"x should be greater than or equal\
    \ to\" x\n          puts \"y should be greater than or equal to\" y\n        \
    \  return -1\n        end\n      rescue\n        puts \"No even number in the\
    \ given range\"\n      end\n    end\n  rescue\n    puts \"Invalid input\"\n  end\n\
    \  \n  begin\n    puts \"x should be greater than 0\"\n    x -= 1 if x <0\n  \
    \  puts \"x should be less than or equal to\" x\n    puts \"y should be less than\
    \ or equal to\" y\n    puts \"x should be less than or equal to\" x\n    puts\
    \ \"y should be greater than or equal to\" y\n    \n    if x > y\n      puts \"\
    x should be greater than y\"\n      puts \"x should be greater than or equal to\"\
    \ x\n      puts \"y should be greater than or equal to\" y\n      return -1\n\
    \    elsif x < y\n      puts \"y should be greater than x\"\n      puts \"y should\
    \ be greater than or equal to\" y\n      puts \"x should be greater than or equal\
    \ to\" x\n      puts \"x should be greater than or equal to\" y\n      return\
    \ -1\n    elsif y == 0\n      return -1\n    else\n      begin\n        puts \"\
    x should be less than or equal to\" x\n        puts \"y should be less than ",
  "    \n    # Your code here\n    \n    \n    if x != 0 and y != 0\n        if x\
    \ % 2 == 0 and y % 2 == 0:\n            return (x * y) / 2\n        elif x % 2\
    \ != 0 and y % 2 != 0:\n            return (x * y) / 2 + (x * y) / 2\n       \
    \ else:\n            return -1\n    else:\n        return -1", "    if x > y or\
    \ x < 0\n        return -1\n    if x == y and x % 2 == 0\n        return x\n \
    \   num = 1\n    while num * 2 <= x and num * 2 < y\n        num += 1\n    return\
    \ num * 2 - 1\nend", "  if x > 0\n    if y > x\n      y\n    else\n      x\n \
    \   end\n  else\n    if y > x\n      x\n    else\n      y\n    end\n  end\nend\n\
    </cell>\n<cell>", "   while x > 0\n      if x % 2 == 0\n         if y % 2 == 0\n\
    \            if y > x\n               return y\n            else\n           \
    \    return x\n            end\n         else\n            return x\n        \
    \ end\n      end\n      x -= 1\n   end\n   return -1\nend\n</code>\nThis is what\
    \ I got so far and it's not working at all. Can anyone help me?\n<|/ q tags=ruby\
    \ |>\n<| c |>\nDo you have any code to show?\n<|/ c |>\n<| c |>\nI added it. I\
    \ edited it a bit so that it has a little more context.\n<|/ c |>\n<| a tags=ruby\
    \ dscore=2 |>\n<code>", "    z = x\n    while y > z\n        z <<= 1\n       \
    \ z &= 0xFFFFFFFF\n        x <<= 1\n        x &= 0xFFFFFFFF\n        y <<= 1\n\
    \        y &= 0xFFFFFFFF\n        z >>= 1\n    return z if z > 0xFFFFFFFF else\
    \ -1\nend", "    biggest = -1\n    even = 1\n    while even < y:\n        if even*even\
    \ > biggest:\n            biggest = even\n        even += 2\n    if even == x:\n\
    \        return biggest\n    else:\n        return -1\nprint(choose_num(12, 20))\n\
    </cell>\n<text>\nExercise 4\nWrite a Python function is_palindrome that takes\
    \ a single number as input and returns a boolean value (True/False) indicating\
    \ whether it is a palindrome.", "  smallest = -1\n  largest = x\n  \n  until largest\
    \ < y\n    largest = y\n    smallest = x\n  \n  while largest < x\n    y = smallest\
    \ * 2 \n    smallest = x \n    x = y\n  end\n  \n  return x if largest == y\n\
    \  return -1\nend", " \n  if x > y then\n    return -1\n  \n  i = 1\n  \n  while\
    \ i <= y do\n    if (x % i == 0 and y % i == 0) then\n      puts \"#{x} divided\
    \ by #{i} and by #{y} are both even\"\n      return x\n    end\n    \n    i =\
    \ i + 1\n  end\n  \n  puts \"#{x} divided by #{y} is even\"\n  return y\nend",
  "  if x > y\n    x, y = y, x\n  end\n  return x if x == y || x % 2 == 0 && y % 2\
    \ == 0\n  \n  # If x is even, return it\n  return x if x % 2 == 0\n  \n  # If\
    \ y is even, return it\n  return y if y % 2 == 0\n  \n  # If x is greater than\
    \ y, swap them and return whichever one has the \n  # higher value\n  return y\
    \ if x > y\n  \n  # If y > x, swap them and return whichever one has the higher\
    \ value\n  return x if x > y\nend\n</cell>\n<code language=julia-1.0>\nchoose_num(7,\
    \ 12)\n</cell>\n<code language=julia-1.0>\nchoose_num(3, 18)\n</cell>\n<text>\n\
    The first code cell above is what we used to implement the previous function in\
    \ Julia. Let's compare it to our Python implementation to make sure it works the\
    \ same.", "  puts \"Your choices range from #{x} to #{y}\"\n  puts \"Please pick\
    \ an even number between #{x} and #{y}:\"\n  number = gets.to_i\n  puts \"You\
    \ picked #{number}\"\n  if number.between?(x, y)\n    return number\n  else\n\
    \    puts \"Please pick an even number between #{x} and #{y}:\"\n    choose_num(x,\
    \ y)\n  end\nend", "   x = x.to_i\n   y = y.to_i\n   if x <= y\n     return x\n\
    \   else\n     return y\n   end\nend\n</cell>\n<code language=julia-0.6>\nchoose_num(19,\
    \ 22)\n</cell>\n<code language=julia-0.6>\nchoose_num(7, 13)\n</cell>\n<text>\n\
    Using functions", "  nums = []\n  nums = nums.to_a + x.to_a + y.to_a\n  if nums.include?(2)\
    \ == true\n    nums.delete(2) # removes 2\n    nums.delete(y) # removes y\n  \
    \  nums.delete(x) # removes x\n    nums.sort.last # gets the last number\n  else\n\
    \    -1\n  end\nend\n</code>\nNow that we have our choose_num function, we need\
    \ to write our main method, which will take two command line arguments and then\
    \ call our choose_num function to see if our two numbers are in the range.\n<code>",
  "  \n  # Write your logic here", "  if x == y\n    return -1\n  biggest = y\n  while\
    \ biggest * 2 <= x\n    biggest = biggest * 2\n  while biggest * 2 <= y\n    biggest\
    \ = biggest * 2\n  if biggest >= x\n    return biggest \n  else\n    return -1\n\
    end\n</cell>\n<code language=julia-0.4>\nchoose_num(7, 5)\n</cell>\n<code language=julia-0.4>\n\
    choose_num(7, 9)\n</cell>\n<code language=julia-0.4>\nchoose_num(9, 5)\n</cell>\n\
    <code language=julia-0.4>\nchoose_num(7, 8)\n</cell>\n<code language=julia-0.4>\n\
    choose_num(9, 8)\n</cell>\n<code language=julia-0.4>\nchoose_num(7, 10)\n</cell>\n\
    <code language=julia-0.4>\nchoose_num(7, 11)\n</cell>\n<code language=julia-0.4>\n\
    choose_num(7, 12)\n</cell>\n<code language=julia-0.4>\nchoose_num(7, 13)\n</cell>\n\
    <code language=julia-0.4>\nchoose_num(7, 14)\n</cell>\n<code language=julia-0.4>\n\
    choose_num(7, 15)\n</cell>\n<code language=julia-0.4>\nchoose_num(7, 16)\n</cell>\n\
    <text>\nExercise\nWrite a function that takes two positive integer numbers and\
    \ returns the sum of \nthe numbers in between them. For example, if x = 8 and\
    \ y = 15, then your function should return 10.", "    num = 1\n    while num <\
    \ x or num > y\n        num += 2\n    end\n    num\nend\n</cell>\n<cell>\nchoose_num(20,\
    \ 25)\n</cell>\n<cell>\nchoose_num(10, 20)\n</cell>\n<cell>\nchoose_num(10, 15)\n\
    </cell>\n<text>\nExercise 3 - Loops\nUsing the function defined above, write a\
    \ loop that, for each integer in the range from 1 to 100, prints the value of\
    \ choose_num(num, num + 10) on a new line. If you're confused, see an example\
    \ of how to do it in the exercise below!", "  \n  # If they entered a number greater\
    \ than zero, then return it.\n  if x > 0\n    return x\n  \n  # If they entered\
    \ a number less than zero, then return -1.\n  if x < 0\n    return -1\n  \n  #\
    \ Now we know that x is greater than 0, so we can check if y is even.\n  if y\
    \ % 2 == 0\n    return y\n  \n  # If y is not even, then return -1.\n  return\
    \ -1", "    i = x\n    j = y\n    while i <= j do\n        # i is even\n     \
    \   if (i%2==0)\n        # j is even\n            if (j%2==0) then\n         \
    \       return i\n            else\n                j-=1\n            end\n  \
    \      else\n        # i is odd\n            if (j%2==0) then\n              \
    \  j+=1\n            else\n                i-=1\n            end\n        end\n\
    \    end\n    return -1\nend\nprint(choose_num(19, 5))", "    if x > y\n     \
    \   return -1\n    \n    middle = int((x + y) / 2)\n    \n    if even?(middle)\n\
    \        return choose_num(middle, y)\n    else\n        return choose_num(x,\
    \ middle)\n    end\nend", "  n1 = x\n  n2 = y", "  num = 2\n  while num <= y do\n\
    \    num = num + 2\n  end \n  if num > y\n    return -1\n  else\n    return num\n\
    \  end\nend\n</code>\nThe recursive solution is similar:\n<code>", "    # your\
    \ code here\n    max = -1\n    for num in xrange(x, y+1):\n        if num % 2\
    \ == 0:\n            if num > max:\n                max = num\n        elif num\
    \ < max:\n            max = -1\n            break\n    return max", "  if x %\
    \ 2 == 0:\n    mid = x // 2\n    if y > mid:\n      return mid\n    else:\n  \
    \    if y < mid:\n        return choose_num(mid, y)\n      else:\n        return\
    \ mid\n  else:\n    mid = x // 2\n    if y < mid:\n      return choose_num(x,\
    \ mid)\n    else:\n      if y > mid:\n        return choose_num(mid, y)\n    \
    \  else:\n        return -1", "\tfor i in [x..y-1]\n\t\treturn i if nums[i].even?\
    \ else -1\n\tend\nend", "  puts \"Please enter the first number: \"\n  a = gets.to_i\n\
    \  puts \"Please enter the second number: \"\n  b = gets.to_i\n  if ((a >= 0)\
    \ && (a <= 10) && (b >= 0) && (b <= 10)) then\n    #puts \"a=\" + a.to_s + \"\
    \ and b=\" + b.to_s\n    if (a % 2 == 0 and b % 2 == 0) then\n      if (a % 2\
    \ == 0) then\n        return a\n      else\n        return b\n      end\n    else\
    \ \n      puts \"Please input a positive even number!\"\n    end\n  else\n   \
    \ puts \"Invalid input!\"\n  end\nend", "  while x <= y do\n    if x % 2 == 0\n\
    \      x = x + 1\n      next\n    else\n      x = x + 2\n      next\n    end\n\
    \  end\n  x\nend", "    even = nil\n    odd  = nil\n    if x < y\n        even\
    \ = y \n        odd  = x\n    elsif x > y\n        even = x\n        odd  = y\n\
    \    elsif x == y\n        even = x\n        odd  = y\n    end\n    even = nil\
    \ if even.zero?\n    odd = nil if odd.zero?\n    biggest = nil\n    if even.odd?\n\
    \        biggest = odd + 1\n    elsif odd.odd?\n        biggest = even + 1\n \
    \   elsif even.even?\n        biggest = even + 1\n    elsif odd.even?\n      \
    \  biggest = odd + 1\n    end\n    biggest\nend\n</code>\n<|/ a tags=ruby |>\n\
    <| a dscore=1 |>\nHere's how I got this working in Ruby:\n<code>", "  return x\
    \ if x > y\n  \n  # Find the smallest number in the range [x, y] inclusive.\n\
    \  num = x\n  while num < y\n    num = num + 2\n  end\n  \n  # Check if the number\
    \ is even.\n  if num % 2 == 0\n    return num\n  else\n    return -1\n  end\n\
    end", "  smallest_even = x - 1\n  biggest_even = x + 1\n  while smallest_even\
    \ <= biggest_even\n    if smallest_even % 2 == 0 and (biggest_even % 2 == 0 or\
    \ biggest_even % 2 == 1 and smallest_even % 2 == -1)\n      return smallest_even\n\
    \    smallest_even += 1\n    biggest_even += 2\n  return -1\nend", "    \n   \
    \ i = x if x <= y else y\n    \n    while i > 0\n        if x % i == 0\n     \
    \       return i\n        i -= 1", "  \n  return -1", "  if x > y and y % 2 ==\
    \ 1:\n    return y\n  if x < y and x % 2 == 1:\n    return y\n  if x == y:\n \
    \   return -1\n  if x % 2 == 0 and y % 2 == 0:\n    return x\n  if x % 2 == 1\
    \ and y % 2 == 1:\n    return y\n  if x > y:\n    return choose_num(x - y, y)\n\
    \  return choose_num(x, y - 1)\n</cell>\n<text>\nProblem 3\nWrite a program that\
    \ takes an integer argument and prints its factorial in a tabular format.", " \
    \ largest_even = nil\n  largest_even = x if y > x\n  largest_even = y if largest_even.nil?\
    \ || y > largest_even\n  largest_even = x\n  largest_even = y if largest_even.nil?\
    \ || y > largest_even\n  largest_even\nend", '  max_number = nil', "  number =\
    \ -1\n  while x > 0 and y > 0\n    number, x, y = y, x - y, x + y\n  end\n  number\n\
    end\n</cell>\n<cell>\nchoose_num(100,200)\n</cell>\n<cell>\nchoose_num(100,1)\n\
    </cell>\n<cell>\nchoose_num(100,5)\n</cell>\n<text>\n\u041A\u0430\u043A \u0432\
    \u0438\u0434\u043D\u043E, \u0432 \u043F\u0435\u0440\u0432\u043E\u0439 \u0441\u0442\
    \u0440\u043E\u043A\u0435 \u043C\u044B \u0438\u0441\u043F\u043E\u043B\u044C\u0437\
    \u0443\u0435\u043C \u0444\u0443\u043D\u043A\u0446\u0438\u044E choose_num, \u043A\
    \u043E\u0442\u043E\u0440\u0430\u044F \u0432\u043E\u0437\u0432\u0440\u0430\u0449\
    \u0430\u0435\u0442 \u0447\u0438\u0441\u043B\u043E x, \u0447\u0442\u043E\u0431\u044B\
    \ \u043D\u0430\u0439\u0442\u0438 \u043F\u0440\u0430\u0432\u0438\u043B\u044C\u043D\
    \u043E\u0435\n\u0447\u0438\u0441\u043B\u043E \u0432 \u0434\u0438\u0430\u043F\u0430\
    \u0437\u043E\u043D\u0435 [x, y].", "  x = x.to_i\n  y = y.to_i\n  return x if\
    \ x >= y || y <= x || (y == x && x % 2 == 0) || y == x + 1 || (y == x - 1 && x\
    \ % 2 == 1) ? x : -1\nend\n</code>\n<|/ a |>\n<| c |>\nThis would not be a bad\
    \ answer if it would also include some text explaining what the code does. And\
    \ it should also be commented so that other people who don't have the time (or\
    \ are very bad at reading comments) can understand the code without having to\
    \ read a description and go through the effort of understanding it.\n<|/ c |>\n\
    <| c |>\nThis is a very good answer but unfortunately it doesn't handle a situation\
    \ where one of the two values is negative which is not what the question asked\
    \ for. I believe a better implementation would be `x = x.to_i` and then `x>0 ?\
    \ (x-1).abs > (y-x).abs ? x : (y-1).abs : -1` but even that doesn't seem too elegant.\n\
    <|/ c |>\n<| c |>\nthis doesn't handle the negative case either way around because\
    \ -1 is greater than x, so -1 is greater than any number in the range.\n<|/ c\
    \ |>\n<| c |>\nThe question asks for a solution that handles negative numbers\
    \ correctly. Your solution assumes that -1 is greater than all the numbers in\
    \ the range. This isn't what the question asked for. It should also handle negative\
    \ values correctly, because -1 is greater than any other value in the range.\n\
    <|/ c |>\n<| c |>\nThis code handles negative numbers correctly (for positive\
    \ x and y) by comparing `y-x` instead of `x-y`. And if both `x` and `y` are negative,\
    \ `y-x` will be negative and so will be returned. No need to complicate the code\
    \ with checks for negative numbers because they already handled. For a range of\
    \ [x, y], `x-y` must be less than or equal to `-1` and therefore `x-y` will be\
    \ less than or equal to `-1` (but `x-y` is not less than or equal to `-1` because\
    \ `y` is greater than `x`). So the code handles `x=-1, y=-2` correctly. The other\
    \ cases aren't handled correctly because `x-y` can't be less than or equal to\
    \ `-1`.\n<|/ c |>\n<| a dscore=3 |>\nThis was my solution:\n<code>", "    largest\
    \ = x if x < y else y\n    \n    while largest >= 0 and largest < x:\n       \
    \ largest += 2 if largest % 2 == 0 else 1\n    \n    return largest", "  biggest_even_number\
    \ = -1\n  \n  # Start from 1 to y, and continue to x until we find one that is\
    \ even.\n  for i in 1..y\n    if i % 2 == 0\n      biggest_even_number = i\n \
    \     break\n  end\n  \n  return biggest_even_number\nend", "  if x > y\n    #\
    \ x is larger\n    x, y = y, x\n  end\n  while x <= y\n    x += 1\n    y -= 1\n\
    \    even = (x % 2 == 0 && y % 2 == 0)\n    x += 1\n    y -= 1\n    if even\n\
    \      return x\n    end\n  end\n  return -1\nend\n</cell>\n<code language=julia-1.0>\n\
    choose_num(6, 8)\n</cell>\n<code language=julia-1.0>\nchoose_num(9, 5)\n</cell>\n\
    <code language=julia-1.0>\nchoose_num(23, 6)\n</cell>\n<code language=julia-1.0>\n\
    choose_num(21, 3)\n</cell>\n<code language=julia-1.0>\nchoose_num(7, 0)\n</cell>\n\
    <code language=julia-1.0>\nchoose_num(7, 10)\n</cell>\n<code language=julia-1.0>\n\
    choose_num(1, 1)\n</cell>\n<code language=julia-1.0>\nchoose_num(1, 2)\n</cell>\n\
    <text>\nWe have already seen the use of loops above. Julia also includes some\
    \ very powerful constructs to manipulate collections and to run arbitrary code\
    \ on them.", "  return y if x > y ? x : (x - 1) % y == 0\nend\n</cell>\n<cell>\n\
    choose_num(1, 1)\n</cell>\n<text>\nGreat! Now we can use choose_num to solve this\
    \ kata.", "   if x >= y and x <= 10\n      return x\n   else\n      return y\n\
    \   end\nend\n</cell>\n<text>\n2.2. Write a function called is_palindrome that\
    \ returns true if the given number is palindrome and false otherwise. For example,\
    \ given the number 121 the function should return true. Given number 1213 the\
    \ function should return false. Note that the number will contain no leading zero.",
  "  biggest_even = -1\n  smallest_odd = x \n  while smallest_odd <= y\n    biggest_even\
    \ = biggest_even * (smallest_odd % 2) + smallest_odd\n    smallest_odd = smallest_odd\
    \ + 1\n  return biggest_even\nend\nprint(choose_num(25, 35))\nprint(choose_num(7,\
    \ 100))\nprint(choose_num(1, 50))\n</code>\n<|/ a tags=ruby,integer,algorithm,java,function\
    \ |>\n<| c |>\nThis is definitely the best solution by far. It has the added benefit\
    \ of being \"instructive\" for someone who doesn't know how to implement it.\n\
    <|/ c |>\n<| a |>\n<code>", "  numbers = [x, y]\n  while numbers.count < 2\n \
    \   numbers += [numbers[-1] + numbers[-1], numbers[-1] + numbers[-1]]\n  end\n\
    \  numbers[numbers.count - 2].abs\nend", "  num = nil\n  if x < y\n    if x >\
    \ 1\n      x = 1\n    end\n    x = x + 1\n  end\n  if x > y\n    if y > 1\n  \
    \    y = 1\n    end\n    y = y + 1\n  end\n  while y < x\n    if (x % 2) == 0\n\
    \      if ((y % 2) == 0)\n        num = y\n        break\n      end\n      y =\
    \ y + 1\n    else\n      if ((y % 2) == 0)\n        num = y\n        break\n \
    \     end\n      x = x + 1\n    end\n  end\n  return num\nend\n</cell>\n<cell>\n\
    choose_num(10,5)\n</cell>\n<text>\nWrite a function that takes in a positive number\
    \ x as an argument and returns the product of all positive integers less than\
    \ or equal to x.\nFor example, the product of 4 would be $16$.", "    # implement\
    \ here\nend\n</cell>\n<cell>\nchoose_num(3, 4)\n</cell>\n<cell>\nchoose_num(4,5)\n\
    </cell>\n<cell>\nchoose_num(5,8)\n</cell>\n<text>\nTask: find maximum, minimum\
    \ and sum from a list using functions. You should use choose_num() function from\
    \ above", "    biggest = -1\n    \n    if x > y\n        biggest = x\n       \
    \ x, y = y, x\n        \n    loop do\n        biggest = x if (x % 2) == 0\n  \
    \      x, y = y, x - biggest\n    end\n    \n    biggest\nend\n</cell>\n<code\
    \ language=julia-1.0>", "  \n  case x < y\n  when true\n    first = x\n    second\
    \ = y\n  when false\n    first = y\n    second = x\n  end\n  \n  case x < second\n\
    \  when true\n    first = first * 2\n  when false\n    first = -1\n  end\n  \n\
    \  case y < first\n  when true\n    second = second * 2\n  when false\n    second\
    \ = -1\n  end\n  \n  case first + second\n  when 0\n    first = first * 2\n  \
    \  second = second * 2\n  when 1\n    return first\n  when -1\n    return second\n\
    \  end\nend", "  biggest_even = 0\n  for i in (x .. y)\n    if i & 1 == 0\n  \
    \    biggest_even = i\n    end\n  end\n  return biggest_even\nend", "  x = x.to_i\n\
    \  y = y.to_i\n  if x > y then return -1 # x is smaller than y\n  if x == y then\
    \ return x # x and y are the same\n  x = x % y\n  while x > 0 do\n    if x % 2\
    \ == 0 then return x\n    x = x / 2 \n  end\n  return -1\nend", "  x = x.to_i\n\
    \  y = y.to_i\n  \n  if x < y\n    return -1\n  elsif x == y\n    return x\n \
    \ end\n  \n  n = x * y % 2 # this returns 1 if x and y are even numbers and 0\
    \ if \n                # x and y are odd, or -1 if x and y are integers, \n  \
    \              # or nil if neither of them are integers.\n  \n  if n > 0\n   \
    \ x\n  else\n    y\n  end\nend\n</code>\n<|/ a dscore=3 |>\n<| c |>\nThis is a\
    \ better solution. Thank you\n<|/ c |>\n<| c |>\nIt is a nice solution, though\
    \ it has a subtle bug if x > y. \nTry choose_num(10,2)", "    \n    return -1",
  "    if x > y and x < y\n        choose_num(x + 1, y)\n    else\n        x\n   \
    \ end\nend", "  even = 0\n  odd = 1\n  while even < x and odd < y\n    even =\
    \ even + odd\n    odd = 2 * odd\n  end\n  return even > x and even > y ? even\
    \ : -1\nend", "  # Your code here\nend\n</cell>\n<cell>\nchoose_num(5, 10)\n</cell>\n\
    <cell>", "  puts \"enter a number\"\n  a = gets.chomp()\n  b = gets.chomp()\n\
    \  if a > b\n    return choose_num(y,x)\n  elsif a < b\n    return choose_num(x,y)\n\
    \  else\n    return a\n  end\nend\nputs \"Choose x and y \"\nputs \"enter x \"\
    \nx  = choose_num(0,100)\nputs \"enter y \"\ny  = choose_num(0,100)", "  return\
    \ y if x > y ? -1 : (x - 1) if x > x ? x : nil\nend\n</cell>\n<cell>\nchoose_num(100,\
    \ 100)\n</cell>\n<text>\nThe function below takes as an argument an array of numbers\
    \ and returns the sum of \nall its elements. If the array contains no numbers,\
    \ then it should return -1.", "  if x < 0 || y <= 0\n    return -1\n  else\n \
    \   max = -1\n    min = y\n    while min >= x\n      max = min\n      min = min\
    \ - y\n    end\n    max\n  end\nend", "  while x < y do\n    num = x + y + 1\n\
    \    return num if num.to_s.to_i % 2 == 0 end\n    return -1\n  end\nend", " \
    \ evens_count = 0\n  while x > 0\n    if x % 2 == 0 then\n      evens_count +=\
    \ 1\n      x /= 2\n    end\n  end\n  \n  evens_count += 1 if y > 0\n  \n  return\
    \ -1 if evens_count < 2\n  \n  return x if y == 0\n  \n  evens_count = 0\n  while\
    \ y > 0\n    if y % 2 == 0 then\n      evens_count += 1\n      y /= 2\n    end\n\
    \  end\n  \n  return -1 if evens_count < 2\n  \n  return y\nend\n</cell>\n<code\
    \ language=julia-1.5>\nchoose_num(36, 5)\n</cell>\n<code language=julia-1.5>\n\
    choose_num(24, 8)\n</cell>\n<text>\n1.5 Inverted Functions", "\tfor i in (1..x)\n\
    \t\tnum = i\n\t\tbreak\n\tfor i in (1..y)\n\t\tnum = num + i\n\t\tbreak\n\treturn\
    \ num\nend", "  number = -1\n  \n  if y <= x <= y\n    number = x", "  z = x if\
    \ y == x else y\n  return -1  if ((z % 2) != 0 and ((z % 3) != 0 or (z % 5) !=\
    \ 0)) \n  else z / 2\nend\n</cell>\n<code language=julia-1.6>\nchoose_num(4,3)\n\
    </cell>\n<code language=julia-1.6>\nchoose_num(3,2)\n</cell>\n<code language=julia-1.6>\n\
    choose_num(6,10)\n</cell>\n<code language=julia-1.6>\nchoose_num(100,200)\n</cell>\n\
    <code language=julia-1.6>\nchoose_num(10,8)\n</cell>\n<text>\nProblem 4.3 : Find\
    \ LCM of two integers \nYou are given two integers x and y, and you need to find\
    \ the least common multiple (LCM) of them that leaves a positive integer in the\
    \ range [x, y], inclusive. If the LCM is impossible to find, return -1. For example,\
    \ to find LCM of two numbers 3 and 7, the LCM would be 7.", "  return x if x >\
    \ y || y < x ? x : y\nend\nputs choose_num(4, 8)", "  if x > y\n    x,y = y,x\n\
    \  end\n  \n  max_val = -1\n  \n  (0..x-1).each do |i|\n    if max_val < y\n \
    \     max_val = y\n    end\n    if max_val < x\n      max_val = x\n    end\n \
    \   \n    return i\n  end\n  \n  return -1\nend", "  if x > y\n    min = x\n \
    \   max = y\n  else \n    min = y\n    max = x\n  end\n  \n  result = nil", " \
    \   num = -1\n    while num < x and num < y\n        num = num + 1 if num % 2\
    \ == 0 else num - 1\n    end\n    num\nend\n</cell>\n<cell>\nchoose_num(9, 11)\n\
    </cell>\n<text>\nWe can also write this in two lines with ternary operators:",
  "  return -1 if x <= y || x == y || x % 2 == 0 && y % 2 == 0\n  return x if x <\
    \ y\n  return y\nend", "    evens = nil\n    odds = nil\n    \n    while x !=\
    \ y\n        evens = x % 2 == 0\n        odds = y % 2 == 1\n        \n       \
    \ if evens and odds\n            x -= 1\n            y -= 1\n        elsif evens\n\
    \            x -= 1\n        elsif odds\n            y -= 1\n        end\n   \
    \     \n        if evens == false and odds == false\n            evens = y !=\
    \ 0\n            odds = x != 0\n        end\n    end\n    \n    return x + y\n\
    end\n</cell>\n<code language=julia-1.0>\nchoose_num(3, 4)\n</cell>\n<code language=julia-1.0>\n\
    choose_num(2, 4)\n</cell>\n<code language=julia-1.0>\nchoose_num(1, 2)\n</cell>\n\
    <code language=julia-1.0>\nchoose_num(9, 10)\n</cell>\n<code language=julia-1.0>\n\
    choose_num(11, 10)\n</cell>\n<code language=julia-1.0>\nchoose_num(7, 8)\n</cell>\n\
    <code language=julia-1.0>\nchoose_num(9, 10)\n</cell>\n<code language=julia-1.0>\n\
    choose_num(11, 10)\n</cell>\n<code language=julia-1.0>\nchoose_num(7, 8)\n</cell>\n\
    <code language=julia-1.0>\nchoose_num(13, 15)\n</cell>\n<code language=julia-1.0>\n\
    choose_num(13, 12)\n</cell>\n<code language=julia-1.0>\nchoose_num(17, 20)\n</cell>\n\
    <code language=julia-1.0>\nchoose_num(15, 20)\n</cell>\n<code language=julia-1.0>\n\
    choose_num(15, 10)\n</cell>\n<code language=julia-1.0>\nchoose_num(15, 15)\n</cell>\n\
    <code language=julia-1.0>\nchoose_num(13, 15)\n</cell>\n<code language=julia-1.0>\n\
    choose_num(13, 12)\n</cell>\n<code language=julia-1.0>\nchoose_num(17, 20)\n</cell>\n\
    <code language=julia-1.0>\nchoose_num(15, 20)\n</cell>\n<code language=julia-1.0>\n\
    choose_num(15, 10)\n</cell>\n<code language=julia-1.0>\nchoose_num(15, 15)\n</cell>\n\
    <code language=julia-1.0>\nchoose_num(15, 15)\n</cell>\n<code language=julia-1.0>\n\
    choose_num(13, 15)\n</cell>\n<code language=julia-1.0>\nchoose_num(13, ", "  ((num1\
    \ > x) and (num2 > y)) or return -1\n  return num1 if num1.odd? else num2\nend",
  "  if((x<=0) and (y<=0)) return -1\n  a = (x+y)/2\n  b=(x-y)/2\n  c=(x*y)\n  return\
    \ a\nend", "    \n    \n    if x > y then\n        x -= 1\n        y += 1\n  \
    \  elsif x < y then\n        y -= 1\n        x+=1\n    end ", "    numbers = [x\
    \ | x <- [2..y], x % 2 == 0, x /= 2]\n    return if numbers.length == 0\n    numbers.max\n\
    end", "  m = 1\n  \n  # Iterate from m to x and check whether x is a power of\
    \ m.\n  # This way we could avoid using while loop\n  while x != 1 do\n    m =\
    \ (m*2+1)/2\n    x = x % m\n  end\n  return x\nend\n</cell>\n<cell>\nchoose_num(15,\
    \ 25)\n</cell>\n<cell>\nchoose_num(29, 27)\n</cell>\n<cell>\nchoose_num(15, 17)\n\
    </cell>\n<cell>\nchoose_num(100, 500)\n</cell>\n<text>\nThe while loop is one\
    \ of the most frequently used control structures in Ruby. The while loop iterates\
    \ until a certain condition is met. Once the condition is met, the loop breaks,\
    \ and the condition is checked. If it is false, the loop continues until the condition\
    \ is met again.", "    \n    if x > y\n        return -1\n    \n    num1 = x %\
    \ y\n    num2 = y % x\n    \n    if num2 < num1\n        return -1\n    \n   \
    \ return num1 if num1 > 0 else num2", " \n    if x>y \n        a,b=y,x\n    else\n\
    \        a,b=x,y\n    end\n    \n    odd=0\n    even=1\n    for i in (a..b)\n\
    \        if i%2==0\n            even=even*i\n        else\n            odd=odd*i\n\
    \        end\n    end\n    \n    if even>odd\n        return even\n    else\n\
    \        return odd\n    end\nend", "    num = -1 \n    if x > y\n        num\
    \ = x\n    else \n        num = y\n    while true\n        if num == x\n     \
    \       return y\n        elif num == y\n            return x\n        num = num\
    \ + 2\n    end\nend\n</code>\n<|/ q |>\n<| a |>\nIn Ruby, you can use the #min\
    \ and #max methods:\n<code>", "  raise NotImplementedError\nend", "  return -1\n\
    end", "    return -1\nend", "  \n  while x < y do \n    x, y = y, x \n    puts\
    \ x\n  end\n  return -1 if x == y\n  puts y \n  \n  \nend", "  if x > y\n    return\
    \ choose_num(x - 1, y)\n  end\n  if x == y\n    return -1\n  end\n  if x % 2 ==\
    \ 0\n    if y % 2 == 0\n      return x + (y / 2)\n    end\n    num = y\n  else\n\
    \    num = y\n  end\n  num = num - 1\n  return choose_num(x + 1, num)\nend\nchoose_num(10,\
    \ 15)", "    largest_num = -1\n    smallest_num = -1\n    \n    for i in xrange(x,\
    \ y):\n        smallest_num  = i\n        if ((i%2) != 0):\n            largest_num\
    \ = i\n        \n    return largest_num", "  numbers = [x,y]\n  numbers.sort!\n\
    \  \n  if x > y\n    x, y = y, x\n  \n  while numbers[0] <= numbers[1]\n    numbers[2]\
    \ -= 1\n    if numbers[2] == 0\n      return numbers[0]\n    end\n  end\n  \n\
    \  return -1\nend\n</cell>\n<code language=julia-1.0>\nchoose_num(7,9)\n</cell>\n\
    <code language=julia-1.0>\nchoose_num(7,9)\n</cell>\n<code language=julia-1.0>\n\
    choose_num(5,9)\n</cell>\n<code language=julia-1.0>\nchoose_num(5,9)\n</cell>\n\
    <code language=julia-1.0>\nchoose_num(5,7)\n</cell>\n<code language=julia-1.0>\n\
    choose_num(5,7)\n</cell>\n<code language=julia-1.0>\nchoose_num(5,7)\n</cell>\n\
    <text>\n6. Write a function that calculates the sum of the numbers in a given\
    \ list. Your function should work with lists of numbers of any length.", "  if\
    \ x != 0 and y != 0\n    if x % 2 == 0 and y % 2 == 0\n      x = 0\n      y =\
    \ 0\n      n = x // 2 + y // 2\n    else\n      x = 0\n      y = 1\n      n =\
    \ x // 2 + y // 2\n    end = choose_num(x, y)\n  end\n  return n\nend", "  p =\
    \  find_num_pos(x, y)\n  q = find_num_neg(x, y)\n  r = find_num_odd(x, y)\n  m\
    \ = find_num_even(x, y)", "  x_even = (x - y % 2 == 0)\n  y_even = (y - x % 2\
    \ == 0)\n  x_odd = (x - y % 2 != 0)\n  y_odd = (y - x % 2 != 0)\n  if x_even &&\
    \ y_even && x_odd && y_odd\n    puts \"(#{x}, #{y})\"\n  elsif x_even && y_even\n\
    \    puts \"(#{x}, #{y})\"\n  elsif y_even && x_odd\n    puts \"(#{x}, #{y})\"\
    \n  elsif x_odd && y_odd\n    puts \"(#{x}, #{y})\"\n  else\n    puts \"-1\"\n\
    \  end\nend", "    if x <= 0 or y <= 0\n        return -1\n    while x <= y\n\
    \        if x % 2 == 0\n            return x\n        x += 1\n    return y\n</code>\n\
    <|/ a dscore=2 tags=python,algorithm |>\n<| a tags=python,algorithm |>\nI find\
    \ this solution easier with a list comprehension\n<code>", "  if x % 2 == 0 and\
    \ y % 2 == 0 and x != y:\n    even = x if x % 2 == 0 else y\n    odd = x if x\
    \ % 2 == 1 else y\n    return max(even, odd)\n  return -1", "    biggest_num =\
    \ -1\n    \n    for i in range(x, y+1):\n        num = 2*i\n        \n       \
    \ if num % 2 == 0 and num > biggest_num:\n            biggest_num = num\n    \
    \    elif num % 2 != 0 and biggest_num == -1:\n            return -1\n       \
    \     \n    return biggest_num", "    evens = []\n    odds = []\n    biggest =\
    \ -1", "  # Your code here\nend", "  return -1 if (x > y); num = x if (x == y);\
    \ return num if num % 2 == 0; return num; end\nend", "  even_num = [x for x in\
    \ range(a, b+1) if x % 2 == 0]\n  even_num.sort, x = x.abs, y\n  return even_num[0]\
    \ if even_num.size >= 2 && (even_num[0] > x) && \n    (even_num[1] < y) ? even_num[0]\
    \ : -1\nend", "  puts \"enter x and y\"\n  xy = gets.chomp\n  xy.to_i\n  yy =\
    \ gets.chomp\n  yy.to_i\n  if x < y && x > 0\n    puts \"x is smaller than y\"\
    \n    if x > y\n      puts \"x is bigger than y\"\n      puts \"please enter a\
    \ positive number for y\"\n      choose_num(x, y)\n    elsif x == y\n      puts\
    \ \"x is equal to y\"\n      choose_num(x, y)\n    end\n  elsif y < x && y > 0\n\
    \    puts \"y is smaller than x\"\n    if y > x\n      puts \"y is bigger than\
    \ x\"\n      puts \"please enter a positive number for x\"\n      choose_num(x,\
    \ y)\n    elsif y == x\n      puts \"y is equal to x\"\n      choose_num(x, y)\n\
    \    end\n  elsif x > 0 && y > 0\n    puts \"x is larger than y\"\n    if x <\
    \ y\n      puts \"x is smaller than y\"\n      choose_num(x, y)\n    elsif x ==\
    \ y\n      puts \"x is equal to y\"\n      choose_num(x, y)\n    end\n  elsif\
    \ x < 0 && y > 0\n    puts \"y is smaller than x\"\n    if y < x\n      puts \"\
    y is bigger than x\"\n      choose_num(x, y)\n    elsif y == x\n      puts \"\
    y is equal to x\"\n      choose_num(x, y)\n    end\n  elsif x > 0 && y < 0\n \
    \   puts \"x is larger than y\"\n    if x < y\n      puts \"x is smaller than\
    \ y\"\n      choose_num(x, y)\n    elsif x == y\n      puts \"x is equal to y\"\
    \n      choose_num(x, y)\n    end\n  elsif x < 0 && y > 0\n    puts \"y is smaller\
    \ than x\"\n    if y < x\n      puts \"y is bigger than x\"\n      choose_num(x,\
    \ y)\n    elsif y == x\n      puts \"y is equal to x\"\n      choose_num(x, y)\n\
    \    end\n  elsif x < 0 && y < 0\n    puts \"x is smaller than y\"\n    if x <\
    \ y\n      puts \"x is smaller than y\"\n      choose_num(x, y)\n    elsif x ==\
    \ y\n      puts \"x is equal to y\"\n      choose_num(x, y)\n    end\n  elsif\
    \ x > 0 && y < 0\n    puts \"y is smaller than x\"\n    if x < y\n      puts \"\
    x is smaller than y\"\n      choose_num(x, y)\n    elsif ", "    puts \"x is #{x}\"\
    \n    puts \"y is #{y}\"\n    return -1 if x >= y\n    return 1 if x <= y\n  \
    \  return x if y % 2 == 0\n    return x + 1 if (x + 1) % 2 == 0\n    return y\
    \ + 1 if (y + 1) % 2 == 0\n    puts \"Error, not able to choose a number in the\
    \ range\"\nend", "  if x > y\n    return choose_num(y, x)\n  elsif x < y\n   \
    \ return choose_num(x, y - 1)\n  elsif x == y\n    return -1\n  elsif x % 2 ==\
    \ 0\n    choose_num(x / 2, y)\n  else\n    choose_num(x / 2 + y, x / 2)\n  end\n\
    end\n</code>\n<|/ a tags=ruby,algorithm dscore=1 |>\n<| c |>\nI believe this fails\
    \ for `choose_num(10,5)`, which returns `5`.  It should return `10`.  (This is\
    \ not my downvote.)\n<|/ c |>\n<| c |>\nYeah, I didn't realize that.  Edited to\
    \ fix it.\n<|/ c |>\n<| c |>\nThanks. I think the reason for my downvote was because\
    \ I was assuming that it would return `10`, but I guess it could just be because\
    \ of the example you pointed out.\n<|/ c |>\n<| c |>\nI don't understand: why\
    \ is this better than my answer?\n<|/ c |>\n<| c |>\nIt's O(log n), but it's more\
    \ efficient.  It's also more general than the accepted answer.\n<|/ c |>\n<| a\
    \ dscore=1 |>\n<code>", "    if x < 0 or x > y or y < 0\n        return -1\n \
    \   \n    \n    if x == 0 and y > 0\n        return x\n    \n    if y == 0 and\
    \ x > 0\n        return y\n    \n    \n    if x == 0 and y == 0\n        return\
    \ -1\n    \n    \n    # Initialize \"even\" variable as a list of booleans.\n\
    \    even = []\n    \n    # Fill in the \"even\" list. Each number will be true\
    \ if it is even,\n    # and false if it is odd.\n    for i in range(x, y)\n  \
    \      even.append(True)\n    \n    # Initialize \"odd\" variable as a list of\
    \ booleans.\n    odd = []\n    \n    # Fill in the \"odd\" list. Each number will\
    \ be true if it is odd,\n    # and false if it is even.\n    for i in range(y,\
    \ x)\n        odd.append(True)\n    \n    \n    # Fill in the \"answer\" variable\
    \ with the biggest even number in the \n    # range.\n    answer = 0\n    \n \
    \   # Search for numbers in \"even\" that are true and store them in the\n   \
    \ # \"answer\" variable.\n    for i in range(len(even)):\n        if even[i]\n\
    \            answer = max(answer, i)\n    \n    \n    # Search for numbers in\
    \ \"odd\" that are true and store them in the\n    # \"answer\" variable.\n  \
    \  for i in range(len(odd)):\n        if odd[i]\n            answer = max(answer,\
    \ i)\n    \n    \n    # Return the \"answer\" variable.\n    return answer", " \
    \   \n    if x < 0 or y < 0\n        return -1\n    \n    i = x \n    while i\
    \ <= y do\n        if even?(i)\n            return i\n        end\n        i +=\
    \ 1\n    end\n    return -1\nend\n</cell>\n<code language=julia-0.5>", "  \n \
    \ even = 0\n  odd = 0\n  \n  while true\n    \n    even = x + y\n    odd = x %\
    \ y\n    \n    if even < x and even < y \n      return even\n    \n    elsif odd\
    \ > y and odd > x\n      return odd\n    \n    elsif even > x and even > y\n \
    \     return even\n    \n    elsif odd > x and odd > y\n      return odd\n   \
    \ \n    elsif even < y and odd > y\n      return even\n    \n    elsif even <\
    \ x and even < y\n      return even\n    \n    elsif odd > x and odd > y\n   \
    \   return even\n    end\n    \n    x += 1\n    y += 1\n  end\nend\n</cell>\n\
    <code language=julia-1.0>\nchoose_num(4,2)\n</cell>\n<code language=julia-1.0>\n\
    choose_num(11,5)\n</cell>\n<code language=julia-1.0>\nchoose_num(4,5)\n</cell>\n\
    <text>\nDifficulty: Very Hard", "  n = nil\n  until n < x and n < y\n    n +=\
    \ 1\n  end\n  return n\nend", "    even = 0\n    odd = 0\n    even = x / 2\n \
    \   odd = x % 2\n    \n    while even < y and odd < y\n        if even == even\n\
    \            even += y\n            odd += y\n            even += x\n        \
    \    odd += x\n        elsif even == odd\n            even += y\n            odd\
    \ += y\n        elsif odd == even\n            even += y\n            odd += y\n\
    \            odd += x\n            even += x\n        end\n    end\n    return\
    \ even\nend", "  result = nil\n  for x in (2..y)\n    for y in (2..x)\n      result\
    \ = x if x % y == 0\n    end\n  end\n  result\nend\n</code>\n<|/ a tags=ruby,arrays,ruby-on-rails,ruby-on-rails-5\
    \ |>\n<| a tags=ruby,arrays,ruby-on-rails,ruby-on-rails-5 |>\n<code>", "    \n\
    \    odd_number = 1\n    even_number = 1\n    \n    for d in range(x, y)\n   \
    \     if d % 2\n            even_number += 1\n            \n        if d != 0\n\
    \            odd_number += 1\n    \n    return even_number if even_number > odd_number\
    \ else -1", "    if x > y\n        return -1\n    return choose_num(x % y, y)\
    \ if y > x else choose_num(y, x % y)\nend\n</cell>\n<code language=julia-0.6>\n\
    choose_num(3,5)\n</cell>\n<code language=julia-0.6>\nchoose_num(5,5)\n</cell>\n\
    <code language=julia-0.6>\nchoose_num(10,10)\n</cell>\n<text>\nCongratulations!\
    \ You just finished the challenge!", "    \n    even_sum = sum_evens(x,y)\n  \
    \  \n    if even_sum < 0\n        return -1\n    \n    even_number = 1\n    \n\
    \    while even_sum >= even_number\n        even_sum -= even_number\n        \n\
    \        even_number += 1\n        \n    return even_number\n    \nprint(choose_num(10,40))\n\
    </cell>\n<text>\nA list comprehension allows us to create lists in a single line.\
    \ These lists contain an expression followed by a for clause, followed by an optional\
    \ else clause, and a final for clause:", "  while x <= y do\n    if num % 2 ==\
    \ 0 then\n      return num\n    num = num + 1\n  end\n  if y >= x then\n    return\
    \ -1\n  else\n    return -2\n  end\nend", "  if x > y\n    return -1\n  else\n\
    \    return x if x%2 == 0 and x%3 == 0 and x%5 == 0 else y\n  end\nend", "  if\
    \ x > y \n    return choose_num(y, x)\n  \n  even = 0\n  odd = 0\n  for i in 0...x\n\
    \    if i % 2 == 0\n      even = even + i\n    elsif i % 2 != 0\n      odd = odd\
    \ + i", "  # Fill in your code here.\n  if x > y then\n    return -1\n  else\n\
    \    big = 2 # Assume big number is even\n    while big < x and big * 2 < y do\n\
    \      big = big * 2\n    end\n    return big\n  end\nend", "    i = -1\n    \n\
    \    while i != 0 and x != y:\n        if (x % 2 == 0 and y % 2 == 0) or (x %\
    \ 2 != 0 and y % 2 != 0):\n            i += 1\n        elif x % 2 == 0 and y %\
    \ 2 != 0:\n            x = x + y\n        elif x % 2 != 0 and y % 2 == 0:\n  \
    \          y = y + x\n    return x\n</cell>\n<cell>\nchoose_num(6, 9)\n</cell>\n\
    <cell>\nchoose_num(12, 12)\n</cell>\n<cell>\nchoose_num(12, 6)\n</cell>\n<cell>\n\
    choose_num(6, 0)\n</cell>\n<cell>\nchoose_num(0, 6)\n</cell>\n<cell>\nchoose_num(6,\
    \ 4)\n</cell>\n<cell>\nchoose_num(0, 4)\n</cell>\n<text>\nTask 6: Check if two\
    \ numbers are equal", "  evens = 0\n  odds = 0\n  \n  evens = x if x % 2 == 0\
    \ else x + 1\n  odds = y if y % 2 == 0 else y + 1\n  \n  if evens > odds:\n  \
    \  return evens\n  else:\n    return odds", "    i = -1\n    while x<=y:\n   \
    \     if x % 2 != 0 and y % 2 != 0:\n            return x\n        x = x + 1\n\
    \        y = y - 1\n    return i\n</cell>\n<text>\nLet's test the function with\
    \ the input value 10 and 12.", "    z = y \n    while z < x\n        z = z + 2\n\
    \    end\n    return z\nend", "  x_prime = find_prime(x)\n  y_prime = find_prime(y)\n\
    \  \n  x_even = x % x_prime\n  x_odd = 1 - x_even", "    if x == y\n        puts\
    \ \"Invalid range\"\n        return\n    if x > y\n        puts \"Invalid range\"\
    \n        return\n    if x > y && x > y % 2 == 0\n        return y if y == x /\
    \ 2 || y == 2 * x + 1\n    elsif x > y % 2 == 0 && x < y % 2\n        return y\n\
    \    elsif x == y && x > 0 && x < 100\n        return -1\n    end\n    \nend\n\
    </code>\n<|/ a tags=ruby dscore=0 |>\n<| c |>\nIt would be helpful if you could\
    \ explain what your code does, or how it solves the problem.\n<|/ c |>\n<| a dscore=0\
    \ |>\nThe method below should do what you want:\n<code>", "    puts \"x: #{x},\
    \ y: #{y}\"\nend\n</cell>\n<cell>", "    if (x > y) then\n        print -1\n \
    \       return\n    end\n    \n    local num = nil\n    while num == nil do\n\
    \        num = math.floor((math.floor(x / 2) + math.floor(y / 2)) / 2)\n    end\n\
    \    \n    return num\nend", "    num = -1\n    i = x\n    j = y\n    k = x",
  "    if x >= y and x < y # make sure x is lesser than y\n        return x if x %\
    \ 2 == 0 else x // 2\n    end\n    if y >= x and x < y # make sure y is lesser\
    \ than x\n        return y if y % 2 == 0 else y // 2\n    end\n    return -1\n\
    end\n</cell>\n<code language=julia-0.4>\nchoose_num(7, 10)\n</cell>\n<code language=julia-0.4>\n\
    choose_num(-5, 10)\n</cell>\n<text>\nThe first if statement checks if the values\
    \ of x and y are both numbers, if so then it returns the number that is in the\
    \ range [x, y] inclusive, otherwise it returns -1.", '  # Write your code here.',
  "  num = -1\n  \n  while x != num and y != num do\n    \n    if x % 2 == 0 and y\
    \ % 2 == 0 then\n      num = x\n    else\n      num = y\n    end\n    \n    if\
    \ x > y then\n      x, y = y, x\n    end\n  end\n  \n  return num\nend", "   \
    \ biggest_even = -1\n    \n    # Search for all integers in [x, y] inclusive that\
    \ are divisible by 2\n    for i in range (x , y + 1):\n        if i % 2 == 0:\n\
    \            if biggest_even < i:\n                biggest_even = i\n    return\
    \ biggest_even", '  return ((x % 2 == 0) and (y % 2 == 0)) and ((x + (2 * y) -
    1) - (2 * x)) or -1', "  if x > y \n    return x if x < y\n  elsif x == y \n \
    \   return x\n  else\n    return y\n  end\nend", "  x += 1\n  y -= 1\n  while\
    \ x <= y do\n    # use \"if\" statements to determine if x is an even number\n\
    \    if x % 2 != 0\n      return x\n    x += 1\n  end\n  if x > y\n    return\
    \ -1\n  end\nend\n</code>\nThis is what it looks like on paper if you run the\
    \ code:\n<code>\nchoose_num(1, 2)", "  if x % 2 == 0 and y % 2 == 0\n    return\
    \ x / 2 * y \n  else\n    return -1\n  end\nend\n</cell>\n<code language=julia-1.0>\n\
    choose_num(12, 6)\n</cell>\n<text>\nChallenge 4", "  puts y if y >= x\n  puts\
    \ -1 if y < x\n  if y > x\n    puts y\n  else\n    puts x\n  end\nend\n</code>\n\
    Now we can use choose_num to get the biggest number in our range.\n<code>\nchoose_num(0,\
    \ 100)\n</code>\nBut wait, there's more! We don't need two parameters to pass\
    \ this info. Instead, we can use a method called send which lets you send any\
    \ message to an object, so we can send it to our choose_num method and it will\
    \ return the biggest even number from our range.\n<code>\nchoose_num.send(0, 100)\n\
    </code>\nAnd that's it! The biggest even number in the range [0, 100] was 4.\n\
    <|/ a dscore=0 |>\n<| c |>\nThe `choose_num` method does not have a `return` statement\
    \ - and `choose_num` is not an instance method - it is the name of a function.\n\
    <|/ c |>\n<| c |>\nthanks for pointing that out! I thought I was going to edit\
    \ that in.\n<|/ c |>\n<| a |>\n<code>", "  if x == 0 and y == 0\n    return 0\n\
    \  else\n    num = (x + y) / 2\n    div = num % 2\n    if div == 0\n      num\
    \ /= 2\n      choose_num(x, num)\n    else\n      choose_num(y, num)\n  end\n\
    end\n</cell>\n<cell>\nchoose_num(5, 10)\n</cell>\n<cell>\nchoose_num(10, 5)\n\
    </cell>\n<cell>\nchoose_num(12, 3)\n</cell>\n<cell>", "    # Your code here\n\
    \    raise NotImplementedError\nend", "  evens = [x for x in (x % 2, y % 2) if\
    \ x != 0]\n  evens.shift\n  evens.unshift -1 # -1 means the function is asked\
    \ to return -1\n  evens.inject :+\nend", "  y = y + 1 if y > x else y\n  z = y\n\
    \  while z != x and z % 2 == 0\n    z = z / 2\n  end\n  return z if z > x\n  z\
    \ = 1\n  while z % 2 == 0 and z > x\n    z = z / 2\n  end\n  return z if z > x\n\
    \  z = 1\n  while z % 2 == 0 and z < y\n    z = z / 2\n  end\n  return z if z\
    \ < y\n  z = y\n  while z != x and z % 2 != 0\n    z = z / 2\n  end\n  return\
    \ z if z < y\n  z = y\n  while z % 2 != 0 and z < y\n    z = z / 2\n  end\n  return\
    \ z if z < y\n  z = 1\n  while z % 2 != 0 and z > y\n    z = z / 2\n  end\n  return\
    \ z if z > y\n  z = y\n  while z % 2 != 0 and z > y\n    z = z / 2\n  end\n  return\
    \ z if z > y\n  z = y\n  while z % 2 != 0 and z < x\n    z = z / 2\n  end\n  return\
    \ z if z < x\n  z = 1\n  while z % 2 != 0 and z > x\n    z = z / 2\n  end\n  return\
    \ z if z > x\n  z = 1\n  while z % 2 != 0 and z < y\n    z = z / 2\n  end\n  return\
    \ z if z < y\n  z = x\n  while z % 2 != 0 and z > y\n    z = z / 2\n  end\n  return\
    \ z if z > y\n  z = y\n  while z % 2 != 0 and z < x\n    z = z / 2\n  end\n  return\
    \ z if z < x\n  z = x\n  while z % 2 != 0 and z > x\n    z = z / 2\n  end\n  return\
    \ z if z > x\n  z = y\n  while z % 2 != 0 and z < y\n    z = z / 2\n  end\n  return\
    \ z if z < y\n  z = x\n  while z % 2 != 0 and z > y\n    z = z / 2\n  end\n  return\
    \ z if z > y\n  z = x\n  while z % 2 != 0 and z < x\n    z = z / 2\n  end\n  return\
    \ z if z < x\n  z = y\n  while z % 2 != 0 and z > y\n    z = z / 2\n  end\n  return\
    \ z", "  if x > y then\n    return -1\n  end\n  if x < y then\n    return -1\n\
    \  end", "  choose_num = 0\n  if x < y && x > 0 \n    choose_num = y\n    y -=\
    \ 1\n  elsif y < x && y > 0\n    choose_num = x\n    x -= 1\n  elsif x < y &&\
    \ y > 0\n    choose_num = x\n    x -= 1\n  elsif x > y && y > 0\n    choose_num\
    \ = y\n    y -= 1\n  elsif x == y\n    choose_num = x\n  end\nend\n</cell>\n<cell>\n\
    choose_num(1, 10)\n</cell>\n<cell>\nchoose_num(100, 100000)\n</cell>\n<cell>\n\
    choose_num(100, 100)\n</cell>\n<cell>\nchoose_num(100, 1)\n</cell>\n<cell>\nchoose_num(100,\
    \ 0)\n</cell>\n<cell>\nchoose_num(1, 0)\n</cell>\n<cell>\nchoose_num(0, 0)\n</cell>\n\
    <cell>\nchoose_num(-3, 0)\n</cell>\n<cell>\nchoose_num(100000, 0)\n</cell>\n<cell>\n\
    choose_num(10000, 9)\n</cell>\n<cell>\nchoose_num(10000, 10)\n</cell>\n<cell>\n\
    choose_num(10000, 13)\n</cell>\n<cell>\nchoose_num(10000, 20)\n</cell>\n<cell>\n\
    choose_num(10000, 27)\n</cell>\n<cell>\nchoose_num(10000, 30)\n</cell>\n<cell>\n\
    choose_num(10000, 39)\n</cell>\n<cell>\nchoose_num(10000, 49)\n</cell>\n<cell>\n\
    choose_num(10000, 60)\n</cell>\n<cell>\nchoose_num(10000, 69)\n</cell>\n<cell>\n\
    choose_num(10000, 80)\n</cell>\n<cell>\nchoose_num(10000, 81)\n</cell>\n<cell>\n\
    choose_num(10000, 90)\n</cell>\n<cell>\nchoose_num(10000, 99)\n</cell>\n<cell>\n\
    choose_num(10000, 101)\n</cell>\n<cell>\nchoose_num(10000, 102)\n</cell>\n<cell>\n\
    choose_num(10000, 103)", "    if x < y\n        x, y = (y, x)\n    end\n    \n\
    \    even = 1\n    \n    while even < x or even < y\n        even += 2\n    end\n\
    \    \n    if even >= x and even >= y\n        return even\n    else\n       \
    \ return -1\n    end\nend\n</cell>\n<code language=julia-1.5>\nchoose_num(10,15)\n\
    </cell>\n<code language=julia-1.5>\nchoose_num(3,15)\n</cell>\n<code language=julia-1.5>\n\
    choose_num(7,15)\n</cell>\n<code language=julia-1.5>\nchoose_num(10,10)\n</cell>\n\
    <code language=julia-1.5>\nchoose_num(10,11)\n</cell>\n<code language=julia-1.5>\n\
    choose_num(12,1)\n</cell>\n<code language=julia-1.5>\nchoose_num(-5,6)\n</cell>\n\
    <code language=julia-1.5>\nchoose_num(-5,-6)\n</cell>\n<code language=julia-1.5>\n\
    choose_num(-5,6)\n</cell>\n<code language=julia-1.5>\nchoose_num(-5,-6)\n</cell>\n\
    <code language=julia-1.5>\nchoose_num(-5,6)\n</cell>\n<code language=julia-1.5>\n\
    choose_num(-5,-6)\n</cell>\n<code language=julia-1.5>\nchoose_num(-5,6)\n</cell>\n\
    <code language=julia-1.5>\nchoose_num(-5,-6)\n</cell>\n<code language=julia-1.5>\n\
    choose_num(-5,6)\n</cell>\n<code language=julia-1.5>\nchoose_num(-5,-6)\n</cell>\n\
    <code language=julia-1.5>\nchoose_num(-5,6)\n</cell>\n<code language=julia-1.5>\n\
    choose_num(-5,-6)\n</cell>\n<code language=julia-1.5>\nchoose_num(-5,6)\n</cell>\n\
    <code language=julia-1.5>\nchoose_num(-5,-6)\n</cell>\n<code language=julia-1.5>\n\
    choose_num(-5,6)\n</cell>\n<code language=julia-1.5>\nchoose_num(-5,-6)\n</cell>\n\
    <code language=julia-1.5>\nchoose_num(-5,6)\n</cell>\n<code language=julia-1.5>\n\
    choose_num(-5,-6)\n</cell>\n<code language=julia-1.5>\nchoose_num(-5,6)\n</cell>\n\
    <code language=julia-1.5>\nchoose_num(-5,-6)\n</cell", "  even = true\n  biggest\
    \ = -1\n  while even do\n    biggest = (biggest + 1) if (biggest != 0) and (biggest\
    \ % 2 == 0)\n    even = biggest % 2 == 0\n    biggest = biggest / 2\n  end\n \
    \ return biggest if biggest >= x and biggest <= y\n  -1\nend\n  ", "  smallest\
    \ = 1\n  largest = x\n  found = -1\n  while smallest < largest\n    mid = (smallest\
    \ + largest) / 2\n    if mid % 2 == 0\n      found = mid\n      smallest = mid\
    \ + 1\n    else\n      largest = mid\n    end\n  end\n  return found\nend", " \
    \   return -1\nend", "  n = x + y\n  while n % 2 == 0\n    n = n / 2\n  end\n\
    \  n\nend\n</cell>\n<code language=julia-1.0>\nchoose_num(6, 7)\n</cell>\n<code\
    \ language=julia-1.0>\nchoose_num(8, 2)\n</cell>\n<text>\n6. Recursion\n6.1 The\
    \ Problem\nYou have a function f(x). How many times can you call f(x) for all\
    \ positive values of x?", "    return -1 if x > y else (x if x == y else choose_num(x-2,\
    \ y-2))\nend", '  return -1 if x < y || y < x || x < y && y < x', "  puts \"The\
    \ biggest even number in the range [#{x},#{y}] is #{choose_num_helper(x, y)}\"\
    \nend", "  if x < y\n    if x % 2 == 0\n      puts \"x is even\"\n    else\n \
    \     puts \"x is odd\"\n    end\n    choose_num(y, x)\n  elsif x > y\n    if\
    \ x % 2 == 0\n      puts \"y is even\"\n    else\n      puts \"y is odd\"\n  \
    \  end\n    choose_num(y, x)\n  else\n    if x % 2 == 0\n      puts \"x is even\"\
    \n    else\n      puts \"x is odd\"\n    end\n    if y % 2 == 0\n      puts \"\
    y is even\"\n    else\n      puts \"y is odd\"\n    end\n    choose_num(y, x)\n\
    \  end\nend", "  num = 0\n  while x < y do\n    num = num + 1\n    x += 2\n  end\n\
    \  if num < 2\n    return -1\n  else\n    num\n  end\nend\n</cell>\n<cell>", " \
    \ min = x if x > y else y\n  max = x if x < y else y", "    begin = y\n    end\
    \ = x\n    i = begin\n    while i < end\n        if i % 2 == 0\n            begin\
    \ = i + 1\n        end\n        if i % 2 != 0\n            i = begin\n       \
    \ end\n    end\n    return i\nend\n</cell>\n<code language=julia-1.0>\nchoose_num(4,8)\n\
    </cell>\n<code language=julia-1.0>\nchoose_num(3,2)\n</cell>\n<code language=julia-1.0>\n\
    choose_num(4,9)\n</cell>\n<code language=julia-1.0>\nchoose_num(4,3)\n</cell>\n\
    <text>\nWrite a function that takes two positive numbers x and y and returns True\
    \ if x is less than or equal to y, and False otherwise. \nFor example:\nx<=y\n\
    x>=y", "  if x <= y\n    return -1\n  y = y % x\n  while y != 0\n    y /= 2\n\
    \  end\n  while x > y\n    x = x - y\n  end\n  while x < y\n    y = y + x\n  end\n\
    \  return x\nend", "    even = 0\n    odd = 0\n    \n    # Finding even numbers\
    \ from the smaller range\n    while (odd < x - 1) do\n        even = even + 1\n\
    \    end\n    \n    # Finding odd numbers from the smaller range\n    while (even\
    \ < y - 1) do\n        odd = od + 1 \n    end\n    \n    # Returns -1 if there\
    \ is no such number\n    if odd == 0\n        return -1\n    end\n    \n    #\
    \ Returns the biggest even number\n    return even\nend", "    \n    # Write your\
    \ code here\n    if x >= 0 and y >= 0 and x > y:\n        \n        # Use a for\
    \ loop to check all odd numbers in the range\n        for i in range (x, y):\n\
    \            \n            # Use a while loop to check all even numbers in the\
    \ range\n            while (i % 2 == 0):\n                i = i / 2\n        \
    \    \n            \n            # If the number i is even, then return i\n  \
    \          if i % 2 == 0:\n                return i\n    \n    # If the range\
    \ is [a, b] where a >= 0 and b >= 0, then return -1\n    else:\n        return\
    \ -1\n</cell>\n<cell>", "  biggest = y\n  while biggest < x and biggest % 2 ==\
    \ 0\n    biggest = biggest * 3 + 1\n  end\n  \n  if biggest < x\n    biggest =\
    \ -1\n  end\n  \n  return biggest\nend\n  \nchoose_num(4,12)\n  #=> 27\n</code>\n\
    <|/ a tags=ruby,algorithm,recursion,ruby-on-rails,math dscore=2 |>\n<| c |>\n\
    Nice solution, except for it being O(logn) instead of O(n), as you said yourself.\n\
    <|/ c |>\n<| a tags=ruby,algorithm,recursion,ruby-on-rails,math dscore=0 |>\n\
    Here is a solution which does not use any math. Although it is in Ruby it could\
    \ easily be converted into any programming language. \n<code>", "  if x > (y +\
    \ 1)\n    return -1\n  elsif y > (x + 1)\n    return -1\n  elsif x == y\n    return\
    \ x\n  end", "  if x >= y or x <= 0 \n    then return -1\n  elsif x == y \n  \
    \  then return 0\n  elsif x % 2 == 0 and y % 2 == 1\n    then return choose_num(x\
    \ / 2, y)\n  elsif x % 2 == 1 and y % 2 == 0\n    then return choose_num(x / 2,\
    \ y)\n  else\n    return choose_num(x / 2, y + 1)\n  end\nend\nchoose_num(12,\
    \ 24)", "  if x > y\n    x, y = [y, x]\n  while x >= y\n    x, y = y, x-1\n  \
    \  y % 2 == 0? return y : -1\n  while x <= y\n    x, y = y, x+1 \n    x % 2 ==\
    \ 0? return x : -1\nend\n</code>\nThis is much faster than choose_num, but much\
    \ slower than the naive solution.\n<code>\nchoose_num(50000, 50000) \u21D2 -1\n\
    choose_num(50000, 50000) \u21D2 -1\nchoose_num(50000, 50000) \u21D2 50000\nchoose_num(50000,\
    \ 50000) \u21D2 50000\nchoose_num(50000, 50000) \u21D2 50000\nchoose_num(50000,\
    \ 50000) \u21D2 50000\nchoose_num(50000, 50000) \u21D2 50000\nchoose_num(50000,\
    \ 50000) \u21D2 50000\nchoose_num(50000, 50000) \u21D2 50000\nchoose_num(50000,\
    \ 50000) \u21D2 50000\nchoose_num(50000, 50000) \u21D2 50000\nchoose_num(50000,\
    \ 50000) \u21D2 50000\nchoose_num(50000, 50000) \u21D2 50000\nchoose_num(50000,\
    \ 50000) \u21D2 50000\nchoose_num(50000, 50000) \u21D2 50000\nchoose_num(50000,\
    \ 50000) \u21D2 50000\nchoose_num(50000, 50000) \u21D2 50000\nchoose_num(50000,\
    \ 50000) \u21D2 50000\nchoose_num(50000, 50000) \u21D2 50000\nchoose_num(50000,\
    \ 50000) \u21D2 50000\nchoose_num(50000, 50000) \u21D2 50000\nchoose_num(50000,\
    \ 50000) \u21D2 50000\nchoose_num(50000, 50000) \u21D2 50000\nchoose_num(50000,\
    \ 50000) \u21D2 50000\nchoose_num(50000, 50000) \u21D2 50000\nchoose_num(50000,\
    \ 50000) \u21D2 50000\nchoose_num(50000, 50000) \u21D2 50000\nchoose_num(", " \
    \   numbers = [nil]\n    numbers.each do |i|\n        if i.odd?\n            if\
    \ i.to_i == x\n                return i\n            end\n        end\n      \
    \  if i.even?\n            if i.to_i == y\n                return i\n        \
    \    end\n        end\n    end\n    return -1\nend\n</code>\n<|/ a dscore=2 |>\n\
    <| a dscore=2 |>\nAnother Ruby answer:\n<code>\n(1..10).select { |i| i.odd? &&\
    \ !i.even? }\n</code>\nor \n<code>\n(1..10).reject { |i| i.odd? && !i.even? }\n\
    </code>\n<|/ a tags=ruby |>\n<| a dscore=2 |>\n<code>", "  num1 = (1..x).find\
    \ {|i| i % 2 == 0 && i <= y }\n  if num1\n    choose_num(num1, y)\n  elsif x >\
    \ y\n    choose_num(x, y)\n  else\n    -1\n  end\nend", "  return -1 if x + (y\
    \ - 1) * (x / y) <= 0\n  ", "  if x > y\n    x = y\n  elsif x == y \n    return\
    \ x\n  else\n    lower = x\n    upper = y\n    lower = lower*lower\n    upper\
    \ = upper*upper\n    answer = -1\n    while lower < upper\n      lower *= lower\n\
    \      upper *= upper\n      if lower < upper\n        answer = lower\n      \
    \  lower = lower*lower\n        upper = upper*upper\n      end\n    end\n  end\n\
    \  return answer\nend", "  x.odd? ? x : (x > y ? y : choose_num(x, y - 1).even?\
    \ ? x : -1)\nend", "\ti = 1\n\twhile i <= x and i <= y\n\t\tif (x % 2 == 0 and\
    \ y % 2 == 0) or (x % 2 == 1 and y % 2 == 1)\n\t\t\ti += 1\n\t\telse\n\t\t\treturn\
    \ i\n\tend\n\treturn -1\nend", "  \n  # Write your code here.\n  smallest_num\
    \ = y # Initialize smallest number to the largest number.\n  largest_num = x #\
    \ Initialize largest number to the smallest number.\n  \n  while largest_num >\
    \ 1 and smallest_num > 1:\n    smaller_num = smallest_num - 1\n    greater_num\
    \ = largest_num + 1\n    if smaller_num * greater_num > largest_num:\n      smallest_num\
    \ = smaller_num\n    else:\n      largest_num = greater_num\n  return largest_num\n\
    </cell>\n<cell>", "    if x >= y\n        return -1\n    mid = (x + y)/2\n   \
    \ biggest_even = 1\n    while mid <= y\n        if isEven(mid)\n            biggest_even\
    \ = mid\n        else\n            biggest_even = y\n        end\n        mid\
    \ = (x + y)/2\n    end\n    return biggest_even\nend\n</cell>\n<code language=julia-1.0>\n\
    @time choose_num(10,12)\n</cell>\n<text>\nThe isEven function was created in the\
    \ last section. It takes a single number (n) and checks whether it is even:"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
