name: HumanEval_106_f
language: rb
prompt: "# Implement the function f that takes n as a parameter,\n# and returns a\
  \ list of size n, such that the value of the element at index i is the factorial\
  \ of i if i is even\n# or the sum of numbers from 1 to i otherwise.\n# i starts\
  \ from 1.\n# the factorial of i is the multiplication of the numbers from 1 to i\
  \ (1 * 2 * ... * i).\n# Example:\ndef f(n)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_f\n\
  \    candidate = method(:f)\n    assert_equal([1, 2, 6, 24, 15], candidate.call(5))\n\
  \    assert_equal([1, 2, 6, 24, 15, 720, 28], candidate.call(7))\n    assert_equal([1],\
  \ candidate.call(1))\n    assert_equal([1, 2, 6], candidate.call(3))\n  end\nend\n"
completions: ["  if n <= 0\n    []\n  else\n    [i * (i + 1) * (i + 2) for i in (1..n)]\n\
    \  end\nend", "    return [n] if n % 2 == 0 \\\n        else [n-1] + f(n-1)\n\
    \    ", "  factorial = 1\n  for i in 1..n\n    factorial = factorial * i\n  end\n\
    \  return factorial\nend", "    factorial = []\n    for j in range(1, n + 1):\n\
    \        if j % 2 == 0:\n            factorial.append(j * factorial[j-1])\n  \
    \      else:\n            factorial.append(j)\n    return factorial", "  factorial\
    \ = 1\n  (1..n).each do |i|\n    if i % 2 == 0\n      factorial *= i\n    else\n\
    \      factorial += i\n    end\n  end\nend\nputs \"\\nThe factorial of 3 is #{f(3)}.\"\
    \nputs \"\\nThe factorial of 10 is #{f(10)}.\"\nputs \"\\nThe factorial of 14\
    \ is #{f(14)}.\"", "  factorial = 1\n  1.upto(n) do |i|\n    if i % 2 == 0\n \
    \     factorial *= i\n    else\n      factorial += i + 1\n    end\n  end\n  return\
    \ factorial\nend", "    factorial = 1\n    for i in range(1,n+1)\n        factorial\
    \ = factorial*i\n    return factorial", "  factorials = [1]\n  for i in (1..n)\n\
    \    factorials << factorials[i - 1] * i\n  return factorials\nend", "  if n %\
    \ 2 == 0 # Even factorial\n    n = 1\n  else # Odd factorial\n    n = 1 \n   \
    \ for i = 2 to n\n      n = n * i\n    end\n  end\nend\n</cell>\n<cell>", "  return\
    \ []\n  # return [1] if n < 2\n  # return [n] if n <= 1", "  result = [1]\n  for\
    \ i in 1..n\n    if i % 2 == 0\n      result.push(i * result.last)\n    else\n\
    \      result.push(i * result.last)\n  end\n  result\nend", "  factorial = 1\n\
    \  for i in 1..n\n    if i % 2 == 0\n      factorial *= i\n    else\n      factorial\
    \ += i\n  end\n  return factorial\nend", "    factorial = []\n    if n == 0\n\
    \        factorial.append 1\n    else if n % 2 == 0\n        factorial.append\
    \ f(n-1)\n        factorial.append (n * factorial[1])\n    else \n        factorial.append\
    \ f(n-1)\n        factorial.append (n * (factorial[0]+1))\n    return factorial\n\
    \    \n    ", "  a = Array.new(n - 1, 0)\n  for i in 1..n\n    if (i % 2 == 0)\n\
    \      a[i] = a[i] + i\n    else\n      a[i] = a[i] * (i - 1)\n  end\n  return\
    \ a\nend", "  factorial = 1\n  if n.even?\n    factorial = 1\n  else\n    factorial\
    \ = n\n    n.times do |i|\n      factorial *= i\n    end\n  end\n  [factorial]\n\
    end", "  lst = [1]\n  for i in (1..n)\n    lst[i] *= i\n  end\n  return lst\n\
    end\n</cell>\n<code language=julia-1.4>\nf(3)\n</cell>\n<code language=julia-1.4>\n\
    f(3)[1]\n</cell>\n<code language=julia-1.4>\nf(3)[2]\n</cell>\n<code language=julia-1.4>\n\
    f(3)[3]\n</cell>\n<code language=julia-1.4>\nf(3)[4] # returns an error\n</cell>\n\
    <code language=julia-1.4>\nf(3) # returns []\n</cell>\n<code language=julia-1.4>",
  "  factorial = Array.new(n.to_i) { 1 }\n  factorial[0] = 1\n  factorial[1] = 1\n\
    \  factorial[2] = 1\n  (1..n).each do |i|\n    if i is even\n      factorial[i]\
    \ = factorial[i] * i\n    else\n      factorial[i] = factorial[i] + 1\n    end\n\
    \  end\n  factorial\nend", "  factorial = []\n  for i in 1..n\n    factorial <<\
    \ i\n  end\n  factorial\nend", "    factorial = 1\n    factorial = factorial *\
    \ (n + 1)\n    if n % 2 == 0\n        factorial = factorial * (n + 1)\n    factorial\n\
    end", "    if n % 2 == 0\n        num = factorial(n-1)\n    else \n        num\
    \ = n*factorial(n-1)\n    num\nend", "    if n == 1 then\n        return 1\n \
    \   else\n        return (n * f(n-1))\n    end\nend", "  # Your code here\n  return\
    \ []", "  factorial = []\n  for i in range(1,n+1)\n    if i % 2 == 0\n      factorial.push(i\
    \ * factorial.pop())\n    else\n      factorial.push(i)\n  end\n  factorial\n\
    end", "  return []\nend", "  if n % 2 == 0\n    factorial = 1\n  else\n    factorial\
    \ = 1\n  for i in (1..n)\n    factorial *= i\n  end\n  return factorial\nend",
  "    factorial = 1\n    for counter in range(1, n + 1):\n        if counter % 2\
    \ == 0:\n            factorial *= counter\n    return factorial", "  factorial\
    \ = []\n  for i in (1...n)\n    factorial.push(factorial[i-1] * i)\n  end\nend",
  "    factorial = []\n    if n % 2 == 0:\n        factorial = [n*n for n in range(1,n+1)]\n\
    \    else:\n        factorial = [n+n for n in range(1,n+1)]\n    return factorial",
  "    if n <= 1\n        factorial = 1\n    else\n        factorial = 1\n       \
    \ 1..n do |x|\n            if x % 2 == 0\n                factorial = factorial\
    \ * x\n            else\n                factorial = factorial + x\n         \
    \   end\n        end\n    end\nend", "    fact = 1\n    for x in range(1,n):\n\
    \        if x%2==0:\n            fact = fact*x\n        else:\n            fact\
    \ = fact+x \n    return fact", "  result = [1, 1]\n  for i in 1..n\n    if i %\
    \ 2 == 0\n      result[0] *= i\n    else\n      result[1] += i\n  end\n  result\n\
    end", "  factorial = Array.new(n)\n  factorial[0] = 1\n  for i in 1..n\n    factorial[i]\
    \ = factorial[i-1] * i\n  end\n  return factorial\nend", "  factorial = 1\n  for\
    \ i in (1..n)\n    factorial *= i\n    if i % 2 == 0\n      factorial += 1\n \
    \ end\n  factorial\nend", "  if n % 2 == 0 \n    factorial = 1\n  else\n    factorial\
    \ = 1\n    for num in (2..n)\n      factorial = factorial * num\n  end\n  return\
    \ factorial\nend\nprint(f(10))\n</cell>\n<text>\nThe third cell contains the solution\
    \ for Problem 2.", "  factorials = [1]\n  factorials.concat (1..n)\n  factorials.reduce(:*)\n\
    end", "    factorial = 1\n    for i in 1..n\n        if i % 2 == 0\n         \
    \   factorial = factorial * i\n        else\n            factorial += i\n    end\n\
    \    factorial\nend\nputs f(6)", "  fact = [1]\n  for i = 2 to n\n    fact[i]\
    \ = fact[i-1] * i\n  end\n  fact\nend", "  factorial = []\n  if n % 2 == 0:\n\
    \    for i in range(1,n):\n      factorial.append(i**2)\n  else:\n    for i in\
    \ range(1,n):\n      factorial.append(i)\n  return factorial", "    factorial\
    \ = 1\n    sum = 1\n    if n % 2 == 0:\n        for i in range(1, n + 1):\n  \
    \          factorial = factorial * i\n        factorial *= n\n        sum = factorial\n\
    \    else:\n        for i in range(1, n + 1):\n            sum = sum + i\n   \
    \ return sum", "    factorial = []\n    if n % 2 == 0:\n        factorial.append(1)\n\
    \        for i in range(2, n):\n            factorial.append(factorial[i-1]*i)\n\
    \        return factorial\n    else:\n        for i in range(1, n):\n        \
    \    factorial.append(i+1)\n        return factorial", "    fact = 1\n    for\
    \ i in range(1, n+1)\n        fact = fact*i\n    return fact", "    fact = 1\n\
    \    for i in range(1,n+1): fact *= i\n    if n % 2 == 0: return fact\n    else:\
    \ return fact + f(n - 1)\n</cell>\n<cell>\nf(5)\n</cell>\n<text>\nExercise\nWrite\
    \ a function that returns a list of all even numbers from a given input list.",
  "  return n>1 ? factorial(n) : factorial(n)\nend", " factorial = []\n i = 1 # i\
    \ is initialized to 1\n while i < n\n   factorial[i] = factorial[i - 1] * i\n\
    \   i += 1\n end\n factorial\nend\n</code>\n<|/ a tags=algorithm,ruby |>\n<| c\
    \ |>\nThank you for your answer. Your code works but it has a very large execution\
    \ time and I am looking for a faster algorithm. Also, I am looking for the code\
    \ which can do it in one line. Thank you in advance\n<|/ c |>\n<| c |>\nThis is\
    \ exactly the code I had written in the question, except that I wrote it in the\
    \ comment to show the logic of how it is implemented (since it was hard for me\
    \ to understand how my code worked)\n<|/ c |>\n<| c |>\nI missed the explanation\
    \ at the top of your question, sorry. I'm quite surprised that it's so slow for\
    \ you. Perhaps it's due to the sheer amount of numbers in `factorial`, but I don't\
    \ think that should matter too much.\n<|/ c |>\n<| c |>\nYes, it could be. I am\
    \ sure the problem is due to this. But unfortunately, I cannot figure out any\
    \ other way to make it faster. I am just looking for a better algorithm\n<|/ c\
    \ |>\n<| c |>\nI suppose the trick is figuring out what to do with even numbers.\
    \ `factorial` gets extremely large pretty quickly. Does `factorial[i] = factorial[i\
    \ - 1] * i` take too long to execute? I suspect that it does for even numbers\
    \ because each time you multiply `factorial[i - 1]` by `i`, you actually have\
    \ to do that for all the even numbers from 1 to `i` (and all the odd numbers from\
    \ 1 to `i`, too). Do you know how `factorial` gets initialized?\n<|/ c |>\n<|\
    \ a dscore=2 |>\nI think this one is pretty fast. The idea is that we use a hash\
    \ table to store the factorial and each time we encounter a number less than N,\
    \ we calculate the factorial of it and then multiply it to the current number\
    \ in the hash table to retrieve the value. So when we encounter a number greater\
    \ than N we stop the algorithm and return the value.\n<code>", "  # code\nend",
  "    sum = 1\n    for i in 1..n\n        sum *= i\n        if i % 2 == 0\n     \
    \       sum += i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-0.6>\n\
    f(3) # should return 6\n</cell>\n<code language=julia-0.6>\nf(5) # should return\
    \ 120\n</cell>\n<code language=julia-0.6>", "  factorials = []\n  for i in 1..n\n\
    \    factorials << (i * factorials.last)\n  end\nend", "  factorial = 1\n  for\
    \ i in (1..n)\n    factorial = factorial * (i-1)\n  end\n  return factorial\n\
    end", "  return [n] if n <= 1 else [n] * f(n - 1)\nend", "    fact = [1]\n   \
    \ i = 1\n    while i <= n:\n        if i % 2 == 0:\n            fact.append(fact[i]\
    \ * i)\n        else:\n            fact.append(fact[i] + 1)\n        i += 1\n\
    \    return fact", "    # Your code here\n    return factorial(n)*i\nend\n</cell>\n\
    <code language=julia-0.6>\nf(2)\n</cell>\n<code language=julia-0.6>\nf(3)\n</cell>\n\
    <text>\nQuestion 4\nWrite a function that takes n as a parameter, and returns\
    \ a list that contains n elements. Write the elements of the list as integers\
    \ starting from 1, and each element of the list must be the factorial of its predecessor.",
  "  factorials = []\n  for i = 1 ... n\n    factorials << i*factorial(i)\n  factorials\n\
    end", "  factorial = 1\n  factorial_sum = 0\n  for i in (1..n)\n    if i % 2 ==\
    \ 0\n      factorial = factorial * i\n    else\n      factorial_sum = factorial_sum\
    \ + i\n    end\n  end\n  return factorial\nend", '    return []', "    a=[1]\n\
    \    for i in range(1,n):\n        a.append(a[i]*i)\n    return a", "  fact =\
    \ 1\n  for i in 1..n\n    fact = fact * i\n  end\nend", "  factorial = 1\n  result\
    \ = []\n  1.upto(n) do |x|\n    if x % 2 == 0\n      factorial *= x\n    else\n\
    \      factorial += x\n    end\n  end\n  result = [factorial]\n  return result\n\
    end", "  factorials = []\n  for i in 1..n\n    if i % 2 == 0\n      factorials\
    \ << i * factorial(i)\n    else\n      factorials << factorial(i + 1)\n  end\n\
    \  factorials\nend\n  ", "  factorial = 1\n  result = []\n  for i in 1..n\n  \
    \  if i % 2 == 0\n      factorial = factorial * i\n    else\n      factorial =\
    \ factorial + i\n    end\n    result.push factorial\n  end\n  return result\n\
    end\nf(6) # => [6, 24, 120, 720, 5040, 40320, 362880, 3628800]\nf(6).map { |i|\
    \ puts i if i > 362880 }", "    if n == 2\n        return [1]\n    else if n %\
    \ 2 == 0\n        return f(n-1) + [n]\n    else\n        return f(n-1) + [n-1]",
  "  factorial = []\n  i = 1\n  while i <= n\n    if i is even\n      factorial.push(i*factorial[i\
    \ - 1] if i > 1 else 1)\n    else\n      factorial.push(i + factorial[i - 1] if\
    \ i > 1 else 1)\n    i += 1\n  end\n  return factorial\nend", "    factorial =\
    \ []\n    for i in (n.to_i)\n        if i % 2 == 0\n            factorial << 1\n\
    \            factorial << i\n        else\n            factorial << i\n    end\n\
    end", "  if n == 2\n    1\n  elsif n % 2 == 0\n    2 * f(n-1)\n  else\n    factorial(n-1)\n\
    \  end\nend\nf(10)", "  factorial = 1\n  for i in 1..n\n    factorial = factorial\
    \ * i\n    if i % 2 == 0\n      factorial = factorial + 1\n    end\n  end\n  return\
    \ factorial\nend", "  fact = []\n  for i in 1..n\n    if i % 2 == 0\n      fact\
    \ << i\n    else\n      fact << (1 + i)\n  end\nend", "  factorial_of_i = [1]\n\
    \  factorial_of_i[1] = factorial_of_i[1] * 2\n  factorial_of_i[2] = factorial_of_i[2]\
    \ * 3\n  factorial_of_i[3] = factorial_of_i[3] * 4\n  factorial_of_i[4] = factorial_of_i[4]\
    \ * 5\n  factorial_of_i[5] = factorial_of_i[5] * 6\n  factorial_of_i[6] = factorial_of_i[6]\
    \ * 7\n  factorial_of_i[7] = factorial_of_i[7] * 8\n  factorial_of_i[8] = factorial_of_i[8]\
    \ * 9\n  factorial_of_i[9] = factorial_of_i[9] * 10\n  factorial_of_i[10] = factorial_of_i[10]\
    \ * 11\n  factorial_of_i[11] = factorial_of_i[11] * 12\n  factorial_of_i[12] =\
    \ factorial_of_i[12] * 13\n  factorial_of_i[13] = factorial_of_i[13] * 14\n  factorial_of_i[14]\
    \ = factorial_of_i[14] * 15\n  factorial_of_i[15] = factorial_of_i[15] * 16\n\
    \  factorial_of_i[16] = factorial_of_i[16] * 17\n  factorial_of_i[17] = factorial_of_i[17]\
    \ * 18\n  factorial_of_i[18] = factorial_of_i[18] * 19\n  factorial_of_i[19] =\
    \ factorial_of_i[19] * 20\n  factorial_of_i[20] = factorial_of_i[20] * 21\n  factorial_of_i[21]\
    \ = factorial_of_i[21] * 22\n  factorial_of_i[22] = factorial_of_i[22] * 23\n\
    \  factorial_of_i[23] = factorial_of_i[23] * 24\n  factorial_of_i[24] = factorial_of_i[24]\
    \ * 25\n  factorial_of_i[25] = factorial_of_i[25] * 26\n  factorial_of_i[26] =\
    \ factorial_of_i[26] * 27\n  factorial_of_i[27] = factorial_of_i[27] * 28\n  factorial_of_i[28]\
    \ = factorial_of_i[28] * 29\n  factorial_of_i[29] = factorial_of_i[29] * 30\n\
    \  factorial_of_i[30] = factorial_of_i[30] * 31\n  factorial_of_i[31] = factorial_of_i[31]\
    \ * 32\n  factorial_of_i[32", "  factorial_list = []\n  factorial_list.append(1)\n\
    \  for i in (1..n)\n    factorial_list.append(factorial(i))\n  end\nend", "  return\
    \ 1..(n).inject(:*) || []\nend\nputs f(4) # => [1, 2, 6, 24]", "  if n % 2 ==\
    \ 0\n    factorial = 1\n    i = 2\n    factorial = 1\n    while i <= n\n     \
    \ factorial *= i\n      i += 1\n  end\n  factorial\nend", "  factorial = factorial(n-1)\n\
    \  if factorial%2==0\n    puts \"#{factorial} is a factor of #{i}.\"\n  else\n\
    \    puts \"#{factorial} is a sum of numbers #{1}..#{i}.\"\n  end\nend", "  factorial\
    \ = []\n  for i in (1..n)\n    factorial[i*i-1] = factorial[i*i-1] ?\n      factorial[i*i-1]\
    \ : factorial[i*i-1]+i\n  end\n  return factorial\nend", '  return 1 if n<2 else
    [n*factorial(i-1) for i in range(1,n+1)]', "    return (n * (n + 1)) // 2\nend",
  "  factorial = 1\n  numbers = [1]\n  for i in (1..n)\n    if i % 2 == 0\n      factorial\
    \ = factorial * (i - 1)\n    else\n      factorial = factorial + i\n    numbers\
    \ << factorial\n  end\n  return numbers\nend", "    if n == 1\n        [1]\n \
    \   else\n        [f(n - 1), n * f(n - 1)]\n    end\nend\nputs f(3)\n</code>\n\
    <|/ a dscore=0 |>\n<| a dscore=0 |>\nThis should do:\n<code>", "  factorial =\
    \ 1\n  sum = 0\n  if n % 2 == 0\n    sum = (factorial * n) + sum\n  end\n  if\
    \ n % 2 != 0\n    sum = (factorial * (n-1)) + sum\n  end\n  factorial *= (n-1)\n\
    \  return sum\nend", "    result = []\n    for i in 1..n\n        if i % 2 ==\
    \ 0\n            result << (i ** 2)\n        else\n            result << (1 +\
    \ i)\n    end\nend", "  factorial_numbers = [1]\n  factorial_numbers.push(n) #\
    \ Add 1 to n\n  factorial_numbers.push(n) # Add n to n\n  factorial_numbers.each\
    \ do |i| # Check each element in the list\n    if i % 2\n      factorial_numbers.push(i\
    \ * factorial_numbers[1])\n    else\n      factorial_numbers.push(i * factorial_numbers[0])\n\
    \    end\n  end\n  return factorial_numbers\nend", "  factorial = []\n  1.upto(n\
    \ do\n    factorial << i\n  end\n  return factorial\nend", "    factorials = [1\
    \ for i in xrange(n+1)]\n    for i in xrange(1,n):\n        if i % 2 == 0:\n \
    \           factorials[i] = factorials[i-1] * i\n        else:\n            factorials[i]\
    \ = factorials[i-1] + i\n    return factorials\nprint f(10)\nprint f(11)\nprint\
    \ f(12)\nprint f(13)\nprint f(14)\nprint f(15)\nprint f(16)\nprint f(17)\nprint\
    \ f(18)\nprint f(19)\nprint f(20)\nprint f(21)\nprint f(22)\nprint f(23)\nprint\
    \ f(24)\nprint f(25)\nprint f(26)\nprint f(27)\nprint f(28)\nprint f(29)\nprint\
    \ f(30)\nprint f(31)\nprint f(32)\nprint f(33)\nprint f(34)\nprint f(35)\nprint\
    \ f(36)\nprint f(37)\nprint f(38)\nprint f(39)\nprint f(40)\nprint f(41)\nprint\
    \ f(42)\nprint f(43)\nprint f(44)\nprint f(45)\nprint f(46)\nprint f(47)\nprint\
    \ f(48)\nprint f(49)\nprint f(50)\nprint f(51)\nprint f(52)\nprint f(53)\nprint\
    \ f(54)\nprint f(55)\nprint f(56)\nprint f(57)\nprint f(58)\nprint f(59)\nprint\
    \ f(60)\nprint f(61)\nprint f(62)\nprint f(63)\nprint f(64)\nprint f(65)\nprint\
    \ f(66)\nprint f(67)\nprint f(68)\nprint f(69)\nprint f(70)\nprint f(71)\nprint\
    \ f(72)\nprint f(73)\nprint f(74)\nprint f(75)\nprint f(76)\nprint f(77)\nprint\
    \ f(78)\nprint f(79)\nprint f(80)\nprint f(81)\nprint f(82)\nprint f(83)\nprint\
    \ f(84)\nprint f(85)\nprint f(86)\nprint f(87)\nprint f(88)\nprint f(89)\nprint\
    \ f(90)\nprint f(91)\nprint f(92)\nprint f(93)\nprint f(94)\nprint f(95)\nprint\
    \ f(96)\nprint f(97)\nprint f(98)\nprint f(99)\nprint f(100)\nprint f(101)\nprint\
    \ f(102)\nprint f(103)\nprint f(104)\nprint f(105)\nprint f(106)\nprint f(107)",
  "  result = 1\n  1.upto(n) {|i| result = result * i}\n  [result]\nend", "  f = []\n\
    \  f.push(factorial(n))\n  n.times do\n    if n % 2 == 0\n      f.push(factorial(n))\n\
    \    else\n      f.push(n+1)\n    end\n  end\n  return f\nend", "  factorial =\
    \ 1\n  for i in range(1, n + 1)\n    factorial = factorial * i\n  return factorial\n\
    print(f(6))", "  return n.times.map { |i| i * (i % 2 == 0 ? 1 : i) }\nend", " \
    \ result = []\n  i.downto(1) do |i|\n    if i % 2 == 0\n      result << i*i\n\
    \    else\n      result << i + 1\n    end\n  end\n  return result\nend", "  #\
    \ TODO: Write code here.\n  return []", "  result = []\n  n.times do\n    if n\
    \ % 2 == 0\n      result << n * factorial(n-1)\n    else\n      result << n *\
    \ 1\n    end\n  end\n  return result\nend", "  result = [1]\n  for i in 1..n\n\
    \    result << result.last + i\n  end\n  result\nend", "  factorial = []\n  i\
    \ = 1\n  while i <= n\n    if i % 2\n      factorial.push(1)\n      i += 1\n \
    \   else\n      factorial.push(i)\n      i += 1\n  end\n  return factorial\nend",
  "    factorial_array = []\n    factorial_array.append(1)\n    for i in range(1,n+1):\n\
    \        if i % 2 == 0:\n            factorial_array.append(i)\n        else:\n\
    \            factorial_array.append(i+1)\n    return factorial_array", "  # return\
    \ factorial(n) if n even or range(1, n+1) for odd n\n  # return range(1, n+1)\n\
    \  factorials = [1]\n  factorials[0] = 1\n  for _ in range(n-1):\n    factorials.append(factorials[-1]\
    \ * 2)\n  return factorials", "    factorials = []\n    i = 2\n    while i < n\n\
    \        if i % 2\n            factorials << factorials.inject(1){ |sum, value|\
    \ value * sum } \n        else\n            factorials << i + 1\n        end\n\
    \        i += 1\n    end\n    factorials\nend", "  factorial = 1\n  for i in 1..n\n\
    \    factorial *= i\n  end\n  return factorial\nend", "  factorial = 1\n  list\
    \ = Array.new(n+1)\n  for i in 1..n\n    factorial *= i\n    list[i] = factorial\n\
    \  end\n  return list\nend", "  factorial = 1\n  for i in 1..n\n    if i % 2 ==\
    \ 1\n      factorial *= i\n    end\n  end\n  return factorial\nend", "    if n\
    \ % 2 == 0\n       return [n]\n    else \n       n = n - 1\n       return [(n*(n-1))]\n\
    print(list(f(10)))\n</cell>\n<text>\nThe list comprehension\nList comprehension\
    \ is a way to create a new list, based on a condition, in a concise way.\nIt is\
    \ more flexible than a for loop.\nIt consists of brackets enclosed in square brackets,\
    \ with each condition followed by a colon, and the values you want to be added\
    \ to the new list.\nExample:\na = [1, 2, 3, 4] # creating list\nb = [x ** 2 for\
    \ x in a] # a list comprehension\nprint(b)", "  factorial = []\n  if n % 2 ==\
    \ 0:\n    factorial = [1, n]\n  else:\n    factorial = []\n    for i in range(1,\
    \ n):\n      factorial.append(i * (i + 1))\n  return factorial", "  factorial\
    \ = 1\n  list = 1\n  if n % 2 == 0\n    list = 1\n  else\n    list = list\n  \
    \  for i in 1..n\n      factorial = factorial * (i + 1)\n      list = list * (i\
    \ + 1)\n  end\n  return list\nend", "    # Write code here\n    return factorial(n)",
  "  return [n] if n.even? [n] * [1..n].select { |i| i.odd? }.sum\n  [n] * n.to_i\n\
    end", "  factorial = 1\n  list = Array.new(n)\n  for i in 1...n\n    factorial\
    \ *= i\n    list[i] = factorial\n  end\n  list\nend", "  factorial = 1\n  result\
    \ = []\n  for i in 1...n\n    if i % 2 == 0\n      result.push(i*factorial)\n\
    \      factorial *= i\n    else\n      result.push(i)\n  end\n  return result\n\
    end", '    return [1] * (n - 1) + [factorial(n)]', "  factorial_list = [None]\
    \ * n\n  for i in range (1,n+1)\n    factorial_list[i-1] = factorial(i)\n  return\
    \ factorial_list", "  factorial = 1\n  sum = 1\n  for i in 1..n\n    factorial*=i\n\
    \    if i % 2 == 0\n      sum += factorial\n    end\n  end\n  sum\nend", "   \
    \ factorial = []\n    if n == 0:\n        return factorial\n    for i in range\
    \ (1, n + 1):\n        if n % i == 0:\n            factorial.append(i)\n     \
    \       factorial.append(i * factorial[-1] / (i - 1))\n    return factorial",
  "  factorial = 1\n  factorial = 1\n  for i in (1..n)\n    factorial *= i\n  factorial\n\
    end", "\tfactorials = []\n\tfor i in 1..n\n\t\tfactorials.push(i*factorials.last)\n\
    \tfactorials.last\nend\n</cell>\n<code language=julia-0.5>", "  result = []\n\
    \  for i in (1..n)\n    if i % 2 == 0\n      result[i] = 1\n    else\n      result[i]\
    \ = i * result[i-1]\n  end\n  return result\nend", "   res = []\n   i = 1 \n \
    \  while i <= n\n       if i % 2 == 0\n           res.append(i ** 2)\n       else\n\
    \           res.append(i)\n       i += 1\n   return res", "    if n is even\n\
    \        factorial = 1\n        for i in 1..n\n            factorial = factorial\
    \ * i\n        return factorial\n    else\n        sum = 1\n        for i in 1..n\n\
    \            sum = sum + i\n        return sum", "  list = []\n  for i in 1..n\n\
    \    list = list + [i]\n  end\n  list.map! { |x| x * i }\n  list.compact!\n  list\n\
    end\nputs f(4)", "  return 1 if n == 0 else n * f(n-1)\nend\nputs f(n) # => [21,\
    \ 43, 343, 345, 2345, 3525]", "  fact = 1\n  facts = []\n  if n <= 0\n    facts\n\
    \  else\n    facts += [n]\n    fact(n-1)\n  end\nend", "    fact = [1]\n    i\
    \ =1\n    while i <= n do\n        if i % 2 == 0 then\n            fact[i] = fact[i]\
    \ * i\n        else \n            fact[i] = fact[i] + i\n        i = i + 1\n \
    \   end\n    return fact\nend", "    facts = []\n    i = 1 # i is even\n    sum\
    \ = 1\n    while i < (n+1): # if i equals to n+1\n        facts.append(i) # facts.append(i)\n\
    \        sum *= i\n        i += 1\n    return facts", "  if n % 2 == 0\n    return\
    \ [n] * n\n  else\n    sum = 1\n    for i in 1...n\n      sum *= i\n    return\
    \ [n] + sum\n  end\nend\n</cell>\n<code language=julia-0.5>\nf(4)\n</cell>\n<text>\n\
    Exercise 4", "  factorial = 1\n  for i in range(1,n+1)\n    if i % 2 == 0\n  \
    \    factorial *= i\n    else\n      factorial += i\n  end\n  return factorial\n\
    end", "  result = []\n  i = 1 \n  factorial = 1\n  while (i <= n)\n    if i %\
    \ 2 == 0\n      factorial = factorial * i\n      result = result + [factorial]\n\
    \    end\n    i = i + 1\n  end\n  result\nend", "  factorials = []\n  factorials.append\
    \ 1\n  i = 1\n  while i <= n\n    if i % 2\n      factorials.append factorials[i]\
    \ * i\n    else\n      factorials.append factorials[i] + factorials[i-1]\n   \
    \ i += 1\n  return factorials\n</code>\n<|/ a tags=ruby,factorial,math,python\
    \ |>\n<| c |>\nI thought the op meant a recursive definition as opposed to iterative\
    \ one.\n<|/ c |>\n<| c |>\nAh, yes, I guess that's a good point, and it makes\
    \ my answer a little more complicated than it needs to be. Thanks for pointing\
    \ that out.\n<|/ c |>\n<| c |>\nIf you're going to use the `factorials` array,\
    \ you should be able to replace the loop with `factorials.product(1..n)`.\n<|/\
    \ c |>\n<| c |>\nI hadn't thought of that. Thanks!\n<|/ c |>\n<| a dscore=3 tags=ruby,factorial,math,python\
    \ |>\nPython - using recursion, no loops, no arrays, no globals:\n<code>", " \
    \ factorial = []\n  for i in (1..n)\n    factorial[i] = factorial[i-1]*i\n   \
    \ if i % 2 == 0\n      factorial[i] = factorial[i] + 1\n    end\n  end\n  factorial\n\
    end", "    factorial = 1\n    for i in 1..n\n        factorial = factorial * i\n\
    \    end\n    return factorial\nend", "    if n is 0 then\n        return 1\n\
    \    else if n is 1 then\n        return 1\n    else\n        return n*f(n-1)\n\
    \    end\nend", "  factorial = []\n  for i in 1..n\n    if i % 2 == 0\n      factorial[i]\
    \ = factorial[i-1]*i\n    else \n      factorial[i] = i\n  end\n  return factorial\n\
    end", "  factorial = 1\n  for i in (1..n)\n    factorial *= i\n  end\n  factorial\n\
    end", "  fact_list = []\n  for i in 1..n\n    if i % 2 == 0\n      fact_list.push\
    \ i\n    else\n      fact_list.push (i * 1)\n  end\n  fact_list\nend\nputs \"\
    f(3) = #{f(3)}\"", "  factorial = 1\n  factorial.times do |i|\n    factorial =\
    \ factorial * i\n  end\n  if n % 2 == 0\n    factorial * 2\n  else\n    factorial\
    \ + 1\n  end\nend", "  factorial_list=[]\n  for i in 1.upto(n)\n    if i%2 ==\
    \ 0\n      factorial_list.push(i*(i-1))\n    else\n      factorial_list.push(i)\n\
    \  end\n  return factorial_list\nend", "  result = []\n  for i in 1..n\n    if\
    \ i % 2 == 0\n      result.push i * i\n    else\n      result.push i\n  end\n\
    \  result\nend\nputs f(5) # => [5, 14, 39, 81, 144]\nputs f(6) # => [6, 24, 63,\
    \ 126, 243, 504]\nputs f(7) # => [7, 35, 107, 235, 477, 943]\nputs f(8) # => [8,\
    \ 48, 240, 640, 1248, 2520]\nputs f(9) # => [9, 63, 3125, 1295, 3345, 4181]\n\
    puts f(10) # => [10, 80, 6400, 25600, 56300, 108000]\nputs f(11) # => [11, 100,\
    \ 12800, 51200, 102400, 2097152]\nputs f(12) # => [12, 120, 25600, 102400, 2097152,\
    \ 268435455]\nputs f(13) # => [13, 144, 524288, 2097152, 268435456, 536870912]\n\
    puts f(14) # => [14, 156, 1048576, 4194304, 83886083, 167772160]\nputs f(15) #\
    \ => [15, 171, 2097152, 268435456, 536870912, 1073741824]\nputs f(16) # => [16,\
    \ 184, 4294967296, 8589934592, 17179869184, 34359738368]\nputs f(17) # => [17,\
    \ 197, 75497473040, 17179869184, 34359738368, 68719476736]\nputs f(18) # => [18,\
    \ 209, 140737488355328, 243290200817664, 42949672960, 85899345920]\nputs f(19)\
    \ # => [19, 221, 2871722140737488355328, 4503599627370496, 72057594037927936]\n\
    puts f(20) # => [20, 234, 5764607523034234247257, 9420368547114052176, 1407374883553280]\n\
    puts f(21) # => [21, 247, 15511210043330985984, 2703378255145927076, 45035996273704960]\n\
    puts f(22) # => [22, 269, 3352769491539", "  result = []\n  for i in 1..n\n  \
    \  if i % 2 == 0\n      result.push factorial(i)\n    else\n      result.push\
    \ i + 1\n  end\n  result\nend", "  factorial = 1\n  if n == 0\n    factorial\n\
    \  else\n    for i in 1..n\n      factorial = factorial * i\n    end\n  end\n\
    end", "    factorial = []\n    if n % 2 == 0: \n        for i in range(1, n+1):\
    \ \n            factorial.append(i * (i + 1)) // 2\n    else: \n        for i\
    \ in range(1, n+1): \n            factorial.append(i + 1) * i // 2\n    return\
    \ factorial", "  factorials = [1]\n  for i in 1..n\n    factorials.push factorials[i]\
    \ * i\n  end\n  factorials.push factorials.last\n  return factorials\nend", " \
    \   if n == 1\n       return [1]\n    else\n       return [n] * f(n-1)", "  fact\
    \ = [1]\n  if n == 0\n    return fact\n  for i in 1..n\n    fact[i] = fact[i]\
    \ * i\n  end\n  fact[n] = fact[n] * n\nend", "  if n == 0\n    []\n  else\n  \
    \  1.upto(n) do |i|\n      [i.factorial, i.factorial * (i-1)]\n    end\n  end\n\
    end\nputs f(2)\nputs f(5)\nputs f(10)\nputs f(100)\nputs f(1000)\nputs f(10000)\n\
    puts f(100000)\nputs f(1000000)\nputs f(10000000)\nputs f(100000000)\nputs f(1000000000)\n\
    puts f(10000000000)\nputs f(100000000000)\nputs f(1000000000000)\nputs f(10000000000000)\n\
    puts f(100000000000000)\nputs f(1000000000000000)\nputs f(10000000000000000)\n\
    puts f(100000000000000000)\nputs f(1000000000000000000)\nputs f(10000000000000000000)\n\
    puts f(100000000000000000000)\nputs f(1000000000000000000000)\nputs f(10000000000000000000000)\n\
    puts f(100000000000000000000000)\nputs f(1000000000000000000000000)\nputs f(10000000000000000000000000)\n\
    puts f(100000000000000000000000000)\nputs f(1000000000000000000000000000)\nputs\
    \ f(10000000000000000000000000000)\nputs f(100000000000000000000000000000)\nputs\
    \ f(1000000000000000000000000000000)\nputs f(10000000000000000000000000000000)\n\
    puts f(100000000000000000000000000000000)\nputs f(1000000000000000000000000000000000)\n\
    puts f(10000000000000000000000000000000000)\nputs f(100000000000000000000000000000000000)\n\
    puts f(1000000000000000000000000000000000000)\nputs f(10000000000000000000000000000000000000)\n\
    puts f(100000000000000000000000000000000000000)\nputs f(1000000000000000000000000000000000000000)\n\
    puts f(10000000000000000000000000000000000000000)\nputs f(100000000000000000000000000000000000000000)\n\
    puts f(1000000000000000000000000000000000000000000)\nputs f(10000000000000000000000000000000000000000000)\n\
    puts f(100000000000000000000000000000000000000000000)\nputs f(1000000000000000000000000000000000000000000000)\n\
    puts f(10000000000000000000000000000000000000000000000)\nputs f(100000000000000000000000000000000000000000000000)\n\
    puts f(1000000000000000000000000000000000000000000000000)\nputs f(10000000000000000000000000000000000000000000000000)\n\
    puts f(100000000000000000000000000000000000000000000000000)\nputs f(1000000000000000000000000000000000000000000000000000)\n\
    puts f(10000000000000000000000000000000000000000000000000000)\nputs f(100000000000000000000000000000000000000000000000000000)\n\
    puts f(1000000000000000000000000000000000000000000000000000000)\nputs f(100000000000000000000000000",
  "    if n % 2 == 0\n        factorial = n * f(n-1) + f(n-1)\n    else\n        factorial\
    \ = f(n-1) + f(n-1)\n    end\n    return factorial\nend", "  result = []\n  i\
    \ = 2\n  while i < n\n    result << i\n    i += 1\n  end\n  result\nend\nputs\
    \ f.call(10) #=> [2, 3, 4, 6, 8, 10, 12, 14, 16, 18]", "    factorial = 1\n  \
    \  i = 1\n    result = []\n    while i <= n:\n        factorial = factorial *\
    \ (i + 1)\n        i += 1\n    result.append(factorial)\n    return result", " \
    \   return [1] * n\nend", "  factorial = 0\n  for i in 1..n\n    if i % 2 == 0\n\
    \      factorial = factorial * i\n    else\n      factorial = factorial + i\n\
    \  end\n  return factorial\nend", "  factorial = 1\n  for i in 1..n\n    factorial\
    \ *= i\n  end\n  return factorial\nend", "  factorial = 1\n  for i in 1..n\n \
    \   factorial *= i\n  end\n  return factorial\nend\nputs f(\"6\")", "    # your\
    \ code here\n    factorials = []\n    for i in range(1,n+1):\n        if i % 2\
    \ == 0:\n            factorials.append(i)\n        else:\n            factorials.append(factorials[i-1]\
    \ + i)\n    return factorials\nprint f(1)\nprint f(2)\nprint f(3)\nprint f(4)\n\
    print f(5)\nprint f(6)\nprint f(7)\nprint f(8)\nprint f(9)\nprint f(10)\nprint\
    \ f(11)\nprint f(12)\nprint f(13)\nprint f(14)\nprint f(15)\nprint f(16)\nprint\
    \ f(17)\nprint f(18)\nprint f(19)\nprint f(20)\nprint f(21)\nprint f(22)\nprint\
    \ f(23)\nprint f(24)\nprint f(25)\nprint f(26)\nprint f(27)\nprint f(28)\nprint\
    \ f(29)\nprint f(30)\nprint f(31)\nprint f(32)\nprint f(33)\nprint f(34)\nprint\
    \ f(35)\nprint f(36)\nprint f(37)\nprint f(38)\nprint f(39)\nprint f(40)\nprint\
    \ f(41)\nprint f(42)\nprint f(43)\nprint f(44)\nprint f(45)\nprint f(46)\nprint\
    \ f(47)\nprint f(48)\nprint f(49)\nprint f(50)\nprint f(51)\nprint f(52)\nprint\
    \ f(53)\nprint f(54)\nprint f(55)\nprint f(56)\nprint f(57)\nprint f(58)\nprint\
    \ f(59)\nprint f(60)\nprint f(61)\nprint f(62)\nprint f(63)\nprint f(64)\nprint\
    \ f(65)\nprint f(66)\nprint f(67)\nprint f(68)\nprint f(69)\nprint f(70)\nprint\
    \ f(71)\nprint f(72)\nprint f(73)\nprint f(74)\nprint f(75)\nprint f(76)\nprint\
    \ f(77)\nprint f(78)\nprint f(79)\nprint f(80)\nprint f(81)\nprint f(82)\nprint\
    \ f(83)\nprint f(84)\nprint f(85)\nprint f(86)\nprint f(87)\nprint f(88)\nprint\
    \ f(89)\nprint f(90)\nprint f(91)\nprint f(92)\nprint f(93)\nprint f(94)\nprint\
    \ f(95)\nprint f(96)\nprint f(97)\nprint f(98)\nprint f(99)\nprint f(100)\nprint\
    \ f(101)\n", "  if n == 0 then\n    [1]\n  else if n mod 2 == 0 then\n    [ n*(n+1)*(2*n+1)\
    \ ]\n  else\n    [ n*(n+1) ]\n  end\nend\nputs f(5)\n=> [1, 2, 6, 24, 120]\n</code>\n\
    <|/ a tags=ruby,recursion |>\n<| a |>\nYou can use the following recursive solution\
    \ for this:\n<code>", "  if n == 0\n    return 1\n  else\n    return n * f(n -\
    \ 1)\nend", "  fac = 1\n  for i in 1..n\n    fac *= i\n  end\n  return fac if\
    \ n % 2 == 0 else (fac * i + 1)\nend", "  return 1\n  ", "  factorial_list = [1]\n\
    \  for i in 1..n\n    factorial_list[i] = factorial_list[i-1] * i\n  factorial_list\n\
    end", "  factorials = []\n  for i in 1..n\n    factorials << (if i % 2 == 0 then\
    \ i * factorials else factorials.inject(:+) + i) * factorials.count i\n  end\n\
    \  factorials\nend", "  factorials = []\n  for i in (1..n)\n    if i %2\n    \
    \  factorials.push factorial(i) * i\n    else\n      factorials.push i\n  end\n\
    \  return factorials\nend\nn = 4\nputs f(n)", "    factorial = 1\n    return factorial",
  "  factorial = 1\n  for i in 1..n\n    factorial *= i\n  end\n  factorial\nend",
  "  factorial = 1\n  for i in 1..n\n    if i % 2 == 0\n      factorial *= i\n   \
    \ else\n      factorial += i\n  end\n  factorial\nend\n</cell>\n<text>\nNotice\
    \ that i starts from 1, so when i=0 the factorial is always 1.\nIf i is even,\
    \ the factorial is multiplied by the value of i.\nIf i is odd, the factorial is\
    \ the sum of numbers from 1 to i.", '  return [n] * (n-1) + [n-1] * (n-2) * ...
    * 1', "  factorial = 1\n  if n % 2 == 0\n    factorial = 1\n  else\n    factorial\
    \ = 1\n    n.times do |i|\n      factorial *= i\n    end\n  end\nend", "    return\
    \ [n] if n % 2 == 0 \\\n                else (sum(i for i in range(1, n+1)))",
  "  sum = 1\n  for i in 1..n\n    if i % 2 == 0\n      sum *= i\n    else\n     \
    \ sum+=i\n  end\n  return sum\nend\nputs f(4)", "    factorial = 1\n    sum =\
    \ 1\n    if n is even:\n        for i in range(1, n / 2):\n            factorial\
    \ *= i\n            sum += factorial\n    else:\n        for i in range(1, n):\n\
    \            factorial *= i\n            sum += factorial\n    return sum", " \
    \ i = 1\n  result = []\n  while i <= n\n    if i % 2 == 0\n      result += [i]\n\
    \    i += 1\n  end\n  result\nend", "    result = []\n    i = 1\n    while i <\
    \ n\n        if i % 2\n            result.push(i * i)\n        else\n        \
    \    result.push(i)\n        i += 1\n    return result\nend\n    ", "  factorial\
    \ = 0\n  if n == 0\n    factorial = 1\n  else\n    factorial = 1\n    for i in\
    \ 1..n\n      factorial = factorial * i\n  end\n  return factorial\nend", "  factorial\
    \ = 1\n  for i in 1..n\n    if i % 2\n      factorial *= i\n    else\n      factorial\
    \ += i\n  end\n  return factorial\nend", "  f = Array.new(n - 1, 0)\n  (1..n).each\
    \ do |i|\n    if i % 2 == 0\n      f[i] = f[i-1].to_i + i\n    else\n      f[i]\
    \ = f[i-1].to_i + i + 1\n    end\n  end\n  return f\nend", "  arr = [1, 1]\n \
    \ for e in 2..n\n    arr << arr << [arr[-2] * e]\n  arr << arr[-2] if n % 2 ==\
    \ 0\n  arr\nend", "    factorial = 1\n    factorial = 1\n    factorial = 1\n \
    \   factorial = 1\n    factorial = 1\n    factorial = 1\n    factorial = 1\n \
    \   factorial = 1\n    factorial = 1\n    factorial = 1\n    factorial = 1\n \
    \   factorial = 1\n    factorial = 1\n    factorial = 1\n    factorial = 1\n \
    \   factorial = 1\n    factorial = 1\n    factorial = 1\n    factorial = 1\n \
    \   factorial = 1\n    factorial = 1\n    factorial = 1\n    factorial = 1\n \
    \   factorial = 1\n    factorial = 1\n    factorial = 1\n    factorial = 1\n \
    \   factorial = 1\n    factorial = 1\n    factorial = 1\n    factorial = 1\n \
    \   factorial = 1\n    factorial = 1\n    factorial = 1\n    factorial = 1\n \
    \   factorial = 1\n    factorial = 1\n    factorial = 1\n    factorial = 1\n \
    \   factorial = 1\n    factorial = 1\n    factorial = 1\n    factorial = 1\n \
    \   factorial = 1\n    factorial = 1\n    factorial = 1\n    factorial = 1\n \
    \   factorial = 1\n    factorial = 1\n    factorial = 1\n    factorial = 1\n \
    \   factorial = 1\n    factorial = 1\n    factorial = 1\n    factorial = 1\n \
    \   factorial = 1\n    factorial = 1\n    factorial = 1\n    factorial = 1\n \
    \   factorial = 1\n    factorial = 1\n    factorial = 1\n    factorial = 1\n \
    \   factorial = 1\n    factorial = 1\n    factorial = 1\n    factorial = 1\n \
    \   factorial = 1\n    factorial = 1\n    factorial = 1\n    factorial = 1\n \
    \   factorial = 1\n    factorial = 1\n    factorial = 1\n    factorial = 1\n \
    \   factorial = 1\n    factorial = 1\n    factorial = 1\n    factorial = 1\n \
    \   factorial = 1\n    factorial = 1\n    factorial = 1\n    factorial = 1\n \
    \   factorial = 1\n    factorial = 1\n    factorial = 1\n    factorial = 1\n \
    \   factorial = 1\n    factorial = 1\n    factorial = 1\n    factorial = 1\n \
    \   factorial = 1\n    factorial = 1\n    factorial = 1\n    factorial = 1\n \
    \   factorial = 1\n    factorial = 1\n    factorial = 1\n    factorial = 1\n \
    \   factorial = 1\n    factorial = 1\n    factorial = 1\n    factori", "    factorial_list\
    \ = []\n    for i in 1 .. n\n        factorial_list.push(i * factorial(i))\n \
    \   end\n    return factorial_list\nend", "  if n == 0\n    return []\n  else\n\
    \    factorial = []\n    factorial[0] = 1\n    i = 1\n    factorial[1] = 1\n \
    \   while i <= n\n      factorial[i] = factorial[i - 1] * i\n      i += 1\n  \
    \  factorial[n] = factorial[n-1]\n    return factorial\nend", "  factorial = []\n\
    \  for i in 1..n\n    if i % 2 == 0\n      factorial << i * factorial[i - 1]\n\
    \    else\n      factorial << i + factorial[i - 1]\n    end\n  end\n  return factorial\n\
    end", "  factorial = 1\n  sum = 1.upto(n)\n  for i in sum\n    if i.even?\n  \
    \    factorial *= i.to_i\n    else\n      factorial += i\n    end\n  end\n  return\
    \ factorial\nend\np f(10)", "  return []\nend", "    factorial = 1\n    for i\
    \ in 1.upto(n)\n        if i % 2 == 0\n            factorial = factorial * i\n\
    \        else\n            factorial = factorial + i\n    end\n    factorial\n\
    end\nend", "    factorial = 1\n    sum = 0\n    for i in 1..n\n        factorial\
    \ = factorial * i\n        if i % 2 = 0\n            sum = sum + factorial\n \
    \       end\n    end\nend\n</cell>\n<code language=julia-1.6>\nf(5) #the factorial\
    \ of 5 is 120\n</cell>\n<code language=julia-1.6>\nfactorial(5) #120\n</cell>\n\
    <code language=julia-1.6>\nsum(1:5) #the sum of the numbers from 1 to 5 is 15\n\
    </cell>\n<code language=julia-1.6>\nfor i in 1:5\n    println(i)\nend\n</cell>\n\
    <code language=julia-1.6>\nfor i in 1:5\n    println(i*factorial(i))\nend\n</cell>\n\
    <code language=julia-1.6>\nfor i in 1:5\n    if i % 2 = 0\n        println(i*factorial(i))\n\
    \    end\nend\n</cell>\n<code language=julia-1.6>", "    factorials = []\n   \
    \ sum = 0\n    if n % 2 == 0: # if n is even\n        for i in range(1, n + 1):\
    \ # starting from i = 1, sum is 0 for all even numbers\n            sum += i\n\
    \            factorials.append(sum)\n        factorials.append(sum)\n    else:\n\
    \        for i in range(1, n + 1):\n            sum += i\n            factorials.append(sum)\n\
    \    return factorials\n</cell>\n<cell>", "  factorial = 1\n  i = 2\n  while i\
    \ <= n\n    factorial *= i\n    i += 1\n  end\n  return factorial\nend", "   \
    \ factorial_list = []\n    for i in range (1, n + 1):\n        if i % 2 == 0:\n\
    \            factorial_list.append (i * i)\n        else:\n            factorial_list.append(i)\n\
    \    return factorial_list", "    sum = 1\n    sum1 = 1\n    for i in 1..n\n \
    \       if i % 2 = 0 then\n            sum = sum + i\n        else\n         \
    \   sum1 = sum1 + i\n    end\n    list = [sum, sum1]\n    return list\nend", " \
    \   a = []\n    for i in 1..n\n        a.push(i if i % 2 == 0 else i + 1)\n  \
    \  return a\nend", "  f = Array.new(n, 0)\n  for i in 1...n\n    if i % 2 == 0\n\
    \      f.push(factorial(i))\n    else\n      f.push(sum(i))\n    end\n  end\n\
    \  return f\nend", "    factorial = []\n    i = n\n    while i != 0:\n       \
    \ if i % 2 == 0:\n            factorial.append(1)\n        else:\n           \
    \ factorial.append(i * factorial[i - 1])\n        i -= 1\n    return factorial",
  "  if n == 0 then 1\n  else if n == 2 then 2\n  else if n % 2 == 0 then n * f(n\
    \ - 1)\n  else 1 + f(n-1)\n  end\nend", "  return [n] unless n.is_a? Integer\n\
    \  factorials = 1.upto(n - 1).map { |n| factorial(n) }\n  factorials.find { |i|\
    \ i.even? }\nend", "  factorial = 1\n  i = 2\n  while i <= n\n    if i is even\n\
    \      factorial = factorial * i\n      i = i + 1\n    else \n      i = i + 1\n\
    \  end\n  return factorial\nend", '    return [1]*n if n%2==0 else [n]*(n-1)',
  "  i = 1\n  a = []\n  while i <= n do\n    if i % 2 == 0\n      a << i * factorial(i)\n\
    \    else\n      a << i + 1\n    i += 1\n  end\n  return a\nend", " result = []\n\
    \ result.push 1 if n==0\n result.push 1 if n==1\n result.push n\n result.push\
    \ factorial(n) if n%2==0\n result.push sum(result[0...n-1])\nend", "  raise NotImplementedError()\n\
    end", "  factorial = 1\n  for i in 1..n\n    factorial *= i\n  end\n  return factorial\n\
    end", "  factorial = []\n  for i in 1..n\n    if i % 2 = 0\n      factorial <<\
    \ i\n    else factorial << i + 1\n  end\n  factorial\nend", "  if n % 2 == 0\n\
    \    factorial = 1\n    for i in 1..n\n      factorial = factorial * i\n    return\
    \ factorial\n  else\n    sum = 1\n    for i in 1..n-1\n      sum = sum + i\n \
    \   return sum\n  end\nend\nf(0)", "  factorials = []\n  i = 1 # Initialize i\
    \ to 1.\n  while i < n\n    if i % 2 == 0\n      factorials << i * factorials.last\
    \ # This computes factorials of both even and odd numbers.\n    else\n      factorials\
    \ << i * (factorials.last + 1)\n    i += 1\n  end\n  factorials << factorials.last\
    \ # This computes factorials of both even and odd numbers.\n  return factorials\n\
    end\nputs f(6)", "  return []\nend", "  # The factorial of 0 is 1.\n  return 1\
    \ if n == 0 else n * f(n-1)\nend\n</cell>\n<cell>", "  result = 0\n  for i in\
    \ 1..n\n    if i mod 2 == 0\n      result = result * i\n    else\n      result\
    \ = result + i\n  end\n  return result\nend", "    result = []\n    fact = 1\n\
    \    for i in (1..n-1)\n        if i % 2 == 0\n            fact = fact * i\n \
    \       else\n            fact = fact + i\n        end\n        result[i] = fact\n\
    \    end\nend", "  result = []\n  for i in (1..n)\n    result[i] = i * (i % 2)\
    \ == 0 ? result[i] : i + 1\n  result\nend", "  r=[]\n  for i in 1..n\n    if i\
    \ % 2 == 0\n      r.push(i.to_s)\n    else\n      r.push((i..1).reduce(:*))\n\
    \    end\n  end\n  r\nend", "    arr = []\n    for i in 1..n\n        if i % 2\
    \ == 0\n            arr << i*i\n        else\n            arr << i + 1\n    end\n\
    \    return arr\nend", "  return []\nend", "  if n is even\n    [1, 1]\n  else\n\
    \    i = 2\n    fact = i\n    while (i < n)\n      fact *= i\n      i += 1\n \
    \   [fact]\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
