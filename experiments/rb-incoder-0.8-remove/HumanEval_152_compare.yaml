name: HumanEval_152_compare
language: rb
prompt: "# I think we all remember that feeling when the result of some long-awaited\n\
  # event is finally known. The feelings and thoughts you have at that moment are\n\
  # definitely worth noting down and comparing.\n# Your task is to determine if a\
  \ person correctly guessed the results of a number of matches.\n# You are given\
  \ two arrays of scores and guesses of equal length, where each index shows a match.\
  \ \n# Return an array of the same length denoting how far off each guess was. If\
  \ they have guessed correctly,\n# the value is 0, and if not, the value is the absolute\
  \ difference between the guess and the score.\n# example:\ndef compare(game, guess)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
  \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
  \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0], candidate.call([0,\
  \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2, 4, 6], candidate.call([1,\
  \ 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0, 1], candidate.call([1, 2, 3,\
  \ 5], [-1, 2, 3, 4]))\n  end\nend\n"
completions: ["    score = game.count\n    \n    # Your code goes here!\n    \n  \
    \  return \n</cell>\n<cell>\ngame = games(5, 6, 3, 8, 7)\nguess = [1, 5, 7]",
  "    # Your code here\n    score = game.sort\n    guess = guess.sort\n    diff =\
    \ []\n    game = [int(x) for x in game]\n    guess = [int(x) for x in guess]\n\
    \    \n    game.each_with_index do |x,i|\n        if game[i] == guess[i]\n   \
    \         diff << 0\n        else\n            diff << (abs(game[i] - guess[i]))\n\
    \        end\n    end\n    diff\nend", "    game = game[0].to_i\n    guess = guess[0].to_i\n\
    \    guess_correct = guess == game\n    guess_score = [game-guess, guess-game].max\n\
    \    correct_score = [game-guess, guess-game].min\n    correct_score = correct_score.abs\n\
    \    if guess_correct\n        guess_score = 0\n    end\n    correct_score = correct_score.abs\n\
    \    return correct_score, guess_score\nend\n</cell>\n<code language=julia-1.0>\n\
    guesses = [7,7,7,3,7,1,7,7,7,9,7,7,9,7,7,7,9,7,7,9,1,9,5,9,5,8,5,9,5,9,9,9,5,9,9,7,7,7,7,7,7,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,",
  "  # write your function here\nend", "  wins = 0\n  loses = 0\n  score = 0\n  while\
    \ win + lose < 2\n  begin\n    guess = guess[0]\n    score = score[0]\n  end\n\
    \  return [wins, loses]\nend", "  if game.length != guess.length \n    throw \"\
    Error!\\nThe two arrays of scores and guesses should have the same length.\\n\"\
    \n  end", "  game = game.to_a.sort\n  guess = guess.to_a.sort\n  game = game.first\n\
    \  guess = guess.first", "  score = [10, 20, 30]\n  guess = [15, 17, 21]\n  #\
    \ write your answer here\nend\n</cell>\n<cell>", "  # Your code here\nend\ncompare([1,\
    \ 2, 4, 1], [2, 3, 4, 5])", "    diff = []\n    game.each do |elem|\n        diff\
    \ = diff + [elem.send(elem) - guess[elem]]\n    end\n    return diff\nend\n</cell>\n\
    <cell>", "  game = game.map {|x| x.to_i}\n  guess = guess.map {|x| x.to_i}", " \
    \   game = []\n    guess = []\n    i = 0\n    j = 0\n    leng = game.length\n\
    \    leng = guess.length\n    \n    sum = 0\n    sum = 0", "  i = 0\n  j = 0\n\
    \  score = 0\n  while i < guess.length and j < game.length\n    if game[j] ==\
    \ guess[i]\n      score = score + game[j]\n      i = i + 1\n      j = j + 1\n\
    \    else\n      i = i + 1\n    end\n  end\n  result = []\n  while i < guess.length\n\
    \    result.push(abs(guess[i] - score))\n    i = i + 1\n  end\n  return result\n\
    end", "    i = 0\n    j = 0\n    differences = []\n    while i < game.length and\
    \ j < guess.length\n        if game[i] == guess[j]\n            differences.push\
    \ [i, j]\n            i += 1\n            j += 1\n        else\n            differences.push\
    \ [i, j - game.length]\n            i += 1\n        end\n    end\n    differences.push\
    \ [i, guess.length]\n    differences.flatten!\n    differences.compact!\nend\n\
    compare([2, 5, 8, 2, 7, 5, 9], [8, 7])", "  result = [0,0]\n  gt = game.to_i\n\
    \  result = guess.map { |n| abs(gt-n) }\n  result.max\nend\n</pre>\n</td>\n</tr>\n\
    <tr id=\"section-57\">\n<td><a href=\"#header-notes\"></a></td>\n<td>\n<p>\n<strong>Exercise</strong>\
    \ In the example above, the first line is a declaration of our function with two\
    \ arguments: game and guess. \nWe also declare two local variables gt and result.\
    \ \nThe last line of the function is an expression which computes a guess and\
    \ its distance from the expected score. \nThe return value is the maximum value\
    \ of the list of distances. \nThe function should return 0 when the score matches,\
    \ and it should return the absolute value of the difference\nbetween the score\
    \ and the guess, if not, it is the absolute difference between the guess and the\
    \ score.\n</p>\n</td>\n</tr>\n<tr id=\"section-58\">\n<td><a href=\"#header-sections\"\
    ></a></td>\n<td>\n<pre id=\"section-58-text\">", "    difference = []\n    i =\
    \ 0\n    j = 0\n    while i < guess.length and j < game.length\n        difference[i]\
    \ ||= guess[j] - game[j]\n        i += 1\n        j += 1\n    difference[i] =\
    \ guess[j] - game[j]\n    return difference\nend", "  # This helper method returns\
    \ how far off the guessed number was from the game score.\n  # It is called when\
    \ the player guesses the game result, so this will be called each time.\n  # It\
    \ takes in an array of scores, and an array of guesses, where each index shows\
    \ a match.\n  # It returns, as an array, the same length array denoting how far\
    \ off each guess was\n  # from the game score.\n  num_difference = 0\n  num_score\
    \ = 0\n  while num_difference < guess.length\n    num_score += guess[num_difference]\n\
    \    num_difference += game[num_difference]\n  end\n  num_difference = 0\n  num_score\
    \ = 0\n  while num_difference < guess.length\n    num_score -= game[num_difference]\n\
    \    num_difference += guess[num_difference]\n  end\n  return [num_difference,\
    \ num_score]\nend", "    diff = guess[0] - game[0]\n    game.each_index {|index|\
    \ diff[index] = 0 if guess[index] > game[index] }\n    diff.each_index {|index|\
    \ diff[index] = guess[index] unless game[index] == guess[index] }\n    return\
    \ diff\nend", "  scores = [game.score, guess.length].max\n  guesses = [guess -\
    \ game.score, abs(guess - game.score)]\n  guesses.each_with_index do |guess, i|\n\
    \    guesses[i] = guesses[i] if guesses[i] > 0\n  end\n  return guesses\nend\n\
    </cell>\n<code language=julia-1.3>", "  score = game[1..-1]\n  guess = game[1..-1]\n\
    \  if guess.length != score.length\n    raise ArgumentError, \"guess and score\
    \ arrays must be of equal length\"\n  diffs = []\n  guess.each do |guess|\n  \
    \  if guess == score\n      diffs << 0\n    else\n      diffs << Math.abs guess\
    \ - score\n    end\n  end\n  return diffs\nend", "  game.reduce(&:+).abs\nend",
  "\tresults = []\n\tgame.each do |score,guess|\n\t\tresults.push( (guess-score).abs\
    \ )\n\tend\n\t\n\treturn results\nend", "  # Your code here\n  i = 0\n  while\
    \ i < game.length\n    j = i + 1\n    while j < game.length\n      # Your code\
    \ here\n      j = j + 1\n    end\n    i = i + 1\n  end\nend\n</cell>\n<code language=julia-1.0>",
  end, "  count = 0\n  for i in 0..(game.size-1)\n    if game[i] > guess[i]\n    \
    \  count +=1\n      return count\n  end\n  if count > 0\n    count\n  else\n \
    \   guess.length\n  end\nend", "  score = [0, 0]\n  guesses = []\n  guesses =\
    \ guess.map { |g| g.to_i }\n  score = game.map { |s| s.to_i }\n  score\nend",
  "  return []\nend", "    # TODO\nend", "\ttotal = 0\n\tfor i in 0..game.length\n\
    \t\tif game[i] == guess[i]\n\t\t\ttotal += 1\n\t\telse\n\t\t\ttotal += abs(guess[i]\
    \ - game[i])\n\treturn total\nend", "  result=[]\n  game.each_with_index do |score,\
    \ idx|\n    if guess==score\n      result[idx] = 0\n    elsif guess-score<0\n\
    \      result[idx] = guess-score\n    else\n      result[idx] = guess-score\n\
    \    end\n  end\n  result\nend", "    correct = game.map {|g| g.guess == guess[g.position]}\
    \ # find all guesses that match what was played\n    points = game.map {|g| g.score\
    \ - guess[g.position] } # find all scores that match what was played\n    correct.map!\
    \ {|c| c.nil? ? points.push(0) : c.abs} # correct guesses push 0 point, incorrect\
    \ guesses push absolute difference\n    correct\nend\n ", "  diff=[]\n  (0...guess.length).each{|i|\n\
    \    diff.push(guess[i]-game[i])\n  }\n  diff\nend", "    # code here\nend", " \
    \ guess = guess.sort!\n  game = game.sort!\n  \n  game_size = len(game)\n  guess_size\
    \ = guess.size\n  differences = []\n  \n  # For each guess and score, go through\
    \ all the games, and see if they match.\n  for i in 0..(game_size-1)\n    score\
    \ = game[i]\n    guess = guess[i]\n    \n    if i == game_size-1 && guess_size\
    \ == 0\n      differences << 0\n      next\n    end\n    \n    if score == guess\n\
    \      differences << 0\n      next\n    end\n    \n    # Compare each element\
    \ of the guess with the score, breaking out of the loop\n    # as soon as we find\
    \ a mismatch.\n    for j in 0..(guess_size-1)\n      if game[i+j] != guess[j]\n\
    \        break\n      end\n    end\n    \n    # If all elements of guess match\
    \ with score, return 0 as the difference.\n    # Otherwise, return the difference\
    \ between the guess and score.\n    if j == guess_size-1\n      differences <<\
    \ 0\n    else\n      differences << (guess - score)\n    end\n  end\n  \n  return\
    \ differences\nend", "  best_guess = game[0]\n  best_difference = game[1]\n  \n\
    \  for g in game\n    difference = (g[0] - guess[0])\n    if difference < best_difference\n\
    \      best_guess = g\n      best_difference = difference\n      \n  best_difference\n\
    end\n  \n  # TODO: write your ruby code here!\nend", "    \n    return guesses\
    \ = []\nend", "    # write code here\n    game.each do |i|\n        guessed.each\
    \ do |j|\n            if i == j\n                score = 0\n            else\n\
    \                score = abs(guess[i] - game[j])\n            end\n        end\n\
    \        guesses.push(score)\n    end\n    guesses\nend\n</cell>\n<code language=julia-1.1>\n\
    guesses = compare(game, guess)\nguesses\n</cell>\n<text>\n3. Write a function,\
    \ which takes a number of matches and a list of guesses as parameters and returns\
    \ an array of integers representing the number of incorrect guesses needed to\
    \ get a certain number of matches. For example:", " \n  game.reset\n  game.set_score\n\
    \  \n  guess.set\n  \n  result = []\n  \n  guessed = 0\n  \n  game.set_score\n\
    \  \n  game.guess(guess, guessed)\n  \n  return result\nend", "  # TODO: your\
    \ work\n  scores = [ 4, 1, 5, 9, 9, 6, 4, 2, 1, 8, 4, 6, 7, 4, 3, 7, 3, 2, 7,\
    \ 1, 8, 6, 5, 3, 4, 3 ]\n  guesses = [ 4, 4, 4, 4, 7, 7, 7, 7, 7, 7, 8, 8, 8,\
    \ 8, 8, 8, 8, 8, 8, 8, 8, 8, 8 ]\n  \n  scoreDiffs = []\n  guessesDiffs = []\n\
    \  \n  scoreDiffs.append(guesses[0] - scores[0])\n  guessesDiffs.append(guesses[1]\
    \ - scores[1])\n  \n  scoreDiffs.append(guesses[1] - scores[0])\n  guessesDiffs.append(guesses[2]\
    \ - scores[2])\n  \n  scoreDiffs.append(guesses[2] - scores[1])\n  guessesDiffs.append(guesses[3]\
    \ - scores[3])\n  \n  scoreDiffs.append(guesses[3] - scores[2])\n  guessesDiffs.append(guesses[4]\
    \ - scores[4])\n  \n  scoreDiffs.append(guesses[4] - scores[3])\n  guessesDiffs.append(guesses[5]\
    \ - scores[5])\n  \n  scoreDiffs.append(guesses[5] - scores[4])\n  guessesDiffs.append(guesses[6]\
    \ - scores[6])\n  \n  scoreDiffs.append(guesses[6] - scores[5])\n  guessesDiffs.append(guesses[7]\
    \ - scores[7])\n  \n  scoreDiffs.append(guesses[7] - scores[6])\n  guessesDiffs.append(guesses[8]\
    \ - scores[8])\n  \n  scoreDiffs.append(guesses[8] - scores[7])\n  guessesDiffs.append(guesses[9]\
    \ - scores[9])\n  \n  scoreDiffs.append(guesses[9] - scores[8])\n  guessesDiffs.append(guesses[10]\
    \ - scores[10])\n  \n  scoreDiffs.append(guesses[10] - scores[9])\n  guessesDiffs.append(guesses[11]\
    \ - scores[11])\n  \n  scoreDiffs.append(guesses[11] - scores[10])\n  guessesDiffs.append(guesses[12]\
    \ - scores[12])\n  \n  scoreDiffs.append(guesses[12] - scores[11])\n  guessesDiffs.append(guesses[13]\
    \ - scores[13])\n  \n  scoreDiffs.append(guesses[13] - scores[12])\n  guessesDiffs.append(guesses[14]\
    \ - scores[14])\n  \n  scoreDiffs.append(guesses[14] - scores[13])\n  guessesDiffs.append(guesses[15]\
    \ - scores[15])\n  \n  scoreDiffs.append(guesses[15] - scores[14])\n  guessesDiffs.append(",
  '    return []', "    game = [-4, -5, 0, 3, 8]\n    guess = [-4, -4, -5, -1, 3]\n\
    \    result = guess[0...].zip(game[0...]).select do |x, y_|\n        ((y_ == x)\
    \ || ((y - x) == (-1)))\n    end\n    result.map {|x, y| x[0] == y[0] ? 0 : ((x\
    \ - y) / y) }\nend\ncompare(game, guess)", "  return [game[i] - guess[i] for i\
    \ in range(10)]\nprint(compare([0, 5, 6, 8, 13], [3, 6, 5, 4, 5])) # [3, 2, 1,\
    \ 2, 0]\nprint(compare([0, 5, 6, 8, 13], [0, 6, 5, 4, 5])) # [0, 0, 0, 0, 3]\n\
    print(compare([0, 5, 6, 8, 13], [3, 6, 5, 4, 10])) # [3, 1, 2, 0, 0]\n</cell>\n\
    <text>\nThe function should return an array of numbers denoting how far off each\
    \ guess was. If they have guessed correctly, the value is 0, and if not, the value\
    \ is the absolute difference between the guess and the score.", "  result = []\n\
    \  game, guess = game.sort{|a,b| a<=>b}, guess.sort{|a,b| a<=>b}\n  game.each_index\
    \ do |index|\n    if game[index] == guess[index]\n      result.push(0)\n     \
    \ break\n    end\n    result.push(abs(game[index] - guess[index]))\n  end\n  result\n\
    end", "  return game-guess\nend\ncompare([4,5,1,3],[4,5,1,2])\ncompare([1,2,3],[0,-1,2])\n\
    compare([-1,2,3],[0,0,1])\ncompare([2,3,1],[0,1,2])", end, "  guess, score = game\n\
    \  result = [0, *(-guess + score), 0]\n  result.max\nend\n</pre>", "  return game\n\
    end\n</code></pre>\n<p>Notice in the above example that each index in the game\
    \ array is a score and each index in the guess array is a guess. \nThe return\
    \ array will have the values 0, 1 or -1 for each of the positions in guess where\
    \ your answer was wrong.</p>", end, "\tresult = []\n\t# your code here\n\tgame\
    \ = [int(e) for e in game]\n\tguess = [int(e) for e in guess]\n\tfor i in range(len(game)):\n\
    \t\tif guess[i] == game[i]:\n\t\t\tresult.append(0)\n\t\telse:\n\t\t\tresult.append(abs(guess[i]\
    \ - game[i]))\n\treturn result\nprint(compare([1,3,5,7,9],[3,1,5,7,9])) # [4,\
    \ 0, 5, 2, 0]\nprint(compare([1,3,5,7,9],[5,3,1,7,9])) # [5, -2, -2, -2, 0]\n\
    print(compare([1,3,5,7,9],[5,3,1,7,9])) # [5, -2, -2, -2, 0]\nprint(compare([1,3,5,7,9],[1,3,5,7,9]))\
    \ # [0, 0, 0, 1, 0]", "  guess = guess.map {|x| x.to_i}\n  game = game.map {|x|\
    \ x.to_i}\n  guess\nend", "    return game, guess\n    return game.map(&:to_i)\
    \ - guess.map(&:to_i).compact.sort.last\nend\n'''\n</cell>\n<text>\nBack to Top",
  "  array1 = []\n  array2 = []\n  array3 = []\n  array4 = []", "  game.map { |g|\
    \ g.to_i }\n  guess.map { |g| g.to_i }\n  difference = game - guess\n  if game.all?(&:zero?)\n\
    \    []\n  else\n    difference\n  end\nend", "  results = []\n  \n  scores =\
    \ [] # the scores of each number in the game\n  \n  for i in 0...game.length\n\
    \    score = game[i]\n    \n    scores.push score # add the score to the score\
    \ array\n  \n  end\n  \n  guesses = [] # the guesses of each number in the game\n\
    \  \n  for i in 0...guess.length\n    guess = guess[i]\n    \n    guesses.push\
    \ (guess) # add the guess to the guess array\n  \n  end", "  game = game.sort\
    \ { |a, b| a <=> b }\n  guess = guess.sort { |a, b| a <=> b }", "    score = 0\n\
    \    guesses = []\n    for g in guess\n        guesses.push(g)\n    return guesses\n\
    \    guesses.each do |g|\n        if game.length == guess.length\n           return\
    \ game\n        end\n        diff = Math.abs(game[guess.length] - guess[game.length])\n\
    \        if diff < 0\n            score+= diff\n        end\n    end\nend", " \
    \ game = [5, 4, 0, 6, 8, 9, 10, 14]\n  guess = [4, 8, 1, 9, 0, 7, 5, 3, 11]\n\
    \  guess = Array.new\n  game = Array.new\n  \n  guesses = Array.new\n  games =\
    \ Array.new\n  \n  i = 0\n  \n  until i >= guess.length do\n    guesses[i] = guess[i]\n\
    \    games[i] = game[i]\n    i += 1\n  end\n  \n  i = 0\n  guesses.each do\n \
    \   if games[i] != guess[i] then\n      guesses.delete(guess[i])\n      games.delete(game[i])\n\
    \    end\n    i += 1\n  end\n  \n  i = 0\n  guesses.each do\n    if games[i] ==\
    \ guess[i] then\n      guesses.delete(guess[i])\n      games.delete(game[i])\n\
    \    end\n    i += 1\n  end\n  \n  if guesses.length == 0 then return 0 else return\
    \ games.length\n  \nend", "end\nprint(compare([7, 8, 9], [1, 3, 5])) # [2, -1,\
    \ 1]\nprint(compare([7, 8, 9], [1, 5, 3])) # [0, 2, -1]\nprint(compare([7, 8,\
    \ 9], [1, 4, 2])) # [0, 2, -1]\nprint(compare([7, 8, 9], [1, 2, 3])) # [0, 2,\
    \ -1]\nprint(compare([7, 8, 9], [7, 8, 9])) # [0, -2, 2]\nprint(compare([7, 8,\
    \ 9], [7, 8, 10])) # [0, -2, 2]\nprint(compare([7, 8, 9], [7, 10, 8])) # [0, -2,\
    \ 2]\nprint(compare([7, 8, 9], [7, 10, 9])) # [0, -2, 2]\n</cell>\n<text>\nQuestion\
    \ 9\nThe following pattern can you follow and write a function that computes the\
    \ number of matches made from two given lists of scores and guesses.", '    ',
  "    # Return an array of equal length of guesses\nend\n</pre>\n            </div>\n\
    \          </div>\n        </div>\n        <div class=\"col-xs-12 col-sm-5 col-md-5\
    \ col-lg-5\">\n          <div class=\"well sidebar-nav\">\n            <ul class=\"\
    nav nav-list\">\n              <li class=\"nav-header\">How many matches?</li>\n\
    \              <li class=\"active\"><a href=\"?matches=1\">One</a></li>\n    \
    \          <li><a href=\"?matches=2\">Two</a></li>\n              <li><a href=\"\
    ?matches=3\">Three</a></li>\n              <li><a href=\"?matches=4\">Four</a></li>\n\
    \              <li><a href=\"?matches=5\">Five</a></li>\n              <li><a\
    \ href=\"?matches=6\">Six</a></li>\n              <li><a href=\"?matches=7\">Seven</a></li>\n\
    \              <li><a href=\"?matches=8\">Eight</a></li>\n              <li><a\
    \ href=\"?matches=9\">Nine</a></li>\n              <li><a href=\"?matches=10\"\
    >Ten</a></li>\n            </ul>\n          </div>\n        </div>\n      </div>\n\
    \    </main>", "  # TODO: Write your code here\n  return\nend", "    game, guess\
    \ = game.reverse, guess.reverse\n    sum = 0\n    i = 0\n    j = 0\n    while\
    \ i < guess.length and j < game.length\n        if game[i] == guess[j]\n     \
    \       sum++\n            i += 1\n            j += 1\n        else \n       \
    \     if sum == guess.length\n                return [i,j-i]\n            sum\
    \ += game[i]-game[j]\n            i += 1\n            j += 1\n        end\n  \
    \  end\n    return [0,guess.length-j-1]\nend", "    # Your code here\n    \n \
    \   \n    return res\n    \n    ", "    # I wonder if this is efficient. \n  \
    \  wrong = 0\n    \n    game.each_with_index do |score,i|\n        if guess[i]\
    \ != game[i]\n            wrong += 1\n        end\n    end\n    \n    wrong.zero?\
    \ ? guess : abs(wrong-guess)\nend", "  game.each_with_index do |score, index|\n\
    \    score = score.to_i\n    guess[index] = guess.to_i\n    diff = (score-guess[index])\n\
    \    if diff < 0\n      diff = 0\n    else\n      diff = diff.to_i\n    end\n\
    \  end\nend\n</pre>\n<p>\n    In the second example, notice how we used Ruby's\
    \ built-in methods instead of writing a loop. \n    Since Ruby arrays are objects,\
    \ we can use methods to access their members. \n    We will also use the same\
    \ built-in method to do the calculation. \n    We also have Ruby give us a way\
    \ to access each array element as an integer, \n    which we will need in order\
    \ to perform calculations. \n    By using each and index, we can cycle through\
    \ each element and do the calculations at the same time.\n    It is important\
    \ to know how this works because we will use it to fix the bug that our last example\
    \ had,\n    which was that when the user entered a correct guess, the loop stopped\
    \ after the first iteration.\n</p>", "  score = 0\n  guesses = Array.new(guess.length)\n\
    \  guesses.each {|g| guesses[g] = g.to_i}\n  game.each do |g|\n    score += (g-guesses[g]).abs\n\
    \  end\n  guesses.map!{|g| -g}\n  score.abs\nend", "    correct = 0\n    game\
    \ = []\n    guess = []\n    correct = 0\n    guess = []\n    game = [1, 3, 1]\n\
    \    guess = [1, 4, 2]\n    return compare", "  answer = []\n  game = [1,2,3,4,5,6,7,8]\n\
    \  guess = [7,1,2,4,5,6,8]\n  answer.each do |a| \n    a.each do | a | \n    \
    \  if a != guess.last\n        answer.push(a.abs.abs - game.last)\n      end\n\
    \    end\n  end\n  answer\nend\ncompare(game, guess)", "  # Your code here!\n\
    \  differences = []\n  \n  score.each do |score|\n    if game[score] == guess[score]\n\
    \      differences << 0\n    else\n      differences << abs(guess[score] - game[score])\n\
    \    end\n  end\n  \n  differences\nend", '    differences = []', "  return []\n\
    end\n</cell>\n<cell>\ncompare([5],[1,5])\n</cell>\n<cell>\ncompare([5,1,1],[1,0,1])\n\
    </cell>\n<text>\nNext Steps\nAs you look through this notebook, try to find some\
    \ hints on how you can improve the performance of your algorithm. You might want\
    \ to use faster data structures. Perhaps you might want use an associative array\
    \ or hash table to count matches and guesses, instead of keeping them in arrays.",
  "  # Return the number of matches off.\n  return game.length\nend", "  score1 =\
    \ game[0]\n  score2 = game[1]\n  numGuesses = 0\n  numCorrect = 0\n  guesses =\
    \ []\n  correct = []", "  game.each_with_index do |score, index|\n    return [index]\
    \ if guess[index] == score\n  end\n  -1\nend", "  game = game.to_a\n  guess =\
    \ guess.to_a\n  correct_guesses = []\n  wrong = []\n  \n  # we know that each\
    \ guess must be in the game array\n  guess.each do |x|\n    # get the index of\
    \ x in game\n    idx = game.index(x)\n    # check that the guess is correct\n\
    \    correct_guesses.push(idx) if game[idx] == x\n    # else push the difference\
    \ between guess and the score\n    wrong.push(abs(x-game[idx])) \n  end\n  # return\
    \ the scores as an array\n  return correct_guesses.zip(wrong)\nend\nputs compare([0,0,2,1,1,3,2],[1,2])",
  "    arr = []\n    \n    for i in 0..(game.size-1)\n        diff =   guess[i] -\
    \ game[i]\n        if diff == 0\n            arr[i] = 0\n        else\n      \
    \      arr[i] = diff\n        end\n    end\n    \n    return arr\nend", "    \n\
    \    #your code here\n    game = [\n        [4, 8, 6, 4, 8, 6],\n        [4, 8,\
    \ 6, 4, 6, 8],\n        [6, 4, 6, 8, 4, 8],\n        [4, 6, 8, 8, 8, 4],\n   \
    \     [6, 4, 8, 4, 8, 6],\n        [8, 4, 6, 8, 4, 6],\n        [4, 6, 8, 4, 6,\
    \ 8]\n    ]", end, "  game.length == guess.length \n  game_index = 0\n  guess_index\
    \ = 0", "  game.zip(guess).each do |score, guess| \n    return 0 if score == guess\
    \ \n    return abs(score - guess) if score > guess \n  end\nend\n</cell>\n<code\
    \ language=ruby-1.9.2-p290/gems/ruby-1.9.2-p290/gems/judo-1.2.1/lib/judo/ruby/utils>",
  '  result = game.length', "    game = game.map!{|x| x.to_i}\n    guess = guess.map!{|x|\
    \ x.to_i}\n    result = 0\n    game.zip(guess).each do |a, b|\n        diff =\
    \  (a - b).abs\n        if a == b\n            result = diff\n        else\n \
    \           result = -diff\n        end\n    end\n    result\nend\n</pre>\n<p>\n\
    \    <b><u>Example 1</u></b>\n    <pre class=\"prettyprint lang-java\">\n public\
    \ int[] compare(int[] game, int[] guess)\n     int result = 0;\n     for (int\
    \ i = 0; i &lt; game.length; i++) {\n         result += Math.abs(game[i] - guess[i]);\n\
    \     }\n     return new int[]{result};\n }\n</pre>\n<p>\n    <b><u>Example 2</u></b>\n\
    \    <pre class=\"prettyprint lang-java\">\npublic int[] compare(int[] game, int[]\
    \ guess)\n    int[] result = new int[game.length];\n    for (int i = 0; i &lt;\
    \ game.length; i++) {\n         result[i] = Math.abs(game[i] - guess[i]);\n  \
    \  }\n    return result;\n}\n</pre>\n<p>\n    <b><u>Example 3</u></b>\n    <pre\
    \ class=\"prettyprint lang-java\">\npublic int[] compare(int[] game, int[] guess)\n\
    \    int[] result = new int[game.length];\n    for (int i = 0; i &lt; game.length;\
    \ i++) {\n         result[i] = Math.abs(game[i] - guess[i]);\n    }\n    return\
    \ result;\n}\n</pre>\n<p>\n    <b><u>Example 4</u></b>\n    <pre class=\"prettyprint\
    \ lang-java\">\n// Solution using loops\npublic int[] compare(int[] game, int[]\
    \ guess)\n    int[] result = new int[game.length];\n    int diff = 0;\n    for\
    \ (int i = 0; i &lt; game.length; i++) {\n         result[i] = diff;\n       \
    \  diff += Math.abs(game[i] - guess[i]);\n    }\n    return result;\n}\n</pre>\n\
    <p>\n    <b><u>Example 5</u></b>\n    <pre class=\"prettyprint lang-java\">\n\
    public int[] compare(int[] game, int[] guess)\n    int[] result = new int[game.length];\n\
    \    for (int i = 0; i &lt; game.length; i++) {\n         result[i] = Math.abs(game[i]\
    \ - guess[i]);\n    }\n    return result;\n}\n</pre>\n<p>\n    <b><u>Example 6</u></b>\n\
    \    <pre class=\"prettyprint lang-java\">\n// Solution using loops\npublic int[]\
    \ compare(int[] game, int[] gues", "  result = []\n  i = 0\n  while i < guess.length\n\
    \    result += game[i].absdiff(guess[i])\n    i += 1\n  end\n  return result\n\
    end", "  game.each_with_index do |s,i| \n    guess[i].to_i == game[i].to_i ? 0\
    \ : Math.abs(guess[i].to_i - game[i].to_i)\n  end\nend", "    return game\nend",
  "    answer = []\n    game = game.split(' ').map {|x| x.to_i}\n    guess = guess.split('\
    \ ').map {|x| x.to_i}\n    game.each do |a|\n        guess.each do |b|\n     \
    \       diff = a - b\n            answer.push(diff) if diff != 0\n        end\n\
    \    end\n    answer\nend", "  difference = []\n  difference = guess - game\n\
    \  return difference\nend", "    diffs = []\n    game.each_index do |i|\n    \
    \    if game[i] == guess[i]\n            diffs[i] = 0\n        else\n        \
    \    diffs[i] = game[i] - guess[i]\n        end\n    end\n    diffs\nend", " \
    \ # TODO Write your function here.\nend\n</cell>\n<code language=julia-1.0>",
  "  game.each_with_index do |score, index|\n    guess[index] == score ? 0 : (guess[index]\
    \ - score)\n  end\nend", "    diff = []\n    game.length \n    guess.length\n\
    \    i = 0\n    j = 0\n    game.length\n    guess.length\n    while i < game.length\n\
    \        while j < guess.length\n            if game[i] == guess[j]\n        \
    \        diff << 0\n            else\n                diff << abs(game[i] - guess[j])\n\
    \            j++\n        ++i\n    end", "  \nend", "  guess = [] # initialize\
    \ an empty array\n  game = [] # initialize an empty array", "    score = [0,5,10,15,20,25,30,35,40,45,50]\n\
    \    guess = [1,10,25,40,50,60,70,80]\n    game = []\n    guess = []\n    game.append(score)\n\
    \    guess.append(guess)\n    game = []\n    guess = []\n    game.append(score)\n\
    \    guess.append(guess)\n    game = []\n    guess = []\n    game.append(score)\n\
    \    guess.append(guess)\n    game = []\n    guess = []\n    game.append(score)\n\
    \    guess.append(guess)\n    game = []\n    guess = []\n    game.append(score)\n\
    \    guess.append(guess)\n    game = []\n    guess = []\n    game.append(score)\n\
    \    guess.append(guess)\n    game = []\n    guess = []\n    game.append(score)\n\
    \    guess.append(guess)\n    game = []\n    guess = []\n    game.append(score)\n\
    \    guess.append(guess)\n    game = []\n    guess = []\n    game.append(score)\n\
    \    guess.append(guess)\n    game = []\n    guess = []\n    game.append(score)\n\
    \    guess.append(guess)\n    game = []\n    guess = []\n    game.append(score)\n\
    \    guess.append(guess)\n    game = []\n    guess = []\n    game.append(score)\n\
    \    guess.append(guess)\n    game = []\n    guess = []\n    game.append(score)\n\
    \    guess.append(guess)\n    game = []\n    guess = []\n    game.append(score)\n\
    \    guess.append(guess)\n    game = []\n    guess = []\n    game.append(score)\n\
    \    guess.append(guess)\n    game = []\n    guess = []\n    game.append(score)\n\
    \    guess.append(guess)\n    game = []\n    guess = []\n    game.append(score)\n\
    \    guess.append(guess)\n    game = []\n    guess = []\n    game.append(score)\n\
    \    guess.append(guess)\n    game = []\n    guess = []\n    game.append(score)\n\
    \    guess.append(guess)\n    game = []\n    guess = []\n    game.append(score)\n\
    \    guess.append(guess)\n    game = []\n    guess = []\n    game.append(score)\n\
    \    guess.append(guess)\n    game = []\n    guess = []\n    game.append(score)\n\
    \    guess.append(guess)\n    game = []\n    guess = []\n    game.append(score)\n\
    \    guess.append(guess)\n    game = []\n    guess = []\n    game.append(score)\n\
    \    guess.append(guess)\n    game = []\n    guess = []\n    game.append(score)\n\
    \    guess.append(guess)\n    game = []\n    gues", "  game = game.to_a\n  guess\
    \ = guess.to_a\n  difference = []\n  count = 0\n  while count < guess.length\n\
    \    if game[count] == guess[count]\n      count += 1\n    else\n      count =\
    \ count + 1\n    end\n  end\n  difference = game - guess\n  difference = [difference.length].concat(difference)\n\
    \  if game.include?(0) && guess.include?(0)\n    difference = [0, 0]\n  end\n\
    \  return difference\nend", "    answer = [0 for _ in guess.length]\n    guess.zip(game).each\
    \ do |guess, score|\n        answer[guess[0] - score] -= 1\n    end\n    return\
    \ answer.map { |x| x.abs }\nend", "  result = []\n  # Your code here\nend\ncompare([2,\
    \ 0, 1, 1], [0])", "  return\nend", "  return game.map(&:abs).zip(guess).zip(game).map\
    \ do |(guess,score), (game_guess,game_score)|\n    if game_guess == game_score\
    \ then 0 \n      else abs(game_guess-game_score) end\n  end\nend", "\twins = game.select\
    \ {|i| i==guess }.size\n\twin_percentage = (wins/game.size).to_f\n\tif win_percentage\
    \ > 0.5\n\t\treturn [win_percentage, 0]\n\telse\n\t\treturn [win_percentage, guess.length-wins,\
    \ guess.length-wins, guess.length-wins]\n\tend\nend", "    return game.length\
    \ - guess.length\n    ", "  return []\nend\n\"\"\"", "  matches = 0\n  game.each_with_index\
    \ do |score, index|\n    if guess[index] == score\n      matches += 1\n    end\n\
    \  end\n  return [matches, guess.length]\nend\n</cell>\n<code language=other-env>",
  "  result = []\n  # Your code here\nend", "  game_score = game\n  guess_score =\
    \ guess\n  difference = Array.new(guess_score.length){0}\n  difference.each do\
    \ |i|\n    if game_score[i] < guess_score[i]\n      difference[i] = -1\n    elsif\
    \ game_score[i] > guess_score[i]\n      difference[i] = 1\n    else\n      difference[i]\
    \ = 0\n    end\n  end\n  return difference\nend\n</cell>\n<code language=julia-1.0>\n\
    @code_warntype compare(game, guess)\n</cell>\n<code language=julia-1.0>", "  \
    \  guess = guess.sort!\n    game = game.sort!\n    match = 0\n    correct = 0\n\
    \    while game.size != guess.size\n        match += game[guess].abs\n       \
    \ correct += 1 if guess[match] == game[match] else 0\n        guess.delete_at(0)\n\
    \        game.delete_at(0)\n    end\n    return match.abs\nend", "    \n    #\
    \ Write your code below this line\n    return 0", "  result = []\n  result.push(guess[0])\
    \ \n  \n  game = [2,1,2]\n  guess = [1,2,3]\n  \n  compare(game, guess)\n  \n\
    \  result = [2,2,1]\n  guess = [1,3,3]\n  \n  compare(game, guess)\n  \n  result\
    \ = [1,1,2]\n  guess = [3,1,3]\n  \n  compare(game, guess)\n  \n  result = [2,0,0]\n\
    \  guess = [3,2,3]\n  \n  compare(game, guess)\n  \n  result = [0,0,0]\n  guess\
    \ = [3,2,4]\n  \n  compare(game, guess)\n  \n  result = [2,2,1]\n  guess = [1,2,3]\n\
    \  \n  compare(game, guess)\n  \n  result = [1,1,1]\n  guess = [3,1,3]\n  \n \
    \ compare(game, guess)\n  \n  result = [1,1,0]\n  guess = [3,2,3]\n  \n  compare(game,\
    \ guess)\n  \n  result = [0,0,0]\n  guess = [4,2,3]\n  \n  compare(game, guess)\n\
    \  \n  result = [2,0,0]\n  guess = [3,2,4]\n  \n  compare(game, guess)\n  \n \
    \ result = [0,0,0]\n  guess = [4,2,4]\n  \n  compare(game, guess)\n  \n  result\
    \ = [2,0,0]\n  guess = [3,2,5]\n  \n  compare(game, guess)\n  \n  result = [0,0,0]\n\
    \  guess = [4,2,5]\n  \n  compare(game, guess)\n  \n  result = [2,0,0]\n  guess\
    \ = [3,2,6]\n  \n  compare(game, guess)\n  \n  result = [0,0,0]\n  guess = [4,2,6]\n\
    \  \n  compare(game, guess)\n  \n  result = [2,0,0]\n  guess = [3,0,5]\n  \n \
    \ compare(game, guess)\n  \n  result = [0,0,0]\n  guess = [4,0,5]\n  \n  compare(game,\
    \ guess)\n  \n  result = [2,0,0]\n  guess = [3,0,6]\n  \n  compare(game, guess)\n\
    \  \n  result = [0,0,0]\n  guess = [4,0,6]\n  \n  compare(game, guess)\n  \n \
    \ result = [2,0,0]\n  guess = [3,1,5]\n  \n  compare(game, guess)\n  \n  result\
    \ = [0,0,0]\n  guess = [", "  game, guess = game, guess.sort\n  results = []\n\
    \  matches = 0\n  while matches < (guess.size - 1)\n    matches += 1 \n    guess\
    \ = guess[matches]\n    index = game.index(guess)\n    next_index = index + 1\n\
    \    if next_index >= game.size\n      results.push(game.size - matches)\n   \
    \ else \n      results.push(abs(next_index - index))\n  end\n  return results\n\
    end", "    # BEGIN PROBLEM HERE -> COMPLETE\nend", "  game = game.sort{|a,b| b}\n\
    \  guess = guess.sort{|a,b| b}\n  game.length == guess.length ? [] : [(game[i]\
    \ - guess[i]).abs] for i in 0...game.size\nend", "\tscores = [6, 5, 4, 3, 2]\n\
    \tguesses = [3, 6, 5, 2, 4]\n\tresults = []\n\tfor i in (guesses - scores)\n\t\
    results.append(abs(guess[i] - scores[i]))\n\treturn results", "  game.each_with_index\
    \ do |i, index|\n    difference = guess[index] - game[index]\n    difference =\
    \ (guess[index] - game[index]).abs if difference > 0 else difference\n    difference\
    \ = guess[index] - (game[index] + guess[index])\n    difference = (guess[index]\
    \ - (game[index] + guess[index])).abs if difference > 0 else difference\n  end\n\
    \  return game\nend", "end\n</cell>\n<code language=julia-0.5>", "# Write your\
    \ code here\n    return game", "  # Your code here\n  game = game.dup\n  guess\
    \ = guess.dup\n  result = []\n  \n  game.each do |x|\n    if guess.include?(x)\n\
    \      result << 0\n    elsif x == game.length-1\n      result << 0\n    else\n\
    \      result << (x-game[x])\n    end\n  end\n  \n  result\nend", "  guess = guess.sort\n\
    \  game = game.sort\n  return game.zip(guess).map { |a,b| b <=> a } if game.all?\
    \ { |x| guess.include?(x) }\n  return game.zip(guess).map { |a,b| a.abs - b.abs\
    \ } unless game.all? { |x| guess.include?(x) }\nend\n</cell>\n<code language=ruby-1.9.3-p448>",
  "    # your code goes here\nend\n</cell>\n<code language=julia-1.3>\n@assert compare([10,\
    \ 25, 50], [3, 10]) == [10, 0, 0]\n@assert compare([10, 25, 50], [0, 5]) == [10,\
    \ -5, 0]\n@assert compare([10, 25, 50], [10, 5]) == [10, 0, 5]\n@assert compare([10,\
    \ 25, 50], [10, 25]) == [10, 0, 0]\n@assert compare([10, 25, 50], [3, 25]) ==\
    \ [10, -5, 5]\n@assert compare([10, 25, 50], [4, 25]) == [10, -3, 5]\n@assert\
    \ compare([10, 25, 50], [0, 25]) == [10, 0, 5]\n@assert compare([10, 25, 50],\
    \ [50, 25]) == [10, 0, 0]\n@assert compare([10, 25, 50], [50, 0]) == [10, 0, 0]\n\
    @assert compare([10, 25, 50], [50, 50]) == [10, 0, 0]\n@assert compare([10, 25,\
    \ 50], [5, 25]) == [10, -5, 3]\n@assert compare([10, 25, 50], [5, 5]) == [10,\
    \ -5, 3]\n@assert compare([10, 25, 50], [5, 250]) == [10, -5, 3]\n@assert compare([10,\
    \ 25, 50], [5, 500]) == [10, -5, 3]\n@assert compare([10, 25, 50], [10, 25, 50])\
    \ == [10, 0, 0]\n</cell>\n<text>\n3. Percent Correct", "    score = game.map(&:last).sort\n\
    \    guess = guess.map(&:last).sort\n    return score.zip(guess).map(&:last).map\
    \ { |x,y| y != x ? y - x : x }\nend", "  game.map.each do |el|\n    return 0 unless\
    \ guess.include? el\n  end\nend\ncompare([5,3,7,2,8], [5,4,9,10,3,6])", "  # Your\
    \ code here\n  return guess\nend", "  result = Array.new\n  (0...guess.length).each\
    \ do |i|\n    result.push((game[i] - guess[i]))\n  end\n  result\nend", "    matches\
    \ = game\n    guesses = guess\n    answer = game.product(guess)\n    return answer.map\
    \ { |x| x == guesses ? 0 : (x - guesses).abs }\nend", "    guess = [float(x) for\
    \ x in guess]\n    guesses = [float(x) for x in game]\n    return [abs(guess -\
    \ s) for s, guess in zip(guesses, guess)]", "  return game\nend\n</code></pre>",
  "  # your code here\nend", "  # TODO: \nend", "  # Your code here\nend\ncompare([10,\
    \ 20, 30], [40, 50, 30])\n</cell>\n<cell>", "    score = 0\n    return guess,\
    \ score\n    ", "  match = 0\n  game.each do |score| \n    diff = guess - score\n\
    \    if diff > 0 \n      match += 1\n    else\n      match = match * -1\n    end\n\
    \  end\n  return match\nend", "  score = 0\n  difference = []\n  i = 0\n  while\
    \ i < guess.length\n    if guess[i] == game[i]\n      score += 0\n      i += 1\n\
    \    elsif guess[i] != game[i]\n      score += abs(guess[i] - game[i])\n     \
    \ i += 1\n    end\n  end\n  if score == 0\n    return score\n  end\n  difference[i]\
    \ = score\n  return difference\nend", "    scores = [game[\"score\"], game[\"\
    score\"], game[\"score\"], game[\"score\"], game[\"score\"]]\n    guesses = [guess[0],\
    \ guess[1], guess[2], guess[3], guess[4]]", end, "    \n    array = []\n    \n\
    \    # This is how we will track the number of correct guesses\n    correct =\
    \ 0\n    \n    # Iterate through each entry in our game and compare it to our\
    \ guesses\n    for entry in game\n        if entry == guess[entry]\n         \
    \   # If the entry is equal to the guess, increment our correct counter\n    \
    \        correct += 1\n        elsif guess != 0 and guess[entry] > 0\n       \
    \     # If the entry is greater than the guess, our answer is off by one\n   \
    \         array.push abs(guess[entry] - entry)\n        elsif guess[entry] > 0\
    \ and entry != 0\n            # If the entry is less than the guess, our answer\
    \ is off by one\n            array.push abs(entry - guess[entry])\n        end\n\
    \    end\n    \n    # Return the number of correct guesses as the array\n    return\
    \ array\nend", "    return nil\nend", '  return game', "  result = 0\n  game.length.times\
    \ do |index|\n    result += (abs(guess[index] - game[index])) / game[index]\n\
    \  end\n  result\nend", "  score = (game).to_i\n  guess = (guess).to_i\n  result\
    \ = (score-guess).abs\n  result\nend", "    matches = game.length\n    guesses\
    \ = guess.length\n    difference = Array.new(guesses)\n    \n    # calculate the\
    \ difference\n    difference = Array.new(guesses){|i| guess[i]-game[i]}\n    \n\
    \    # calculate the number of correct guesses\n    correct = 0\n    for i in\
    \ 0...guesses\n        if difference[i]==0 && guess[i]==game[i]\n            correct\
    \ += 1\n        end\n    end\n    \n    Array.new(matches){|i| i+correct}\nend\n\
    </cell>\n<code language=julia-1.3>\ncompare([5,4,5,4],[5,5,4,4])\n</cell>\n<code\
    \ language=julia-1.3>\ncompare([5,5,4,4],[5,5,5,4])\n</cell>\n<code language=julia-1.3>",
  "    # Return an array of the same length denoting how far off each guess was.\n\
    \    differences = []\n    \n    # Your code here\n    guesses = 0\n    while\
    \ guesses < len(guess) and guesses < len(game):\n        if guess[guesses] ==\
    \ game[guesses]:\n            guesses +=1\n            differences.append(0)\n\
    \        else:\n            differences.append(guesses - game[guesses])\n    \
    \        guesses +=1\n    \n    return differences\n</cell>\n<text>\nLet's get\
    \ on with it!", "  # your code here\nend", "    game.shuffle!\n    guess, score\
    \ = guess, game.sort!.first\n    guess = guess.abs.round\n    diff = Array.new\n\
    \    i = 0\n    until guess[i] == score[i] do\n        diff << game[i]\n     \
    \   i += 1\n    end\n    diff.sort!\n    diff.map! { |x| x }\n    diff\nend",
  "  correct_guesses = 0\n  result = []\n  for i=1, game.length-1 do\n    if game[i-1]\
    \ == guess[i] then\n      correct_guesses = correct_guesses + 1\n    end\n  end",
  "  # Your code here\n  game = game.to_f\n  guess = guess.to_f\n  guesses = []\n\
    \  guesses_scores = []\n  \n  for i in 0...game.size\n    guesses_scores.push(game.to_f\
    \ - guess.to_f)\n    if guesses_scores.size == game.size\n      guesses.push(guess)\n\
    \      guesses_scores = []\n      break\n    \n    guesses_scores.push(game.to_f\
    \ - guesses_scores.last.to_f)\n    break if guesses_scores.size == game.size\n\
    \  end\n  \n  guesses.last\nend", "  game = [5,7,4,6,2,9]\n  guess = [4,8,9,6,3,5]\n\
    \  game.each do |score|\n    guess = guess.find {|guess| guess == score}\n   \
    \ next if !guess\n    difference = guess - score\n    difference = 1 if guess\
    \ > score\n    difference = -1 if guess < score\n    difference\n  end\nend",
  "  # Your code here\n  game.each do |i|\n    if guess[i] == game[i]\n      correct_count\
    \ += 1\n    else\n      wrong_count+=1\n    end\n  end\n  result = correct_count.to_f/(correct_count.to_f+wrong_count.to_f)\n\
    \  if correct_count >= guess.length\n    result = 0\n  end\n  result\nend", " \
    \ # TODO: write code here\nend", "  scores = [game, guess]\n  differences = []\n\
    \  game = Array.new(game.length)\n  guess = Array.new(guess.length)\n  \n  game.each\
    \ do |i|\n    guess[i] = i\n  end\n  guess = guess.sort\n  \n  differences.push\
    \ game.size - guess.length\n  differences.push game.size - guess.length\n  \n\
    \  game.each_with_index do |c, i|\n    differences.push guess[i] - c\n    differences.push\
    \ c - guess[i]\n  end\n  \n  differences.map!(&:abs)\n  differences.max!\n  differences.min!\n\
    \  \n  differences\nend", "  return game.zip(guess).map {|score,guess| if score\
    \ == guess then 0 else abs(score-guess)}\nend", "    i = 0\n    scores = []\n\
    \    guesses = []\n    while i < game.length\n        # Calculate the difference\
    \ between the score and the guess, \n        # which is the difference between\
    \ the score and the correct guess.\n        scores.append(abs(game[i] - guess[i]))\n\
    \        guesses.append(guess[i])\n        i = i + 1\n    return scores", "  score\
    \ = game.length\n  differences = []\n  \n  game.reduce(:+)\n  guesses.reduce(:+)",
  "    correct = 0\n    wrong = 0\n    # Compare each guess against the corresponding\
    \ score.\n    scores = [game[:], guess[:]]\n    # Sort the score and guess arrays\
    \ to find correct answers.\n    scores = [x for x in sorted(scores) if x[0] >\
    \ x[1]]\n    scores = [x for x in sorted(scores) if x[0] < x[1]]\n    # Calculate\
    \ the absolute difference for each guess and score.\n    scores = [abs(guess[i]-scores[i][i])\
    \ for i in range(len(scores))]\n    # Calculate the final score.\n    final =\
    \ scores[len(scores)-1]\n    # Return an array of correct guesses and differences.\n\
    \    return [correct, wrong, final]", "    total = 0\n    guesses = guess\n  \
    \  scores = game\n    \n    total = 0\n    guesses = guess\n    scores = game\n\
    \    \n    total = 0\n    guesses = guess\n    scores = game\n    \n    total\
    \ = 0\n    guesses = guess\n    scores = game\n    \n    total = 0\n    guesses\
    \ = guess\n    scores = game\n    \n    total = 0\n    guesses = guess\n    scores\
    \ = game\n    \n    total = 0\n    guesses = guess\n    scores = game\n    \n\
    \    total = 0\n    guesses = guess\n    scores = game\n    \n    total = 0\n\
    \    guesses = guess\n    scores = game\n    \n    total = 0\n    guesses = guess\n\
    \    scores = game\n    \n    total = 0\n    guesses = guess\n    scores = game\n\
    \    \n    total = 0\n    guesses = guess\n    scores = game\n    \n    total\
    \ = 0\n    guesses = guess\n    scores = game\n    \n    total = 0\n    guesses\
    \ = guess\n    scores = game\n    \n    total = 0\n    guesses = guess\n    scores\
    \ = game\n    \n    total = 0\n    guesses = guess\n    scores = game\n    \n\
    \    total = 0\n    guesses = guess\n    scores = game\n    \n    total = 0\n\
    \    guesses = guess\n    scores = game\n    \n    total = 0\n    guesses = guess\n\
    \    scores = game\n    \n    total = 0\n    guesses = guess\n    scores = game\n\
    \    \n    total = 0\n    guesses = guess\n    scores = game\n    \n    total\
    \ = 0\n    guesses = guess\n    scores = game\n    \n    total = 0\n    guesses\
    \ = guess\n    scores = game\n    \n    total = 0\n    guesses = guess\n    scores\
    \ = game\n    \n    total = 0\n    guesses = guess\n    scores = game\n    \n\
    \    total = 0\n    guesses = guess\n    scores = game\n    \n    total = 0\n\
    \    guesses = guess\n    scores = game\n    \n    total = 0\n    guesses = guess\n\
    \    scores = game\n    \n    total = 0\n    guesses = guess\n    scores = game\n\
    \    \n    total = 0\n    guesses = guess\n    scores = game\n    \n    total\
    \ = 0\n    guesses = guess\n    scores = game\n    \n    total = 0\n    guesses\
    \ = guess\n    scores = game\n    \n", '    correct = nil', "  game\n  guess\n\
    \  game - guess\nend", "  game.each do |score|\n    guess.each do |guess|\n  \
    \    guess = guess.abs if guess.to_i != score.to_i\n    end\n  end\nend", "  \
    \  scores = []\n    guesses = []\n    count = 0\n    if game.length == guess.length\n\
    \        # iterate through every entry in the game\n        game.each do |g|\n\
    \            # iterate through every entry in the guess\n            guess.each\
    \ do |g|\n                # if the entry matches count +=1\n                if\
    \ g == game[count]\n                    scores.push(0) #adds the guess to scores\
    \ array\n                    # break out of both loops\n                    exit\
    \ if count == game.length - 1\n                    break \n                else\n\
    \                    # otherwise add the difference between the guess and the\n\
    \                    # score to the array\n                    scores.push(abs(g\
    \ - game[count]))\n                    # break out of both loops\n           \
    \         exit if count == game.length - 1\n                    break\n      \
    \          end\n            end\n        end\n    else \n        puts \"The number\
    \ of games did not match the number of guesses\"\n    end\n    # returns the array\
    \ of scores for the correct number of games\n    scores\nend\n</code>\n<|/ a dscore=1\
    \ tags=ruby |>\n<| c |>\nThe question asks what to do with multiple matches. Your\
    \ method returns only a singular result.\n<|/ c |>\n<| c |>\nYes, I did realize\
    \ that after I posted it. I did not finish writing the method yet, so I did not\
    \ finish implementing the other parts of the original code. Fixed now.\n<|/ c\
    \ |>\n<| c |>\nThanks you, I tried it but got an error for the last \"else\".\
    \ There was an \"end\" after the last \"else\", but no \"else\".\n<|/ c |>\n<|\
    \ c |>\nI fixed the code now. I had forgotten that I had moved the last \"else\"\
    \ outside of the loop.\n<|/ c |>\n<| a dscore=1 |>\nHere's another way of doing\
    \ it. It does not require you to convert the result to an array and instead returns\
    \ an enumerator:\n<code>", "    # Your code here\n    # Return an array of the\
    \ same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    # the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    \n    match = [0, 0, 0, 0]\n    i = 0\n    while\
    \ i < len(game):\n        if game[i] == 1:\n            if guess[i] == 0:\n  \
    \              match[0] = 1\n            elif guess[i] == game[i]:\n         \
    \       match[1] = 1\n            elif guess[i] == abs(game[i] - guess[i]):\n\
    \                match[2] = 1\n            else:\n                match[3] = 1\n\
    \        i += 1\n    return match", "\tgame = game[0,0]\n\tguess = guess[0]\n\t\
    return game, guess\nend", "  correct = 0\n  guessed_incorrectly = 0\n  game_length\
    \ = game.length\n  guesses = guess.length\n  \n  guessed_scores = game.map.chars\n\
    \  \n  # The absolute difference between guess and score\n  abs = lambda number,\
    \ guess: guess - number\n  \n  game_map = game.map\n  \n  # Iterate over the scores\
    \ array to determine which one correlates to each guess and store\n  # that value\
    \ in the correct array\n  (0...guesses).each do |i|\n    guessed_scores = game_map.chars\n\
    \    # If the score is greater than the guess, it is a match\n    if abs(guessed_scores[i],\
    \ guess[i] > 0)\n      correct += 1\n      game_map[guess[i]] = guess - guessed_scores[i]\n\
    \    \n    # If the guess is greater than the score, it is a match\n    elsif\
    \ abs(guessed_scores[i], guess[i] < 0) \n      guessed_incorrectly += 1\n    \
    \  game_map[guess[i]] = guess + guessed_scores[i]\n    \n    # If the score is\
    \ less than the guess, it is a mismatch\n    else\n      guessed_incorrectly +=\
    \ 1\n      game_map[guess[i]] = guess + guessed_scores[i]\n    end\n    \n  end",
  "    \n    # your code here\n    \n    score = game.length\n    guess = guess.shuffle\n\
    \    diffs = []\n    \n    for i in game\n        for j in guess\n           \
    \ if i == j\n                diffs.push 0\n            elsif i == -1\n       \
    \         diffs.push Math.abs(j - score)\n            else\n                diffs.push\
    \ Math.abs(i - j)\n            end\n        end\n    end\n    diffs\nend\n</cell>\n\
    <code language=julia-1.0>\n@time guess = [3, 1, 4, 2]\n@time game = [2, 1, 4,\
    \ 3, 2, 1]", "    \n    # initialize array\n    distances = []\n    \n    # loop\
    \ through each position in game, compare it against each position in guess\n \
    \   # if the distance is too big, append to distances and return distances\n \
    \   # if the distance is smaller, append to distances and return distances\n \
    \   # return the differences between the guess and game scores\n    \n    \n \
    \   \n</cell>\n<cell>", '  return []', "  num_points = game.length\n  num_guesses\
    \ = guess.length\n  \n  correct_matches = 0\n  wrong_matches = 0\n  \n  result\
    \ = []\n  \n  for point in 0...num_points\n    correct_guess = false\n    \n \
    \   # iterate through the guesses\n    for guess in 0...num_guesses\n      \n\
    \      # if the guess is correct\n      if game[point] == guess[guess]\n     \
    \   correct_guess = true\n        break\n      end\n      \n      # if not, add\
    \ the absolute difference between the two scores.\n      # remember that the game\
    \ is 0-indexed\n      next if !correct_guess\n      diff = game[point] - guess[guess]\n\
    \      result.push(diff)\n    end\n    \n    # if all the guesses match, correct\
    \ the correct matches\n    if correct_guess\n      correct_matches += 1\n    end\n\
    \    \n    # if the correct matches are not all found,\n    # increment the wrong\
    \ matches\n    if !correct_guess\n      wrong_matches += 1\n    end\n  end\n \
    \ \n  # return a boolean that denotes if the person got all the game\n  # If all\
    \ the guesses matched and all the correct guesses was not found,\n  # we assume\
    \ the person got all the game\n  return (num_points == correct_matches) and (num_guesses\
    \ == wrong_matches)\nend", "  # your code here\n  # for example:\n  if game[0]\
    \ != guess[0] or game[1] != guess[1] ...\n  # or game[15] != guess[15] ...\n \
    \ # or game[16] != guess[16] ...\n  # return game", "  guesses = []\n  scores\
    \ = []\n  results = []\n  guesses = guess[game]\n  scores = game[:game.length]\n\
    \  results.clear", "    # ...\nend", "    diffs = []\n    \n    for i,score in\
    \ enumerate(game)\n        diffs.append(abs(guess - score))\n    \n    return\
    \ diffs", '    return []', "    correct = 0\n    game = [6, 6, 6, 6, 6, 6, 6,\
    \ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,\
    \ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,\
    \ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,\
    \ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,\
    \ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,\
    \ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,\
    \ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,\
    \ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,\
    \ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,\
    \ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,\
    \ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,\
    \ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,\
    \ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,\
    \ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,\
    \ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,\
    \ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,\
    \ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,\
    \ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,\
    \ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,\
    \ 6, 6, 6, 6, ", "  # your code goes here\n  guesses = []\n  scores = []\n  for\
    \ i in game:\n    if i == guess[i]:\n      guesses.append(i)\n      scores.append(0)\n\
    \    else:\n      guesses.append(abs(guess[i] - i))\n      scores.append(abs(guess[i]\
    \ - i))\n  return scores", "  game.length\n  guess.length\n  \n  # Your code here...\n\
    \  \nend\n</pre>\n</li>\n</ul>\n</div>\n<div id=\"outline-container-org6bbc6b1\"\
    \ class=\"outline-3\">\n<h3 id=\"org6bbc6b1\">Task 4.2</h3>\n<ul class=\"org-ul\"\
    >\n<li>\n<p>\n<code>", "    # O(n logn)\n    game.sort! # O(n logn)\n    guess\
    \ = guess.sort!\n    answer = []\n    (0...guess.length).each do |i|\n      guess,\
    \ score = guess[i], game[i]\n      if guess == score\n        answer << 0\n  \
    \    else\n        answer << guess.abs-score\n      end\n    end\n    answer\n\
    end\n</cell>\n<code language=julia-1.0>\ngame = [-3, 1, -5, 3, 0]\nguess = [3,\
    \ 7, 4, 3, 0]\ncompare(game, guess)\n</cell>\n<text>\nExercise\nWrite a function\
    \ that accepts a string and converts it into a vector of integers such that each\
    \ character in the string represents one integer. \nFor example converting the\
    \ string \"Hello, World\" into the integer vector [9, 1, 13, 11, 10, 0, 5, 12,\
    \ 0, 11] should yield the following output:", "    scores = []\n    \n    # Code\
    \ here ...\n    \n    return scores\n</cell>\n<code language=julia-1.5>", "  #\
    \ initialize arrays of scores and guesses\n  scores = []\n  guesses = []\n  \n\
    \  # loop over guesses\n  for g in range(0, len(guess)):\n    guesses.append(guess[g])\n\
    \  # loop over scores\n  for s in range(0, len(game)):\n    scores.append(game[s])\n\
    \  \n  # initialize array of scores and guesses\n  scores = []\n  guesses = []\n\
    \  \n  # loop over guesses\n  for g in range(0, len(guess)):\n    guesses.append(guess[g])\n\
    \  # loop over scores\n  for s in range(0, len(game)):\n    scores.append(game[s])\n\
    \  \n  # initialize score array\n  scores = []\n  \n  # loop over guess\n  for\
    \ g in range(0, len(guess)):\n    scores.append(0)\n  \n  # loop over scores\n\
    \  for s in range(0, len(game)):\n    if g == s:\n      scores[int(s)] = 0\n \
    \   else:\n      scores[int(s)] = abs(guesses[int(g)] - int(game[int(s)]))\n \
    \   \n  return scores", "  differences = []\n  score = 0\n  for i in 0...guess.length\n\
    \    if game[i] == guess[i]\n      score += 1\n    else \n      diff = abs(game[i]\
    \ - guess[i])\n      differences.push(diff)\n      score += diff\n  end\n  differences.push(abs(guess.length\
    \ - score))\n  return differences\nend", "    answer = []\n    answer.push(game[0]\
    \ - guess[0])\n    answer.push(game[1] - guess[1])\n    answer.push(game[2] -\
    \ guess[2])\n    answer.push(game[3] - guess[3])\n    answer.push(game[4] - guess[4])\n\
    \    answer.push(game[5] - guess[5])\n    answer.push(game[6] - guess[6])\n  \
    \  answer.push(game[7] - guess[7])\n    answer.push(game[8] - guess[8])\n    answer.push(game[9]\
    \ - guess[9])\n    answer.push(game[10] - guess[10])\n    answer.push(game[11]\
    \ - guess[11])\n    answer.push(game[12] - guess[12])\n    answer.push(game[13]\
    \ - guess[13])\n    answer.push(game[14] - guess[14])\n    answer.push(game[15]\
    \ - guess[15])\n    answer.push(game[16] - guess[16])\n    answer.push(game[17]\
    \ - guess[17])\n    answer.push(game[18] - guess[18])\n    answer.push(game[19]\
    \ - guess[19])\n    answer.push(game[20] - guess[20])\n    answer.push(game[21]\
    \ - guess[21])\n    answer.push(game[22] - guess[22])\n    answer.push(game[23]\
    \ - guess[23])\n    answer.push(game[24] - guess[24])\n    answer.push(game[25]\
    \ - guess[25])\n    answer.push(game[26] - guess[26])\n    answer.push(game[27]\
    \ - guess[27])\n    answer.push(game[28] - guess[28])\n    answer.push(game[29]\
    \ - guess[29])\n    answer.push(game[30] - guess[30])\n    answer.push(game[31]\
    \ - guess[31])\n    answer.push(game[32] - guess[32])\n    answer.push(game[33]\
    \ - guess[33])\n    answer.push(game[34] - guess[34])\n    answer.push(game[35]\
    \ - guess[35])\n    answer.push(game[36] - guess[36])\n    answer.push(game[37]\
    \ - guess[37])\n    answer.push(game[38] - guess[38])\n    answer.push(game[39]\
    \ - guess[39])\n    answer.push(game[40] - guess[40])\n    answer.push(game[41]\
    \ - guess[41])\n    answer.push(game[42] - guess[42])\n    answer.push(game[43]\
    \ - guess[43])\n    answer.push(game[44] - ", "    scores = game\n    guesses\
    \ = guess\n    # your code here\n    correct_guesses = []\n    incorrect_guesses\
    \ = []\n    correct_guesses.fill(0)\n    incorrect_guesses.fill(-1)\n    guesses.each_with_index\
    \ do |guess, index|\n        if guess[index] > scores[index]\n            correct_guesses[index]\
    \ = 0\n        end\n        if guess[index] < scores[index]\n            incorrect_guesses[index]\
    \ = -1\n        end\n        if guess[index] == scores[index] and correct_guesses[index]\
    \ == 0\n            correct_guesses[index] = 0\n        end\n        if guess[index]\
    \ == scores[index] and correct_guesses[index] == 0\n            incorrect_guesses[index]\
    \ = -1\n        end\n    end\n    correct_guesses.sum\nend", "    scores = []\n\
    \    correct = 0\n    guesses = guess.to_a\n    games = game.to_a\n    # add up\
    \ all scores while scoring by guess\n    score = 0\n    for g in games\n     \
    \   score += g\n        scores << score\n    end\n    # for each guess, see how\
    \ many games were correct and what that score was for that guess\n    # if the\
    \ guess and game are the same score, then we're correct\n    # otherwise, determine\
    \ the diff and add up all guesses that didn't match \n    correct_by_guess = scores.select\
    \ { |score| score == scores.max }\n    guesses.each do |guess|\n        guesses_at_best_score\
    \ = correct_by_guess.select { |s| s == guess }\n        correct += guesses_at_best_score.length\n\
    \    end\n    correct_by_guess\nend", end, "    count = 0\n    game = game.sort!\n\
    \    guess = guess.sort!\n    game.each do |a|\n        if guess.include? a\n\
    \            count += 1\n        end\n    end\n    diff = []\n    guess.each do\
    \ |b|\n        diff << (b - game[guess.index(b)])\n    end\n    diff\nend", " \
    \ scores = [-100, -5, 0, 1, 5]\n  guesses = [-10, -1, 1, 4, 10]\n  correct_guesses\
    \ = []\n  # ...\nend", "  scores = []\n  guesses = []\n  # TODO: use zip\n  game,\
    \ guess = [(int(x),int(y)) for x,y in zip(game, guess)]\n  guesses = [x for x\
    \ in guess]\n  for g in guess:\n    if g != None:\n      scores.append(g[0])\n\
    \  \n  return [abs(g-g[0]) for g in scores]", "    matches = 0\n    i = 0\n  \
    \  guessed = []\n    scores = []\n    while i < guess.length\n        guessed\
    \ = guess[i:] + guess[:i]\n        guessed.each {|g| scores.push(abs(game[i] -\
    \ g))}\n        i += 1\n    end\n    scores \nend\n</cell>\n<code language=julia-0.5>",
  "    return game.zip(guess).map { |x,y| x.abs**(y.eq(0)? 1 : -1) } \nend", "  result\
    \ = game.zip(guess).map do |score, guess| \n    if score == guess \n      0\n\
    \    else \n      score - guess\n    end\n  end\nend", "  game = game.length\n\
    \  guess = guess.length\n  result = []\n  \n  for i in 0...game\n    diff = guess[i]\
    \ - game[i]\n    if diff > 0\n      result << diff\n    else\n      result <<\
    \ 0\n    end\n  end\n  result\nend", "  # code here\nend", "  game = [1,3,5,7,9,11]\n\
    \  guess = [1,3,5,7,4,11]\n  return[2,1,1,2,0,0]", "  score = [4,2]\n  guess =\
    \ [5,3]\n  compare returns [2,1,0,2]", "  game.size.times do |i|\n    guess[i]\
    \ -= game[i]\n  end\n  game\nend", "  guess = guess.sort\n  correct = game.sort\n\
    \  game, guess = game.map(&:to_i), guess.map(&:to_i)\n  min = - 99999\n  min_index\
    \ = nil\n  max = 99999\n  max_index = nil\n  game.each_index do |i|\n    if guess[i]\n\
    \      min = i - game[i]\n      min_index = i\n    end\n  end\n  guess.each_index\
    \ do |i|\n    if correct[i]\n      max = i + game[i]\n      max_index = i\n  \
    \  end\n  end\n  diff = max - min\n  return [min_index, min]\nend\ncompare([2,4,6,8],[4,7,7,9])",
  "  game = game.map!.with_index { |s,i| (s.to_i - guess[i].to_i).abs }\n  return\
    \ game.min\nend", "    correct = 0\n    guess = [abs(int(i) - int(j)) for i, j\
    \ in zip(guess, game)]\n    return guess\nprint(compare([1, 4, 3, 5], [1, 2, 3,\
    \ 2])) ", "    return game-guess\nend", "  arr1 = game.flatten.map { |x| -x }\n\
    \  arr2 = guess.flatten.map { |x| -x }\n  guesses_are_correct = arr1.zip(arr2).all?\
    \ { |a,b| (a == b) | (a < b)}\n  scores = [game.max..game.min].to_a.map { |x|\
    \ guesses_are_correct ? 0 : (abs(a-b)) }\n  scores # => [1, 1, 3, -1, 1]\nend\n\
    </pre>", "    # your code here\n    \n    diff = 0\n    \n    for i in range(len(game)):\n\
    \        \n        if game[i] == guess[i]:\n            \n            diff +=\
    \ 0\n            \n        else:\n            \n            diff += abs(guess[i]\
    \ - game[i])\n            \n    return diff", '  # TODO implement this function',
  "  # TODO\nend\n</pre>\n</div>", "  game.map do |i|\n    guess[i] != game[i] and\
    \ guess[i] = abs(guess[i]-game[i])\n  end\n  guess\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
