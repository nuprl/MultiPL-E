name: HumanEval_86_anti_shuffle
language: rb
prompt: "# Write a function that takes a string and returns an ordered version of\
  \ it.\n# Ordered version of string, is a string where all words (separated by space)\n\
  # are replaced by a new word where all the characters arranged in\n# ascending order\
  \ based on ascii value.\n# Note: You should keep the order of words and blank spaces\
  \ in the sentence.\n# For example:\ndef anti_shuffle(s)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_anti_shuffle\n\
  \    candidate = method(:anti_shuffle)\n    assert_equal(\"Hi\", candidate.call(\"\
  Hi\"))\n    assert_equal(\"ehllo\", candidate.call(\"hello\"))\n    assert_equal(\"\
  bemnru\", candidate.call(\"number\"))\n    assert_equal(\"abcd\", candidate.call(\"\
  abcd\"))\n    assert_equal(\"Hello !!!Wdlor\", candidate.call(\"Hello World!!!\"\
  ))\n    assert_equal(\"\", candidate.call(\"\"))\n    assert_equal(\".Hi My aemn\
  \ is Meirst .Rboot How aer ?ouy\", candidate.call(\"Hi. My name is Mister Robot.\
  \ How are you?\"))\n  end\nend\n"
completions: ["  s = s.split() \n  s = sort.sort s\n  s = ' ' + s.join(s)\n  return\
    \ s.strip\nend", "  # return s.replace(' ','').split(',')\n  arr = s.split(' ')\n\
    \  arr.sort!\n  arr.join(' ')\nend\nanti_shuffle('The quick brown fox jumps over\
    \ the lazy dog')", "  s = s.gsub(/\\b\\w\\w/, lambda { |m| m.upcase })\n  s =\
    \ s.gsub(/\\b\\w/, lambda { |m| m.upcase })\n  s = s.gsub(/\\s+/, ' ')\n  s =\
    \ s.gsub(/\\s+/, ' ').strip\n  s.split(' ').sort.join(' ')\nend", "  s = s.split.sort\n\
    \  return.join\nend", "    splitted = s.split\n    sorted_splitted = splitted.sort.reverse\n\
    \    ans = ''\n    i = 0\n    while i < splitted.length\n        if splitted[i][0].ord\
    \ < splitted[i + 1][0].ord\n            ans << splitted[i][0]\n            i +=\
    \ 1\n        else\n            ans << splitted[i + 1][0]\n            i += 1\n\
    \        end\n    end\n    ans\nend\n</cell>\n<code language=julia-1.4>\nanti_shuffle(\"\
    I like eating pizza!\")\n</cell>\n<code language=julia-1.4>\n\"I like eating pizza!\"\
    \ |> anti_shuffle\n</cell>\n<text>\nExercise: String Manipulation", "    s = s.gsub(/[\\\
    W]/, ' ').squeeze\n    arr = s.split\n    arr.map!{|x| x.reverse!.downcase }\n\
    \    arr.sort!\n    arr.join(' ')\nend\n</cell>\n<cell>\nanti_shuffle(\"The rain\
    \ in SPAIN stays mainly on the plain.\")\n</cell>\n<cell>", "  a = s.split(' ')\n\
    \  puts a.sort{ |a, b| a.length <=> b.length }.join(' ')\nend", "    s = s.downcase\n\
    \    s.gsub!(/\\s+/, \" \")\n    s = s.gsub!(/([A-Za-z0-9])/, '\\1 \\2')\n   \
    \ s.gsub!(/(\\s)/, '\\1 ')\n    return s.gsub(/\\s+/, \" \")\nend", "  new_words\
    \ = []\n  new_str = \"\"", "  result = \"\"\n  sorted_words = s.split(\" \")\n\
    \  sorted_words.sort!\n  sorted_words.each do |word|\n    if word.start_with?(\"\
    _\")\n      result += word\n    else\n      result += word[0] + word.slice(1,\
    \ word.length)\n    end\n  end\n  result\nend", "    # remove spaces and make\
    \ all characters lowercase\n    s = s.gsub(/\\s+/, \"\").downcase\n    # split\
    \ the string into an array of words\n    # [\"apple\", \"banana\", \"cherry\"\
    ] \n    words = s.split\n    \n    # initialize new words array using same length\
    \ as words array\n    new_words = []\n    \n    # loop through each word\n   \
    \ words.each do |word|\n        # convert word into array of characters (all characters\
    \ in word)\n        # ['p', 'a', 'l', 'i', 'e'] \n        chars = word.split(//)\n\
    \        \n        # loop through each character in word\n        chars.each do\
    \ |char|\n            # if the char is greater than the previous char\n      \
    \      if char.ord > chars[chars.size-1].ord\n                # add the char after\
    \ the last char in the array\n                chars << char.chr\n            else\n\
    \                # add the char at the top of the array\n                chars.unshift\
    \ char.chr\n            end\n        end\n        \n        # add the word with\
    \ characters in the new array\n        new_words << chars.join(\"\")\n    end\n\
    \    \n    return new_words.join(\" \").gsub(/\\s+/, \" \").strip\nend", "  #\
    \ write your function here\n  s = str.split\n  s.sort!.sort!\nend", "  new_s =\
    \ \"\"\n  word = s.split(\" \")\n  new_w = \"\"\n  for i in word\n    new_w =\
    \ new_w + \" \" + new_i\n  end\n  return new_w\nend\nanti_shuffle(\"SORRY, I hate\
    \ this horse\")", "\tnew_str = \"\"\n\tword_list = s.split(\" \")\n\tword_list.each\
    \ do |word|\n\t\tword.gsub!(/[^a-z]/i, '')\n\tend\n\tword_list.each do |word|\n\
    \t\tnew_str += word\n\tend\n\treturn new_str\nend", "  words_in_string = s.split(\"\
    \ \").sort\n  anti_shuffled = \"\"\n  words.each do |word|\n    if anti_shuffled.include?(word)\n\
    \      anti_shuffled += \" \"\n    else\n      anti_shuffled += word\n    end\n\
    \  end\n  anti_shuffled\nend", "  s.split(\" \").sort_by{|w| w.ord}.join(\" \"\
    )\nend", "    sorted_s=\"\"\n    words=s.split()\n    sorted_words=[]\n    for\
    \ word in words:\n        if word.strip()==\"\":\n            pass\n        else:\n\
    \            sorted_words.append(word)\n            sorted_words.sort()\n    for\
    \ word in words:\n        sorted_s=sorted_s+\" \"+sorted_words[0]\n        sorted_words=sorted_words[1:]\n\
    \    sorted_s=sorted_s.strip()\n    return sorted_s\n    \nprint(anti_shuffle(\"\
    I cant stand my eye, its so blue.\"))\nprint(anti_shuffle(\"I cant stand my eye\
    \ its so blue.\"))\nprint(anti_shuffle(\"I cant stand my eye, its so blue and\
    \ I cant stand my eye, its so blue.\"))\n</cell>\n<cell>", "    arr = s.split(\"\
    \ \")\n    arr.sort!\n    arr.uniq.each {|word| s = s.gsub(word, word.to_i)}\n\
    \    arr = s.split(\" \")\n    arr.sort!\n    arr.uniq.each {|word| s = s.gsub(word,\
    \ word.to_i)}\n    arr\nend", "    # Split string into words\n    words = s.split(\"\
    \ \")", "  return s.split\nend", "  new_s = ''\n  words = s.split(\" \")\n  sort_words\
    \ = []\n  for i in words\n    if i =~ /^\\W/ then\n      sort_words << i\n   \
    \ else\n      sort_words << i.upcase\n    end\n  end\n  for i in sort_words\n\
    \    if i =~ /^\\W/ then\n      new_s << \" \"\n    else\n      new_s << i\n \
    \   end\n  end\n  new_s.reverse!\n  new_s = new_s.join(\" \")\n  return new_s\n\
    end", "    # Your code here\n    ans = \"\"\n    words = s.split(\" \")\n    for\
    \ i in range(len(words)):\n        if words[i] != \" \":\n            ans += words[i]\
    \ + \" \"\n    return ans", " ans = \"\"\n words = s.split\n l = words.count\n\
    \ while l > 0\n  x = words[l-1]\n  w = words[l]\n  y = words[l+1]\n  words[l-1]\
    \ = w\n  words[l] = x\n  words[l+1] = y\n  l -= 1\n  ans += words.join(\" \")\n\
    \ ans = ans.split\n return ans", "    return s.split(\" \")\nend\n\"\"\"", " \
    \ s = s.split(\" \").sort{|x,y| x.to_s <=> y.to_s}.join(\"  \")\nend", "    word_lst\
    \ = s.split()\n    word_lst.sort(key=lambda x: ord(x), reverse=True)\n    return\
    \ ' '.join(word_lst)", "  s.downcase!\n  s.gsub!(\" \", \"\")\n  s.split!\n  s.sort!\n\
    \  s.reverse!\n  s.join(\" \")\nend", "  s = s.downcase\n  s = s.gsub(/\\s+/,\
    \ ' ').split(' ') # split on blanks\n  s = sort_words(s) # sort words\n  s = s[0]\
    \ + \" \" + s[1..-1].join(\" \")\nend", "  s.split.each do |word|\n    word.split('').sort.join('')\n\
    \  end\nend", "    # Write your solution here\n    new_s = ''\n    s_list = list(s)\n\
    \    s_list.sort(key=lambda word: ord(word[0]))\n    for word in s_list:\n   \
    \     new_s += word[0]\n    return new_s\n</cell>\n<cell>\nanti_shuffle('The quick\
    \ brown fox jumps over the lazy dog')\n</cell>\n<cell>", "    s = s.split(' ')\n\
    \    s = s.sort\n    s = s.join('')\n    return s\n</cell>\n<cell>", "  s = s.split(\"\
    \ \")\n  s.sort_by do |word|\n    word.split(\"\").sort_by do |c|\n      c.ord\
    \ << \" \"\n    end.join(\"\")\n  end.join(\" \")\nend\n</code>\n<|/ a dscore=3\
    \ |>\n<| c |>\nThanks for your effort but i don't need this kind of solution,\
    \ what i need is just to create a function to convert the string to an ordered\
    \ version by sorting the words and the spaces.\n<|/ c |>\n<| c |>\nI've updated\
    \ the answer with a function which you can use.\n<|/ c |>\n<| a tags=ruby |>\n\
    You want to sort the string and keep the same order for the spaces as well as\
    \ for the characters, right?\nThen, just sort each word and join it together with\
    \ the spaces. \n<code>", " \n  # Write your code here\n  s = s.split\n  s.sort!\n\
    \  s.join\nend", "  \nend", "    arr = []\n    for char in s\n        if char\
    \ == \" \"\n        arr << \"*\"\n        else\n            arr << char\n    arr\
    \ << \"\"\n    return arr.join\nend\n</cell>\n<cell>", "  s.gsub!(' ', ' ')\n\
    \  s.split(' ').sort!\n  s\nend\nanti_shuffle(\"My name is James Jamessssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss",
  "  s = s.split(\" \").sort\n  s.join(\" \")\nend\n</cell>\n<text>\nChallenge Question\
    \ 2\nWrite a function that accepts a string and returns a new string where all\
    \ the characters in the original string except the first character are lowercased.\
    \ Example:", "  words=[]\n  chars = s.downcase.chars\n  i=chars.index(\"a\")\n\
    \  j=chars.index(\"z\")\n  k=chars.index(\"0\")\n  while i<j\n    words.push(chars[i..j])\n\
    \    i=i+1\n    j=chars.index(\"a\", i)\n  end\n  while k<j\n    words.push(chars[k..j])\n\
    \    k=k+1\n    j=chars.index(\"a\", k)\n  end\n  return words.join(\"_\")\nend\n\
    puts anti_shuffle(\"the quick brown fox jumps over the lazy dog\")", "  s = s.split()\
    \ # split s into an array\n  s.each do |word|\n    s = word.scan(/../).sort #\
    \ break each word into an array of characters\n    # compare every character with\
    \ other characters\n    # then add it to the original word\n    word.insert(s.first,\
    \ word.delete(s.first))\n  end\n  s.join(' ')\nend", "  s = s.split(\" \")\n \
    \ s.sort!\n  s = s[0].upcase + s[1].upcase + s[2].upcase + s[3].upcase + s[4].upcase\n\
    end", "  s.downcase!\n  s.gsub(/./) { |s| s.ord.to_s[0..1].ord }\nend", "  a =\
    \ s.split(\" \").sort\n  s.split.join(\" \").downcase\nend", "    wordlist = s.split()\
    \ # Split input into words.\n    new_words = [] # Prepare the list of output words.\n\
    \    for word in wordlist:\n        word = word.strip() # Remove any spaces and\
    \ strip off any trailing and leading spaces.\n        \n        if len(word) >\
    \ 0 and word.isalpha(): # Make sure that the word is a word and contains alphabetical\
    \ characters.\n            word_list = list(word) # Make a list of characters\
    \ in the word.\n            word_list.sort() # Sort the list of characters.\n\
    \            new_word = \"\".join(word_list) # Join the characters in word_list\
    \ in the alphabetical order into a string.\n            new_words.append(new_word)\
    \ # Add the new word to the new words list.\n        else:\n            new_words.append(word)\
    \ # Add the word to the new words list.\n    return \" \".join(new_words) # Join\
    \ the new_words to create one long string.", "    ans = []\n    count = 0\n  \
    \  arr = s.split\n    sort = arr.sort\n    i = 0\n    while i < len(sort):\n \
    \       if count > len(sort)-1:\n            sort[i] = \"\"\n        else:\n \
    \           sort[i] = arr[count]\n            count += 1\n        ans += sort[i]\
    \ + \" \"\n        i += 1\n    return ans\n</code>\n<|/ a |>\n<| c |>\nI did not\
    \ get it! Can you please explain it more.\n<|/ c |>\n<| c |>\nHi, I added some\
    \ comments and explanation, can you tell me if this is what you meant?\n<|/ c\
    \ |>\n<| c |>\nHi I understand what you are trying to do but I can't see why it\
    \ is necessary to use an Array. Because the program will be given the same input\
    \ every time I thought you only need to keep the input in a single variable and\
    \ sort it before outputting.\n<|/ c |>\n<| c |>\nI have found another way to do\
    \ it without using Arrays and it works fine. Thanks anyway!\n<|/ c |>\n<| c |>\n\
    : You don't have to use an array. Try doing this without it :) I used an array\
    \ because I thought you wanted to use a dynamic array.\n<|/ c |>\n<| a |>\nThis\
    \ approach uses regular expressions.\n<code>\nimport re", "    answer = \"\"\n\
    \    words = s.split(\" \")\n    for i in words:\n        chars = list(i)\n  \
    \      random.shuffle(chars)\n        answer = answer + \"\".join(chars)\n   \
    \ answer = answer.strip()\n    return answer", "    # Write your code here\n \
    \   return s\nprint(anti_shuffle(\"hello how are you today? \")) # Output : h\
    \ wo ar y dy ?", "  ans = \"\"\n  s.split(\" \").each do |word|\n    ans << word.downcase.chars.sort_by\
    \ {|c| c.chr}.join\n  end\n  ans\nend", "   anti_str = s.split(' ') \n   new_anti_str\
    \ = []\n   new_str = \"\"\n   for each_char in anti_str:\n      new_str += each_char.encode('ascii')\n\
    \   return new_str", "  s = \" \" + s\n  words = s.split(\" \") # split string\
    \ to array of words\n  shuffled = \"\"\n  for i in range(0,len(words)-1):\n  \
    \  shuffled += words[i] + \" \" # add each word to end of shuffled string\n  \
    \  shuffled += words[i+1] # add next word after current word\n    shuffled +=\
    \ \" \"\n  return shuffled\n</code>\nLet's test our function!\n<code>\nputs anti_shuffle(\"\
    He is trying to help me\") # => Help me\nputs anti_shuffle(\"We are trying to\
    \ help you\") # => We are trying to help you\nputs anti_shuffle(\"I am trying\"\
    ) # => I am trying \nputs anti_shuffle(\"He is trying to\") # => He is trying\
    \ to\n</code>\nIt works!", "  arr = []\n  s = s.split\n  s.each do |s|\n    s\
    \ +=  \"  \"\n    arr.push s\n  end\n  arr.sort!\n  arr.join\nend\nanti_shuffle(\"\
    hello how are you\")", "  s.split(' ').sort { |x, y| x.ord <=> y.ord }.join('\
    \ ')\nend", "    ans = s.gsub(/\\s+/, \" \").split.sort\n  end\n  \nanti_shuffle(\"\
    I am a student\")", "  return_string = s.gsub(/\\w+/) { |word| word.split(//).sort\
    \ { |a, b| a.ord - b.ord }.join }\n  return_string.downcase!\n  return_string\n\
    end", "    s=s.strip\n    arr=s.split(//)\n    s=arr.join(arr.sort.join)\nend",
  "  puts s\n  new_words = s.split(\" \").sort\n  new_words.join(\" \")\nend\nanti_shuffle(\"\
    Hello #World! ! ! !Hello\")", "  s.downcase\n  s.gsub(/[[:punct:]]/, \"\")\n \
    \ s.gsub(/[[:space:]]/, \" \")\n  s.split(\" \").sort\n  s.gsub!(\" \", \"\")\n\
    \  s\nend", "    # Remove spaces at beginning and end of sentence\n    s = s.gsub(\"\
    \ \", \"\")\n    s = s.gsub(\"^\", \"\").gsub(\"$\", \"\")\n    # Initialize hash\
    \ table\n    h = Hash.new", "  s = s.split(' ') # Split into words\n  s.sort_by\
    \ { |s| s.each_char.map { |c| c.ord } }.join # Sort based on ascii values\nend",
  "  s.gsub!(/[[:space:]]/, '')\n  s.downcase!\n  s.gsub!(/\\w+/) {|x| x.chars.sort.join\
    \ }\n  s.downcase!\n  s\nend", "    s = s.split(\" \") \n    s = s.sort { |a,b|\
    \ a.to_i <=> b.to_i }.join(\" \")\n    return s\nend", "    # your code goes here\n\
    \    string=[]\n    words=s.split()\n    for i in words:\n        string.append(''.join(sorted(i,\
    \ key=lambda x:ord(x))))\n    return ' '.join(string)", "    l = s.split()\n \
    \   for i in l:\n        i.join((sorted(i, reverse=True)))\n    return ' '.join(l)",
  "    return s.split(' ').sort().join(' ')\nend", "  s = s.split() # split into array\
    \ of words\n  s = sortAlphabetically(s) # sort each word\n  s = removeDuplicates(s)\
    \ # remove duplicates\n  s = sortAlphabetically(s) # sort each word\n  s = removeSpaces(s)\
    \ # remove white spaces\n  s = sortAlphabetically(s) # sort each word\n  s = removeDuplicates(s)\
    \ # remove duplicates\n  s = addSpaces(s) # add white spaces\n  s = s.join(\"\
    \ \") # join array back into string\nend\nanti_shuffle(\"This is a test\")\n</cell>\n\
    <cell>", "    return s.split(\" \")\nend", "  l = s.split(' ')\n  l.sort.map {\
    \ |x| x.chars.map { |y| y.to_i }.sort_by { |y| y }.join}\nend", "  # Write your\
    \ code here\n  s.gsub!(/\\s+/, \" \")\n  s.gsub!(/[^A-Za-z]+/){|m|m.to_s.chars.sort.join}.gsub!(/\\\
    s/, \"\")\n  return s\nend", "  result = ''\n  s.split.each do |x|\n    result\
    \ << x.chars.sort.join\n  end\n  result\nend", "  s.split(' ').sort().join(' ')\n\
    end", "  # write your code for solving this challenge here\n  s = s.split(\" \"\
    )\n  new_str = \" \"\n  new_str = new_str.join(s)\n  return new_str\nend", " \
    \   letters=\"\"\n    for i in range(len(s)):\n       letters=letters+s[i]\n \
    \   return letters", "  s = s.split(//).sort\n  s.join(//)\nend\n</cell>\n<code\
    \ language=julia-1.0>\nanti_shuffle(\"banana apple pie apple banana grape pie\
    \ banana\")\n</cell>\n<code language=julia-1.0>\nfunction anti_shuffle(s::AbstractString)\n\
    \    \n    # Write your solution here\n    \n    return s\nend\n</cell>\n<code\
    \ language=julia-1.0>\nfunction anti_shuffle(ss::AbstractString)\n    \n    #\
    \ Write your solution here\n    \n    return ss\nend\n</cell>\n<code language=julia-1.0>\n\
    function anti_shuffle(s::Vector{String})\n    \n    # Write your solution here\n\
    \    \n    return s\nend\n</cell>\n<code language=julia-1.0>\nfunction anti_shuffle(ss::Vector{String})\n\
    \    \n    # Write your solution here\n    \n    return ss\nend\n</cell>\n<code\
    \ language=julia-1.0>\nfunction anti_shuffle(ss::Vector{AbstractString})\n   \
    \ \n    # Write your solution here\n    \n    return ss\nend\n</cell>\n<code language=julia-1.0>",
  "  s.gsub!(/\\b(\\w)\\b/) do |w|\n    w.upcase\n  end\n  s.split(//).sort_by(&:downcase).join\n\
    end\n</code>\nOutput:\n<code>\n[\"this\", \"is\", \"an\", \"example\", \"of\"\
    , \"an\", \"exercise\", \"of\", \"an\", \"essay\"]\n</code>\n<|/ a tags=ruby,sorting\
    \ |>\n<| c |>\nYou don't need to use the capture group if you don't need it; `s.gsub(/\\\
    b\\w\\b/) do |w|` would work just as well.\n<|/ c |>\n<| c |>\nThanks everyone,\
    \ for such an explanation and also for solving my problem :)\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\nwords = %w[this is a example of an exercise of an essay]", "  s.split('\
    \ ').sort.join(' ')\nend\nputs anti_shuffle('  Hello World  ')", "  s = s.gsub(\"\
    \ \", \"_\").gsub(\"_\", \" \")\n  s = s.scan(/\\w+/)\n  s.sort {|a, b| a.length\
    \ <=> b.length}\nend", "  # Your code goes here\n  return s", "  words = s.split('\
    \ ')\n  shuffled_words = []\n  words.each do |word|\n    shuffled_word =\n   \
    \   word.each_char.sort_by(&:asc).join\n    shuffled_words << shuffled_word\n\
    \  end\n  shuffled_words.join(' ')\nend", "  new_s = s.split(/\\s+/).sort{|a,b|\
    \ a.to_i <=> b.to_i }\n  new_s << \"\" if new_s.size == 1\n  new_s\nend\nanti_shuffle(\"\
    The world is a mess\")", "  s = s.split(\". \")\n  s = s[0]\n  for i in 1..s.size\n\
    \    s = s.gsub(\" \".ord.to_s(i).chr(97).chr,\" \".ord.to_s(i).chr(65).chr(97))\n\
    \  end\n  return s\nend\nAntiShuffle(\"This Is A Sentence\") # => \"uhm xr zf\
    \ vf rs rf uq eh siq eh xe\"\nAntiShuffle(\"This Is A Sentence With . . . . .\
    \ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\
    \ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\
    \ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\
    \ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\
    \ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\
    \ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\
    \ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\
    \ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\
    \ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\
    \ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\
    \ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ", "  s = s.split('\
    \ ')\n  s.sort!\n  s.join(' ')\nend", "    # Write your solution here\n    s=s.split('\
    \ ')\n    s.sort(key=str.lower)\n    s=' '.join(s)\n    return s\n</cell>\n<cell>",
  "  # code here\nend", "  words = s.split(\" \") # split into words\n  words.sort()\
    \ # sort words\n  s.gsub!(\" \",\"_\") # replace spaces with underscores\n  s.gsub!(\"\
    _\",\" \") # replace underscores with spaces\n  return s\nend\nanti_shuffle(\"\
    Mary had a little lamb\")", "    s = s.split(\" \") \n    l = len(s)\n    for\
    \ i in range(0, l):\n        for j in range(0, l):\n            if ord(s[j])-ord(s[i])\
    \ < 0 and len(s[i]) > 0 and len(s[j]) >0 :\n                s[i],s[j] = s[j],s[i]\n\
    \    return \" \".join(s)", "  # TODO: Your code here\nend", "  new_s = ''\n \
    \ s_words = s.split\n  s_words_reversed = s_words.reverse\n  s_words_reversed.each\
    \ do |word|\n    if (word != '') && (word.include?(\" \")) && (word.include?(\"\
    \\n\") || (word.include?(\"\\t\"))) && (word.include?(\" \")) && (word.include?(\"\
    \\t\"))\n      new_s = new_s + \"\\n\" + word\n    else\n      new_s = new_s +\
    \ \" \" + word\n    end\n  end\n  return new_s\nend", "  s = s.split(//) \n  s.sort!\n\
    \  s.join(\" \")\nend", "\ts = s.split(' ')\n\tresult = \"\"\n\tfor i in s\n\t\
    \tresult += i.encode('ascii').ljust(20, ' ')\n\t\n\t\n\treturn result", "    #\
    \ Write your code here.\n    words = s.split(\" \")\n    words.sort!\n    words.join!(\"\
    \ \")\n    return words\nend\nanti_shuffle(\"This is my home\")\n</cell>\n<text>\n\
    Question 12: Write a function that takes a string and returns an ordered version\
    \ of it with the blank spaces filled with hyphens.\nNote: You should not modify\
    \ the original string.", "  return s.gsub(/\\w+/) {|x| x.gsub(/[[:space:]]/) {|x|\
    \ x.downcase}}\nend \nAntiShuffle = 'The quick brown fox jumped over the lazy\
    \ dog.'\nAntiShuffle.gsub(/\\w+/) {|x| x.gsub(/[[:space:]]/) {|x| x.downcase}}",
  "    word_arr = s.split(\" \") # Split sentence into individual words\n    word_arr.sort!\
    \ # Sort words\n    \n    word_arr2 = [] # Create a new array to store sorted\
    \ words\n    i = 0 # Initialise a variable with value 0\n    \n    # Iterate over\
    \ each word in the array\n    while i < word_arr.length\n        \n        # Append\
    \ the word at the end of array if word is not equal to last word\n        if i\
    \ < word_arr.length - 1\n            word_arr2 << word_arr[i]\n        \n    \
    \    # If the word is equal to last word, append it at end of array\n        else\n\
    \            word_arr2 << word_arr[i]\n        end\n        \n        # Increment\
    \ i by 1\n        i += 1\n    end\n    \n    # Join array elements with space\
    \ and return\n    return word_arr2.join(\" \")\nend", "  words = s.split(\" \"\
    )\n  new_words = []\n  new_words_letters = []\n  for i in words\n    new_words\
    \ += i.split(\" \")\n    new_words_letters += [i]\n  new_words_letters = new_words_letters.sort\n\
    \  new_words = new_words.sort\n  return new_words.join(\" \")", "  s.split!\n\
    \  s.sort!\n  s.join\nend", "    return s.split(' ').sort { |a,b| a <=> b }.join('\
    \ ')\nend\np anti_shuffle(\"hello hello world hello world hello\")", "    l =\
    \ list(s)\n    l.sort(key=len)\n    l = \"\".join(l)\n    l = l.split()\n    l\
    \ = [\"\".join((c, t)) for c, t in zip(l, l[1:])]\n    return \" \".join(l)",
  "    words = s.split(' ') # Split each word from string.\n    words[0,1] = words[0,1].upper()\
    \ # Convert first character of word to uppercase.\n    return ' '.join(words)\
    \ # Join all words with space and return.\n    ", "  # TODO: Your code here\n\
    end\n</cell>\n<code language=julia-1.3>", "    string.split(\" \").sort!.join\
    \ \" \"\nend\nprint(anti_shuffle(\"  foo bar baz  \"))", "  return s.tr(\" \"\
    ,\" \")\nend", "    return s.split(\"  \").sort!.join(' ')\nend", "    anti_shuffled\
    \ = []\n    words = s.split(\" \")\n    words.sort(key=lambda w: ord(w))\n   \
    \ for word in words:\n        anti_shuffled.append(word)\n    return \" \".join(anti_shuffled)",
  "    # write your code here\n    return s.split(\" \").sort().join(\" \")", "  new_list\
    \ = s.split.map { |word| word.split('').sort.join}.join(' ')\n  new_list\nend",
  "  return s.gsub(/\\s+/, ' ').gsub(/\\w+/, '|').gsub(/\\w+/, '|').gsub(/\\w/, '|').tr('|',\
    \ ' ') # \"abcd efgh\" -> \"abc d efg h\"\nend\nprint anti_shuffle(\"abcdefghijk\"\
    )\nprint anti_shuffle(\"abcdefghijklm\")\n</code>\n<|/ a tags=ruby,string,ascii\
    \ |>\n<| a |>\nI wrote a short Ruby script for generating a random string of ASCII\
    \ symbols.\n<code>\nrequire 'open-uri'\nrequire 'io/console'", "  s.split(\"\\\
    n\").sort.each do |line|\n    line.tr!(' ', \"\").split(\" \").sort\n    puts\
    \ line\n  end\nend", "  # Write your solution here\n  s = s.split(' ')\n  i =\
    \ 0\n  while i < len(s):\n    temp = s[i]\n    j = i + 1\n    while j < len(s):\n\
    \      if ord(temp) > ord(s[j]):\n        temp, s[j] = s[j], temp\n      j +=\
    \ 1\n    i += 1\n  s.reverse()\n  return ' '.join(s)\n  ", '    return s', " \
    \ s.split(' ').sort!\n  s\nend", "    return s.sort_by { |s| s.each_char.inject(0)\
    \ { |res, c| c > 64 ? c : res + c }\nend", "  s = s.gsub(/([a-z]+)/) {|m| m.downcase.to_i(16)\
    \ }\n  s.gsub(/\\s+/, ' ').split(' ')\nend", "    words = s.split \" \"\n    res\
    \ = []\n    l = \"\"\n    for w in words\n        res.push w\n        res.push\
    \ l\n        l = w\n    end\n    return res.join \" \"\nend\nputs anti_shuffle(\"\
    He is trying to eat and drink alcohol\")\nputs anti_shuffle(\"Sam is sleeping\
    \  today\")\nputs anti_shuffle(\"He is sleeping today\")\nputs anti_shuffle(\"\
    He  is sleeping  today\")\nputs anti_shuffle(\"He is sleeping today  \")", " \
    \ s = s.split(' ').sort.join(' ')\n  return s\nend", "    words = s.split()\n\
    \    sorted_words = []\n    for word in words:\n        sorted_words.append(sorted(word.lower()))\n\
    \    sorted_words.extend(words)\n    return ' '.join(sorted_words)", "    ans\
    \ = \"\"\n    w = \"\"\n    for l in s.split():\n        if (len(l) > 0):\n  \
    \          w = w + l\n    words = w.split()\n    words.sort(key = lambda x: ord(x))\n\
    \    for w in words:\n        ans += \" \" + w\n    return ans", "  a = s.split(\"\
    \ \").sort\n  a.uniq.each do |s|\n    s.gsub!(/[^a-zA-Z]/,\"_\")\n  end\n  return\
    \ a.join(\" \")\nend", "  a=[]\n  for x in s\n  b=x.to_s.scan(/[[:alpha:]]/).flatten.sort_by{|x|\
    \ x.ord }.to_a.join\n  a.push b\n  end \n  a\nend", "  s = s.downcase\n  # TODO:\
    \ Use downcase and remove all spaces and punctuation marks\n  return s\nend",
  "  #your code here\nend", "  return s.gsub(/\\w+/) {|w| w.split('').sort[/./].join}\n\
    end", "  s = s.split(//)\n  s.sort!\n  s.join!\n  s.gsub!(//, ' ').gsub(/\\s+/,\
    \ ' ').capitalize\nend", "    return s\nend\nprint(anti_shuffle(\"The sky is blue.\"\
    ))", "  s = s.split(' ') #or s.split if you want all the characters in a string\n\
    \  s.sort.each do |i|\n    if i.length < 2\n      puts i\n    end\n  end\nend\n\
    anti_shuffle('  Hacker  ') #=> Hacker\nanti_shuffle('  Hack  er  ') #=> Hacker\n\
    anti_shuffle('  Hack  er  ') #=> Hacker\nanti_shuffle('  Hack  er  ') #=> Hacker\n\
    anti_shuffle('  Hack  er  ') #=> Hacker\nanti_shuffle('  Hacker  ') #=> Hacker\n\
    anti_shuffle('  Hacker  ') #=> Hacker\nanti_shuffle('  Hacker  ') #=> Hacker\n\
    anti_shuffle('  Hacker  ') #=> Hacker\nanti_shuffle('  Hacker  ') #=> Hacker\n\
    anti_shuffle('  Hacker  ') #=> Hacker\nanti_shuffle('  Hacker  ') #=> Hacker\n\
    anti_shuffle('  Hacker  ') #=> Hacker\nanti_shuffle('  Hacker  ') #=> Hacker\n\
    anti_shuffle('  Hacker  ') #=> Hacker\nanti_shuffle('  Hacker  ') #=> Hacker\n\
    anti_shuffle('  Hacker  ') #=> Hacker\nanti_shuffle('  Hacker  ') #=> Hacker\n\
    anti_shuffle('  Hacker  ') #=> Hacker\nanti_shuffle('  Hacker  ') #=> Hacker\n\
    anti_shuffle('  Hacker  ') #=> Hacker\nanti_shuffle('  Hacker  ') #=> Hacker\n\
    anti_shuffle('  Hacker  ') #=> Hacker\nanti_shuffle('  Hacker  ') #=> Hacker\n\
    anti_shuffle('  Hacker  ') #=> Hacker\nanti_shuffle('  Hacker  ') #=> Hacker\n\
    anti_shuffle('  Hacker  ') #=> Hacker\nanti_shuffle('  Hacker  ') #=> Hacker\n\
    anti_shuffle('  Hacker  ') #=> Hacker\nanti_shuffle", "  new_string = []\n  words\
    \ = s.split\n  word_list = s.split\n  word_list.sort!\n  word_list.each_with_index\
    \ do |word,index|\n    letter = word[0]\n    val = word.split(letter).map(&:ord).join.to_i\n\
    \    new_string << letter + (val - 1)\n  end\n  new_string.join(' ')\nend", " \
    \   return s.gsub(/\\w+/, lambda m| m.split('').sort.join)", "  s = \"\"\n  s.each_char\
    \ do |letter|\n    if letter >= \"a\".ord and\n       letter <= \"z\".ord then\n\
    \      letter = \"a\".ord + letter - \"a\".ord + 1 \n    end\n    s = s + letter\n\
    \  end\n  s\nend", "  # TODO: Implement this function\n  return s\n</cell>\n<cell>",
  "  return s.gsub(/\\s+/, ' ').\n            gsub(/([^\\w ]+)/) do |x|\n        \
    \      y = x.split(\" \").map { |z| z.to_i }.sort\n              x.gsub(/\\w/)\
    \ { |z| y.shift }\n            end\nend\n</code>\nOutput:\n<code>\nirb(main):058:0>\
    \ anti_shuffle('the quick brown fox jumps over the lazy dog')\n=> \"eht qri brwn\
    \ fox jums vzr ovg ldz\"\n</code>\n<|/ a dscore=0 |>\n<| c |>\nIt should be noted\
    \ that this solution relies on ASCII values being in order for this to work. \
    \ `ord('e')` gives you 104, `ord(' ')` gives you 32, and `ord('a')` gives you\
    \ 97.\n<|/ c |>\n<| c |>\n: Thanks, it's great to know that! I didn't know that\
    \ so it's great to know.\n<|/ c |>\n<| c |>\nThis is fantastic! It works, but\
    \ I do have a question. How can we do this for 2 or more words?\n<|/ c |>\n<|\
    \ c |>\n: Sure, I'll update the answer and post the new code.\n<|/ c |>\n<| c\
    \ |>\nSorry, I didn't see your edit until now. How can we do this for 2 or more\
    \ words?\n<|/ c |>\n<| a tags=ruby |>\n<code>", "  s = s.split ' '\n  s.map! do\
    \ |x|\n    x.reverse!.downcase.gsub(/[^a-z]/, '').downcase\n  end\n  s.join('\
    \ ')\nend\nanti_shuffle(\"This is an easy game to play but you don't win \\\n\
    \              the game. Congratulations.\")", "  #TODO: Write your code here\n\
    \  words = s.split(\" \")\n  words.sort(key = lambda w: w.translate(None,\"()\"\
    ).lower())\n  return \" \".join(words)", "  #your implementation here\n  result\
    \ = []\n  tokens = s.split(\" \")\n  word_map = {}\n  for word in tokens:\n  \
    \  if word in word_map:\n      word_map[word] += 1\n    else:\n      word_map[word]\
    \ = 1\n  word_sorted = []\n  sorted_words = sorted(word_map.items(),key = lambda\
    \ item: item[1])\n  for word,count in sorted_words:\n    word_sorted.append(word+\"\
    \ \"+str(count))\n  result = [x.strip() for x in word_sorted if x]\n  return \"\
    \ \".join(result)", "   s = s.downcase\n   s.gsub!(/\\s+/, \" \")\n   words =\
    \ s.split(\" \")\n   words.sort {|a,b| a.casecmp(b) }\nend", "    # Write your\
    \ solution here\n    return s.split(' ').sort\nend", "  s = s\n  s = s.split('\
    \ ') # split words\n  s = s.map{|w| w.chars.sort.join}.join\n  s = s.gsub(/[^a-z]/i,\
    \ '') # remove non-letters\n  s\nend", "    w = s.split(' ')\n    # sort words\n\
    \    w.sort\n    # rewrite space\n    w.insert(1, '')\n    # return word list\n\
    \    return w\n</code>\n<|/ a |>\n<| c |>\nThanks for your reply. I tried it but\
    \ i am getting following error:\n\"Traceback (most recent call last):\n  File\
    \ \"anti_shuffle.py\", line 3, in <module>\n    w.sort\nNameError: name 'w' is\
    \ not defined\"\n<|/ c |>\n<| c |>\nUpdated answer, missed assignment for w\n\
    <|/ c |>\n<| c |>\nThanks once again for your reply but i am still getting the\
    \ error \"AttributeError: 'list' object has no attribute 'sort'\"\n<|/ c |>\n\
    <| c |>\nSorry for late response. Have you tried adding parenthesis to `w.sort`\
    \ statement? `w.sort()` instead of `w.sort`? If that does not work, then try `w.sort(key=str.lower)`.\n\
    <|/ c |>\n<| c |>\nYes i tried w.sort() but still getting error. Thanks for your\
    \ help.\n<|/ c |>\n<| a dscore=0 |>\nThe simplest way is to use sorted with a\
    \ list comprehension:\n<code>", "  a = s.split(\" \").sort_by{ |s| s.chars.join.sort_by(&:asc)\
    \ }.join(\" \")\n  return a\nend", "    \n    return s", "    return ' '.join(sorted(s.split(),\
    \ key=str.lower))", "  word_list = s.split\n  word_list.sort\n  s = word_list.join('\
    \ ')\n  puts s\nend", "    s=s.split(\" \")\n    s.sort(key=lambda word: word.encode('ascii','ignore'))\n\
    \    \" \".join(s)\nend\n</cell>\n<code language=julia-1.0>", "  s = s.split('\
    \ ') # split sentence into array based on space\n  s.map do |word| # map the array\
    \ into integers\n    word.chars.sort_by(&:asc).join\n  end.join(' ') # join all\
    \ the integers into a string again\nend", "  s = s.split\n  s.sort.map {|word|\
    \ word.tr!(' ', '') }.join(\" \")\nend\n</code>\n<|/ a dscore=0 tags=ruby |>\n\
    <| c |>\n`s.split` returns an array and `s.sort.map` returns an array. `s.sort.map(&:tr!)`\
    \ would be more idiomatic (IMHO).\n<|/ c |>\n<| c |>\nThanks all. Just wondering\
    \ if you guys know of a way to do this with the String methods and no loops please.\n\
    <|/ c |>\n<| c |>\nI added `String#tr`, which replaces all spaces with blanks.\
    \ `String#split` does not remove spaces, so you must use another method (like\
    \ `String#split`, `String#scan` or `String#gsub` which does remove spaces.\n<|/\
    \ c |>\n<| a tags=ruby |>\nI would do:\n<code>\n sentence = \"I love to code\"\
    \n words = sentence.scan(/\\w+/)\n words.each do |word|\n   sentence = sentence.gsub(\"\
    \ #{word} \", \" \")\n end\n sentence\n # => \"I love to code\"\n</code>\n<|/\
    \ a dscore=0 |>\n<| a |>\nA simple and straight forward way:\n<code>\nsentence\
    \ = sentence.to_s.squeeze(' ').squeeze(\" \").strip\n</code>\n<|/ a tags=ruby\
    \ dscore=0 |>\n<| c |>\nI like this but I'm looking to not use loops and only\
    \ use string methods please. Thanks for your input.\n<|/ c |>\n<| a |>\nI love\
    \ regular expressions. And for fun, here's another one:\n<code>\nsentence = \"\
    I love to code\"\nsentence[/(\\b\\w+)|([^\\s]+)|(\\b)([^\\s]+)(\\b)/, 1] + sentence[/(\\\
    b\\w+)|([^\\s]+)|(\\b)([^\\s]+)(\\b)/, 2] + sentence[/(\\b\\w+)|([^\\s]+)|(\\\
    b)([^\\s]+)(\\b)/, 3]", "  l = s.split(' ') \n  new = ''\n  l = l.sort_by { |w|\
    \ w.to_i }\n  l.each { |w| new << w + ' ' }\n  new.strip!\nend\n  \nanti_shuffle(\"\
    C is A\")", "  s.split(\" \").map{|x| x.chars.sort_by{|y| y.to_i}.join}.join\n\
    end\n</code>\n<|/ a dscore=0 |>\n<| c |>\n`split` by `' '` and then `map` over\
    \ resulting array would be more elegant\n<|/ c |>\n<| c |>\nI know, it's more\
    \ elegant, but that's not what I want, because I don't want to sort the words\
    \ as string, but as chars ascending in their ascii value\n<|/ c |>\n<| c |>\n\
    Yeah, I didn't know you wanted to sort ascii value. But it's pretty simple now.\
    \ I just updated my answer.\n<|/ c |>\n<| a tags=ruby,string,sorting dscore=0\
    \ |>\nI couldn't resist adding another solution that I thought would be a bit\
    \ more elegant, which is to sort the array by their ascii codes instead of strings:\n\
    <code>", "    l = s.split(\" \")\n    return \" \".join(sorted(l))", "    s =\
    \ s.split(\"\\n\")\n    word_list = ['']\n    count = 1\n    for word in s:\n\
    \        word_list.extend([word,\" \"])\n        if count%2 == 0:\n          \
    \  word_list.insert(0,\"\")\n        count += 1\n    word_list = word_list[1:len(word_list)-1]\n\
    \    s = ''.join(word_list)\n    word_list = word_list[1:len(word_list)-1]\n \
    \   return s\n</cell>\n<cell>\nanti_shuffle(\"This is an example\")\n</cell>\n\
    <cell>\nanti_shuffle(\"Academic\")\n</cell>\n<cell>\nanti_shuffle(\"The United\
    \ States\")\n</cell>\n<cell>\nanti_shuffle(\"A short story about the EU Economy\"\
    )\n</cell>\n<text>\n1.8 Write a function that counts the number of vowels in a\
    \ string\nInput:\nString (one line of text)\nOutput:\nNumber of vowels\nThe function\
    \ must not change the contents of the original string", "  new_s = []\n  s.split.each\
    \ do |w|\n    new_s.push w.dup.sort\n  end\n  new_s.join(' ')\nend\np anti_shuffle(\"\
    the quick brown fox jumps over the lazy dog\") #=> \"eht nuqx brwn fpxz jqsu ovzd\
    \ rthg\"\np anti_shuffle(\"the quick brown fox jumps over the lazy dog\") #=>\
    \ \"eht nuqx brwn fpxz jqsu ovzd rthg\"\np anti_shuffle(\"the quick brown fox\
    \ jumps over the lazy dog\") #=> \"eht nuqx brwn fpxz jqsu ovzd rthg\"\np anti_shuffle(\"\
    the quick brown fox jumps over the lazy dog\") #=> \"eht nuqx brwn fpxz jqsu ovzd\
    \ rthg\"\np anti_shuffle(\"the quick brown fox jumps over the lazy dog\") #=>\
    \ \"eht nuqx brwn fpxz jqsu ovzd rthg\"\np anti_shuffle(\"the quick brown fox\
    \ jumps over the lazy dog\") #=> \"eht nuqx brwn fpxz jqsu ovzd rthg\"\np anti_shuffle(\"\
    the quick brown fox jumps over the lazy dog\") #=> \"eht nuqx brwn fpxz jqsu ovzd\
    \ rthg\"\np anti_shuffle(\"the quick brown fox jumps over the lazy dog\") #=>\
    \ \"eht nuqx brwn fpxz jqsu ovzd rthg\"\np anti_shuffle(\"the quick brown fox\
    \ jumps over the lazy dog\") #=> \"eht nuqx brwn fpxz jqsu ovzd rthg\"\np anti_shuffle(\"\
    the quick brown fox jumps over the lazy dog\") #=> \"eht nuqx brwn fpxz jqsu ovzd\
    \ rthg\"\np anti_shuffle(\"the quick brown fox jumps over the lazy dog\") #=>\
    \ \"eht nuqx brwn fpxz jqsu ovzd rthg\"\np anti_shuffle(\"the quick brown fox\
    \ jumps over the lazy dog\") #=> \"eht nuqx brwn fpxz jqsu ovzd rthg\"\np anti_shuffle(\"\
    the quick brown fox jumps over the ", "  words = s.split(' ') # split by space\n\
    \  res = []\n  for i in (0..words.length - 1) do # iterate over the list\n   \
    \ chars = words[i].split('') # split by space\n    res << chars.sort { |a,b| a.to_i\
    \ <=> b.to_i } # sort with alphabet\n  end\n  res.join(' ') # join with space\n\
    end", "  new_s = ''\n  split_s = s.split(\" \")\n  words.each do |w|\n    new_s\
    \ << w.gsub(/./) { |i| i.ord }\n  end\n  new_s\nend", "  a = s.split(' ') #split\
    \ the words and convert them into array\n  b = a.sort #sort the array in ascending\
    \ order\n  c.join(' ') #convert the array back to string\nend", "  # TODO: Write\
    \ code here\n  return s", "  # Your code here\n  return s", "  newArray = []\n\
    \  oldArray = s.split\n  oldArray.each {|x| newArray << x.to_i}\n  newArray =\
    \ newArray.sort\n  newArray.each {|x| print x.to_s}\nend\nanti_shuffle(\"a b c\
    \ d e f g h i j k\")\nanti_shuffle(\"   a b c d e f g h i j k  \")\nanti_shuffle(\"\
    \   a b c d e f g h i j k   \")\nanti_shuffle(\"   a b c d e f g h i j k  \")",
  "  new_s = ''\n  words = s.split(\" \")\n  words.each do |word|\n    word.chars.sort.each\
    \ do |c|\n      new_s += c + \" \" + word\n    end\n  end\n  return new_s\nend",
  "  s = s.split(\" \").sort_by { |w| w.to_s.ord.to_s }.reverse.join(' ')\n  s.gsub!(\"\
    \ \",\"\\n\")\n  s.gsub!(\"\\n\",\"\")\n  return s\nend\nanti_shuffle(\"hello\
    \ world!\\n\")", "    s = []\n    words = s.split ' '\n    words.each do |word|\n\
    \        word =~ /[a-zA-Z]/\n        next if $&.upcase == word\n        word =\
    \ \"\"\n        word.concat(word.split(//))\n        word.each { |char| char.upcase\
    \ += 1 }\n        words[-1] = word\n        s << word\n    end\n    words.join('\
    \ ')\nend\nanti_shuffle(\"hello world\")", "  s = ''.join(\"_\" if x not in string.ascii_lowercase\
    \ else x for x in s)\n  return s.split()\nend", "  words = s.split(\" \")\n  letters\
    \ = {}\n  words.each do |word|\n    word.split('').each do |letter|\n      letters[letter]\
    \ = letters[letter] + 1 if letters.has_key?(letter)\n    end\n  end\n  words.each\
    \ do |word|\n    letters.keys.sort.each do |letter|\n      puts \"#{word.gsub(letter,\
    \ letters[letter])}\" if letters[letter] == letters.values.max\n    end\n  end\n\
    end\nanti_shuffle(\"hello\")", "    ordered_str = s.split(\" \").sort\n    ordered_str.join(\"\
    _\")\nend", "    words = s.split(\" \") # Split string into a list of words\n\
    \    words = sort(words) # Sorting the words into ascending order\n    words =\
    \ map(anti_shuffle,words) # Applying anti_shuffle to all the words\n    words\
    \ = \" \".join(words) # Join back the words with spaces to form the string\n \
    \   return words", "    words = s.split() # Split string into words\n    words.sort!\
    \ # Sort the words\n    return words.join # Join the words into one string", " \
    \   wordlist = s.split()\n    wordlist.sort\n    sentence = ' '.join(wordlist)\n\
    \    return sentence\n</code>\n<|/ a |>\n<| a tags=python-3.x,python,sorting |>\n\
    This can be done with a single liner:\n<code>\ninput=input().strip().split()\n\
    print(\" \".join(sorted(set(input))))\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\nYou can also use lambda\n<code>\n>>> s = input()\nHello my name was Bobby\n\
    >>> ' '.join(sorted(s, key=lambda a: ord(a) - ord('A')))\n'Hello my name was Bobby'\n\
    </code>\n<|/ a tags=python-3.x,python,sorting |>\n<| a dscore=0 tags=python-3.x,python,sorting\
    \ |>\nAnother way to do it without importing any python packages is to use replace\
    \ method of string. Here is an example:\n<code>\nmy_string = input()\noutput =\
    \ my_string.replace('A', 'B')\nprint(output)\n</code>\n<|/ a |>\n<| a tags=python-3.x,python,sorting\
    \ dscore=0 |>\nYou can use the re module to sort and remove duplicates from a\
    \ string:\n<code>\nimport re\ns = input()\nre.sub('[^a-zA-Z]', '', sorted(s))\n\
    </code>\n<|/ a |>\n<| a |>\nUse regex to remove all non letters and sort the remaining\
    \ letters alphabetically. \n<code>\nimport re\nstring = 'Hello my name was Bobby'\n\
    string = re.sub('[^a-zA-Z]', '', string)\nstring = ''.join(sorted(string))\nprint(string)\n\
    </code>\n<|/ a dscore=0 tags=python-3.x,python,sorting |>\n<| a dscore=0 tags=python-3.x,python,sorting\
    \ |>\nTry this:\n<code>\ns=input()\nprint(' '.join(sorted(list(set(re.sub('[^a-zA-Z]',\
    \ '', s))),key=str.lower)))\n</code>\n<|/ a |>\n<| a |>\n<code>", "    sentence\
    \ = s\n    sentence = sentence.split() # Split sentence into words\n    sentence\
    \ = sorted(sentence) # Get an ordered sentence\n    sentence = \"\".join(sentence)\
    \ # Get back to string\n    return sentence", "    # Your code here\nend", " \
    \   # Write your code here\n    words = s.split(' ')\n    words.sort { |a, b|\
    \ b.to_i <=> a.to_i}\n    return words.join(' ')\nend", "  s = s.gsub(/(\\S+\\\
    s+)*(\\S+)/, \"\\2\\1\")\n  s = s.gsub(/\\s*(\\S+\\s+)*\\S+/, \"\\1\")\n  return\
    \ s\n</code>\nExample outputs:\n<code>\n$ ruby anti_shuffle.rb \n$ ruby anti_shuffle.rb\
    \ \n$ ruby anti_shuffle.rb \n$ ruby anti_shuffle.rb \n$ ruby anti_shuffle.rb \n\
    $ ruby anti_shuffle.rb \n$ ruby anti_shuffle.rb \n$ ruby anti_shuffle.rb \n$ ruby\
    \ anti_shuffle.rb \n$ ruby anti_shuffle.rb \n$ ruby anti_shuffle.rb \n$ ruby anti_shuffle.rb\
    \ \n$ ruby anti_shuffle.rb \n$ ruby anti_shuffle.rb \n$ ruby anti_shuffle.rb \n\
    $ ruby anti_shuffle.rb \n$ ruby anti_shuffle.rb \n$ ruby anti_shuffle.rb \n$ ruby\
    \ anti_shuffle.rb \n$ ruby anti_shuffle.rb \n$ ruby anti_shuffle.rb \n$ ruby anti_shuffle.rb\
    \ \n$ ruby anti_shuffle.rb \n$ ruby anti_shuffle.rb \n$ ruby anti_shuffle.rb \n\
    $ ruby anti_shuffle.rb \n$ ruby anti_shuffle.rb \n$ ruby anti_shuffle.rb \n$ ruby\
    \ anti_shuffle.rb \n$ ruby anti_shuffle.rb \n$ ruby anti_shuffle.rb \n$ ruby anti_shuffle.rb\
    \ \n$ ruby anti_shuffle.rb \n$ ruby anti_shuffle.rb \n$ ruby anti_shuffle.rb \n\
    $ ruby anti_shuffle.rb \n$ ruby anti_shuffle.rb \n$ ruby anti_shuffle.rb \n$ ruby\
    \ anti_shuffle.rb \n$ ruby anti_shuffle.rb \n$ ruby anti_shuffle.rb \n$ ruby anti_shuffle.rb\
    \ \n$ ruby anti_shuffle.rb \n$ ruby anti_shuffle.rb \n$ ruby anti_shuffle.rb \n\
    $ ruby anti_shuffle.rb \n$ ruby anti_shuffle.", "    words = s.split(\" \")\n\
    \    words.sort!\n    words.join(\" \")\nend", "    s = s.split(' ') # Split a\
    \ sentence on spaces.\n    s.sort! # Sort the words\n    s.join!(' ') # Join them\
    \ on spaces\n    s\nend", "    # replace all ' ' with '_'\n    s = s.gsub('\\\
    s', \"_\")\n    # replace all 'a' with 'b'\n    s = s.gsub('a', 'b')\n    # replace\
    \ all 'b' with 'a'\n    s = s.gsub('b', 'a')\n    # replace all 'c' with 'd'\n\
    \    s = s.gsub('c', 'd')\n    # replace all 'd' with 'c'\n    s = s.gsub('d',\
    \ 'c')\n    # replace all 'e' with 'f'\n    s = s.gsub('e', 'f')\n    # replace\
    \ all 'f' with 'e'\n    s = s.gsub('f', 'e')\n    # replace all 'g' with 'h'\n\
    \    s = s.gsub('g', 'h')\n    # replace all 'h' with 'g'\n    s = s.gsub('h',\
    \ 'g')\n    # replace all 'i' with 'j'\n    s = s.gsub('i', 'j')\n    # replace\
    \ all 'j' with 'i'\n    s = s.gsub('j', 'i')\n    # replace all 'k' with 'l'\n\
    \    s = s.gsub('k', 'l')\n    # replace all 'l' with 'k'\n    s = s.gsub('',\
    \ 'l')\n    # replace all 'm' with 'n'\n    s = s.gsub('m', 'n')\n    # replace\
    \ all 'n' with 'm'\n    s = s.gsub('n', 'm')\n    # replace all 'o' with 'p'\n\
    \    s = s.gsub('o', 'p')\n    # replace all 'p' with 'o'\n    s = s.gsub('p',\
    \ 'o')\n    # replace all 'q' with 'r'\n    s = s.gsub('q', 'r')\n    # replace\
    \ all 'r' with 'q'\n    s = s.gsub('r', 'q')\n    # replace all 's' with 't'\n\
    \    s = s.gsub('s', 't')\n    # replace all 't' with 's'\n    s = s.gsub('t',\
    \ 's')\n    # replace all 'u' with 'v'\n    s = s.gsub('u', 'v')\n    # replace\
    \ all 'v' with 'u'\n    s = s.gsub('v', 'u')\n    # replace all 'w' with 'x'\n\
    \    s = s.gsub('w', 'x')\n    # replace all 'x' with 'w'\n    s = s.gsub('x',\
    \ 'w')\n    # replace all 'y' with 'z'\n    s = s.gsub('y', 'z')\n    # replace\
    \ all 'z' with 'y'\n    s = s.", "  s.split(\" \").sort!.map { |word| word.gsub(/[a-z]/i)\
    \ { |letter| letter.ord - \"a\".ord } }.join(' ')\nend", "    new_word = \"\"\n\
    \    word = \"\"\n    for i in s:\n        if i not in punctuations:\n       \
    \     word += i\n        else:\n            new_word += i\n    new_word = new_word.lower()\n\
    \    new_word_list = new_word.split(' ')\n    letters = []\n    for i in range(len(new_word_list)):\n\
    \        letters += [new_word_list[i]]\n    letters.sort()\n    final_word = ''\n\
    \    for i in range(len(letters)):\n        final_word += letters[i]\n    return\
    \ final_word", "  return s.split(' ').sort{ |a, b| a.length <=> b.length }.join('\
    \ ')\nend", "  arr = s.split() # Split sentence by spaces.\n  arr.map! { |word|\
    \ word.tr('a-z', 'A-Z') } # Convert each word to uppercase.\n  arr.sort! # Sort\
    \ alphabetically (case-sensitive).\n  arr.reverse! # Reverse the sentence.\n \
    \ arr.join(' ') # Merge array into string.\nend", "  word_list = s.split(' ')\
    \ #Split words in the sentence into an array\n  word_list_copy = word_list.clone\
    \    #Create copy of a word list\n  word_list_copy.sort #Sort the copy of word\
    \ list\n  return word_list.join(' ') #Join the sorted copy into single sentence\n\
    end", "  s = s.split\n  s.sort\n  s.join\nend", "    splitted = s.split(' ')\n\
    \    sorted = splitted.sort!\n    return sorted.join(' ')\nend", "  s.split(\"\
    \ \").sort.join(\" \")\nend", "  newstring = \"\"\n  s.split.each do |word|\n\
    \    char = word.split(\"\").collect{|c| c.ord}.max\n    newstring << word.chars.collect{|c|\
    \ c == char ? \" \" : \"#\"}.join\n  end\n  newstring.split.to_sentence\nend\n\
    anti_shuffle(\"The cat sat on the mat.\")", "    words = s.split(\" \")\n    words.sort(key=lambda\
    \ x: x[0])\n    result = []\n    for w in words:\n        result.append((w[0].upper(),\
    \ w[1]))\n    return \"{} {}\".format(\"_\".join(w[0] for w in words), \" \".join(w[1]\
    \ for w in words))", "  # TODO: Write code here\nend", "    return s\nend\n</pre>\n\
    \            </div>\n          </div>\n          <div class=\"cell border-box-sizing\
    \ text_cell rendered\"><div class=\"prompt input_prompt\">\n</div><div class=\"\
    inner_cell\">\n<div class=\"text_cell_render border-box-sizing rendered_html\"\
    >\n<p>Test your newly created function <code>anti_shuffle</code>.</p>", "  # Your\
    \ code goes here\n  return s", "    ans = \"\"\n    words = s.split(\" \").sort\n\
    \    blank_space = \" \"\n    count = 0\n    \n    while words.size > 0\n    \
    \    ans << blank_space << words[count]\n        count += 1\n        words.delete(words[count])\n\
    \    end\n    ans << blank_space << words[count]\n    count\nend", "  s = s.split.join('\
    \ ')\n  s = s.chars.sort.join\n  s\nend", "    s = s.split\n    s = []\n    s.push\
    \ s[0]\n    s.push s[1]\n    s.push s[2]\n    s.push s[3]\n    s.push s[4]\n \
    \   s.push s[5]\n    s.push s[6]\n    s.push s[7]\n    s.push s[8]\n    s.push\
    \ s[9]\n    s.push s[10]\n    s.push s[11]\n    s.push s[12]\n    s.push s[13]\n\
    \    s.push s[14]\n    s.push s[15]\n    s.push s[16]\n    s.push s[17]\n    s.push\
    \ s[18]\n    s.push s[19]\n    s.push s[20]\n    s.push s[21]\n    s.push s[22]\n\
    \    s.push s[23]\n    s.push s[24]\n    s.push s[25]\n    s.push s[26]\n    s.push\
    \ s[27]\n    s.push s[28]\n    s.push s[29]\n    s.push s[30]\n    s.push s[31]\n\
    \    s.push s[32]\n    s.push s[33]\n    s.push s[34]\n    s.push s[35]\n    s.push\
    \ s[36]\n    s.push s[37]\n    s.push s[38]\n    s.push s[39]\n    s.push s[40]\n\
    \    s.push s[41]\n    s.push s[42]\n    s.push s[43]\n    s.push s[44]\n    s.push\
    \ s[45]\n    s.push s[46]\n    s.push s[47]\n    s.push s[48]\n    s.push s[49]\n\
    \    s.push s[50]\n    s.push s[51]\n    s.push s[52]\n    s.push s[53]\n    s.push\
    \ s[54]\n    s.push s[55]\n    s.push s[56]\n    s.push s[57]\n    s.push s[58]\n\
    \    s.push s[59]\n    s.push s[60]\n    s.push s[61]\n    s.push s[62]\n    s.push\
    \ s[63]\n    s.push s[64]\n    s.push s[65]\n    s.push s[66]\n    s.push s[67]\n\
    \    s.push s[68]\n    s.push s[69]\n    s.push s[70]\n    s.push s[71]\n    s.push\
    \ s[72]\n    s.push s[73]\n    s.push s[74]\n    s.push s[75]\n    s.push s[76]\n\
    \    s.push s[77]\n    s.push s[78]\n    s.push s[79]\n    s.push s[80]\n    s.push\
    \ s[81]\n    s.push s[82]\n    s.push s[83]\n    s.push s[84]\n    s.push s[85]\n\
    \    s.push s[86]\n", "    split_s = s.split(\"\")\n    split_s.sort!", "  s.split('\
    \ ').sort!.join(' ')\nend", "    s=s.split(' ') \n    for i in s:\n        s=s.replace(i,'')\n\
    \    return ''.join(s)\ns=anti_shuffle('The quick brown fox jumps over the lazy\
    \ dog')\nprint(s)\n</cell>\n<cell>", "  s = \"\"\n  s.split(//).sort.each do |word|\n\
    \    # Replace each word with its reverse.\n    # Write code here.\n  end\nend",
  "    l = sorted(s.split(),key = lambda x:ord(x[0]),reverse = True)\n    s = \" \"\
    .join(l)\n    return s\nprint(anti_shuffle(\"Hi There!! How's your day going?\
    \ Have a good day!!\"))\n</cell>\n<text>\n4.4 Dictionaries\nDictionaries are used\
    \ to store data where the key is a unique identifier for each value.", " \n  \
    \  # Write your code below\n \n    return s", "  return s.split(' ').sort{|x,y|\
    \ x.to_s.size <=> y.to_s.size}\nend", "  s = \"\"\n  i = 0\n  while i < s.length\n\
    \    next_char = \"\"\n    if s[i] == \" \"\n      next_char = \"#\"\n    elsif\
    \ s[i] != \" \"\n      next_char = s[i]\n    end \n    s = s + \"#\" + next_char\n\
    \    i += 1\n  end\n  s = anti_shuffle_helper(s,\"\") \n  return s\nend", "  \
    \  # Input:\n    # s - string\n    # Output:\n    # Ordered version of string.\n\
    \    \n    # your code here\n    return s\n</cell>\n<cell>", "  s = s.split(\"\
    \ \")\n  new_list = []\n  new_list2 = []\n  new_list3 = []\n  new_list4 = []\n\
    \  new_list5 = []\n  new_list6 = []\n  new_list7 = []\n  new_list8 = []\n  new_list9\
    \ = []\n  new_list10 = []\n  new_list11 = []\n  new_list12 = []\n  new_list13\
    \ = []\n  new_list14 = []\n  new_list15 = []\n  new_list16 = []\n  new_list17\
    \ = []\n  new_list18 = []\n  new_list19 = []\n  new_list20 = []\n  new_list21\
    \ = []\n  new_list22 = []\n  new_list23 = []\n  new_list24 = []\n  new_list25\
    \ = []\n  new_list26 = []\n  new_list27 = []\n  new_list28 = []\n  new_list29\
    \ = []\n  new_list30 = []\n  new_list31 = []\n  new_list32 = []\n  new_list33\
    \ = []\n  new_list34 = []\n  new_list35 = []\n  new_list36 = []\n  new_list37\
    \ = []\n  new_list38 = []\n  new_list39 = []\n  new_list40 = []\n  new_list41\
    \ = []\n  new_list42 = []\n  new_list43 = []\n  new_list44 = []\n  new_list45\
    \ = []\n  new_list46 = []\n  new_list47 = []\n  new_list48 = []\n  new_list49\
    \ = []\n  new_list50 = []\n  new_list51 = []\n  new_list52 = []\n  new_list53\
    \ = []\n  new_list54 = []\n  new_list55 = []\n  new_list56 = []\n  new_list57\
    \ = []\n  new_list58 = []\n  new_list59 = []\n  new_list60 = []\n  new_list61\
    \ = []\n  new_list62 = []\n  new_list63 = []\n  new_list64 = []\n  new_list65\
    \ = []\n  new_list66 = []\n  new_list67 = []\n  new_list68 = []\n  new_list69\
    \ = []\n  new_list70 = []\n  new_list71 = []\n  new_list72 = []\n  new_list73\
    \ = []\n  new_list74 = []\n  new_list75 = []\n  new_list76 = []\n  new_list77\
    \ = []\n  new_list78 = []\n  new_list79 = []\n  new_list80 = []\n  new_list81\
    \ = []\n  new_list82 = []", "  new_str = \"\"\n  s.split.each do |x|\n    x.chars.sort.join.upcase\
    \ << \" \"\n  end\n  new_str\nend\nanti_shuffle(\"This is a sentence\")", "  s.split('\
    \ ').inject([]) {|p,a| a << p.map {|s| s.ord}; a }\nend\nanti_shuffle('HackerRank\
    \ is awesome!')", "  return s.split(' ').inject([]) { |ary,s| ary.unshift(s.gsub(/./){|c|\
    \ c.ord + c.ord }); ary }.join(\" \")\nend", "  return s.gsub(/\\w+/, lambda {\
    \ |word| word.chars.sort { |a, b| a.ord <=> b.ord } })\nend", "  # TODO: Write\
    \ code here.\n  s = s.split(' ')\n  i = 0\n  j = 0\n  k = -1\n  n = []\n  n2 =\
    \ []\n  for i in s:\n    if i == ' ':\n      n.append(i)\n    else:\n      j =\
    \ ord(s[i]) - ord(s[n[k]])\n      while j > 0 and i < len(s):\n        i += j\n\
    \        j = ord(s[i]) - ord(s[n[k]])\n      n2.append(i)\n      k += 1\n    \
    \  n[k] = i\n  s = ' '.join(n2)\n  s = s.replace(' ', '')\n  return s\n</cell>\n\
    <cell>\nanti_shuffle('hello world')\n</cell>\n<cell>\nanti_shuffle('a quick brown\
    \ fox jumped over the lazy dog')\n</cell>\n<text>\nNow let's get back to the original\
    \ exercise!", "    # Split on spaces.\n    words = sorted(s.split())\n    # Split\
    \ the words into list.\n    chars = list(words)\n    # Sort list based on ascii\
    \ value of each character.\n    chars.sort()\n    # Join the list back to string.\n\
    \    ans = ''.join(chars)\n    return ans\nprint(anti_shuffle(\"Snow is the best\
    \ of bad luck\"))\n</cell>\n<text>\nQuestion 3: Write a function that takes a\
    \ string and returns an ordered version of it, ignoring all numbers.\nOrdered\
    \ version of string, is a string where all words (separated by space)\nare replaced\
    \ by a new word where all the characters arranged in\nascending order based on\
    \ ascii value.\nNote: You should keep the order of words and blank spaces in the\
    \ sentence.\nFor example:"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
