name: HumanEval_79_decimal_to_binary
language: rb
prompt: "# You will be given a number in decimal form and your task is to convert\
  \ it to\n# binary format. The function should return a string, with each character\
  \ representing a binary\n# number. Each character in the string will be '0' or '1'.\n\
  # There will be an extra couple of characters 'db' at the beginning and at the end\
  \ of the string.\n# The extra characters are there to help with the format.\n# Examples:\n\
  def decimal_to_binary(decimal)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_decimal_to_binary\n\
  \    candidate = method(:decimal_to_binary)\n    assert_equal(\"db0db\", candidate.call(0))\n\
  \    assert_equal(\"db100000db\", candidate.call(32))\n    assert_equal(\"db1100111db\"\
  , candidate.call(103))\n    assert_equal(\"db1111db\", candidate.call(15))\n  end\n\
  end\n"
completions: ["  # Your code here\n  return \"\"\nend", "    if decimal == 0 then\n\
    \        return \"0\"\n    elsif decimal == 1 then\n        return \"1\"\n   \
    \ else\n        decimal = str(decimal)\n        binary_str = \"\"\n        i =\
    \ 0\n        while i <= len(decimal) - 1 do\n            binary_str += \"0\"\n\
    \            i += 1\n        end\n        i = 0\n        while i <= len(decimal)\
    \ - 2 do\n            binary_str = binary_str + \"1\"\n            i += 1\n  \
    \      end\n        binary_str = binary_str + \"b\"\n        return binary_str\n\
    \    end\nend\n</cell>\n<code language=julia-1.6>\ndecimal_to_binary(0)\n</cell>\n\
    <code language=julia-1.6>\ndecimal_to_binary(0)\n</cell>\n<code language=julia-1.6>\n\
    decimal_to_binary(1)\n</cell>\n<code language=julia-1.6>\ndecimal_to_binary(10)\n\
    </cell>\n<code language=julia-1.6>\ndecimal_to_binary(100)\n</cell>\n<code language=julia-1.6>\n\
    decimal_to_binary(161)\n</cell>\n<code language=julia-1.6>\ndecimal_to_binary(162)\n\
    </cell>\n<code language=julia-1.6>\ndecimal_to_binary(163)\n</cell>\n<code language=julia-1.6>\n\
    decimal_to_binary(164)\n</cell>\n<code language=julia-1.6>\ndecimal_to_binary(165)\n\
    </cell>\n<code language=julia-1.6>\ndecimal_to_binary(166)\n</cell>\n<code language=julia-1.6>\n\
    decimal_to_binary(167)\n</cell>\n<code language=julia-1.6>\ndecimal_to_binary(168)\n\
    </cell>\n<code language=julia-1.6>\ndecimal_to_binary(169)\n</cell>\n<code language=julia-1.6>\n\
    decimal_to_binary(170)\n</cell>\n<code language=julia-1.6>\ndecimal_to_binary(171)\n\
    </cell>\n<code language=julia-1.6>\ndecimal_to_binary(172)\n</cell>\n<code language=julia-1.6>\n\
    decimal_to_binary(173)\n</cell>\n<code language=julia-1.6>\ndecimal_to_binary(174)\n\
    </cell>\n<code language=julia-1.6>\ndecimal_to_binary(175)\n</cell>\n<code language=julia-1.6>\n\
    decimal_to_binary(176)\n</cell>\n<code language=julia-1.6>\ndecimal_to_binary(177)\n\
    </cell>\n<code language=julia-1.6>\ndecimal_to_binary(178)\n</cell>\n<code language=julia-1.6>\n\
    decimal_to_binary(179)\n</cell>\n<code language=julia-1.6>\ndecimal_to_binary(180)",
  "  # Your code here\nend", "    string = \"\"\n    \n    i = decimal\n    while\
    \ i > 0 do\n        i = i / 2\n        string += \"0\"\n    end\n    \n    i =\
    \ decimal\n    while i > 0 do\n        i = i / 2\n        string += \"1\"\n  \
    \  end\n    \n    string = \"db\" + string\n    return string\nend", "  binary\
    \ = []\n  while decimal != 0\n    binary.push decimal%2\n    decimal = decimal/2.0\n\
    \  end\n  binary.push decimal%2\n  return binary.reverse.pack('c*')\nend", " \
    \ decimal = decimal.abs\n  result = \"\"\n  digit = decimal.floor\n  remainder\
    \ = decimal.modulo", "    decimal = decimal.to_s\n    binary = \"\"\n    decimal.split(\"\
    \").each do |n|\n        binary += n.to_s(2)\n    end\n    binary = \"#{binary}db\"\
    \n    binary.split(\"\").each do |n|\n        binary += n.to_s(2)\n    end\n \
    \   return binary\nend", "    binary = \"\"\n    num = decimal.to_s\n    decimal_rem\
    \ = decimal.modulo(2).to_s\n    if decimal_rem == 1\n        binary = num + \"\
    b\"\n    else \n        binary = num + \"b\"\n    end\n    decimal = decimal.div(2).to_s\n\
    \    decimal.upto(1) do |i|\n        if decimal.modulo(2) == 0 \n            binary\
    \ = \"1\" + binary \n        else\n            binary = \"0\" + binary\n     \
    \   end\n        decimal = decimal.div(2).to_s\n    end\n    binary = binary.chop\n\
    \    binary = binary.reverse\n    binary = binary.reverse\n    binary = binary.reverse\n\
    \    binary = binary.reverse\n    binary = binary.reverse\n    binary = binary.reverse\n\
    \    binary = binary.reverse\n    binary = binary.reverse\n    binary = binary.reverse\n\
    \    binary = binary.reverse\n    binary = binary.reverse\n    binary = binary.reverse\n\
    \    binary = binary.reverse\n    binary = binary.reverse\n    binary = binary.reverse\n\
    \    binary = binary.reverse\n    binary = binary.reverse\n    binary = binary.reverse\n\
    \    binary = binary.reverse\n    binary = binary.reverse\n    binary = binary.reverse\n\
    \    binary = binary.reverse\n    binary = binary.reverse\n    binary = binary.reverse\n\
    \    binary = binary.reverse\n    binary = binary.reverse\n    binary = binary.reverse\n\
    \    binary = binary.reverse\n    binary = binary.reverse\n    binary = binary.reverse\n\
    \    binary = binary.reverse\n    binary = binary.reverse\n    binary = binary.reverse\n\
    \    binary = binary.reverse\n    binary = binary.reverse\n    binary = binary.reverse\n\
    \    binary = binary.reverse\n    binary = binary.reverse\n    binary = binary.reverse\n\
    \    binary = binary.reverse\n    binary = binary.reverse\n    binary = binary.reverse\n\
    \    binary = binary.reverse\n    binary = binary.reverse\n    binary = binary.reverse\n\
    \    binary = binary.reverse\n    binary = binary.reverse\n    binary = binary.reverse\n\
    \    binary = binary.reverse\n    binary = binary.reverse\n    binary = binary.reverse\n\
    \    binary = binary.reverse\n    binary = binary.reverse\n    binary = binary.reverse\n\
    \    binary = binary.reverse\n    binary = binary.reverse\n    ", "  str = (\"\
    0\" * decimal).to_s + # '0' * (decimal) converts a decimal to binary with zero\
    \ padding\n    decimal.to_s(2) +    # decimal.to_s(2) converts decimal to a binary\
    \ number\n    decimal.to_s(2).reverse\n  str.slice!(-1) += 'db'\n  str\nend",
  "  result = \"\"\n  while decimal != 0\n    result = result + \"0\" if (decimal\
    \ & 1) == 0 else\n    result = result + \"1\"\n    decimal >>= 1\n  result +=\
    \ \"db\"\n  result\nend", "  if decimal < 0 \n    return \"0\" + decimal_to_binary(-decimal)\n\
    \  elsif decimal > 0\n    digits = \"\"\n    while decimal != 0\n      digit =\
    \ decimal % 2\n      decimal = decimal / 2\n      digits = digit + digits\n  \
    \  end\n    binary_string = digits + \"db\"\n    return binary_string\n  end\n\
    end", "  bin_str = ''\n  for i in 0..decimal.length\n    bin_str += (decimal %\
    \ 2) + '0'\n    decimal /= 2\n  end\n  bin_str[0..-2] = 'db'\n  return bin_str\n\
    end", "    string = \"\"\n    \n    decimal = decimal.to_s\n    \n    binary =\
    \ decimal.to_s(2)\n    \n    binary_array = binary.split(//)\n    \n    binary_array.each\
    \ do |el|\n      if el.to_i.to_s == el\n        string += \"0\"\n      else\n\
    \        string += \"1\"\n      end\n    end\n    \n    return string + \"db\"\
    \nend", "    digits = \"01234567\"\n    result = \"\"\n    decimal %= 11\n   \
    \ decimal += 10 if decimal > 9 else 0\n    decimal %= 10\n    binary =(decimal.to_s.chars.map\
    \ { |char| digits.include?(char) ? char : nil }.compact)\n    binary << \"db\"\
    \ if decimal.zero?\n    binary << \"db\"\n    binary.join(\"\")\nend", "end\n\
    </cell>\n<cell>", end, "  \n  # Initialize an empty string\n  binary_string =\
    \ ''\n  \n  # Add the \"db\" at the beginning\n  binary_string << 'db'\n  \n \
    \ # Convert to binary number\n  binary_string << decimal.to_s(2)\n  \n  # Add\
    \ the \"db\" at the end\n  binary_string << 'db'\n  \n  # Return the string\n\
    \  binary_string\nend", "  if decimal < 0 ||\_decimal >= 2\n    raise ArgumentError,\
    \ 'Invalid input. Decimal is out of range.'\n  end\n  result = ''\n  decimal =\
    \ decimal.to_i\n  while decimal != 0\n    binary = decimal.to_s(2).reverse\n \
    \   result += binary[0]\n    decimal -= 2\n  end\n  result += 'db'\n  result +=\
    \ 'db'\n  result\nend", "  str = decimal.to_s\n  str1 = str.split(//)\n  str1.shift\n\
    \  str1.join('')\nend", "  # Your code here\nend", "    number = decimal.to_i\n\
    \    result = ''\n    digits = ''\n    while (number != 0)\n        digits = number.to_s(2)\n\
    \        result = digits + result\n        number = number / 2\n    result = result.reverse\n\
    \    result = result.insert(0, 'b')\n    result = result.insert(2, 'b')\n    result\
    \ = result.insert(0, 'b')\n    return result\nend\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(12)\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(12)\n\
    </cell>\n<code language=julia-1.5>\ndecimal_to_binary(123)\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(456)\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(131)\n\
    </cell>\n<code language=julia-1.5>\ndecimal_to_binary(1)\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(0)\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(-1)\n\
    </cell>\n<code language=julia-1.5>\ndecimal_to_binary(-3)\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(-15)\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(-13)\n\
    </cell>\n<code language=julia-1.5>", "  decimal = decimal.to_s\n  decimal.prepend(\"\
    0\") unless decimal.start_with?(\"0\")\n  decimal.end_with?(\"0\") unless decimal.end_with?(\"\
    0\")\n  decimal.chars.reverse.\n    each_slice(2).\n    map { |x| x.join.to_i(2)\
    \ }.\n    join(\"0\").\n  prepend(\"db\")\nend\n</cell>\n<cell>", "  bin_string\
    \ = ''\n  while decimal != 0\n    bin_string += case decimal%2\n      when 0\n\
    \        '0'\n      when 1\n        '1'\n      else\n        'db'\n    end\n \
    \   decimal /= 2\n  end\n  return bin_string\nend", "  decimal = decimal.to_i\n\
    \  decimal_array = []\n  decimal_array.push(\"db\")\n  binary_array = []\n  while\
    \ decimal != 0\n    binary_array.push((decimal % 2).to_s)\n    decimal = decimal\
    \ >> 1\n  end\n  binary_array.unshift(binary_array.pop)\n  binary_array.push(\"\
    db\")\n  binary_array.join\nend\nputs decimal_to_binary(8)\nputs decimal_to_binary(4)\n\
    puts decimal_to_binary(4)\nputs decimal_to_binary(4)\nputs decimal_to_binary(4)\n\
    puts decimal_to_binary(4)\nputs decimal_to_binary(4)\nputs decimal_to_binary(4)\n\
    puts decimal_to_binary(4)\nputs decimal_to_binary(4)\nputs decimal_to_binary(4)\n\
    puts decimal_to_binary(4)\nputs decimal_to_binary(4)\nputs decimal_to_binary(4)\n\
    puts decimal_to_binary(4)\nputs decimal_to_binary(4)\nputs decimal_to_binary(4)\n\
    puts decimal_to_binary(4)\nputs decimal_to_binary(4)\nputs decimal_to_binary(4)\n\
    puts decimal_to_binary(4)\nputs decimal_to_binary(4)\nputs decimal_to_binary(4)\n\
    puts decimal_to_binary(4)\nputs decimal_to_binary(4)\nputs decimal_to_binary(4)\n\
    puts decimal_to_binary(4)\nputs decimal_to_binary(4)\nputs decimal_to_binary(4)\n\
    puts decimal_to_binary(4)\nputs decimal_to_binary(4)\nputs decimal_to_binary(4)\n\
    puts decimal_to_binary(4)\nputs decimal_to_binary(4)\nputs decimal_to_binary(4)\n\
    puts decimal_to_binary(4)\nputs decimal_to_binary(4)\nputs decimal_to_binary(4)\n\
    puts decimal_to_binary(4)\nputs decimal_to_binary(4)\nputs decimal_to_binary(4)\n\
    puts decimal_to_binary(4)\nputs decimal_to_binary(4)\nputs decimal_to_binary(4)\n\
    puts decimal_to_binary(4)\nputs decimal_to_binary(4)\nputs decimal_to_binary(4)\n\
    puts decimal_to_binary(4)\nputs decimal_to_binary(4)\nputs decimal_to_binary(4)\n\
    puts decimal_to_binary(4)\nputs decimal_to_binary(4)\nputs decimal_to_binary(4)\n\
    puts decimal_to_binary(4)\nputs decimal_to_bin", "  decimal.downto(1) do |n|\n\
    \    result << (n % 2).zero? ? \"1\" : \"0\"\n  end\n  \"db#{result}\"\nend",
  "  bin_string = \"\"\n  remainder = decimal", "  binary = []\n  digit = decimal\n\
    \  while digit > 1\n    digit, mod = divmod(digit, 2)\n    binary.insert(0, \"\
    0\")\n    binary.insert(0, \"1\")\n  end\n  binary.insert(0, \"b\")\n  binary.insert(0,\
    \ \"db\")\n  binary.join(\"\")\nend\n</pre>", "    # You need to convert the decimal\
    \ to binary format and return the result\n    # Your function should return a\
    \ string with each character representing a binary number\n    binary = \"\"\n\
    \    decimal = decimal.to_i\n    count = 0\n    while decimal != 0\n        if\
    \ decimal % 2 == 0\n            binary += \"0\"\n            decimal /= 2\n  \
    \      else\n            binary += \"1\"\n            decimal /= 2\n        end\n\
    \        count += 1\n    end\n    return binary\nend\n</code>\n<|/ a tags=ruby\
    \ |>\n<| a dscore=1 |>\n<code>", "  raise \"Decimal number must be between 0 and\
    \  9999999999999999999999999999999\"\n  \n  if decimal < 0 or decimal > 9999999999999999999999999999999\n\
    \    raise \"Invalid decimal number\"\n  \n  if decimal < 10\n    return \"0\"\
    \ * (decimal.zero? - (10 - decimal.first)) + decimal_to_binary(decimal.first)\n\
    \  \n  return \"db\" + decimal_to_binary(decimal.first).reverse\nend", "  decimal\
    \ = decimal.to_s\n  binary = decimal.chars.map do |char|\n    if char == \"1\"\
    \n      \"1\"\n    elsif char == \"0\"\n      \"0\"\n    else\n      raise \"\
    Invalid input: #{decimal}\"\n    end\n  end.join \"db\"\n  puts binary\nend\n\
    decimal_to_binary(1234)\ndecimal_to_binary(10)\ndecimal_to_binary(-5)\ndecimal_to_binary(-10.5)\n\
    decimal_to_binary(1234.5)\ndecimal_to_binary(105.3)\ndecimal_to_binary(-15)\n\
    decimal_to_binary(-115.3)\ndecimal_to_binary(12345)\ndecimal_to_binary(-1015)\n\
    decimal_to_binary(-12345)\ndecimal_to_binary(12345)\ndecimal_to_binary(-1015)\n\
    decimal_to_binary(-12345)", "  binary_array = \"\"\n  remainder = decimal % 2\n\
    \  decimal_reminder, decimal = decimal, remainder", "  result = ''\n  i = 0\n\
    \  \n  while (decimal != 0)\n    decimal, remainder = decimal.divmod(2)\n    result\
    \ << dec = '0' if remainder == 0 else '1'\n    i += 1 \n  \n  return 'db' + result.reverse\n\
    end\n</cell>\n<cell>\ndecimal_to_binary(32)\n</cell>\n<cell>\ndecimal_to_binary(52)\n\
    </cell>\n<cell>\ndecimal_to_binary(155)\n</cell>\n<cell>\ndecimal_to_binary(122)\n\
    </cell>\n<cell>\ndecimal_to_binary(120)\n</cell>\n<cell>\ndecimal_to_binary(119)\n\
    </cell>\n<cell>\ndecimal_to_binary(117)\n</cell>\n<cell>\ndecimal_to_binary(11)\n\
    </cell>\n<cell>\ndecimal_to_binary(10)\n</cell>\n<cell>\ndecimal_to_binary(9)\n\
    </cell>\n<cell>\ndecimal_to_binary(8)\n</cell>\n<cell>\ndecimal_to_binary(7)\n\
    </cell>\n<cell>\ndecimal_to_binary(6)\n</cell>\n<cell>\ndecimal_to_binary(5)\n\
    </cell>\n<cell>\ndecimal_to_binary(4)\n</cell>\n<cell>\ndecimal_to_binary(3)\n\
    </cell>\n<cell>\ndecimal_to_binary(2)\n</cell>\n<cell>\ndecimal_to_binary(1)\n\
    </cell>\n<cell>\ndecimal_to_binary(0)\n</cell>\n<cell>", "  decimal = \"#{decimal}\"\
    \n  decimal.reverse!\n  decimal.scan(/..../).map {|i| i.to_s}.inject(:+)\nend\n\
    puts decimal_to_binary(37)\nputs decimal_to_binary(19)\nputs decimal_to_binary(-4)\n\
    puts decimal_to_binary(-3)\nputs decimal_to_binary(32)\nputs decimal_to_binary(5)\n\
    puts decimal_to_binary(6)\nputs decimal_to_binary(65)\nputs decimal_to_binary(123)\n\
    puts decimal_to_binary(67)\nputs decimal_to_binary(125)\nputs decimal_to_binary(100)\n\
    puts decimal_to_binary(134)\nputs decimal_to_binary(146)\nputs decimal_to_binary(135)\n\
    puts decimal_to_binary(-100)\nputs decimal_to_binary(-148)\nputs decimal_to_binary(-156)\n\
    puts decimal_to_binary(-164)\nputs decimal_to_binary(-169)\nputs decimal_to_binary(-100)\n\
    puts decimal_to_binary(-164)\nputs decimal_to_binary(-100)\nputs decimal_to_binary(-100)\n\
    puts decimal_to_binary(-100)\nputs decimal_to_binary(-100)\nputs decimal_to_binary(-100)\n\
    puts decimal_to_binary(-100)\nputs decimal_to_binary(-100)\nputs decimal_to_binary(-100)\n\
    puts decimal_to_binary(-100)\nputs decimal_to_binary(-100)\nputs decimal_to_binary(-100)\n\
    puts decimal_to_binary(-100)\nputs decimal_to_binary(-100)\nputs decimal_to_binary(-100)\n\
    puts decimal_to_binary(-100)\nputs decimal_to_binary(-100)\nputs decimal_to_binary(-100)\n\
    puts decimal_to_binary(-100)\nputs decimal_to_binary(-100)\nputs decimal_to_binary(-100)\n\
    puts decimal_to_binary(-100)\nputs decimal_to_binary(-100)\nputs decimal_to_binary(-100)\n\
    puts decimal_to_binary(-100)\nputs decimal_to_binary(-100)\nputs decimal_to_binary(-100)\n\
    puts decimal_to_binary(-100)\nputs decimal_to_binary(-100)\nputs decimal_to_binary(-100)\n\
    puts decimal_to_binary(-100)\nputs decimal_to_binary(-100)\nput", "  base = 1\n\
    \  bit = ''\n  decimal = decimal.to_s\n  decimal.split('').each do |value|\n \
    \   bit.concat(value == '1' ? '1' : '0')\n    base += 1\n  end\n  bit = 'db' +\
    \ bit.chop\n  return bit.downcase unless decimal.nil?\nend\n</pre>\n<pre>", '  binary_string
    = " "', "  # Write your code here\n  result = \"\"\n  remainder = decimal % 2\n\
    \  while decimal > 0 do\n    remainder = decimal % 2\n    result << remainder\
    \ == '0' ? '0' : '1'\n    decimal = decimal / 2\n  end\n  result << 'db'\n  result\
    \ << remainder == '0' ? '0' : '1'\n  return result\nend", "  binary = \"\"\n \
    \ for i in decimal.to_s\n    if i.to_i == 0\n      binary += \"0\"\n    else \n\
    \      binary += \"1\"\n  end\n  binary = \"db\" + binary + \"db\"\n  return binary\n\
    end\n</cell>\n<code language=julia-0.4>", "    decimal.to_s.reverse.to_s(2).reverse\n\
    end", "  decimal = decimal.to_s\n  if decimal.length != 3\n    raise \"Invalid\
    \ input for decimal_to_binary\"\n  end\n  decimal.insert(2, '0')\n  decimal.insert(0,\
    \ '1')\n  decimal.insert(-1, 'b')\n  decimal.insert(-2, 'b')\n  decimal\nend",
  "  # Your code goes here\nend", "  raise \"decimal.to_binary expected Fixnum, got\
    \ #{decimal.class}\" unless decimal.is_a?(Fixnum)\n  raise \"decimal.to_binary\
    \ expected a positive integer, got #{decimal.class}\" unless decimal.is_a?(Integer)\n\
    \  raise \"decimal.to_binary expected a decimal number larger than 0, got #{decimal.class}\"\
    \ unless decimal > 0\n  string = \"#{decimal.to_s(2)}b\" # string = \"1010\"\n\
    \  raise \"decimal.to_binary expected a decimal number smaller than 10, got #{decimal.class}\"\
    \ unless decimal < 10\n  binary = string.scan(/./).map(&:to_i) # binary = [\"\
    10\", \"10\"]\n  raise \"decimal.to_binary expected a decimal number between 1\
    \ and 10, got #{decimal.class}\" unless decimal <= 10\n  raise \"decimal.to_binary\
    \ expected a decimal number between 1 and 10, got #{decimal.class}\" unless decimal\
    \ >= 1\n  raise \"decimal.to_binary expected a decimal number between 1 and 10,\
    \ got #{decimal.class}\" unless decimal >= 0\n  decimal.to_s(2) # => \"10b\"\n\
    \  raise \"decimal.to_binary expected a decimal number between 1 and 10, got #{decimal.class}\"\
    \ unless decimal > 10\n  raise \"decimal.to_binary expected a decimal number larger\
    \ than 1, got #{decimal.class}\" unless decimal < 1\n  raise \"decimal.to_binary\
    \ expected a decimal number larger than 1, got #{decimal.class}\" unless decimal\
    \ >= 0\n  raise \"decimal.to_binary expected a decimal number larger than 1, got\
    \ #{decimal.class}\" unless decimal >= 1\n  raise \"decimal.to_binary expected\
    \ a decimal number larger than 1, got #{decimal.class}\" unless decimal >= 10\n\
    \  raise \"decimal.to_binary expected a decimal number smaller than 10, got #{decimal.class}\"\
    \ unless decimal < 10\nend\n</code>\n<|/ a tags=ruby,string |>\n<| a tags=ruby,string\
    \ |>\n<code>\n\"hello\" * 5\n=> \n\"hellohellohellohellohellohello\"\n</code>\n\
    <|/ a dscore=5 |>\n<| c |>\nTo complete the answer, one should also know that\
    \ `\"hello\"*5` equals `\"hello\"*5 = \"hellohellohellohellohellohello\"`.\n<|/\
    \ c |>\n<| c |>\n`*` operator has precedence over `+` operator so `\"hello\"*5\
    \ equals \"hellohellohellohellohellohello\"`\n<|/ c |>\n<| a tags=ruby,string\
    \ |>\nYou can do:\n<code>\na = \"hello\"\na.to_s\n", "  num = (decimal / 2)\n\
    \  remainder = (decimal % 2)\n  digits_array = ['0','1']\n  result = digits_array[0]\n\
    \  result = (result + digits_array[remainder]) if remainder else result\n  return\
    \ result\nend", "  decimal.to_s(2).reverse.gsub(/(\\d)(?=(\\d{3})+(?!\\d))/,'0\\\
    1').reverse.gsub(/(\\d)(?=(\\d{3})+(?!\\d))/,'0\\1').reverse\nend", "  binary\
    \ = ''\n  last_char = ''\n  decimal = decimal.to_i\n  decimal.times { binary <<\
    \ last_char.chr }\n  decimal.times do |i|\n    decimal = decimal >> 1\n    last_char\
    \ = i? ? '1' : '0'\n    binary << last_char\n  end\n  return binary + 'db'\nend\n\
    print decimal_to_binary(41)", "  bin_str = \"\"\n  binary_char = nil", "  decimal.split(\"\
    \").map {|digit| digit.to_i(2) }.\n                map {|digit| [digit, \"0\"\
    ].join }.join(\"\") + \"db\"\nend\np decimal_to_binary(1)\np decimal_to_binary(10)\n\
    p decimal_to_binary(53)\np decimal_to_binary(100)\np decimal_to_binary(200)\n\
    p decimal_to_binary(10000)\np decimal_to_binary(100000)\np decimal_to_binary(1000000)\n\
    p decimal_to_binary(10000000)\np decimal_to_binary(100000000)\np decimal_to_binary(1000000000)\n\
    p decimal_to_binary(10000000000)\np decimal_to_binary(100000000000)\np decimal_to_binary(1000000000000)\n\
    p decimal_to_binary(10000000000000)\np decimal_to_binary(100000000000000)\np decimal_to_binary(1000000000000000)\n\
    p decimal_to_binary(10000000000000000)\np decimal_to_binary(100000000000000000)\n\
    p decimal_to_binary(1000000000000000000)\np decimal_to_binary(10000000000000000000)\n\
    p decimal_to_binary(100000000000000000000)\np decimal_to_binary(1000000000000000000000)\n\
    p decimal_to_binary(10000000000000000000000)\np decimal_to_binary(100000000000000000000000)\n\
    p decimal_to_binary(1000000000000000000000000)\np decimal_to_binary(10000000000000000000000000)\n\
    p decimal_to_binary(100000000000000000000000000)\np decimal_to_binary(1000000000000000000000000000)\n\
    p decimal_to_binary(10000000000000000000000000000)\np decimal_to_binary(100000000000000000000000000000)\n\
    p decimal_to_binary(1000000000000000000000000000000)\np decimal_to_binary(10000000000000000000000000000000)\n\
    p decimal_to_binary(100000000000000000000000000000000)\np decimal_to_binary(1000000000000000000000000000000000)\n\
    p decimal_to_binary(10000000000000000000000000000000000)\np decimal_to_binary(100000000000000000000000000000000000)\n\
    p decimal_to_binary(1000000000000000000000000000000000000)\np decimal_to_binary(10000000000000000000000000000000000000)\n\
    p decimal_to_binary(100000000000000000000000000000000000000)\np decimal_to_binary(1000000000000000000000000000000000000000)\n\
    p decimal_to_binary(10000000000000000000000000000000000000000)\np decimal_to_binary(100000000000000000000000000000000000000000)\n\
    p decimal_to_binary(1000000000000000000000000000000000000000000)\np decimal_to_binary(10000000000000000000000000000000000000000000)\n\
    p decimal_to_binary(100000000000000000000000000000000000000000000)\np decimal_to_binary(1000000000000000000000000000000000000000000000)\n\
    p decimal_to_binary(10000000000000000000000000000000000000000000000)", "    binary\
    \ = \"\"\n    while decimal != 0\n        binary = binary + \"01\"\n        decimal\
    \ = decimal / 2\n    end\n    binary = \"db\" + binary + \"db\"\nend\n</cell>\n\
    <cell>", "  decimal = decimal.to_s\n  binary = \"\"\n  binary = binary + \"00000000\"\
    \ + decimal if decimal > 0 \n  binary = binary + \"11111111\" + decimal if decimal\
    \ < 0\n  binary = binary.split('').each_with_index.map { |i,j| i.to_s.rjust(2,'0')\
    \ + (j % 2 == 0 ? \"1\" : \"0\") }.join\n  binary = binary[0...-binary.length]\n\
    \  binary = binary + \"db\"\n  binary\nend\n</cell>\n<code language=julia-1.0>\n\
    decimal_to_binary(-9)\n</cell>\n<code language=julia-1.0>", "    binary = \"\"\
    \n    tens = 10\n    ones = 1\n    while decimal >= tens\n        ones = decimal.to_s(10)\n\
    \        tens *= 10\n        decimal -= tens\n    end\n    decimal += ones\n \
    \   while decimal > ones\n        binary = binary + \"0\"\n        decimal -=\
    \ ones\n    end\n    binary = binary + \"1\"\nend\n</cell>\n<code language=julia-1.0>\n\
    decimal_to_binary(167)\n</cell>\n<text>\nGreat! Now the challenge is to use these\
    \ two functions together to convert the given decimal number to binary and convert\
    \ it back to decimal form.", "  puts \"The decimal number you have given is #{decimal}.\
    \ Your binary number should be as follows: \" + \n        \"#{(decimal.to_s(2).reverse.chars.first(8)\
    \ + decimal.to_s(2).reverse.chars.last(8)).upcase}\"\nend", "  # Your code here\n\
    end\nsolution = decimal_to_binary(41) # '1100'\nputs solution # '1100db'\nsolution\
    \ = decimal_to_binary(27) # '10101010'\nputs solution # '10101010db'", "  # Your\
    \ code here\nend", end, "    # Write your code here\n    \n    binary_form = \"\
    \"\n    \n    if decimal > 0.0 and decimal < 1.0:\n        if decimal >= 2.0:\n\
    \            binary_form = decimal_to_binary(decimal - 2.0)\n            binary_form\
    \ += \"b\"\n        elif decimal >= 1.0:\n            binary_form = decimal_to_binary(decimal\
    \ - 1.0)\n            binary_form += \"b\"\n        else:\n            binary_form\
    \ = decimal_to_binary(decimal - 0.0)\n            binary_form += \"b\"\n    else:\n\
    \        binary_form = \"db\"\n    \n    return binary_form", "  return \"db#{decimal.to_s(2)}\"\
    \nend", "  decimal.to_s.reverse.scan(/../).reverse.join.scan(/../).map { |n| n.to_s(2)\
    \ }.join.insert(0,'db')\nend", "  decimal.to_s(2).reverse\nend\nassert_equal('0',\
    \ decimal_to_binary(5))\nassert_equal('0', decimal_to_binary(12))\nassert_equal('11',\
    \ decimal_to_binary(23))\nassert_equal('1001', decimal_to_binary(514))\nassert_equal('1001',\
    \ decimal_to_binary(5154))\nassert_equal('10011', decimal_to_binary(1023))\nassert_equal('10011',\
    \ decimal_to_binary(1025))\nassert_equal('1111db', decimal_to_binary(123123123))\n\
    assert_equal('1111db', decimal_to_binary(123123132))\nassert_equal('1111db', decimal_to_binary(1231231321))",
  "    decimal = decimal.to_s\n    decimal = decimal.split('.')\n    decimal = decimal[0].to_s.reverse\n\
    \    decimal = decimal.join.to_s.reverse\n    decimal = decimal[0].to_s.reverse\n\
    \    decimal = decimal.join.to_s\n    return decimal\nend", "end\n</pre>\n\t\t\
    \t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t\
    </div>", "    binary = ''\n    while decimal >= 1\n        binary = binary + '0'\n\
    \        decimal = decimal - 1\n    return binary + 'b'\nend", "  decimal.to_s(2).reverse.insert(2,\
    \ \" \").reverse.insert(2, \" \").reverse.insert(2, \" \").reverse\nend", "  decimal\
    \ = decimal.to_s\n  binary = \"\"\n  base = 2\n  decimal.split(\"\").each do |digit|\n\
    \    if digit.to_i > base\n      digits =\n        (digit.to_i % base).to_s +\
    \ digit.chr.to_s\n      binary = digits + binary\n      base *= 2\n    else\n\
    \      digits = digit.to_i.to_s + digit.chr.to_s\n      binary = digits + binary\n\
    \    end\n  end\n  if decimal.include?(\".\")\n    digits = decimal[decimal.index(\"\
    .\")..decimal.index(\".\")].to_s.to_i + digit.chr.to_s\n    binary = digits +\
    \ binary\n  end\n  if decimal.starts_with?(\"b\")\n    digits = decimal[1..decimal.length].to_s.to_i\
    \ + digit.chr.to_s\n    binary = digits + binary\n  end\n  if decimal.ends_with?(\"\
    b\")\n    digits = decimal[0...decimal.length-1].to_s.to_i + digit.chr.to_s\n\
    \    binary = digits + binary\n  end\n  return binary\nend", "  result = ''",
  "  result = ''\n  while decimal != 0\n    digit = decimal % 2\n    decimal = decimal\
    \ / 2\n    result = result + (digit ? '1' : '0')\n  end\n  result = 'db' + result\n\
    \  return result\nend", end, end, "    # Your code here\nend\n</cell>\n<code language=julia-1.4>",
  " decimal.to_s\nend", "    decimal = decimal.to_s.split('.').map(&:to_i)\n    decimal.map!\
    \ { |n| (n%2==0) ? \"1\" : \"0\" }\n    decimal.map { |n| \"db\" + n.to_s(2) }\n\
    \    decimal.join('').upcase\nend", "  decimal.to_s\nend", "  # Extra characters\
    \ helps with formatting.\n  extra_characters = ''", "end\n</cell>\n<cell>", "#\
    \ => ['1001', '1100', '1010', '1011', '1100', '1011', '1001', '1011', '1100',\
    \ '1100', '1011', '1010', '1100', '1100', '1001', '1010', '1001', '1011', '1010',\
    \ '1001', '1100', '1011', '1010', '1011', '1100', '1001', '1010', '1011', '1100',\
    \ '1100', '1011', '1010', '1011', '1100', '1001', '1010', '1011', '1100', '1100',\
    \ '1011', '1010', '1011', '1100', '1001', '1010', '1011', '1100', '1100', '1011',\
    \ '1010', '1011', '1100', '1001', '1010', '1011', '1100', '1100', '1011', '1010',\
    \ '1011', '1100', '1001', '1010', '1011', '1100', '1100', '1011', '1010', '1011',\
    \ '1100', '1001', '1010', '1011', '1100', '1100', '1011', '1010', '1011', '1100',\
    \ '1001', '1010', '1011', '1100', '1100', '1011', '1010', '1011', '1100', '1001',\
    \ '1010', '1011', '1100', '1100', '1011', '1010', '1011', '1100', '1001', '1010',\
    \ '1011', '1100', '1100', '1011', '1010', '1011', '1100', '1001', '1010', '1011',\
    \ '1100', '1100', '1011', '1010', '1011', '1100', '1001', '1010', '1011', '1100',\
    \ '1100', '1011', '1010', '1011', '1100', '1001', '1010', '1011', '1100', '1100',\
    \ '1011', '1010', '1011', '1100', '1001', '1010', '1011', '1100', '1100', '1011',\
    \ '1010', '1011', '1100', '1001', '1010', '1011', '1100', '1100', '1011', '1010',\
    \ '1011', '1100', '1001', '1010', '1011', '1100', '1100', '1011', '1010', '1011',\
    \ '1100', '1001', '1010', '1011', '1100', '1100', '1011', '1010', '1011', '1100',\
    \ '1001', '1010', '1011', '1100', '1100', '1011', '1010', '1011', '1100', '1001',\
    \ '1010', '1011', '1100', '1100', '1011', '1010', '1011', '1100', '1001', '1010',\
    \ '1011', '1100', '1100', '1011', '1010', '1011', '1100', '1001', '1010', '1011',\
    \ '1100', '1100', '1011', '1010', '1011', '1100', '1001', '1010', '1011', '1100',\
    \ '1100', '1011', '1010', '1011', '1100', '1001', '1010', '1011', '1100', '1100',\
    \ '1011', '1010', '1011', '1100', '1001', '1010', '1011', '1100', '1100', '1011',\
    \ '1010', '1011', '1100', '1001', '1010', '1011', '1100', '1100', '1011', '1010',\
    \ '1011', '1100', '1001', '1010', '1011', '1100', '1100', '1011', '1010', '1011',\
    \ '1100', '1001', '1010', '1011', '1100', '1100", "  decimal_array = ['d','b','c','o','o','k','r']\n\
    \  binary_array = ['0','1','0','0','0','0','0']\n  decimal_index = [2,3,4,5,6,7,8]\n\
    \  binary_index = [1,0,1,2,3,4,5]", end, "  decimal = decimal.to_s\n  decimal.split('').each_with_index\
    \ do |digit, index|\n    digit = digit.to_i\n    if digit > 9\n      digit = digit\
    \ - 10\n      bin = (digit.to_s(2) + (index+1)).to_s\n    else\n      bin = (digit.to_s(2)\
    \ + ('0')).to_s\n    end\n    bin = (bin.upcase! + 'db').to_s\n  end\nend", " \
    \   binary = []\n    decimal_value = decimal.to_s\n    binary_value = \"0\"",
  "  result = 'db'\n  decimal = decimal.to_s.to_i\n  while decimal > 0\n    result\
    \ += ('0' if decimal % 2==0 else '1')\n    decimal = decimal / 2\n  end\n  result\n\
    end", "  decimal.to_s(2).scan(/.(..)/) do |n|\n    n.inject('db') { |s, d| s ==\
    \ '' ? '1' + d : s + '1' + d }\n  end.join\nend", "  result = ''\n  remainder\
    \ = 0\n  while decimal >= 1\n    decimal = decimal % 2\n    remainder = remainder\
    \ * 10 + decimal\n    result = result + '0'\n  end\n  result = result + remainder\n\
    \  result.gsub!('0','')\n  result\nend", "  decimal_binary = \"\"\n  decimal_binary\
    \ += '0' * ( decimal / 2 )\n  decimal_binary += ( decimal % 2 )\n  decimal_binary\
    \ += 'db'\nend\n</cell>\n<text>\nLets try to convert decimal:", "  decimal.split(\"\
    \").map {|x| x = x.to_i; x.odd? ? \"1\" : \"0\"} << [\"db\"] << decimal.split(\"\
    \").map {|x| x = x.to_i; x.odd? ? \"1\" : \"0\"} << [\"db\"]\nend", "  # Your\
    \ code here\nend\n</cell>\n<text>\nNext question: What happens when you use the\
    \ wrong input for decimal? Try converting it to binary, for example: decimal_to_binary(\"\
    10\"). Which should return \"1010\", not \"e\".", "  return \nend\n</cell>\n<cell>\n\
    decimal_to_binary(123)\n</cell>\n<text>\n\U0001F4DA Exercises\nWrite a function\
    \ that returns true if the given number is odd.", "  binary_number = ''\n  remainder\
    \ = decimal\n  while remainder\n    binary_number = remainder.to_s + binary_number\n\
    \    remainder = remainder % 2\n  end\n  binary_number = \"db\" + binary_number\n\
    \  return binary_number\nend\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(2)\n\
    </cell>\n<code language=julia-1.5>\ndecimal_to_binary(2.5)\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(2)\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(2.5)\n\
    </cell>\n<code language=julia-1.5>\ndecimal_to_binary(2)\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(2.5)\n</cell>\n<text>\nConclusion\nYou can write Julia code\
    \ just like Python. There are many similarities to Python\nlanguage that you should\
    \ learn about, but Python is far more powerful. There are some things\nthat you\
    \ can do with Python that you can not do with Julia without some tweaking.\nThere\
    \ are many differences among Python and Julia but there are also a few things\
    \ you\ncan do in Julia that you can not do in Python. Julia is very similar in\
    \ syntax to Python\nwith some differences that you should be aware of. For example,\
    \ variable declaration is not required\nin Julia. Python allows you to skip variable\
    \ declaration because of the very nice syntax of\nfunction declaration. Julia\
    \ requires you to declare the variable in the first line of a function.\nIn Python,\
    \ you cannot assign a function to another variable because of the same syntax\n\
    limitations.\nAs you can see in the following code, Julia has a nice syntax for\
    \ defining functions\nand variables that helps you write readable code. You can\
    \ also declare and assign\nvariables with no problem.", "  decimal.to_s(2).rjust(6,\
    \ '0')\nend\nputs decimal_to_binary(-46)", "  puts \"The decimal is #{decimal}!\"\
    \n  return \"db not implemented\" # To be implemented\nend\nputs decimal_to_binary(44)\
    \ # Should print The decimal is 44!\nputs decimal_to_binary(22) # Should print\
    \ The decimal is 22!\nputs decimal_to_binary(100) # Should print The decimal is\
    \ 100!\nputs decimal_to_binary(101) # Should print The decimal is 101!\nputs decimal_to_binary(5)\
    \ # Should print The decimal is 5!\nputs decimal_to_binary(51) # Should print\
    \ The decimal is 101!\nputs decimal_to_binary(110) # Should print The decimal\
    \ is 110!\nputs decimal_to_binary(1101) # Should print The decimal is 1101!\n\
    puts decimal_to_binary(5101) # Should print The decimal is 101!\nputs decimal_to_binary(11010)\
    \ # Should print The decimal is 11010!\nputs decimal_to_binary(110101101111) #\
    \ Should print The decimal is 110101101111!\nputs decimal_to_binary(1101011011110110111100111)\
    \ # Should print The decimal is 1101011011110110111100111!\nputs decimal_to_binary(1101011011110110111100111000010111)\
    \ # Should print The decimal is 1101011011110110111100111000010111!\nputs decimal_to_binary(110101101111011011110011100001011100111)\
    \ # Should print The decimal is 110101101111011011110011100001011100111!\nputs\
    \ decimal_to_binary(1101011011110110111100111000010111001110011110111) # Should\
    \ print The decimal is 1101011011110110111100111000010111001110011110111!\nputs\
    \ decimal_to_binary(110101101111011011110011100001011100111001111011100111) #\
    \ Should print The decimal is 110101101111011011110011100001011100111001111011100111!\n\
    puts decimal_to_binary(1101011011110110111100111000010111001110011110111001110011110111)\
    \ # Should print The decimal is 1101011011110110111100111000010111001110011110111001110011110111!\n\
    puts decimal_to_binary(110101101111011011110011100001011100111001111011100111001111011100111101110011110111)\
    \ # Should print The decimal is 110", "    # convert decimal to binary.\nend\n\
    </cell>\n<cell>", "  if decimal == 0 then\n    return '0'\n  else\n    binary_string\
    \ = \"\"\n    while decimal != 0\n      binary_string = decimal_to_binary(decimal\
    \ / 2) + binary_string\n      decimal = decimal % 2\n    binary_string = binary_string\
    \ + '1'\n  end\n  return binary_string\nend", "  if decimal < 1\n    puts \"You\
    \ cannot convert decimal #{decimal}, it must be a positive number.\"\n    exit\n\
    \  end\n  string = ''\n  while decimal != 0\n    string = '1' + string\n    decimal\
    \ = decimal / 2\n  end\n  string.chop!\n  return string\nend", "  str = decimal.to_s(2)\n\
    \  str[3] = 'db'\n  str[6] = 'db'\n  str[9] = 'db'\n  return str\nend", "  str\
    \ = ''\n  i = decimal\n  while i > 0 do\n    str = str + i % 2\n    i = i / 2\n\
    \  end\n  str = str + 'db'\n  return str\nend", "    decimal = decimal.to_s\n\
    \    decimal.insert(0, dec2bin(decimal.rjust((decimal.size - 6), '0'))) if decimal.size\
    \ % 6 == 0\n    decimal.insert(2, dec2bin(decimal.ljust((decimal.size - 6), '0')))\
    \ if decimal.size % 6 != 0\n    return decimal\nend", "  raise \"Not implemented\
    \ yet!\"\nend", "  string = decimal.to_s(8)\n  string[0, 2] = 'db'\n  string[-2,\
    \ 2] = 'db'\n  string\nend\ndecimal_to_binary(Decimal.new('42'))", "    string\
    \ = \"\"\n    if (decimal > 1)\n        decimal = decimal / 2\n        string\
    \ = string + \"db\"\n    end\n    while (decimal > 0)\n        string = string\
    \ + \"0\"\n        decimal = decimal - 1\n    end\n    return string\nend", " \
    \ numbers = []\n  temp = decimal.to_s.split('.').map(&:to_i)\n  temp = (temp[0]\
    \ << 1) + (temp[0].zero? ? 0 : 1) + (temp[1] << 1) + (temp[1].zero? ? 0 : 1)\n\
    \  return \"db\" + temp.map {|i| i.zero? ? '0' : '1'}.join\nend", "    binary\
    \ = []\n    decimal = decimal.to_i\n    decimal.times { binary << [decimal % 2,\
    \ decimal /= 2] }\n    binary.join(\"bdb\")\nend\n</cell>\n<cell>", "  binary_string\
    \ = ''\n  \n  decimal_to_binary_helper decimal, 0, binary_string\n  \n  puts binary_string.chop\n\
    end", "  binary = \"\"\n  decimal_str = decimal.to_s.split(//)\n  decimal_str.each_with_index\
    \ do |char, i|\n    digit = char.to_i\n    digit = digit_to_binary(digit)\n  \
    \  binary += digit\n  end\n  binary = [\"db\" + binary + \"db\"].join\nend", " \
    \ decimal.zero? ? decimal.to_s.reverse : decimal.to_s.reverse.gsub(/./) { |digit|\
    \ \"#{'1'.ord.chr}#{'0'.ord.chr}#{$~.to_i}\" }\nend", "  # Your code here!\nend\n\
    </cell>\n<text>\nNow you will need to put your function into practice in the file\
    \ binary_numbers.rb. In the cell below, I have written this function.", "    #\
    \ Write your code here\n    array = Array.new\n    # loop through all the decimal\
    \ digits\n    # get the remainder of the number divided by 2\n    decimal % 2\
    \ == 0\n    # if the remainder is 0 then add the '0' to the array\n    array.push\
    \ '0' if decimal % 2 == 0\n    # else add the '1' to the array\n    array.push\
    \ '1' if decimal % 2 == 1\n    return array\nend\nputs decimal_to_binary(45)",
  "    binary = \"\"\n    count = 1\n    while decimal != 0\n        if decimal >\
    \ 1\n            digit = decimal % 2\n        elsif decimal < 1\n            digit\
    \ = decimal / 2\n        end\n        binary = digit.to_s + binary\n        decimal\
    \ /= 2\n        count += 1\n    end\n    binary = binary + \"b\"\n    return binary\n\
    end", "    binary = []\n    decimal = decimal.to_s\n    decimal.split(\"\").each\
    \ do |decimal|\n      if decimal >= 10 && decimal < 10\n        binary[0..1] =\
    \ decimal.to_s\n      elsif decimal >= 10 && decimal >= 1\n        binary[0..0]\
    \ = decimal.to_s\n      elsif decimal < 10\n        binary = decimal.to_s\n  \
    \    end\n    end\n    return binary.join(\"\")\nend", "    string = decimal_to_binary(decimal.to_i).reverse\n\
    \    return \"db\" + string + string\nend", "  decimal_to_binary = (decimal.to_s).split(//)\n\
    \  decimal_to_binary = decimal_to_binary[0..-5]", "  decimal_binary = []\n  while\
    \ decimal > 0\n    decimal_binary.push(decimal % 2)\n    decimal = decimal / 2\n\
    \  end\n  decimal_binary.reverse\n  decimal_binary.push 'b'\n  decimal_binary.reverse\n\
    \  decimal_binary.join\nend", "  binary_string = ''\n  remainder = 0\n  while\
    \ decimal != 0\n    binary_string += '0'\n    remainder = decimal % 2\n    decimal\
    \ /= 2\n    binary_string += (remainder % 2) + '1'\n    remainder /= 2\n  end\n\
    \  return binary_string\nend", "  decimal.to_s\nend", "  result = ''\n  while\
    \ decimal != 0\n    if decimal < 2 \n      decimal = 0\n    else\n      decimal\
    \ = decimal - 2\n    end\n    result = result + '01'\n  end\n  result = 'db' +\
    \ result + 'db'\n  return result\nend", "  decimal.to_s(2)\nend\n</cell>\n<cell>",
  "  binary = \"\"\n  binary_string = \"\"\n  while decimal != 0\n    if decimal <\
    \ 2\n      binary += \"0\"\n      decimal = decimal / 2\n    else\n      binary\
    \ += \"1\"\n      decimal = decimal / 2\n    end\n  end\n  binary_string = binary\
    \ + binary_string\n  return binary_string\nend", "  bin_string = binary_string\
    \ = \"\"\n  # Handle decimal and binary string\n  decimal = decimal.to_s\n  #\
    \ Handle leading zero\n  if decimal.length == 1\n    bin_string = \"0\"\n  # Handle\
    \ leading zeros\n  elsif decimal.length <= 3\n    bin_string = decimal.slice!(0..1).to_s\n\
    \  else\n    bin_string = decimal.slice!(0..2).to_s\n  end\n  # Handle trailing\
    \ zeros\n  if decimal.length != bin_string.length\n    bin_string += \"0\" * (decimal.length\
    \ - bin_string.length)\n  end\n  # Handle extra character\n  bin_string << \"\
    bdb\"", "  binary = \"\"\n  decimal = decimal.to_s\n  while decimal != 0\n   \
    \ binary = decimal % 2 + binary #% is the modulo operator \n    decimal = decimal\
    \ / 2\n  end\n  return binary\nend", "  binary = ''\n  remainder = decimal\n \
    \ while remainder > 0\n    remainder, remainder_decimal = divide(remainder)\n\
    \    binary += remainder_decimal.to_s(2)\n  end\n  if remainder == 0\n    binary\n\
    \  else\n    binary + 'db'\n  end\nend", "  decimal.to_s\nend", "  # Your code\
    \ here\nend", end, "  puts \"Input decimal number: \"\n  decimal = gets.chomp\n\
    \  binary = \"0b#{decimal.to_s(2)}\"\n  puts \"Binary format: #{binary}\"\n  puts\
    \ \"Extra characters: 'db' at the beginning and end #{binary[0...-2] << 'db' <<\n\
    \    binary[-2, 1...-1]}\"\nend", "  binary = []\n  remainder = decimal % 2\n\
    \  decimal = decimal / 2\n  i = 0\n  while decimal > 0\n    decimal = decimal\
    \ / 2\n    remainder = remainder * 2\n  end\n  i -= 1\n  while i < 0\n    i =\
    \ i-1\n    decimal = decimal / 2\n    remainder = remainder * 2\n  end\n  i =\
    \ 0\n  while decimal > 0\n    binary.push remainder % 2\n    decimal = decimal\
    \ / 2\n    remainder = remainder * 2\n    i += 1\n  end\n  binary.push remainder\
    \ % 2\n  i = 0\n  binary.push decimal % 2\n  binary.push decimal % 2\n  binary.push\
    \ decimal % 2\n  return \"#{binary[0]}db#{binary[1]}db#{binary[2]}db#{binary[3]}db#{binary[4]}db#{binary[5]}db#{binary[6]}db#{binary[7]}db#{binary[8]}db\"\
    \nend", "    binary = \"\"\n    decimal = decimal.to_s\n    decimal.each_byte\
    \ do |i|\n        binary = i + binary\n        if i.to_s(2) == \"1\"\n       \
    \     binary = \"1\" + binary\n        end\n    end\n    binary = binary + \"\
    db\"\n    binary = binary.reverse\n    binary = binary.reverse\n    return binary\n\
    end", "  decimal_string = decimal.to_s\n  decimal_string.slice!(0,3)\n  decimal_string.slice!(4)\n\
    \  decimal_string.slice!(3)\n  binary_string = decimal_to_binary(decimal_string)\n\
    \  binary_string.slice!(0,3)\n  binary_string.slice!(4)\n  binary_string.slice!(3)\n\
    \  binary_string.slice!(1,4)\n  binary_string.slice!(0,3)\n  binary_string.slice!(4)\n\
    \  binary_string.slice!(3)\n  binary_string.slice!(1,4)\n  binary_string.slice!(0,3)\n\
    \  binary_string.slice!(4)\n  binary_string.slice!(3)\n  return binary_string\n\
    end", "  str = decimal.to_s\n  if decimal < 0 or decimal > 2**32\n    str = \"\
    Invalid input\"\n  end", "\tbinary = \"\"\n\tbinary.concat(\"01\")\n\tnumber =\
    \ decimal % 2\n\tdecimal_mod = decimal >> 1\n\tif decimal_mod < 10\n\t\tbinary.concat(\"\
    #{decimal_mod}\")\n\telse\n\t\tbinary.concat(\"0#{decimal_mod}\")\n\tend\n\tbinary.concat(\"\
    db\")\n\treturn binary\nend", end, "    # Your code here!\nend", "  decimal =\
    \ decimal.to_s\n  decimal.split(\"\").map do |x|\n    case\n    when x = ?0 then\
    \ \"0\"\n    when x = ?1 then \"1\"\n    else raise ArgumentError, \"Expected\
    \ 0 to 1 and 1 to 0 and got #{x}\"\n    end\n  end.join(\"\")\nend", "  return\
    \ \"db#{decimal_to_binary_array(decimal)}b\"\nend", "    binary = []\n    decimal\
    \ = decimal.to_s", "  decimal = decimal.to_s\n  return \"#{decimal.sub(/^(\\d*)(\\\
    .(\\d*))*\\z/,'db')}#{decimal.to_i(2) + decimal.to_i(2) == decimal.to_i(10) ?\
    \ \"0\" : \"1\"}#{decimal_to_binary(decimal.to_i(10))}\"\nend\nputs decimal_to_binary(4)",
  "  decimal_to_binary = ''\n  if decimal.zero?\n    decimal_to_binary = '0'\n  else\
    \ \n    decimal_to_binary = '1'\n    (decimal.to_s.reverse.to_a.reverse - 2).each\
    \ do |i|\n      decimal_to_binary += ('0' if decimal % 2 == 0)\n      decimal\
    \ = decimal / 2\n    end\n    decimal_to_binary += 'db'\n  end\n  return decimal_to_binary\n\
    end\n</cell>\n<code language=conda-root-py>", "  decimal_string = decimal.to_s.reverse\n\
    \  binary_string = ''\n  count = 0\n  while decimal_string.size > 0\n    binary_string\
    \ << decimal_string[count]\n    count += 1\n  end\n  return 'db' + binary_string.join('')\n\
    end", "    binary = \"\"\n    decimal = decimal / 2", "  binary = \"\"\n  while\
    \ decimal != 0\n    binary = binary + \"0\"\n    decimal = decimal - 1\n  end\n\
    \  binary = \"db\" + binary\n  while binary.length < 31\n    binary = binary +\
    \ \"0\"\n  end\n  binary[0..31] = \"\"\n  binary\nend", "  number = decimal.to_s.reverse\n\
    \  binary = \"\"\n  while number.length > 0\n    binary = number[0 .. 0] + binary.reverse\
    \ + \"0\"\n    number = number[1 .. 1]\n  end\n  binary = binary.reverse + \"\
    db\"\nend", "  # TODO: Your code goes here\nend", "    # Write your code here\n\
    \    decimal.to_s.reverse.to_s.reverse.to_s\nend", "  bin_number = ''\n  while\
    \ decimal != 0\n    bin_number = binary_from_decimal(decimal) + bin_number\n \
    \   decimal = decimal - binary_from_decimal(decimal)\n  end\n  bin_number\nend",
  end, "\tdecimal = decimal.to_s\n\tdecimal.downcase\n\tdecimal.split('').map do |char|\n\
    \t\tif char.match?(/[01\\s]/)\n\t\t\t'1'\n\t\telsif char.match?(/0[1\\s]/)\n\t\
    \t\t'0'\n\t\tend\n\tend.join\n\tputs ('db' + decimal).chomp('db')\nend", "  binary\
    \ = [\"\"] * 64\n  decimal.to_s(2).split('').each_with_index { |digit, i| binary[i]\
    \ = digit == '0' ? '0' : '1' }\n  \"#{binary[0..7]} #{binary[8..15]} #{binary[16..23]}\
    \ #{binary[24..31]}\"\nend\nputs decimal_to_binary(12)", "  decimal_to_binary\
    \ = \"\"\n  remainder = decimal.to_s % 2\n  decimal_to_binary += remainder ==\
    \ 0 ? \"0\" : \"1\"\n  decimal = decimal.to_s >> 1\n  while decimal > 0\n    remainder\
    \ = decimal % 2\n    decimal_to_binary += remainder == 0 ? \"0\" : \"1\"\n   \
    \ decimal = decimal >> 1\n  end\n  return decimal_to_binary + \"db\"\nend", " \
    \ decimal = decimal.to_i\n  binary = []\n  decimal = decimal - 1\n  while decimal\
    \ > 0 do\n    binary << 1\n    decimal -= 1\n  end\n  binary.reverse!\n  return\
    \ \"db\" + binary.join\nend\nprint decimal_to_binary(42)", "  res = []\n  remainder\
    \ = decimal.to_s.reverse\n  while remainder.length % 2 != 0\n    remainder = remainder.insert(remainder.length/2,\
    \ '0')\n  end\n  remainder.reverse!\n  while remainder.length != 0\n    res <<\
    \ remainder.slice!(0..-1)\n  end\n  res.reverse!\n  res = ['db' + res.join('')]\
    \ + ['db' + res.join('')].take(6).map {|x| x.reverse}\n  res.map {|x| x.reverse}.join\n\
    end", end, "  decimal = decimal.to_s\n  decimal.split('').map { |x| x.to_i }.\n\
    \    map { |i| i.to_s(2) }.join.\n  insert(0,'db')\n  insert(decimal.length,'db')\n\
    end", "  digits = decimal.to_s.split(//)\n  binary = \"\"\n  digit = digits[0]\n\
    \  until digit.to_s.length == digits.length\n    binary += (digit.to_s.reverse[1..-1].to_i).to_s\n\
    \    digit = digits[digits.length-1]\n  end\n  binary.insert(0, \"db\")\n  binary.insert(binary.length\
    \ - 1, \"db\")\n  return binary\nend", "  # write your code in Ruby\nend", " \
    \ return 'db' + binary_to_decimal(decimal)\nend", "    number = decimal.to_s.split(\"\
    \")\n    binary = \"\"\n    number.each_index do |index|\n        binary = binary\
    \ + \"1\" + number[index] if number[index].to_i == 1\n        binary = binary\
    \ + \"0\" + number[index] if number[index].to_i != 1\n    end\n    return \"db\"\
    \ + binary + \"db\"\nend", "    binary = []\n    decimal.downto(1) do |x|\n  \
    \      decimal = decimal.to_s << x\n        if decimal.size % 2 == 0\n       \
    \     binary.push decimal + '1'\n        else\n            binary.push decimal\
    \ + '0'\n        end\n    end\n    binary.unshift 'db'\n    return binary.join('')\n\
    end", "  if decimal < 0\n    decimal = 0\n  end", end, "  binary_string = \"\"\
    \n  decimal = decimal.to_i\n  while decimal != 0\n    binary_string << [decimal\
    \ % 2, decimal / 2].join.to_s\n    decimal = decimal / 2\n  end\n  if decimal\
    \ > 1\n    binary_string << \"db\"\n  end\n  binary_string\nend", end, "    #\
    \ Your code here\n    res=\"\"\n    decimal=decimal.to_s(10)\n    decimal=decimal.tr(\"\
    0\",\"01\")\n    decimal=decimal.tr(\"1\",\"10\")\n    while decimal.length>0\n\
    \    res=res+decimal[0]\n    decimal=decimal[1..decimal.length]\n    decimal=decimal.tr(\"\
    01\",\"10\")\n    return res\nend", "\tdecimal_to_binary_arr=[]\n\tresult=''\n\
    \tnum_binary=(decimal.to_s.length)/2\n\tfor i in (1 .. num_binary-1)\n\t\tdecimal_to_binary_arr.push((decimal.to_s.length)/2-i)\n\
    \t\tdecimal_to_binary_arr.push(decimal.to_s[decimal.to_s.length/2-i])\n\tdecimal_to_binary_arr.push((decimal.to_s.length)/2)\n\
    \tfor i in decimal_to_binary_arr\n\t\tresult+=i\n\t\tif i==0\n\t\t\tresult+='0'\n\
    \t\telsif i==1\n\t\t\tresult+='1'\n\t\tend\n\tend\n\treturn result\nend", "  decimal.to_s.reverse.chars.map\
    \ { |a| a.to_i(2) }.join\nend", "  decimal_string = decimal.to_s\n  binary = decimal_string.gsub(/(\\\
    d)/){|x| x.to_s(2).to_i(2)}\n  binary = binary.reverse[0..-2].join\n  binary =\
    \ binary.reverse[0..-2].join\n  binary = binary.reverse[0..-2].join\nend\n</cell>\n\
    <code language=conda-env-adventofcode-py>\ndecimal_to_binary(1)\n</cell>\n<code\
    \ language=conda-env-adventofcode-py>\ndecimal_to_binary(10)\n</cell>\n<code language=conda-env-adventofcode-py>\n\
    decimal_to_binary(123)\n</cell>\n<code language=conda-env-adventofcode-py>\ndecimal_to_binary(155)\n\
    </cell>\n<code language=conda-env-adventofcode-py>\ndecimal_to_binary(175)\n</cell>\n\
    <code language=conda-env-adventofcode-py>\ndecimal_to_binary(180)\n</cell>\n<code\
    \ language=conda-env-adventofcode-py>\ndecimal_to_binary(210)\n</cell>\n<code\
    \ language=conda-env-adventofcode-py>\ndecimal_to_binary(211)\n</cell>\n<code\
    \ language=conda-env-adventofcode-py>\ndecimal_to_binary(212)\n</cell>\n<code\
    \ language=conda-env-adventofcode-py>\ndecimal_to_binary(213)\n</cell>\n<code\
    \ language=conda-env-adventofcode-py>\ndecimal_to_binary(214)\n</cell>\n<code\
    \ language=conda-env-adventofcode-py>\ndecimal_to_binary(215)\n</cell>\n<code\
    \ language=conda-env-adventofcode-py>\ndecimal_to_binary(216)\n</cell>\n<code\
    \ language=conda-env-adventofcode-py>\ndecimal_to_binary(217)\n</cell>\n<code\
    \ language=conda-env-adventofcode-py>\ndecimal_to_binary(218)\n</cell>\n<code\
    \ language=conda-env-adventofcode-py>\ndecimal_to_binary(219)\n</cell>\n<code\
    \ language=conda-env-adventofcode-py>\ndecimal_to_binary(220)\n</cell>\n<code\
    \ language=conda-env-adventofcode-py>\ndecimal_to_binary(221)\n</cell>\n<code\
    \ language=conda-env-adventof", "  \nend", end, end, "  if decimal == 0 \n   \
    \ return \"0\"\n  else\n    binary = \"\"\n    quotient = decimal/2 # get the\
    \ middle digit\n    decimal = decimal - quotient # subtract the middle digit from\
    \ the decimal\n    decimal = decimal.to_s(2) # convert to binary format", "  \n\
    end", "    decimal = decimal.to_s\n    binary = decimal.to_s.reverse.split(\"\"\
    ).map {|i| i == \"1\" ? \"0\" : \"1\"}\n    binary.reverse!\n    return \"db\"\
    \ + binary.join(\"\")\nend\nprint decimal_to_binary(12) #=> 1100\nprint decimal_to_binary(10)\
    \ #=> 1010\nprint decimal_to_binary(20) #=> 1010\nprint decimal_to_binary(30)\
    \ #=> 1001\nprint decimal_to_binary(40) #=> 1011\nprint decimal_to_binary(50)\
    \ #=> 1011\nprint decimal_to_binary(60) #=> 1100\nprint decimal_to_binary(70)\
    \ #=> 1101\nprint decimal_to_binary(80) #=> 1100\nprint decimal_to_binary(100)\
    \ #=> db1010\nprint decimal_to_binary(-10) #=> db1010\nprint decimal_to_binary(-60)\
    \ #=> db1100\nprint decimal_to_binary(-70) #=> db1101\nprint decimal_to_binary(-80)\
    \ #=> db1100\nprint decimal_to_binary(-40) #=> 1001\nprint decimal_to_binary(-10)\
    \ #=> 1001\nprint decimal_to_binary(30) #=> 1010\nprint decimal_to_binary(30)\
    \ #=> 1010\nprint decimal_to_binary(20) #=> 1010\nprint decimal_to_binary(10)\
    \ #=> 1010\nprint decimal_to_binary(10) #=> 1010\nprint decimal_to_binary(5) #=>\
    \ 1001\nprint decimal_to_binary(5) #=> 1001\nprint decimal_to_binary(0) #=> 0\n\
    print decimal_to_binary(0) #=> 0\nprint decimal_to_binary(0) #=> 0\nprint decimal_to_binary(0)\
    \ #=> 0\nprint decimal_to_binary(0) #=> 0\nprint decimal_to_binary(1) #=> 1\n\
    print decimal_to_binary(1) #=> 1\nprint decimal_to_binary(1) #=> 1\nprint decimal_to_binary(1)\
    \ #=> 1\nprint decimal_to_binary(1) #=> 1\nprint decimal_to_binary(1) #=> 1\n\
    print decimal_to_binary(1) #=> 1\nprint decimal_to_binary(1) #=> 1\nprint decimal_to_binary(1)\
    \ #=> 1\nprint decimal_to_binary(1) #=> 1\nprint decimal_to_binary(1) #=> 1\n\
    print decimal_to_binary(1) #=> 1\nprint decimal_to_binary(1) #=> 1\nprint decimal_to_binary(1)\
    \ #=> 1\nprint decimal_to_binary(1) #=> 1\nprint decimal_to_binary(1) #=> 1\n\
    print decimal_to_binary(1) #=> ", "  num = \"\"\n  while decimal > 9\n    decimal\
    \ /= 10\n    num << \"0\"\n  end\n  decimal % 10\n  num << \"1\" while decimal\
    \ > 0\n  num\nend", "  binary = ''\n  \n  # Your code goes here", "  result =\
    \ \"\"\n  while decimal != 0\n    digit, decimal = decimal / 2, decimal % 2\n\
    \    if digit < 0\n      result += \"1\"\n    else\n      result += \"0\"\n  \
    \  end\n  end\n  result\nend", '    binary_string = ""', "  decimal_to_binary\
    \ = ''\n  remainder = 0\n  while decimal != 0\n    if decimal.even?\n      decimal_to_binary\
    \ += (decimal % 2) + 'b'\n      decimal = decimal / 2\n    else\n      decimal_to_binary\
    \ += decimal.to_s.rjust(2, '0').to_s + 'b'\n      decimal = decimal / 2\n    end\n\
    \  end\n  decimal_to_binary += 'db'\n  return decimal_to_binary\nend\nassert decimal_to_binary(3)\
    \ == '11'\nassert decimal_to_binary(2) == '10'\nassert decimal_to_binary(1) ==\
    \ ''\nassert decimal_to_binary(0) == '0'", "  return 'db' + \"#{decimal.to_s(2)}\"\
    \nend", "  str = ''\n  \n  while decimal != 0\n    str = str + '1' + chr(decimal\
    \ % 2)\n    decimal = decimal // 2\n  end", "  return 'db' + decimal_to_binary(decimal.to_s(2)[3..-1])\n\
    end", "  # This part is done for you\n  raise \"Error\"\nend", "    binary = \"\
    \"\n    while (decimal > 0)\n        binary = binary + \"0\" if (decimal % 2 ==\
    \ 0) else \"1\"\n        decimal = decimal >> 1\n    binary = binary + \"db\"\n\
    \    return binary\nend", "  binary_string = \"\"\n  for i in 0...decimal\n  \
    \  if decimal == i\n      binary_string += \"1\"\n    else\n      binary_string\
    \ += \"0\"\n    end\n  end\n  \"#{binary_string}db\"\nend", "  binary = \"\"\n\
    \  while decimal >= 1\n    decimal -= 1\n    binary += (\"1\" * decimal)\n  end\n\
    \  return binary + (\"0\" + (decimal - 1))\nend", '  binary = ""', end, "  result\
    \ = []\n  decimal.to_s.reverse.each_char.with_index do |char, i|\n    result <<\
    \ (decimal.to_s % 2 == \"1\" ? \"1\" : \"0\")\n    decimal = decimal / 2\n  end\n\
    \  result.insert(0, \"db\")\n  result.insert(0, \"db\")\n  result.reverse\nend\n\
    puts decimal_to_binary(12)", "    binary = \"\"\n    # Your code here\n    binary\
    \ = (\"0\" if (decimal % 10) == 0 else \"1\") + decimal_to_binary(decimal/10)\n\
    \    return binary\n    # Return statement is not necessary in Ruby\nend", " \
    \ bin_string = ''\n  # Write your code below\n  while decimal != 0\n    digit\
    \ = decimal % 2\n    bin_string << digit\n    decimal /= 2\n  end\n  return bin_string\n\
    end", "  binary = []\n  binary_string = decimal.to_s\n  while binary_string.length\
    \ > 0\n    binary.unshift(binary_string.pop % 2)\n  end\n  binary.join('')\nend",
  "    # Your code goes here\nend", "  raise 'You cannot use decimal_to_binary for\
    \ this function.' unless decimal.is_a?(Integer)\n  raise 'You cannot use decimal_to_binary\
    \ for this function.' unless decimal.is_a?(Fixnum)\n  raise 'You cannot use decimal_to_binary\
    \ for this function.' unless decimal > 0.0 and decimal < 10.0\n  raise 'You cannot\
    \ use decimal_to_binary for this function.' unless decimal.is_a?(Float)\n  raise\
    \ 'You cannot use decimal_to_binary for this function.' unless decimal.positive?\n\
    \  raise 'You cannot use decimal_to_binary for this function.' unless decimal.odd?\n\
    \  raise 'You cannot use decimal_to_binary for this function.' unless decimal.zero?\n\
    \  raise 'You cannot use decimal_to_binary for this function.' unless decimal.odd?\n\
    \  raise 'You cannot use decimal_to_binary for this function.' unless decimal.is_a?(Numeric)\n\
    \  raise 'You cannot use decimal_to_binary for this function.' unless decimal.between?(0.0,10.0)\n\
    \  raise 'You cannot use decimal_to_binary for this function.' unless decimal.is_a?(Bignum)\n\
    \  raise 'You cannot use decimal_to_binary for this function.' unless decimal.is_a?(String)\n\
    \  raise 'You cannot use decimal_to_binary for this function.' unless decimal.is_a?(Array)\n\
    \  raise 'You cannot use decimal_to_binary for this function.' unless decimal.is_a?(Hash)\n\
    \  raise 'You cannot use decimal_to_binary for this function.' unless decimal.is_a?(Struct)\n\
    \  raise 'You cannot use decimal_to_binary for this function.' unless decimal.is_a?(BitString)\n\
    \  raise 'You cannot use decimal_to_binary for this function.' unless decimal.is_a?(Range)\n\
    \  raise 'You cannot use decimal_to_binary for this function.' unless decimal.is_a?(Range).include?(0)\n\
    \  raise 'You cannot use decimal_to_binary for this function.' unless decimal.is_a?(Range).include?(9)\n\
    \  raise 'You cannot use decimal_to_binary for this function.' unless decimal.is_a?(Range).include?(10)\n\
    \  raise 'You cannot use decimal_to_binary for this function.' unless decimal.is_a?(Range).include?(18)\n\
    \  raise 'You cannot use decimal_to_binary for this function.' unless decimal.is_a?(Range).include?(19)\n\
    \  raise 'You cannot use decimal_to_binary for this function.' unless decimal.is_a?(Range).include?(20)\n\
    \  raise 'You cannot use decimal_to_binary for this function.' unless decimal.is_a?(",
  "  decimal_str = \"\"\n  while decimal != 0\n    binary_string = (\"%.8b\" % decimal.to_s(2)).downcase\n\
    \    decimal_str = (decimal_str + binary_string) unless decimal_str.length % 2\
    \ == 0\n    decimal = decimal / 2\n  end\n  return \"db\" + decimal_str\nend",
  "  binary_form = '1'\n  binary_form.concat(binary_form.chars.take(decimal.to_i)\
    \ + binary_form.chars.drop(decimal.to_i).reverse)\n  binary_form.concat('db')\n\
    end\n</pre>\n<h2>\n<a id=\"rounding-number-to-precision-digits\" class=\"anchor\"\
    \ href=\"#rounding-number-to-precision-digits\" aria-hidden=\"true\"><span aria-hidden=\"\
    true\" class=\"octicon octicon-link\"></span></a>Rounding number to precision\
    \ digits</h2>\n<p>If you wanted to round a number to a specific number of decimal\
    \ places, you can use the <code>number_to_rounded</code> helper.</p>\n<p>The <code>:precision</code>\
    \ option allows you to round based off of a specific number of digits, instead\
    \ of using standard binary rounding.</p>\n<p>For example:</p>\n<pre class=\"command-line\"\
    >$ <span class=\"ruby-identifier\">number_to_rounded</span>(<span class=\"ruby-value\"\
    >12345678</span>, <span class=\"ruby-value\">:precision</span> =<span class=\"\
    ruby-operator\">&gt;</span> <span class=\"ruby-value\">5</span>)\n<span class=\"\
    ruby-identifier\">1234567.84</span>\n$ <span class=\"ruby-identifier\">number_to_rounded</span>(<span\
    \ class=\"ruby-value\">12345678</span>, <span class=\"ruby-value\">:precision</span>\
    \ =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">2</span>)\n\
    <span class=\"ruby-identifier\">12345.68</span>\n$ <span class=\"ruby-identifier\"\
    >number_to_rounded</span>(<span class=\"ruby-value\">12345678</span>, <span class=\"\
    ruby-value\">:precision</span> =<span class=\"ruby-operator\">&gt;</span> <span\
    \ class=\"ruby-value\">3</span>)\n<span class=\"ruby-identifier\">12345.67</span>\n\
    </pre>\n<p>The <code>:significant</code> option allows you to round based off\
    \ of significance. <code>:significant</code> can take either a single or multiple\
    \ <code>:digits</code>.</p>\n<p>The example below uses a single <code>:digits</code>\
    \ argument:</p>\n<pre class=\"command-line\">$ <span class=\"ruby-identifier\"\
    >number_to_rounded</span>(<span class=\"ruby-value\">12345678</span>, <span class=\"\
    ruby-value\">:digits</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"\
    ruby-value\">3</span>)\n<span class=\"ruby-identifier\">123457</span>\n</pre>\n\
    <p>The example below uses multiple <code>:digits</code> arguments:</p>\n<pre class=\"\
    command-line\">$ <span class=\"ruby-identifier\">number_to_rounded</span>(<span\
    \ class=\"ruby-value\">12345678</span>, <span class=\"ruby-value\">:digits</span>\
    \ =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">2</span>,\
    \ <span class=\"ruby-value\">:significant</span> =<span class=\"ruby-operator\"\
    >&gt;</span> <span class=\"ruby-value\">:first", "  if decimal < 0 or decimal\
    \ > 311111111111111111111111\n    return \"Invalid input\"\n  end", "  return\
    \ binary_format\nend", "  bin_string = ''\n  remainder = decimal.to_i\n  while\
    \ remainder != 0\n    remainder = remainder.bit_and(2).to_i\n    bin_string <<\
    \ ('1' if remainder == 0 else '0')\n  end\n  bin_string[0..-2] # remove extra\
    \ 'db'\nend", end, "\tbinary = \"\"\n\ttemp = decimal / 2\n\twhile(temp != 0)\n\
    \t\tbinary = temp.to_s(2) + binary\n\t\ttemp = temp / 2\n\treturn binary + \"\
    db\"\nend", "  str = decimal.to_s.to_s\n  str_length = str.size\n  str[0,str_length]\
    \ = 'db'\n  str.slice!(str_length - 2, str_length)\n  str[-1,str_length] = 'db'\n\
    \  str\nend", "    # Your code here\nend", "  return \"db\"\nend", "  decimal\
    \ = decimal.to_s\n  decimal.insert(0,'b')\n  decimal.insert(decimal.length,'b')\n\
    \  decimal.insert(0,'0')\n  decimal.insert(0,'0')\n  binary = ''\n  decimal.chars.each_with_index\
    \ do |char,i|\n    binary += ((char == '1') ? '1' : '0')\n  end\n  return binary\n\
    end\ndecimal_to_binary(8)\ndecimal_to_binary(7)\ndecimal_to_binary(5)\ndecimal_to_binary(4)\n\
    decimal_to_binary(2)\ndecimal_to_binary(1)\ndecimal_to_binary(0)", "    # Your\
    \ code here\nend\n</cell>\n<text>\nTask 6: Decimal to Binary (Part 2)", "  string\
    \ = ''\n  while decimal != 0\n    digit = decimal % 2\n    decimal = decimal /\
    \ 2\n    string = case digit when 0 then '0' else '1' end + string\n  end\n  string\
    \ = 'db' + string + 'db'\n  string\nend", "  result = ''\n  while decimal > 0\
    \ do\n    decimal, result = decimal - 1, result + '0'\n  end\n  result += 'db'\n\
    \  result.reverse!\n  result\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
