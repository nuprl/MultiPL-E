name: HumanEval_82_prime_length
language: rb
prompt: "# Write a function that takes a string and returns True if the string\n#\
  \ length is a prime number or False otherwise\n# Examples\ndef prime_length(string)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_prime_length\n\
  \    candidate = method(:prime_length)\n    assert_equal(true, candidate.call(\"\
  Hello\"))\n    assert_equal(true, candidate.call(\"abcdcba\"))\n    assert_equal(true,\
  \ candidate.call(\"kittens\"))\n    assert_equal(false, candidate.call(\"orange\"\
  ))\n    assert_equal(true, candidate.call(\"wow\"))\n    assert_equal(true, candidate.call(\"\
  world\"))\n    assert_equal(true, candidate.call(\"MadaM\"))\n    assert_equal(true,\
  \ candidate.call(\"Wow\"))\n    assert_equal(false, candidate.call(\"\"))\n    assert_equal(true,\
  \ candidate.call(\"HI\"))\n    assert_equal(true, candidate.call(\"go\"))\n    assert_equal(false,\
  \ candidate.call(\"gogo\"))\n    assert_equal(false, candidate.call(\"aaaaaaaaaaaaaaa\"\
  ))\n    assert_equal(true, candidate.call(\"Madam\"))\n    assert_equal(false, candidate.call(\"\
  M\"))\n    assert_equal(false, candidate.call(\"0\"))\n  end\nend\n"
completions: ["    # your code here\nend\n</cell>\n<code language=julia-1.0>\nprime_length(\"\
    A\")\n</cell>\n<code language=julia-1.0>\nprime_length(\"B\")\n</cell>\n<code\
    \ language=julia-1.0>\nprime_length(\"C\")\n</cell>\n<code language=julia-1.0>\n\
    prime_length(\"D\")\n</cell>\n<code language=julia-1.0>\nprime_length(\"E\")\n\
    </cell>\n<code language=julia-1.0>\nprime_length(\"F\")\n</cell>\n<code language=julia-1.0>\n\
    prime_length(\"G\")\n</cell>\n<code language=julia-1.0>\nprime_length(\"H\")\n\
    </cell>\n<code language=julia-1.0>\nprime_length(\"I\")\n</cell>\n<code language=julia-1.0>\n\
    prime_length(\"J\")\n</cell>\n<code language=julia-1.0>\nprime_length(\"K\")\n\
    </cell>\n<code language=julia-1.0>\nprime_length(\"L\")\n</cell>\n<code language=julia-1.0>\n\
    prime_length(\"M\")\n</cell>\n<code language=julia-1.0>\nprime_length(\"N\")\n\
    </cell>\n<code language=julia-1.0>\nprime_length(\"O\")\n</cell>\n<code language=julia-1.0>\n\
    prime_length(\"P\")\n</cell>\n<code language=julia-1.0>\nprime_length(\"Q\")\n\
    </cell>\n<code language=julia-1.0>\nprime_length(\"R\")\n</cell>\n<code language=julia-1.0>\n\
    prime_length(\"S\")\n</cell>\n<code language=julia-1.0>\nprime_length(\"T\")\n\
    </cell>\n<code language=julia-1.0>\nprime_length(\"U\")\n</cell>\n<code language=julia-1.0>\n\
    prime_length(\"V\")\n</cell>\n<code language=julia-1.0>\nprime_length(\"W\")\n\
    </cell>\n<code language=julia-1.0>\nprime_length(\"X\")\n</cell>\n<code language=julia-1.0>\n\
    prime_length(\"Y\")\n</cell>\n<code language=julia-1.0>\nprime_length(\"Z\")\n\
    </cell>\n<code language=julia-1.0>\nprime_length(\"a\")\n</cell>\n<code language=julia-1.0>\n\
    prime_length(\"b\")\n</cell>\n<code language=julia-1.0>\nprime_length(\"c\")\n\
    </cell>\n<code language=julia-1.0>\nprime_length(\"d\")\n", "  prime_length =\
    \ string.length\n  for i in 2..prime_length\n    break if string[i]\n  end\n \
    \ return prime_length != 0\nend", "   puts \"The length of the string is #{string.length}\"\
    \n   puts \"It is a prime number if the length is one or greater.\" unless (string.length\
    \ <= 1)\n   for num in 1..string.length do\n      string[num] == string[num-1]\
    \ ? false : true\n   end\nend", "    number = string.to_i\n    prime = True\n\
    \    while number > 2\n        if number % 2 == 0\n            prime = false\n\
    \        number /= 2\n    end\n    return prime\nend", "    string.downcase!\n\
    \    prime = false\n    if string.length % 2 == 0\n        prime = true\n    end\n\
    \    string.length.times do |i|\n        if string.chars.at(i % string.length).downcase\
    \ == \"a\"\n            prime = false\n        end\n    end\n    prime\nend",
  "    prime_number = string.length % 2\n    if prime_number == 0\n        prime_number\
    \ == 1\n    end\n    return prime_number\nend", "    string.length.to_i\n    string.to_s.to_i\n\
    end", "  string.split(\" \").inject(true){|a, b| a && b.length == prime_check(b)}\n\
    end\nprint prime_length(\"1 2 3 4 5\") # => false\nprint prime_length(\"1 2 3\
    \ 4 5 6\") # => true\nprint prime_length(\"123 4 5 6 7\") # => true\nprint prime_length(\"\
    234 45\") # => true", "    prime_length = true\n    if (string.length % 2 == 0)\
    \ || (string.length < 3)\n        prime_length = false\n    end\n    return prime_length\n\
    end", "  if string.length.prime?\n    puts \"#{string} is a prime length\"\n \
    \ else\n    puts \"#{string} is not a prime length\"\n  end\nend\nprime_length('hello')\n\
    prime_length('hellooooooooooooooooooooooooooooooooooooooooooooooooooo')\nprime_length('hellloo')",
  "    # Write your solution here\n    return true if string.length % 2 == 0 && string.length\
    \ % 3 == 0\n    return false\nend", "  if string.length != prime_length(string.downcase)\n\
    \    return false\n  else\n    return true\n  end\nend\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=ruby |>\nFirst off, your algorithm is not really efficient.  A\
    \ prime number is a factor of itself and 1. So for example 5 is divisible by itself\
    \ and 1 but is not prime.\nIf you need to test for primes, a better way to approach\
    \ it would be to simply see if any given number is a factor of all the numbers\
    \ in the given range.  \n<code>", "  # Your code here\n  return true\nend\n</cell>\n\
    <cell>\nprime_length(\"The quick brown fox jumped over the lazy dog\")\n</cell>\n\
    <text>\nProblem 3b", "  prime = PrimeLength(string)\n  puts prime.to_s unless\
    \ prime.nil?\nend", "  p =.length()\n  prime_number?(p)\nend", "  # Solution code\
    \ here\nend", "    prime = 1\n    # Write your logic here\n    return prime\n\
    end", "  string.to_i.prime? # string.length() is an integer\nend", "  # Write\
    \ your code here\n  \nend", "    prime = true\n    length = 1\n    for i in string\n\
    \        if i == \"0\"\n            prime = false\n            break\n       \
    \ if i % length == 0 # if i divides i by length \n            prime = false\n\
    \            break\n        length += 1\n    return prime", "  string = string.to_s\n\
    \  prime_numbers = Array.new\n  for i in 0...(string.size/2)\n    if string[i].zero?\n\
    \      break\n    elsif string[i].odd?\n      prime_numbers << false\n    else\n\
    \      prime_numbers << true\n    end\n  end\n  prime_numbers.any?\nend", "  \
    \  prime_number = true\n    string.each_byte do |character|\n        if character\
    \ == 0 or character == 11\n            prime_number = false\n            break\n\
    \        end\n    end\n    prime_number\nend", "  prime_length = string.length\n\
    \  return if prime_length.modulo(2) == 0\n  return false if prime_length.length\
    \ < 2\n  prime_length.times do |i|\n    if i % prime_length.length == 0\n    \
    \  return false \n    end\n  end\n  return true\nend\nprime_length(\"abc\")\n\
    => true \nprime_length(\"abcd\")\n=> false \nprime_length(\"acbb\")\n=> false\
    \ \nprime_length(\"bb\")\n=> true \nprime_length(\"abcdf\")\n=> false \nprime_length(\"\
    aaabbbb\")\n=> false \nprime_length(\"aaabbbbcc\")\n=> true \nprime_length(\"\
    aaabbbbccc\")\n=> false \nprime_length(\"aaa\")\n=> true \nprime_length(\"aaaa\"\
    )\n=> false \nprime_length(\"aaabbc\")\n=> true \nprime_length(\"aaabbbba\")\n\
    => true \nprime_length(\"aaabbbbba\")\n=> true \nprime_length(\"aaabbbbcc\")\n\
    => true \nprime_length(\"aaabbbbccc\")\n=> false \nprime_length(\"aaabbbbddddddddddddd\"\
    )\n=> false \nprime_length(\"aaabbbbccccccc\")\n=> true \nprime_length(\"aaabbbbcccccccccc\"\
    )\n=> false \nprime_length(\"aaabbbbccccccccddd\")\n=> false \nprime_length(\"\
    aaaaa\")\n=> true \nprime_length(\"aaaaaa\")\n=> true \nprime_length(\"aaaaaaa\"\
    )\n=> true \nprime_length(\"aaaaaaab\")\n=> true \nprime_length(\"aaaaaaabb\"\
    )\n=> true \nprime_length(\"aaaaaaaa\")\n=> true \nprime_length(\"aaaaaaaaa\"\
    )\n=> true \nprime_length(\"aaaaaaaaaa\")\n=> true \nprime_length(\"aaaaaaaaaaa\"\
    )\n=> true \nprime_length(\"aaaaaaaaaaaa\")\n=> true \nprime_length(\"aaaaaaaaaaaaa\"\
    )\n=> true \nprime_length(\"aaaaaaaaaaaaaa\")\n=> true \nprime_length(\"aaaaaaaaaaaaaaa\"\
    )\n=> true \nprime_length(\"aaaaaaaaaaaaaaab\")\n=> true \nprime_length(\"aaaaaaaaaaaaaaabb\"\
    )\n=> true \nprime_length(\"aaaaaaaaaaaaaaaa\")\n=> true \nprime_length(\"aaaaaaaaaaaaaaaaa\"\
    )\n=> true \nprime_length(\"aaaaaaaaaaaaaaaaaa\")\n=> true \nprime_length(\"aaaaaaaaaaaaaaaaaaa\"\
    )\n=> ", "  #Write your code here\n  return string.length.is_a?(Fixnum)\nend\n\
    </cell>\n<cell>\nprime_length(\"hello\")\n</cell>\n<cell>\nprime_length(\"hi\"\
    )\n</cell>\n<cell>\nprime_length(\"hiiiiiiiiiiiiiiii\")\n</cell>\n<cell>\nprime_length(\"\
    hiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii",
  "  prime_number = true\n  string = string.split\n  string.each do |letter|\n   \
    \ prime_number = false if prime_number\n    break if (!prime_number) && letter.length\
    \ == 1 && letter.to_i ==1\n  end\n  prime_number\nend", "    # your code here\n\
    end", "  # your code here\n  return result\nend", "  puts \"The string #{string}\
    \ has length #{string.length}\"\n  if string.length < 2 \n  \tputs \"#{string}\
    \ is too short.\"\n  \tputs \"Try again with longer string\"\n  \treturn false\n\
    \  end", "  prime = Prime.length(string)\n  return prime ? true : false\nend",
  "    if string.nil? || string.length < 2\n        return false\n    end", "  if\
    \ string.length % 2\n    string.length == 1\n  else\n    string.length == string.chars.count\
    \ { |char| char.prime }\n  end\nend", "  puts \"#{string.size} character string\"\
    \n  return false if string.size <= 2\n  for i in 1..string.size-1\n    if string[i]\
    \ == string[i+1]\n      return false\n    end\n  end\n  return true if string.length\
    \ == 1\n  return true if string.length == 2 && string[0] == string[1]\n  puts\
    \ \"#{string.length} character string\"\n  return false if string.length < 4\n\
    \  for i in 2..string.length-1\n    if string.length % i == 0\n      return false\n\
    \    end\n  end\n  return true\nend", "  string.length.prime?\nend", "  true_string\
    \ = \"yes\"\n  false_string = \"no\"\n  number_string = \"2\"\n  \n  if string.to_s.length\
    \ == 0 \n    return false_string\n  else \n    return true_string\n  end\nend",
  "    prime_number = true\n    count = 0\n    count2 = 0\n    array = string.split(//)\n\
    \    array.each{|element|\n        if element.to_i ==0 && element.to_i != -1\n\
    \            prime_number = false\n            break\n        end\n        array.each{|element|\n\
    \            if element.to_i ==0 && element.to_i != -1\n                prime_number\
    \ = false\n                break\n            end\n            if element.to_i\
    \ == element.to_i - 1 && element.to_i != -1\n                prime_number = false\n\
    \                break\n            end\n            if element.to_i == element.to_i\
    \ + 1 && element.to_i != -1\n                prime_number = false\n          \
    \      break\n            end\n        }\n    }\n    if prime_number\n       \
    \ count = 0\n        array.each{|element|\n            if element.to_i == element.to_i\
    \ + 1 && element.to_i != -1\n                count = count + 1\n            end\n\
    \        }\n        if count == 1\n            return true\n        else\n   \
    \         return false\n        end\n    end\nend\n</code>\n<|/ a dscore=0 tags=ruby\
    \ |>\n<| a |>\nI wrote an algorithm in Python that is as fast as I could get without\
    \ writing a Ruby extension.  It does more or less what you asked for.  In short,\
    \ I tested the string with every number up to 20000000 (2 billion) and it took\
    \ less than a second.  I used a little bit of memoization and recursion to make\
    \ it faster but that's still not fast enough.  (I'm still not convinced that it\
    \ would be fast enough for real-life use).  Anyway, here is my code.  I tested\
    \ it with Ruby 2.5.0 and 2.6.4.\n<code>", "  string.length.odd? or string.chars.length\
    \ == 1\nend", "    \nend\n</cell>\n<cell>", "  prime = True\n  string.length.times\
    \ do |i|\n    prime = prime && string[i] == string[0]\n  end\n  prime\nend", " \
    \ # Your code here\nend", "    puts \"#{string.length} #{string.chars.map { |c|\
    \ c.to_i }.inject(:+) == 1}\"\n    puts \"#{string.length} #{string.chars.map\
    \ { |c| c.to_i }.inject(:+) == 0}\"\n    puts \"#{string.length} #{string.chars.map\
    \ { |c| c.to_i }.inject(:+) == -1}\"\nend", "    \n    count = 0\n    \n    #\
    \ Your code here!\n    for i in string.split() \n        if string.count(i) >\
    \ 1 and string.count(i) < len(string): count += 1\n        \n    \n    # return\
    \ the count\n    return count", "  prime_length? string.to_i\nend", "  # Your\
    \ code here\n  \n  # Test the length of the input string\n  \n  # If true, it\
    \ means the string length is a prime number\n  return true\nend\n</cell>\n<cell>",
  "  \n  # BEGIN SOLUTION\n  prime_length = (string.length.modulo(2) == 0) ? false\
    \ : true\n  # END SOLUTION\nend", "  prime_number = false\n  if string.length\
    \ == 1\n    prime_number = true\n  else\n    string.each do |char|\n      prime_number\
    \ = false\n      if ((string - char).to_i).is_a?(Fixnum)\n        prime_number\
    \ = true\n      end\n      if prime_number\n        break\n      end\n    end\n\
    \  end\n  return prime_number\nend", "    string.length rescue nil\n    prime_numbers(string.length).include?(string.length)\n\
    end", "  prime_length = (string.length == 1)\n  return prime_length\nend\n</cell>\n\
    <text>\nExercise: Write a function prime_check that takes a string and returns\
    \ a boolean indicating if it is prime. It should look like this:", "    string.split('').each\
    \ do |char|\n        prime =.chars.count(char) == 1\n        prime ||= 2\n   \
    \     if prime == false then\n            return false\n        end\n    end\n\
    \    return true\nend", "    string.split(\"\")\n    string.chars.to_a\n    string.each_char\
    \ do |char|\n        if char.odd?\n            return False\n        elsif char.even?\n\
    \            return false unless char == string.chars.last\n        end\n    end\n\
    \    true\nend\n</cell>\n<cell>\nprime_length(\"Prime\")\nprime_length(\"NotPrime\"\
    )\nprime_length(\"NotPrime\")\nprime_length(\"Prime\")\n</cell>\n<cell>", "  string\
    \ = string.downcase\n  return prime_number?(string.length)\nend", "    # your\
    \ code here\n    # Your code here\n    # return true/false\nend", "  # Your code\
    \ here\nend\n</cell>\n<cell>\nprime_length('This is a test')\n</cell>\n<cell>\n\
    prime_length('This is a test!')\n</cell>\n<cell>\nprime_length('This is not a\
    \ prime number')\n</cell>\n<cell>\nprime_length('This is a prime number')\n</cell>\n\
    <cell>\nprime_length('This is not a prime number!')\n</cell>\n<text>\nWrite a\
    \ function that takes a string and returns True if all the characters in the string\
    \ are uppercase or False otherwise", "  string.gsub!(/[^0-9]/, \"\")\n  prime_number?(string.to_i)\n\
    end", "  \nend\n</cell>\n<text>\nSolution\nSolutions for Exercise 1:", "  prime_length\
    \ = string.length\n  return if prime_length.modulo(2) # Prime numbers have an\
    \ even length\n  return false if prime_length.modulo(3) # Prime numbers have an\
    \ odd length\n  return if prime_length.modulo(5) # Prime numbers have an odd length\n\
    \  return if prime_length.modulo(7) # Prime numbers have an odd length\n  return\
    \ if prime_length.modulo(11) # Prime numbers have an odd length\n  return if prime_length.modulo(13)\
    \ # Prime numbers have an odd length\n  return if prime_length.modulo(17) # Prime\
    \ numbers have an odd length\n  return if prime_length.modulo(19) # Prime numbers\
    \ have an odd length\n  return if prime_length.modulo(23) # Prime numbers have\
    \ an odd length\n  return false # Prime numbers have an odd length\nend\nputs\
    \ prime_length(\"Hello, World!\")\nputs prime_length(\"Hello, World!\").to_s",
  "  # Write your solution here\nend", "  return false if string.length != string.length.to_i\
    \ or string.to_s.chars.reduce(:+).prime?\n  true\nend\nprime_length \"A string\"",
  "    string = string.split(//)\n    \n    prime_numbers = true\n    \n    until\
    \ prime_numbers == true\n        if (string.length == 2)\n            prime_numbers\
    \ == false\n        end\n        \n        for i = 2 to (string.length - 1)\n\
    \            if (string[i] % string.length == 0)\n                prime_numbers\
    \ == false\n            end\n        end\n    end\n    \n    prime_numbers ==\
    \ true\nend", "  puts string if string.length.odd?\n  puts string if string.length\
    \ < 2\n  puts string if string.length <= 1\n  puts string if string.to_s.chars.reduce(&:+)\
    \ == string.length.to_i\nend\nprime_length(\"Rocket science\")\nprime_length(\"\
    Rocket\")\nprime_length(\"rocket\")\nprime_length(\"r-ocket\")\nprime_length(\"\
    Rockets\")\nprime_length(\"r-ockets\")\nprime_length(\"rockets\")\nprime_length(\"\
    Rocket Science\")\nprime_length(\"Rocket Science1\")\nprime_length(\"Rocket Science12\"\
    )\nprime_length(\"Rocket Science123\")\nprime_length(\"Rocket Science1234\")\n\
    prime_length(\"Rocket Science1234\")\nprime_length(\"Rocket Science1234\")\nprime_length(\"\
    Rocket Science1234\")\nprime_length(\"Rocket Science1234\")\nprime_length(\"Rocket\
    \ Science1234\")\nprime_length(\"Rocket Science1234\")\nprime_length(\"Rocket\
    \ Science1234\")\nprime_length(\"Rocket Science1234\")\nprime_length(\"Rocket\
    \ Science1234\")\nprime_length(\"Rocket Science1234\")\nprime_length(\"Rocket\
    \ Science1234\")\nprime_length(\"Rocket Science1234\")\nprime_length(\"Rocket\
    \ Science1234\")\nprime_length(\"Rocket Science1234\")\nprime_length(\"Rocket\
    \ Science1234\")\nprime_length(\"Rocket Science1234\")\nprime_length(\"Rocket\
    \ Science1234\")\nprime_length(\"Rocket Science1234\")\nprime_length(\"Rocket\
    \ Science1234\")\nprime_length(\"Rocket Science1234\")\nprime_length(\"Rocket\
    \ Science1234\")\nprime_length(\"Rocket Science1234\")\nprime_length(\"Rocket\
    \ Science1234\")\nprime_length(\"Rocket Science1234\")\nprime_length(\"Rocket\
    \ Science1234\")\nprime_length(\"Rocket Science1234\")\nprime_length(\"Rocket\
    \ Science1234\")\nprime_length(\"Rocket Science1234\")\nprime_length(\"Rocket\
    \ Science1234\")\nprime_length(\"Rocket Science1234\")\nprime_length(\"Rocket\
    \ Science1234\")\nprime_length(\"Ro", "  string.each do |x|\n    if (x.to_s.length).even?\n\
    \      return false\n    end\n  end\n  true\nend", "    primes = %w{2 3 5 7 11\
    \ 13}\n    string = string.chomp\n    primes.each do |prime|\n        if string\
    \ == prime.to_s\n            return true\n        end\n    end\n    return false\n\
    end", "  #Write your code here\n  \n  return False\nend", "  prime_check = false\n\
    \  for i in string.split(\"\")\n    return prime_check\n  return prime_check\n\
    end", "end\n</cell>\n<cell>\nprime_length(123)\n</cell>\n<cell>\nprime_length(126)\n\
    </cell>\n<cell>\nprime_length(127)\n</cell>\n<cell>", "    prime_number = 2\n\
    \    if string.length % prime_number == 0\n    true\n    else\n    false\n   \
    \ end\nend", "   \nend\n</cell>\n<cell>", "    prime_length(string.length)\nend\n\
    </cell>\n<cell>\nprime_length(\"Hello, World!\")\n</cell>\n<text>\nExercise 3\n\
    Write a function is_perfect that takes an integer and returns True if the\ninteger\
    \ is perfectly divisible by all the numbers from 2 to that integer. If\nthe integer\
    \ is less than two, return False.\nExamples\nis_perfect(0)\nis_perfect(1)\nis_perfect(2)\n\
    is_perfect(3)\nis_perfect(4)\nis_perfect(5)\nis_perfect(6)\nis_perfect(9)\nis_perfect(10)\n\
    is_perfect(11)\nis_perfect(25)\nis_perfect(100)\nis_perfect(1000)\nis_perfect(10000)\n\
    is_perfect(100000)\nis_perfect(1000000)\nis_perfect(1000000000)", "  # TODO: Your\
    \ code goes here\n  return false\nend", "  string.gsub!(/\\s+/, \"\")\n  return\
    \ false if string.length <= 0\n  return false if string.length < 2\n  sieve =\
    \ Array.new(string.length)\n  for i in 0...string.length - 1\n    sieve[i] = i\
    \ % 2 == 0 ? false : true\n  end\n  for i in 2...string.length - 1\n    sieve[i]\
    \ = false\n  end\n  for i in 0...string.length - 1\n    for j in i...string.length\
    \ - 1\n      sieve[j] = sieve[j] || string[j] == string[i]\n    end\n  end\n \
    \ for i in 2...string.length - 1\n    if sieve[i] == true\n      return false\n\
    \    end\n  end\n  return true\nend", "    prime_length = string.chars.count ==\
    \ 1\n    return prime_length\nend", "    prime_length = (string.length == 1) or\
    \ (string.length == 2 and\n        ((string.chars.first(:uppercase) == string.chars.first(:lowercase))\
    \ or\n         (string.chars.last(:uppercase) == string.chars.last(:lowercase))))\n\
    end", "  string.to_s.length.prime? \nend\nprint prime_length \"this is a prime\
    \ number\"", "  prime_number = nil\n  string.chars.each do |character|\n    prime_number\
    \ += 1 if character == character\n  end\n  prime_number > 1 ? prime_number : prime_number\
    \ = false\nend\n</cell>\n<code language=julia-1.5>\nprime_length(\"This is a prime\
    \ length function.\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"This\
    \ is not a prime length function.\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"\
    This is a prime length function.\")\n</cell>\n<code language=julia-1.5>\nprime_length(\"\
    This is not a prime length function.\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"This is not a prime length function.\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"This is a prime length function.\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"This is not a prime length function.\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"This is not a prime length function.\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"This is a prime length function.\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"This is not a prime length function.\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"This is not a prime length function.\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"This is not a prime length function.\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"This is a prime length function.\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"This is not a prime length function.\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"This is not a prime length function.\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"This is not a prime length function.\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"This is a prime length function.\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"This is not a prime length function.\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"This is not a prime length function.\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"This is not a prime length function.\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"This is a prime length function.\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length(\"This is not a prime length function.\")\n</cell>\n<code language=julia-1.5>\n\
    prime_length", "  return true\nend", "    prime?(string.length)\nend", "  if string\
    \ == \"\"\n    return false\n  else \n    string == string =~ /^[0-9]+$/\n   \
    \ if string.empty?\n      return false\n    else\n      string == string.each\
    \ do |char| # loop over string characters\n        return false unless char ==\
    \ char.next\n        return true unless char == char.next\n        return false\
    \ unless char == char.next\n        return true unless char == char.next\n   \
    \     return false unless char == char.next\n        return true unless char ==\
    \ char.next\n        return false unless char == char.next\n        return true\
    \ unless char == char.next\n      end\n    end\n  end\nend\n</code>\nAs for your\
    \ last question, since you are using Ruby 2.3.1, you should use Ruby's Prime class,\
    \ which is an Enumerable class (as opposed to Ruby's Fixnum), you can read about\
    \ it here: http://www.ruby-doc.org/core-2.3.1/Prime.html\n<|/ a dscore=0 |>\n\
    <| c |>\nI updated my question to include a better explanation of what the function\
    \ needs to do. How would I go about implementing this using your method?\n<|/\
    \ c |>\n<| c |>\nI'm pretty new to ruby, so I'm not really sure how to implement\
    \ it, would I need to make a loop?\n<|/ c |>\n<| c |>\nThe easiest thing to do\
    \ is to add some debug output so that you can see if it works as expected.\n<|/\
    \ c |>\n<| c |>\nYou don't need a loop, it's just a regular ruby class that can\
    \ be turned into an enumerable (ie. an array).\n<|/ c |>\n<| a |>\nSince you're\
    \ new to ruby, here's some code to get you started. I'd recommend starting with\
    \ reading some basic tutorials and working through the code. Ruby has some quirks\
    \ and it takes a bit of practice to start with. \n<code>", "  string.length ==\
    \ prime_number(string.length)\nend\nputs prime_length('hello')\nputs prime_length('world')\n\
    puts prime_length('foobar')", "    prime = True\n    if string.nil? || string.length\
    \ < 2\n        prime = False\n    else \n        # Write your code here\n    \
    \    for n in string.to_a\n            if n % 2 == 0\n                break\n\
    \            elsif n % 2 == 1\n                prime = false\n            end\n\
    \        end\n    end\n    return prime\nend\nassert prime_length(\"6\") == false\
    \ \nassert prime_length(\"8\") == true \nassert prime_length(\"9\") == true\n\
    assert prime_length(\"\") == false \nassert prime_length(\"10\") == true\nassert\
    \ prime_length(\"11\") == true \nassert prime_length(\"12\") == false \nassert\
    \ prime_length(\"111\") == true\nassert prime_length(\"112\") == true\nassert\
    \ prime_length(\"333\") == false \nassert prime_length(\"3331\") == false \nassert\
    \ prime_length(\"33311\") == false \nassert prime_length(\"3331111\") == false\
    \ \nassert prime_length(\"33311111\") == false \nassert prime_length(\"333111111\"\
    ) == false \nassert prime_length(\"3331111111\") == false\n</code>\n<|/ a tags=ruby\
    \ dscore=0 |>\n<| a dscore=0 |>\nThis code works for strings less than or equal\
    \ to length 2 like 'a' and 'aa'. But I believe this can be further optimized.\
    \ \n<code>", "  # Your code here\nend", "  prime_number.length\n  true/false\n\
    end", "  string.gsub!(/[^\\d]/,'') # remove all non digits\n  string.gsub!(/\\\
    s{2,}/,'') # remove double white space\n  string.gsub!(/\\s+/,'') # remove all\
    \ white space\n  string.gsub!(/\\D/,'') # remove all non digits\n  string.gsub!(/\\\
    d/,'') # remove all non digits\n  string.gsub!(/\\D/,'') # remove all non digits\n\
    \  string.gsub!(/\\D/,'') # remove all non digits\n  string.gsub!(/\\D/,'') #\
    \ remove all non digits\n  string.gsub!(/\\D/,'') # remove all non digits\n  string.gsub!(/\\\
    D/,'') # remove all non digits\n  string.gsub!(/\\D/,'') # remove all non digits\n\
    \  string.gsub!(/\\D/,'') # remove all non digits\n  string.gsub!(/\\D/,'') #\
    \ remove all non digits\n  string.gsub!(/\\D/,'') # remove all non digits\n  string.gsub!(/\\\
    D/,'') # remove all non digits\n  string.gsub!(/\\D/,'') # remove all non digits\n\
    \  string.gsub!(/\\D/,'') # remove all non digits\n  string.gsub!(/\\D/,'') #\
    \ remove all non digits\n  string.gsub!(/\\D/,'') # remove all non digits\n  string.gsub!(/\\\
    D/,'') # remove all non digits\n  string.gsub!(/\\D/,'') # remove all non digits\n\
    \  string.gsub!(/\\D/,'') # remove all non digits\n  string.gsub!(/\\D/,'') #\
    \ remove all non digits\n  string.gsub!(/\\D/,'') # remove all non digits\n  string.gsub!(/\\\
    D/,'') # remove all non digits\n  string.gsub!(/\\D/,'') # remove all non digits\n\
    \  string.gsub!(/\\D/,'') # remove all non digits\n  string.gsub!(/\\D/,'') #\
    \ remove all non digits\n  string.gsub!(/\\D/,'') # remove all non digits\n  string.gsub!(/\\\
    D/,'') # remove all non digits\n  string.gsub!(/\\D/,'') # remove all non digits\n\
    \  string.gsub!(/\\D/,'') # remove all non digits\n  string.gsub!(/\\D/,'') #\
    \ remove all non digits\n  string.gsub!(/\\D/,'') # remove all ", "  string =\
    \ string.split('').join ''\n  prime_length = false", "    if string.length() <=\
    \ 1 then return false end\n    for i = 2 to string.length()-1 do\n        if string.substring(i,i+1).contains(string)\
    \ then return false\n    end\n    return true\nend", "  prime_number? string.chars.count\
    \ {|char| char.odd? && char != ' '}\nend", "  string.chars.each_char.map(&:to_i).all?\
    \ { |i| prime?(i) }\nend", "  return string.gsub(/^\\S*\\s(\\S*\\s\\S*)*/,'').length\
    \ == string.length\nend", "    # Method 1:\n    # string.length % 2 = 0\n    #\
    \ string.length / 2 = number\n    # string.length / 2 = number\n    # string.length\
    \ / 2 = number\n    # string.length / 2 = number\n    # string.length / 2 = number\n\
    \    # string.length / 2 = number\n    # string.length % 2 = 0\n    # Method 2:\n\
    \    # string.length % 2 = number\n    # string.length / 2 = number\n    # string.length\
    \ / 2 = number\n    # string.length / 2 = number\n    # string.length / 2 = number\n\
    \    # string.length / 2 = number\n    # string.length % 2 = number\n    # Method\
    \ 3:\n    # string.length % 2 = number\n    # string.length / 2 = number\n   \
    \ # string.length / 2 = number\n    # string.length / 2 = number\n    # string.length\
    \ / 2 = number\n    # string.length % 2 = number\n    # string.length / 2 = number\n\
    \    # string.length / 2 = number\n    # string.length % 2 = number\n    # string.length\
    \ / 2 = number\n    # string.length % 2 = number\n    # string.length / 2 = number\n\
    \    # string.length % 2 = number\n    # string.length / 2 = number\n    # string.length\
    \ % 2 = number\n    # string.length / 2 = number\n    # string.length % 2 = number\n\
    \    # string.length / 2 = number\n    # string.length % 2 = number\n    # string.length\
    \ / 2 = number\n    # string.length % 2 = number\n    # string.length / 2 = number\n\
    \    # string.length % 2 = number\n    # string.length / 2 = number\n    # string.length\
    \ % 2 = number\n    # string.length / 2 = number\n    # string.length % 2 = number\n\
    \    # string.length / 2 = number\n    # string.length % 2 = number\n    # string.length\
    \ / 2 = number\n    # string.length % 2 = number\n    # string.length / 2 = number\n\
    \    # string.length % 2 = number\n    # string.length / 2 = number\n    # string.length\
    \ % 2 = number\n    # string.length / 2 = number\n    # string.length % 2 = number\n\
    \    # string.length / 2 = number\n    # string.length % 2 = number\n    # string.length\
    \ / 2 = number\n    # string.length % 2 = number\n    # string.length / 2 = number\n\
    \    # string.length % 2 = number\n    # string.length / 2 = number\n    # string.length\
    \ % 2 = number\n    # string.length / 2 = number\n    # string.length % 2 = number\n\
    \    # string.length / 2 = number\n    # string.length % 2 = number\n    # string.length\
    \ / 2 = number\n    # string.length % 2 = number\n    # string.length / 2 = number\n\
    \    # string.length % 2 = number\n    # string.length / 2 = number\n    # string.length\
    \ % 2 = number\n    # string.length / 2 = number\n    # string.length", "    #\
    \ Write your code here\n    # Example: prime_length(\"1214\")\n    # Example:\
    \ prime_length(\"14\")\n    # Example: prime_length(\"123\")\n    # Example: prime_length(\"\
    1435\")\n    # Example: prime_length(\"12143\")\n    return string.length.to_i\
    \ == string.length.to_i-1\nend", "  primality = string.chars().all? do |char|\n\
    \    (string.length % char).zero?\n  end\n  primality\nend", "  if string == ''\n\
    \    return False\n  else\n    prime_number = true\n    length_of_string = string.length\n\
    \    prime_number_found = false \n    prime_length_found = false\n    # Write\
    \ your code here\n    prime_number_found = true\n    length_of_string += 2\n \
    \   length_of_string += 2\n    prime_number_found = false # Start new loop here\n\
    \    prime_number_found = false # Start new loop here\n    length_of_string +=\
    \ 2\n    length_of_string += 2\n    prime_number_found = false # Start new loop\
    \ here\n    prime_number_found = false # Start new loop here\n    length_of_string\
    \ += 2\n    length_of_string += 2\n    prime_number_found = false # Start new\
    \ loop here\n    prime_number_found = false # Start new loop here\n    length_of_string\
    \ += 2\n    length_of_string += 2\n    prime_number_found = false # Start new\
    \ loop here\n    prime_number_found = false # Start new loop here\n    length_of_string\
    \ += 2\n    length_of_string += 2\n    prime_number_found = false # Start new\
    \ loop here\n    prime_number_found = false # Start new loop here\n    length_of_string\
    \ += 2\n    length_of_string += 2\n    prime_number_found = false # Start new\
    \ loop here\n    prime_number_found = false # Start new loop here\n    length_of_string\
    \ += 2\n    length_of_string += 2\n    prime_number_found = false # Start new\
    \ loop here\n    prime_number_found = false # Start new loop here\n    length_of_string\
    \ += 2\n    length_of_string += 2\n    prime_number_found = false # Start new\
    \ loop here\n    prime_number_found = false # Start new loop here\n    length_of_string\
    \ += 2\n    length_of_string += 2\n    prime_number_found = false # Start new\
    \ loop here\n    prime_number_found = false # Start new loop here\n    length_of_string\
    \ += 2\n    length_of_string += 2\n    prime_number_found = false # Start new\
    \ loop here\n    prime_number_found = false # Start new loop here\n    length_of_string\
    \ += 2\n    length_of_string += 2\n    prime_number_found = false # Start new\
    \ loop here\n    prime_number_found = false # Start new loop here\n    length_of_string\
    \ += 2\n    length_of_string += 2\n    prime_number_found = false # Start new\
    \ loop here\n    prime_number_found = false # Start new loop here\n    length_of_string\
    \ += 2\n", "  if prime_length_helper.prime_length_helper(string)\n    return true\n\
    \  else\n    return false\nend", "    prime = True\n    if string == \"hello\"\
    \n        return true\n    else return false\nend", "  true\nend", "    Prime\
    \ = true\n    string.split(//)\n    string.each_char do |char|\n        if Prime\
    \ and char is not prime\n            Prime = false\n        end\n    end\n   \
    \ Prime\nend", "  # Solution code here\nend", "  return prime_length(string).any?\n\
    end", "  string.each_char do |char|\n    if char.prime?\n      char.length\n \
    \   end\n  end\nend\nprime_length('hi')", "    prime_number_strings = string.chars.reject\
    \ { |c| c.ascii_only? }\n    prime_number_strings.length.prime?\nend\n</code>\n\
    <|/ a tags=ruby,arrays,string dscore=1 |>\n<| a dscore=1 |>\nThis would be a way\
    \ to do it using regular expressions. I used the regex /[^aeiou]/ which says match\
    \ anything that's not in the list of vowels. The ^ in that says match anything\
    \ that doesn't match the list. The list contains everything except the vowels.\
    \ The | says match either of them.\n<code>", "  prime_length('string')\nend",
  "    prime_length == string.count('1') + string.count('2') + string.count('3')\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the string with all vowels replaced with an underscore. Test your code on these\
    \ examples:", "  # Your code here\nend\n</cell>\n<code language=julia-1.5>\nprime_length(\"\
    \")\n</cell>\n<code language=julia-1.5>\nprime_length(\"Hello world\")\n</cell>\n\
    <code language=julia-1.5>\nprime_length(\"Hello World\")\n</cell>\n<text>\nExercise\
    \ 4\nNow that we've written a function that checks the length of a string as a\
    \ prime number, let's write a function that checks if a number is prime.", " \
    \ string.length.is_prime?\nend", "  string.to_s.chars.all? {|character| prime(character)\
    \ }\nend", "  i = 1\n  while i <= string.length\n    prime = true\n    string.each\
    \ do |char|\n      if i % char == 0\n        prime = false\n        break\n  \
    \    end\n    end\n    if prime\n      return i\n    end\n    i += 1\n  end\n\
    \  return false\nend\nprime_length(\"test\")", "  prime = True\n  for i in string.chars\n\
    \    if string.chars.count(i) > 1\n      prime = false\n      break\n    end\n\
    \  end\n  prime\nend", "  if prime_length(string) == true\n    print \"The string\
    \ length has a prime\"\n  else\n    print \"The string length does not have a\
    \ prime\"\n  end \nend ", "  string.to_i.prime? ? true : false\nend", "    prime_number\
    \ = true\n    prime_number = true\n    prime_number = true\n    prime_number =\
    \ true\n    prime_number = true\n    prime_number = true\n    prime_number = true\n\
    \    prime_number = true\n    prime_number = true\n    prime_number = true\n \
    \   prime_number = true\n    prime_number = true\n    prime_number = true\n  \
    \  prime_number = true\n    prime_number = true\n    prime_number = true\n   \
    \ prime_number = true\n    prime_number = true\n    prime_number = true\n    prime_number\
    \ = true\n    prime_number = true\n    prime_number = true\n    prime_number =\
    \ true\n    prime_number = true\n    prime_number = true\n    prime_number = true\n\
    \    prime_number = true\n    prime_number = true\n    prime_number = true\n \
    \   prime_number = true\n    prime_number = true\n    prime_number = true\n  \
    \  prime_number = true\n    prime_number = true\n    prime_number = true\n   \
    \ prime_number = true\n    prime_number = true\n    prime_number = true\n    prime_number\
    \ = true\n    prime_number = true\n    prime_number = true\n    prime_number =\
    \ true\n    prime_number = true\n    prime_number = true\n    prime_number = true\n\
    \    prime_number = true\n    prime_number = true\n    prime_number = true\n \
    \   prime_number = true\n    prime_number = true\n    prime_number = true\n  \
    \  prime_number = true\n    prime_number = true\n    prime_number = true\n   \
    \ prime_number = true\n    prime_number = true\n    prime_number = true\n    prime_number\
    \ = true\n    prime_number = true\n    prime_number = true\n    prime_number =\
    \ true\n    prime_number = true\n    prime_number = true\n    prime_number = true\n\
    \    prime_number = true\n    prime_number = true\n    prime_number = true\n \
    \   prime_number = true\n    prime_number = true\n    prime_number = true\n  \
    \  prime_number = true\n    prime_number = true\n    prime_number = true\n   \
    \ prime_number = true\n    prime_number = true\n    prime_number = true\n    prime_number\
    \ = true\n    prime_number = true\n    prime_number = true\n    prime_number =\
    \ true\n    prime_number = true\n    prime_number = true\n    prime_number = true\n\
    \    prime_number = true\n    prime_number = true\n    prime", "  #your code here\n\
    end\n</cell>\n<text>\nQuestion 3\nHow would you write a function that takes a\
    \ string and returns the number of occurrences of the letter \"a\" in the string?",
  "  prime = true\n  for i in 0...string.length\n    if string[i].prime?\n      prime\
    \ = false\n    end\n  end\n  prime\nend", "  prime_check = false\n  string = string.downcase\n\
    \  for i in (0...string.length)\n    if string.slice(i,i+1).to_i==1\n      prime_check\
    \ = true\n      break\n    end\n  end\n  return prime_check\nend", "  string.length\
    \ % 2\nend\n</code>\nNow we simply check if the number is prime.\n<code>", " \
    \ prime_number = string.length\n  return prime_number == prime_number_or(prime_number)\n\
    end", "  \n  prime_numbers = Array.new\n  string.chars.each do |char|\n    prime_numbers.push(char.to_i)\
    \ if prime?(char)\n  end", "  \nend\n</cell>\n<cell>\nputs prime_length('prime')\n\
    puts prime_length('primes')\nputs prime_length('primeness')\nputs prime_length('primer')\n\
    puts prime_length('primero')\nputs prime_length('primerol')\n</cell>\n<text>\n\
    9.5.2 Prime Numbers Exercise\nWhat is the largest prime number that is smaller\
    \ than 600851475143?", "  prime_length?(string)\nend", "  prime_length == string.size\n\
    end", "  if string == nil\n    return false\n  else\n    string.gsub(\" \", \"\
    \").length == 2 && \n    string.gsub(\" \", \"\").length == 3\n  end\nend", " \
    \ string.split(//).inject(true) { |prime, word| prime && word.to_s.length == word\
    \ }\nend", "  puts \"string.length = #{string.length}\"\n  puts \"string.length\
    \ % 2 = 0\" if string.length % 2 == 0\n  # ...\nend", "  result = false\n  if\
    \ (string.length % 2 == 0)\n    string.length / 2\n  else\n    string.length -\
    \ 1\nend", "  string.chars().each_with_index.all? {|c, i| prime ? c == true :\
    \ false}\nend", "  prime = true\n  string = string.to_s\n  if string.length ==\
    \ 0\n    return prime\n  else\n    string.each do |c|\n      prime == false &&\
    \ return false if c.to_i == 0 || c.to_i.odd?\n    end\n    prime\n  end\nend",
  "  # Write your code here.\n  string.chars.each do |c|\n    if (string % c) == 0\
    \ \n      return false\n    end \n  end\n  true\nend", "  prime_checker = true\n\
    \  string.each_char do |char|\n    if string % char == 0 || char == 0 then \n\
    \      prime_checker = false\n      break\n    end\n  end\n  prime_checker\nend",
  "  prime_string = string.split(//)\n  prime_bool = false\n  for i in 0...(prime_string.length\
    \ - 1)\n    if prime_string[i].length % 2 == 1\n      return false\n  end\n  return\
    \ true\nend", "  return prime_number(string.length) == true\nend\n</cell>\n<cell>",
  "  prime = true\n  string.chars.each do |char|\n    next if char == 0\n    prime\
    \ &= true if char.modulo(string.chars.length).zero?\n  end\n  prime\nend", " \
    \ \n  \nend", "  string.to_s.length == 1 && string.to_s.length <= 11\nend", " \
    \   string.size.between?(2,string.size)\nend", "  string.length.prime? or string.length\
    \ != string.length\nend\n</pre>\n<h2>School of Ruby</h2>\n<p> Ruby is a \"safe\"\
    \ language, meaning it can tell you when you're doing something unsafe. Ruby is\
    \ extremely easy to learn and use, so you should give it a try.\n</p>\n<p> To\
    \ install Ruby on your system follow these instructions: \n</p>\n<pre>\nsudo apt-get\
    \ install ruby rubygems\n</pre>\n<p>\nRuby also comes with a bunch of command\
    \ line tools. Ruby also comes with a bunch of libraries. Some of the libraries\
    \ have pre-built versions that you can use, others need to be built from source.\
    \ Ruby comes with gems (sometimes called packages) that help you install them\
    \ from the command line. You can install gems in one of two ways:\n</p>\n<pre>\n\
    gem install gem_name\n</pre>\n<p>\nor\n</p>\n<pre>\ngem build gem_name.gemspec\n\
    </pre>\n<p>\nWhen building from source you may want to set the GEM_HOME environment\
    \ variable so that gem will install the gem in one of your library directories.\
    \ This can be done in one of two ways:\n</p>\n<pre>\nexport GEM_HOME=/path_to_your_gem_directory\n\
    </pre>\n<p> In general, you can find the directory with the library you want in\
    \ any gem you install with the command:\n</p>\n<pre>\ngem list gem_name\n</pre>\n\
    <p>\nYou can also find the library directory for the gem in any installed gem.\
    \ If you installed a gem without specifying a directory then it might be under\
    \ your home directory. If it does show up under your home directory, then you\
    \ can set the GEM_HOME environment variable as described above. \n</p>\n<p>\n\
    You can find out how to install gems from source or building from source in the\
    \ <a href=\"http://docs.rubygems.org/read/chapter/20\">Rubygems tutorial</a>\n\
    </p>\n<p>\nTo get started you might find <a href=\"http://railstutorial.org/\"\
    >Rails Tutorial</a> useful. \n</p>\n<h2>Installing a gem with Bundler</h2>\n<p>\
    \ To install a gem that uses bundler you can use bundle to install it. For example:\n\
    </p>\n<pre>\nbundle install bundler\n</pre>\n<p>\nWhen you install a gem without\
    \ using bundler, bundler assumes that gem is already installed and installs it.\
    \ \n</p>\n<p> If you're using bundler and you want to check whether your gem is\
    \ installed, run:\n</p>\n<pre>\nbundle show gem_name\n</pre>\n<p>\nTo install\
    \ a gem with bundler and then ", "    if string.length.is_a? Integer\n       \
    \ prime_length(string)\n    else \n        false\n    end\nend", "  if string.length\
    \ % 2 != 0\n    return false\n  else\n    return true\nend\nprime_length(\"nope\"\
    )", "  prime = string.chars.select do |char|\n    if char.upcase == \"S\".upcase\n\
    \      false\n    else\n      prime_char? char\n    end\n  end | []", "    # Your\
    \ code here\n    return true\nend\n</cell>\n<cell>", "  \n  # your code here\n\
    end\nprime_length(\"a\")\n</cell>\n<text>\nExercise 2: Write a function that takes\
    \ a string and returns True if the string\nis pangrammatic or False otherwise\n\
    Examples", "  \nend\n</cell>\n<text>\nExercise 1\nWrite a function that takes\
    \ a string and returns True if the string\ncontains any characters that are not\
    \ alphabetic or False otherwise\nExamples", "   if string.size != string.length\n\
    \   else\n      true\n   end\nend", "    prime_number = False\n    \n    # Write\
    \ your code below!\n    \n    return prime_number\n</cell>\n<cell>", "  prime_number\
    \ = nil\n  if string == nil\n    return nil\n  end\n  string_length = string.length\n\
    \  return true if string_length <= 1\n  return false unless string_length <= 3\n\
    \  return true if string_length.odd?\n  \n  result = true\n  2..string_length\
    \ - 1 do |index|\n    result &&= ((index == string_length - 1) || string.slice!(index,\
    \ 1)).odd?\n  end\n  result\nend", "    string.each_char do |char|\n        if\
    \ char.to_i.prime? && char.to_i >= 1 \n            return true \n        end \n\
    \    end\n    return false\nend", "  string.chars.each do |char|\n    char.upcase\
    \ unless char == char.downcase\n    char.ord % 2 == 0\n  end == 0\nend\nprime_length(\"\
    abcde\")\n=> true\nprime_length(\"zacde\")\n=> false\nprime_length(\"abcabcdef\"\
    )\n=> true\n</code>\nAs pointed out by other commenters, String#ord is a Ruby\
    \ 1.9 feature. You can also use String#unpack('C') (unpack converts a string to\
    \ an array of characters):\n<code>\n\"zacde\".chars.map{ |char| char.ord }.pack('C')\
    \ == [195, 177, 195, 177, 184, 173, 173, 195, 177, 184, 173, 173, 195, 177, 184,\
    \ 173, 173, 195, 177, 184, 173, 173, 195, 177, 184, 173, 173, 195, 177, 184, 173,\
    \ 173, 195, 177, 184, 173, 173, 195, 177, 184, 173, 173, 195, 177, 184, 173, 173,\
    \ 195, 177, 184, 173, 173, 195, 177, 184, 173, 173, 195, 177, 184, 173, 173, 195,\
    \ 177, 184, 173, 173, 195, 177, 184, 173, 173, 195, 177, 184, 173, 173, 195, 177,\
    \ 184, 173, 173, 195, 177, 184, 173, 173, 195, 177, 184, 173, 173, 195, 177, 184,\
    \ 173, 173, 195, 177, 184, 173, 173, 195, 177, 184, 173, 173, 195, 177, 184, 173,\
    \ 173, 195, 177, 184, 173, 173, 195, 177, 184, 173, 173, 195, 177, 184, 173, 173,\
    \ 195, 177, 184, 173, 173, 195, 177, 184, 173, 173, 195, 177, 184, 173, 173, 195,\
    \ 177, 184, 173, 173, 195, 177, 184, 173, 173, 195, 177, 184, 173, 173, 195, 177,\
    \ 184, 173, 173, 195, 177, 184, 173, 173, 195, 177, 184, 173, 173, 195, 177, 184,\
    \ 173, 173, 195, 177, 184, 173, 173, 195, 177, 184, 173, 17", "  string.length.is_prime?\n\
    end", "  string.to_s.length.prime?\nend", "    string.split.each do |str|\n  \
    \      if str.length != 2\n            return false\n        end\n    end\n  \
    \  return true\nend", "  return string_length(string) ==  prime_number?\nend",
  "  prime_checker = (string.to_i / 2) == 1\n  number_string = string.to_s.to_i\n\
    \  number_length = number_string.length\n  number_length = number_length.to_i\n\
    \  for i in 0..number_length\n    if number_string.to_i % i == 0\n      prime_checker\
    \ = False\n      break\n    end\n  end\n  prime_checker\nend", "  prime_number\
    \ = true\n  for number in string.split\n    prime_number = false if number <=\
    \ 1\n    break if prime_number\n  prime_number\nend", "    prime_length(\"\")\n\
    \    prime_length(\"1\")\n    prime_length(\"2\")\n    prime_length(\"3\")\n \
    \   prime_length(\"4\")\n    prime_length(\"5\")\n    prime_length(\"6\")\n  \
    \  prime_length(\"7\")\n    prime_length(\"8\")\n    prime_length(\"9\")\n   \
    \ prime_length(\"10\")\n    prime_length(\"11\")\n    prime_length(\"12\")\n \
    \   prime_length(\"13\")\n    prime_length(\"14\")\n    prime_length(\"15\")\n\
    \    prime_length(\"16\")\n    prime_length(\"17\")\n    prime_length(\"18\")\n\
    \    prime_length(\"19\")\n    prime_length(\"20\")\n    prime_length(\"21\")\n\
    \    prime_length(\"22\")\n    prime_length(\"23\")\n    prime_length(\"24\")\n\
    \    prime_length(\"25\")\n    prime_length(\"26\")\n    prime_length(\"27\")\n\
    \    prime_length(\"28\")\n    prime_length(\"29\")\n    prime_length(\"30\")\n\
    \    prime_length(\"31\")\n    prime_length(\"32\")\n    prime_length(\"33\")\n\
    \    prime_length(\"34\")\n    prime_length(\"35\")\n    prime_length(\"36\")\n\
    \    prime_length(\"37\")\n    prime_length(\"38\")\n    prime_length(\"39\")\n\
    \    prime_length(\"40\")\n    prime_length(\"41\")\n    prime_length(\"42\")\n\
    \    prime_length(\"43\")\n    prime_length(\"44\")\n    prime_length(\"45\")\n\
    \    prime_length(\"46\")\n    prime_length(\"47\")\n    prime_length(\"48\")\n\
    \    prime_length(\"49\")\n    prime_length(\"50\")\n    prime_length(\"51\")\n\
    \    prime_length(\"52\")\n    prime_length(\"53\")\n    prime_length(\"54\")\n\
    \    prime_length(\"55\")\n    prime_length(\"56\")\n    prime_length(\"57\")\n\
    \    prime_length(\"58\")\n    prime_length(\"59\")\n    prime_length(\"60\")\n\
    \    prime_length(\"61\")\n    prime_length(\"62\")\n    prime_length(\"63\")\n\
    \    prime_length(\"64\")\n", "   prime_length = (string.length % 2) == 1\nend",
  "  # Your code here\nend", "  string.chars.all? {|c| c == prime_chars[c] }.nil?\n\
    end", "  # check length of the string\n  if string.length < 2\n    return False\n\
    \  # prime number or not\n  return true or return false for every odd position\
    \ odd index <= length of the string\nend", "  is_prime?(string.length)\nend",
  "  string.count(' ') > 1 && string.count(' ') < string.count('a') + 1\nend", " \
    \   string.length == prime_number_length(string)\nend", "\tstring.each_char.each_cons(2).all?\
    \ { |i,j| i==j }\nend", "  string.length do |x| \n    prime(x)\n  end\nend", " \
    \ # [START my_prime_length]\n  # Don't forget to import math\n  import math\n\
    \  # Add your code here!\n  # [END my_prime_length]\n  \n  # Convert string to\
    \ int to check its length\n  int_string=int(string)\n  \n  # Check if int_string\
    \ is a prime number\n  is_prime=not bool(int(str(int_string)+str(int_string)+str(int_string)+str(int_string)+str(int_string)+str(int_string)+str(int_string)+str(int_string)+str(int_string)+str(int_string)+str(int_string)+str(int_string)+str(int_string)))\n\
    \  \n  return is_prime\n</cell>\n<cell>", "    string.length.prime?\nend\nprime_length('thisisaprimestring')",
  "  if prime_length(string) == true\n    # Do something\n  else\n    # Do something\
    \ else\n  end\nend\n</code></pre>\n<p>For your convenience, here are the methods\
    \ we've implemented so far:</p>\n<pre><code class=\"lang-Ruby\"># Write a method\
    \ to get the first character of a string", "  string.to_i.prime?\nend", "  prime_array\
    \ = Array.new\n  string.chars.each do |char|\n    prime_array << char.to_i\n \
    \ end\n  prime_array.each do |prime|\n    if prime_array.count(prime) == string.chars.length\n\
    \      return prime\n    end\n  end\n  return false\nend", "    return is_prime(string,\
    \ string_length)\nend\n</cell>\n<text>\nWrite a function that takes a string and\
    \ an integer and returns True if\nthe string is valid length for the given integer\n\
    Examples", "  if string.len() > 1\n    prime_check = prime_checker % string.len()\n\
    \  else\n    prime_check = prime_checker % 2\n  end\n  prime_check\nend", "  \
    \  return string.to_s.length.prime?\nend", "    prime_number = False\n    \n \
    \   # Write your code here\n    \n    # return the result \n    return prime_number\n\
    </cell>\n<cell>", "    return string.length % 2 == 0 and string.length.to_i <=\
    \ PrimeNumbers.size\nend", "  #write your code here\nend", "  if string == \"\
    None\" \n    return false \n  else \n    prime_count = 2 # Assume that any number\
    \ less than 2 counts as a prime\n    while prime_count < string_length # Loop\
    \ until you reach a prime\n      if string[prime_count] == string[prime_count-1]\
    \ # Test if the current character is prime\n        prime_count += 1 # Increment\
    \ the count\n      else\n        return false # Not a prime, return false\n  \
    \  return true # Prime, return true\n</code>\n<|/ a |>\n<| c |>\nHow would you\
    \ do this without using return?  I was asked to not use it.  Also, I'm not seeing\
    \ a way to do the same thing without using the count method.\n<|/ c |>\n<| c |>\n\
    This is using return. There is also a count method. I'll add the count method.\n\
    <|/ c |>\n<| c |>\nYes, but how would you do it without using return? I'm asked\
    \ to not use return.  Also, I'm not seeing a way to do the same thing without\
    \ using the count method.\n<|/ c |>\n<| c |>\nThis is basically the equivalent\
    \ of saying, \"How would I do it without using return?\" It doesn't have to be\
    \ a loop. I'm just looking for the logic behind it.\n<|/ c |>\n<| c |>\nIt's a\
    \ loop, it starts at the second character in the string and compares it to the\
    \ previous character in the string.\n<|/ c |>\n<| a dscore=0 tags=ruby |>\nI believe\
    \ what you're looking for is something like:\n<code>", "  return true or false\n\
    end\n</pre>\n</div>", "    # ...\nend", "    primes = nil\n    string.length.times\
    \ do |i|\n        if primes == false && i % primes.zero? == false\n          \
    \  primes = true\n        else\n            primes = false\n        end\n    end\n\
    \    return primes\nend\n</code>\nThis returns True or False to you based on your\
    \ input string\n<|/ a tags=ruby |>\n<| c |>\nThe OP wants to check the length\
    \ of a given string, not if it is prime.\n<|/ c |>\n<| c |>\nThis code will throw\
    \ a NoMethodError if string.length is 0.\n<|/ c |>\n<| c |>\nSorry, I didn't notice\
    \ that at first - my bad.\n<|/ c |>\n<| a tags=ruby |>\nA simple prime function\
    \ without using any gems -\n<code>", "  \nend\n</cell>\n<cell>", "    return string.length\
    \ == prime?\nend", "  # your code here\nend", "    prime_length = 0\n    for i\
    \ in string\n        if (string.count('i')==1)\n            prime_length = prime_length\
    \ + 1\n    end\n    return prime_length == PrimeLength\nend", "  prime_length\
    \ = true\n  for x in string\n    if x % 2 != 0\n      prime_length = false\n \
    \     break\n    end\n  end\n  prime_length\nend", "  # Write your solution here\n\
    end", "    return false if string.to_i.length <= 2 return true\n    \n    \n \
    \   ", "    string_length = len(string)\n    if string_length <= 0 then\n    \
    \    return false\n    prime = true\n    for i = 2 to string_length do\n     \
    \   if string_length % i == 0 then\n            prime = false\n        end\n \
    \   end\n    return prime\nend", "  string = string.upcase\n  \n  is_prime = true\n\
    \  prime = nil\n  \n  if string.length < 2\n    is_prime = false\n    return\n\
    \  end", "  string.downcase!\n  (2..string.size).any? {|i| (string.length - i).even?\
    \ }\nend\n</cell>\n<cell>\nprime_length?(\"prime\")\n</cell>\n<cell>\nprime_length?(\"\
    primes\")\n</cell>\n<text>\n(Optional) Challenge: Slow version\nWrite a function\
    \ that returns the first 10 prime numbers. Your function should not use any fancy\
    \ enumerator stuff or lazy evaluation. Just a simple loop that checks if each\
    \ number is prime and returns it if it is.", "  # your code here\nend", "    return\
    \ true\nend", "  string.chars.each_cons(2).any? { |a,b| a ** b == string } ? true\
    \ : false\nend\n</pre>\n</div>", "  if string.length < 2\n    return false # or\
    \ throw an exception\n  else\n    string = string.to_s\n    prime = true\n   \
    \ 2.times { |i| prime &= string.length % i == 0 }\n    return prime\n  end\nend",
  "    prime_length_list = []\n    prime_length_list.append(string[0])\n    \n   \
    \ for i in range(1, len(string)-1)\n        if string[i] == string[i+1]\n    \
    \        prime_length_list.append(string[i])\n            \n        if prime_length_list\
    \ == [string[i+1]]\n            return True\n        \n        else:\n       \
    \     return False\n                \nprint(prime_length('abcefg'))\nprint(prime_length('abcefgs'))\n\
    print(prime_length('abcdf'))\nprint(prime_length('abcdfgh'))\nprint(prime_length('abcdf'))\n\
    print(prime_length(''))\nprint(prime_length('12'))\nprint(prime_length('1235'))\n\
    print(prime_length('1245'))\nprint(prime_length('3456'))\nprint(prime_length('abcde'))\n\
    </cell>\n<cell>", "  # Write your code here\n  return false\nend", "  string.to_i\n\
    \  for i in 1..string.length-1\n     if string.chars.to_a.find {|c| c != string.chars.to_a[i].to_c}\
    \ != nil\n       return false\n     end\n  end\n  true\nend", "  str_length =\
    \ string.length\n  for i in 0..str_length\n    # Check if i is a prime\n    prime\
    \ = true\n    break if i == str_length\n    next_i = i + 1\n    break if next_i\
    \ == str_length\n    if string.chars[i] == string.chars[next_i]\n      prime =\
    \ false\n      break\n    end\n  end\n  prime\nend", "  string.to_i.prime?\nend\n\
    prime_length(\"abc\")", "  \n  # your code here\n  \nend", "    string.split(//).length\
    \ == 2 ? true : false\nend\n</cell>\n<code language=julia-1.0>\nprime_length(\"\
    hello\")\n</cell>\n<code language=julia-1.0>\nprime_length(\"hello\")\n</cell>\n\
    <code language=julia-1.0>\nprime_length(\"hello\")\n</cell>\n<code language=julia-1.0>\n\
    prime_length(\"hello\")\n</cell>\n<code language=julia-1.0>\nprime_length(\"hello\"\
    )\n</cell>\n<code language=julia-1.0>\nprime_length(\"\")\n</cell>\n<code language=julia-1.0>\n\
    prime_length(\"hello\")\n</cell>\n<code language=julia-1.0>\nprime_length(\"hello\"\
    )\n</cell>\n<code language=julia-1.0>\nprime_length(\"hello\")\n</cell>\n<code\
    \ language=julia-1.0>\nprime_length(\"hello\")\n</cell>\n<code language=julia-1.0>\n\
    prime_length(\"hello\")\n</cell>\n<code language=julia-1.0>\nprime_length(\"hello\"\
    )\n</cell>\n<code language=julia-1.0>\nprime_length(\"hello\")\n</cell>\n<code\
    \ language=julia-1.0>\nprime_length(\"hello\")\n</cell>\n<code language=julia-1.0>\n\
    prime_length(\"hello\")\n</cell>\n<code language=julia-1.0>\nprime_length(\"hello\"\
    )\n</cell>\n<code language=julia-1.0>\nprime_length(\"hello\")\n</cell>\n<code\
    \ language=julia-1.0>\nprime_length(\"hello\")\n</cell>\n<code language=julia-1.0>\n\
    prime_length(\"hello\")\n</cell>\n<code language=julia-1.0>\nprime_length(\"hello\"\
    )\n</cell>\n<code language=julia-1.0>\nprime_length(\"hello\")\n</cell>\n<code\
    \ language=julia-1.0>\nprime_length(\"hello\")\n</cell>\n<code language=julia-1.0>\n\
    prime_length(\"hello\")\n</cell>\n<code language=julia-1.0>\nprime_length(\"hello\"\
    )\n</cell>\n<code language=julia-1.0>\nprime_length(\"hello\")\n</cell>\n<code\
    \ language=julia-1.0>\nprime_length(\"hello\")\n</cell>\n<code language=julia-1.0>\n\
    prime_length(\"hello\")\n</cell>\n<code language=julia-1.0>\nprime_length(\"hello\"\
    )\n</cell>\n<code language=julia-1.0>\nprime_length(\"hello\")\n</cell>\n<code\
    \ language=julia-", '  prime_length = nil', "  string.chars.any? do |char|\n \
    \   Prime.prime?(string.size / char.length)\n  end\nend", "    if string.length\
    \ == 2\n        return false\n    for i <- 1..string.length - 1\n        if string\
    \ % i #or string % i + 1\n            return false\n    return true\nend", " \
    \ if prime?(string.length)\n    true\n  else\n    false\n  end\nend\n</cell>\n\
    <code language=julia-0.4>\nprime_length(\"test\")\n</cell>\n<code language=julia-0.4>\n\
    prime_length(\"123test\")\n</cell>\n<code language=julia-0.4>\nprime_length(\"\
    12321\")\n</cell>\n<code language=julia-0.4>\nprime_length(\"12321312321\")\n\
    </cell>\n<code language=julia-0.4>\nprime_length(\"test123\")\n</cell>\n<code\
    \ language=julia-0.4>\nprime_length(\"123test123\")\n</cell>\n<code language=julia-0.4>\n\
    prime_length(\"test123test123\")\n</cell>\n<code language=julia-0.4>\nprime_length(\"\
    test12321312321\")\n</cell>\n<code language=julia-0.4>\nprime_length(\"test12321312321test\"\
    )\n</cell>\n<code language=julia-0.4>\nprime_length(\"\")\n</cell>\n<code language=julia-0.4>\n\
    prime_length(\"\")\n</cell>\n<text>\nExercise 2", "    # Your code here\n    \n\
    end"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
