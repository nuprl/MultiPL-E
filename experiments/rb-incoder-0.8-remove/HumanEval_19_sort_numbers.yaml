name: HumanEval_19_sort_numbers
language: rb
prompt: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
  # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
  \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
  \ largest\ndef sort_numbers(numbers)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n\
  \    candidate = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\
  \"))\n    assert_equal(\"three\", candidate.call(\"three\"))\n    assert_equal(\"\
  three five nine\", candidate.call(\"three five nine\"))\n    assert_equal(\"zero\
  \ four five seven eight nine\", candidate.call(\"five zero four seven nine eight\"\
  ))\n    assert_equal(\"zero one two three four five six\", candidate.call(\"six\
  \ five four three two one zero\"))\n  end\nend\n"
completions: ["    numbers = numbers.split(' ').map { |n| n =~ /\\d+/ ? n.to_i : n\
    \ }\n    numbers.sort!\n    numbers.map!{ |n| 'zero' if (n < 0) || (n >= 10) ?\
    \ \"#{n}\" : n }.join(\" \")\nend\n</code>\nExample Usage:\n<code>\nsort_numbers(\"\
    nine six four seven nine six seven six nine four seven seven four nine seven eight\
    \ five nine seven six nine six seven six six five\")", '  numbers.split(" ").sort!',
  '  # TODO: Write the sorting algorithm', "  numbers.split(\" \").sort_by { |n| n.to_i\
    \ }.join\nend\n</code>\n<|/ a tags=ruby-on-rails,ruby |>\n<| a dscore=1 |>\n<code>",
  "  numbers = numbers.split(' ')\n  numbers.map! {|number| number.to_i}\n  numbers\
    \ = numbers.sort_by {|n| n}\n  numbers.join(' ')\nend\n</code>\n<|/ a tags=ruby,sorting\
    \ |>\n<| a |>\nUse sort_by method:\n<code>\narray = [4, 6, 2, 5, 3, 1]\narray.sort_by\
    \ {|i| i}\n</code>\n<|/ a dscore=4 tags=ruby,sorting |>\n<| c |>\nNice! Just to\
    \ add to this, in case you want to sort a collection of things (like `[4, 6, 2,\
    \ 5, 3, 1]`), you can simply pass `&:sort` as the block argument. Eg. `array.sort_by(&:sort)`\n\
    <|/ c |>\n<| a dscore=3 |>\nI like's answer, but I think it is more complicated\
    \ than necessary (given that sort_by is part of the language).\n<code>", "  numbers\
    \ = numbers.split(' ')\n  numbers.map! do |num|\n    unless num.to_i < 10 && num.to_i\
    \ >= 0\n      puts \"Invalid number: '#{num}'\"\n      exit\n    end\n    num\n\
    \  end\n  numbers.sort!\n  numbers.join(' ')\nend\n</code>\nIf you don't know\
    \ about .map and .sort, I highly recommend you have a look at Ruby's built-in\
    \ Array methods (such as .map, .sort, and .join). The method above is basically\
    \ a fancy way of writing what I've done above.\n<|/ a dscore=1 tags=ruby,sorting,string\
    \ |>\n<| c |>\nThanks a lot for your help and advise! I'm still learning Ruby\
    \ so I appreciate it! I implemented your code and it works perfectly. Thank you!\n\
    <|/ c |>\n<| a dscore=0 |>\nThe best way is to put all numbers in an array, then\
    \ sort this array\n<code>\nnumbers = [2,5,4,6,4,9,5,8,7,4,3]\nnumbers.sort!\n\
    </code>\nand to print this array you can use\n<code>\nnumbers.each do |n|\n  puts\
    \ n\nend\n</code>\n<|/ a tags=ruby,sorting,string |>\n<| a dscore=0 |>\nSince\
    \ you say you \"have to do it without using an array\", here is one way:\n<code>\n\
    puts str.split('').sort.join\n</code>\nExplanation: str.split('') creates an array\
    \ of characters in your string. Then the sort method sorts those letters in order.\
    \ The join method then puts all the sorted letters back into one string.\n<|/\
    \ a tags=ruby,sorting,string |>\n<| a dscore=0 tags=ruby,sorting,string |>\nIn\
    \ case you really want to do it without arrays, here's a way to do it with a while\
    \ loop:\n<code>", "  numbers.split(\" \").sort!.map{|s| s.to_i}.join(\" \")\n\
    end\n</code>\n<|/ a tags=ruby |>\n<| c |>\nRuby has some really cool methods that\
    \ you can use for this kind of thing. I'm going to update my answer to show how\
    \ I might do it.\n<|/ c |>\n<| c |>\nYou forgot the `!` in your second code snippet.\n\
    <|/ c |>\n<| c |>\nYeah... I knew I was forgetting something.\n<|/ c |>\n<| c\
    \ |>\nIn Ruby 1.9, `sort` sorts the array in-place and returns `nil`.  So it would\
    \ be `numbers = numbers.split(\" \").sort.map(&:to_i)` instead.\n<|/ c |>\n<|\
    \ c |>\nYep. That was a typo on my part.\n<|/ c |>\n<| a tags=ruby |>\nThis doesn't\
    \ require regex:\n<code>", end, "  numbers.split(' ').sort.join(' ')\nend\n</code>\n\
    <|/ a tags=ruby,sorting |>\n<| a dscore=2 tags=ruby,sorting |>\nHere is my approach:\n\
    <code>", "\tnumbers = numbers.split\n\tnumbers.sort!\n\tnumbers.map! { |x| x.to_i\
    \ }\n\tnumbers.join(' ')\nend", "    # Convert array of strings to array of integers\n\
    \    numbers.map! { |n| n.to_i }", "  numbers.to_s.split(' ').sort.join(' ')\n\
    end", end, "  numbers.split(\" \").sort!\n  puts numbers.join(\" \")\nend", " \
    \   numbers = numbers.split(' ') #Split string into an array of words\n    numbers.sort!\
    \                   #Sort the array\n    numbers.reverse!               #Sort\
    \ the array from largest to smallest\n    numbers.join(' ')               #Join\
    \ the array back into a string\nend", "  numbers.split(' ').sort_by {|i| i.to_i}.reverse.join('\
    \ ')\nend\n</code>\n<|/ a tags=ruby-on-rails-3.2,ruby-on-rails,ruby dscore=2 |>\n\
    <| a dscore=1 |>\n<code>", "  numbers.split(' ').sort.join(' ')\nend", "  numbers.split('\
    \ ').each do |number|\n    if number[0,1] != '0' || number != 'zero'\n      puts\
    \ \"Invalid choice\"\n      return nil\n    end\n  end\n  numbers = numbers.split('\
    \ ').sort\n  numbers.join(' ')\nend", "  numbers = numbers.split(//)\n  return\
    \ numbers.sort {|a,b| a.to_i < b.to_i ? -1 : 1} + numbers.sort{|a,b| a.to_i >\
    \ b.to_i ? -1 : 1} + numbers[0..-2].sort.reverse\nend", "  numbers.split(' ').sort.join('\
    \ ')\nend", "    sorted_numbers = \"\"\n    numbers = numbers.split(\" \")\n \
    \   if numbers.size == 0\n        return \"Empty list\"\n    if numbers.size >\
    \ 9\n        return \"Too many numbers\"\n    for number in numbers\n        if\
    \ number == \"zero\"\n            sorted_numbers += \"0\"\n        elif number\
    \ == \"one\"\n            sorted_numbers += \"1\"\n        elif number == \"two\"\
    \n            sorted_numbers += \"2\"\n        elif number == \"three\"\n    \
    \        sorted_numbers += \"3\"\n        elif number == \"four\"\n          \
    \  sorted_numbers += \"4\"\n        elif number == \"five\"\n            sorted_numbers\
    \ += \"5\"\n        elif number == \"six\"\n            sorted_numbers += \"6\"\
    \n        elif number == \"seven\"\n            sorted_numbers += \"7\"\n    \
    \    elif number == \"eight\"\n            sorted_numbers += \"8\"\n        elif\
    \ number == \"nine\"\n            sorted_numbers += \"9\"\n        end\n    end\n\
    \    return sorted_numbers\nend\n</code>\n<|/ a tags=ruby |>\n<| c |>\nThank you,\
    \ that is a great idea. I'll have to think about how that works out. Seems logical\
    \ though!\n<|/ c |>\n<| c |>\nYour code is correct and it helped me to understand\
    \ the problem and solve it. However, your solution is more elegant than mine.\
    \  I added my solution below just for reference. Thank you again.\n<|/ c |>\n\
    <| c |>\nGood point. My solution does use two passes, which is more efficient\
    \ for large lists than using recursion. The downside of recursion is that it's\
    \ not very readable; your solution uses the same principle, but is readable and\
    \ easy to understand.\n<|/ c |>\n<| c |>\nI added a solution using the same principle,\
    \ but without recursion, which is more efficient for larger lists.\n<|/ c |>\n\
    <| c |>\nI actually like the solution with a recursive function better (though\
    \ I should probably have said that I don't think it's very readable). It's definitely\
    \ more efficient.\n<|/ c |>\n<| a dscore=1 |>\nI figured out a solution using\
    \ recursion, which feels nice to me (even though it doesn't use recursion):\n\
    <code>", "end\n</pre>\n<h2>\n<a id=\"upgrading-from-2-3-to-2-4\" href=\"#upgrading-from-2-3-to-2-4\"\
    \ class=\"anchor\" href=\"#upgrading-from-2-3-to-2-4\" aria-hidden=\"true\"><span\
    \ aria-hidden=\"true\" class=\"octicon octicon-link\"></span></a>Upgrading from\
    \ 2.3.0 to 2.4.0</h2>\n<p>Updating guides now follow the same process as adding\
    \ an app to a team project. Most apps follow the pattern of adding a single <code>gem</code>\
    \ line to the <code>Gemfile</code>. This new app structure will support multiple\
    \ <code>Rake</code> and <code>Grunt</code> tasks as well as multiple <code>node_modules</code>\
    \ dependencies (both direct and transitive), as well as multiple <code>package.json</code>\
    \ and <code>bower.json</code> files and other <code>bower_*</code> and <code>node_*</code>\
    \ directories. A new <code>package-lock.json</code> file will be generated for\
    \ new apps following the same pattern. The <code>Gruntfile.js</code> file will\
    \ require changes for new tasks.</p>\n<h3>\n<a id=\"nodejs-1-2-1-1-1-1-1-1-1-1\"\
    \ href=\"#nodejs-1-2-1-1-1-1-1-1-1-1\" class=\"anchor\" href=\"#nodejs-1-2-1-1-1-1-1-1-1-1-1\"\
    \ aria-hidden=\"true\"><span aria-hidden=\"true\" class=\"octicon octicon-link\"\
    ></span></a>Node.js 1.2.1\n</h3>\n<pre class=\"highlight highlight-source-json\"\
    ><code><span class=\"p\">[</span><span class=\"w\">\n  </span><span class=\"s2\"\
    >\"scripts\"</span><span class=\"w\">\n</span><span class=\"p\">]</span><span\
    \ class=\"w\">\n</span></code></pre>\n<h3>\n<a id=\"nodejs-1-2-1-1-1-1-1-1-1-1\"\
    \ href=\"#nodejs-1-2-1-1-1-1-1-1-1-1-1\" class=\"anchor\" href=\"#nodejs-1-2-1-1-1-1-1-1-1-1-1\"\
    \ aria-hidden=\"true\"><span aria-hidden=\"true\" class=\"octicon octicon-link\"\
    ></span></a>Node.js 1.2.1\n</h3>\n<pre class=\"highlight highlight-source-json\"\
    ><code><span class=\"p\">{</span><span class=\"w\">\n  </span><span class=\"nt\"\
    >\"name\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"\
    s2\">\"my_app\"</span><span class=\"p\">,</span><span class=\"w\">\n  </span><span\
    \ class=\"nt\">\"version\"</span><span class=\"p\">:</span><span class=\"w\">\
    \ </span><span class=\"s2\">\"0.1.0\"</span><span class=\"p\">,</span><span class=\"\
    w\">\n  </span><span class=\"nt\">\"private\"</span><span class=\"p\">:</span><span\
    \ class=\"w\"> </span><span class=\"kc\">false</span><span class=\"p\">,</span><span\
    \ class=\"w\">\n  </span><span class=\"nt\">\"scripts\"</span><span class=\"p\"\
    >:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\"\
    >\n    </span><span class=\"s2\">\"bin/my_app\"</span><span class=\"p\">,</span><span\
    \ class=\"w\">\n    </span><span class=\"s2\">\"node_modules/brunch/bin/brunch\"\
    </span><span class=\"w\">\n  </span><span class=\"p\">]</span><span class=\"w\"\
    >\n</span><span class=\"p\">}</span><span class=\"w", "  numbers.split(' ').sort.join('\
    \ ')\nend", "  numbers.split(' ').sort.join(' ')\nend", "  sorted_numbers = numbers[1..-1].sort.join\n\
    end\n</code>\n<|/ a tags=ruby,sorting |>\n<| c |>\nWhile this code snippet may\
    \ solve the question, [including an explanation](//meta.stackexchange.com/questions/114762/explaining-entirely-code-based-answers)\
    \ really helps to improve the quality of your post. Remember that you are answering\
    \ the question for readers in the future, and those people might not know the\
    \ reasons for your code suggestion. Please also try not to crowd your code with\
    \ explanatory comments, this reduces the readability of both the code and the\
    \ explanations!\n<|/ c |>\n<| c |>\nThank you so much for this answer. Very helpful\
    \ and well explained!\n<|/ c |>\n<| a dscore=1 |>\nYou can do:\n<code>\nnumbers\
    \ = 'one two three four five six seven eight nine'.split.map(&:to_i)", "  sorted_numbers\
    \ = numbers.sort\nend", "  numbers.split(//).sort_by { |n| n.to_i }.join\nend",
  "  numbers = numbers.split(\" \")\n  numbers = numbers.sort\n  numbers.each {|n|\
    \ puts n}\nend", "    numbers.split(\" \").sort\nend", "  numbers.split(\" \"\
    ).sort!.join \" \"\nend", "  raise ArgumentError, 'invalid input, not a string'\
    \ if numbers.empty?\n  numbers = numbers.split(/\\s+/)\n  if numbers.all? { |n|\
    \ n == 0 }\n    numbers = [0]\n  elsif numbers.all? { |n| n =~ /^[01]$/ }\n  \
    \  numbers = [0, 1, 2]\n  elsif numbers.all? { |n| n =~ /^[23]$/ }\n    numbers\
    \ = [2, 3]\n  elsif numbers.all? { |n| n =~ /^[4-9]$/ }\n    numbers = [3, 4,\
    \ 5, 6, 7, 8, 9]\n  elsif numbers.all? { |n| n =~ /^[023]$/i }\n    numbers =\
    \ [0, 2, 4, 6, 8]\n  elsif numbers.all? { |n| n =~ /^[04-9]$/i }\n    numbers\
    \ = [1, 3, 5, 7, 9]\n  end\n  numbers.sort\n  numbers.join(' ')\nend", "  numbers.split('\
    \ ').sort.join(' ')\nend", "  if numbers.nil?\n    raise \"Expected a number,\
    \ got nil\"\n  end\n  numbers = numbers.to_s\n  if numbers.empty?\n    return\
    \ numbers\n  end\n  numbers.gsub!(/zero/, '0')\n  numbers.gsub!(/one/, '1')\n\
    \  numbers.gsub!(/two/, '2')\n  numbers.gsub!(/three/, '3')\n  numbers.gsub!(/four/,\
    \ '4')\n  numbers.gsub!(/five/, '5')\n  numbers.gsub!(/six/, '6')\n  numbers.gsub!(/seven/,\
    \ '7')\n  numbers.gsub!(/eight/, '8')\n  numbers.gsub!(/nine/, '9')\n  numbers.gsub!(/-/,\
    \ '')\n  numbers.gsub!(/ /, '').split('').sort.join\nend\n</code>\n<|/ a tags=sorting,ruby,arrays\
    \ |>\n<| a |>\n<code>\nnumbers = sort_numbers(['one', 'three', 'two', 'eight',\
    \ 'six', 'ten', 'five', 'four', 'nine'])", "    numbers.sort!\n    return numbers\n\
    end", "\tnumbers.split(' ').sort.join(' ')\nend\n</cell>\n<code language=julia-1.5>",
  "  # Write your code here.\nend", "  numbers.each_with_index do |n, i|\n    numbers[(i\
    \ + 1) % numbers.size] = n\n  end\n  numbers.join(' ')\nend", "  sorted_numbers\
    \ = numbers.split(\" \").sort_by{|i| i.to_i}.join(\" \")\nend", "  # Return an\
    \ empty string if there are no numbers\n  return '' if numbers.empty?\n  \n  #\
    \ Convert to an array of strings split by whitespace\n  numbers = numbers.split(//)\n\
    \  \n  # Return an array of the numbers in the correct order\n  numbers = numbers.sort.reverse\n\
    \  \n  # Convert the array to a string with whitespace separating the numbers\n\
    \  numbers = numbers.join(\" \")\nend", "  numbers.split(' ').sort.join(' ')\n\
    end", "  numbers = numbers.split(' ') # Split on spaces\n  numbers.each do |n|\n\
    \    if !n.match(/^0\\d+$/) # Make sure it's a number, not another word\n    \
    \  raise ArgumentError, \"Numbers supplied are not valid: #{numbers.inspect}\"\
    \n    end\n  end\n  numbers.sort!\n  numbers.to_s\nend", "  numbers.split(\" \"\
    ).sort!\n  numbers.to_s.upcase\nend", "  numbers = numbers.split(', ')\n  numbers.map!\
    \ { |x| x.to_i }\n  numbers.sort! { |a,b| a <=> b }\n  numbers.join(', ')\nend",
  "  numbers = numbers.split(' ') unless numbers.is_a?(String)\n  numbers.sort!\n\
    \  numbers.join(' ')\nend", "  numbers = numbers.split(' ') if numbers.is_a?(String)\n\
    \  numbers.sort! {|a,b| a <=> b}\n  numbers.join(' ')\nend", "  numbers.split('\
    \ ').sort\nend", "  numbers.split(\", \").map{|x| x.to_i}\nend", "  numbers.split('\
    \ ').sort.join(' ')\nend\n</code>\nSample inputs:\n<code>\nnumbers = sort_numbers('one\
    \ two three four')", "  numbers = numbers.split(' ')\n  numbers.each do |number|\n\
    \    if number == 'zero'\n      numbers.shift\n    else\n      numbers.each do\
    \ |i|\n        if number < i\n          temp = number\n          number = i\n\
    \          i = temp\n        end\n      end\n      numbers.shift if number !=\
    \ 'zero'\n    end\n  end\n  numbers.join(' ')\nend\n</code>\n<|/ a tags=ruby,string\
    \ dscore=0 |>\n<| a tags=ruby,string |>\n<code>", "  numbers = numbers.split(//)\n\
    \  return numbers.sort.join ','\nend", "  numbers = numbers.split.sort\n  numbers.join\n\
    end", "  numbers.split(' ').sort.join(' ')\nend\n</code>\nThen you use it like\
    \ this:\n<code>\nsort_numbers('one twenty three four five six seven eight nine')",
  "    numbers = numbers.split(' ') # Convert to array\n    numbers.sort! # Sort the\
    \ array\n    sorted_numbers = numbers.join(' ') # Join elements of the array back\
    \ into a string\n    return sorted_numbers\nend", "  numbers.sort.join(\",\")\n\
    end", "  numbers.split(' ').map {|n| n.to_i }.sort.join(' ')\nend", "  numbers.split(\"\
    \\n\").each do |num|\n    num = num.split(\"\\n\")\n    num.each { |line| puts\
    \ line if line.length > 0 }\n  end\nend", "  if numbers.empty?\n    return numbers\n\
    \  end", end, "    numbers = numbers.to_s\n    numbers = numbers[1..-2]\n    numbers.chars.sort.join\n\
    end", "    numbers = numbers.split # convert to an array\n    numbers.map! do\
    \ |n| \n      n = n.to_i # convert n to integer\n      n.is_a? Integer ? n : raise\
    \ ArgumentError, \"#{n} must be an Integer.\"\n    end\n    numbers = numbers.sort\
    \ # sort from smallest to largest\n    numbers = numbers.join(\", \")\nend\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nHi Martin, I apologize for the lack of clarity. I'm\
    \ new to Ruby and programming in general. The program is supposed to sort a text\
    \ file of numbers. So the text file has something like \"123 345 678\" and what\
    \ was supposed to happen was it sorted them from smallest to largest so it would\
    \ output \"1, 12, 13, 34, 35, 56, 67, 8\". I'm new to Ruby so I'm not entirely\
    \ sure how to do this.\n<|/ c |>\n<| c |>\n- I added a solution that sorts strings\
    \ and numbers as requested\n<|/ c |>\n<| c |>\nThank you so much, this helps a\
    \ lot.\n<|/ c |>\n<| a tags=sorting,ruby,arrays |>\nYou can use sort_by method\
    \ to sort your array. For example:\n<code>\n[5,3,2,1,4].sort_by { |x| x }", " \
    \ numbers.split(' ').sort.join\nend\n</code>\nThen you can call it like this:\n\
    <code>\nputs sort_numbers('seven eight nine twelve four')", "    # Your code here\n\
    end\n</code>\nAs a bonus, this test will pass too:\n<code>\ndescribe '#sort_numbers'\
    \ do\n    it 'works with valid inputs' do\n        expect(sort_numbers('zero one\
    \ two three four five six seven eight nine').to_s).to eq('one two three four five\
    \ six seven eight nine zero one')\n    end", "  numbers.chars.sort.join\nend",
  end, "  # Split string into array\n  numbers = numbers.split(\" \")", "  # Split\
    \ numbers and convert to an array of integers\n  numbers_array = numbers.split().map\
    \ { |s| s.to_i }\n  # Sort numbers in reverse order using <=>\n  numbers_array.sort!{\
    \ |a, b| b <=> a }\n  # Join numbers with spaces, separated by a single space\n\
    \  numbers_array.join(' ')\nend", "  # your code here\n  numbers.sort\n  return\
    \ numbers\nend\n</code>\n<|/ a tags=ruby,arrays,sorting,algorithm |>\n<| c |>\n\
    What are the advantages of using your method over `sort { |a, b| a.to_i <=> b.to_i\
    \ }` ?\n<|/ c |>\n<| c |>\n`sort { |a, b| a.to_i <=> b.to_i }` doesn't work with\
    \ non-integers (which would raise an exception). It also doesn't support comparing\
    \ strings like `'one' <=> 'two'`.\n<|/ c |>\n<| a dscore=3 |>\nOne liner. \n<code>\n\
    puts \"\\n\".tap { |s| [1,2,3,4,5,6,7,8,9].sort.each { |n| s << n } }\n</code>\n\
    <|/ a tags=ruby,arrays,sorting,algorithm |>\n<| c |>\nVery concise, elegant solution,\
    \ thank you!\n<|/ c |>\n<| a dscore=2 |>\nThis is a Ruby solution:\n<code>\nputs\
    \ [1,2,3,4,5,6,7,8,9].sort.map(&:to_s)\n</code>\n<|/ a tags=ruby,arrays,sorting,algorithm\
    \ |>\n<| c |>\nI like this one. I'm surprised that there's no built-in way to\
    \ do this in Ruby. I'll have to remember that.\n<|/ c |>\n<| c |>\nI actually\
    \ found a more elegant solution, but I'm not sure how it's different from your\
    \ `map(&:to_s)` solution. `map(&:to_s)` feels a bit more intuitive, no? Also,\
    \ I'd argue that `map(&:to_s)` requires less memory than `sort`, but maybe that's\
    \ just a nitpick. :P\n<|/ c |>\n<| c |>\nThe `&:` syntax will actually map the\
    \ block to the elements in the array, thus making the method call `map(&:to_s)`.\
    \ If you just write `map(:to_s)` you'll get a similar result because the `to_s`\
    \ method will just map the argument to itself.\n<|/ c |>\n<| c |>\nRight, I forgot\
    \ about that `&` syntax. Thanks.\n<|/ c |>\n<| a tags=ruby,arrays,sorting,algorithm\
    \ |>\nI see that there are two answers already, but I don't see any mention of\
    \ my original answer. My original answer was basically this:\n<code>\nputs [1,2,3,4,5,6,7,8,9].sort\n",
  "    numbers.gsub!(/[^0-9]+/,'')\n    numbers.to_i\n    numbers.sort.to_s\nend",
  "    # Write your code here\nend", "  numbers.split(\" \").sort_by { |number| number.to_i\
    \ }.join \" \"\nend", "  numbers.split(' ').sort.join(' ')\nend\n</code>\nThe\
    \ second example is similar to the first, but this time the numbers are represented\
    \ as strings in the first place.  Here, I wrote a small method to take numbers,\
    \ a string, and return the numbers as an array of strings ordered from smallest\
    \ to largest:\n<code>", "    numbers = numbers.split(\" \").sort\n    numbers.join(\"\
    \ \")\nend", "  numbers = numbers.split(' ')\n  numbers.sort! { |x, y| x - y }\n\
    \  numbers.join(' ')\nend", "  sorted_numbers = numbers.sort\n  sorted_numbers.reverse!\n\
    \  sorted_numbers.join\nend", "  numbers = numbers.downcase.split(' ')\n  numbers.map!\
    \ { |n| n.to_i }\n  numbers.sort!\n  numbers.join(' ')\nend", "    # Write your\
    \ code here\nend", end, "  numbers = numbers.split(' ') if numbers.is_a?(String)\n\
    \  numbers = numbers.map {|num| num.to_i}\n  numbers.sort!\n  return numbers.join('\
    \ ')\nend", "  numbers.sort.reverse!\nend", "    array = numbers.split(\" \").sort\n\
    \    array.join(\", \")\nend\n</code>\n<|/ a dscore=0 tags=ruby |>\n<| c |>\n\
    What happens if `numbers = \"seven five eight two\"`? Your code does not handle\
    \ this correctly.\n<|/ c |>\n<| c |>\nI did not get your question but i think\
    \ it is not a problem in this case because he is expecting numbers from 0 to 9\n\
    <|/ c |>\n<| c |>\nYes, it is. But your method cannot handle that case. Try `sort_numbers(\"\
    seven five eight two\")`.\n<|/ c |>\n<| a tags=ruby |>\nYou can use sort_by, but\
    \ you need to convert the string into an array:\n<code>\nnumbers = \"one two three\
    \ four five six seven eight nine ten\"\narray = numbers.split(\" \").sort_by(&:to_i)\n\
    array.join(' ')\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis won't work if the numbers\
    \ come in as strings: `numbers = \"one two three four five six seven eight nine\
    \ ten\"`\n<|/ c |>\n<| c |>\nYes it will, my code doesn't convert to an array\
    \ but it does convert it back to a string.\n<|/ c |>\n<| c |>\nThat was my point.\
    \ I had misunderstood what `sort_by` was doing. Your code sorts the array, but\
    \ then converts it back to a string, which was not what the OP wanted.\n<|/ c\
    \ |>\n<| c |>\nSo if someone wants to sort words and this happens then my code\
    \ would also work?\n<|/ c |>\n<| c |>\nYes my code would work for any array\n\
    <|/ c |>\n<| a dscore=0 |>\nThe original answer doesn't work properly if the string\
    \ is empty or has only spaces \" \".\nHere's a solution that can handle all of\
    \ these cases:\n<code>", "  numbers = numbers.split(' ') #Split string on space\n\
    \  numbers.each do |number| #Echo each number as output\n    puts number #Print\
    \ the number\n  end\n  numbers.sort!\n  numbers.each do |number| #Echo each number\
    \ as output\n    puts number #Print the number\n  end\nend", "  numbers.split('\
    \ ').sort!\n  numbers.join(' ')\nend", "  numbers.split(' ').sort!", "  # your\
    \ code is here\nend", "    numbers = numbers.to_s.split(\" \").map(&:to_i)\n \
    \   numbers.sort!\n    numbers.each do |num|\n        puts num.to_s.reverse\n\
    \    end\nend\n</code>\n<|/ a tags=ruby |>\n<| c |>\nI like your use of \"Enumerable#map\"\
    \ here.\n<|/ c |>\n<| a tags=ruby dscore=2 |>\n<code>", "    numbers = numbers.split\
    \ \" \"\n    numbers.sort!\n    numbers = numbers.join \" \"\n    numbers\nend\n\
    </code>\n<|/ a dscore=3 tags=ruby,sorting,arrays |>\n<| a tags=ruby,sorting,arrays\
    \ |>\nThis is similar to Nathan's answer, but it's shorter, probably faster, and\
    \ I like to keep the logic as close to Ruby's as possible. \n<code>", "    arr\
    \ = numbers.split\n    arr.sort { |a, b| a.to_i < b.to_i }\n    arr.join(' ')\n\
    end", "    numbers.sort do |a, b|\n        if b == \"zero\"\n            b = \"\
    0\"\n        elsif b == \"nine\"\n            b = \"9\"\n        else\n      \
    \      b = b.to_i\n        end\n        if a == \"zero\"\n            a = \"0\"\
    \n        elsif a == \"nine\"\n            a = \"9\"\n        else\n         \
    \   a = a.to_i\n        end\n        a <=> b\n    end\nend\n</code>\nTo solve\
    \ the problem at hand, we need a way to figure out when to stop sorting numbers.\
    \ You can't just use break; because that would cause the program to stop iterating\
    \ through the array, which wouldn't be a good thing. Instead, we use an if statement\
    \ to check whether we're sorted.\n<code>", "  numbers.split(/ /).sort! do |a,\
    \ b|\n    case\n      when b == 'zero' then -1\n      when b == 'one' then 0\n\
    \      when b == 'two' then 1\n      when b == 'three' then 2\n      when b ==\
    \ 'four' then 3\n      when b == 'five' then 4\n      when b == 'six' then 5\n\
    \      when b == 'seven' then 6\n      when b == 'eight' then 7\n      when b\
    \ == 'nine' then 8\n    end\n  end\n  numbers.to_s\nend\n</code>\n<|/ a dscore=5\
    \ |>\n<| c |>\nThis looks like a better solution as it doesn't require to convert\
    \ a string to an integer which can be inefficient. Thank you\n<|/ c |>\n<| c |>\n\
    This is a good solution, except for the last line.\n<|/ c |>\n<| c |>\nThis solution\
    \ uses 3 times the memory of 'sort_numbers' solution\n<|/ c |>\n<| c |>\nI see\
    \ you're a new contributor. Welcome to the site!  I thought your comment was going\
    \ to be flagged by others as \"spam\".  I appreciate the info!\n<|/ c |>\n<| a\
    \ dscore=5 tags=ruby,sorting,ruby-on-rails |>\nIf you're looking for something\
    \ that's a bit more readable than some of the other answers, check out the dup\
    \ method on the String class.\n<code>", "  # Your code here\n  numbers = numbers.split(\"\
    \ \").sort\n  numbers.join(\" \")\nend", "  numbers = numbers.to_s\n  numbers.gsub!(',','')\
    \ # remove commas\n  numbers.gsub!(' ','')\n  numbers = numbers.split(//) # split\
    \ on any spaces\n  numbers = numbers.sort_by { |x| x.to_i }\n  numbers.join('\
    \ ') # make one long string\nend\n</code>\nThis has some nice features:", "  numbers\
    \ = numbers.split(' ')\n  numbers.map! { |x| x.to_i }\n  numbers.sort_by!{ |x|\
    \ x }\n  numbers.join\nend", "    numbers = numbers.split(\" \")\n    numbers.sort!",
  "  numbers.split(' ').sort.join(' ')\nend", "    numbers.split(' ').reduce(:+)\n\
    end", "    numbers.split(' ').sort.join(' ')\nend", "  numbers = numbers.to_s.split('\
    \ ') # split up the string into an array of strings\n  sorted_numbers = numbers.sort\n\
    \  numbers = sorted_numbers.join(' ') # join the array into a string again\nend\n\
    </code>\n<|/ a dscore=4 |>\n<| c |>\nWhat about negative integers ?\n<|/ c |>\n\
    <| c |>\nI added a comment in the code to explain why\n<|/ c |>\n<| a dscore=3\
    \ |>\nHere's a more generic approach for anyone that doesn't need negative numbers\
    \ and just wants integers sorted in numerical order:\n<code>", "    numbers.split(\"\
    \ \").sort!\n    return numbers.join(\" \")\nend", "  numbers.to_s.split.each\
    \ do |number|\n    number.to_i\n  end\nend\n</code>\n<|/ a |>\n<| a dscore=2 |>\n\
    <code>", "  # Your code here\nend", "  return numbers.reverse\nend\n</pre>\n<p>An\
    \ example of a function that uses this <code>sort_numbers</code> method:</p>\n\
    <pre class=\"programlisting\">", "  numbers.split(' ').sort!\n  numbers.to_s\n\
    end", "  # Your code here\n  numbers.split(' ').sort!\nend", "  numbers = numbers.split(//)\n\
    \  numbers.sort\n  numbers.join(\" \")\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails\
    \ |>\n<| a dscore=1 |>\n<code>", "  numbers.split(' ').sort_by {|n| n.to_i }.join('\
    \ ')\nend", "  numbers = numbers.split(' ')\n  numbers = numbers.map { |n| n.to_i\
    \ }\n  numbers.sort!\n  numbers.join\nend", "  numbers.split(\" \").sort.join(\"\
    , \")\nend", "  numbers.sort.each do |number|\n    # remove all leading zeroes\n\
    \    number = number.gsub(/^0/, '')\n    # convert to integer\n    number = number.to_i\n\
    \    # convert from string to array of two digits\n    array = (number.to_s.slice('1',\
    \ '9').to_i)\n    break if array[0] != array[1]\n    sorted = sort + array[0]\
    \ + array[1]\n  end\n  sorted\nend", "  numbers.split(' ').sort.join(' ')\nend",
  "  numbers.split(\" \").sort!\n  numbers.strip!\nend", "end\n</code>\n<|/ a dscore=1\
    \ tags=ruby,sorting,arrays,string |>\n<| c |>\nThis works in most cases, but fails\
    \ when `numbers = \"3 5 2 1 9\"`. You should probably use `sort_by` rather than\
    \ `sort`.\n<|/ c |>\n<| c |>\nWhy does `sort_by` work and not `sort`?\n<|/ c |>\n\
    <| c |>\nBecause `sort` is mutating the original array. `sort_by` just returns\
    \ a new array instead of mutating the existing array.\n<|/ c |>\n<| a |>\nA solution\
    \ using sort_by.\n<code>\nnumbers = \"3 5 2 1 9\".split(\" \").map{|s| s.to_i}\n\
    numbers.sort_by {|n| n}.reverse", "    numbers = numbers.downcase.split(\" \"\
    ).collect{ |n| n.to_i }\n    numbers = numbers.sort_by{ |n| -n }\n    return numbers.collect{\
    \ |n| \"%02d\" % n }.join(\" \")\nend\n</code>\nThis solution uses the Array#sort_by\
    \ method to sort the array, then Array#collect, which will convert the array to\
    \ a string, by joining all the numbers with spaces.\nThis solution also takes\
    \ the input from the user in a string, so they don't have to type in the numbers\
    \ like they do with sort.rb, which requires them to use the interactive Ruby console.\n\
    <|/ a tags=ruby,ruby-on-rails,sorting dscore=2 |>\n<| a |>\n<code>", "    numbers\
    \ = numbers.split(' ').map(&:to_i)\n    numbers.sort!\n    numbers.join(' ')\n\
    end", "  # Your code here\nend\n</pre>\n</dd>\n</dl>", "  numbers = numbers.split('\
    \ ')\n  numbers.sort! { |x,y| x.to_i < y.to_i }\n  return numbers.join(' ')\n\
    end\n</code>\n<|/ a |>\n<| a dscore=4 |>\n<code>", "  return numbers.sort_by {\
    \ |n| n.to_i }\nend\n</code>\n<|/ a tags=ruby,sorting,arrays dscore=2 |>\n<| a\
    \ tags=ruby,sorting,arrays dscore=1 |>\n<code>", "    numbers.split(\" \").sort!\n\
    \    return numbers.join(\" \")\nend", "  numbers = numbers.to_s.split\n  numbers.sort\
    \ { |a,b| a.to_i <=> b.to_i }\n  numbers.join\nend\n</code>\n<|/ a dscore=1 tags=string,arrays,ruby\
    \ |>\n<| a tags=string,arrays,ruby |>\nOne liner using gsub with a regex and sort:\n\
    <code>\n\"one two four five seven zero nine\".gsub(/(\\S+)/) do |i| i.to_i.to_s.sort\
    \ end\n</code>\nResult:\n<code>\n\"one two four five six seven zero nine\"\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=0 |>\nA small modification to Stefan's answer:\n\
    <code>", "    numbers_array = numbers.split(' ')\n    numbers_array.sort\n   \
    \ numbers.join(' ')\nend", "  # Initialize a variable to store the new array\n\
    \  new_array = []\n  # Start iterating over the numbers\n  numbers.each do |number|\n\
    \    # Convert the number string to a number\n    number = number.to_i\n    #\
    \ If the number is in the range of 0-9, add the number to the new array\n    if\
    \ number <= 9 && number >= 0\n      new_array << number\n    end\n  end\n  # Return\
    \ the sorted array\n  new_array.sort\nend", "  # Your code here\n  numbers.to_s.split(//).sort_by\
    \ {|x| x.to_i}.join ','\nend\n</code>\n<|/ a dscore=1 tags=ruby |>\n<| a dscore=0\
    \ |>\n<code>\nputs \"Input numbers, separated by spaces\"\ninput = STDIN.gets.chomp",
  "  numbers.split(' ').sort.join(' ')\nend", "  numbers = numbers.split(' ') \n \
    \ numbers.sort {|a, b| a.to_i <=> b.to_i} \n  numbers.join(' ')\nend", "  numbers\
    \ = numbers.split\n  numbers = numbers.sort\n  numbers.join\nend\n</code>\nNow\
    \ let's put it all together:\n<code>\nsort_numbers('one'..'nine')", "    numbers\
    \ = numbers.split(' ')\n    numbers.map! {|num| num.to_i}\n    numbers.sort\n\
    \    return numbers.join(' ')\nend\n</code>\n<|/ a |>\n<| c |>\nI think you mean\
    \ `sort numbers`.\n<|/ c |>\n<| c |>\nYes, I did. I fixed it now. Thanks!\n<|/\
    \ c |>\n<| c |>\nWhoops, was being really slow - I thought I fixed it correctly\
    \ but then noticed the syntax error and fixed it before realizing I didn't actually\
    \ fix it until I saw your answer. :(\n<|/ c |>\n<| c |>\nIt's amazing how often\
    \ I see people trying to use one liners and thinking they're \"great!\". Thanks\
    \ for that :)\n<|/ c |>\n<| a tags=ruby |>\nIn Ruby 1.8.7+, you can use sort:\n\
    <code>\nnumbers = \"one three two four five six seven eight nine\".split\nnumbers.sort.join('\
    \ ')\n=> \"one two three four five six seven eight nine\"\n</code>\n<|/ a dscore=2\
    \ |>\n<| c |>\nThis also takes care of putting spaces in the correct places.\n\
    <|/ c |>\n<| a tags=ruby |>\nA general solution:\n<code>", "  numbers.split(\"\
    \ \").sort!\n  numbers.join(\" \")\nend", "  numbers.split(' ').sort.join(' ')\n\
    end", "  numbers = numbers.to_s\n  numbers = numbers.split.sort\n  numbers.join(\"\
    \ \")\nend\n</code>\n<|/ a tags=ruby |>\n<| c |>\nYou could also use the splat\
    \ operator `numbers = *numbers.split`, but I think this version is clearer. I\
    \ also would use a case statement to match against `'zero'`, `'one'` etc. instead\
    \ of repeating that over and over again.\n<|/ c |>\n<| a |>\nTo get the first\
    \ element from an array you can simply do this: \n<code>", "  numbers = numbers.gsub(/[[:punct:]]/,\
    \ '').downcase\n  numbers = numbers.split(' ').sort.join(\" \")\nend", '  numbers
    = numbers.to_s', "  # Your code here\nend", "  numbers = numbers.split.sort\n\
    \  numbers.join('')\nend", "  numbers.to_s.split(\" \").sort_by { |n| n }\nend",
  "  numbers = numbers.split(' ') # Array of strings\n  numbers.sort!", "  \n  # Create\
    \ an array of all valid numbers\n  valid_numbers = numbers[/\\d+/].split('')",
  "  sorted_numbers = ''\n  numbers.split(' ').each do |n|\n    if n == 'zero'\n \
    \     sorted_numbers << n\n    elsif n == 'nine'\n      sorted_numbers << n\n\
    \    elsif n == 'one'\n      sorted_numbers << n\n      sorted_numbers << n\n\
    \      sorted_numbers << n\n    elsif n == 'two'\n      sorted_numbers << n\n\
    \      sorted_numbers << n\n      sorted_numbers << n\n      sorted_numbers <<\
    \ n\n      sorted_numbers << n\n      sorted_numbers << n\n      sorted_numbers\
    \ << n\n      sorted_numbers << n\n      sorted_numbers << n\n      sorted_numbers\
    \ << n\n      sorted_numbers << n\n      sorted_numbers << n\n      sorted_numbers\
    \ << n\n      sorted_numbers << n\n      sorted_numbers << n\n      sorted_numbers\
    \ << n\n      sorted_numbers << n\n    elsif n == 'three'\n      sorted_numbers\
    \ << n\n      sorted_numbers << n\n      sorted_numbers << n\n      sorted_numbers\
    \ << n\n      sorted_numbers << n\n      sorted_numbers << n\n      sorted_numbers\
    \ << n\n      sorted_numbers << n\n      sorted_numbers << n\n      sorted_numbers\
    \ << n\n      sorted_numbers << n\n      sorted_numbers << n\n      sorted_numbers\
    \ << n\n      sorted_numbers << n\n      sorted_numbers << n\n      sorted_numbers\
    \ << n\n      sorted_numbers << n\n      sorted_numbers << n\n      sorted_numbers\
    \ << n\n      sorted_numbers << n\n    elsif n == 'four'\n      sorted_numbers\
    \ << n\n      sorted_numbers << n\n      sorted_numbers << n\n      sorted_numbers\
    \ << n\n      sorted_numbers << n\n      sorted_numbers << n\n      sorted_numbers\
    \ << n\n      sorted_numbers << n\n      sorted_numbers << n\n      sorted_numbers\
    \ << n\n      sorted_numbers << n\n      sorted_numbers << n\n      sorted_numbers\
    \ << n\n      sorted_numbers << n\n      sorted_numbers << n\n      sorted_numbers\
    \ << n\n      sorted_numbers << n\n      sorted_numbers << n\n      sorted_numbers\
    \ << n\n      sorted_numbers << n\n    elsif n == 'five'\n      sorted_numbers\
    \ << n\n      sorted_numbers << n\n      sorted_numbers << n\n      sorted_numbers\
    \ << n\n      sorted_numbers << n\n      sorted_numbers << n\n      sorted_numbers\
    \ << n\n      sorted_numbers << n\n      sorted_numbers << n\n      sorted_numbers\
    \ << n\n      sorted_", "  numbers.to_s.split\n  numbers.to_s.split\n  numbers.to_s.split\n\
    \  numbers.to_s.split\n  numbers.to_s.split\n  numbers.to_s.split\nend", "  number_strings\
    \ = numbers.split(' ')\n  numbers.gsub!(/\\s+/, '') #removes spaces from left\
    \ and right of numbers\n  number_strings.each do |number|\n    number_strings\
    \ = number.to_s.split('') #turns numbers into strings\n    number_strings.each\
    \ do |number_string|\n      number_strings = number_string.split('') #turns strings\
    \ into strings\n      number_strings.each do |number_string|\n        if number_string\
    \ =~ /^[one|two|three|four|five|six|seven|eight|nine]{9}$/\n          sorted_numbers.push(number_string)\n\
    \        end\n      end\n    end\n  end\n  return sorted_numbers.join(' ')\nend",
  "  sort_numbers_input = numbers.split(\" \").map(&:to_i).sort\n  \n  # Stringify\
    \ the result and return\n  return sort_numbers_input.to_s\nend", "  numbers.to_i.sort.join\n\
    end", "  if numbers.nil? || numbers.empty?\n    return nil\n  end", "  numbers.split('\
    \ ').map { |n| n.to_i }.sort\nend", "  return numbers.sort.reverse.join(\" \"\
    )\nend", "    numbers = numbers.split(' ') \n    numbers.sort!\n    return numbers.join('\
    \ ')\nend\n</code>\n<|/ a tags=ruby,arrays,sorting,string,hash |>\n<| c |>\nThank\
    \ you very much! This works great, but I haven't learned \"each_with_object\"\
    \ yet, can you explain how that works?\n<|/ c |>\n<| c |>\n, `each_with_object`\
    \ makes it easy to create an object from an enumerator. `each_with_object` takes\
    \ the previous value of `numbers` as the default object, and then it calls `{|number,numbers|...}`\
    \ with the previous value as first argument (the current value) and `numbers`\
    \ as the second argument (a hash object with all the values of `numbers`, with\
    \ all the corresponding keys from `numbers` as keys). `each_with_object` is like\
    \ `inject` but uses the `hash` as the default.\n<|/ c |>\n<| c |>\n`each_with_object`\
    \ is an enumerator (http://ruby-doc.org/core-2.4.1/Enumerator.html) and `inject`\
    \ is like `each_with_object` but uses the `hash` as the default object.\n<|/ c\
    \ |>\n<| a dscore=0 |>\n<code>", "  numbers = numbers.chars.map { |n| n.to_i }\n\
    \  numbers.sort!\n  numbers.map { |n| n.to_s(10) }.join(\" \")\nend", "  numbers.to_s.split('\
    \ ').sort!\n  numbers.to_s\nend", "    numbers = numbers.split(' ').map { |s|\
    \ s.to_i }\n    numbers.sort\n    numbers.to_s.gsub(',','')\nend", "  numbers\
    \ = numbers.split(' ') # split input on whitespace\n  numbers.sort! # sort the\
    \ array\n  return numbers.join(' ') # join the array with a space\nend\n</cell>\n\
    <code language=julia-1.5>\nsort_numbers('two one three eight five nine zero four')\n\
    </cell>\n<text>\nExercise 9\nWrite a function called is_valid that takes a string\
    \ and checks whether it is a valid phone number. It should check that the string\
    \ contains at least three non-numeric characters. If the string is not valid,\
    \ it should output a warning message and should return false.", "  numbers.split(\"\
    \ \").sort.join(\" \")\nend", "  numbers = numbers.to_s\n  numbers.split(\" \"\
    ).sort!\n  numbers.split(\" \").join(\" \")\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails\
    \ |>\n<| a |>\n<code>\nnumbers = <<EOF\ntwo three\nfive seven\none four\nEOF",
  "  numbers.split(\" \").sort.join(\" \")\nend", "  result = \"\"\n  numbers.split('\
    \ ').sort.each do |n|\n    result << \"#{n}, \"\n  end\n  result << \"\\n\"\n\
    \  result\nend", "  if numbers.empty?\n    \"\"\n  else\n    numbers.to_a.sort!\n\
    \  end\nend\n</code>\nI hope this helps you!\n<|/ a dscore=1 |>\n<| c |>\nThanks\
    \ for the reply, i understand the first part but what about the second part, how\
    \ do i implement that in ruby? Thanks\n<|/ c |>\n<| c |>\nI've added a solution\
    \ with your `sort_numbers`, but i would not use it. I hope it will help you understanding\
    \ how `sort_numbers` works.\n<|/ c |>\n<| c |>\nThanks for your reply, what if\
    \ i had to implement it in ruby just for fun, how would i do that in ruby? Thanks\
    \ so much for the help!\n<|/ c |>\n<| c |>\nYou're welcome! It was more of a learning\
    \ experience for me, so i think i understood it all... Now i'm gonna try to do\
    \ it myself. But if you have any questions, just tell me and i'll try to answer\
    \ them!\n<|/ c |>\n<| c |>\nThanks for your help. It's very much appreciated and\
    \ i'm very excited to try and learn ruby!\n<|/ c |>\n<| a dscore=1 tags=sorting,ruby\
    \ |>\nHere is a solution:\n<code>", "  n = numbers.split(//)\n  n.sort!\n  n\n\
    end", "  numbers.split(' ').sort!\n  numbers.gsub!(/zero/, '0')\n  numbers.gsub!(/one/,\
    \ '1')\n  numbers.gsub!(/two/, '2')\n  numbers.gsub!(/three/, '3')\n  numbers.gsub!(/four/,\
    \ '4')\n  numbers.gsub!(/five/, '5')\n  numbers.gsub!(/six/, '6')\n  numbers.gsub!(/seven/,\
    \ '7')\n  numbers.gsub!(/eight/, '8')\n  numbers.gsub!(/nine/, '9')\nend", " \
    \ numbers.each do |number|\n    if numbers[number] < numbers[number-1]\n     \
    \ numbers.delete(number)\n      numbers.delete(number-1)\n    end\n  end\n  numbers\n\
    end", "  numbers = numbers.split() # split string into a list of numbers\n  numbers.sort.reverse!\n\
    \  numbers = numbers.join('') # re-join the numbers in the correct order\n  numbers\
    \ = numbers.upcase\nend\n</code>\n<|/ a tags=ruby,sorting dscore=4 |>\n<| c |>\n\
    Nice. I added a version that doesn't sort numbers with leading zeros.\n<|/ c |>\n\
    <| c |>\nNice for case-insensitive sorting, but I wouldn't use 'one' through '9'\
    \ since they might not be contiguous numbers. I'd use the constants ZERO and NINE\
    \ from Ruby's Integer.\n<|/ c |>\n<| c |>\n, that would be my preference. Thanks\
    \ for pointing that out!\n<|/ c |>\n<| c |>\n, added your version as an answer.\
    \ Thanks for making my code much nicer!\n<|/ c |>\n<| a |>\nI like this one, but\
    \ just for fun:\n<code>", "  numbers.split(' ').map { |n| sort_numbers_in_place(n)\
    \ }.join(\" \")\nend", "    numbers = numbers.split(\" \").map {|n| n.to_i }\n\
    \    numbers.sort!\n    return numbers.join(\" \")\nend\n</code>\nA possible improvement\
    \ would be to return the array instead of concatenating the string, but that would\
    \ be more complex.\n<|/ a tags=ruby |>\n<| a tags=ruby |>\nThis is how I'd do\
    \ it\n<code>", "  numbers.sort_by { |x| x.to_i }\nend", "  return numbers.sort.join('\
    \ ')\nend\n</code>\n<|/ a tags=arrays,ruby dscore=2 |>\n<| a tags=arrays,ruby\
    \ |>\nIt looks like you're trying to sort an array of numbers. In Ruby, you can\
    \ do this by using the sort method on Arrays. This method will take a block as\
    \ an argument, which should take a number as an argument. The block should return\
    \ -1, 0 or 1 to indicate the comparison of the number in relation to each other.\n\
    So, in your case, the block would look something like this:\n<code>", "  sort_numbers\
    \ = numbers.split(' ') \n  sort_numbers.sort!\n  sort_numbers.join\nend", "  numbers\
    \ = numbers.split(' ') # Convert to array\n  numbers.map! { |num| num.to_i }\n\
    \  numbers.sort_by { |num| num }\n  return numbers.join(' ')\nend", "  numbers_array\
    \ = numbers.split(' ') #split into array by space\n  numbers_array.sort! #sort\
    \ the array\n  return numbers_array.join(' ') #join the array back together\n\
    end\n</code>\nYou would use it like so:\n<code>\nsort_numbers('nine six zero two\
    \ three four')\n</code>\nThis will return:\n<code>\n'zero one two three four six\
    \ seven'\n</code>\n<|/ a tags=ruby dscore=1 |>\n<| a dscore=1 |>\nThe answers\
    \ given so far are great and are simple but they don't address your question of\
    \ \"how would you implement this in Ruby?\"\nHere's a straightforward implementation:\n\
    <code>\nrequire 'set'", "  numbers = numbers.split(' ') if numbers.is_a?(String)\
    \ \n  numbers.sort!\n  return numbers.join(' ')\nend", "  numbers.gsub!(/^0/,\
    \ '').gsub!(/[^1-9]/, '')\n  numbers.split(' ').sort_by{|n| n.to_i}.join(' ')\n\
    end", "  case numbers\n    when /^0$/\n      \"\"\n    when /^1$/\n      numbers.to_s\n\
    \    when /^2$/\n      sort_numbers(numbers.to_s) + \"two\"\n    when /^3$/\n\
    \      sort_numbers(numbers.to_s) + \"three\"\n    when /^4$/\n      sort_numbers(numbers.to_s)\
    \ + \"four\"\n    when /^5$/\n      sort_numbers(numbers.to_s) + \"five\"\n  \
    \  when /^6$/\n      sort_numbers(numbers.to_s) + \"six\"\n    when /^7$/\n  \
    \    sort_numbers(numbers.to_s) + \"seven\"\n    when /^8$/\n      sort_numbers(numbers.to_s)\
    \ + \"eight\"\n    when /^9$/\n      sort_numbers(numbers.to_s) + \"nine\"\n \
    \   when /^(\\d{1,2})$/\n      sort_numbers(numbers.to_s) + \"#{numbers.to_i}\"\
    \n    else\n      sort_numbers(numbers.to_s)\n  end\nend\n</code>\nMy questions\
    \ are:", "  numbers.split(' ').map!(&:to_i).sort!\n  numbers.join(' ')\nend\n\
    </code>\nTesting it out:\n<code>\n> sort_numbers \"four zero seven two eight five\"\
    \n=> \"two eight five four zero seven\"\n</code>\n<|/ a dscore=0 |>\n<| a tags=ruby\
    \ |>\n<code>", "    numbers = numbers.split(' ')\n    numbers.map! { |n| n.to_i\
    \ }\n    numbers.sort!\n    return numbers.join(' ')\nend\n</code>\nThe Ruby way\n\
    You can do this all in Ruby using Array#to_s and Array#sort:\n<code>", "  result\
    \ = numbers.join(' ')\n  result = result.gsub(/([a-z])/, '\\1 ').gsub(/(\\d)/,\
    \ '\\1 ').gsub(/( )/, '\\1 ')\n  result = result.gsub(/( )/, ' ')\n  result =\
    \ result.gsub(/( )/, '\\1')\n  result = result.gsub(/( )/, ' ')\n  result = result.gsub(/(\
    \ )/, '\\1')\n  result = result.gsub(/( )/, '\\1')\n  result = result.gsub(/(\
    \ )/, '\\1')\n  result = result.gsub(/( )/, '\\1')\n  result = result.gsub(/(\
    \ )/, '\\1')\n  result = result.gsub(/( )/, '\\1')\n  result = result.gsub(/(\
    \ )/, '\\1')\n  result = result.gsub(/( )/, '\\1')\n  result = result.gsub(/(\
    \ )/, '\\1')\n  result = result.gsub(/( )/, '\\1')\n  result = result.gsub(/(\
    \ )/, '\\1')\n  result = result.gsub(/( )/, '\\1')\n  result = result.gsub(/(\
    \ )/, '\\1')\n  result = result.gsub(/( )/, '\\1')\n  result = result.gsub(/(\
    \ )/, '\\1')\n  result = result.gsub(/( )/, '\\1')\n  result = result.gsub(/(\
    \ )/, '\\1')\n  result = result.gsub(/( )/, '\\1')\n  result = result.gsub(/(\
    \ )/, '\\1')\n  result = result.gsub(/( )/, '\\1')\n  result = result.gsub(/(\
    \ )/, '\\1')\n  result = result.gsub(/( )/, '\\1')\n  result = result.gsub(/(\
    \ )/, '\\1')\n  result = result.gsub(/( )/, '\\1')\n  result = result.gsub(/(\
    \ )/, '\\1')\n  result = result.gsub(/( )/, '\\1')\n  result = result.gsub(/(\
    \ )/, '\\1')\n  result = result.gsub(/( )/, '\\1')\n  result = result.gsub(/(\
    \ )/, '\\1')\n  result = result.gsub(/( )/, '\\1')\n  result = result.gsub(/(\
    \ )/, '\\1')\n  result = result.gsub(/( )/, '\\1')\n  result = result.gsub(/(\
    \ )/, '\\1')\n  result = result.gsub(/( )/, '\\1')\n  result = result.gsub(/(\
    \ )/, '\\1')\n  result = result.gsub(/( )/, '\\1')\n  result = result.gsub(/",
  "  numbers.sort\n  numbers = numbers.join\nend", "  if numbers.empty?\n    \"zero\"\
    \n  elsif numbers.length == 1\n    \"one\"\n  elsif numbers.length == 2\n    \"\
    two\"\n  elsif numbers.length == 3\n    \"three\"\n  elsif numbers.length == 4\n\
    \    \"four\"\n  elsif numbers.length == 5\n    \"five\"\n  elsif numbers.length\
    \ == 6\n    \"six\"\n  elsif numbers.length == 7\n    \"seven\"\n  elsif numbers.length\
    \ == 8\n    \"eight\"\n  elsif numbers.length == 9\n    \"nine\"\n  else\n   \
    \ raise(\"Too many digits\")\n  end\nend\n</code>\n<|/ a tags=ruby,string,regex\
    \ |>\n<| c |>\nI like the use of String#gsub and #to_i!\n<|/ c |>\n<| a dscore=3\
    \ tags=ruby,string,regex |>\nI believe the solution using regular expression is\
    \ the best for this kind of problem.\n<code>\n\"01323456789\".gsub(/[^1-9]+/,\
    \ \"-\").gsub(/-/, \" \").downcase", "  sorted_numbers = numbers.split(' ').sort.join('\
    \ ')\n  puts sorted_numbers\nend", "  numbers.split(\" \").sort.join(\" \")\n\
    end", "    numbers = numbers.split(//).sort\n    numbers = numbers.join(//)\n\
    \    numbers\nend\n</cell>\n<code language=julia-1.0>\nsort_numbers(\"nine\")\n\
    </cell>\n<code language=julia-1.0>\nsort_numbers(\"four\")\n</cell>\n<code language=julia-1.0>\n\
    sort_numbers(\"two\")\n</cell>\n<code language=julia-1.0>\nsort_numbers(\"eight\"\
    )\n</cell>\n<code language=julia-1.0>\nsort_numbers(\"five\")\n</cell>\n<code\
    \ language=julia-1.0>\nsort_numbers(\"six six six\")\n</cell>\n<code language=julia-1.0>\n\
    sort_numbers(\"nine nine\")\n</cell>\n<code language=julia-1.0>\nsort_numbers(\"\
    one one eight\")\n</cell>\n<code language=julia-1.0>\nsort_numbers(\"zero zero\
    \ eight eight\")\n</cell>\n<code language=julia-1.0>\nsort_numbers(\"one one two\"\
    )\n</cell>\n<code language=julia-1.0>\nsort_numbers(\"three four five\")\n</cell>\n\
    <code language=julia-1.0>\nsort_numbers(\"zero zero five\")\n</cell>\n<code language=julia-1.0>\n\
    sort_numbers(\"zero zero one one two\")\n</cell>\n<code language=julia-1.0>\n\
    sort_numbers(\"three three four five six seven nine\")\n</cell>\n<code language=julia-1.0>\n\
    sort_numbers(\"three four five six\")\n</cell>\n<code language=julia-1.0>\nsort_numbers(\"\
    three four five six seven nine\")\n</cell>\n<code language=julia-1.0>\nsort_numbers(\"\
    three four five six seven nine three four five six seven nine\")\n</cell>\n<code\
    \ language=julia-1.0>\nsort_numbers(\"three four five six seven nine three four\
    \ five six seven nine three four five six seven nine\")\n</cell>\n<code language=julia-1.0>\n\
    sort_numbers(\"three four five six seven nine three four five six seven nine three\
    \ four five six seven nine three four five six seven nine\")\n</cell>\n<code language=julia-1.0>\n\
    sort_numbers(\"three four five six seven nine three four five six seven nine three\
    \ four five six seven nine three four fi", "  numbers.split(' ').sort!\n  numbers.split('\
    \ ').join\nend\n</code>\n<|/ a |>\n<| a tags=ruby |>\n<code>\n'one two three four'.split.sort_by!\
    \ {|s| s.to_i}.join(\" \")\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\nTry\
    \ this\n<code>\n'one two three four'.split(' ').sort_by!{|x| x.to_i}.join(' ')\n\
    </code>\n<|/ a tags=ruby |>\n<| c |>\nThe original answer is not very Ruby-like.\n\
    <|/ c |>\n<| a tags=ruby |>\nI like using sort_by to do this kind of thing:\n\
    <code>", "  numbers = numbers.split(' ') # Split string\n  numbers.map { |number|\
    \ number.to_i }\n  numbers.sort!\n  numbers.join(' ')\nend\n</code>\n<|/ a dscore=0\
    \ |>\n<| a |>\n<code>", "  # Split input into an array of numbers\n  sorted_numbers\
    \ = numbers.split ' '\n  # Sort numbers from smallest to largest\n  sorted_numbers.sort\
    \ { |a, b| a.to_i <=> b.to_i }\n  # Join numbers into string\n  sorted_numbers.join('\
    \ ')\nend\n</code>\n<|/ a dscore=4 |>\n<| a dscore=2 |>\nYou can use the following\
    \ code:\n<code>\nnumbers = input().split(\" \").map(&:to_i)\nnumbers.sort_by{|x|\
    \ x}\nputs numbers.map(&:to_s).join(\" \")\n</code>\ninput() reads the input from\
    \ stdin which is provided by Ruby. map method converts each element of the array\
    \ into Integer objects and then sort_by method sorts the array according to the\
    \ criteria defined by the block passed as argument, which is passed as the block\
    \ for sort_by method as a lambda expression.\n<|/ a tags=ruby,sorting |>\n<| c\
    \ |>\n`map(&:to_i)` can just be written `map { |x| x.to_i }`. You don't need to\
    \ do `map(&:to_s)`, since `sort_by` will already return an array.\n<|/ c |>\n\
    <| c |>\nHi, how did you get your input in the array from the input line?\n<|/\
    \ c |>\n<| a tags=ruby,sorting |>\nThis is a variant of \"bubblesort\" that just\
    \ sorts string values instead of numeric ones. It can be applied in one line like\
    \ this:\n<code>\nputs (('a'..'z').sort.join).reverse\n</code>\nIt sorts characters\
    \ in ascending order (from left to right) and then reverses the result to sort\
    \ the numbers in descending order (from right to left).\n<|/ a dscore=2 |>\n<|\
    \ c |>\nThis answer is actually incorrect.  It will sort \"z\" before \"a\". \
    \ It sorts characters from left to right, then reverses the resulting array. \
    \ So \"a\" before \"z\", not \"z\" before \"a\".\n<|/ c |>\n<| c |>\n: Yes, you're\
    \ right. Fixed the answer. Thanks!\n<|/ c |>\n<| a dscore=2 |>\nA quick solution\
    \ with array#sort, and a custom block:\n<code>", "    numbers.split(' ').map{|n|\
    \ n.to_i}.sort\nend\n</code>\n<|/ a tags=sorting,ruby dscore=1 |>\n<| a tags=sorting,ruby\
    \ |>\nI know this is an old post but I had this same question and found a different\
    \ way to solve it.\nYou can create an array with the numbers 1-9 and then use\
    \ Enumerable#to_a to convert it to a regular array\n<code>\nnumbers = [*1..9]\n\
    </code>\nThen you can just sort it.\n<code>\nnumbers.sort\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=sorting,ruby |>\nFor someone who wants to sort an array of numbers\
    \ in Ruby, you can use:\n<code>", "  return numbers.sort!\nend", "    numbers.split('\
    \ ').sort.join(\" \")\nend\n</code>\nAnd here are some test cases:\n<code>\nputs\
    \ sort_numbers \"one five seven\"", "    numbers = numbers.split(' ') if numbers.is_a?\
    \ String\n    numbers.sort!", "    numbers = numbers.split(' ') if numbers.is_a?(String)\
    \ \n    numbers.sort!\n    numbers.join(' ')\nend", "    numbers = numbers.to_s\n\
    \    numbers = numbers.chomp\n    numbers = numbers.reverse\n    numbers = numbers.split\n\
    \    numbers = numbers.map{|x| x.to_i}\n    numbers.sort!\n    return numbers.join\n\
    end", "  numbers = numbers.to_s.split\n  numbers.sort\n  numbers.join\nend", " \
    \ return numbers.sort_by { |i| i.to_i }\nend\n</code>\n<|/ a |>\n<| a |>\nI personally\
    \ would have used the Ruby standard library for this, since it has a lot of useful\
    \ methods for dealing with arrays, strings and numbers.\n<code>", "  # Convert\
    \ the input string into a list\n  numbers_array = numbers.split", "  raise NotImplementedError\n\
    end", "  result = ''\n  i = 0\n  while i < numbers.length\n    i = i + 3\n   \
    \ current = numbers[i] + numbers[i + 1] + numbers[i + 2]\n    if current > 9\n\
    \      current = current - 10\n    result += current\n    i += 3\n  end\n  return\
    \ result\nend", "  # Your code goes here\nend", "  # Your code goes here\n  numbers.split(\"\
    , \").sort!.reverse.join(\", \")\nend", "  numbers.chars.sort.join\nend", "  #\
    \ Your code goes here\n  numbers = numbers.split(\" \").sort!\n  numbers = numbers.join('\
    \ ')\nend\n</cell>\n<code language=julia-1.5>", "    numbers.split(//).sort.join(\"\
    \ \")\nend", "    numbers_array = numbers.split\n    numbers_array.sort { |a,\
    \ b| b.to_i - a.to_i }\n    numbers_array.join(' ')\nend", "    \n    # convert\
    \ string numbers into an array\n    number_array = numbers.split", "    numbers\
    \ = numbers.split(' ') #turn them into a list\n    numbers.sort!\n    numbers\
    \ = numbers.join(' ') #turn them back into a string\nend", "  sorted_numbers =\
    \ numbers.split(' ')\n  sorted_numbers.each do |number|\n    number = number.to_i\n\
    \    break number if number > 9\n  end\n  sorted_numbers.join(' ')\nend\n</code>\n\
    This gives the output:\n<code>\nsort_numbers \"zero one two three four five six\
    \ seven eight nine\"\n=> \"nine eight seven six five four three two one zero\"",
  "    # Convert the input string into a list of ints.\n    ints = numbers.chars.to_i\n\
    \    # Sort them in ascending order.\n    ints.sort!\n    # Convert the sorted\
    \ list into a string.\n    result = ints.join\nend\n</code>\n<|/ a |>\n<| c |>\n\
    `to_i` will raise an error if the string is empty or contains non-integers. Better\
    \ to use `to_i` with `rescue ArgumentError`.\n<|/ c |>\n<| c |>\nThank you for\
    \ the correction! I was getting hung up on how to implement the function correctly\
    \ and it wasn't until I realized that `to_i` will raise an error on invalid input.\n\
    <|/ c |>\n<| c |>\nIt took me a while to understand that `ints.sort` works on\
    \ strings :)\n<|/ c |>\n<| a |>\nThis works:\n<code>", "  # sort 'numbers' from\
    \ smallest to largest\n  numbers.sort!\n  # output the sorted numbers\n  puts\
    \ numbers\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
