name: HumanEval_67_fruit_distribution
language: rb
prompt: "# In this task, you will be given a string that represents a number of apples\
  \ and oranges \n# that are distributed in a basket of fruit this basket contains\
  \ \n# apples, oranges, and mango fruits. Given the string that represents the total\
  \ number of \n# the oranges and apples and an integer that represent the total number\
  \ of the fruits \n# in the basket return the number of the mango fruits in the basket.\n\
  # for examble:\ndef fruit_distribution(s, n)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fruit_distribution\n\
  \    candidate = method(:fruit_distribution)\n    assert_equal(8, candidate.call(\"\
  5 apples and 6 oranges\", 19))\n    assert_equal(10, candidate.call(\"5 apples and\
  \ 6 oranges\", 21))\n    assert_equal(2, candidate.call(\"0 apples and 1 oranges\"\
  , 3))\n    assert_equal(2, candidate.call(\"1 apples and 0 oranges\", 3))\n    assert_equal(95,\
  \ candidate.call(\"2 apples and 3 oranges\", 100))\n    assert_equal(0, candidate.call(\"\
  2 apples and 3 oranges\", 5))\n    assert_equal(19, candidate.call(\"1 apples and\
  \ 100 oranges\", 120))\n  end\nend\n"
completions: ["  sum = 0\n  count = 0\n  i = 0\n  while i < n\n    if s[i] == 'o'\n\
    \      count += 1\n      sum += count\n    else\n      count = 1\n      sum +=\
    \ count\n    end\n    i += 1\n  end\n  \n  return sum - count\nend", "    \n \
    \   # your code here\n    count = 0\n    sum = 0\n    \n    for i in s[0]:\n \
    \       if i == \"o\" or i == \"a\":\n            sum += int(s[i])\n         \
    \   count += 1\n    return int(s[n]) - sum\nprint(str(fruit_distribution(\"abbba\"\
    ,5)) + \" mango fruits\")\nprint(str(fruit_distribution(\"aabbba\",5)) + \" mango\
    \ fruits\")\nprint(str(fruit_distribution(\"aaabbbbabbba\",5)) + \" mango fruits\"\
    )\nprint(str(fruit_distribution(\"aabbbba\",5)) + \" mango fruits\")\nprint(str(fruit_distribution(\"\
    aabbbbaabbbbabbba\",5)) + \" mango fruits\")\n</cell>\n<cell>", "    \n    ",
  "  fruits = s.split(\",\")\n  sum_fruits = fruits.reduce(0) {|sum, e| sum += e.to_i}\n\
    \  apples = 0\n  oranges = 0\n  mangoes = 0\n  fruits.each do |fruit|\n    if\
    \ fruit == \"apples\"\n      apples += 1 # increment apples by 1\n    elsif fruit\
    \ == \"oranges\"\n      oranges += 1 # increment oranges by 1\n    elsif fruit\
    \ == \"mango\"\n      mangoes += 1\n    end\n  end\n  fruits.reject! {|fruit|\
    \ fruit == \"apples\"}\n  fruits.reject! {|fruit| fruit == \"oranges\"}\n  fruits.reject!\
    \ {|fruit| fruit == \"mango\"}\n  apples -= mangoes\n  return mangoes if apples\
    \ == n\n  return apples if oranges == n\n  nil\nend\nputs fruit_distribution(\"\
    1, 2, 3, 4, 5, 6, 7\", 4)", "    # initialize a dictionary to store the fruits\
    \ count of apples and oranges\n    # initialize an empty array to store the apples\
    \ and oranges\n    fruit_count = {}\n    # initialize an array to store the apples\
    \ and oranges\n    apples = []\n    oranges = []\n    # initialize an array to\
    \ store the number of fruits\n    fruit_num = []", "  return(s.count / n)\nend",
  "  # your code here\nend\nfruit_distribution(\"10100101010100101110010010100110\"\
    , 10) # => 3", "</code>\n<|/ q tags=ruby |>\n<| c |>\nWhat do you mean by \"not\
    \ working\"? What is it doing that it's *not* doing that you want it to do?\n\
    <|/ c |>\n<| c |>\nThe first problem is that your code only works if `fruit` is\
    \ `Orange` or `Apple`. If it's `Orange` and `Mango`, it won't work because `\"\
    mango\" <=> \"Mango\"`.\n<|/ c |>\n<| c |>\nPlease see \"[ask]\" and the linked\
    \ pages and \"[mcve](https://stackoverflow.com/help/minimal-reproducible-example)\"\
    . We expect you to tell us what \"not working\" means, including a demonstration\
    \ of how your code fails to meet that goal. Without that, your question is off-topic\
    \ for Stack Overflow. Also, please do not use \"solved\" or similar in the title\
    \ of your questions. That marks your question as already answered, and can confuse\
    \ those reading your question.\n<|/ c |>\n<| c |>\nI added an example of what\
    \ isn't working, thank you for pointing this out! I thought that having \"mango\"\
    \ <=> \"Mango\" would make it so that the fruit string \"mango\" would equal \"\
    Mango\"?\n<|/ c |>\n<| c |>\n\"Mango\" <=> \"Mango\" will return `nil`, not `true`.\n\
    <|/ c |>\n<| a tags=ruby |>\nThere's no reason to use gsub, split, count, or map\
    \ here. All you need is to find the index of the substring within fruits, then\
    \ use that to find the number of occurrences of Mango within that array:\n<code>",
  "  apples, oranges, mango = s.split('&')\n  apples.to_i\n  oranges.to_i\n  mango.to_i\n\
    \  n.to_i\n  mango = 0\n  n = apples + oranges + mango\n  n.to_i\nend\n  ", " \
    \ # Write your code here\n  return 0\nend", "  \nend\n</cell>\n<text>\nWe should\
    \ test your function:", "    apples = s.count('apples')\n    oranges = s.count('oranges')\n\
    \    fruits = s.count('mango')\n    if apples < oranges or oranges < fruits or\
    \ apples < fruits\n        return n\n    else \n        return fruits-oranges-apples\n\
    \    ", "    \n    # your code here\nend", "    fruits = s[2..-2]\n    apples\
    \ = s[0..0]\n    oranges = s[-1..-2]\n    mango = s[-3..-1]\n    apples == \"\
    0\"\n    oranges == \"0\"\n    mango == \"0\"\n    apples.to_i\n    oranges.to_i\n\
    \    mango.to_i\n    fruits.to_i\n    (fruits % n == 0)\n    (fruits / n == 0)\n\
    \    (fruits * n == 0)\nend\nputs fruit_distribution(\"1010001\", 5)", "    #\
    \ write your code here\n    apple = 0\n    orange = 0\n    mango = 0\n    array\
    \ = Array.new(3) do |i|\n        fruit = s[i]\n        array = Array.new(3) do\
    \ |j|\n            if fruit == 'a' then\n                apple += 1\n        \
    \    elsif fruit == 'o' then\n                orange += 1\n            elsif fruit\
    \ == 'm' then\n                mango += 1\n            end\n        end\n    end\n\
    \    if array == [orange, apple, mango] then\n        mango\n    else\n      \
    \  -1\n    end\nend\nputs fruit_distribution(\"aoam\", 4)\nputs fruit_distribution(\"\
    aoo\", 3)\nputs fruit_distribution(\"aam\", 3)\nputs fruit_distribution(\"aoam\"\
    , 4)\nputs fruit_distribution(\"aao\", 3)\nputs fruit_distribution(\"aam\", 3)\n\
    puts fruit_distribution(\"aaam\", 4)\nputs fruit_distribution(\"aaam\", 4)\nputs\
    \ fruit_distribution(\"aaam\", 4)\nputs fruit_distribution(\"aaam\", 4)\nputs\
    \ fruit_distribution(\"aaam\", 4)\nputs fruit_distribution(\"aaam\", 4)\nputs\
    \ fruit_distribution(\"aaam\", 4)\nputs fruit_distribution(\"aaam\", 4)\nputs\
    \ fruit_distribution(\"aaam\", 4)\nputs fruit_distribution(\"aaam\", 4)\nputs\
    \ fruit_distribution(\"aaam\", 4)\nputs fruit_distribution(\"aaam\", 4)\nputs\
    \ fruit_distribution(\"aaam\", 4)\nputs fruit_distribution(\"aaam\", 4)\nputs\
    \ fruit_distribution(\"aaam\", 4)\nputs fruit_distribution(\"aaam\", 4)\nputs\
    \ fruit_distribution(\"aaam\", 4)\nputs fruit_distribution(\"aaam\", 4)\nputs\
    \ fruit_distribution(\"aaam\", 4)\nputs fruit_distribution(\"aaam\", 4)\nputs\
    \ fruit_distribution(\"aaam\", 4)\nputs fruit_distribution(\"aaam\", 4)\nputs\
    \ fruit_distribution(\"aaam\", 4)\nputs fruit_distribution(\"aaam\", 4)\nputs\
    \ fruit_distribution(\"aaam\", 4)\nputs fruit_distribution(\"aaam\", 4)\nputs\
    \ fruit_distribution(\"aaam", "    count = 0\n    apples = 0\n    oranges = 0\n\
    \    mangos = 0\n    \n    # split the string into array\n    array = s.split(\"\
    \ \")\n    \n    # check apples and oranges\n    apples = array[0]\n    oranges\
    \ = array[1]\n    \n    # check mango\n    mango = array[array.length - 2]\n \
    \   \n    # check count \n    count = int(array[-1])\n    \n    # return mango\
    \ count\n    return mangos\nend\n</code>\n<|/ a |>\n<| a tags=arrays,ruby,string\
    \ |>\nHere is another way to do it.\n<code>", "  # Your code here\n  \n  return\
    \ n\nend", "  \n  # your code goes here\n  \n  # return the number of mango fruits\n\
    end", "    apples = 0\n    oranges = 0\n    mangos = 0\n    i = s.count(\"a\"\
    )\n    j = s.count(\"o\")\n    k = s.count(\"m\")\n    i = 0 if i == 0 else i\n\
    \    j = 0 if j == 0 else j\n    k = 0 if k == 0 else k\n    for fruit in s[:n]\n\
    \        if fruit == \"a\"\n            apples += 1\n        if fruit == \"o\"\
    \n            oranges += 1\n        if fruit == \"m\"\n            mangos += 1\n\
    \    return mangos\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThank you for your answer,\
    \ but i dont need to use regular expressions.\n<|/ c |>\n<| c |>\nWhat is your\
    \ definition of \"regular expressions\"?\n<|/ c |>\n<| a |>\n<code>", "  count\
    \ = 0\n  fruits = s.split(\" \")\n  \n  for i in fruits\n    if i == \"orange\"\
    \n      count += 1\n    elsif i == \"apple\"\n      count += 1\n    elsif i ==\
    \ \"mango\"\n      count += 1\n  end\n  return count\nend\nputs fruit_distribution(\"\
    100 90 80 70 60 50 40 30 20 10 5 2 1\", 10)\nputs fruit_distribution(\"100 90\
    \ 80 70 60 50 40 30 20 10 5 2 1\", 0)\nputs fruit_distribution(\"10 5 2 1\", 0)\n\
    puts fruit_distribution(\"5 0 1 2 3 4 6 7\", 5)\nputs fruit_distribution(\"100\
    \ 90 80 70 60 50 40 30 20 10 5 2 1\", 15)", "   n = s.to_i\n   i = 0\n   \n  \
    \ while i < n\n      if s[i] == \"a\"\n         i+=1\n      elsif s[i] == \"o\"\
    \n         i+=1\n      else\n         return i\n      end\n   end\nend", "  \n\
    \  total = 0\n  total = 0\n  \n  \n  total = s.split(', ').each do |i|\n    i\
    \ = i.to_i\n  end\n  \n  total = total + n\n  \n  return total\nend", "    return\
    \ s.to_i\nend", "  # Return the number of mango fruits in the basket.\n  # s is\
    \ the string of the number of the apples and oranges\n  # n is the total number\
    \ of fruits in the basket containing apples, oranges, and mango\n  fruits = s.split(//)\n\
    \  apples, oranges = fruits[0], fruits[1]\n  count = 0\n  if apples == \"apples\"\
    \ and oranges == \"oranges\" and mango == \"mango\"\n    count += 1\n  end\n \
    \ count\nend", "    basket = s.split('apple')\n    total = 0\n    apple = 0\n\
    \    orange = 0\n    mango = 0\n    for i in basket:\n        if i.strip() ==\
    \ '':\n            continue\n        elif i.strip() == 'apple':\n            apple\
    \ = apple + 1\n        elif i.strip() == 'orange':\n            orange = orange\
    \ + 1\n        else:\n            mango = mango + 1\n    if apple > 0 and orange\
    \ > 0 and mango > 0:\n        total = apple + orange + mango\n    else:\n    \
    \    return 0\n    \n    total = int(total / n)\n    return total\n    \n</cell>\n\
    <text>\nQ12. Write a function to check whether a given string is a permutation\
    \ of a given string\nFor example:", "  n = n.to_i\n  apples = s.scan(/apple/)\n\
    \  oranges = s.scan(/orange/)\n  mangos = s.scan(/mango/)\n  m = 0\n  a = 0\n\
    \  o = 0\n  apples.each do |app|\n    o = o + (n.to_f - apples.inject(0){|sum,\
    \ e| sum += e.to_i})\n    apples.delete(app)\n    a = a + 1\n    if a.to_f ==\
    \ app\n      m = m + 1\n      a = 0\n    end\n  end\n  oranges.each do |ora|\n\
    \    o = o + (n.to_f - oranges.inject(0){|sum, e| sum += e.to_i})\n    oranges.delete(ora)\n\
    \    a = a + 1\n    if a.to_f == ora\n      m = m + 1\n      a = 0\n    end\n\
    \  end\n  mangos.each do |mango|\n    o = o + (n.to_f - mangos.inject(0){|sum,\
    \ e| sum += e.to_i})\n    mangos.delete(mango)\n    a = a + 1\n    if a.to_f ==\
    \ mango\n      m = m + 1\n      a = 0\n    end\n  end\n  m\nend", "  # write code\
    \ here\nend\nfruit_distribution(\"banana\", 5)\n> 2\nfruit_distribution(\"apple\"\
    , 10)\n> 5", "  fruits = s.split(//)\n  fruits.each do |s|\n    if s[0] == 'O'\
    \ or s[1] == 'O'\n      n -= 1\n    end\n  end\n  return n\nend", "  apples =\
    \ 0\n  mango = 0\n  orange = 0\n  for i in 0...n\n    switch s[i]\n      case\
    \ a\n        apples +=1\n      case m\n        mango +=1\n      case o\n     \
    \   orange +=1\n    end\n  end\nend", "  \n  \n  \n  s = s \n  n = n\n  \n  i\
    \ = 1\n  \n  while i <= n\n     if s.include? \"mango\"\n      return i \n   \
    \  end\n     i += 1\n  end\n  \nend", end, "  count = 0\n  i = 0\n  while i <\
    \ n \n    if s[i] == 'O'\n      count += 1\n    end\n    i += 1\n  end\n  i =\
    \ 0\n  while i < n\n    if s[i] == 'A'\n      count += 1\n    end\n    i += 1\n\
    \  end\n  i = 0\n  while i < n\n    if s[i] == 'M'\n      count += 1\n    end\n\
    \    i += 1\n  end\n  i = 0\n  while i < n\n    if s[i] == 'F'\n      count +=\
    \ 1\n    end\n    i += 1\n  end\n  i = 0\n  while i < n\n    if s[i] == 'M'\n\
    \      count += 1\n    end\n    i += 1\n  end\n  i = 0\n  while i < n\n    if\
    \ s[i] == 'F'\n      count += 1\n    end\n    i += 1\n  end\n  i = 0\n  while\
    \ i < n\n    if s[i] == 'F'\n      count += 1\n    end\n    i += 1\n  end\n  return\
    \ count\nend", "    apples = s.scan(/\\d+/).map{|i| i.to_i}\n    oranges = s.scan(/\\\
    d+/).map{|i| i.to_i}\n    mangoes = s.scan(/\\d+/).map{|i| i.to_i}\n    fruit\
    \ = apples + oranges + mangoes\n    return fruits.find { |fruit| fruits.count(fruit)\
    \ == n }\nend\n</code>\nAnd here it is in ruby:\n<code>", "  n\nend\n</cell>\n\
    <code language=julia-1.0>\nfruit_distribution(\"12\",3) # => 2\n</cell>\n<code\
    \ language=julia-1.0>", "  apples = 0\n  oranges = 0\n  mangoes = 0\n  basket_items\
    \ = s.split(//)", "  # write your code here\n  if s.length < n\n    n\n  elsif\
    \ s.length == n\n    s.length\n  else\n    -1\n  end\nend", "  #write your code\
    \ here\n  if s.length != 0\n    fruits = s.split(//)\n    i = 0\n    sum = 0\n\
    \    while(i < fruits.length)\n      sum += fruits[i]\n      i += 1\n  end\n \
    \ \n  if(sum == n)\n    n + 1\n  else\n    n\n  end\nend", " \n  # Solution code\
    \ here\n \n  num = 0\n  apple = 0\n  orange = 0\n  mango = 0\n  for i in s.split\n\
    \    if i.eql? \"apples\"\n      apple += 1\n    elsif i.eql? \"oranges\"\n  \
    \    orange += 1\n    elsif i.eql? \"mangoes\"\n      mango += 1\n    elsif i.eql?\
    \ \"nothing\"\n      num += 1\n      fruit += 1\n \n  return(num)\nend", "  count\
    \ = 0\n  s.split(//).each do |fruit| \n    fruit == 'm' ? count += 1: nil \n \
    \ end \nend\n</code>\n<|/ a dscore=0 |>\n<| a tags=ruby |>\n<code>", "  s.each_char\
    \ do |char|\n    if char == 'o'\n      n += 1\n    elsif char == 'a'\n      n\
    \ += 1\n    end\n  end\n  return n\nend\n</code>\n<|/ a dscore=2 tags=ruby,if-statement\
    \ |>\n<| c |>\nWhy use `s.each_char` to get the characters of a string? `s.chars`\
    \ will do.\n<|/ c |>\n<| a |>\nRuby offers you a very convenient way to count\
    \ the number of \"fruits\" in a string:\n<code>\nfruits = \"apple, orange, mango\"\
    .split\nfruits.count { |fruit| fruit =~ /a|o|m/ }\n=> 2\n</code>\n<|/ a dscore=2\
    \ tags=ruby,if-statement |>\n<| a dscore=2 |>\nYou can use the following regexp\
    \ to count the fruits:\n<code>\n/a|o|m/ =~ string\n</code>\nFor example:\n<code>",
  end, "  \n  # Return the number of mango fruits in the basket\nend\n</pre>\n</div>\n\
    </div>\n</div>\n</div>\n</div>\n<div id=\"footer\">\n<div id=\"footer-text\">\n\
    Last updated 2015-08-30 17:24:33 CEST\n</div>\n</div>\n</body>\n</html>\n</code>\n\
    <|/ q tags=ruby,arrays,hash,ruby-on-rails,ruby-on-rails-4 dscore=0 |>\n<| c |>\n\
    You should use hashes instead of arrays for this purpose.\n<|/ c |>\n<| a dscore=2\
    \ tags=ruby,arrays,hash,ruby-on-rails,ruby-on-rails-4 |>\nI won't solve the problem\
    \ for you, but show you how you can solve the problem.\nFirst of all, you need\
    \ a method that can help you get the number of items in an array. Since you're\
    \ using Rails, you can use the .count method.\nThe next step is what said in the\
    \ comments. Use a hash to store your fruits.\n<code>\napples_and_oranges = Hash.new(0)\n\
    </code>\nNow iterate through your basket and increment the fruit counts\n<code>\n\
    fruits.each { |fruit| apples_and_oranges[fruit] += 1}\n</code>\nAfter that you\
    \ can return the mango fruit count.\n<code>\napples_and_oranges[mango]\n</code>\n\
    <|/ a |>\n<| c |>\nYou might want to mention `Hash::new(0)` so that the fruit\
    \ counts are initially zero.\n<|/ c |>\n<| c |>\nGood point about hash::new(0).\
    \ I usually use that method when initializing hash variables, but I used the code\
    \ he posted.\n<|/ c |>\n<| a |>\nYou can use a Hash as you said:\n<code>\nfruits\
    \ = [\"apples\", \"mango\", \"oranges\", \"apples\", \"oranges\", \"apples\",\
    \ \"apples\", \"apples\", \"apples\", \"oranges\", \"apples\", \"apples\", \"\
    oranges\", \"apples\", \"apples\", \"apples\", \"apples\"]\nfruits_hash = {}\n\
    fruits.each { |fruit| fruits_hash[fruit] = fruits_hash[fruit] || 0 }", "  puts\
    \ s\n  puts n\n  \n  apples = s.split(//)\n  oranges = n.split(//)\n  \n  apples.each\
    \ do |a|\n    oranges.each do |o|\n      if o == a\n        return o\n      end\n\
    \    end\n  end\n  \n  return nil\nend", "  return n-1\nend", "  apples = 0\n\
    \  mangos = 0\n  oranges = 0\n  s.scan(/\\d+/) do |i|\n     case i\n       when\
    \ /apple/\n        apples += i.to_i\n       when /orange/\n        oranges +=\
    \ i.to_i\n       when /mango/\n        mangos += i.to_i\n     end\n  end", " \
    \ i = 1\n  sum = 0\n  while (i <= n)\n    sum = sum + s[i]\n    i = i + 1\n  \n\
    \  return sum % 3", "  \n  # your code here", "    apples = int(s.split(', ')[0].split(':')[0])\n\
    \    oranges = int(s.split(', ')[0].split(':')[1])\n    mangos = 0", '    apples,
    oranges, mangos = 0, 0, 0', "</code>\nI started with some basic python and i don't\
    \ think it's hard to do the rest but i think it's more efficient to use ruby\n\
    <|/ q dscore=0 |>\n<| c |>\nHave you tried something yet? If so, show us! We help\
    \ you understand where you went wrong, but we aren't going to do your homework\
    \ for you. Have you tried Ruby?\n<|/ c |>\n<| c |>\nWhy did you tag this with\
    \ ruby when you tagged this with python? What have you tried in Ruby?\n<|/ c |>\n\
    <| c |>\nThis looks like a homework problem, not real world problem. So maybe\
    \ you should show what you've tried in Ruby first. Also, you tagged it with \"\
    ruby\" but you did not show us any Ruby code, so this would not really help in\
    \ solving the problem.\n<|/ c |>\n<| a tags=ruby,python dscore=3 |>\nI believe\
    \ this is your homework, so I'll answer as I see it. I'm assuming that you've\
    \ learned python already, so I'm going to stick with that for the sake of simplicity.\
    \ You're going to be doing a lot of string processing and number manipulation,\
    \ so you really need a good foundation to work with. Here are some tips that can\
    \ help you get started:", "  fruit = s.chars\n  n = 0\n  for i in fruit\n    if\
    \ i == 'a'\n      n += 0\n    elsif i == 'o'\n      n += 1\n    elsif i == 'm'\n\
    \      n += 1\n  return n\nend", "  return \"?\" if s.length == 0\n  \n  apples\
    \ = s.length % 3\n  oranges = s.length - apples\n  fruit = Array.new(fruits, 0)\n\
    \  fruits[0] = apples if apples > 0\n  fruits[1] = oranges if oranges > 0\n  fruits[2]\
    \ = s.length if s.length % 3 == 0\n  \n  count = 0\n  for i in fruits\n    count\
    \ += fruits[i]\n  end\n  \n  return count if count == n\n  return \"?\" if count\
    \ != n\nend", "  # return \"Apples, Oranges, Mango\"\nend", "    count = 0\n \
    \   array = s.split()\n    for i in array\n        if i.split('=')[0] == 'oranges'\n\
    \            count += 1\n        if i.split('=')[0] == 'apples'\n            count\
    \ += 1\n        if i.split('=')[0] == 'mango'\n            count += 1\n      \
    \  if count == n\n            return i\nend\n</code>\n<|/ q |>\n<| c |>\nWhat\
    \ is the exact error you are getting? And can you show us the code where you are\
    \ trying to get this error to happen?\n<|/ c |>\n<| c |>\nI get the error \"NameError:\
    \ undefined local variable or method `n' for main:Object (NameError)\"\n<|/ c\
    \ |>\n<| c |>\nI suspect that your code is actually using some other `n` that\
    \ you haven't defined. Try adding `puts \"n = #{ n }\"` right after you define\
    \ `n` to see what `n` is in that line of code.\n<|/ c |>\n<| c |>\nThat doesn't\
    \ work because the variable n needs to be defined before I use it in the next\
    \ line. I think that's my problem though I don't know how to fix it.\n<|/ c |>\n\
    <| c |>\nI see what you're saying... I feel like I'm so close though. I added\
    \ puts \"n = #{ n }\" before my first if statement and I got this \"n = nil\"\
    . It doesn't seem to recognize n in the first if statement though. Any ideas on\
    \ how to fix that?\n<|/ c |>\n<| a dscore=0 |>\nIn addition to what said, try\
    \ using '==' instead of '='. \n<code>", "    if n == 0\n        0\n    else if\
    \ n == 1\n        if s =~ /[A-z]+/\n            0\n        elsif s =~ /\\d/\n\
    \            0\n        elsif s =~ /[^A-z\\d]/\n            0\n        else\n\
    \            0\n        end\n    else if s =~ /[A-z]+/\n        if s =~ /\\d/\n\
    \            0\n        else\n            if s =~ /[^A-z\\d]/\n              \
    \  0\n            else\n                0\n            end\n        end\n    else\
    \ if s =~ /\\d/\n        if s =~ /[A-z]+/\n            0\n        else\n     \
    \       0\n        end\n    else\n        if s =~ /[A-z]+/\n            if s =~\
    \ /\\d/\n                if s =~ /[^A-z\\d]/\n                    0\n        \
    \        else\n                    0\n                end\n            end\n \
    \       else\n            if s =~ /\\d/\n                0\n            else\n\
    \                0\n            end\n        end\n    end\nend\nprint(fruit_distribution(\"\
    10 20 30 40 50 60 70\", 0))\nprint(fruit_distribution(\"10 20 30 40 50 60 70\"\
    , 1))\nprint(fruit_distribution(\"10 20 30 40 50 60 70\", 2))\nprint(fruit_distribution(\"\
    10 20 30 40 50 60 70\", 3))\nprint(fruit_distribution(\"10 20 30 40 50 60 70\"\
    , 4))\nprint(fruit_distribution(\"10 20 30 40 50 60 70\", 5))\nprint(fruit_distribution(\"\
    10 20 30 40 50 60 70\", 6))\nprint(fruit_distribution(\"10 20 30 40 50 60 70\"\
    , 7))", "end\n</cell>\n<code language=julia-1.5>\ns = \"1#2\"\nn = 5", "  # Your\
    \ code here\nend", "  apple = 0\n  mango = 0\n  orange = 0\n  basket = []", " \
    \   # s is the input string that contains the total number of apples, oranges\
    \ and mango fruits \n    # n represents the total number of fruits in the basket\n\
    \    # return the integer representing the total number of mango fruits in the\
    \ basket\n    if s == 'apple' and n == 'apple'\n        return 0\n    if s ==\
    \ 'apple' and n == 'mango'\n        return 1 \n    if s == 'mango' and n == 'apple'\n\
    \        return 2\n    if s == 'mango' and n == 'mango'\n        return 3\n  \
    \  if s == 'orange' and n == 'apple'\n        return 4\n    if s == 'orange' and\
    \ n == 'mango'\n        return 5\n    if s == 'orange' and n == 'orange'\n   \
    \     return 6\n    if s == 'banana' and n == 'mango'\n        return 7\n    if\
    \ s == 'banana' and n == 'banana'\n        return 8\n    return -1\nend", '  apple,
    orange, mango = 0, 0, 0', "  \nend\n  \n  ", "  s.to_i\nend\nfruit_distribution\
    \ \"100\"\n=> 4\nfruit_distribution \"101\"  \n=> 2\nfruit_distribution \"01110110\"\
    \n=> 0\n</code>\n<|/ a tags=ruby,string |>\n<| a |>\nWe can try a non-regex approach\
    \ with scan:\n<code>", "    # your code here\nend", "  \nend", "  apples = s.count(\"\
    a\")\n  oranges = s.count(\"o\")\n  mangos = s.count(\"m\")\n  \n  apple_count\
    \ = (apples * n).to_i\n  orange_count = (oranges * n).to_i\n  mango_count = (mangos\
    \ * n).to_i\n  \n  total_count = apple_count + orange_count + mango_count\n  return\
    \ mango_count if total_count == n \n  \n  # for easier testing in the console:\n\
    \  puts apple_count\n  puts orange_count\n  puts mango_count\n  puts total_count\n\
    end", "  apples = s.count(\"a\")\n  oranges = s.count(\"o\")\n  mango = s.count(\"\
    m\")\n  sums = apples + oranges + mango\n  \n  if sums <= n and n != 0\n  \n \
    \ else\n    return 0\n  end\nend", "  \nend", "  sum = 0\n  \n  for n in 0...s.length\n\
    \    if s.include?(\"mango\")\n      sum += n\n    end\n  end", "  n = n.to_i\n\
    \  if s.empty? \n    n\n  elsif s.include?('o')\n    n\n  elsif s.include?('a')\n\
    \    n - 1\n  elsif s.include?('m')\n    n + 1\n  else\n    n\n  end\nend\n</code>\n\
    I wrote a test in rspec to see my functions work and it works as expected.\n<code>\n\
    describe '#fruit_distribution' do\n  it 'works on single char string' do\n   \
    \ expect(fruit_distribution('o', 2)).to eq(2)\n  end\n  it 'works on no fruit'\
    \ do\n    expect(fruit_distribution('', 0)).to eq(0)\n  end\n  it 'works on multiple\
    \ fruit' do\n    expect(fruit_distribution('oa', 2)).to eq(1)\n  end\n  it 'works\
    \ on multiple fruit' do\n    expect(fruit_distribution('oam', 2)).to eq(3)\n \
    \ end\n  it 'works on multiple fruit' do\n    expect(fruit_distribution('oaa',\
    \ 2)).to eq(3)\n  end\n  it 'works on multiple fruit' do\n    expect(fruit_distribution('oaam',\
    \ 2)).to eq(5)\n  end\n  it 'works on multiple fruit' do\n    expect(fruit_distribution('oaamm',\
    \ 2)).to eq(7)\n  end\nend\n</code>\n<|/ a tags=algorithm,ruby |>\n<| c |>\nthanks\
    \ for the solution! it works and your explanation made it very easy to understand\
    \ the code. cheers!\n<|/ c |>\n<| a |>\nA simple brute force solution would be\
    \ to create all possible combinations of the two characters, add them all up and\
    \ then check if the number is in the range:\n<code>", "    puts \"The mango fruits\
    \ in the basket is #{s.count('mango')}\"\nend\nfruit_distribution(\"apples, oranges,\
    \ and mango fruits\", 15)", "  # write code here\nend\n</cell>\n<text>\nReturn\
    \ to the slides below.", "  apples_count = 0\n  oranges_count = 0\n  fruit_count\
    \ = 0\n  \n  for i in (0..n-1)\n    apples_count += s[i]\n    oranges_count +=\
    \ s[i].count('O')\n    fruit_count += s[i].count('M')\n    \n  apples_count +=\
    \ s[n-2]\n  oranges_count += s[n-2]\n  fruit_count += s[n-2]\n  \n  return fruit_count\n\
    end", "  # initialize empty array \n  fruits = []\n  i = 0\n  while (i+n <= s.length)\
    \ do\n    fruits.push(s[i])\n    i += 1\n  end\n  fruits.push(s[n])\n  return\
    \ fruits.count('mango')\nend", "  num_fruits = n\n  total = 0\n  apples = 0\n\
    \  oranges = 0\n  \n  s.split(\" \").each do |fruit| \n    fruit = fruit.to_i\n\
    \    next if fruit == 0\n    total += fruit\n    case fruit\n    when 1\n    \
    \  apples += 1\n    when 2\n      oranges += 1\n    when 3\n      num_fruits -=\
    \ fruit - 1\n    end\n  end\n  \n  return num_fruits if apples - oranges == 0\
    \ || total == apples - oranges\nend", "  return s.split(\" \").count {|f| (f ==\
    \ \"mango\") || f.include?(\"apple\") || f.include?(\"orange\")}\nend\nputs fruit_distribution(\"\
    3 4 5 apples 1 5 apples apples mango\", 15) # should output 6\nputs fruit_distribution(\"\
    3 4 5 apples 1 5 apples apples mango\", 11) # should output 0\nputs fruit_distribution(\"\
    3 4 5 apples 1 5 apples apples mango\", 6) # should output 0\nputs fruit_distribution(\"\
    3 4 5 apples 1 5 apples apples mango\", 4) # should output 0", "  \nend", "  \
    \  oranges = apples  =  0\n    mangoes = fruits  =  0\n    s.each_char { |x| x\
    \ =~ /[ao]/ ? oranges+=1 : apples+=1 }\n    fruits += oranges - (apples+oranges)\
    \ \n    mangoes += fruits-(apples+oranges) \n    n -= fruits\n    return mangoes\
    \ \nend\n</code>\n<|/ a dscore=1 tags=ruby |>\n<| c |>\nWhoa, this looks way more\
    \ complicated than I was expecting. Thanks for taking the time to explain.\n<|/\
    \ c |>\n<| c |>\nIt was a fun exercise for me.  Not a very efficient way but it\
    \ will get you started.  Ruby's `each_char` method yields a char and puts it into\
    \ the block.  So the block just increments a counter for each character it sees\
    \ and adds it to a variable.  So you count the number of `a` characters plus the\
    \ number of `o` characters, you count the number of `a` characters plus the number\
    \ of `a` characters minus one `o` character, etc...  Then you subtract it from\
    \ the total number of fruits in the basket to get the number of mango fruits.\
    \  I'm sure you could do this in one line but this way it can be understood.\n\
    <|/ c |>\n<| c |>\nOh, I see, that is pretty cool I like it. Thanks!\n<|/ c |>\n\
    <| c |>\nIt does seem like a lot more work, but is actually quite a bit easier.\n\
    <|/ c |>\n<| a |>\n<code>", "  # Return the number of mango fruits\n  mango =\
    \ 0\n  i = 0\n  while i < n\n    if (s[i] =~ /[om]/) && (s[i] =~ /[aeiou]/) &&\
    \ (s[i] =~ /[aeiou]/)\n      mango += s[i]\n    end\n    i += 1\n  end\n  return\
    \ mango\nend", "    # Your code here\n    numbers = n.to_i\n    apples, oranges,\
    \ mangoes = s.split(' ').map(&:to_i)\n    \n    apples_apples = apples + apples\
    \ \n    oranges_mangoes = oranges + mangoes \n    \n    total = (apples_apples\
    \ <= apples_mangoes) ? apples_apples : apples_mangoes\n    \n    return total\
    \ == numbers ? mangoes : total", "    apples, oranges = 0, 0\n    fruits = s.split(//)\n\
    \    fruits.each { |i| i if i.to_i > 0}.uniq.each { |i| apples += i.to_i }\n \
    \   fruits.each { |i| i if i.to_i > 0}.uniq.each { |i| oranges += i.to_i }\n \
    \   apples += oranges - apples.to_i\n    fruits.uniq.uniq.each { |i| apples -=\
    \ i.to_i }\n    apples += oranges - apples.to_i\n    return apples.to_i + n\n\
    end", "    # your code goes here\n    fruits_count = n.to_i\n    mangos = 0\n\
    \    apples = 0\n    for i in 0...fruits_count\n        if s[i] =~ /a/\n     \
    \       apples +=1\n        if s[i] =~ /m/\n            mangos += 1\n    return\
    \ mangos\nend", "  count = 0\n  \n  s = s.gsub(\" \",\"\")\n  s = s.gsub(/\\d/,\"\
    \")\n  s = s.split(\",\")\n  \n  fruit = s.count {|element| element == \"Mango\"\
    \ }\n  \n  count = s.count {|element| element == \"Orange\"}\n  \n  count = s.count\
    \ {|element| element == \"Apple\"}\n  \n  return count * fruit\nend", "  # initialize\
    \ counters\n  apples = 0\n  oranges = 0\n  mangoes = 0\n  \n  # initialize fruits\
    \ and count the fruits\n  fruits = s.split(\"\\n\")\n  fruits.each { |f| if f\
    \ =~ /apple/ then apples += 1 end; if f =~ /orange/ then oranges += 1 end; if\
    \ f =~ /mango/ then mangoes += 1 end}\n  \n  # return the correct mango number\n\
    \  return mangoes if (apples + oranges + mangoes) == n\nend\n</code>\n<|/ a |>\n\
    <| a tags=ruby dscore=2 |>\nA Ruby one-liner with Array#product:\n<code>\n[ \"\
    apples\", \"oranges\", \"mangoes\" ].product([3, 5]).min", "    # write code here\n\
    end", "  apples, oranges, mango = s.split\n  apples.to_i\n  oranges.to_i\n  mango.to_i\n\
    \  return mango\nend\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThanks for the explanation!\n\
    <|/ c |>\n<| a dscore=2 tags=ruby,regex,ruby-on-rails |>\nThe regular expression\
    \ can be written as follows:\n<code>\n\"1 apple and 2 oranges each\".gsub(/\\\
    d+\\s+\\w+/,\"3 apples and 5 oranges each\")\n</code>\nThe regular expression\
    \ matches all numbers, followed by one or more whitespace characters, followed\
    \ by one or more words (which could be written \\w instead).\n<|/ a |>\n<| c |>\n\
    Thanks! Very concise explanation.\n<|/ c |>\n<| c |>\n`\\w` matches all word characters\
    \ (`[a-zA-Z0-9_]`). It does not match the underscore.\n<|/ c |>\n<| c |>\nThanks,\
    \ I've edited the answer to reflect that.\n<|/ c |>\n<| a |>\nHere's a variant\
    \ of Swoveland's answer that returns an integer representing the number of mangoes\
    \ in the basket, rather than a string. It uses split, which is the natural way\
    \ of separating a string into its components, but it also returns the number of\
    \ apples and oranges separately. It uses a regular expression with capture groups\
    \ to return the first capture group from each, and that capture group represents\
    \ both apples and oranges. Then the integer sum is subtracted from the total number\
    \ of oranges and apples so that the sum of the two integers is the total number\
    \ of mangoes in the basket.\n<code>", "  s.split(\"\").each_with_index do |e,\
    \ i|\n      if e == \"o\" && s[i+1] == \"n\" && s[i+2] == \"g\" && s[i+3] == \"\
    o\"\n          return n\n      end\n  end\nend", "  apples = s.scan(/apple/)\n\
    \  oranges = s.scan(/orange/)\n  fruits =  apples + oranges\n  apples.zip(oranges).each_with_object({})\
    \ { |(apple, oranges), m| m[\"#{apple}_#{oranges}\"] = fruits - apples - oranges\
    \ }\n  fruits.to_i - apples.to_i - oranges.to_i\nend\nfruit_distribution(\"apple,\
    \ orange, mango, orange, apple, apple, apple, apple, apple, apple, apple, apple,\
    \ apple, apple, apple, apple, apple, apple, apple, apple, apple, apple, apple,\
    \ apple, apple, apple, apple, apple, apple, apple, apple, apple, apple, apple,\
    \ apple, apple, apple, apple, apple, apple, apple, apple, apple, apple, apple,\
    \ apple, apple, apple, apple, apple, apple, apple, apple, apple, apple, apple,\
    \ apple, apple, apple, apple, apple, apple, apple, apple, apple, apple, apple,\
    \ apple, apple, apple, apple, apple, apple, apple, apple, apple, apple, apple,\
    \ apple, apple, apple, apple, apple, apple, apple, apple, apple, apple, apple,\
    \ apple, apple, apple, apple, apple, apple, apple, apple, apple, apple, apple,\
    \ apple, apple, apple, apple, apple, apple, apple, apple, apple, apple, apple,\
    \ apple, apple, apple, apple, apple, apple, apple, apple, apple, apple, apple,\
    \ apple, apple, apple, apple, apple, apple, apple, apple, apple, apple, apple,\
    \ apple, apple, apple, apple, apple, apple, apple, apple, apple, apple, apple,\
    \ apple, apple, apple, apple, apple, apple, apple, apple, apple, apple, apple,\
    \ apple, apple, apple, apple, apple, apple, apple, apple, apple, apple, apple,\
    \ apple, apple, apple, apple, apple, apple, apple, apple, apple, apple, apple,\
    \ apple, apple, apple, apple, apple, apple, apple, apple, apple, apple, apple,\
    \ apple, apple, apple, apple, apple, apple, apple, apple, apple, apple, apple,\
    \ apple, apple, apple, apple, apple, apple, apple, apple, apple, apple, apple,\
    \ apple, apple, apple", "  \nend\nputs fruit_distribution(\"11\", 4)", "  m =\
    \ 0\n  s.split('').each_with_index do |f, i|\n    m += s.split('').count(f) if\
    \ f == 'o' || f == 'a'\n  end\n  m += n\n  m % 3 == 0 ? m : nil\nend", "  result\
    \ = 0\n  apple = s.count \"apple\"\n  orange = s.count \"orange\"\n  mango = s.count\
    \ \"mango\"\n  fruit = apple+orange+mango\n  if fruit <= n\n    result += mango\n\
    \  else\n    result += fruit-(n-fruit)\n  end\n  return result\nend\nputs fruit_distribution(\"\
    apples and oranges mango\", 8)", "  str = s\n  arr = []\n  while str.length >\
    \ 0\n    n = str[0]\n    str = str[1..str.length]\n    arr << n\n  end\n  return\
    \ arr.sum\nend", "   total= n.to_i\n   s.each do |f|\n   if f == \"apple\"\n \
    \      total= total - 1\n   elsif f == \"orange\"\n       total= total - 1\n \
    \  elsif  f == \"mango\"\n       total= total + 1\n   end\n   end\n   total\n\
    end", "  apple = 0\n  mango = 0\n  basket_size = s.size\n  s.each_char do |char|\n\
    \    if char == 'a'\n      apple += 1\n    elsif char == 'm'\n      mango += 1\n\
    \    elsif char == 'o'\n      apple += 1\n      mango += 1\n    end\n  end\n \
    \ mango = apple = mango / basket_size * n\n  return mango\nend", "  fruit_num\
    \ = s.split(//).map{|x| x.to_i}.sum\n  \n  return n - fruit_num\nend", '# input:
    s = "apples and oranges and apples and oranges and apples and oranges and mango"',
  "  s = 0\n  n = s.length\n  result = s.length - n\n  while result > 0\n    s +=\
    \ 1\n    result = s.length - n\n  end\n  s = s.length - n\n  while result > 0\n\
    \    s -= 1\n    result = s.length - n\n  end\n  return s\nend", "  apples = s.split(\"\
    \\n\")[0].split(\" \")[0].to_i\n  mango = s.split(\"\\n\")[0].split(\" \")[2].to_i\n\
    \  oranges = s.split(\"\\n\")[0].split(\" \")[1].to_i\n  fruit_basket = s.split(\"\
    \ \")[3..n]\n  mango_count = fruit_basket.count { |fruit| fruit == \"mango\" }\n\
    \  apples_count = fruit_basket.count { |fruit| fruit == \"apple\" }\n  oranges_count\
    \ = fruit_basket.count { |fruit| fruit == \"orange\" }\n  total_fruits = apples_count\
    \ + oranges_count + mango_count\n  return mango_count + apples_count - oranges_count\
    \ if mango_count >= apples_count && apples_count >= oranges_count && oranges_count\
    \ >= mango_count\n  apples_count - mango_count if apples_count >= mango_count\
    \ && oranges_count >= mango_count\n  oranges_count - mango_count if oranges_count\
    \ >= mango_count && apples_count >= mango_count\n  0\nend", "    apples = n\n\
    \    oranges = n - apples\n    return mangoes\nend\n</cell>\n<code language=julia-1.0>",
  "    fruits = {}\n    count = 0\n    for i in s\n        if fruits[i]\n        \
    \    count = count + 1\n    return count\nend", "  \n  ", "  s.split('').count\
    \ { |x| x.eql?('o') } + s.split('').count { |x| x.eql?('a') }\nend\n</code>\n\
    <|/ a |>\n<| c |>\nThank you for answering, can you please give me a example of\
    \ it?\n<|/ c |>\n<| c |>\nThe code is straightforward. Could you please explain\
    \ what it is that you don't understand about it?\n<|/ c |>\n<| c |>\nI understand\
    \ how you get the sum of the number of apples and oranges, but I don't know how\
    \ you get the sum of the number of fruits in the basket. Thank you for your time.\n\
    <|/ c |>\n<| c |>\nI added an example to the answer\n<|/ c |>\n<| c |>\nThank\
    \ you, now I understand.\n<|/ c |>\n<| a tags=ruby,string |>\nI would probably\
    \ do\n<code>", end, "</code>\nAnd here is my solution:\n<code>", "    \nend\n\
    </cell>\n<cell>", "  # TODO: return numbers of mango fruits in the basket\n  #\
    \ for example, s = '23' and n = 20 \n  # the return should be 1 \n  \n  # TODO:\
    \ add your code here\n  \nend\n</cell>\n<cell>\nputs fruit_distribution('13',20)\n\
    </cell>\n<text>\nNow that you have solved the problem I posted for you, go back\
    \ to your solution and compare it to the solution I provided.", "    count = 0\n\
    \    fruits = []\n    s.split(\" \").each do |fruit|\n        if fruit == \"apple\"\
    \n            count += 1\n        end\n        if fruit == \"mango\"\n       \
    \     fruits.push(fruit)\n        end\n    end", "  apples = s.count(\"a\")\n\
    \  oranges = s.count(\"o\")\n  mango = apples - oranges\n  return mango\nend \n\
    print fruit_distribution(\"baaooommmmmmmmooooaaaaaooo\", 2)", "    # write your\
    \ code in Ruby\n    count=0\n    count=count+1 if s.include?(\"a\")\n    count=count+1\
    \ if s.include?(\"o\")\n    count=count+1 if s.include?(\"m\")\n    count==n ?\
    \ true : false\nend", "    puts \"the total number of apples: #{s}\" \n    puts\
    \ \"the total number of oranges: #{n}\" \n    puts \"the total number of mango\
    \ fruits: #{s}-#{n}\" \nend\n</code>\n<|/ a dscore=1 tags=ruby |>\n<| c |>\nThanks\
    \ a lot! But what is the meaning of `a[:oranges] - (a[:apples] * a[:apples])`\
    \ ?\n<|/ c |>\n<| c |>\n`a[:oranges] - a[:apples] * a[:apples]` is equivalent\
    \ to `a[:oranges] - a[:apples]` because the quantity of apples times number of\
    \ oranges is the number of fruits.\n<|/ c |>\n<| c |>\nWhat does the `- a[:apples]\
    \ * a[:apples]` mean ?\n<|/ c |>\n<| c |>\nWhen you subtract `a[:oranges]` from\
    \ `a[:apples] * a[:apples]`, you get `a[:oranges]`. What would be the value of\
    \ subtracting `a[:apples]` from `a[:apples]`? How about `a[:oranges] - a[:apples]`?\
    \ What value does this return? Then what happens to the quantity of apples times\
    \ number of oranges? What does that subtraction do? Now what happens when you\
    \ add `a[:oranges]` to `a[:apples] * a[:apples]`? What does that do? Finally what\
    \ happens when you subtract `a[:oranges]` from `a[:apples] * a[:apples]`? What\
    \ does that do?\n<|/ c |>\n<| c |>\nThank you very much! Now it's clear.\n<|/\
    \ c |>\n<| a tags=ruby |>\nUsing Enumerable#inject:\n<code>\nfruit = 'apples,oranges,mango'.split(',')\n\
    apples = 'apples'\noranges = 'oranges'", "  apples = count('a',s)\n  oranges =\
    \ count('o',s)\n  mangos = count('m',s)\n  print apples, oranges, mangos\nend",
  "    return n\nend", "  apples, oranges, mangos = s.split(\",\")\n  apples = apples.to_i\n\
    \  oranges = oranges.to_i\n  mangos = mangos.to_i\n  return mangos - apples\n\
    end", "  # Your code here\n  \nend", "  apples = s.split('apple')\n  oranges =\
    \ s.split('orange')\n  mangos = s.split('mango')\n  apples.map{|i| fruits.to_i(i)}\
    \ \n  oranges.map{|i| fruits.to_i(i)} \n  mangos.map{|i| fruits.to_i(i)} \n  apples.sum\
    \ + oranges.sum + mangos.sum \nend\n</code>\n<|/ a dscore=0 tags=algorithm,ruby\
    \ |>\n<| c |>\nPlease explain how your solution works.\n<|/ c |>\n<| c |>\nThis\
    \ code was meant as a hint rather than a solution. I provided an answer which\
    \ would only apply to one kind of basket of fruits. What I was trying to do was\
    \ more like an approach to help the user understand what he needed to do.\n<|/\
    \ c |>\n<| a dscore=0 |>\nFirst I thought of counting the number of \"apples\"\
    \ in s + \"apple\".\nI decided to use regex to split on \"apple\". This gives\
    \ me an array with 4 elements. I then sum the numbers in the array. If I had to\
    \ do it again I might have used map, but that would be longer.\n<code>", "  fruits\
    \ = s.split(\" \")\n  fruits.count(\"mango\")\nend\n</cell>\n<cell>", "    apple,\
    \ orange, mango = 0, 0, 0, 0\n    for i in s.split() \n        if i == \"apples\"\
    \ then\n            apple += 1\n        elsif i == \"oranges\" then\n        \
    \    orange += 1\n        elsif i == \"mangos\" then\n            mango += 1\n\
    \        end\n    end\n    return mango + n if apple+orange+mango == n\n    return\
    \ apple+mango if apple+mango == n\n    return orange+mango if orange+mango ==\
    \ n\n    return mango+apple+n if mango+apple+n == n\nend\n</code>\nThis task is\
    \ much easier and you can see why your code returns different results than your\
    \ expected result:\n<code>\napples, oranges, and mango fruits.", "</code>\n<|/\
    \ q tags=ruby dscore=0 |>\n<| c |>\nHow is your question different from the one\
    \ you asked earlier today? http://stackoverflow.com/questions/24090693/how-to-calculate-the-number-of-times-a-char-appears-in-a-string\n\
    <|/ c |>\n<| c |>\nI don't think that question is completely different from my\
    \ one. I was trying to put an extra feature in it but failed. So I posted again\
    \ for another answer. Could you please take a look at it? Thanks.\n<|/ c |>\n\
    <| c |>\nYour previous question's answer was the one you were looking for since\
    \ it also provided a way to calculate the number of times each letter appears\
    \ in your string.\n<|/ c |>\n<| c |>\nOh, you are right, I misread your comment\
    \ and thought you saw my previous question. I will take a look at your answer\
    \ too.\n<|/ c |>\n<| c |>\nNo worries, I understand your frustration. I'm glad\
    \ I could help.\n<|/ c |>\n<| a tags=ruby |>\n<code>", "  \nend", "  s.split(\"\
    , \")\n  n.to_i\nend", "  # Example Input:\n  # s = \"11\"\n  # n = 7\n  # Example\
    \ Output:\n  # 2\n  # Explanation: There is 7 oranges in the basket and 11 apples.\n\
    \  return 0 #your solution here", "    total = (n*2).to_i\n    return s.to_i(total-n).to_i\n\
    end", "    s_arr = s.split(',')\n    count = 0\n    for i in s_arr\n        count\
    \ += i\n    \n    arr = n.split(',')\n    for i in arr\n        count += i\n \
    \       \n    return count / n\nend", "  s.split(' ').each_with_index do |fruit,\
    \ n| \n    fruits.include?(fruit) ? fruits << fruit : fruits << fruit \n  end\
    \ \n  puts fruits if fruits.length == n\n  fruit_distribution(fruits, n)\nend",
  "  s.to_i\n  n.to_i\n  fruits = n.times.collect {|x| s.next}\n  fruits.select {|x|\
    \ x =~ /m/}\nend\nfruit_distribution(\"apples oranges mango\", 5)\n</code>\n<|/\
    \ a |>\n<| c |>\nI like that idea. Nice.\n<|/ c |>\n<| c |>\nI was thinking about\
    \ using a \"stack\" to do it and I wondered if there was some way to do it without\
    \ that stack.\n<|/ c |>\n<| a tags=ruby,string,ruby-on-rails dscore=0 |>\nAnother\
    \ possible implementation would be to use Array#permutation:\n<code>", "    fruits\
    \ = string.split(s)\n    apples, oranges, mangoes = 0, 0, 0\n    fruits.each do\
    \ |fruit|\n        if fruit == \"apples\"\n            apples +=1\n        elsif\
    \ fruit == \"oranges\"\n            oranges +=1\n        elsif fruit == \"mangoes\"\
    \n            mangoes +=1\n        end\n    end\n    \n    if apples < oranges\
    \ < mangoes\n        mangoes\n    else\n        (oranges+apples)*(mangoes+1)\n\
    \    end\nend", "    # Input:\n    # s = '1 3'\n    # n = 4\n    # Output: 3\n\
    \    \n    # Input:\n    # s = '1 4'\n    # n = 4\n    # Output: 1\n    \n   \
    \ # Input:\n    # s = '1 2'\n    # n = 3\n    # Output: 1\n    \n    # Input:\n\
    \    # s = '2 0'\n    # n = 1\n    # Output: 0\n    \n    # Input:\n    # s =\
    \ '3 1'\n    # n = 2\n    # Output: 0\n    \n    # Input:\n    # s = '1 2'\n \
    \   # n = 3\n    # Output: 1\n    \n    # Input:\n    # s = '2 3'\n    # n = 3\n\
    \    # Output: 0\n    \n    # Input:\n    # s = '3 1'\n    # n = 2\n    # Output:\
    \ 0\n    \n    # Input:\n    # s = '2 4'\n    # n = 3\n    # Output: 0\n    \n\
    \    # Input:\n    # s = '2 2'\n    # n = 4\n    # Output: 1\n    \n    # Input:\n\
    \    # s = '3 2'\n    # n = 4\n    # Output: 1\n    \n    # Input:\n    # s =\
    \ '4 3'\n    # n = 4\n    # Output: 0\n    \n    # Input:\n    # s = '5 0'\n \
    \   # n = 1\n    # Output: 0\n    \n    # Input:\n    # s = '1 5'\n    # n = 4\n\
    \    # Output: 4\n    \n    # Input:\n    # s = '1 5'\n    # n = 5\n    # Output:\
    \ 5\n    \n    # Input:\n    # s = '1 5'\n    # n = 4\n    # Output: 4\n    \n\
    \    # Input:\n    # s = '2 5'\n    # n = 4\n    # Output: 1\n    \n    # Input:\n\
    \    # s = '2 5'\n    # n = 5\n    # Output: 5\n    \n    # Input:\n    # s =\
    \ '5 5'\n    # n = 5\n    # Output: 5\n    \n    # Input:\n    # s = '2 5'\n \
    \   # n = 5\n    # Output: 1\n    \n    # Input:\n    # s = '0 2'\n    # n = 1\n\
    \    # Output: 2\n    \n    # Input:\n    # s = '5 0'\n    # n = 1\n    # Output:\
    \ 0\n    \n    # Input:\n    # s = '2 0'\n    # n = 1\n    # Output: 2\n    \n\
    \    # Input:\n    # s = '0 0'\n    # n = 1\n    # Output: 0\n    \n    # Input:\n\
    \    # s = '1 3'\n    # n = 3\n    # Output: 3\n    \n    # Input:\n    # s =\
    \ '5 5'\n    # n = 5\n    # Output: 5\n    \n", "    \nend", "  apples = 0\n \
    \ oranges = 0\n  mangoes = 0\n  count = 0\n  s.split('').reverse.each do |i| \n\
    \    if i.to_i == 0 \n      count = count+1\n      break if count == n\n    elsif\
    \ i.to_i == 1\n      oranges = oranges + 1\n      break if oranges == n\n    elsif\
    \ i.to_i == 2\n      apples = apples + 1\n      break if apples == n\n    elsif\
    \ i.to_i == 3\n      mangoes = mangoes + 1\n      break if mangoes == n\n    elsif\
    \ i.to_i == 4\n      mangoes = mangoes + 1\n      count = count+1\n      break\
    \ if count == n\n    end\n  end\n  return mangoes\nend", "    # Your code here\n\
    \    if s.include?('mango') && n%12 == 0\n        return n\n    end\n    return\
    \ 0\nend", " \n ", "  # write your code here\nend", "  \nend\n</cell>\n<code language=julia-0.6>\n\
    @time fruit_distribution(s, n)\n</cell>\n<code language=julia-0.6>\nusing BenchmarkTools\n\
    @btime fruit_distribution(s, n)\n</cell>\n<text>\nQ. Now let's consider what happens\
    \ when you remove an element. \nA. The number of elements in the list is reduced\
    \ by one. \nB. The last element is deleted. \nC. If you have more than one element,\
    \ then the second last element is deleted. \nD. All elements are deleted. The\
    \ first element remains.\nExample: \nInput: s = [\"a\",\"b\",\"c\"] and n = 2\
    \ \nOutput: [\"a\", \"c\"]", "    apples = 0\n    oranges = 0\n    mangoes = 0\n\
    \    i = 0\n    while i < n do\n        if s[i] == \"a\" then\n            apples\
    \ +=1\n        elseif s[i] == \"o\" then\n            oranges +=1\n        else\n\
    \            mangoes +=1\n        end\n        i += 1\n    end\n    \n    return\
    \ mangoes\nend", "  s = s # string that represents number of apples and oranges\
    \ in the basket\n  n = n # integer that represents number of fruits in basket\n\
    \  i = 0 # integer that represents current index \n  n = n # integer that represents\
    \ number of fruits in basket\n  fruit = \"\" # string that represents current\
    \ fruit in the basket \n  while i < n\n    fruit += s[i]\n    i += 1\n    i +=\
    \ 1\n  i = 0 # integer that represents current index \n  n = (n - i - 1) # integer\
    \ that represents number of fruits in basket\n  while i < n\n    fruit += s[i]\n\
    \    i += 1\n    i += 1\n  i = 0 # integer that represents current index \n  n\
    \ = (n - i - 1) # integer that represents number of fruits in basket\n  while\
    \ i < n\n    fruit += s[i]\n    i += 1\n    i += 1\n  i = 2 # integer that represents\
    \ current index \n  n = (n - i - 1) # integer that represents number of fruits\
    \ in basket\n  while i < n\n    fruit += s[i]\n    i += 1\n    i += 1\n  i = 0\
    \ # integer that represents current index \n  n = (n - i - 1) # integer that represents\
    \ number of fruits in basket\n  while i < n\n    fruit += s[i]\n    i += 1\n \
    \   i += 1\n  return n\nend\n</cell>\n<code language=julia-1.2>", "    fruits\
    \ = s.split(//)\n    mango = 0\n    count = 0\n    fruit = fruits[4]\n    count\
    \ += fruit.count(\"a\")\n    count += fruit.count(\"e\")\n    count += fruit.count(\"\
    i\")\n    count += fruit.count(\"o\")\n    count += fruit.count(\"u\")\n    mango\
    \ = count if count == n else 0\n    puts \"the mango fruits are: #{mango}\"\n\
    end", "  fruits = Array.new\n  fruits.push(\"apples\")\n  fruits.push(\"mango\"\
    )\n  fruits.push(\"oranges\")", "  # write code here\n  arr = s.split(\"\")\n\
    \  arr.select{|x| x.to_i != x}\n  return n if arr.count <= n\n  arr.count.to_f\
    \ / arr.size\nend\n</code>\n<|/ a dscore=3 |>\n<| c |>\nThis doesn't answer the\
    \ question, since you were asked to do it without using the `count` method (`count`\
    \ is a method on arrays, not String). Also the question is asking for `return\
    \ n if arr.count <= n`, not `return n if arr.size <= n`\n<|/ c |>\n<| c |>\nYes,\
    \ I agree with you, I just updated my answer and I believe that this is now correct.\n\
    <|/ c |>\n<| a |>\n<code>", "  s.split(//) #returns a new array based on the separator\n\
    \  new_s.size # returns the size of the new array\nend\nfruit_distribution(\"\
    orange,apple,mango,orange,mango\", 10)", "  count = s.count(\"apples\")\n  count_of_apples\
    \ = s.count(\"apples\")\n  count_of_oranges = s.count(\"oranges\")\n  return count_of_oranges\
    \ / (n*count) + count_of_apples / (n*count_of_oranges)\nend", "  count = s.scan(/\\\
    d+/)\n  puts count.length\n  puts count\n  puts n.length\n  puts n\nend", "  num\
    \ = 0\n  apples = 0\n  oranges = 0\n  while n > 0\n    fruit = s[apples.to_s.length..-1]\n\
    \    if fruit == \"apple\"\n      apples += 1\n      n -= 1\n    elsif fruit ==\
    \ \"mango\"\n      num += 1\n      n -= 1\n    elsif fruit == \"orange\"\n   \
    \   oranges += 1\n      n -= 1\n    end\n  end\n  num\nend\n</code>\nThe output\
    \ should be the integer 7.\n<|/ a |>\n<| c |>\nWhat does this line do? \"fruit\
    \ = s[apples.to_s.length..-1]\"\n<|/ c |>\n<| c |>\nIt slices the string from\
    \ the starting index to the final index. Since apples starts from index 0 and\
    \ the length of the string is also the starting index, the result is s[0..length-of-apples-1].\
    \ Hope it helps!\n<|/ c |>\n<| c |>\nOk I think I understand what you are saying.\
    \ My question is what does it mean when I slice a string?\n<|/ c |>\n<| c |>\n\
    Yes, I see what you are saying now. Thanks!\n<|/ c |>\n<| c |>\nJust to point\
    \ out what I think your code is doing, `s` is the string to slice, `n` is the\
    \ starting index for the slice, and `apples.to_s.length` is the ending index for\
    \ the slice. So, `fruit` is getting assigned the slice of `s` from index `apples.to_s.length`\
    \ to the last index of the string. `apples.to_s.length..-1` creates a range object\
    \ from `apples.to_s.length` to the last index of the string.\n<|/ c |>\n<| a tags=ruby,algorithm,string\
    \ |>\n<code>", "  \nend", "    apples, oranges, mangos = s.split(\"\\n\").map\
    \ {|s| s.to_i}\n    totals = apples + oranges + mangos\n    apples /= totals\n\
    \    oranges /= totals\n    mangos /= totals\n    # now do what ever you need\n\
    \    unless mangos == n\n        \"Error! The total of the apples, oranges, and\
    \ mangos are not equal\"\n    end \n    return mangos\nend", "    count = 0\n\
    \    fruits = s.split(';')\n    fruits.each do |fruit|\n        if fruit.include?('mango')\
    \ \n            count +=1\n            puts count\n            count\n       \
    \ end\n    end\nend", "  return n\nend", "  arr = s.split(//)\n  arr.each do |i|\n\
    \    return n if i.to_i ==  '0'\n  end\nend\n</code>\n<|/ a tags=ruby |>\n<| c\
    \ |>\nYour code fails on `fruit_distribution(\"12\", 2)` because `'12'.to_i` returns\
    \ `12`\n<|/ c |>\n<| c |>\nThank you for point it out. Fixed.\n<|/ c |>\n<| a\
    \ dscore=0 |>\n<code>", " \n  apple = 0\n  mango = 0\n  orange = 0\n  \n  for\
    \ i in n.split(\"\") do\n    \n    if i == \"a\"\n      apple += 1\n    \n   \
    \ elsif i == \"o\"\n      orange += 1\n    \n    elsif i == \"m\"\n      mango\
    \ += 1\n    end\n  end\n  \n  return mango\nend\n</cell>\n<text>\nSolution\nRun\
    \ the cell below to check your solution.", "    # your code here\n    return 0",
  "    total = 0\n    count = 0\n    fruits = {}\n    while n > 0\n        total =\
    \ total + s.match(/\\d+/).to_i\n        fruits[s] = count\n        count +=1\n\
    \        s = s.slice(0,s.length-1)\n        n -= 1\n    return fruits[mango]\n\
    end\n</code>\n<|/ a tags=ruby,regex |>\n<| c |>\nWhile this code may answer the\
    \ question, providing additional context regarding how and/or why it solves the\
    \ problem would improve the answer's long-term value.\n<|/ c |>\n<| c |>\nThanks\
    \ for the suggestion. I've added the code.\n<|/ c |>\n<| c |>\nHi, thanks for\
    \ your reply. I am new to ruby and i am trying to learn how things work. My teacher\
    \ gave us a challenge to complete and i have been trying to solve it for a couple\
    \ days now. I tried your code and it was very close, but i am still getting an\
    \ invalid argument error on the first while loop. I am still very confused with\
    \ this language and all those functions you guys talked about.\n<|/ c |>\n<| a\
    \ dscore=0 |>\nHere's my take:\n<code>", "    apple = s.count(\"a\")\n    orange\
    \ = s.count(\"o\")\n    mango = s.count(\"m\")\n    basket = apple+orange+mango",
  "  num = 0\n  fruits = s[(s.length):].split(' ') \n  fruits.each do |fruit| \n \
    \   num += 1\n  end\n  return num\nend", "    # Write your code here\n  \n   \
    \ return 0\nend\nputs fruit_distribution(%w{apples apples apples oranges oranges\
    \ mangoes mangos mangos apples mangos}, 3)", "  apples = n.to_s\n  oranges = s.to_s\n\
    \  apples_oranges = apples + oranges\n  apples_oranges.each_char.with_index.map\
    \ {|i,j| [j, apples_oranges[i].to_i]}.\n    sort.uniq.first\nend", "    # @return\
    \ an integer that represents the number of fruits in the basket\n    if n.zero?\n\
    \        return 0\n    end\n    apples = s.scan(/[^aeiou]/)\n    oranges = s.scan(/[aeiou]/)\n\
    \    mango = apples.select { |x| x != \"a\"}.count - oranges.select { |x| x !=\
    \ \"a\"}.count - apples.count - oranges.count\n    \n    puts \"The mango fruit\
    \ is #{mango}\" if n > mango\n    return mango\nend\nfruit_distribution(\"mango\"\
    , 20)\n ", "  \nend", "  count = 0\n  s.split(//)\n  n.split(//)\n  n.count.times\
    \ do |i|\n    fruits = s.slice!(i..)\n    fruits == nil ? nil : fruits.count\n\
    \  end\nend", "    return n.to_s\nend", "    \n    # Initialize number of apples\
    \ and oranges to 0\n    apples = 0\n    oranges = 0\n    \n    # Initialize number\
    \ of mango fruits as 0\n    mango = 0\n    \n    # Iterate through the string\
    \ and count the number of \n    # apples and oranges found\n    for i in s\n \
    \       if i.eq(\"a\")\n            apples+=1\n        if i.eq(\"o\")\n      \
    \      oranges+=1\n        if i.eq(\"m\")\n            mango+=1\n            \n\
    \    # Calculate the total number of mango fruits\n    mango_total = (apples *\
    \ oranges) * mango\n    \n    # Return the number of mango fruits\n    return\
    \ mango_total\nend\n</cell>\n<code language=julia-1.4>", "  fruits_distributions\
    \ = n.times.map{|i| s.split(\"\")[i]}\n  fruits_distributions.count(\"M\")\nend",
  "  count=0\n  fruits = [\"apple\", \"orange\", \"mango\"]\n  i=0\n  while i<=n\n\
    \  s.delete(0)\n  i+=1\n  end\n  for i in 0 ... fruits.length\n  if s[i]==\"a\"\
    \n    count+=1\n  end\n  i+=1\n  end\n  puts count\nend\nfruit_distribution(\"\
    banana mango apple orange\",4)", "  \n  num_oranges = (n/2) - (s/2)\n  \n  mango_fruits_count\
    \ = 0\n  \n  if num_oranges < s\n    num_oranges\n  \n  else\n    num_oranges\n\
    \    \n  end \n  \nend", "    apples = 0\n    oranges = 0\n    mangos = 0\n  \
    \  for i in 0...s.length\n        if s[i] == \"a\"\n            apples++\n   \
    \     else if s[i] == \"o\"\n            oranges++\n        else if s[i] == \"\
    m\"\n            mangos++\n        end if\n    end for\n    puts apples\n    puts\
    \ oranges\n    puts mangos\n    puts n\nend", "  apple, orange, mango = 0, n,\
    \ 0\n  for i in s \n    if i == \"O\" \n      orange += 1 \n    elsif i == \"\
    A\" \n      apple += 1 \n    elsif i == \"M\" \n      mango += 1 \n  return mango\n\
    end", "  fruits = s.split(//)\n  apples, oranges, mangos = fruits.count, fruits.count,\
    \ 0\n  fruits.each do |fruit|\n    if(fruit==\"apple\") then apples += 1 else\
    \ mangos += 1 if fruit==\"mango\" then mangos += 1 end\n  end\n  return mangos\n\
    end", " \n   apples = n[0]\n   oranges = n[1]\n   mangoes = n[2]\n \n   apple\
    \ = apples.to_i\n   mango = mangoes.to_i\n \n   if mango == 0 && apples == 0\n\
    \     return 0\n   elsif apples == 0 && oranges == 0\n     return 0\n   elsif\
    \ apples == 0 || oranges == 0\n     return 0\n   elsif mango == 0 || apples ==\
    \ 0 || oranges == 0\n     return 0\n   elsif apples == 0 || apples == mango ||\
    \ oranges == mango\n     return mango\n   elsif apples == mango || apples == mango\
    \ || oranges == mango\n     return mango\n   else\n     return 0\n   end\n \n\
    \ end\n \n # Example:\n s = # '3\\n2\\n0'\n n = # '3\\n2\\n0'\n p #=> 4\n \n \n\
    \ # Note:\n # The given string is not empty and contains only digits \n # The\
    \ sum of the integers in the string is a valid integer \n # The total number of\
    \ fruits in the basket is a valid integer \n # The number of apples, oranges,\
    \ and mango fruits in the basket is a valid integer \n # The total number of fruits\
    \ = 3*(2+2) = 6\n \n \n # Follow up:\n # A solution using only integer operations\
    \ is more efficient than one using string operations \n \n # DO NOT USE LOOPS,\
    \ MAP, FILTER, STRUCTURES etc.\n \n # BEGIN PROBLEM SOLVING CODE\n \n # n = s.split.map(&:to_i)\n\
    \ # apples = n[0]\n # oranges = n[1]\n # mangoes = n[2]\n \n # apple = apples.to_i\n\
    \ # mango = mangoes.to_i\n \n # if mango == 0 && apples == 0\n #   return 0\n\
    \ # elsif apples == 0 && oranges == 0\n #   return 0\n # elsif apples == 0 ||\
    \ oranges == 0\n #   return 0\n # elsif mango == 0 || apples == 0 || oranges ==\
    \ 0\n #   return 0\n # elsif apples == 0 || apples == mango || oranges == mango\n\
    \ #   return mango\n # elsif apples == mango || apples == mango || oranges ==\
    \ mango\n #   return mango\n # else\n #   return 0\n # end\n \n \n # END PROBLE",
  "  # return n\nend", "    # your code here\n    apples = 0\n    oranges = 0\n  \
    \  mangos = 0", "  return n\nend", "  count = 0\n  fruits = s.to_s.split(//)\n\
    \  fruits.each do |f|\n    if f == \"apples\" || f == \"mango\" || f == \"oranges\"\
    \n      count += 1\n    end\n  end\n  return count\nend", "    # your solution\
    \ here\n    # your solution here\n    # your solution here\n    # your solution\
    \ here\n    # your solution here\n    # your solution here\n    # your solution\
    \ here\n    # your solution here\n    # your solution here\n    # your solution\
    \ here\n    # your solution here\n    # your solution here\n    # your solution\
    \ here\n    # your solution here\n    # your solution here\n    # your solution\
    \ here\n    # your solution here\n    # your solution here\n    # your solution\
    \ here\n    # your solution here\n    # your solution here\n    # your solution\
    \ here\n    # your solution here\n    # your solution here\n    # your solution\
    \ here\n    # your solution here\n    # your solution here\n    # your solution\
    \ here\n    # your solution here\n    # your solution here\n    # your solution\
    \ here\n    # your solution here\n    # your solution here\n    # your solution\
    \ here\n    # your solution here\n    # your solution here\n    # your solution\
    \ here\n    # your solution here\n    # your solution here\n    # your solution\
    \ here\n    # your solution here\n    # your solution here\n    # your solution\
    \ here\n    # your solution here\n    # your solution here\n    # your solution\
    \ here\n    # your solution here\n    # your solution here\n    # your solution\
    \ here\n    # your solution here\n    # your solution here\n    # your solution\
    \ here\n    # your solution here\n    # your solution here\n    # your solution\
    \ here\n    # your solution here\n    # your solution here\n    # your solution\
    \ here\n    # your solution here\n    # your solution here\n    # your solution\
    \ here\n    # your solution here\n    # your solution here\n    # your solution\
    \ here\n    # your solution here\n    # your solution here\n    # your solution\
    \ here\n    # your solution here\n    # your solution here\n    # your solution\
    \ here\n    # your solution here\n    # your solution here\n    # your solution\
    \ here\n    # your solution here\n    # your solution here\n    # your solution\
    \ here\n    # your solution here\n    # your solution here\n    # your solution\
    \ here\n    # your solution here\n    # your solution here\n    # your solution\
    \ here\n    # your solution here\n    # your solution here\n    # your solution\
    \ here\n    # your solution here\n    # your solution here\n    # your solution\
    \ here\n    # your solution here\n    # your solution here\n    # your solution\
    \ here\n    # your solution here\n    # your solution here\n    # your solution\
    \ here\n    # your solution here\n    # your solution here\n    # your solution\
    \ here\n    # your solution here\n    # your solution here\n    # your solution\
    \ here\n    # your solution here\n    # your solution here\n    # your ", "  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "  \nend\n</cell>\n\
    <cell>", "  fruits = %w{apple orange mango}\n  s.split(' ').map.with_index do\
    \ |n,i| fruits.include?(n) ? fruits.index(n) end\nend", "  apple = s.count('a')\n\
    \  orange = s.count('o')\n  mango = s.count('m')\n  return apple+orange+mango\n\
    end\nputs fruit_distribution('aoea',3)", "  s.to_s.split(', ')\n  n.to_i\n  s.split(',\
    \ ').count('apple') - s.split(', ').count('orange')\n  s.split(', ').count('mango')\n\
    end\n</code>\nI tried to do everything in the method, but there were only 3 lines\
    \ to do.\n<|/ a tags=ruby |>\n<| c |>\nI like the way you made the code more readable.\
    \ I've been trying to learn ruby for a few months now and this is helpful.\n<|/\
    \ c |>\n<| a |>\nTo answer the original question:\n<code>", "    fruits = n.to_i\n\
    \    return s.to_i\nend", "  apples, oranges, mango = s.split(' ')\n  apples,\
    \ oranges, mango = [int(x) for x in [apples, oranges, mango]]\n  return mango\
    \ - (apples + oranges + (n*2))\nend", "  # write your code here\nend", "    count=0\n\
    \    fruit=s.split(' ') \n    \n    #for each fruit in the basket\n    for i in\
    \ fruit\n        #count if in basket \n        if i !='mango' and i !='apple'\n\
    \            count+=n\n        \n    return count", "  count = {}\n  apples =\
    \ ''\n  oranges = ''\n  mangoes = ''\n  count = 0\n  apples = s.count('a')\n \
    \ oranges = s.count('o')\n  mangoes = s.count('m')\n  if apples > oranges and\
    \ apples > mangoes :\n    count[n] = mangoes + 1\n  elsif oranges > apples and\
    \ oranges > mangoes :\n    count[n] = mangoes + 1\n  else :\n    count[n] = mangoes\
    \ + 1\n  return count\nend", "end\n  ", "  \nend", "    apple = 0\n    orange\
    \ = 0\n    mango = 0\n    if s == \"apple\"\n        apple = 1\n    end\n    if\
    \ s == \"orange\"\n        orange = 1\n    end\n    if s == \"mango\"\n      \
    \  mango = 1\n    end\n    return n * (apple + orange + mango)\nend", "  \n  #\n\
    \  # Write your code here\n  # ", "  apples, oranges, mangos = 0, 0, 0\n  fruits\
    \ = s.split(\",\")\n  fruits.each do |f|\n    if f == \"apples\" || f == \"oranges\"\
    \n      apples << f.to_i\n    elsif f == \"mango\"\n      mangos << f.to_i\n \
    \   else\n      raise \"invalid fruit\"\n    end\n  end\n  if apples.odd? and\
    \ oranges.odd? and mangos.odd?\n    raise \"Invalid fruit distribution\"\n  end\n\
    \  mangos.each { |f| n += f }\nend", "    apples_count = 0\n    oranges_count\
    \ = 0\n    mangoes_count = 0\n    fruit = s.split(//)\n    fruit.each do |fruit|\n\
    \        if fruit == \"apples\" then\n            apples_count += n\n        elsif\
    \ fruit == \"oranges\" then\n            oranges_count += n\n        elsif fruit\
    \ == \"mangoes\" then\n            mangoes_count += n\n        end\n    end\n\
    \    return mangoes_count\nend\nprint(fruit_distribution(\"apples, oranges and\
    \ mangoes\", 5))", '# Inputs:', "  apples = 0\n  oranges = 0\n  mangos = 0\n \
    \ count = 0\n  fruit = s.to_s", "  counts = Hash.new(0)\n  fruits = s.split('\
    \ ') # [\"apples\", \"oranges\", \"mango\"]\n  fruits.each do |fruit|\n    counts[fruit]\
    \ += n\n  end\n  counts.each do |fruit, count|\n    puts fruit if count >= n\n\
    \  end\n  \nend", " \n  apples_or_mangos = (\"apples\").to_i\n  oranges_or_mangos\
    \ = (\"oranges\").to_i\n  apples_or_mangos = apples_or_mangos - oranges_or_mangos\n\
    \  apples = apples_or_mangos.to_i\n  oranges = oranges_or_mangos.to_i\n  apples\
    \ = apples - oranges\n  apples = apples % n\n  oranges = n - apples\n  mangos\
    \ = oranges * 2\n  return mangos\nend", "  a = []\n  b = s.scan(/\\d+/).map {|x|\
    \ x.to_i}\n  c.select {|x| a[x] = b[x]}\nend", "\ts.to_i\n\tn.to_i\n\tbasket =\
    \ []\n\tapples = 0\n\toranges = 0\n\twhile apples < n and oranges < n\n\t\tfruit\
    \ = s.next\n\t\tif fruit == 'apple'\n\t\t\tapples += 1 # number of apples \n\t\
    \t\tbasket.push 'apple'\n\t\telsif fruit == 'orange'\n\t\t\toranges += 1 # number\
    \ of oranges\n\t\t\tbasket.push 'orange'\n\t\telse\n\t\t\tbasket.push fruit\n\t\
    \tend\n\tend\n\tbasket.count 'mango' \nend\nprint fruit_distribution(\"apple mango\
    \ mango apple orange orange mango orange apple orange mango\", 10)\nputs fruit_distribution(\"\
    apple mango mango orange orange mango mango mango orange mango mango mango apple\
    \ orange mango mango\", 100)\n</cell>\n<text>\nProblem 7: Write a method fruit_distribution\
    \ which takes an array of strings s and an integer n \nand returns the number\
    \ of fruits in s in orderly form; where each element of the array is either a\
    \ \nfruit or blank. Return the count of blank strings in the array.\nHint: Use\
    \ Ruby's each_with_index method on the array of strings to obtain the index of\
    \ each element and \nthen you can check to see if the index value is even, or\
    \ odd.", "  \nend", "  \nend", "    sum = 0\n    i = 0\n    while (i < n)\n  \
    \      sum += s[i]\n        i += 1\n    if (sum % 2 == 1)\n        return -1\n\
    \    i = 0\n    while (i < n)\n        if (s[i] == \"m\")\n            return\
    \ i\n        i += 1\n    return -1\nend\n</cell>\n<code language=julia-0.5>",
  "  sum = 0\n  arr = s.split(//)\n  fruits = Array.new(n)\n  arr[0...n].each do |i|\n\
    \    fruits << i.to_i\n  end\n  fruits << 0\n  arr[n...n+n].each do |j|\n    sum\
    \ += j.to_i\n  end\n  return sum - fruits # this is the total number of mango\
    \ fruits.\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for your detailed\
    \ answer, the problem is that I can't use regexp at all in ruby so this won't\
    \ work. I know it's silly, but thanks for the quick reply though.\n<|/ c |>\n\
    <| a tags=ruby dscore=0 |>\nI really like the solution of using Array#sum, however,\
    \ the challenge seems to be more about splitting the string into substrings of\
    \ length n, where n is the number of fruits in the basket.\nI believe that splitting\
    \ the string into a subarray of length n and then summing the subarrays with Array#sum\
    \ would be a great solution (I upvoted it :-) ) except that the Array#sum method\
    \ only accepts an array of integers as the second argument. So, you can either\
    \ convert all your integers into strings (by calling to_s) or you can convert\
    \ the integer into an array of integers by using the Array.new(n, integer_to_string)\
    \ method.\nHere are two ways to do this:\n<code>", "    apples = s.count(\"a\"\
    )\n    oranges = s.count(\"o\")\n    fruit = apples + oranges\n    \n    \n  \
    \  \n    if fruit <= n and fruit >= apples * 0.5:\n        return (apples * n\
    \ - fruit) * 0.5\n    else :\n        return -1\n    \nprint(solution(\"applesaorangesomangoapplesorangesaapplesomango\"\
    , 7))\n</cell>\n<text>\nQ8. Write a program to find the number of ways to divide\
    \ 2 numbers \nwhere the difference between them is 10. Ex: 4 and 15 should be\
    \ divided to have difference 10 \nand 2 ways. Write this program as a function.\
    \ \nThe function should take two inputs and return an integer.\nFor Example, if\
    \ the function is called with two input 4 and 15, it should return 2.", "    apples\
    \ = s.scan(/apple/)\n    oranges = s.scan(/orange/)\n    mangos = s.scan(/mango/)\n\
    \    \n    count = (apples + oranges + mangos).to_i #counts how many items in\
    \ basket \n    # count is the number of apples, oranges, and mango fruits in the\
    \ basket\n    \n    \n    \n    \n    \n    \nend\n    ", "  apples, oranges,\
    \ mangos = s.split(' ').map(&:to_i)\n  return (mangos - oranges - apples) % n\n\
    end\nfruit_distribution(\"2 3 4\", 1)", "  # Solution here\n  \nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
