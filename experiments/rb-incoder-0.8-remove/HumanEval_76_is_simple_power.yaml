name: HumanEval_76_is_simple_power
language: rb
prompt: "# Your task is to write a function that returns true if a number x is a simple\n\
  # power of n and false in other cases.\n# x is a simple power of n if n**int=x\n\
  # For example:\ndef is_simple_power(x, n)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_simple_power\n\
  \    candidate = method(:is_simple_power)\n    assert_equal(true, candidate.call(16,\
  \ 2))\n    assert_equal(false, candidate.call(143214, 16))\n    assert_equal(true,\
  \ candidate.call(4, 2))\n    assert_equal(true, candidate.call(9, 3))\n    assert_equal(true,\
  \ candidate.call(16, 4))\n    assert_equal(false, candidate.call(24, 2))\n    assert_equal(false,\
  \ candidate.call(128, 4))\n    assert_equal(false, candidate.call(12, 6))\n    assert_equal(true,\
  \ candidate.call(1, 1))\n    assert_equal(true, candidate.call(1, 12))\n  end\n\
  end\n"
completions: ["   if n <= 0\n      return false\n   end\n   if n % x == 0\n      return\
    \ false\n   end\n   return true\nend\n</cell>\n<code language=julia-1.6>\nis_simple_power(12,\
    \ 5)\n</cell>\n<text>\nExercise 1: Implement a function for powers that accepts\
    \ a variable number of numbers and a variable number of powers. You have to return\
    \ a boolean array that indicates whether each power is simple power. The array\
    \ returned should have a length of powers. You have to check whether the variable\
    \ number of numbers matches the variable number of powers. For example, if powers\
    \ is [1, 2, 3] and the numbers is [4, 3, 2] the function should return [true,\
    \ false, true].", "  if x == n then\n    return true\n  end\n  return false\n\
    end", "  if n <= 0\n    false\n  elsif n == 1\n    true\n  else\n    return is_simple_power(x::int(x/n)*n::int,\
    \ n)\n  end\nend\n</cell>\n<text>\nLet's test our implementation:", "  return\
    \ true\n  false\nend", "  # Write your code here\n  return true\nend", "    true\n\
    end", "    if x == 1 or n == 0 then return true\n    if n % x == 0 then return\
    \ false\n    else return is_simple_power(x, n/x)\nend", "  return true\nend",
  "  if n == 0\n    return true\n  end\n  if n == 1\n    return true\n  end\n  if\
    \ x % n == 0\n    return false\n  end\n  if n <= x\n    return false\n  end\n\
    \  is_simple_power(x, n - 1)\nend\nprint(is_simple_power(2, 8))\nprint(is_simple_power(13,\
    \ 15))\nprint(is_simple_power(15, 14))\nprint(is_simple_power(13, 16))\nprint(is_simple_power(27,\
    \ 31))\nprint(is_simple_power(27, 32))\nprint(is_simple_power(27, 31))\nprint(is_simple_power(42,\
    \ 17))\nprint(is_simple_power(42, 17))\n</cell>\n<cell>", end, "  x % n == 0\n\
    end\n</pre>\n<p>Test your function:</p>\n<pre>\nassert not is_simple_power(1,\
    \ 2)\nassert is_simple_power(2, 4)\nassert not is_simple_power(4, 4)\nassert is_simple_power(9,\
    \ 4)\n</pre>", "    \n    # Write your code here", "  power = Math.pow(x, n)\n\
    \  return x == power\nend", "    p =(n**int(x))\n    if p == x :\n        return\
    \ True\n    return False\n        ", "  if n == 1 then\n    return true\n  else\
    \ \n    return false\n  end\nend", "  x = x.to_i\n  if x.zero?\n    false\n  elsif\
    \ n <= 0\n    false\n  elsif n == 1\n    x.zero?\n  else\n    x.even? && n ==\
    \ x || x.odd? && n != x\n  end\nend", end, "  return true\nend\n</cell>\n<cell>",
  "  raise \"Not implemented\"\nend", end, "  return true\nend\n</cell>\n<cell>",
  "  return (x**n) == x\nend", "  x = x.to_i\n  n = n.to_i", "  # Write your code\
    \ here\n  return(x == pow(n, x))\nend", '# Your function should return True or
    False.', "  # Your code here\nend", "  x == x ** n\nend", "  return ((x ** int(n))\
    \ == x)\nend", "  ...\nend", "  x == n**int(x) or n == int(x) or n**int(x) ==\
    \ x\nend", "  return true\nend", "  (x**n) == x\nend", "  is_power = (x.to_i**n)\
    \ == x\n  is_simple = (n == 1) or (n == 0)\n  is_simple_power = is_simple&is_power\n\
    \  return is_simple_power\nend", "  # Base cases: if x is 0 then x is simple.\n\
    \  # If x is less than or equal to 0 then it is not a power.\n  # If x is greater\
    \ than or equal to 1 then it is not a power.\n  # If x is equal to 1 or x is greater\
    \ than 1 then it is not a power.\n  x_is_0 = x == 0\n  x_less_than_or_equal_0\
    \ = x < 0\n  x_greater_than_1 = x > 1\n  x_equal_1 = x == 1\n  x_greater_than_1\
    \ = x > 1", "  # Your code here\nend", "    if n <= 0 \n        return False \n\
    \    \n    while n > 1 \n        if x % n = 0 \n            return False \n  \
    \      n /= 2 ", "  if x.to_s == n.to_s && (n ** int(x) == x)\n    # Your code\
    \ here\n  else\n    return false\n  end\nend", "  if n == 0 \n    true\n  else\n\
    \    false\n  end\nend", "  if x==n\n    return true\n  else \n    return false\n\
    end", "    # Your code here\n    return false\nend\n</pre>", "  # your code here\n\
    end", "  power = x ** n\n  power1 = x ** n\n  power2 = x ** n\n  power3 = x **\
    \ n\n  power4 = x ** n\n  power5 = x ** n\n  power6 = x ** n\n  power7 = x **\
    \ n\n  power8 = x ** n\n  power9 = x ** n\n  power10 = x ** n\n  if x == (power\
    \ * power1) or (power * power2) or (power * power3) or (power * power4) or (power\
    \ * power5) or (power * power6) or (power * power7) or (power * power8) or (power\
    \ * power9) or (power * power10) or x == (power + power1) or x == (power + power2)\
    \ or x == (power + power3) or x == (power + power4) or x == (power + power5) or\
    \ x == (power + power6) or x == (power + power7) or x == (power + power8) or x\
    \ == (power + power9) or x == (power + power10) or x == (power1 + power2) or x\
    \ == (power1 + power3) or x == (power1 + power4) or x == (power1 + power5) or\
    \ x == (power1 + power6) or x == (power1 + power7) or x == (power1 + power8) or\
    \ x == (power1 + power9) or x == (power1 + power10) or x == (power2 + power3)\
    \ or x == (power2 + power4) or x == (power2 + power5) or x == (power2 + power6)\
    \ or x == (power2 + power7) or x == (power2 + power8) or x == (power2 + power9)\
    \ or x == (power2 + power10) or x == (power3 + power4) or x == (power3 + power5)\
    \ or x == (power3 + power6) or x == (power3 + power7) or x == (power3 + power8)\
    \ or x == (power3 + power9) or x == (power3 + power10) or x == (power4 + power5)\
    \ or x == (power4 + power6) or x == (power4 + power7) or x == (power4 + power8)\
    \ or x == (power4 + power9) or x == (power4 + power10) or x == (power5 + power6)\
    \ or x == (power5 + power7) or x == (power5 + power8) or x == (power5 + power9)\
    \ or x == (power5 + power10) or x == (power6 + power7) or x == (power6 + power8)\
    \ or x == (power6 + power9) or x == (power6 + power10) or x == (power7 + power8)\
    \ or x == (power7 + power9) or x == (power7 + power10) or x == (power8 + power",
  "  if n.nil? or x.nil? or x.zero? or n<0\n    return false\n  end", "    power =\
    \ n**x\n    i = 2\n    while i <= power\n        if i % n == 0\n            return\
    \ true\n        i += 1\n    return false\nend", "  n % x == 0 # n is power of\
    \ x\nend", "  if n % int(x) != 0\n  then\n    false\n  else\n    true\n  end\n\
    end", "  # your code here\nend\n</cell>\n<cell>", "  #your code here\n  return\
    \ false\nend", "  x= x.to_i\n  n= n.to_i\n  return true\nend", "  x == n**int(x)\
    \ # Replace this line with the appropriate solution.\nend", "  # Your code here\n\
    end", "   return x == n**int(x)\nend\n</cell>\n<code language=julia-0.6>", " \
    \ x == Math.pow(n, n)\nend", "    false\nend", "  # Your code here\nend\n</cell>\n\
    <cell>", "  x % n == 0\nend", "    # Write your code here.\n    return True if\
    \ n**int(x)==x else False\nend\n</cell>\n<code language=julia-1.0>\nis_simple_power(3,\
    \ 4)\n</cell>\n<code language=julia-1.0>\nis_simple_power(2, 3)\n</cell>\n<code\
    \ language=julia-1.0>\nis_simple_power(1, 3)\n</cell>\n<code language=julia-1.0>\n\
    is_simple_power(2, 2)\n</cell>\n<code language=julia-1.0>\nis_simple_power(10,\
    \ 10)\n</cell>\n<code language=julia-1.0>\nis_simple_power(10, 4)\n</cell>\n<code\
    \ language=julia-1.0>\nis_simple_power(10, 8)\n</cell>\n<code language=julia-1.0>\n\
    is_simple_power(10, 9)\n</cell>\n<code language=julia-1.0>\nis_simple_power(1,\
    \ 2)\n</cell>\n<code language=julia-1.0>\nis_simple_power(3, 5)\n</cell>\n<code\
    \ language=julia-1.0>\nis_simple_power(100, 2)\n</cell>\n<code language=julia-1.0>\n\
    is_simple_power(10000, 8)\n</cell>\n<code language=julia-1.0>\nis_simple_power(100000,\
    \ 10)\n</cell>\n<text>\nProblem 3.\nWrite a function which calculates the factorial\
    \ of its input. The function must accept any numeric value as a single parameter\
    \ and must return that input's factorial. You may not use the factorial function\
    \ nor factorial function in Base. \nFor example, factorial(4) must return 24.\
    \ factorial(2) must return 2.", "    i=0\n    while i<=n\n        if x!=x//n\n\
    \            return false\n        i+=1\n    end\n    return true\nend", "   \
    \ if n ** int(x) == x\n    else false\nend", "  return true\nend", "  x.to_i**n\
    \ == x\nend", "  is_power_of_n = (n**int(x))==x # Your code here\n  return is_power_of_n\n\
    end\nis_simple_power(4,3)\nis_simple_power(12,1)\nis_simple_power(2,2)\nis_simple_power(1,5)\n\
    is_simple_power(1,2)\nis_simple_power(1,10)\nis_simple_power(2,10)\nis_simple_power(1,8)\n\
    is_simple_power(2,8)\nis_simple_power(8,2)\nis_simple_power(8,10)\nis_simple_power(9,2)\n\
    is_simple_power(1,1000)\nis_simple_power(2,1000)\nis_simple_power(1,1000)\nis_simple_power(2,1000)\n\
    is_simple_power(1000,2)\nis_simple_power(1000,10)\nis_simple_power(1000,8)\nis_simple_power(10000,2)\n\
    is_simple_power(10000,10)\nis_simple_power(10000,8)\nis_simple_power(1000000,2)\n\
    is_simple_power(1000000,10)\nis_simple_power(1000000,8)\nis_simple_power(100000000,2)\n\
    is_simple_power(100000000,10)\nis_simple_power(100000000,8)\nis_simple_power(1000000000000,2)\n\
    is_simple_power(1000000000000,10)\nis_simple_power(1000000000000,8)\nis_simple_power(10000000000000001,2)\n\
    is_simple_power(10000000000000001,10)\nis_simple_power(10000000000000001,8)\n\
    is_simple_power(10000000000000000000000,2)\nis_simple_power(10000000000000000000000,10)\n\
    is_simple_power(10000000000000000000000,8)\nis_simple_power(10000000000000000000000000,2)\n\
    is_simple_power(10000000000000000000000000,10)\nis_simple_power(10000000000000000000000000,8)",
  "  return true\nend", "  if x == 0 then false\n  else if x%n == 0 then true\n  else\
    \ is_simple_power(x/n, n)\n  end\nend\nprint(is_simple_power(5, 4)) # true\nprint(is_simple_power(12,\
    \ 3)) # false\nprint(is_simple_power(16, 3)) # true\nprint(is_simple_power(25,\
    \ 4)) # false\n</cell>\n<text>\nUsing while and if", '# return is_simple_power(12,
    3)', '  x == n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n*(n',
  "  x == n**int(x) ? true : false\nend", "    # Fill the code here\n    # raise NotImplementedError\n\
    end\n</cell>\n<text>\nTask\nWrite a function that returns a list of all prime\
    \ numbers less than a given number n.\nThe function should contain an if statement\
    \ and two for loops. Inside the first for loop you will have to check if the number\
    \ is divisable by any number in the list. Inside the second for loop you should\
    \ check if the number is prime using your previous function.", "    if x.is_a?(Integer)\
    \ && x.is_positive\n      return false\n    end\n    \n    n\n  end\n  \n  # Your\
    \ task is to call is_simple_power for all powers of n.\n  # For instance, \n \
    \ # is_simple_power(7, 3) should return true because\n  # 7**3=49 and 49**3=1745.\n\
    \  \n  # x is your number.\n  # n is your power.\n  # Return true or false.\n\
    \  def is_simple_power(x, n)\n    \n    # Your code goes here\n    \n  end\nend\n\
    </cell>\n<cell>", "  # Your code goes here\nend", '    # Your code here', "  if\
    \ n==1 then return true\n  else if n==x then return true\n  else if x%n==0 then\
    \ return false\n  else return is_simple_power(x, n-1)\nend", "    x ^ n == x\n\
    end", "end\n==>\nis_simple_power(12, 3) # => true\nis_simple_power(12, 4) # =>\
    \ false\nis_simple_power(123, 2) # => true\nis_simple_power(123, 3) # => false\n\
    is_simple_power(123, 5) # => false\nis_simple_power(123, 6) # => true\nis_simple_power(123,\
    \ 7) # => false\nis_simple_power(123, 8) # => true\nis_simple_power(123, 9) #\
    \ => false\nis_simple_power(123, 10) # => false\nis_simple_power(123, 11) # =>\
    \ true\nis_simple_power(123, 12) # => false\nis_simple_power(123, 13) # => true\n\
    is_simple_power(123, 14) # => false\nis_simple_power(123, 15) # => true\nis_simple_power(123,\
    \ 16) # => false\nis_simple_power(123, 17) # => true\nis_simple_power(123, 18)\
    \ # => false\nis_simple_power(123, 19) # => true\nis_simple_power(123, 20) # =>\
    \ false\nis_simple_power(123, 21) # => true\nis_simple_power(123, 22) # => false\n\
    is_simple_power(123, 23) # => true\nis_simple_power(123, 24) # => false\nis_simple_power(123,\
    \ 25) # => true\nis_simple_power(123, 26) # => false\nis_simple_power(123, 27)\
    \ # => true\nis_simple_power(123, 28) # => false\nis_simple_power(123, 29) # =>\
    \ true\nis_simple_power(123, 30) # => false\nis_simple_power(123, 31) # => true\n\
    is_simple_power(123, 32) # => false\nis_simple_power(123, 33) # => true\nis_simple_power(123,\
    \ 34) # => false\nis_simple_power(123, 35) # => true\nis_simple_power(123, 36)\
    \ # => false\nis_simple_power(123, 37) # => true\nis_simple_power(123, 38) # =>\
    \ false\nis_simple_power(123, 39) # => true\nis_simple_power(123, 40) # => false\n\
    is_simple_power(123, 41) # => true\nis_simple_power(123, 42) # => false\nis_simple_power(123,\
    \ 43) # => true\nis_simple_power(123, 44) # => false\nis_simple_power(123, 45)\
    \ # => true\nis_simple_power(123, 46) # => false\nis_simple_power(123, 47) # =>\
    \ true\nis_simple_power(123, 48) # => false\nis_simple_power(123, 49) # => true\n\
    is_simple_power(123, 50) # => false\nis_simple_power(123, 51) ", "  x = x**n\n\
    \  if x==x # if both are same\n    return true\n  return false\nend", "  x==n\
    \ or n==0\nend", "    i = int(x)\n    if i == x or i == 0 and n == 1\n       \
    \ return 1\n    return 0\nend", "    # Your code here\n    if n.is_a?(Fixnum)\
    \ == false && n.is_a?(Float) == false && n.is_a?(Bignum) == false\n        return\
    \ false\n    end\n    if x.is_a?(Fixnum) == false && x.is_a?(Float) == false &&\
    \ x.is_a?(Bignum) == false\n        return false\n    end\n    if n == 1\n   \
    \     return true\n    end\n    x = x.to_i\n    if n % 2 == 0\n        if x ==\
    \ 2\n            return true\n        else\n            return false\n       \
    \ end\n    end\n    \n    i = 0\n    \n    while i < (n.to_i-1) && x > 1\n   \
    \     i += 1\n        x = x / (2 * n) # n // 2\n    end\n    x = x * n\n    \n\
    \    if x == 1\n        return true\n    end\n    \n    return false\nend", " \
    \   return x ** n == x\nend\nprint(is_simple_power(7, 3))\nprint(is_simple_power(7,\
    \ 2))\nprint(is_simple_power(7, 5))\nprint(is_simple_power(7, 10))\nprint(is_simple_power(7,\
    \ 6))\nprint(is_simple_power(7, 1))\nprint(is_simple_power(7, 9))\n</cell>\n<text>\n\
    Problem 7\nWrite a function that takes two arguments, a and b, that returns True\
    \ if a is equal to b, False otherwise. a and b will be numbers, not strings. For\
    \ example, 3 is equal to 3, but 3 isn't equal to \"3\".", "    # Your code here\n\
    \    return false\nend", "  if x < 1\n    return false\n  elsif x == 1\n    return\
    \ true\n  end\n  for i in 1..n\n    if is_simple_power(x%i, n)\n      return true\n\
    \    end\n  end\n  false\nend\n</cell>\n<cell>", "  x == int(x**n) == x\nend",
  "  x != nil\n  y := 0\n  y := (n**x)\n  x != nil\n  return ((n**x)=y)\nend\n```\n\
    </cell>\n<text>\nNow that we've written a function, let's test it.", "    i =\
    \ 2\n    while(i < n and x**i = x)\n        i += 1\n    return i==n\nend\n</cell>\n\
    <code language=julia-0.6>", "  if n <= 0 or not n or x == 0\n    return false\n\
    \  else\n    return is_simple_power(x/n, n)\n  end\nend", end, "    false\nend",
  "    # Your code here\n    return (x**n) == x\nend", '  raise NotImplementedError()',
  "  (x**int) == x\nend\n</pre>\n</div>\n</div>\n</div>\n<div class=\"cell border-box-sizing\
    \ text_cell rendered\">\n<div class=\"prompt input_prompt\">\n</div>\n<div class=\"\
    inner_cell\">\n<div class=\"text_cell_render border-box-sizing rendered_html\"\
    >\n<p>To solve this puzzle, please create a function with the name <code>is_simple_power</code>\
    \ that takes as input a number <code>x</code> and a positive number <code>n</code>,\
    \ and that returns true if <code>x</code> is a simple power of <code>n</code>,\
    \ and false in all other cases.</p>", "  # return true when n**int=x\n  result\
    \ = false\n  int_to_test = n.to_i\n  if int_to_test == 0\n    int_to_test = 1\n\
    \  else \n    int_to_test = int_to_test-1\n  end\n  result = true\n  \n  (0...int_to_test).each\
    \ do |n|\n    result = false if n % x != 0\n  end\n  result\nend\nis_simple_power(3,\
    \ 3)    # => true\nis_simple_power(5, 6)    # => true\nis_simple_power(7, 1) \
    \   # => false\nis_simple_power(7, 2)    # => true\nis_simple_power(7, 9)    #\
    \ => true\nis_simple_power(4, 0)    # => true\nis_simple_power(4, 1)    # => false\n\
    is_simple_power(4, 2)    # => false\nis_simple_power(10, 4)   # => true\nis_simple_power(10,\
    \ 7)   # => false\nis_simple_power(10, 9)  # => true\nis_simple_power(0, 0)  \
    \ # => true\nis_simple_power(0, 1)   # => true\nis_simple_power(0, 2)   # => false\n\
    is_simple_power(1, 0)   # => false\nis_simple_power(1, 1)   # => false\nis_simple_power(2,\
    \ 0)   # => false\nis_simple_power(2, 1)   # => false\nis_simple_power(2, 2) \
    \  # => false\nis_simple_power(10, 3)   # => true\nis_simple_power(10, 5)   #\
    \ => true\nis_simple_power(10, 6)   # => true\nis_simple_power(10, 8)   # => true\n\
    is_simple_power(10, 9)   # => true\nis_simple_power(11, 0)   # => true\nis_simple_power(11,\
    \ 1)   # => true\nis_simple_power(11, 2)   # => true\nis_simple_power(11, 3) \
    \  # => true\nis_simple_power(12, 0)   # => false\nis_simple_power(12, 1)   #\
    \ => false\nis_simple_power(12, 2)   # => false\nis_simple_power(12, 3)   # =>\
    \ false\nis_simple_power(12, 4)   # => false\nis_simple_power(12, 5)   # => false\n\
    is_simple_power(12, 6)   # => false\nis_simple_power(12, 7)   # => false\nis_simple_power(12,\
    \ 8)   # => false\nis_simple_power(12, 9)   # => false\nis_simple_power(13, 0)\
    \   # => false\nis_simple_power(13, 1)   # => false\nis_simple_power(13, 2)  \
    \ # => false\nis_simple_power(13, 3)   # => false\nis_simple_power(13, 4)   #\
    \ => false\nis_simple_power(13, 5)   # => false\nis_simple_power(13, 6)   # =>\
    \ false\nis_simple_power(13, 7)   # => false\nis_simple_power(13, 8)   # => false\n\
    is_simple_power(13, 9)   # => false\nis_", "  x = x.to_i\n  return n == 1 or (x\
    \ == (x & -x).to_i**n) or (x == (x | -x).to_i**n) or (x == (x ^ x).to_i**n) or\
    \ (x == (x & x).to_i**n) or (x == (x | x).to_i**n) or (x == (x ^ x).to_i**n) or\
    \ (x == (x & -x).to_i**n)\nend", "    if x.is_a?(Integer)\n        return true\n\
    \    else if x.is_a?(Float)\n        return true\n    else\n        return false\n\
    \    end\nend\n</cell>\n<cell>", "  raise NotImplementedError(\"Write your code\
    \ here.\")\nend", "  return(n**int(x)==x)\nend", "    power = x.to_i**n\n    div1\
    \ = x.to_i / n\n    div2 = div1.to_i**n\n    return (div1 == div2)\nend\nputs\
    \ is_simple_power(4, 4)\nputs is_simple_power(4, 4)\nputs is_simple_power(7, 8)\n\
    puts is_simple_power(4, 9)\nputs is_simple_power(7, 15)\nputs is_simple_power(3,\
    \ 7)\nputs is_simple_power(4, 9)\nputs is_simple_power(4, 9)\nputs is_simple_power(7,\
    \ 8)\nputs is_simple_power(7, 8)\nputs is_simple_power(7, 8)\nputs is_simple_power(7,\
    \ 8)\nputs is_simple_power(7, 8)\nputs is_simple_power(7, 8)\nputs is_simple_power(7,\
    \ 8)\nputs is_simple_power(7, 8)\nputs is_simple_power(7, 8)\nputs is_simple_power(7,\
    \ 8)\nputs is_simple_power(7, 8)\nputs is_simple_power(7, 8)\nputs is_simple_power(7,\
    \ 8)\nputs is_simple_power(7, 8)\nputs is_simple_power(7, 8)\nputs is_simple_power(7,\
    \ 8)\nputs is_simple_power(7, 8)\nputs is_simple_power(7, 8)\nputs is_simple_power(7,\
    \ 8)\nputs is_simple_power(7, 8)\nputs is_simple_power(7, 8)\nputs is_simple_power(7,\
    \ 8)\nputs is_simple_power(7, 8)\nputs is_simple_power(7, 8)\nputs is_simple_power(7,\
    \ 8)\nputs is_simple_power(7, 8)\nputs is_simple_power(7, 8)\nputs is_simple_power(7,\
    \ 8)\nputs is_simple_power(7, 8)\nputs is_simple_power(7, 8)\nputs is_simple_power(7,\
    \ 8)\nputs is_simple_power(7, 8)\nputs is_simple_power(7, 8)\nputs is_simple_power(7,\
    \ 8)\nputs is_simple_power(7, 8)\nputs is_simple_power(7, 8)\nputs is_simple_power(7,\
    \ 8)\nputs is_simple_power(7, 8)\nputs is_simple_power(7, 8)\nputs is_simple_power(7,\
    \ 8)\nputs is_simple_power(7, 8)\nputs is_simple_power(7, 8)\nputs is_simple_power(7,\
    \ 8)\nputs is_simple_power(7, 8)\nputs is_simple_power(7, 8)\nputs is_simple_power(7,\
    \ 8)\nputs is_simple_power(7, 8)\nputs is_simple_power(7, 8)\nputs is_simple_power(7,\
    \ 8)\nputs is_simple_power(7, 8)\nputs is_simple_power(7, 8)\nputs is_simple_",
  "  return x if x % n == 0 else false\nend", "    return x if x == n or n**x == x\n\
    end", "  return n**int(x)==x\nend\n</cell>\n<code language=julia-1.5>\nusing DifferentialEquations\n\
    </cell>\n<code language=julia-1.5>\ntspan = (0.0, 20.0)", "  return x if x**n==x\
    \ else false\nend\n</pre>\n</div>\n</div>\n</div>\n</div>\n</div>\n    </div>\n\
    \  </div>\n</body>", "    pow_of_n = x**n\n    if pow_of_n == x\n    true\n  \
    \  else\n    false\n    end\nend", "  return x == n**int\nend", "    # Your code\
    \ here\nend", "  x==n or n <= 0\nend", "    # Your code here\n    return n ==\
    \ 1\nend", "    return true\nend", "  if n**int(x) != x\n    return false\n  else\n\
    \    return true\n  end\nend\n</cell>\n<code language=julia-1.3>", "    # Your\
    \ code here\nend\n</cell>\n<cell>\nis_simple_power(3, 2)\n</cell>\n<cell>\nis_simple_power(4,\
    \ 2)\n</cell>\n<cell>\nis_simple_power(4, 3)\n</cell>\n<cell>\nis_simple_power(5,\
    \ 2)\n</cell>\n<cell>\nis_simple_power(7, 3)\n</cell>\n<cell>", "  x == n**int(x)\
    \ # n**int(x) == x\nend", "  # The first thing you'll need to do is figure out\
    \ what x is to the power of\n  # n.\n  # To do this, you'll need to get all the\
    \ factors of n.\n  factors = []\n  # TODO: Implement a recursive function to do\
    \ this.", "  true\nend", "  (n >= 1) && (x /= (n / 2))\n  (n % 2 == 0) == (x %\
    \ n == 0)\nend", "    # your code goes here\nend", "  if n==0\n    return true\n\
    \  if n==1\n    return true\n  if x==1\n    return true\n  if n==2\n    return\
    \ (x==1) || (x==x^1)\n  else\n    return x%n==0\nend\n</cell>\n<code language=julia-1.3>",
  "  return x == n**int\nend\n</cell>\n<text>\nQ2.2 Test your function using the following\
    \ values:", "  raise NotImplementedError\nend", "  x == x ** n\nend", "  ...\n\
    end", "  if x ** n == x\n    true\n  else\n    false\n  end\nend\nis_simple_power(7,\
    \ 6)", "  x == n**int(x)\nend\n</pre>\n</section>", "  return true\nend", "  power\
    \ = n**x\n  y = x\n  y = y.to_f\n  while y != 1 && power != y\n    y = y*2\n \
    \   power = power*y\n  end\n  return power == y\nend", "# Your function should\
    \ return 'True' if x is a simple power of n.", "  if n == 1 \n    # n is a power\
    \ of 2 => x is simple power => return true \n    # n is not a power of 2 => x\
    \ is not simple power => return false \n    \n    return true\n  end\nend", " \
    \ x == n or n % x == 0\nend", "  # The easiest case: x=1, n=0 returns true\n \
    \ # You can return False in this case to signal that x is not a simple power of\
    \ n.\n  return\nend\n</cell>\n<code language=julia-1.5>", "    (x**int(x) == x)\n\
    end", "  x == pow(x, n, n)\nend", "  x.to_s == n.to_s && n % 1 == 0 && n % 2 ==\
    \ 0 && n % 3 == 0 && n % 4 == 0 && n % 5 == 0 && n % 6 == 0 && n % 7 == 0 && n\
    \ % 8 == 0 && n % 9 == 0 && n % 10 == 0\nend", "  pow = x.to_i ** n\n  return\
    \ pow == x\nend", "  if x == 1\n    n ** int == x\n  else\n    n ** int != x\n\
    \  end\nend", "  x==n**int(x); return x;\nend", "  return false\nend", "    return\
    \ x == n**int(x)\nend", "  power=1;\n  while n>power\n    power=power*n\n  end\n\
    \  power==x;\nend\nprintln(is_simple_power(5, 1))\nprintln(is_simple_power(1,\
    \ 2))\nprintln(is_simple_power(2, 2))\nprintln(is_simple_power(3, 2))\nprintln(is_simple_power(4,\
    \ 2))\nprintln(is_simple_power(5, 3))\nprintln(is_simple_power(6, 3))\nprintln(is_simple_power(7,\
    \ 4))\nprintln(is_simple_power(8, 5))\nprintln(is_simple_power(9, 6))\nprintln(is_simple_power(10,\
    \ 7))\nprintln(is_simple_power(11, 8))\nprintln(is_simple_power(12, 9))\nprintln(is_simple_power(13,\
    \ 10))\nprintln(is_simple_power(14, 11))\nprintln(is_simple_power(15, 12))\nprintln(is_simple_power(16,\
    \ 13))\nprintln(is_simple_power(17, 14))\nprintln(is_simple_power(18, 15))\nprintln(is_simple_power(19,\
    \ 16))\nprintln(is_simple_power(20, 17))\nprintln(is_simple_power(21, 18))\nprintln(is_simple_power(22,\
    \ 19))\nprintln(is_simple_power(23, 20))\nprintln(is_simple_power(24, 21))\nprintln(is_simple_power(25,\
    \ 22))\nprintln(is_simple_power(26, 23))\nprintln(is_simple_power(27, 24))\nprintln(is_simple_power(28,\
    \ 25))\nprintln(is_simple_power(29, 26))\nprintln(is_simple_power(30, 27))\nprintln(is_simple_power(31,\
    \ 28))\nprintln(is_simple_power(32, 29))\nprintln(is_simple_power(33, 30))\nprintln(is_simple_power(34,\
    \ 31))\nprintln(is_simple_power(35, 32))\nprintln(is_simple_power(36, 33))\nprintln(is_simple_power(37,\
    \ 34))\nprintln(is_simple_power(38, 35))\nprintln(is_simple_power(39, 36))\nprintln(is_simple_power(40,\
    \ 37))\nprintln(is_simple_power(41, 38))\nprintln(is_simple_power(42, 39))\nprintln(is_simple_power(43,\
    \ 40))\nprintln(is_simple_power(44, 41))\nprintln(is_simple_power(45, 42))\nprintln(is_simple_power(46,\
    \ 43))\nprintln(is_simple_power(47, 44))\nprintln(is_simple_power(48, 45))\nprintln(is_simple_power(49,\
    \ 46))\nprintln(is_simple_power(50, 47))\nprintln(is_simple_power(51, 48))\nprintln(is_simple_power(52,\
    \ 49))\nprintln(is_simple_power(53, 50))\nprintln(is_simple_power(54, 51))\nprintln(is_",
  "    p =0\n    while n>0:\n        if n%x==0 :\n            p+=1\n            n=n//x\n\
    \        else :\n            break\n    return p==1\nend\n</cell>\n<code language=julia-0.6>\n\
    @assert is_simple_power(2,3)\n@assert is_simple_power(2,4)\n@assert is_simple_power(2,5)\n\
    @assert is_simple_power(2,6)\n@assert is_simple_power(3,4)\n@assert is_simple_power(4,3)\n\
    </cell>\n<code language=julia-0.6>", "  x == n**int(x)\nend\n</cell>\n<text>\n\
    Test your function with the next cell:", "  # Your code here\nend", "  x.is_a?(Integer)\n\
    \  x.to_s == n.to_s\nend", "end\n</pre>\n</section>\n<section data-markdown>\n\
    <textarea data-template>", "  if n**int=x\n    return true\n  return false\nend",
  '# Your code here', "  x==0 or n==0\n  return true\nend", "  begin\n    return true\
    \ if n**int=x\n    return false if n**int!=x\n  rescue\n  end\nend", "    x.to_i**n\
    \ == x # your code\nend\n</cell>\n<cell>", "  # Your code here\n  return true\n\
    end", "  return x == power_of_2(n) if x % 1 == 0 &&\n    x == n if n**int(x) ==\
    \ x\n  return false\nend\n</cell>\n<text>\nTests", "  power = x.to_i\n  result\
    \ = x % n\n  return result == 0 && (power**n == x)\nend\n</cell>\n<code language=julia-1.0>\n\
    @assert is_simple_power(1, 2) === false\n@assert is_simple_power(3, 2) === true\n\
    @assert is_simple_power(16, 2) === true\n@assert is_simple_power(5, 16) === true\n\
    @assert is_simple_power(15, 16) === false\n@assert is_simple_power(7, 16) ===\
    \ false\n@assert is_simple_power(2, 20) === false\n@assert is_simple_power(2,\
    \ 22) === false\n@assert is_simple_power(5, 16) === false\n@assert is_simple_power(7,\
    \ 16) === false\n@assert is_simple_power(-1, 16) === false\n@assert is_simple_power(13,\
    \ 16) === false\n@assert is_simple_power(25, 16) === false\n@assert is_simple_power(27,\
    \ 16) === false\n@assert is_simple_power(5, 20) === false\n@assert is_simple_power(5,\
    \ 22) === false\n@assert is_simple_power(16, 20) === false\n@assert is_simple_power(16,\
    \ 22) === false\n@assert is_simple_power(17, 20) === false\n@assert is_simple_power(17,\
    \ 22) === false\n@assert is_simple_power(15, 16) === false\n@assert is_simple_power(15,\
    \ 20) === false\n@assert is_simple_power(15, 22) === false\n@assert is_simple_power(15,\
    \ 20) === false\n@assert is_simple_power(8, 16) === false\n@assert is_simple_power(8,\
    \ 20) === false\n@assert is_simple_power(8, 22) === false\n@assert is_simple_power(8,\
    \ 16) === false\n@assert is_simple_power(8, 20) === false\n@assert is_simple_power(8,\
    \ 22) === false\n@assert is_simple_power(4, 9) === false\n@assert is_simple_power(4,\
    \ 10) === false\n@assert is_simple_power(4, 12) === false\n@assert is_simple_power(4,\
    \ 16) === false\n@assert is_simple_power(7, 16) === false\n@assert is_simple_power(10,\
    \ 16) === false\n@assert is_simple_power(11, 16) === false\n@assert is_simple_power(13,\
    \ 16) === false\n@assert is_simple_power(15, 16) === false\n@assert is_simple_power(16,\
    \ 16) === false\n@assert is_simple_power(17, 16) === false\n@assert is_simple_power(19,\
    \ 16) === false\n@assert is_simple_power(20, 16) === false\n@assert is_simple_power(21,\
    \ 16) === false\n@assert is_simple_power(24, 16) === false\n@assert is_simple_power(25,\
    \ 16) === false\n@assert is_simple_power(26, 16) === false\n@assert is_simple_power(28,\
    \ 16) === ", "  if n <= 0\n    return false\n  end\n  begin\n    n ** x\n    return\
    \ true\n  rescue\n    return false\n  end\nend", "  return n == x ** n\nend\n\
    </pre>", "  return true\nend", '  return true # Your code here', "    \n    return\
    \ (x**n) == x\n    \n</cell>\n<cell>\nassert is_simple_power(1, 2) == True\nassert\
    \ is_simple_power(2, 2) == True\nassert is_simple_power(3, 2) == True\nassert\
    \ is_simple_power(4, 2) == True\nassert is_simple_power(5, 2) == True\nassert\
    \ is_simple_power(6, 2) == True\nassert is_simple_power(7, 2) == True\nassert\
    \ is_simple_power(8, 2) == True\nassert is_simple_power(9, 2) == True\nassert\
    \ is_simple_power(10, 2) == True\nassert is_simple_power(12, 2) == True\nassert\
    \ is_simple_power(13, 2) == True\nassert is_simple_power(14, 2) == True\nassert\
    \ is_simple_power(15, 2) == True\nassert is_simple_power(16, 2) == True\nassert\
    \ is_simple_power(17, 2) == True\nassert is_simple_power(18, 2) == True\nassert\
    \ is_simple_power(19, 2) == True\nassert is_simple_power(20, 2) == True\nassert\
    \ is_simple_power(21, 2) == True\nassert is_simple_power(22, 2) == True\nassert\
    \ is_simple_power(23, 2) == True\nassert is_simple_power(24, 2) == True\nassert\
    \ is_simple_power(25, 2) == True\nassert is_simple_power(26, 2) == True\nassert\
    \ is_simple_power(27, 2) == True\nassert is_simple_power(28, 2) == True\nassert\
    \ is_simple_power(29, 2) == True\nassert is_simple_power(30, 2) == True\nassert\
    \ is_simple_power(31, 2) == True\nassert is_simple_power(32, 2) == True\nassert\
    \ is_simple_power(33, 2) == True\nassert is_simple_power(34, 2) == True\nassert\
    \ is_simple_power(35, 2) == True\nassert is_simple_power(36, 2) == True\nassert\
    \ is_simple_power(37, 2) == True\nassert is_simple_power(38, 2) == True\nassert\
    \ is_simple_power(39, 2) == True\nassert is_simple_power(40, 2) == True\nassert\
    \ is_simple_power(41, 2) == True\nassert is_simple_power(42, 2) == True\nassert\
    \ is_simple_power(43, 2) == True\nassert is_simple_power(44, 2) == True\nassert\
    \ is_simple_power(45, 2) == True\nassert is_simple_power(46, 2) == True\nassert\
    \ is_simple_power(47, 2) == True\nassert is_simple_power(48, 2) == True\nassert\
    \ is_simple_power(49, 2) == True\nassert is_simple_power(50, 2) == True\nassert\
    \ is_simple_power(51, 2) == True\nassert is_simple_power(52, 2) == True\nassert\
    \ is_simple_power(53, 2) == True\nassert is_simple_power(54, 2) == True\nassert\
    \ is_simple_power(55, 2) == True\nassert is_simple_power(", "  # Your code here\n\
    end", "    # Your code here\nend", "  raise NotImplementedError\nend", "  if n\
    \ <= 0\n    return false\n  else\n    return true\n  end\nend", "  return false\
    \ if n < 0\n  x ** n == x\nend", "  # ...\nend", "  n ? true\n  n**int ? true\n\
    \  false : false \nend", "  return true\nend", "  x0 = x.modulo(n)\n  x0 = x0.abs\
    \ # not necessary but will prevent overflow problems\n  x0.zero? # this prevents\
    \ n**0 from being considered\n  return x0.zero?\nend", end, "  p =  x.to_i\n \
    \ x = x.to_f\n  while x > n\n    x = x / n\n  end\n  x == n\nend", '    return
    true # Your code here', "  if x > n\n    false\n  elsif x == 1\n    true\n  elsif\
    \ n % 1 == 0\n    is_simple_power(x, n / 1)\n  else\n    is_simple_power(x, n\
    \ / 2)\n  end\nend", "# Test your code here\n  \n  \n  \n  return False\nend\n\
    </cell>\n<code language=julia-1.0>", "  x==n ? true : false\nend", "  # Your code\
    \ here\nend", "  # TODO: implement this function\n  return true\nend", "  return\
    \ false if n==1 or n==0\n  ((n%2) == 0) ^ ((n==1) and (n==x))\nend", "  # Base\
    \ cases\n  if n==0\n    return true\n  elsif n==1\n    return x==1\n  end\n  #\
    \ Recursive step\n  return x*is_simple_power(x,n-1)\nend", "  i = 1\n  while i\
    \ <= x\n    if (x^i)==n\n      return true\n    i += 1\n  end\n  return false\n\
    end", "  # Your code here\nend", "    # Your code here\n    \nend\n</cell>\n<text>\n\
    Return to task 3 of the Power task.", "    if n ** int(x) == x\n        return\
    \ true\n    else\n        return false\n    end\nend", "  n ** int == x\nend\n\
    is_simple_power(3, 4)\n</cell>\n<cell>", end, end, "  x == n**int\nend", "   \
    \ return false\nend", "  powers = Array.new(n)\n  for i in 0..n - 1\n    powers[i]\
    \ = x**i\n  end\n  powers[n] = x.abs\n  powers == x\nend\nprint is_simple_power(2**6,\
    \ 5)\nprint is_simple_power(2^6, 5)\nprint is_simple_power(-4, 5)\nprint is_simple_power(-2^6,\
    \ 5)\nprint is_simple_power(-4, 5)\nprint is_simple_power(4, 5)\nprint is_simple_power(-8,\
    \ 5)\nprint is_simple_power(-4, 5)", "    x ^ n == x # Check if x is a power of\
    \ n\nend\n</cell>\n<code language=julia-1.5>", "    if n**int(x)==x\n        return\
    \ true\n    else\n        return false\n    end\nend", "  # write your code here\n\
    \  return x == n**int\nend", "  x = Math.log(x) / Math.log(n)\n  return Math.pow(n,\
    \ x) == x\nend", "  x.to_s.split(\"\").each_cons(2).include?(n**0) # x = 0\n \
    \ x.to_s.split(\"\").each_cons(2).include?(n**1) # x = 1\n  x.to_s.split(\"\"\
    ).each_cons(2).include?(n**2) # x = 2\n  x.to_s.split(\"\").each_cons(2).include?(n**3)\
    \ # x = 3\n  x.to_s.split(\"\").each_cons(2).include?(n**4) # x = 4\n  x.to_s.split(\"\
    \").each_cons(2).include?(n**5) # x = 5\n  x.to_s.split(\"\").each_cons(2).include?(n**6)\
    \ # x = 6\n  x.to_s.split(\"\").each_cons(2).include?(n**7) # x = 7\n  x.to_s.split(\"\
    \").each_cons(2).include?(n**8) # x = 8\n  x.to_s.split(\"\").each_cons(2).include?(n**9)\
    \ # x = 9\n  x.to_s.split(\"\").each_cons(2).include?(n**10) # x = 10\n  x.to_s.split(\"\
    \").each_cons(2).include?(n**11) # x = 11\n  x.to_s.split(\"\").each_cons(2).include?(n**12)\
    \ # x = 12\n  x.to_s.split(\"\").each_cons(2).include?(n**13) # x = 13\n  x.to_s.split(\"\
    \").each_cons(2).include?(n**14) # x = 14\n  x.to_s.split(\"\").each_cons(2).include?(n**15)\
    \ # x = 15\n  x.to_s.split(\"\").each_cons(2).include?(n**16) # x = 16\n  x.to_s.split(\"\
    \").each_cons(2).include?(n**17) # x = 17\n  x.to_s.split(\"\").each_cons(2).include?(n**18)\
    \ # x = 18\n  x.to_s.split(\"\").each_cons(2).include?(n**19) # x = 19\n  x.to_s.split(\"\
    \").each_cons(2).include?(n**20) # x = 20\n  x.to_s.split(\"\").each_cons(2).include?(n**21)\
    \ # x = 21\n  x.to_s.split(\"\").each_cons(2).include?(n**22) # x = 22\n  x.to_s.split(\"\
    \").each_cons(2).include?(n**23) # x = 23\n  x.to_s.split(\"\").each_cons(2).include?(n**24)\
    \ # x = 24\n  x.to_s.split(\"\").each_cons(2).", " \n    #Your code here\n   \
    \ raise NotImplementedError()\nend", "  n = 2**n\n  return x**n=x\nend", "   x=\
    \ x.to_i\n   n= n.to_i\n   if n <= 0\n      false\n   elsif n == 1\n      true\n\
    \   elsif n % 2 == 0\n      is_simple_power(x, n / 2)\n   else\n      x == pow(x,\
    \ n)\n   end\nend", "  (n**int(x))==x\nend\nis_simple_power(7, 8)\n</cell>\n<code\
    \ language=julia-1.0>\n@assert is_simple_power(7, 4) == true\n@assert is_simple_power(7,\
    \ 2) == false\n@assert is_simple_power(7, 3) == false\n</cell>\n<text>\n5. The\
    \ Fibonacci numbers", "  if n<=1\n    return x==n\n  end\n  res1=x.abs # find\
    \ its absolute value\n  res2=x.floor # round it down\n  while res2>n # if the\
    \ number cannot be raised as power, keep doing this until the number becomes one\n\
    \    res2= res2*n\n  end\n  res3=x.floor # round it up\n  while res3>n # if the\
    \ number cannot be raised as power, keep doing this until the number becomes one\n\
    \    res3= res3*n\n  end\n  res4=res1-res2+res3 # find the remainder \n  return\
    \ res4==0\nend", "  x.to_i ** n\n  true\nrescue ArgumentError\n  false\nend",
  "    # Your code here\nend\n</cell>\n<cell>", "  x = x**n\n  x = x.to_i\n  if x\
    \ == 1\n    return true\n  elsif x == 0\n    return false\n  end\nend", "  ...\n\
    end\nis_simple_power(3, 7)", "    # Your code here\nend", "  power = x.to_i**n\n\
    \  x.to_i == power\nend\n</cell>\n<cell>", "  begin\n    (n**int(x))==x\n    false\n\
    \  rescue\n    true\n  end\nend", "    if x == 0\n        return true\n    if\
    \ n == 0\n        return true\n    if x % n == 0\n        return true\n    return\
    \ false\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
