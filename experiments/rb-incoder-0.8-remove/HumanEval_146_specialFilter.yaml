name: HumanEval_146_specialFilter
language: rb
prompt: "# Write a function that takes an array of numbers as input and returns \n\
  # the number of elements in the array that are greater than 10 and both \n# first\
  \ and last digits of a number are odd (1, 3, 5, 7, 9).\n# For example:\ndef specialFilter(nums)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_specialFilter\n\
  \    candidate = method(:specialFilter)\n    assert_equal(0, candidate.call([5,\
  \ -2, 1, -5]))\n    assert_equal(1, candidate.call([15, -73, 14, -15]))\n    assert_equal(2,\
  \ candidate.call([33, -2, -3, 45, 21, 109]))\n    assert_equal(4, candidate.call([43,\
  \ -12, 93, 125, 121, 109]))\n    assert_equal(3, candidate.call([71, -2, -33, 75,\
  \ 21, 19]))\n    assert_equal(0, candidate.call([1]))\n    assert_equal(0, candidate.call([]))\n\
  \  end\nend\n"
completions: ["    nums.count(10)\n    nums.count(11) \n    nums.count(13) \n    nums.count(15)\n\
    \    nums.count(17)\n    nums.count(19)\n    nums.count(21)\n    nums.count(25)\n\
    \    nums.count(27)\n    nums.count(29)\n    nums.count(31)\n    nums.count(33)\n\
    \    nums.count(35)\n    nums.count(37)\n    nums.count(39)\n    nums.count(41)\n\
    \    nums.count(43)\n    nums.count(45)\n    nums.count(47)\n    nums.count(49)\n\
    \    nums.count(51)\n    nums.count(53)\n    nums.count(55)\n    nums.count(57)\n\
    \    nums.count(59)\n    nums.count(61)\n    nums.count(63)\n    nums.count(65)\n\
    \    nums.count(67)\n    nums.count(69)\n    nums.count(71)\n    nums.count(73)\n\
    \    nums.count(75)\n    nums.count(77)\n    nums.count(79)\n    nums.count(81)\n\
    \    nums.count(83)\n    nums.count(85)\n    nums.count(87)\n    nums.count(89)\n\
    \    nums.count(91)\n    nums.count(93)\n    nums.count(95)\n    nums.count(97)\n\
    \    nums.count(99)\n    nums.count(101)\n    nums.count(103)\n    nums.count(105)\n\
    \    nums.count(107)\n    nums.count(109)\n    nums.count(111)\n    nums.count(113)\n\
    \    nums.count(115)\n    nums.count(117)\n    nums.count(119)\n    nums.count(121)\n\
    \    nums.count(123)\n    nums.count(125)\n    nums.count(127)\n    nums.count(129)\n\
    \    nums.count(131)\n    nums.count(133)\n    nums.count(135)\n    nums.count(137)\n\
    \    nums.count(139)\n    nums.count(141)\n    nums.count(143)\n    nums.count(145)\n\
    \    nums.count(147)\n    nums.count(149)\n    nums.count(151)\n    nums.count(153)\n\
    \    nums.count(155)\n    nums.count(157)\n    nums.count(159)\n    nums.count(161)\n\
    \    nums.count(163)\n    nums.count(165)\n    nums.count(167)\n    nums.count(169)\n\
    \    nums.count(171)\n    nums.count(173)\n    nums.count(175)\n    nums.count(177)\n\
    \    nums.count(179)\n    nums.count(181)\n    nums.count(", "    answer = 0\n\
    \    for number in nums\n        if number > 10 and (number[0] == 1 or number[-1]\
    \ == 1)\n            answer += 1\n    return answer\n</code>\n<|/ a |>\n<| c |>\n\
    Good answer. Just one thing to add is that for those who don't have access to\
    \ Python, you should be able to find out if each number is odd by using the modulo\
    \ operator `%`. In Ruby, the syntax would be `number % 2 == 1`\n<|/ c |>\n<| c\
    \ |>\nI love how you named these concepts. \"odd\" and \"even\"\n<|/ c |>\n<|\
    \ a |>\n<code>", "  count = 0\n  for i in nums\n    count += 1 if i > 10 and i.modulo(2)\
    \ == 1 \n  end\n  return count\nend", "    count = 0\n    \n    numbers = nums\n\
    \    \n    numbers.each do |num|\n        if (num % 10).odd?\n            if (num\
    \ % 100).odd?\n                if ((num % 1000).odd?)\n                    count\
    \ = count + 1\n                end\n            end\n        end\n    end\n  \
    \  \n    return count\nend", "    nums.reduce(:&)\nend\n</cell>\n<text>\nThe Symbol.reduce()\
    \ method takes the method name and an argument to pass to it. The symbol :& takes\
    \ an argument and returns its bitwise and.", "  for i in nums\n    if i > 10 and\
    \ i % 2 == 0 and (i mod 10 == 1 or i mod 10 == 9)\n      return i + 1\n    end\
    \ \n  end\n  return 0\nend\nputs specialFilter([21, 56, 12, 13, 17])", "    count\
    \ = 0\n    for i in nums\n        if i > 10 && i % 2 != 0\n            count +=\
    \ 1\n        end\n    end\n    return count\nend\n</code>\nThe for loop in ruby\
    \ works differently than a python for loop, so you have to specify the index yourself.\
    \ This means you need to add an index to your for loop:\n<code>\nfor i in 0...nums.length\n\
    </code>\n<|/ a tags=ruby dscore=0 |>\n<| c |>\nI don't understand why `count`\
    \ needs to be `@total` instead of just `total`. Does `count` get assigned each\
    \ time it goes through each loop of `@nums`?\n<|/ c |>\n<| c |>\ncount isn't getting\
    \ assigned each time it goes through each loop of nums, it gets assigned the value\
    \ of total at the end of each iteration of the loop\n<|/ c |>\n<| a dscore=0 |>\n\
    You can use a range to loop through the array:\n<code>", "  nums.each do |num|\n\
    \    if num > 10 \n      even = true\n      odd = true\n      num.split(\"\").each\
    \ do |digit|\n        if digit.odd?\n          even = false\n        end\n   \
    \     if digit.even?\n          odd = false\n        end\n      end\n      if\
    \ even && odd\n        puts \"#{num} is an odd number\"\n      elsif even && !odd\n\
    \        puts \"#{num} is an even number\"\n      else\n        puts \"#{num}\
    \ is not an odd or even number\"\n      end\n    end\n  end\nend", "    nums.each\
    \ { |num| \n        if (num > 10 && num.odd? && num.odd? && num.odd?) \n     \
    \       puts num\n        end\n    }\nend\n</code>\n<|/ a tags=ruby,arrays |>\n\
    <| c |>\nThis only returns odd numbers. I want the count of numbers that are both\
    \ even and odd but the first and last digits are odd. So in the example I provided,\
    \ the count would be 1.\n<|/ c |>\n<| c |>\nHe edited his question to clarify\
    \ exactly what he meant. I think my answer is correct.\n<|/ c |>\n<| c |>\nYes,\
    \ this does work. Thank you. I didn't think of using .each to count the elements\
    \ individually.\n<|/ c |>\n<| c |>\n: Your edit was rejected by some reviewers\
    \ for being a typo. I'm not sure why, but when I fixed it it got accepted. Maybe\
    \ I should have fixed it myself and edited your answer rather than asking the\
    \ person who rejected it. This time I have fixed the typo so it works.\n<|/ c\
    \ |>\n<| a tags=ruby,arrays |>\n<code>", "    count = 0\n    for n in nums\n \
    \       if n > 10 \n            count += 1 \n            first, last = n.divmod(10)\n\
    \            if first % 2 and last % 2\n                count += 1 \n    end\n\
    end", "  count = 0\n  nums.each do |n|\n    if n.to_i > 10 and n.first.to_i %\
    \ 2 == 1 and n.last.to_i % 2 == 1\n      count += 1\n    end\n  end\n  count\n\
    end\n</code>\n<|/ a tags=ruby,arrays |>\n<| a dscore=0 tags=ruby,arrays |>\nHere\
    \ is a method that takes a string and converts it to a number:\n<code>", "   \
    \ count = 0\n    nums.each do |num|\n        if num > 10 and num.modulo(2).zero?\
    \ and num.modulo(2).even?\n            count += 1\n        end\n    end\n    count\n\
    end", "  count = 0\n  for i in nums do\n    if i > 10 and\n       (i % 2 == 1\
    \ or i % 3 == 1 or i % 5 == 1 or i % 7 == 1 or i % 9 == 1) then\n      count =\
    \ count + 1\n    end\n  end\n  return count\nend", "  nums.each { |n| if n > 10\
    \ && n % 1.even? && n % 1.odd? }\nend\nprint specialFilter([1, 2, 3, 4, 5])",
  "    count = 0\n    odd = False\n    for num in nums\n        count = 0\n      \
    \  if num > 10 # if odd = 1, even = 0\n            odd = not odd # odd = opposite\
    \ to odd\n            count += 1\n            if odd and num%2 != 0 # first and\
    \ last digit odd\n                count += 1\n    return count", "  count = 0\n\
    \  nums.each do |n|\n    if n > 10 && n % 1 == 0 && n % 2 == 1\n      count +=\
    \ 1\n    end\n  end\n  return count\nend\n</code>\nIt can be called like this:\n\
    <code>\nspecialFilter([2,8,3,5,7,9])", "    nums.count{|x| x > 10 && x.odd? &&\
    \ x.odd? && x.odd? }\nend", "  nums.each { |e| if e > 10 && e % 2 == 1 && e %\
    \ 3 == 1 then return e end }\nend", "  count = 0\n  n = nums.count", "  for i\
    \ in nums\n    if i < 10\n      i += 10\n    elsif i.first % 2 == 0 and i.last\
    \ % 2 == 1\n      i += 1\n    end\n  end\nend", "  count = 0\n  for i in nums\n\
    \    if i > 10 && i % 2 == 1 && i % 2 != 0 && i / 2 % 2 != 0\n      count += 1\
    \ \n    end\n  end\n  return count\nend\nprint(specialFilter([12, 3, 23, 24, 33,\
    \ 34, 55, 10]))", "    # Your code here!\nend", "    nums.count(10) > 1 and (nums.first\
    \ % 2 == 1 and\n    nums.last % 2 == 1)\nend", "    count = 0\n    for n in nums\n\
    \        count += 1\n        if n >= 10 and n % 2 == 1 and n % 1 == 1\n      \
    \      count -= 1\n    return count\n<|/ file dstars=2 source=github filename=assignment7.py\
    \ |>\n<| c |>\nSo I guess my first approach is completely wrong, since it only\
    \ returns one even number, and since there are 5 even numbers, it is impossible\
    \ to get any more odd\n<|/ c |>\n<| c |>\nHow would you approach this problem?\
    \ What do you think would be a good way to approach it?\n<|/ c |>\n<| c |>\n`nums.count{|n|\
    \ n >= 10 and n % 2 == 1 and n % 1 == 1}`\n<|/ c |>\n<| c |>\nThis is what I was\
    \ looking for! Thank you so much!!\n<|/ c |>\n<| a dscore=1 |>\n<code>", "  count\
    \ = 0\n  odd_count = 0\n  odd_even_count = 0\n  odd_odd_count = 0\n  even_count\
    \ = 0\n  even_odd_count = 0\n  even_odd_even_count = 0\n  even_odd_odd_count =\
    \ 0\n  odd_even_odd_count = 0", "    nums.length.times{ |x|\n        x.odd? if\
    \ x.first % 2 != 0 && x.last % 2 != 0\n    }\nend", "  sum = 0\n  for x in nums\n\
    \    if x > 10 then\n      sum = sum + 1\n      if (x mod 2) = 0 then\n      \
    \  if (x mod 3 = 0) then\n          sum = sum + 1\n        end\n      end\n  \
    \  end\n  end\n  return sum\nend", "    sum = 0\n    odd = 0\n    even = 0\n \
    \   for i in nums\n        if i mod 2 != 0\n            even += i\n        else\
    \ \n            odd += i\n        sum += i\n    sum -= even\n    sum -= odd\n\
    \    if sum > 10\n        return 1\n    else\n        return 0\n    end\nend",
  "  count = 0\n  for x in nums\n    if x > 10 and x % 2 != 0 and x % 4 != 0\n   \
    \   count += 1\n      break\n  return count\n  \nprint specialFilter([1,2,3,4,5,6,7,8,9,10])",
  "  nums.each {|num| \n    if (num > 10 and num % 1 % 2 == 1 ) \n      puts num\n\
    \    end\n  }\nend", "    count = 0\n    nums.each do |num|\n        if num >\
    \ 10 and num % 2 == 1\n            count += 1\n        elsif num > 10 and num\
    \ % 2 == 0\n            count += 1\n        elsif num > 10 and num % 2 != 0\n\
    \            count += 1\n        end\n    end\nend", "  # Filter the numbers and\
    \ return the count\n  count = nums.count{|x| x > 10 and (x.to_f % 2).odd?}\nend",
  "    # Your code goes here\nend\n</cell>\n<code language=julia-1.0>", "    nums.count\
    \ { |x| x > 10 and x % 2 == 1 and x % 3 == 1 }\nend\nnums = [1, 2, 5, 10, 12,\
    \ 14, 16, 18, 20]\nspecialFilter(nums)", "    count = 0\n    \n    nums.each do\
    \ |num|\n        if (num > 10) && (num % 2 == 0) && \n        (num > nums.first)\
    \ && (num > nums.last) \n            count += 1\n        end\n    end\n    \n\
    \    return count\nend", "    \nend", "    nums.count {|x| x > 10 and x.odd? and\
    \ x.last % 2 == 1}\nend\nprint specialFilter([9,10,8,7]) ", "  count = 0\n  for\
    \ i in nums\n    if i > 10 \n      count = count + 1\n      if i.last.isOdd and\
    \ i.first.isOdd\n        count = count + 1\n      end\n    end\n  end\n  return\
    \ count\nend", "    count = 0\n    nums.each do |num|\n        if num > 10 &&\
    \ num.odd? && num.odd? && num.odd?\n            count += 1\n        end\n    end\n\
    \    return count\nend", "  # Solution code goes here\nend", "    # Your code\
    \ here\nend", "  # nums is an array of numbers\n  # Write your code here\n  n\
    \ = 0\n  for i in nums\n    if i >= 10\n      n += 1\n      if i%2 == 1 and i%3\
    \ != 1\n        n += 1\n  return n\n  \nassert(specialFilter([6, 9, 9, 7, 3, 9,\
    \ 0, 12, 2]) == 3)\nassert(specialFilter([10, 11, 2, 3, 1, 5, 18, 15, 10]) ==\
    \ 5)\nassert(specialFilter([0, 5, 6]) == 0)", "  # Your code here\nend", "  nums.count(nums[0])\
    \ > 1 && nums.count(nums.last) > 1 && nums.all? { |n| n.odd? }\nend", "    nums.each\
    \ do |n|\n        if n > 10 && n.odd?\n            return n if n.odd? && n.even?\n\
    \        end\n    end\n    return nil\nend", "  count = 0\n  for i in nums\n \
    \   if i > 10 and (i % 2 != 0 or i % 1 != 0)\n      count = count + 1\n  return\
    \ count\n  # Print the result of the filter function\nprint specialFilter([20,\
    \ 11, 9, 5, 16])\n</code>\n<|/ a tags=arrays,ruby |>\n<| c |>\n\"`nums.select{\
    \ |n| n > 10 }.size`\" is a bit more concise :-)\n<|/ c |>\n<| a tags=arrays,ruby\
    \ |>\nAnother way to do it with a conditional:\n<code>", "    nums.each { |num|\n\
    \        if (num > 10) and (num.to_s.odd_first_last?)\n            return num\n\
    \        end\n    }\nend", "    count = 0\n    for n in nums\n        if n > 10\
    \ && n % 2 == 1 && n % 3 == 1\n            count += 1\n    return count\nend\n\
    </cell>\n<cell>", "    count = 0\n    \n    for i in nums\n        if i > 10 and\
    \ i%2 == 1 and i%3 != 0\n            count = count + 1\n        end\n    end\n\
    \    \n    return count\nend", "    # Only change code below this line\n    nums\
    \ = [int(x) for x in nums]\n    evens = filter(lambda x: x % 2 == 0, nums)\n \
    \   odds = filter(lambda x: x % 2 != 0, nums)\n    odd_and_even = odds + evens\n\
    \    odd_and_even = sorted(odd_and_even)\n    odd_and_even = odd_and_even[:-1]\n\
    \    return len(odd_and_even)", "  \n  # Initialize counter\n  counter = 0\n \
    \ \n  # Loop through array\n  nums.each do |num|\n    # If the number is greater\
    \ than 10\n    if num > 10\n      # Increment counter\n      counter += 1\n  \
    \  else\n      # If the first and last digits are odd\n      if num.first % 2\
    \ == 1 && num.last % 2 == 1\n        # Increment counter\n        counter += 1\n\
    \      end\n    end\n  end\n  \n  # Return counter\n  return counter\nend", " \
    \ count = 0\n  for i in nums\n    if i > 10\n      count += 1 if i.odd and i.first\
    \ and i.last?\n    end\n  end\n  count\nend", "  return nums.count{|x| x > 10\
    \ && x.odd? && x.modulo(10) == 1}\nend", "  # Write your code here.\n  result\
    \ = 0\n  for i in nums:\n    if (i > 10 and (i%2 == 1 and i%5 == 1)):\n      result\
    \ = result + 1\n  return result", "    nums.each do |num|\n        if (num.to_s.split('').reverse.join.to_i)\
    \ % 2 != 0 && \n            (num.to_s.split('').join('').to_i) % 2 != 0\n    \
    \        return true\n        end\n    end\n    return false\nend", "  i = 0\n\
    \  while i < nums.length do\n    if nums[i] > 10 and nums[i] % 2 == 1 and nums[i-1]\
    \ % 2 == 1 then\n      i = i + 1\n    end\n    i = i + 1\n  end\n  return i\n\
    end", "    count = 0\n    nums.each do |n|\n        if ((n.to_i / 10).odd?) &&\
    \ ((n * 10).even?)\n            count += 1\n        end\n    end\n    return count\n\
    end", "  count=0\n  for i in nums\n    if i%2==0 and (i>10 and i%4==1)\n     \
    \ count=count+1\n    end\n  end\n  return count\nend", "    count = 0\n    for\
    \ i in nums\n        if i > 10 and nums.first % 2 == 1 and nums.last % 2 == 1\n\
    \            count += 1 \n    return count\n</cell>\n<cell>", "  nums.each do\
    \ |num|\n    if num > 10 && num.first % 2 != 0 && num.last % 2 != 0\n      return\
    \ num\n    end\n  end\nend", "    # Write your answer below:\n    count = 0\n\
    \    \n    for num in nums:\n        if num > 10:\n            count += 1\n  \
    \          if (num % 2) != 1:\n                if (num % 3) != 1:\n          \
    \          if (num % 5) != 1:\n                        if (num % 7) != 1:\n  \
    \                          if (num % 9) != 1:\n                              \
    \  count += 1", "  count = 0\n  for n in nums\n    if n >= 10\n      count +=\
    \ 1 if n % 2 == 0 and (n % 10 == 0 or n % 10 == 1)\n    end\n  end\n  count\n\
    end", "  # nums is an array of integers \n  count = 0\n  for i in nums\n    if\
    \ i > 10 && i.first % 2 == 1 && i.last % 2 == 1\n      count += 1\n    end\n \
    \ end\n  count\nend", "  count = 0\n  for i in nums\n    count += 1\n    if i\
    \ > 10 and i%2 == 0 and i%3 == 0\n    end\n  end\n  count\nend", "  # Your code\
    \ here\nend", "  count = 0\n  for i in nums\n    if (i > 10) and (i % 2 == 1)\
    \ and (i % 2 == 1)\n      count += 1\n    end\n  end\n  \n  return(count)\nend",
  "    return nums.select{|n| n > 10 && n % 2 == 0 && n.to_s.scan(/^[02468].*[02468]$/).length\
    \ == 2} \nend", "    # Write your code here\n    nums.each do |num|\n        if\
    \ num % 2 == 0\n            if num > 10\n                if num.to_s.chars.first.split('').last.to_i.odd?\n\
    \                    return num\n                end\n            end\n      \
    \  end\n    end\n    return 0\nend", "    nums.inject(0) do |sum, element|\n \
    \       if element >= 10\n            if element % 2 == 0\n                if\
    \ element % 2 != 0\n                    sum += 1\n                end\n      \
    \      end\n        end\n    end\nend", "  count = 0\n  for i in nums\n    if\
    \ i > 10 && i % 2 == 0 && i.first % 2 == 0 && i.last % 2 == 1\n      count = count\
    \ + 1\n    end\n  end\n  return count\nend", "    count = 0\n    for n in nums\n\
    \        if (n.to_i > 10) and (n.to_i%2 != 0) and (n.to_i%2 != 1)\n          \
    \  count += 1\n    end\n    return count\nend\nnums = [1, 3, 5]\nspecialFilter(nums)\
    \ #=> 2", "  count = 0\n  for i in nums do\n    if i > 10 and (nums.first(:).odd?\
    \ and nums.last(:).odd?)\n      count += 1\n    end\n  end\n  count\nend", " \
    \ # TODO: Write your code here\n  count = 0\n  for i in nums\n    if i > 10 and\
    \ i % 2 != 0\n      count += 1\n  return count\n</cell>\n<text>\nTest your Code\n\
    Run the cell below to test out your code. Make sure you get an output of 12 for\
    \ special_filter().", "  result = nums.count{|x| x > 10 && x.odd? && x.first %\
    \ 2 == 1 && x.last % 2 == 1}\nend\nspecialFilter([11, 23, 456, 7777, 13])", " \
    \   count = 0\n    nums.each do |n|\n        if n.to_s.chars.any? {|c| c != '0'\
    \ && c != '1'}\n            return 0 if n.to_s.chars.any? {|c| c == '9'}\n   \
    \         count += 1\n        end\n    end\n    return count\nend", "    # Write\
    \ your code here.\nend", "    count = 0\n    \n    for i in nums:\n        if\
    \ i > 10 and i%2 != 0 and i%2 == 1:\n            count += 1\n    return count",
  "    count = 0\n    for i in nums\n        if i > 10 and\n            ((i-1) % 2\
    \ != 0 and (i-1) % 3 != 0) \n            count += 1\n    end\n    return count\n\
    end\n</cell>\n<code language=julia-0.4>\nspecialFilter([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<code language=julia-0.4>", "  n = nums.length\n  i = 0\n  while i <\
    \ n\n    if (nums[i] > 10 && nums[i] % 2 != 0 && nums[i - 1] % 2 == 0 && nums[i\
    \ + 1] % 2 == 0)\n      i += 1\n    i += 1\n  end\n  return i\nend\nnums = [1,3,5,7,9]\n\
    p specialFilter(nums)", "  count = 0\n  \n  for i in nums\n    if i > 10 && nums[0..-1][1..-1]\
    \ % 2 == 1\n      count = count + 1\n    end\n  end\n  \n  return count\nend",
  "    # Write your code here\n    odds = 0\n    odds1 = []\n    odds2 = []\n    for\
    \ i in nums:\n        if i >= 10 and i%2 ==0:\n            odds += 1\n       \
    \     if i%2 != 0 and i%2 !=1:\n                odds1.append(i)\n            else:\n\
    \                odds2.append(i)\n    odds = odds1 + odds2\n    if len(odds) !=\
    \ 0:\n        return len(odds)\n    else:\n        return 0\n        ", "    #\
    \ Write your solution below:\n    sum = 0\n    for i in nums:\n        if i >\
    \ 10 and i%2 == 1:\n            sum = sum + 1\n    return sum\nprint(specialFilter(nums=[1,2,3,4,5,6,7,8,9,10]))\n\
    </cell>\n<cell>", "  # Write your code here\nend", '    return 0 # replace with
    your code', "  nums.count{ |num| num > 10 && num.odd? && num.odd? }\nend", " \
    \   count = 0\n    for num in nums\n        if num > 10 and num.modulo(2) == 1\n\
    \            count += 1\n    return count", "  count = 0\n  for x in nums\n  \
    \  if x % 2 != 0\n      count += 0\n    if x % 2 != 0\n      count += 0\n    if\
    \ x > 10\n      count += 1\n    if x > 10\n      count += 1\n    if nums.length\
    \ % 2 != 0\n      count += 1\n  return count\nend", "    nums.each_index do |index|\n\
    \        if nums[index] > 10 && nums[index].odd? && nums[index].odd? && nums[index].odd?\n\
    \            return nums.count\n        end\n    end\nend", "  nums.count { |x|\
    \ (x > 10) and (x.first % 2 == 1 and x.last % 2 == 1) }\nend\nnums = [1, 2, 3,\
    \ 8, 12, 14, 21, 22, 33, 34, 44, 88, 99, 105, 154, 203, 221, 258, 345, 402, 456,\
    \ 525]\np specialFilter(nums)", "    nums\n    i = 0\n    odd = 0\n    while i\
    \ < length(nums)\n        if nums[i] > 10 && nums[i] % 2 == 1 && nums[i-1] % 2\
    \ == 1\n            odd += 1\n        i += 1\n    return odd", "    # FILL IN\
    \ HERE\nend", "    # Write your code here\n    nums.each do |number|\n       \
    \ if number > 10\n            if number.first % 2 == 1 && number.last % 2 == 1\n\
    \                count+=1\n            end\n        end\n    end\n    count\n\
    end", "  nums.each do |num|\n    if num > 10 && num.odd? && num.first % 2 == 1\
    \ && num.last % 2 == 1\n      puts \"#{num} is a special number!\"\n    end\n\
    \  end\nend", "  # Solution\nend\n</cell>\n<text>\nExercise 4\nWrite a function\
    \ that takes a number as input and outputs the next biggest prime number greater\
    \ than or equal to that number. For example, if your input is 20, your function\
    \ should return 21.", "  count = 0\n  \n  nums.each do |n|\n    count += 1 if\
    \ n > 10 && n % 2 == 1 && n % 2 == 0\n  end\n  \n  return count\nend", "  count\
    \ = 0\n  \n  nums.each do | number |\n    if number.to_i > 10 && number.to_i /\
    \ number.to_i.to_i**2 == 1\n      count = count + 1\n    end\n  end\n  \n  return\
    \ count\nend", "  count = 0\n  \n  for i in nums\n    if i < 10 && i % 2 != 0\n\
    \      count += 1\n  end\n  \n  return count\nend", "  count = 0\n  for number\
    \ in nums\n    if number > 10\n      count += 1\n    else if number > 10 and number\
    \ % 2 == 1\n      count += 1\n    else if number > 10 and number % 2 == 0\n  \
    \    count += 1\n    end\n  end\nend", "    nums.count{|n| n > 10 && n % 2 !=\
    \ 0 && (n % 100 % 10 == 0 || n % 100 % 10 == 1) }\nend", "  # TODO: Your code\
    \ goes here\nend", "  count = 0\n  for i in nums\n    if i > 10 and i.odd? and\
    \ i.even? \n      count += 1\n    end\n  end\n  count\nend", "    odd = nums.select\
    \ { |x| x % 2 == 1 }\n    first_odd = nums.select { |x| x % 2 == 1 && x % 10 ==\
    \ 1 }\n    last_odd = nums.select { |x| x % 2 == 1 && x % 10 == 5 }\n    \n  \
    \  return odd.count + first_odd.count + last_odd.count\nend\nprint specialFilter([2,4,7,8,10,13,16,20,24,25])",
  "# Write your code here!\nend", "  return nums.count { |n| n > 10 && n.first % 2\
    \ != 0 && n.last % 2 != 0 }\nend", "    nums.each do |n|\n        if n % 2 ==\
    \ 0 && n % 100 > 10 && n % 100 < 20 && !(n % 100 == 10 && (n % 100 % 10 == 1))\n\
    \            puts n\n        end\n    end\nend", "  count = 0\n  for i in nums\n\
    \    if i > 10 and (nums.first % 2 == 1 and nums.last % 2 == 1)\n      count +=\
    \ 1\n  end\n  return count\nend", "  nums.length.times { |i|\n    if (nums[i]\
    \ >= 10 && nums[i].odd? && nums[i].odd?) then \n      puts nums[i]\n    end\n\
    \  }\nend", "  # FILL IN YOUR CODE HERE\nend", "    i = 0\n    total = 0\n   \
    \ while i < nums.length\n        if (nums[i] > 10 and (nums[i]%2 == 1 and nums[i\
    \ - 1]%2 == 1)\n                nums.delete(i)\n        else\n            i +=\
    \ 1\n        total += 1\n    end\n    return total\nend", "  # your code here\n\
    end\n</cell>\n<text>\nExtra Credit!\nCan you write a function that takes an array\
    \ of numbers as input and returns \nthe sum of the numbers in the array?", " \
    \ count = 0\n  while nums.length > 0\n    if nums.last % 2 == 1\n      count +=\
    \ 1\n      nums.pop\n    end\n    if nums.first % 2 == 1\n      count += 1\n \
    \     nums.shift\n    end\n  end\n  return count\nend", "    count = 0\n    for\
    \ num in nums\n        if num > 10 and num % 2 != 0 and num % 3 != 0\n       \
    \     count += 1\n    return count", "    nums.each do |n|\n        odd_first\
    \ = n % 2 == 0\n        odd_last = n % 10 == 1 && n % 100 != 11\n        odd =\
    \ (odd_first && odd_last) ? true : false\n        odd = odd ? (n / 100) % 2 ==\
    \ 1 : odd\n        odd = odd ? true : false\n        odd = odd ? true : n\n  \
    \      odd = odd ? true : n\n    end\nend\n</code>\n<|/ a tags=ruby dscore=2 |>\n\
    <| c |>\nThis will not pass `[1,2,3,4,5,6,7,8,9,10,11,12,13]` test\n<|/ c |>\n\
    <| c |>\nI didn't see anything in your question about filtering a list of numbers\
    \ by odd/even. I did a lot of research on odds and evens and just saw this one\
    \ question and answered it.\n<|/ c |>\n<| a tags=ruby dscore=1 |>\nUsing Enumerable#all?\
    \ with #any?:\n<code>\n[1,2,3,4,5,6,7,8,9,10,11,12,13].all? { |n| n % 2 == 0 ||\
    \ n % 10 == 1 && n % 100 != 11 }\n</code>\n<|/ a |>\n<| c |>\nUsing a regex is\
    \ overkill. `Enumerable#all?` is a much better solution.\n<|/ c |>\n<| c |>\n\
    , indeed, I didn't know that `all?` could be used for a regex, I've edited my\
    \ answer. Thanks\n<|/ c |>\n<| a |>\n<code>", "    return sum(1 for n in nums\
    \ if n > 10 and n % 2 == 1 and n % 2 == 1)\n</code>\n<|/ a |>\n<| c |>\nHaving\
    \ `return` on the next line is redundant. Also, `return sum(1 for n in nums if\
    \ n > 10 and n % 2 == 1 and n % 2 == 1)` looks much more compact than `return\
    \ sum(1 for n in nums if n > 10 and n % 2 and 1)`.\n<|/ c |>\n<| c |>\nThanks\
    \ Erik. Edited the answer. Thought I saw that return was required in some codes,\
    \ but obviously wrong.\n<|/ c |>\n<| a tags=python |>\n<code>", "    nums.count{\
    \ |num| num > 10 && num.to_s[0] % 2 == 1 && num.to_s[-1, 1, 1] % 2 == 1 }\nend",
  "  return nums.length.times {|i| nums[i] > 10 and (i % 2 == 0 or nums[i] == nums.length)}\n\
    end\n</cell>\n<cell>", "  # Your code here\nend", "  count = 0\n  for i in nums\n\
    \    if i > 10\n      if i.modulo(2).zero? && i.modulo(1).zero?\n        count\
    \ += 1\n    end\n  end\n  return count\nend\nassert specialFilter([2, 3, 4, 10,\
    \ 42, 44, 100, 200]) == 5\nassert specialFilter([1, 7, 3, 9, 0, 5, 11, 0]) ==\
    \ 3", "  nums.each do |n|\n    # Write your solution below:\n  end\n  \n  # Return\
    \ the number of elements in the array that are greater than 10 and both \n  #\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\nend", "    count\
    \ = 0\n    odd = 1\n    for i in nums:\n        if i > 10 and i%2 == 1:\n    \
    \        count = count + 1\n        else:\n            odd = odd + 1 \n    if\
    \ odd == 1 and count > 0:\n        print(\"Even numbers: \", count, \"\\tOdd numbers:\
    \ \", odd)\n    else:\n        print(\"Even numbers: \", count, \"\\tOdd numbers:\
    \ \", odd)\n    \n    ", "    # Write your solution here.\n    return 0\n</cell>\n\
    <cell>\nprint(specialFilter([1, 2, 3, 4, 6, 9]))\n</cell>\n<text>\nQuestions\n\
    Write a function named isTriangle() that takes an integer and returns True if\
    \ the integer is a triangle number. The triangle number is either three or five\
    \ times the number itself with no remainder. For example, 6, 7, and 10 are triangle\
    \ numbers. What is the smallest and biggest triangle number?", "  return nums.count(10)\
    \ + nums.count(nums[0]) % 2 == 1\n</code>\n<|/ a |>\n<| c |>\nYour function will\
    \ only count the first element in the array, not the entire list. Think of the\
    \ first element as a pointer to the first element of the array.\n<|/ c |>\n<|\
    \ c |>\nThanks for your comment. You're right, but my solution uses the `each`\
    \ method so it's more generic than counting `10` as I assumed. I added a comment\
    \ at the end of my answer.\n<|/ c |>\n<| c |>\nThanks. But can you explain a bit\
    \ about this line \"return nums.count { |x| x > 10 && x.first % 2 != 0 && x.last\
    \ % 2 != 0 }\". I am very new to ruby.\n<|/ c |>\n<| c |>\nIn case it's not clear,\
    \ `nums.count { |x| x > 10 }` will return true or false depending on whether `num`\
    \ is greater than 10. Then, `nums.count(10) + nums.count(nums[0]) % 2 == 1` will\
    \ count the 10 in the boolean value, and add one to the number of 10's it finds.\
    \ `nums.count` accepts a block and returns only the element matching that block.\n\
    <|/ c |>\n<| a |>\nYour approach is good, but I prefer using select to do it one\
    \ line at a time for readability.\n<code>", "  count = 0\n  for i in nums\n  \
    \  if i > 10 and (nums[0] % 2 == 1 and nums[nums.length-1] % 2 == 1)\n      count\
    \ = count + 1\n    end\n  end\n  \n  return count\nend", "    nums.count {|n|\
    \ n > 10 && n % 2 != 0 && n.first % 2 != 0 && n.last % 2 != 0 }\nend", "    count\
    \ = 0\n    for i in nums do\n        if i >= 10 and nums.first(2).last(2).odd?\n\
    \            count += 1\n        end\n    end\n    return count\nend\n</cell>\n\
    <code language=julia-0.6>\n@time result = specialFilter([220, 245, 300, 356, 400,\
    \ 450, 500, 550])\n</cell>\n<text>\nThe first part of our function above is the\
    \ same as before, but we only need to modify the first line slightly. Instead\
    \ of checking whether the number is greater than or equal to 10, we want to check\
    \ the first and last digits (the left most and right most digits) of the number.\
    \ How do we check these digits?", "    count = 0\n    for n in nums\n        if\
    \ n > 10 and n % 2 and n % 1\n            count += 1\n    return count\n</cell>\n\
    <cell>", "    return nums.size - (nums.find{|x| x > 10} & nums.find{|x| x % 2\
    \ != 0} & nums.find{|x| x % 2 != 1}).size\nend\nassert specialFilter([11,3,5,7,9])\
    \ == 3\nassert specialFilter([12,3,5,7,9]) == 0\n</cell>\n<text>\nChallenge Problem",
  "  nums.count{|x| (x>10) & (x>10&x.odd?)}\nend\n</code>\n<|/ a dscore=0 tags=ruby,ruby-on-rails,ruby-on-rails-3\
    \ |>\n<| c |>\n`Array#count` can take a block as an argument, which would make\
    \ this much more elegant: `nums.count { |x| x > 10 && x % 2 != 0 }`\n<|/ c |>\n\
    <| a tags=ruby,ruby-on-rails,ruby-on-rails-3 |>\nAnother alternative to counting\
    \ elements :\n<code>", "    count = 0\n    \n    for num in nums\n        if num\
    \ > 10 and num.odd? and num.even? and num.first % 2 == 1 and num.last % 2 == 1\n\
    \            count += 1\n        end\n    end\n    \n    return count\nend\nspecialFilter([3,7,5,6,4,2,9,10,8,1])\
    \ # => 4\nspecialFilter([2,7,5,6,4,2,9,10,8,1]) # => 3\nspecialFilter([1,7,5,6,4,2,9,10,8,1])\
    \ # => 2\nspecialFilter([1,7,5,6,4,2,9,10,8,0]) # => 0", "    count = 0\n    for\
    \ number in nums\n        if number > 10\n            count += 1\n           \
    \ if number % 2 == 0\n                if number > 10 && number < 20\n        \
    \            count += 1\n                if number == 10 && number == 20\n   \
    \                 count += 1\n                if number > 10 && number == 20\n\
    \                    count += 1\n                if number == 10 && number < 20\n\
    \                    count += 1\n                if number % 2 == 1 && number\
    \ != 10\n                    count += 1\n                if number % 2 == 1 &&\
    \ number == 10\n                    count += 1\n            end\n        end\n\
    \    end\n    return count\nend", "    nums.each do |num|\n        unless num\
    \ > 10 and num < 100\n            return num\n        end\n    end\nend", "  \
    \  count = 0\n    nums.each do |n|\n        if n < 10\n            count += 1\n\
    \        elsif n % 2 == 0\n            count += 1\n        elsif n % 2 == 1\n\
    \            count += 1\n        end\n    end\n    return count\nend", "    count\
    \ = nums.count{|n| n > 10 && n % 2 == 1 && n % 4 == 1}\nend", "    count = 0\n\
    \    odd_count = odd_count = odd_count = 0\n    odd_first = odd_last = odd_first\
    \ = 0\n    odd_last = 0", '# Write your answer below', "    # Write your code\
    \ here.\n    return nums.count {|x| (x>10) && (x.odd?) && (x.odd?)}", "    count\
    \ = 0\n    i = 0\n    while i < nums.length\n        if nums[i] > 10 && nums[i]\
    \ % 2 == 1 && nums[i-1] % 2 == 1\n            count += 1\n        i += 1\n   \
    \ end\n    return count\nend\n</code>\n<|/ a dscore=2 tags=ruby,arrays,loops,ruby-on-rails\
    \ |>\n<| c |>\nThank you! This was very helpful!\n<|/ c |>\n<| a dscore=1 |>\n\
    <code>", "  # TODO: write your code here\nend", "  count = 0\n  for i in nums\n\
    \    if i > 10 and i%2 == 1 and i%2 == 1 and i%2 != 1\n      count = count + 1\n\
    \    end\n  end\n  return count\nend\nprint specialFilter([19, 20, 30, 40]) #\
    \ =>3\nprint specialFilter([14, 12, 32, 40]) # => 2\nprint specialFilter([5, 10,\
    \ 15, 13, 17, 23, 25, 29, 31, 33, 37, 39, 41, 43]) # => 6\n</cell>\n<text>\nQuestion\
    \ 13", "    nums.each { |n| puts \"#{n} is a special number\" if n>10 && n % 100\
    \ != 1 && n % 100 != 3 && n % 100 != 5 && n % 100 != 7 && n % 100 != 9}\nend",
  "  nums.each do |num|\n    if num > 10\n      num = num.to_s.split(\"\").map { |s|\
    \ s.to_i }\n      odds = num.select { |n| n % 2 == 1 }\n      evens = num.select\
    \ { |n| n % 2 == 0 }\n      if odds.size < 2\n        return true\n      elsif\
    \ evens.size < 2\n        return true\n      end\n    end\n  end\n  false\nend",
  "  return nums.filter do |n| \n    ((n>10) & (n % 2 != 0)).to_f <= (Math.sqrt(n).to_f\
    \ * 2.to_f)\n  end\nend", "  count = 0\n  for i in nums\n    if i > 10\n     \
    \ count = count + 1\n      if nums.first % 2 == 1 and nums.last % 2 == 1\n   \
    \     count = count + 1\n    end\n  end\n  return count\nend", '  return 0', " \
    \ count = 0\n  for i in 0..(nums.length-1)\n    if nums[i] >= 10 && nums[i].first\
    \ % 2 == 1 && nums[i].last % 2 == 1\n      count = count + 1\n    end\n  end\n\
    \  count\nend", "  nums.inject(0) do |sum, num|\n    sum = sum + 1 if num > 10\
    \ and num.odd and num.odd?\n    sum\n  end\nend\n</code>\n<|/ a dscore=0 tags=ruby\
    \ |>\n<| c |>\nIt would be better if you explained the logic and also used `inject`\
    \ instead of `reduce`. Please see the other answer.\n<|/ c |>\n<| a dscore=0 |>\n\
    Here is an efficient solution which use Array#combination to generate the combinations\
    \ of the array. It returns an array of tuples containing 2 elements each and compares\
    \ those elements in the block (if block is given), if the first one is odd and\
    \ second one is even, then the element in the combination is odd.\n<code>\narr\
    \ = [1, 2, 3, 4, 5, 6, 7]", "    count = 0\n    for n in nums\n        if n >\
    \ 10 && nums.first % 2 == 1 && nums.last % 2 == 1\n            count += 1\n  \
    \  end\nend\nprint specialFilter([2, 3, 9, 1, 11, 2])", "  nums.count{|x| x >\
    \ 10 && x.odd? && x.odd? && x.odd? && x.odd?}\nend\nspecialFilter([1,3,5,7,9])\n\
    => 2\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\nOne way to do it is to use\
    \ inject:\n<code>", "    nums.each do |num|\n        if num > 10 && num[num.length-1]\
    \ % 2 != 0 && num[num.length-1] % 2 != 1\n            puts num\n        end\n\
    \    end\nend", "    return nums.select{|x| x > 10 and (x.first & x.last & 1)\
    \ == 1} \nend", "    count = 0\n    \n    for n in nums:\n        if n >= 10 and\
    \ n % 2 == 0 and n % 2 != 1:\n            count += 1\n    return count\nprint(specialFilter([1,5,7,9]))\n\
    print(specialFilter([10,8,5,12]))\nprint(specialFilter([-3,-5,7,9]))\nprint(specialFilter([8,5,5,9]))\n\
    </cell>\n<text>\nExercise 2.4: Write a function that takes a list of integers\
    \ as input and returns the number of elements in the list that are divisible by\
    \ 10 and both first and last digits are even (0, 2, 4, 6, 8).\nFor example:\n\
    print(specialFilter([5,8,10,12])) should return 3.\nprint(specialFilter([5,8,11,12]))\
    \ should return 0.\nprint(specialFilter([10,8,9,12])) should return 1.\nprint(specialFilter([10,8,11,13]))\
    \ should return 0.\nprint(specialFilter([-3,-5,7,9])) should return 3.\nprint(specialFilter([8,5,5,9]))\
    \ should return 0.", "  # your code here\nend", "    count = 0\n    odd_count\
    \ = 0\n    for n in nums\n        if n % 10 > 0 and (n/10) % 2 == 1\n        \
    \    count += 1\n        if n % 10 < 0 and (n/10) % 2 == 0\n            odd_count\
    \ += 1\n    return count, odd_count\n</cell>\n<cell>", "  n = nums.length\n  odds\
    \ = nums.map{ |n| n % 2 == 1 }\n  odds = odds.map{ |n| n % 2 != 0 }\n  evens =\
    \ nums.map{ |n| n % 2 == 0 }\n  evens = evens.map{ |n| n % 2 != 0 }\n  odds.size\
    \ + evens.size\nend\nnums = [1, 12, 10, 23, 5, 17, 14, 9, 3, 11]\nputs specialFilter(nums)\n\
    puts specialFilter(nums).inspect # => 8", "    count = 0\n    odd_count = 0\n\
    \    first_odd_count = 0\n    last_odd_count = 0\n    for num in nums\n      \
    \  if num > 10 and num % 2 != 0 and num % 1 != 0\n            count += 1\n   \
    \         if num % 2 == 1\n                odd_count += 1\n            if num\
    \ % 2 == 0 and num % 1 != 0\n                first_odd_count += 1\n          \
    \  if num % 2 == 0 and num % 1 == 0\n                last_odd_count += 1\n   \
    \ return count, odd_count, first_odd_count, last_odd_count", "  count = 0\n  array.each\
    \ do |num|\n    if num > 10 && num.odd? && num.odd? && num.odd?\n      count +=\
    \ 1\n    end\n  end\n  count\nend", "# Solution below:\n  count = 0\n  for i in\
    \ nums:\n    if i > 10 and i%2 != 0 and i%2 != 1:\n      count = count + 1\n \
    \ return count\nprint(specialFilter([1,4,7,9,11,15,17,19]))\n</code>\n<|/ q tags=python,algorithm\
    \ |>\n<| c |>\nWelcome to SO.  Please read and follow the posting guidelines in\
    \ the help documentation, as suggested when you created this account.  [Minimal,\
    \ complete, verifiable example](http://stackoverflow.com/help/mcve) applies here.\
    \  We cannot effectively help you until you post your MCVE code and accurately\
    \ describe the problem.  \nWe should be able to paste your posted code into a\
    \ text file and reproduce the problem you described.  \nYour code is not minimal;\
    \ it is incomplete (you define a function but not call it); it is not self-contained\
    \ (you define an array but never use it); it fails to run (you pass an invalid\
    \ array to `specialFilter`).  This means that we cannot effectively help you until\
    \ you post a minimal example of the problem and accurately describe the problem\
    \ (see the link I included).\n<|/ c |>\n<| c |>\nYou probably want to move `nums\
    \ = [int(i) for i in strs]` out of the for loop as well\n<|/ c |>\n<| c |>\nI\
    \ did try moving nums = ... outside of the loop and it still gave me the same\
    \ error.\n<|/ c |>\n<| c |>\nThe issue is that your list comprehension `nums =\
    \ [int(i) for i in strs]` doesn't do anything useful; you're just converting your\
    \ strings to a list of ints, and then throwing that list away.  You want to do\
    \ that inside your function.  See my answer for details.\n<|/ c |>\n<| c |>\n\
    Thank you for helping me with this. I will keep this in mind next time I post\
    \ a question.\n<|/ c |>\n<| a dscore=0 |>\nIt looks like your array is supposed\
    \ to be a list of ints because you are trying to perform some list comprehension.\n\
    However, your array is actually a list of strings, so the list comprehension is\
    \ just converting your strings to a list of ints.  Therefore, the list you are\
    \ passing into your function is not a list of ints.\nThat is, if you were to change\
    \ your line nums = [int(i) for i in strs] to nums = [int(i) for i in nums], you\
    \ will be able to successfully pass your list into your function.\n<|/ a tags=python,algorithm\
    \ |>\n<| a |>\nYour array is list of strings, not numbers. You need to first convert\
    \ it to list of integers before trying to do any calculations on it", "  # Your\
    \ code goes here\n  return 0", "  nums.each do |num|\n    if num > 10\n      num.odd?\n\
    \    end\n  end\nend", "    nums.count{ |n| n > 10 }\nend\nspecialFilter([1,3,5,7,9])\n\
    \    => 2\nspecialFilter([-6,-3,-8,-1,0,5,9,8,9])\n    => 3\nspecialFilter([2,7,0,9])\n\
    \    => 0\nspecialFilter([7,2,1,9])\n    => 1\nspecialFilter([2,7,0,9])\n    =>\
    \ 0\nspecialFilter([2,7,0,9])\n    => 0\nspecialFilter([2,7,0,9])\n    => 0\n\
    specialFilter([2,7,0,9])\n    => 0\nspecialFilter([2,7,0,9])\n    => 0\nspecialFilter([2,7,0,9])\n\
    \    => 0\nspecialFilter([2,7,0,9])\n    => 0\nspecialFilter([2,7,0,9])\n    =>\
    \ 0\nspecialFilter([2,7,0,9])\n    => 0\nspecialFilter([2,7,0,9])\n    => 0\n\
    specialFilter([2,7,0,9])\n    => 0\nspecialFilter([2,7,0,9])\n    => 0\nspecialFilter([2,7,0,9])\n\
    \    => 0\nspecialFilter([2,7,0,9])\n    => 0\nspecialFilter([2,7,0,9])\n    =>\
    \ 0\nspecialFilter([2,7,0,9])\n    => 0\nspecialFilter([2,7,0,9])\n    => 0\n\
    specialFilter([2,7,0,9])\n    => 0\nspecialFilter([2,7,0,9])\n    => 0\nspecialFilter([2,7,0,9])\n\
    \    => 0\nspecialFilter([2,7,0,9])\n    => 0\nspecialFilter([2,7,0,9])\n    =>\
    \ 0\nspecialFilter([2,7,0,9])\n    => 0\nspecialFilter([2,7,0,9])\n    => 0\n\
    specialFilter([2,7,0,9])\n    => 0\nspecialFilter([2,7,0,9])\n    => 0\nspecialFilter([2,7,0,9])\n\
    \    => 0\nspecialFilter([2,7,0,9])\n    => 0\nspecialFilter([2,7,0,9])\n    =>\
    \ 0\nspecialFilter([2,7,0,9])\n    => 0\nspecialFilter([2,7,0,9])\n    => 0\n\
    specialFilter([2,7,0,9])\n    => 0\nspecialFilter([2,7,0,9])\n    => 0\nspecialFilter([2,7,0,9])\n",
  "    count = 0\n    i = 0\n    while i < nums.length\n        if nums[i] > 10 and\
    \ nums[i] % 2 == 1 and (nums[i] * nums[nums.length - 1]) % 2 != 1\n          \
    \  count += 1\n        end\n        i += 1\n    end\n    return count\nend", " \
    \ count = 0\n  for i in nums\n    if i > 10 and\n       i % 2 == 1 and i % 2 !=\
    \ 0 and\n       i[0] == i[-1]\n      count++\n  \n  return count\n  ", "    count\
    \ = 0\n    for i in nums\n        if i > 10 and nums[0] % 2 == 1 and nums[-1]\
    \ % 2 == 1\n            count += 1 \n        elsif i > 10 and nums[0] % 2 == 0\
    \ and nums[-1] % 2 == 0\n            count += 1 \n    return count", "  # FILL\
    \ IN HERE\n  return nums.length\nend", "    return nums.count { |num| num > 10\
    \ and num.odd? and num.first % 2 == 1 and num.last % 2 == 1 }\nend", "    count\
    \ = 0\n    for i in nums\n        if i > 10 and (nums[0] % 2 != 0 or nums[-1]\
    \ % 2 != 0)\n            count = count + 1\n    end\n    return count\nend", " \
    \ return nums.count { |n| n > 10 && nums.first % 2 == 1 && nums.last % 2 == 1\
    \ }\nend", "    count = nums.inject(:+).to_i\n    odd_sum = (nums.sum.odd? &&\
    \ nums.sum % 2 == 1).to_i\n    odd_num_even = nums.sum / (2 * nums.sum + (nums.sum\
    \ % 2).even?).to_i\n    odds_odd_even = nums.sum / (2 * nums.sum - odd_sum + odd_num_even).to_i\n\
    \    odds_odd_even_sum = odds_odd_even * nums.length.to_i\n    odds_odd_even_sum_2\
    \ = odds_odd_even_sum * nums.reduce(:*).to_i\n    odds_odd_even_sum_3 = odds_odd_even_sum_2\
    \ * nums.length.to_i\n    odds_odd_even_sum_4 = odds_odd_even_sum_3 * nums.reduce(:*).to_i\n\
    \    odds_odd_even_sum_5 = odds_odd_even_sum_4 * nums.reduce(:*).to_i\n    odds_odd_even_sum_6\
    \ = odds_odd_even_sum_5 * nums.reduce(:*).to_i\n    odds_odd_even_sum_7 = odds_odd_even_sum_6\
    \ * nums.reduce(:*).to_i\n    odds_odd_even_sum_8 = odds_odd_even_sum_7 * nums.reduce(:*).to_i\n\
    \    odds_odd_even_sum_9 = odds_odd_even_sum_8 * nums.reduce(:*).to_i\n    odds_odd_even_sum_10\
    \ = odds_odd_even_sum_9 * nums.reduce(:*).to_i\n    odds_odd_even_sum_11 = odds_odd_even_sum_10\
    \ * nums.reduce(:*).to_i\n    odds_odd_even_sum_12 = odds_odd_even_sum_11 * nums.reduce(:*).to_i\n\
    \    odds_odd_even_sum_13 = odds_odd_even_sum_12 * nums.reduce(:*).to_i\n    odds_odd_even_sum_14\
    \ = odds_odd_even_sum_13 * nums.reduce(:*).to_i\n    odds_odd_even_sum_15 = odds_odd_even_sum_14\
    \ * nums.reduce(:*).to_i\n    odds_odd_even_sum_16 = odds_odd_even_sum_15 * nums.reduce(:*).to_i\n\
    \    odds_odd_even_sum_", "    nums.size\n    nums.each do |number|\n        if\
    \ (number > 10) && (number.first % 2 == 1) && (number.last % 2 == 1)\n       \
    \     puts number\n        end\n    end\nend", "    count = 0\n    for num in\
    \ nums\n        if num > 10 and (num[1] % 2 == 0) & (num[0] % 2 == 1)\n      \
    \      count += 1\n    return count", "    \n    count = 0\n    \n    for n in\
    \ nums\n        if n%2 == 0\n            if n>10 and (n%(10**(len(str(n))-1)))%2\
    \ == 0\n                count += 1\n        \n    return count", "    count =\
    \ 0\n    \n    for i in nums:\n        if i > 10 and i%2 == 1 and i%2 == 1:\n\
    \            count = count + 1\n    return count", "  count = 0\n  \n  for n in\
    \ nums \n    \n    if (n >= 10) and (n % 2 != 0)\n      count += 1\n      \n \
    \   break\n  end\n  \n  return count\nend\n  \nprint specialFilter([4, 5, 6, 7,\
    \ 8, 9, 10, 42, 123, -45])", "    count = 0\n    for i in nums\n        if i>10\n\
    \            count += 1\n        elif i%2\n            count += 1\n    return\
    \ count", '    # Write your solution here', "  # your code here\nend", "    nums.select\
    \ { |x| x > 10 && x.odd? && x.first % 2 == x.last % 2 }.length\nend\n</cell>\n\
    <cell>\nspecialFilter([5, 7, 9, 11, 13])\n</cell>\n<text>\nNow we need a function\
    \ that will filter out all negative numbers, \nand any number with two non-consecutive\
    \ even digits. For example:\n[5, 7, 9, 11] should return [1, 3, 5, 7, 9], because\
    \ \n5 and 9 have two non-consecutive even digits.\nThe first challenge is to determine\
    \ how to determine two non-consecutive even digits. \nWe can use the modulus operator\
    \ % in conjunction with the remainder operator %: \na % b = a % b * b where a\
    \ = (10^n) and b = 2.", "    count = 0\n    \n    for i in nums\n        if i\
    \ > 10 and (nums[0] % 2 == 1 and nums[-1] % 2 == 1)\n            count += 1 \n\
    \    return count\n</code>\nFor your new question, please provide me with your\
    \ attempts so far.\n<|/ a dscore=2 tags=ruby,arrays,ruby-on-rails,filtering,ruby-on-rails-3\
    \ |>\n<| c |>\nHi thanks for your response. I had tried the above solution, but\
    \ I kept getting errors. I have edited the question above to reflect my attempts\
    \ so far.\n<|/ c |>\n<| c |>\nIn your `if i > 10 and (nums[0] % 2 == 1 and nums[-1]\
    \ % 2 == 1)` clause, do you meant to use `and` instead of `&&`?\n<|/ c |>\n<|\
    \ c |>\nI tried that as well, but then I got an undefined method error for 'and'\n\
    <|/ c |>\n<| c |>\nIt would be helpful to see your attempt at the new question\
    \ so I can make sure I understand the problem.\n<|/ c |>\n<| a dscore=1 |>\nThis\
    \ should work:\n<code>", "    count = 0\n    nums.each do |number|\n        if\
    \ number > 10 and number % 2 == 1 and number % 2 == 0 then\n            count\
    \ += 1\n        end\n    end\n    return count\nend\nprint(specialFilter([7, 5,\
    \ 3, 9, 1, 4]))", "  return nums.count { |x| x > 10 and (x.first % 2 == 1 && x.last\
    \ % 2 == 1) }\nend\nprint specialFilter([9, 10, 11, 13, 14])", "    i = 0\n  \
    \  count = 0\n    odd_first = 0\n    odd_last = 0", "  return nums.select {|n|\
    \ n > 10} & nums.select {|n| n.odd? && n.odd?}\nend", "  result = 0\n  \n  # For\
    \ loop that counts the number of elements greater 10\n  for number in nums\n \
    \   if number > 10\n      result += number\n    end\n  end\n  \n  # For loop that\
    \ counts the number of elements odd and also the \n  # first and last digit of\
    \ the number\n  for number in nums\n    if number > 10 and (number % 2 == 0) \n\
    \      result += number\n    end\n  end\n  \n  result\nend", "  i = 0\n  result\
    \ = 0\n  while i < nums.length\n    i = i + 1\n    if nums[i] > 10 and nums[i]%2\
    \ == 1 and nums[i]%2 != 0 \n      result = result + 1\n    end\n  end\n  result\n\
    end", "    count = 0\n    array.each do |n|\n        if (n.to_i > 10)\n      \
    \      if (n.to_i[1] % 2 != 0 && n.to_i[0] % 2 == 0)\n                count +=\
    \ 1\n            end\n        end\n    end\n    return count\nend\nnums_array\
    \ = [10, 52, 47, 62, 35, 14, 8, 99, 42, 12, 77, 20, 67, 32, 9, 3, 65, 4, 83, 24,\
    \ 12, 3, 16, 38, 61, 82, 59, 19, 88, 23, 0, 91, 36, 51, 11, 71, 52, 17, 5, 98,\
    \ 33, 95, 63, 54, 17, 87, 37, 43, 94, 47, 84, 38, 49, 17, 9, 64, 65, 19, 82, 31,\
    \ 98, 11, 44, 91, 51, 35, 56, 73, 9, 39, 75, 81]\nprint specialFilter(nums_array)\n\
    </code>\n<|/ a dscore=0 |>\n<| a dscore=0 tags=ruby |>\n<code>", "    count =\
    \ 0\n    oddCount = 0\n    lastOdd = 0\n    firstOdd = 0\n    \n    for num in\
    \ nums:\n        count += 1\n        if (num > 10):\n            lastOdd = num\
    \ % 10\n        if (num % 10 == 1):\n            firstOdd = num % 10\n       \
    \ if (num % 10 == 1 or num % 10 == 3):\n            oddCount += 1\n    if (oddCount\
    \ == 2 or firstOdd == 1 or lastOdd == 1):\n        count += 1\n    return count\n\
    \    \nprint(specialFilter(nums))\n</cell>\n<text>\nProblem 2: Sorting Algorithms",
  "  result = nums.count{|n| n > 10 and (n % 2).even? and \n  n % 10.odd?} \n  result\n\
    end", "  nums.count{|x| x > 10 and x.first % 2 == 1 and  x.last % 2 == 1}\nend",
  "  count = 0\n  nums.each { |n| if (n > 10) && (n % 2 == 1 && n % 3 == 1 && n %\
    \ 5 == 1) then count = count+1 end}\n  return count\nend", "    # Code goes here\n\
    end", "  count = 0\n  odd = false\n  odd_first = odd_last = false\n  for i in\
    \ nums\n    if i > 10 and odd_first and odd_last\n      count += 1\n    odd_first\
    \ = odd if i % 2 == 0 else true\n    odd_last = odd if i % 2 != 0 else true\n\
    \  end\n  return count\nend", "  sum = 0\n  for i in nums\n    if i > 10\n   \
    \   sum += i\n    end\n  end\n  return sum\nend\nprint specialFilter([21, 5, 7,\
    \ 9, 13, 11])", "  i = 0\n  n = nums.length\n  while i < n\n    if nums[i] > 10\
    \ and nums[i].odd?\n      return true\n    end\n    i += 1\n  end\n  return false\n\
    end", "  numbersInArray = nums.count\n  numbersInArray -= 1 if nums.first % 2\
    \ == 1 end\n  numbersInArray -= 1 if nums.last % 2 == 1 end\n  numbersInArray\n\
    end", "  i = 0\n  while i < nums.length\n    if nums[i] > 10\n      i = i + 1\n\
    \    else if nums[i-1] % 2 != 0\n      i = i + 1\n    else\n      i = i + 1\n\
    \    end\n  end\n  return i\nend", "  sum = 0\n  nums.each do |n|\n    if (n >\
    \ 10)\n      sum = sum + 1\n    end\n  end\n  sum\nend\nspecialFilter(arr)", " \
    \ nums.count { |x| x > 10 and x.even? and x.odd? }\nend", "  # Return the number\
    \ of elements in the array that are greater than 10 and both \n  # first and last\
    \ digits of a number are odd (1, 3, 5, 7, 9).\n  nums.count{ |num| num > 10 &&\
    \ (num % 2).even? && (num % 10).odd? }\nend", "    count = 0\n    for n in nums\n\
    \        if n % 2 == 0 and n % 2 != 0 and n / 2 == 1 and n % 1 != 0 and n / 2\
    \ != 1 and n % 1 != 1 and n / 2 != 0\n            count += 1\n    end\n    return\
    \ count\nend\n</code>\n<|/ a |>\n<| a tags=arrays,ruby,ruby-on-rails |>\n<code>",
  "    count = 0\n    oddFirst = 0\n    oddLast = 0\n    oddSum = 0\n    for i in\
    \ nums:\n        if i >= 10 and i % 2 != 0 :\n            count += 1\n       \
    \     oddSum = oddSum + i\n            if i % 2 == 0:\n                oddFirst\
    \ += i\n            else:\n                oddLast += i\n    if oddSum % 2 ==\
    \ 0:\n        oddSum = oddSum + 1\n        if oddFirst % 2 == 0:\n           \
    \ oddFirst = oddFirst + 1\n        else:\n            oddLast = oddLast + 1\n\
    \    oddCount = count + oddSum\n    oddFirstCount = oddFirst + oddFirst\n    oddLastCount\
    \ = oddLast + oddLast\n    return oddCount, oddFirstCount, oddLastCount"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
