name: HumanEval_63_fibfib
language: rb
prompt: "# The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
  \ that's defined as follows:\n# fibfib(0) == 0\n# fibfib(1) == 0\n# fibfib(2) ==\
  \ 1\n# fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n# Please write a function\
  \ to efficiently compute the n-th element of the fibfib number sequence.\ndef fibfib(n)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fibfib\n\
  \    candidate = method(:fibfib)\n    assert_equal(1, candidate.call(2))\n    assert_equal(0,\
  \ candidate.call(1))\n    assert_equal(4, candidate.call(5))\n    assert_equal(24,\
  \ candidate.call(8))\n    assert_equal(81, candidate.call(10))\n    assert_equal(274,\
  \ candidate.call(12))\n    assert_equal(927, candidate.call(14))\n  end\nend\n"
completions: [end, "  fibfib = 0\n  fibfib = 1\n  fibfib = 1\n  fibfib = 1\n  fibfib\
    \ = 1\n  fibfib = 1\n  fibfib = 1\n  return fibfib\nend", "  if n < 0\n    puts\
    \ \"fibfib: fibfib: fibfib: fibfib: fibfib: fibfib: fibfib: fibfib: fibfib: fibfib:\
    \ fibfib: fibfib: fibfib: fibfib: fibfib: fibfib: fibfib: fibfib: fibfib: fibfib:\
    \ fibfib: fibfib: fibfib: fibfib: fibfib: fibfib: fibfib: fibfib: fibfib: fibfib:\
    \ fibfib: fibfib: fibfib: fibfib: fibfib: fibfib: fibfib: fibfib: fibfib: fibfib:\
    \ fibfib: fibfib: fibfib: fibfib: fibfib: fibfib: fibfib: fibfib: fibfib: fibfib:\
    \ fibfib: fibfib: fibfib: fibfib: fibfib: fibfib: fibfib: fibfib: fibfib: fibfib:\
    \ fibfib: fibfib: fibfib: fibfib: fibfib: fibfib: fibfib: fibfib: fibfib: fibfib:\
    \ fibfib: fibfib: fibfib: fibfib: fibfib: fibfib: fibfib: fibfib: fibfib: fibfib:\
    \ fibfib: fibfib: fibfib: fibfib: fibfib: fibfib: fibfib: fibfib: fibfib: fibfib:\
    \ fibfib: fibfib: fibfib: fibfib: fibfib: fibfib: fibfib: fibfib: fibfib: fibfib:\
    \ fibfib: fibfib: fibfib: fibfib: fibfib: fibfib: fibfib: fibfib: fibfib: fibfib:\
    \ fibfib: fibfib: fibfib: fibfib: fibfib: fibfib: fibfib: fibfib: fibfib: fibfib:\
    \ fibfib: fibfib: fibfib: fibfib: fibfib: fibfib: fibfib: fibfib: fibfib: fibfib:\
    \ fibfib: fibfib: fibfib: fibfib: fibfib: fibfib: fibfib: fibfib: fibfib: fibfib:\
    \ fibfib: fibfib: fibfib: fibfib: fibfib: fibfib: fibfib: fibfib: fibfib: fibfib:\
    \ fibfib: fibfib: fibfib: fibfib: fibfib: fib: fibfib: fib: fib: fibfib: fib:\
    \ fibfib: fibfib: fib: fibfib: fib: fibfib: fibfib: fibfib: fibfib: fib", "  if\
    \ n<=2 then return n\n  else fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\n\
    end\nfibfib(5)\n</cell>\n<text>\nWrite a function named fibfib_iter that computes\
    \ the nth element of the FibFib number sequence. The function should take an integer\
    \ n and return a float.", "  # raise an exception when fibfib(n) is 0 or 1.\n\
    \  raise \"n must be non-negative\" if n < 0", "end\n</cell>\n<cell>\nfibfib(0)\n\
    </cell>\n<cell>\nfibfib(1)\n</cell>\n<cell>\nfibfib(2)\n</cell>\n<cell>\nfibfib(3)\n\
    </cell>\n<text>\nProblem 7", "  return n==0 ? 0 : n==1 ? 1 : n==2 ? 1 : fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\nend", "  if n <= 3\n    return 0\n  else\n    fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n  end\nend", "    if n==0 or n==1\n        return\
    \ 0\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "  if n <= 1 then 1\n\
    \  else fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\nend\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=1 |>\nThe following code will return the nth fibonacci number:\n\
    <code>", "  if n <= 1\n    0\n  else\n    fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \  end\nend", "  if n < 0 then 0\n  else fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    end\nfibfib(2)", "  if n == 0\n    0\n  else\n    if n == 1\n      0\n    else\n\
    \      fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    end\n  end\nend", "  # Your\
    \ code here...\nend", end, "  # Example usage: print(fibfib(0))\n  raise NotImplementedError\n\
    end", "  if n == 0\n    fibfib(0)\n  elsif n == 1\n    fibfib(1)\n  elsif n ==\
    \ 2\n    fibfib(2)\n  else\n    fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\nend\n\
    print fibfib(0)\nprint fibfib(1)\nprint fibfib(2)\nprint fibfib(3)\nprint fibfib(-1)\n\
    </cell>\n<text>\nThe Fibonacci number sequence is one of the most frequently used\
    \ sequences in computer science. It has a \"mathematical name\" of \"fibonacci\"\
    . It's a sequence of numbers defined by the recurrence relation:", "    p =1\n\
    \    fibfib1 =0\n    fibfib2 =0\n    fibfib3 =0\n    if n == 0\n        p=0\n\
    \        fibfib1=0\n        fibfib2 =0\n        fibfib3 =0\n    if n == 1\n  \
    \      p=0\n        fibfib1=0\n        fibfib2 =1\n        fibfib3 =0\n    if\
    \ n == 2\n        p=0\n        fibfib1=0\n        fibfib2 =1\n        fibfib3\
    \ =1\n    if n ==3\n        p=0\n        fibfib1=1\n        fibfib2 =1\n     \
    \   fibfib3 =1\n    if n >3 \n        p =fibfib(n-3) + fibfib(n-2) + fibfib(n-1)\n\
    \    return p", "    if n == 0 || n == 1\n        return n\n    else\n       \
    \ return fibfib(n-1) + fibfib(n-2)\n    end\nend", "  if n == 0\n    0\n  elsif\
    \ n == 1\n    1\n  elsif n == 2\n    1\n  else\n    fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n  end\nend", end, "end\n</cell>\n<code language=julia-1.0>\n\
    @time fibfib(1)\n</cell>\n<code language=julia-1.0>\n@time fibfib(2)\n</cell>\n\
    <code language=julia-1.0>\n@time fibfib(3)\n</cell>\n<text>\nExercise 4\nWrite\
    \ a function to compute the n-th Fibonacci number using the recursive approach.",
  "  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\nend", "  fib = 0\n  fib = fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n  return fib\nend", "  if n == 0\n    0\n  elsif\
    \ n == 1\n    1\n  elsif n == 2\n    2\n  elsif n >= 3\n    fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n  end\nend", "  return\nend", end, "\tif n == 0\n\t\treturn 0\n\
    \telsif n == 1\n\t\treturn 0\n\telsif n == 2\n\t\treturn 1\n\telse\n\t\treturn\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "    fibfibs = []\n    if n == 0 then\n\
    \        return 0\n    if n == 1 then\n        return 1\n    if n == 2 then\n\
    \        return 2\n    if n > 2 and n <= 5 then\n        return fibfib(n-1) +\
    \ fibfib(n-2) + fibfib(n-3)\n    else\n        fibfibs << fibfib(n-1)\n      \
    \  fibfibs << fibfib(n-2)\n        fibfibs << fibfib(n-3)\n    end\n    return\
    \ fibfibs.reduce(:+)\nend", "    # Write your code here\n    if n<1:\n       \
    \ raise \"Not enough fibonacci numbers to compute fibfib\"\n    return fibfib(n-1)+fibfib(n-2)+fibfib(n-3)\n\
    print(fibfib(0))\n</cell>\n<text>\n5.4 Find two numbers whose sum is equal to\
    \ some number m, given a list of numbers. For example, given [10, 15, 25, 35],\
    \ return (25, 35).\nHINT: Two numbers can be said to be equal if they add up to\
    \ exactly m.", "  FibFib = [0,1,1,1]\n  FibFib[n]\nend", "  return\nend", "  if\
    \ n == 0\n    0\n  elsif n == 1\n    1\n  elsif n == 2\n    1\n  elsif n <= 3\n\
    \    fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  else\n    fibfib(n-2) + fibfib(n-3)\n\
    \  end\nend", "    sum = 0\n    if (n == 1)\n        sum = 0\n    else if ((n\
    \ == 2))\n        sum = 1\n    else\n        sum = fibfib(n - 1) + fibfib(n -\
    \ 2)\n    return sum\nprint(fibfib(0))\nprint(fibfib(1))\nprint(fibfib(2))\nprint(fibfib(0))\n\
    print(fibfib(1))\nprint(fibfib(2))\nprint(fibfib(0))\nprint(fibfib(1))\nprint(fibfib(2))\n\
    print(fibfib(0))\nprint(fibfib(1))\nprint(fibfib(2))\nprint(fibfib(0))\nprint(fibfib(1))\n\
    print(fibfib(2))\nprint(fibfib(0))\nprint(fibfib(1))\nprint(fibfib(2))\nprint(fibfib(0))\n\
    print(fibfib(1))\nprint(fibfib(2))\nprint(fibfib(0))\nprint(fibfib(1))\nprint(fibfib(2))\n\
    print(fibfib(0))\nprint(fibfib(1))\nprint(fibfib(2))\nprint(fibfib(0))\nprint(fibfib(1))\n\
    print(fibfib(2))\nprint(fibfib(0))\nprint(fibfib(1))\nprint(fibfib(2))\nprint(fibfib(0))\n\
    print(fibfib(1))\nprint(fibfib(2))\nprint(fibfib(0))\nprint(fibfib(1))\nprint(fibfib(2))\n\
    print(fibfib(0))\nprint(fibfib(1))\nprint(fibfib(2))\nprint(fibfib(0))\nprint(fibfib(1))\n\
    print(fibfib(2))\nprint(fibfib(0))\nprint(fibfib(1))\nprint(fibfib(2))\nprint(fibfib(0))\n\
    print(fibfib(1))\nprint(fibfib(2))\nprint(fibfib(0))\nprint(fibfib(1))\nprint(fibfib(2))\n\
    print(fibfib(0))\nprint(fibfib(1))\nprint(fibfib(2))\nprint(fibfib(0))\nprint(fibfib(1))\n\
    print(fibfib(2))\nprint(fibfib(0))\nprint(fibfib(1))\nprint(fibfib(2))\nprint(fibfib(0))\n\
    print(fibfib(1))\nprint(fibfib(2))\nprint(fibfib(0))\nprint(fibfib(1))\nprint(fibfib(2))\n\
    print(fibfib(0))\nprint(fibfib(1))\nprint(fibfib(2))\nprint(fibfib(0))\nprint(fibfib(1))\n\
    print(fibfib(2))\nprint(fibfib(0))\nprint(fibfib(1))\nprint(fibfib(2))\nprint(fibfib(0))\n\
    print(fibfib(1))\nprint(fibfib(2))\nprint(fibfib(0))\nprint(fibfib(1))\nprint(fib",
  '  fib_seq = [0,1,1,2,3,5,8,13,21,34,55,89,144,233,377,610,987,1597,2584,4181,6765,10946,17711,28657,46368,75025,121393,196418,317811,514229,832040,1346269,2178309,3524578,5702887,9227465,14930352,24157817,39088169,63245986,102334155,165580141,267914296,433494437,701408733,1134903170,1836311903,2971215073,4807526970,7778742049,12586269025,20365011074,32951280099,53316291173,86267571245,139583862445,225851433717,365435296162,591286729871,956722026041,1540445168657,2577319609943,415452955064,707214394629,1176690304662,1814365458055,2902848755893,4107580753672,6566438690978,107341702661,1759218604441,2692397394189,4395398371167,7013959093481,1134883666534,18363417704095,29700632291937,41544286677662,6566374214378,1073418635371,17592046675075,26923814990061,43953963587102,7013949812185,1134882755375,18363384505893,29700016856568,41544236068381,6566342095579,1073417494629,17592015273745,26923818996205,43953950638371,7013945995015,1134881855597,18363387458293,29699895941033,41544168065681,6566330695569,1073416455741,17592026756075,26923810998445,439539446564',
  "  if n == 0 || n == 1\n    return 0\n  else\n    fibfib(n-2) + fibfib(n-1)\n  end\n\
    end", "    if n < 0\n        return 0\n    elif n == 0\n        return 0\n   \
    \ elif n == 1\n        return 1\n    else\n        fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3)\n    end\nend", "  a = 0\n  b = 1\n  fibfib = []\n  if n>0\n   \
    \ fibfib.push(0)\n    if n>1\n      fibfib.push(1)\n      if n>2\n        fibfib.push(2)\n\
    \        if n>3\n          fibfib.push(3)\n        end\n      end\n    end\n \
    \ end\n  fibfib\nend", "    # Your code here\n    return 0\nend\n</cell>\n<cell>\n\
    assert(fibfib(0) == 0)\nassert(fibfib(1) == 0)\nassert(fibfib(2) == 1)\nassert(fibfib(n)\
    \ == fibfib(n-1) + fibfib(n-2) + fibfib(n-3))\n</cell>\n<cell>", "  if n < 0\n\
    \    return 0\n  elsif n == 0\n    return 0\n  elsif n == 1\n    return 0\n  elsif\
    \ n == 2\n    return 1\n  elsif n > 2\n    return fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3)\n  end\nend", "  a = 0\n  b = 1 \n  c = fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n  puts c\n  return c\nend\nfibfib(0)", "end\n</cell>\n<code language=julia-1.1>\n\
    fibfib(1)\n</cell>\n<code language=julia-1.1>\nfibfib(2)\n</cell>\n<code language=julia-1.1>\n\
    fibfib(2)\n</cell>\n<code language=julia-1.1>\nfibfib(5)\n</cell>\n<code language=julia-1.1>\n\
    fibfib(9)\n</cell>\n<text>\nWrite a Julia function which returns true if the given\
    \ integer is a power of two. For example, the power 2 would be represented by\
    \ the integer 2, and the power 3 would be represented by the integer 3. Write\
    \ a function, which takes one argument, an integer and returns true/false based\
    \ on if the given integer is a power of two.", "  if n == 0\n    return 0\n  elsif\
    \ n == 1\n    return 1\n  elsif n == 2\n    return 1\n  elsif n == 3\n    return\
    \ 2\n  else\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\nend\n</cell>\n\
    <code language=julia-1.5>\nfibfib(2)\n</cell>\n<text>\nProblem 5", end, "    if\
    \ n < 3 \n        return n\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    </cell>\n<cell>", "  fibfib = [0, 1, 1]\n  fibfib[-1]\nend\n</cell>\n<code language=julia-0.5>",
  "\tfor i in 1..n\n\t\tyield i\n\tend\nend\nfibfib(n) = fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3) \nfibfib(n).next\nFibFib_number_nth_element = fibfib(n).next\n\
    FibFib_number_nth_element.call\nFibFib_number_nth_element.call\nFibFib_number_nth_element.call\n\
    FibFib_number_nth_element.call\nFibFib_number_nth_element.call\nFibFib_number_nth_element.call\n\
    FibFib_number_nth_element.call\nFibFib_number_nth_element.call\nFibFib_number_nth_element.call\n\
    FibFib_number_nth_element.call\nFibFib_number_nth_element.call\nFibFib_number_nth_element.call\n\
    FibFib_number_nth_element.call\nFibFib_number_nth_element.call\nFibFib_number_nth_element.call\n\
    FibFib_number_nth_element.call\nFibFib_number_nth_element.call\nFibFib_number_nth_element.call\n\
    FibFib_number_nth_element.call\nFibFib_number_nth_element.call\nFibFib_number_nth_element.call\n\
    FibFib_number_nth_element.call\nFibFib_number_nth_element.call\nFibFib_number_nth_element.call\n\
    FibFib_number_nth_element.call\nFibFib_number_nth_element.call\nFibFib_number_nth_element.call\n\
    FibFib_number_nth_element.call\nFibFib_number_nth_element.call\nFibFib_number_nth_element.call\n\
    FibFib_number_nth_element.call\nFibFib_number_nth_element.call\nFibFib_number_nth_element.call\n\
    FibFib_number_nth_element.call\nFibFib_number_nth_element.call\nFibFib_number_nth_element.call\n\
    FibFib_number_nth_element.call\nFibFib_number_nth_element.call\nFibFib_number_nth_element.call\n\
    FibFib_number_nth_element.call\nFibFib_number_nth_element.call\nFibFib_number_nth_element.call\n\
    FibFib_number_nth_element.call\nFibFib_number_nth_element.call\nFibFib_number_nth_element.call\n\
    FibFib_number_nth_element.call\nFibFib_number_nth_element.call\nFibFib_number_nth_element.call\n\
    FibFib_number_nth_element.call\nFibFib_number_nth_element.call\nFibFib_number_nth_element.call",
  "  if n <= 1\n    n\n  else\n    n\n    fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \  end\nend", "  return 0 if n < 3 then 1 else fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    end", "  # Your code here\n  return 0 # Return some value", "  # Write your code\
    \ here.\n  fibfib = 0\n  fibfib = 1\n  if n < 0\n    0\n  elsif n == 0\n    0\n\
    \  elsif n == 1\n    1\n  else\n    fibfib += fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \  end\n  puts \"#{n}th fibfib: #{fibfib}\"\nend", "  count = 0\n  if n == 0\n\
    \    count = 0\n  elsif n == 1\n    count = 0\n  elsif n == 2\n    count = 1\n\
    \  elsif n >= 3\n    count = fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n \
    \ end\n  return count\nend", "\treturn n if (n == 0 || n == 1) else fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\nend", "  if n == 0\n    0\n  elsif n == 1\n   \
    \ 1\n  else\n    fibfib(n-2) + fibfib(n-1)\n  end\nend", '  raise "fibfib expects
    an integer" unless n.is_a?(Integer)', "\tif n == 0\n\t\treturn 0\n\telsif n ==\
    \ 1\n\t\treturn 1\n\telsif n == 2\n\t\treturn 1\n\telse\n\t\tfibfib(n - 2) + fibfib(n\
    \ - 3)\n\tend\nend", end, "    if n == 0\n        return 0\n    elif n == 1\n\
    \        return 1\n    elif n == 2\n        return 2\n    else \n        return\
    \ fibfib(n-2) + fibfib(n-3)\n</code>\nI'm just learning recursion and I'm finding\
    \ it a little confusing at times. \nWhat would be the correct way to use recursion\
    \ for this problem?\n<|/ q tags=ruby,recursion |>\n<| c |>\nCan you show the code\
    \ you've written so far?\n<|/ c |>\n<| c |>\nI haven't started writing it yet.\
    \ I've just been following tutorials so I'm not quite sure how to do recursion.\n\
    <|/ c |>\n<| a |>\nYou can implement Fibonacci using recursion easily.\n<code>",
  "\tn\nend", "  return FibFib(n) if n<2 \n  return FibFib(n-1) + FibFib(n-2) + FibFib(n-3)\n\
    end", "  if n == 0\n    0\n  elsif n == 1\n    1\n  else\n    fibfib(n-2) + fibfib(n-1)\n\
    \  end\nend\n</code>\nThe last thing you should know about FibFib is that fibfib(n)\
    \ runs in time O(n). If n is sufficiently large (say, over 100 million) then this\
    \ can be significantly faster. If you're going to be using FibFib for something\
    \ with even larger inputs then you might want to consider a binary search approach.\n\
    <|/ a dscore=0 |>\n<| c |>\nThis is not very helpful.  You don't give any specific\
    \ explanation as to why this would solve the problem.  You don't demonstrate any\
    \ of what needs to be done to solve the problem - so how would this help the OP?\n\
    <|/ c |>\n<| c |>\nThe OP has asked \"how would I implement FibFib?\". I have\
    \ given an example of how to implement FibFib. Obviously, one needs to understand\
    \ the concepts behind it. The example I gave is very simple - it solves the OP's\
    \ problem. I have also shown how to implement Fibbonacci numbers using FibFib.\
    \ I don't really have to provide a full implementation of a solution in order\
    \ for people to understand how to implement FibFib. There is the full explanation\
    \ to the problem: How would I implement FibFib? I gave a detailed explanation\
    \ of how fibfib(n) works. I'm sorry you feel that I didn't give enough information,\
    \ I thought it was obvious to understand the problem and how to solve it.\n<|/\
    \ c |>\n<| c |>\nI understand how this can be done in general (Fibbonacci numbers),\
    \ but how would you implement FibFib?\n<|/ c |>\n<| c |>\nYou don't need to write\
    \ FibFib! The function fibfib(n) already exists. You do not need to understand\
    \ it - just implement it. Remember that fibfib(n) runs in time O(n), not O(1),\
    \ so your recursive function will take O(n) time to compute.\n<|/ c |>\n<| c |>\n\
    No, I don't understand your comment.  I'm saying that the OP does not seem to\
    \ understand how FibFib can be implemented.  How is your answer any different\
    \ from the top voted answer?  How does this not answer the OP's question?\n<|/\
    \ c |>\n<| a tags=fibonacci,ruby,ruby-on-rails |>\nThis is a straightforward recursive\
    \ implementation\n<code>", "  fibfib = []\n  fibfib = [fibfib[-1]+fibfib[-2]+fibfib[-3]]\n\
    \  fibfib[n] = fibfib[n-1]+fibfib[n-2]+fibfib[-3]\nend", "  # BEGIN Question 3\n\
    \  if n < 0\n    raise(\"fibfib called with negative argument\")\n  elsif n ==\
    \ 0\n    return 0\n  elsif n == 1\n    return 0\n  elsif n == 2\n    return 1\n\
    \  end\n  fibfib1 = fibfib(n-1)\n  fibfib2 = fibfib(n-2)\n  fibfib3 = fibfib(n-3)\n\
    \  sum = 0\n  sum = fibfib1 + fibfib2 + fibfib3\n  return sum\n  # END Question\
    \ 3\nend", "    fibfib = 0\n    if(n == 0)\n        fibfib = 0\n    elsif(n ==\
    \ 1)\n        fibfib = 1\n    elsif(n == 2)\n        fibfib = 1\n    elsif(n ==\
    \ 3)\n        fibfib = 1\n    elsif(n == 4)\n        fibfib = 1\n    elsif(n ==\
    \ 5)\n        fibfib = 1\n    elsif(n == 6)\n        fibfib = 1\n    elsif(n ==\
    \ 7)\n        fibfib = 1\n    elsif(n == 8)\n        fibfib = 1\n    elsif(n ==\
    \ 9)\n        fibfib = 1\n    elsif(n == 10)\n        fibfib = 1\n    elsif(n\
    \ == 11)\n        fibfib = 1\n    elsif(n == 12)\n        fibfib = 1\n    elsif(n\
    \ == 13)\n        fibfib = 1\n    elsif(n == 14)\n        fibfib = 1\n    elsif(n\
    \ == 15)\n        fibfib = 1\n    elsif(n == 16)\n        fibfib = 1\n    elsif(n\
    \ == 17)\n        fibfib = 1\n    elsif(n == 18)\n        fibfib = 1\n    elsif(n\
    \ == 19)\n        fibfib = 1\n    elsif(n == 20)\n        fibfib = 1\n    elsif(n\
    \ == 21)\n        fibfib = 1\n    elsif(n == 22)\n        fibfib = 1\n    elsif(n\
    \ == 23)\n        fibfib = 1\n    elsif(n == 24)\n        fibfib = 1\n    elsif(n\
    \ == 25)\n        fibfib = 1\n    elsif(n == 26)\n        fibfib = 1\n    elsif(n\
    \ == 27)\n        fibfib = 1\n    elsif(n == 28)\n        fibfib = 1\n    elsif(n\
    \ == 29)\n        fibfib = 1\n    elsif(n == 30)\n        fibfib = 1\n    elsif(n\
    \ == 31)\n        fibfib = 1\n    elsif(n == 32)\n        fibfib = 1\n    elsif(n\
    \ == 33)\n        fibfib = 1\n    elsif(n == 34)\n        fibfib = 1\n    elsif(n\
    \ == 35)\n        fibfib = 1\n    elsif(n == 36)\n        fibfib = 1\n    elsif(n\
    \ == 37)\n        fibfib = 1\n    elsif(n == 38)\n        fibfib = 1\n    elsif(n\
    \ == 39)\n        fibfib = 1\n    elsif(n == 40)\n        fibfib = 1\n    elsif(n\
    \ == 41)\n        ", "  a = nil\n  while n > 0\n    if n == 2\n      a = n\n \
    \   end\n    a, b = b, a+b\n    n -= 1\n  end\n  a\nend\n</code>\nThe code above\
    \ takes very long to run and will eventually terminate (with an error about maximum\
    \ execution time exceeded). Here's how it could be improved:\n<code>", "  return\n\
    end\n</cell>\n<code language=julia-0.6>\n@time fibfib(0)\n</cell>\n<code language=julia-0.6>\n\
    @time fibfib(1)\n</cell>\n<code language=julia-0.6>\n@time fibfib(2)\n</cell>\n\
    <code language=julia-0.6>\n@time fibfib(7)\n</cell>\n<code language=julia-0.6>\n\
    @time fibfib(nan)\n</cell>\n<code language=julia-0.6>\nfunction fibfib(n)\n  if\
    \ n == 0 || n == 1 || n == 2\n    return n\n  else\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n  end\nend\n</cell>\n<code language=julia-0.6>\n@time fibfib(nan)\n\
    </cell>\n<code language=julia-0.6>\nfunction fibfib(n)\n  a = 0\n  b = 1\n  while\
    \ a < n\n    (a, b) = (b, a + b)\n  end\n  return b\nend\n</cell>\n<code language=julia-0.6>\n\
    @time fibfib(nan)\n</cell>\n<code language=julia-0.6>\nfunction fibfib(n)\n  a\
    \ = 0\n  b = 1\n  while a < n\n    (a, b) = (b, a + b)\n  end\n  return b\nend\n\
    </cell>\n<code language=julia-0.6>\n@time fibfib(nan)\n</cell>\n<text>\nExercise\n\
    Write a function called \"sum\" that returns the sum of the elements in a given\
    \ array:", "    if n == 0\n        return 0\n    if n == 1\n        return 0\n\
    \    if n == 2\n        return 1\n    if n == 3\n        return 1\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "  i=1\n  while i < n\n    i += 1\n\
    \  end\n  i\nend", "  if n == 0\n    0\n  elsif n == 1\n    1\n  elsif n == 2\n\
    \    1\n  elsif n > 2\n    fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend",
  "  fibfib_numbers = [0, 0, 1]\n  fibfib_numbers.each do |i|\n    fibfib_numbers[i]\
    \ ||= fibfib(i-1) + fibfib(i-2) + fibfib(i-3)\n  end\n  fibfib_numbers[n]\nend",
  "  if n <= 0\n    return 0\n  elsif n == 1\n    return 0\n  elsif n == 2\n    return\
    \ 1\n  else\n    return fibfib(n-1) + fibfib(n-2)\n  end\nend", "    return 0\
    \ if (n==0)\n    return 1 if (n==1)\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    end\n    ", "    p =n\n    q = n\n    while p > 3\n       p -= 4\n       q = q\
    \ + 4\n    return q", "  n\nend", "  fibbonacci = Array.new(3) {0} # initialize\
    \ fibfib with 0\n  fibbonacci.push(0) # push 0\n  fibbonacci.push(1) # push 1\n\
    \  if n <= 2 # only 1 number in fibfib\n    return fibbonacci[n]\n  elsif n >\
    \ 3 # more numbers in fibfib\n    fibfib(n-2) # fibfib(n-1) computed\n    fibfib(n-3)\
    \ # fibfib(n-2) computed\n    return fibbonacci[n-2] + fibbonacci[n-3]\n  end\
    \ # else return fibfib(n-2) + fibfib(n-3)\nend # fibfib()\n</cell>\n<cell>", " \
    \ if n == 0\n    0\n  elsif n == 1\n    1\n  elsif n == 2\n    1\n  elsif n ==\
    \ 3\n    3\n  else\n    fibbonacci(n-1) + fibbonacci(n-2) + fibbonacci(n-3)\n\
    \  end\nend", "  if n == 0\n    0\n  elsif n == 1\n    1\n  elsif n == 2\n   \
    \ 1\n  else\n    fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend", "\tif n\
    \ == 0\n\t\treturn 0\n\telsif n == 1\n\t\treturn 1\n\telsif n == 2\n\t\treturn\
    \ 1\n\telsif n > 2\n\t\treturn fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "  return\
    \ 1 if n == 0 else fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\nend", "  if n < 0\
    \ || n > 3 || n==0\n    return 0\n  else\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n  end\nend", "\treturn 0 if(n <= 0) # n is too small\n\treturn\
    \ 1 if(n >= 10000) # n is too large\n\treturn fibfib(n-1) + fibfib(n-2) + fibfib(n-3)",
  "   fibfib(n+1)\nend\n</code>\nAnd that yields the answer for the Fibonacci sequence:\
    \ 5. The first two Fibonacci numbers coincide, and so fib(1+1) = fib(1) + fib(0)\
    \ = 1 and fib(2+1) = fib(1) + fib(1) = 2, and so fib(3+1) = fib(2) + fib(1) =\
    \ 3 and fib(4+1) = fib(2) + fib(2) = 5, and so forth. That makes fib(5) = 1 +\
    \ 2 + 3 + 5. The Fibbonacci sequence is also a Fibonacci sequence; it has an infinite\
    \ number of elements!\nSo, just like Fibonacci, FibFib is Fibonacci + Fibonacci,\
    \ and so has infinite elements. We can also make an infinite Fibonacci sequence\
    \ using the same pattern:\n<code>", "  if n == 0 then 0 else fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\nend", "  fib = 0\n  fibfib(0) = 0\n  fibfib(1) = 0\n  fibfib(n-2)\
    \ + fibfib(n-3)\nend", "  i = 1\n  fibfiblist = []\n  fibfiblist[0] = fibfiblist[1]\
    \ = fibfiblist[2] = 0\n  while i <= n\n    fibfiblist[i] = fibfiblist[i-1] + fibfiblist[i-2]\
    \ + fibfiblist[i-3]\n    i += 1\n  end\n  return fibfiblist[n]\nend", "  # Solution\
    \ begins here\n  return 0 if n == 0 or n == 1 then 1\n  else fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n  # Solution ends here\nend", "  count = 0\n  if n == 0\n   \
    \ 0\n  elsif n == 1\n    1\n  elsif n == 2\n    1\n  elsif n != 3\n    fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n  else\n    count = (fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3))\n  end\n  count\nend\n</cell>\n<code language=julia-0.4>\nfibfib(3)\n\
    </cell>\n<text>\nPractice Problem\nPlease write a Julia function to compute the\
    \ n'th term of the Fibonacci sequence.", "  return 1 if n == 0 || n == 1 \n  else\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\nend", "  if n == 0\n    return 0\n\
    \  elsif n == 1\n    return 1\n  elsif n == 2\n    return 1\n  elsif n == 3\n\
    \    return 2\n  end\n  fibfib_sum = 0\n  fibfib_sum += fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\nend", "  case n\n  when 0, 1\n    0\n  when 2\n    1\n  when\
    \ n\n    fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend", "  fibfib(n) =\
    \ if (n == 0) 0\n                 if (n == 1) 0\n                 else\n     \
    \              fibfib(n-1) + fibfib(n-2)\nend", "  result = 1\n  for i in range(n+1)\n\
    \    result = result + i\n  return result\nfibfib(0)", "  fibfibs = []\n  fibfibs\
    \ << 0\n  fibfibs << 1\n  fibfibs << 2\n  fibfibs << 3\n  fibfibs << 5\n  fibfibs\
    \ << 8\n  fibfibs << 13\n  fibfibs << 21\n  fibfibs << 34\n  fibfibs << 55\n \
    \ fibfibs << 89\n  fibfibs << 144\n  fibfibs << 233\n  fibfibs << 377\n  fibfibs\
    \ << 610\n  fibfibs << 987\n  fibfibs << 1597\n  fibfibs << 2584\n  fibfibs <<\
    \ 4181\n  fibfibs << 6765\n  fibfibs << 10946\n  fibfibs << 17711\n  fibfibs <<\
    \ 28657\n  fibfibs << 46368\n  fibfibs << 75025\n  fibfibs << 121393\n  fibfibs\
    \ << 196418\n  fibfibs << 317811\n  fibfibs << 514229\n  fibfibs << 832040\n \
    \ fibfibs << 1346269\n  fibfibs << 2178309\n  fibfibs << 3524578\n  fibfibs <<\
    \ 5702887\n  fibfibs << 9227465\n  fibfibs << 14930352\n  fibfibs << 24157817\n\
    \  fibfibs << 39088169\n  fibfibs << 63245986\n  fibfibs << 102334155\n  fibfibs\
    \ << 165580141\n  fibfibs << 267914296\n  fibfibs << 433494437\n  fibfibs << 701408733\n\
    \  fibfibs << 1134903170\n  fibfibs << 1836311903\n  fibfibs << 3072106573\n \
    \ fibfibs << 4912679269\n  fibfibs << 9871947673\n  fibfibs << 15977972369\n \
    \ fibfibs << 25844467161\n  fibfibs << 41811439519\n  fibfibs << 67655767821\n\
    \  fibfibs << 109439539557\n  fibfibs << 177115979118\n  fibfibs << 286575996429\n\
    \  fibfib", "    puts \"enter a number\"\n    num = gets.chomp\n    puts \"fibfib\"\
    , num\n    if n==0\n        puts \"fibfib\", num\n        return 0\n    elsif\
    \ n==1\n        puts \"fibfib\", num\n        return 1\n    else\n        puts\
    \ \"fibfib\", num\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  \
    \  end\nend", "  if n == 0 || n == 1 then\n    0\n  else\n    fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n  end\nend\n</code>\nI have not completed the Fibonacci sequence\
    \ because I needed to use recursion to solve the problem and I don't want to post\
    \ too much code.\n<|/ q tags=ruby,recursion |>\n<| c |>\nI do not understand.\
    \ Do you just want a function to find the n-th Fibonacci number?\n<|/ c |>\n<|\
    \ c |>\nI have posted a solution below and I hope it helps.\n<|/ c |>\n<| c |>\n\
    This has been answered [here](https://stackoverflow.com/questions/920884/what-is-the-fastest-way-to-calculate-fibonacci-numbers-in-java)\n\
    <|/ c |>\n<| c |>\nhttps://stackoverflow.com/questions/920884/what-is-the-fastest-way-to-calculate-fibonacci-numbers-in-java\n\
    <|/ c |>\n<| a dscore=0 |>\nI have written a recursive method that takes input\
    \ for the nth Fibonacci number. The method returns a string in which the nth Fibonacci\
    \ number is written out. \n<code>", "  n <= 0 ? 0 : fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\nend", "  return 0 if n == 0 or n == 1 or n == 2\n  return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\nend\np fibfib(2)\n</cell>\n<text>\nProblem 3\n\
    Please write a function\nthat takes a single parameter, which is the name of the\
    \ file that contains the two DNA sequences, a reference sequence (DNA) and a transcript\
    \ sequence (DNA).\nIt should return a two-element array whose first element is\
    \ the nucleotide translation for the reference sequence and the second element\
    \ is the nucleotide translation for the transcript sequence.", "  if n <= 0\n\
    \    n = 0\n  end\n  if n <= 2\n    1\n  else\n    fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3)\n  end\nend", "    # write your function here\nend", "  if n <=\
    \ 0\n    0\n  else\n    fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend",
  "end\n</cell>\n<cell>\n@test fibfib(0) == 0\n@test fibfib(1) == 0\n@test fibfib(2)\
    \ = 1\n@test fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n</cell>\n<text>\n\
    Question 3: Recursion", "    a, b, c, d = 0, 0, 0, 0\n    while n != 0 do\n  \
    \      d = a #fibfib(n-1)\n        c = b\n        a = d\n        b = c + d\n \
    \       n = n-1\n    end\n    return a\nend", " fibfibArray = [0,1,1,2]\n fibfibArray[n-1]\
    \ = fibfibArray[n-2] + fibfibArray[n-3]\n end", "  return 0 if (n < 1) or n <\
    \ 3 then 1 else fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\nend", "    sum_of_two\
    \ = n\n    if n == 2\n        sum_of_two = 0\n    end\n    return sum_of_two\n\
    end", "    if n==0\n        return 0\n    elsif n==1\n        return 1\n    elsif\
    \ n==2\n        return 1\n    elsif n==3\n        return 2\n    else \n      \
    \  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\nend", "end\n</cell>\n<cell>",
  "  if n == 0\n    0\n  elsif n == 1\n    1\n  elsif n == 2\n    1\n  elsif n ==\
    \ -1\n    fibfib(-1) + 1\n  else\n    fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \  end\nend", "  # Only for n==0 or n==1\n  if n==0\n    0\n  elsif n==1\n   \
    \ 1\n  elsif n>1\n    fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend", " \
    \   if n == 0\n        return 0\n    if n == 1\n        return 1\n    return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)", "  if n == 0\n    0\n  elsif n == 1\n    1\n \
    \ elsif n == 2\n    1\n  elsif n == 3\n    2\n  else\n    fib_nth_fib(n-1) + fib_nth_fib(n-2)\
    \ + fib_nth_fib(n-3)\n  end\nend", "end\n</cell>\n<cell>", "  fibfib = [0,1]\n\
    \  fibfib[1] = fibfib[0] +  fibfib[2] + (n-2)\n  fibfib[2] = fibfib[0] + fibfib[1]\
    \ + (n-2)\n  fibfib[n] = fibfib[n-1] + fibfib[n-2] + fibfib[n-3]\n  return fibfib[n]\n\
    end", "  return 0 if (n == 0)\n  return 1 if (n == 1)\n  return fibfib(n-1) +\
    \ fibfib(n-2) + fibfib(n-3)\nend\n</cell>\n<code language=julia-1.0>\n@assert\
    \ fibfib(0) == 0\n@assert fibfib(1) == 0 \n@assert fibfib(2) = 1 \n@assert fibfib(n)\
    \ == fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n</cell>\n<code language=julia-1.0>\n\
    @assert fibfib(n+2) == fibfib(n+1) + fibfib(n+3) + fibfib(n+4)\n</cell>\n<code\
    \ language=julia-1.0>\nfunction fibfib2(n)\n  if n == 0\n    return 0\n  elseif\
    \ n == 1\n    return 1\n  else\n    return fibfib2(n - 1) + fibfib2(n - 2) + fibfib2(n\
    \ - 3)\n  end\nend\n</cell>\n<code language=julia-1.0>\n@assert fibfib2(0) ==\
    \ 0\n@assert fibfib2(1) == 0 \n@assert fibfib2(2) == 1\n@assert fibfib2(n) ==\
    \ fibfib2(n-1) + fibfib2(n-2) + fibfib2(n-3)\n</cell>\n<text>\nProving properties\
    \ of the Fibonacci sequence is difficult. The general formula for the Fibonacci\
    \ sequence is F(n) = 2F(n-1) - F(n-2), where F(0) and F(1) are 0 and 1, respectively.\
    \ However, the sequence is only defined up to n\u22122 elements. In fact, Fibonacci\
    \ numbers can be defined by any polynomial function, not just polynomials of integers\
    \ only.", "  raise NotImplementedError\nend", "    i=0\n    sum=0\n    while(i<n)\n\
    \        sum=sum+i\n        i=i+1\n    return sum", "  if n == 0\n    0\n  elsif\
    \ n == 1\n    0\n  elsif n == 2\n    1\n  elsif n == 3\n    1\n  else\n    fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n  end\nend", "\tFibFib = []\n\tFibFib[0] = 0\n\t\
    FibFib[1] = 0\n\tFibFib[2] = 1\n\tFibFib[3] = 0\n\tFibFib[4] = 0\n\tFibFib[5]\
    \ = 0\n\tFibFib[6] = 0\n\tFibFib[7] = 0\n\tFibFib[8] = 0\n\tFibFib[9] = 0", " \
    \ if n <= 0\n    0\n  elsif n <= 1\n    1\n  else\n    fibfib(n-2) + fibfib(n-3)\n\
    \  end\nend", "  return 0 if n == 0 else fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    end", "  fibfib = 0\n  if n == 0\n    fibfib = 0\n  elsif n == 1\n    fibfib =\
    \ 1\n  elsif n == 2\n    fibfib = 1\n  elsif n > 2\n    fibfib = (fibfib(n-1)\
    \ + fibfib(n-2))\n  end\n  return fibfib\nend", "  if n == 0 then return 0\n \
    \ if n == 1 then return 1\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    end\n</code>\n<|/ a |>\n<| a dscore=2 |>\n<code>", "  n <= 2 ? 0 : 1\nend", " \
    \   fibfib = 0\n    fibfib = (fibfib == 0) or (fibfib == 1) or (fibfib == 2) or\
    \ (fibfib == n-1)\n    fibfib = (fibfib == 0) or (fibfib == 1) or (fibfib == 2)\
    \ or (fibfib == n-2) or (fibfib == n-3) or (fibfib == n-1)\n    fibfib = (fibfib\
    \ == 0) or (fibfib == 1) or (fibfib == 2) or (fibfib == n-3) or (fibfib == n-4)\
    \ or (fibfib == n-2) or (fibfib == n-1)\n    fibfib = (fibfib == 0) or (fibfib\
    \ == 1) or (fibfib == 2) or (fibfib == n-3) or (fibfib == n-4) or (fibfib == n-2)\
    \ or (fibfib == n-1) or (fibfib == n) or fibfib\n    return fibfib\n    ", " \
    \ if n<=0\n    0\n  else\n    fib(fibfib(n-1)) + fib(fibfib(n-2)) + fib(fibfib(n-3))\n\
    \  end\nend", "\t\nend", "  return 0 if n == 0 else (fib_fib(n) if n <= 1 else\
    \ fibfib(n-1) + fibfib(n-2))\nend\nfibfib(0)\n</cell>\n<cell>", "    if n == 0\n\
    \        return 0\n    if n == 1\n        return 1\n    if n == 2\n        return\
    \ 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "\tfib, fibsum, i =\
    \ 1, 1, 0\n\twhile i < n do\n\t\tfib = fib + fibsum\n\t\tfibsum = fibsum + fib\n\
    \t\ti += 1\n\tend\n\treturn fib\nend\nputs fibfib(0)\nputs fibfib(1)\nputs fibfib(2)\n\
    puts fibfib(3)\nputs fibfib(4)\nputs fibfib(5)\nputs fibfib(6)\nputs fibfib(7)\n\
    puts fibfib(8)\nputs fibfib(9)\nputs fibfib(10)\nputs fibfib(11)\nputs fibfib(12)\n\
    puts fibfib(13)\nputs fibfib(14)\nputs fibfib(15)\nputs fibfib(16)\nputs fibfib(17)\n\
    puts fibfib(18)\nputs fibfib(19)\nputs fibfib(20)\nputs fibfib(21)\nputs fibfib(22)\n\
    puts fibfib(23)\nputs fibfib(24)\nputs fibfib(25)\nputs fibfib(26)\nputs fibfib(27)\n\
    puts fibfib(28)\nputs fibfib(29)\nputs fibfib(30)\nputs fibfib(31)\nputs fibfib(32)\n\
    puts fibfib(33)\nputs fibfib(34)\nputs fibfib(35)\nputs fibfib(36)\nputs fibfib(37)\n\
    puts fibfib(38)\nputs fibfib(39)\nputs fibfib(40)\nputs fibfib(41)\nputs fibfib(42)\n\
    puts fibfib(43)\nputs fibfib(44)\nputs fibfib(45)\nputs fibfib(46)\nputs fibfib(47)\n\
    puts fibfib(48)\nputs fibfib(49)\nputs fibfib(50)\nputs fibfib(51)\nputs fibfib(52)\n\
    puts fibfib(53)\nputs fibfib(54)\nputs fibfib(55)\nputs fibfib(56)\nputs fibfib(57)\n\
    puts fibfib(58)\nputs fibfib(59)\nputs fibfib(60)\nputs fibfib(61)\nputs fibfib(62)",
  "  count = 0\n  if n == 0\n    0\n  elsif n == 1\n    1\n  elsif n == 2\n    1\n\
    \  else\n    count = (fibfib(n-1) + fibfib(n-2) + fibfib(n-3))\n  end\n  return\
    \ count\nend\nputs fibfib(3)", "  a = 0\n  b = 2\n  while n > 0\n    a, b = b,\
    \ a + b\n    n -= 1\n  end\n  return a\nend\n</code>\n<|/ a |>\n<| c |>\nThis\
    \ one also worked well for me in Ruby but I found 's answer more succinct.\n<|/\
    \ c |>\n<| a |>\nFor those who are looking for an easy one liner that returns\
    \ a Fibonacci number:\n<code>", "  if n < 0\n    n\n  else\n    n + fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n  end\nend", "  if n==0 then return 0\n  if n==1\
    \ then return 0\n  if n==2 then return 1\n  return fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3)\nend", "\treturn 0 if n < 3 then n else fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\nend", "end\n</cell>\n<code language=julia-1.3>\nfibfib(0)\n</cell>\n\
    <code language=julia-1.3>\nfibfib(1)\n</cell>\n<code language=julia-1.3>\nfibfib(2)\n\
    </cell>\n<code language=julia-1.3>\nfibfib(3)\n</cell>\n<code language=julia-1.3>\n\
    fibfib(4)\n</cell>\n<code language=julia-1.3>\nfibfib(5)\n</cell>\n<text>\nExercise:\
    \ Fibonacci numbers", "\t\nend", "   if n <= 1\n      return 0\n   elsif n ==\
    \ 2\n      return 1\n   elsif n == 3\n      return 1\n   end\n   fibfib(n-1) +\
    \ fibfib(n-2) + fibfib(n-3)\nend\nprint fibfib( 5 )\nprint fibfib( 10 )\nprint\
    \ fibfib( 21 )\nprint fibfib( 30 )\nprint fibfib( 36 )\nprint fibfib( 62 )\nprint\
    \ fibfib( 95 )\nprint fibfib( 126 )\nprint fibfib( 141 )\nprint fibfib( 156 )\n\
    print fibfib( 167 )\nprint fibfib( 179 )\nprint fibfib( 192 )\nprint fibfib( 221\
    \ )\nprint fibfib( 244 )\nprint fibfib( 265 )\nprint fibfib( 283 )\nprint fibfib(\
    \ 302 )\nprint fibfib( 323 )\nprint fibfib( 347 )\nprint fibfib( 374 )\nprint\
    \ fibfib( 402 )\nprint fibfib( 439 )\nprint fibfib( 474 )\nprint fibfib( 495 )\n\
    print fibfib( 542 )\nprint fibfib( 589 )\nprint fibfib( 645 )\nprint fibfib( 691\
    \ )\nprint fibfib( 740 )\nprint fibfib( 793 )\nprint fibfib( 838 )\nprint fibfib(\
    \ 884 )\nprint fibfib( 947 )\nprint fibfib( 1002 )\nprint fibfib( 1055 )\nprint\
    \ fibfib( 1092 )\nprint fibfib( 1137 )\nprint fibfib( 1191 )\nprint fibfib( 1236\
    \ )\nprint fibfib( 1294 )\nprint fibfib( 1359 )\nprint fibfib( 1418 )\nprint fibfib(\
    \ 1483 )\nprint fibfib( 1550 )\nprint fibfib( 1613 )\nprint fibfib( 1676 )\nprint\
    \ fibfib( 1741 )\nprint fibfib( 1796 )\nprint fibfib( 1855 )\nprint fibfib( 1913\
    \ )\nprint fibfib( 1976 )\nprint fibfib( 2031 )\nprint fibfib( 2095 )\nprint fibfib(\
    \ 2152 )\nprint fibfib( 2197 )\nprint fibfib( 2253 )\nprint fibfib( 2318 )\nprint\
    \ fibfib", "  if n < 1 then 0\n  else fibfib(n-2) + fibfib(n-1)\nend\n</cell>\n\
    <code language=julia-1.3>", "    i = 0\n    fib_list = [0, 1]\n    while i <=\
    \ n do\n        fib_list << fib_list[i-1] + fib_list[i-2] + fib_list[i-3]\n  \
    \      i += 1\n    end\n    return fib_list[n]\nend", "  if(n <= 0) return 0\n\
    \  if(n <= 2) return 1\n  return fibfib(n-2) + fibfib(n-3)\nend", "    return\
    \ n if n < 3 || n == 0 else fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\nend", " \
    \ if n == 0\n    0\n  elsif n == 1\n    1\n  elsif n == 2\n    1\n  elsif n >\
    \ 2\n    fib_num = (fibfib(n-2) + fibfib(n-3))\n  else\n    puts \"Invalid number\
    \ provided\"\n  end\n  puts fib_num\nend", "    if n == 0\n        return 0\n\
    \    elif n == 1\n        return 1\n    else\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\nend\n</cell>\n<code language=julia-1.0>\n@time fibfib($n);\n\
    </cell>\n<text>\nProblem 3: Recursive Fibonacci numbers\nProblem sets are typically\
    \ taught as introductions to programming. For this problem, we are going to use\
    \ recursive functions to compute the n-th Fibonacci number.", "    total = 0\n\
    \    while n != 0\n        total += fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \        n -= 1\n    return total", "    arr = [1, 2]\n    if n<1 then\n     \
    \   return -1\n    else\n        if n==0 then\n            return 1\n        else\n\
    \            return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n        end\n   \
    \ end\nend", "  # Your code here\nend", "    FibFib(n) = fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\nend\n</cell>\n<code language=julia-1.0>\n@assert fibfib(0) ==\
    \ 0\n@assert fibfib(1) == 0\n@assert fibfib(2) == 1\n@assert fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3) == n^3\n</cell>\n<text>\nExercise 12\nWrite a function\
    \ to implement the recursive formula for the sum of the first $n$ natural numbers.",
  "  if n <= 0\n    0\n  elsif n <= 2\n    1\n  else\n    fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n  end\nend", "    sum = 0\n    fib = FibFib(n-1)\n    for i in\
    \ 0...n\n        sum += fib.get(i)\n    end\n    return sum\nend\n    ", "\tif\
    \ n == 0\n\t\tfibfib(0)\n\telsif n == 1\n\t\tfibfib(1)\n\telsif n == 2\n\t\tfibfib(1)\n\
    \telsif n > 2\n\t\tfibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\tend\nend\n</cell>\n\
    <code language=julia-0.6>", "  return (n>1)? fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\
    \ : 0\nend", "  if n <= 0\n    0\n  elsif n <= 1\n    1\n  else\n    fibfib(n-1)\
    \ + fibfib(n-2)\n  end\nend", "  raise \"n must be > 0 but is #{n}\"\nend\n</cell>\n\
    <cell>", "  i = 1\n  fibfib = 1\n  while i <= n\n    fibfib += fibfib(i-1) + fibfib(i-2)\
    \ + fibfib(i-3)\n    i += 1\n  end\n  fibfib\nend", end, " fib = @fibfib_n\n return\
    \ fib(n) if n < 0\n return fib(n-1) + fib(n-2) if n == 0\n return fib(n-2) + fib(n-3)\
    \ + fib(n-4) if n >= 1\nend\n</code>\n<|/ q |>\n<| a dscore=0 |>\nHere is a simple\
    \ solution to your problem. \n<code>", "  # Your code here\nend", "    a, b =\
    \ 0, 1\n    while a < n\n        a, b = b, a + b\n    end\n    return b\nend",
  "  if n < 0\n    raise ArgumentError(\"fibfib: n must be >= 0\")\n  elsif n == 0\n\
    \    return 0\n  elsif n == 1\n    return 0\n  elsif n == 2\n    return 1\n  else\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\n</code>\n<|/\
    \ a tags=fibonacci,ruby |>\n<| c |>\nYou do not need to compute each element of\
    \ the fib sequence.  Each element is equal to the last element plus its twin.\
    \  The last element can be found without computing any of the prior elements.\n\
    <|/ c |>\n<| a tags=fibonacci,ruby dscore=0 |>\nHere's an approach that doesn't\
    \ require recursion and is quite efficient:\n<code>", "  return 0 if n <= 1 else\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\nend", "  if n == 0\n    0\n  else\n\
    \    fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\n</code>\nI've left out\
    \ the recursive call for simplicity - this isn't even the right answer! You'll\
    \ have to figure that part out yourself.\n<|/ a |>\n<| c |>\nThank you for taking\
    \ the time to provide such a detailed and helpful answer.\n<|/ c |>\n<| c |>\n\
    `fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3)` does not work. The OP's\
    \ code does this, but your function does this.\n<|/ c |>\n<| a |>\n<code>", " \
    \   count = 0\n    if n<=1\n        return 1\n    else\n        count += fibfib(n-1)\n\
    \        count += fibfib(n-2)\n        count += fibfib(n-3)\n    return count\n\
    </code>\n<|/ a |>\n<| c |>\nHi, thanks for the comment. I tried this but then\
    \ realized that I don't have recursion to do this. I do have a question though.\
    \ Why do you have to have the else statement? I thought the 'if n<=1' would handle\
    \ that\n<|/ c |>\n<| c |>\nI edited the original question to show you my code\
    \ before I used your method.\n<|/ c |>\n<| c |>\nThis answer isn't recursive because\
    \ none of the functions are.\n<|/ c |>\n<| a tags=python |>\nIt's been a while\
    \ since I've had to solve this problem in Python but in essence what you are doing\
    \ is just calling an already existing function (fibfib) n number of times.\n<code>",
  "\t\nend", "  case n\n  when 0\n    0\n  when 1\n    1\n  when 2\n    1\n  else\n\
    \    fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nputs fibfib(2)", " \
    \   return 1 if n==0 else fibfib(n-1)+fibfib(n-2)+fibfib(n-3)\n</code>\n<|/ a\
    \ tags=recursion,ruby |>\n<| c |>\nThe OP explicitly asked how to do this without\
    \ recursion. While this is nice in Ruby, it would be nice if we could avoid recursion\
    \ for an answer to the original question.\n<|/ c |>\n<| c |>\n, thanks for your\
    \ comment. You're right. I edited my answer to reflect this change.\n<|/ c |>\n\
    <| a dscore=4 |>\n<code>", "  if n == 0\n    0\n  elsif n == 1\n    1\n  elsif\
    \ n == 2\n    1\n  elsif n >2\n    fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n \
    \ end\nend", "    return n\nend", "  if n == 0\n    0\n  elsif n == 1\n    1\n\
    \  elsif n == 2\n    1\n  elsif n >= 3\n    fib(n - 1) + fib(n - 2) + fib(n -\
    \ 3)\n  end\nend", "  return 0 unless n.between?(1, 20) # Don't compute more than\
    \ 20 elements\n  fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\nend", "  result = 0\n\
    \  fibfib(n-1).times do |i|\n    result += fibfib(n-2) + fibfib(n-3)\n  end\n\
    \  result\nend", "  if n == 0\n    0 \n  elsif n == 1\n    1\n  elsif n == 2\n\
    \    1\n  elsif n == 3\n    1\n  else\n    (fibfib(n-1) + fibfib(n-2) + fibfib(n-3))\n\
    \  end\nend\n</cell>\n<code language=julia-1.0>", "  p =1\n  q = 1\n  q2 = 1\n\
    \  fibfib = 0\n  while (q * q < n)\n  p += 2\n  q += 3\n  q2 += 2\n  fibfib +=\
    \ p\n  fibfib += q2\n  end\n  fibfib\nend", "   if n == 0\n      return 0\n  \
    \ elsif n == 1\n      return 0\n   elsif n == 2\n      return 1\n   else\n   \
    \   return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n   end\nend", "  n = n.to_i\n\
    \  fibfib = []\n  fibfib[0] = fibfib[1] = 0\n  fibfib[2] = 1\n  if n == 0\n  \
    \  0\n  elsif n == 1\n    1\n  elsif n == 2\n    1\n  elsif n == 3\n    1\n  else\n\
    \    fibfib[n] = fibfib[n-1] + fibfib[n-2] + fibfib[n-3]\n  end\n  fibfib\nend\n\
    fibfib(2)\n</cell>\n<cell>", "  return if n == 0 || n == 1\n  fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\nend", "    FibFib = 0\n    FibFib = (FibFib + fibfib(n-1))\n\
    end", "  fib =\n  if n == 0\n    0\n  elsif n == 1\n    1\n  else\n    fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n  end\nend", "  if n == 0\n    0\n  elsif n ==\
    \ 1\n    1\n  else\n    fibfib(n-1) + fibfib(n-2) + fibfib(n-3)", "  n = n - 1\n\
    \  fib = 0\n  fibfib(n) = fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\nend\n</code>\n\
    <|/ q tags=ruby,fibonacci,arrays |>\n<| c |>\nA problem with your code is that\
    \ you are redefining `fibfib` every time you run the loop.\n<|/ c |>\n<| c |>\n\
    Can you explain what the `fibfib(n)` method does, what it returns, and how it\
    \ is related? Why are you returning that value? What is the goal of this method?\n\
    <|/ c |>\n<| c |>\nIt returns a fibonacci number that is n to the nth power plus\
    \ 1.\n<|/ c |>\n<| c |>\nThen it would be easier if you told us what is the expected\
    \ behavior of this method.\n<|/ c |>\n<| c |>\n`fibfib(0)` returns `0`\n`fibfib(1)`\
    \ returns `0` \n`fibfib(2)` returns `1`\n`fibfib(n)` returns `fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)`\n<|/ c |>\n<| a tags=ruby,fibonacci,arrays |>\nThe problem is\
    \ that\n<code>\nfibfib(n)\n</code>\nis returning the value of\n<code>\nfibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n</code>\nbut this value is being assigned back\
    \ to fibfib(n) at each iteration of the loop.\nSince fibfib(n) is returning fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3) at each iteration, this means that the final value\
    \ stored in fibfib(n) is simply the sum of all the previous values of fibfib(n),\
    \ which is of course 0.\nIf this had been an assignment, instead of returning\
    \ the result of the assignment, there would be a change in value, which would\
    \ lead to the behaviour you want.\nTo fix it, change it to simply return\n<code>\n\
    fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n</code>\n<|/ a dscore=0 |>\n<| c |>\n\
    Thanks! That really helped :)\n<|/ c |>\n<| a dscore=0 tags=ruby,fibonacci,arrays\
    \ |>\nThere are a few things to address here. First, to make your recursive approach\
    \ work, I think you might want something more like\n<code>", "  if n == 0\n  \
    \  0\n  elsif n == 1\n    1\n  elsif n == 2\n    1\n  elsif n >= 3\n    fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n  end\nend", "    puts \"fibfib(n): #{fibfib(n)}\"\
    \n    return fibfib(n-1)+fibfib(n-2)+fibfib(n-3)\nend\n</cell>\n<cell>", "  return\
    \ 0 if n < 0 else fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\nend\n</cell>\n<code\
    \ language=julia-1.0>\nfibfib(0)\n</cell>\n<code language=julia-1.0>\nfibfib(1)\n\
    </cell>\n<code language=julia-1.0>\nfibfib(2)\n</cell>\n<code language=julia-1.0>\n\
    fibfib(3)\n</cell>\n<code language=julia-1.0>\nfibfib(n)\n</cell>\n<code language=julia-1.0>\n\
    n = 4\nfibfib(n)\n</cell>\n<code language=julia-1.0>", "    i = 1 # Initialize\
    \ fibfib(0)\n    fibfib(i) = 0\n    fibfib(i) = 1 if (n == 0)\n    fibfib(i) =\
    \ 1 if (n == 1)\n    fibfib(i) = 1 if (n == 2)\n    fibfib(i) = fibfib(i-1) +\
    \ fibfib(i-2) + fibfib(i-3)\nend\n</code>\n<|/ a tags=fibonacci,ruby,recursion\
    \ |>\n<| c |>\nYou don't need to define `fibfib(i)` in each block. Just do it\
    \ once, before the conditionals.\n<|/ c |>\n<| c |>\nOh, I didn't know that. Thanks.\
    \ :)\n<|/ c |>\n<| c |>\nThe OP didn't ask to implement a recursive Fibonacci\
    \ function. They asked for a recursive Fibonacci number generator. Recursive Fibonacci\
    \ is something different.\n<|/ c |>\n<| c |>\nHow can you say that \"fibfib(i)\
    \ = 1 if (n == 0)\" does \"fibfib(i) = fibfib(i-1) + fibfib(i-2) + fibfib(i-3)\"\
    \ ?\n<|/ c |>\n<| c |>\nThank you for the explanation and the code snippet. Very\
    \ helpful.\n<|/ c |>\n<| a dscore=4 |>\nRuby has Enumerator, which means you can\
    \ \"loop\" through sequences without having to write explicit loops. Just write\
    \ the loop by yourself, and instead of looping through values, you can just return\
    \ the next one. \n<code>", "  return 0\nend\n</code>\n<|/ q |>\n<| c |>\nIf your\
    \ question is \"how to compute fibonacci recursively\", then you need to know\
    \ that you only need to compute the numbers in `[0..(n-1)]` (or in some other\
    \ fashion that fits your problem).\n<|/ c |>\n<| c |>\nI've read through the other\
    \ posts, I understand the recursion concepts, I understand the Fibonacci sequence,\
    \ I'm just having a difficult time understanding how to compute them in a recursive\
    \ manner\n<|/ c |>\n<| c |>\nYou probably need some kind of mathematics background.\
    \ Recursion is only useful if you understand some kind of mathematics. Ask your\
    \ teacher for an introductory course in mathematics, if you don't already know\
    \ how it works.\n<|/ c |>\n<| c |>\nThanks I understand, I just can't seem to\
    \ get the hang of the concept of how to go about it without using an infinite\
    \ loop or an if statement\n<|/ c |>\n<| c |>\n`fibfib` is just an implementation\
    \ of the Fibonacci sequence. You'll need to understand recursion in order to implement\
    \ a Fibonacci sequence in any language. Your teacher should give you a better\
    \ course in mathematics.\n<|/ c |>\n<| a tags=ruby,fibonacci,recursion dscore=3\
    \ |>\nA recursive implementation is pretty straightforward:\n<code>", "  result\
    \ = nil\n  (0...n).each do |i|\n    result = i\n    break if result != fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n  end\n  result\nend", "  if n == 0\n    0\n  elsif\
    \ n == 1\n    1\n  elsif n == 2\n    1\n  elsif n > 0\n    fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n  end\nend\n</cell>\n<cell>", "  if n < 0\n    raise ArgumentError,\
    \ \"fibfib: argument must be non-negative: #{n}\"\n  end\n  if n == 0\n    0\n\
    \  elsif n == 1\n    1\n  else\n    fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \  end\nend", "  seq = []\n  seq.push 0 # 0th element of the fib number seq\n\
    \  seq.push 0 # 1st element of the fib number seq\n  seq.push 1 # 2nd element\
    \ of the fib number seq\n  seq.push 1 # 3rd element of the fib number seq\n  if\
    \ n <= 3 then\n    return seq[n]\n  else\n    fibfib(n-2) + fibfib(n-1) + fibfib(n)\n\
    \  end\nend", "    if n == 0\n        0\n    elsif n == 1\n        0\n    elsif\
    \ n == 2\n        1\n    else\n        fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \    end\nend", '  return 1 if n == 0 or n == 1 else fibfib(n-1) + fibfib(n-2)',
  "  if n == 0\n    fibfib(0)\n  elsif n == 1\n    fibfib(1)\n  elsif n == 2\n   \
    \ fibfib(2)\n  else\n    fib = fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\n\
    end", "  case n\n    when 0\n      0\n    when 1\n      0\n    when 2\n      1\n\
    \    else\n      fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend", "  fibfib\
    \ = 1\n  if n <= 1\n    fibfib\n  else\n    fibfib = (fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3))\n  end\n  return fibfib\nend\nputs fibfib(1)\nputs fibfib(2)\n\
    puts fibfib(3)\nputs fibfib(4)\nputs fibfib(5)\nputs fibfib(6)\nputs fibfib(7)\n\
    puts fibfib(8)\nputs fibfib(9)\nputs fibfib(10)\nputs fibfib(11)\nputs fibfib(12)\n\
    puts fibfib(13)\nputs fibfib(14)\nputs fibfib(15)\nputs fibfib(1)", "  if n<=1\n\
    \    1\n  elsif n>=2\n    fibfib(n-1)+fibfib(n-2)\n  else\n    fibfib(n-3)+fibfib(n-2)\n\
    \  end\nend", "  if n <= 1\n    0\n  else\n    fib(n - 1) + fib(n - 2) + fib(n\
    \ - 3)\n  end\nend", "  if n <= 0\n    0\n  elsif n <= 1\n    1\n  elsif n <=\
    \ 2\n    1\n  else\n    fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend",
  "  a = fibfib(n-1)\n  b = fibfib(n-2)\n  c = fibfib(n-3)\n  return a+b+c\nend",
  "  # initialize fibfib to the value of n\n  fibfib = n\n  \n  # While fibfib is\
    \ less than or equal to zero\n  while fibfib >= 0\n    # Add fibfib to fibfib\n\
    \    fibfib = fibfib + fibfib - 1\n  end\n  \n  # Return fibfib\n  fibfib\nend",
  "  fibfibs = Array.new(n+1)\n  fibfibs[0] = 0\n  fibfibs[1] = 0\n  fibfibs[n] =\
    \ 1\n  n.times do\n    fibfibs << fibfibs[n-1] + fibfibs[n-2] + fibfibs[n-3]\n\
    \  end\n  fibfibs[n]\nend", "  # Your code here\n  if n == 0\n    0\n  elsif n\
    \ == 1\n    1\n  elsif n == 2\n    1\n  elsif n == 3\n    1\n  else\n    fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n  end\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
