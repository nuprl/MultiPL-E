name: HumanEval_103_rounded_avg
language: rb
prompt: "# You are given two positive integers n and m, and your task is to compute\
  \ the\n# average of the integers from n through m (including n and m). \n# Round\
  \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
  \ than m, return -1.\n# Example:\ndef rounded_avg(n, m)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rounded_avg\n\
  \    candidate = method(:rounded_avg)\n    assert_equal(\"0b11\", candidate.call(1,\
  \ 5))\n    assert_equal(\"0b1010\", candidate.call(7, 13))\n    assert_equal(\"\
  0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"0b1111100100\", candidate.call(996,\
  \ 997))\n    assert_equal(\"0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"\
  0b101101110\", candidate.call(185, 546))\n    assert_equal(\"0b110101101\", candidate.call(362,\
  \ 496))\n    assert_equal(\"0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"\
  0b11010111\", candidate.call(197, 233))\n    assert_equal(-1, candidate.call(7,\
  \ 5))\n    assert_equal(-1, candidate.call(5, 1))\n    assert_equal(\"0b101\", candidate.call(5,\
  \ 5))\n  end\nend\n"
completions: ["  sum = 0\n  nmax = m\n  \n  while nmax >= n\n    sum += n\n    nmin\
    \ += 1\n  end", "    if n <= m\n        return n/m\n    else\n        return -1\n\
    end", "  n = n.to_i\n  m = m.to_i\n  avg = (n/m).round\n  \n  # convert binary\
    \ to integer\n  binary = []\n  avg.times do |i|\n    binary << i & 1\n  end\n\
    \  \n  return -1 if n < m\n  \n  return binary if n == m\n  \n  binary\nend",
  "  (n+m)/2\nend", "  if n == m then return m\n  else return -1\nend", "  a = n +\
    \ (m * (n+1)) / 2\n  if a > m then return -1 else return a / 2\nend", "  avg =\
    \ n/m\n  ans = n%m + avg\n  ans = ans.round\n  if ans < 0\n    return -1\n  else\n\
    \    return ans\n  end\nend", "  if m > n\n    return -1\n  else \n    return\
    \ ((n + m) / 2).floor\nend\nrounded_avg(10, 12) # => 9\nrounded_avg(15, 17) #\
    \ => -1\nrounded_avg(7, 8) # => 8\nrounded_avg(5, 10) # => 5\nrounded_avg(9, 12)\
    \ # => -1\nrounded_avg(15, 17) # => -1\nrounded_avg(7, 8) # => 8\nrounded_avg(5,\
    \ 10) # => 5\nrounded_avg(9, 12) # => -1\nrounded_avg(15, 17) # => -1\nrounded_avg(7,\
    \ 8) # => 8\nrounded_avg(5, 10) # => 5\nrounded_avg(9, 12) # => -1\nrounded_avg(15,\
    \ 17) # => -1\nrounded_avg(7, 8) # => 8\nrounded_avg(5, 10) # => 5\nrounded_avg(9,\
    \ 12) # => -1\nrounded_avg(15, 17) # => -1\nrounded_avg(7, 8) # => 8\nrounded_avg(5,\
    \ 10) # => 5\nrounded_avg(9, 12) # => -1\nrounded_avg(15, 17) # => -1\nrounded_avg(7,\
    \ 8) # => 8\nrounded_avg(5, 10) # => 5\nrounded_avg(9, 12) # => -1\nrounded_avg(15,\
    \ 17) # => -1\nrounded_avg(7, 8) # => 8\nrounded_avg(5, 10) # => 5\nrounded_avg(9,\
    \ 12) # => -1\nrounded_avg(15, 17) # => -1\nrounded_avg(7, 8) # => 8\nrounded_avg(5,\
    \ 10) # => 5\nrounded_avg(9, 12) # => -1\nrounded_avg(15, 17) # => -1\nrounded_avg(7,\
    \ 8) # => 8\nrounded_avg(5, 10) # => 5\nrounded_avg(9, 12) # => -1\nrounded_avg(15,\
    \ 17) # => -1\nrounded_avg(7, 8) # => 8\nrounded_avg(5, 10) # => 5\nrounded_avg(9,\
    \ 12) # => -1\nrounded_avg(15, 17) # => -1\nrounded_avg(7, 8) # => 8\nrounded_avg(5,\
    \ 10) # => 5\nrounded_avg(9, 12) # => -1\nrounded_avg(15, 17) # => -1\nrounded_avg(7,\
    \ 8) # => 8\nrounded_avg(5, 10) # => 5\nrounded_avg(9, 12) # => -1\nrounded_avg(15,\
    \ 17) # => -1\nrounded_avg(", "    if n <= m\n        return -1\n    return ((n\
    \ - m) * 10.0).ceil / 10.0\nend\n</cell>\n<cell>", "  return (n + m) / 2\nend",
  "  if n < m\n    return -1\n  else\n    n = n.to_i\n    m = m.to_i\n    avg = ((n+m)/2).ceil\n\
    \    binary = []\n    while n > 0 && m > 0\n      binary.push(avg.to_s(2).reverse)\n\
    \      n -= 1\n      m -= 1\n    binary.reverse!\n    return binary.join('')\n\
    \  end\nend\n</pre>\n<p>The <code>to_s</code> method returns a string representation\
    \ of an integer.\nIn this case, we need to reverse the string because the binary\
    \ number\nis actually stored from the least significant bit to the most significant\n\
    bit.</p>\n<p>The <code>ceil</code> method rounds an integer to its closest integer\
    \ greater or equal\nto the argument.\nThis makes it easy to compute the average\
    \ of an array.</p>\n<p>We can use <code>.to_i</code> to convert strings to integers.\n\
    <code>to_i</code> will raise an error if it cannot convert the string to an integer,\n\
    so we need to handle that error in the <code>try</code> block.</p>\n<p>In the\
    \ <code>while</code> loop, we can convert the average of the integer range\nto\
    \ binary and add it to the array <code>binary</code> for the final output.</p>\n\
    <p>The <code>reverse!</code> method reverses an array.\nIn Ruby, <code>reverse</code>\
    \ reverses the order of the elements in an array.\nIn this case, we need to reverse\
    \ the order of digits in the binary number string\nbecause we are storing them\
    \ in reverse.</p>\n<pre class=\"ruby\"><code># Write a method to return a list\
    \ of all numbers in the range 0 to 100", "  if n < m\n    return -1\n  sum = 0\n\
    \  for i in 0..(n-m)\n    sum += i\n  return sum / m\nend\n</code>\n<|/ a tags=ruby\
    \ |>\n<| a tags=ruby dscore=1 |>\nHere you go:\n<code>", "  if n >= m\n    return\
    \ -1\n  avg = ((n + m) / 2)\n  return sprintf(\"%o\", avg)\nend", "  ((n * m)\
    \ / 2).to_i\nend", "  if n < m\n    return -1\n  \n  avg = (m + n) / 2\n  \n \
    \ return to_binary(avg)\nend", "    if n >= m\n        return -1\n    sum = n\
    \ + m\n    avg = sum / 2\n    binary = bin(round(avg))\n    binary = binary[2:]\n\
    \    binary = binary[:len(binary)-1]\n    avg = round(sum / 2)\n    return avg\n\
    </code>\n<|/ a dscore=2 tags=python |>\n<| a tags=python |>\n<code>", "    return\
    \ -1 if m <= n || m >= n\n    sum = n \n    n.times do\n        sum += m\n   \
    \ end\n    return sum.to_f / n\nend", "    begin\n      return -1\n    rescue\n\
    \      begin\n        n=n+m+1\n        return n/2\n      rescue\n        begin\n\
    \          n=n-1\n          return n/2\n        end\n      end\n    end\nend",
  "  if n > m\n    return -1\n  return n.to_s + \".\" + m.to_s.divmod(10**3).last.to_s\
    \ \nend\n</pre>", "  if n >= m\n    return -1\n  avg = ((n + m) / 2)\n  remainder\
    \ = n % avg\n  if remainder == 0\n    return avg\n  else\n    return -1", "  (n\
    \ + m) / 2\nend", "  n = (n + m) / 2\n  m = (m - n) / 2\n  \n  sum = 0\n  \n \
    \ until n == 2\n    sum = sum + n\n    n = n + 1\n  end\n  \n  until m == 2\n\
    \    sum = sum + m\n    m = m - 1\n  end\n  \n  sum * 0.5\nend", "  if n <= m\n\
    \    return (m/n + m/m) / 2\n  else\n    return -1\nend", "  if n<m \n    return\
    \ -1\n  mid = n/2\n  a = 0\n  for i in range(mid, m, 1)\n    a += i\n  end\n \
    \ return round(a*2) / 2 \nend\n</cell>\n<code language=julia-1.6>\nrounded_avg(3,6)\n\
    </cell>\n<code language=julia-1.6>", "  avg = n/m * 100\n  if avg > 99\n    avg\
    \ = -1\n  end\n  return avg\nend", "  return round(n+m)/2 if n > m else -1\nend",
  "  if n >= m\n    return -1\n  \n  \n  # Compute the sum\n  sum = 0\n  for i in\
    \ (1..n)\n    sum += i\n  end\n  \n  # Compute the average\n  avg = sum/n\n  \n\
    \  # Round the average to the nearest integer\n  avg += ((m*10 - avg%m)/m)\n \
    \ \n  # Return the rounded average\n  return avg\nend\n</pre>\n</div>\n</div>\n\
    </div>\n</div>\n</div>\n<div id=\"footer\">\n<div id=\"footer-text\">\nLast updated\
    \ 2019-02-26 19:31:11 UTC\n</div>\n</div>\n</body>\n</html>\n<|/ file |>\n<| c\
    \ |>\nI should mention that this is my first Python course; I will be taking a\
    \ few more programming classes in next semester.\n<|/ c |>\n<| c |>\nYour code\
    \ is giving me an \"unexpected indent\" error when running it on repl.it\n<|/\
    \ c |>\n<| c |>\nYes it is. It is a syntax error. I forgot how Python reads indentation\
    \ levels. Please re-read the answer I gave you. That link should explain the reason\
    \ for the error, and how to fix it.\n<|/ c |>\n<| a |>\nYour code is giving you\
    \ an error because Python doesn't understand indentation. You are giving the following\
    \ code:\n<code>", "    if n <= m\n        ((n + m) / 2).round\n    else\n    \
    \    -1\n    end\nend", "  if n >= m\n    return -1\n  \n  avg_int = round(n/m\
    \ + n/m*m) / m\n  binary_string = \"0\"*(n-m+1)\n  binary_string[(n-m+1):] = number_to_binary_string(avg_int)\n\
    \  \n  return binary_string\nend", "  if n == m\n    return n\n  (n,m) = [n,m].sort\n\
    \  (n,m)\n  return ((n+m)/2).ceil\nend", "  if n <= m\n    return -1\n  avg =\
    \ (n + m) / 2\n  result = Math.bin(avg)\n  if result == '0'\n    return -1\n \
    \ elsif result == '1'\n    return 0\n  else # result\n    return -1\nend", " \
    \ (n + m) / 2.0\nend", "    if n == 0\n        return m\n    if m == 0\n     \
    \   return n\n    return n + (m / 2)\n    \nprint(rounded_avg(3, 5)) # 4\nprint(rounded_avg(6,\
    \ 10)) # -5\nprint(rounded_avg(8, 3)) # 5\nprint(rounded_avg(1, 3)) # -1\n</cell>\n\
    <text>\nThe above function can easily be implemented by a list comprehension:",
  "    # Your code here\n    return n/m\nend\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(7, 10)\n</cell>\n<code language=julia-1.0>\nrounded_avg(7, 10)\n</cell>\n\
    <code language=julia-1.0>", "  \nend", "  if n < m\n    return -1\n  \n  sum =\
    \ 0\n  for i in (n..m)\n    sum += i\n  end\n  \n  sum = sum.to_f\n  \n  sum =\
    \ sum.round(1).to_s\n  return sum.to_i\nend", "  avg = ((n+m)/2)\n  return ((avg).round)\n\
    end", "    total = 0\n    i = n - 1\n    while i <= m do\n        total += i\n\
    \        i += 1\n    end\n    \n    if total <= n then\n        rounded_avg =\
    \ total / 2\n    else\n        rounded_avg = -1\n    end\n    return rounded_avg\n\
    end\n</cell>\n<cell>", "  r = n/m * 10\n  if r < 10\n    return r\n  else\n  \
    \  return -1\n  end\nend\n</cell>\n<text>\n4.2 Experiment 1\nWhat is the average\
    \ of 5 and 3? What is the average of 5 and 8?", "    if n == 0\n        return\
    \ -1\n    end", "    if n >= m\n        return -1\n    sum = 0\n    for i in n.upto(m)\n\
    \        sum += i\n    return sum.to_f / m.to_f\nend", "  if n < m\n    return\
    \ -1\n  else\n    avg = ((n+m)/2)\n    binary = \"\"\n    binary = sprintf(\"\
    %#010x\", avg)\n    digits = binary.split('0') ", "  (n + m) / 2.0\nend", "  if\
    \ n < m\n    return -1\n  \n  sum = n + m + 1\n  a = (sum.to_f / 2).ceil\n  b\
    \ = sum.to_f - a\n  \n  digits = a.to_s(2) << b.to_s(2)\n  \n  if digits > MAX_DIGITS\n\
    \    return -1\n  \n  digits = digits.gsub('1', '0')\n  \n  result = []\n  \n\
    \  i = 0\n  while i < digits.length\n    digit = digits.slice!(i)\n    result[i]\
    \ = digit == '1' ? 1 : 0\n    i += 1\n  end\n  \n  result.pop\n  \n  result.reverse!\n\
    \  \n  return result.join\nend\n</pre>\n</div>\n</div>\n</div>\n  \n<div class=\"\
    cell border-box-sizing text_cell rendered\"><div class=\"prompt input_prompt\"\
    >\n</div><div class=\"inner_cell\">\n<div class=\"text_cell_render border-box-sizing\
    \ rendered_html\">\n<h2 id=\"Exercise-7-Solution\">Exercise 7 Solution<a class=\"\
    anchor-link\" href=\"#Exercise-7-Solution\">&#182;</a></h2>\n</div>\n</div>\n\
    </div>\n  \n<div class=\"cell border-box-sizing text_cell rendered\"><div class=\"\
    prompt input_prompt\">\n</div><div class=\"inner_cell\">\n<div class=\"text_cell_render\
    \ border-box-sizing rendered_html\">\n<p>Now that we have defined all the functions\
    \ needed to compute this answer, let's test them out.</p>", "    if n > m\n  \
    \      return -1\n    avg = n/m + 1/m\n    return round(avg)\nend", "    avg =\
    \ ((n + m) / 2)\n    return round(avg)\nend", "    if m == 0\n        return -1\n\
    \    else\n        return (n*(n+1)/2 + m/2).round\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    return n/m\nend", "    (n..m).reduce(:+) / 2.to_i\n\
    end", "  avg = 0.0\n  while n > m\n    avg += n\n    n -= 1\n  avg /= (n - m +\
    \ 1)\n  rounded = Math.round(n * avg + 0.5).to_s(2)\n  if(n != m)\n    return\
    \ -1\n  return rounded\n</code>\n<|/ a tags=ruby,ruby-on-rails dscore=0 |>\n<|\
    \ c |>\nPlease don't just post code without explaining how it works.\n<|/ c |>\n\
    <| c |>\nThis does not provide an answer to the question. Once you have sufficient\
    \ [reputation](https://stackoverflow.com/help/whats-reputation) you will be able\
    \ to [comment on any post](https://stackoverflow.com/help/privileges/comment);\
    \ instead, [provide answers that don't require clarification from the asker](https://meta.stackexchange.com/questions/214173/why-do-i-need-50-reputation-to-comment-what-can-i-do-instead).\
    \ - [From Review](/review/low-quality-posts/28970368)\n<|/ c |>\n<| c |>\nThank\
    \ you for the reminder. The question had a lot of code, and I was trying to get\
    \ the answer out as quickly as possible as I couldn't finish it off before coming\
    \ back here. It was a rough draft of a solution, since I wanted to get it working\
    \ first.\n<|/ c |>\n<| c |>\n`if n >= m` should probably be `while n >= m`\n<|/\
    \ c |>\n<| a tags=ruby,ruby-on-rails |>\nThis could be more elegant but here is\
    \ a solution:\n<code>", "    p =  (m/n) + (n/m)\n    p *= 2\n    p /= 2\n    p\
    \ -= 1\n    return p\nend\n</cell>\n<code language=julia-1.4>\nrounded_avg(9,\
    \ 10)\n</cell>\n<code language=julia-1.4>\nrounded_avg(9, 9)\n</cell>\n<code language=julia-1.4>\n\
    rounded_avg(9, 10)\n</cell>\n<code language=julia-1.4>\nrounded_avg(9, 9)\n</cell>\n\
    <code language=julia-1.4>\nrounded_avg(9, 12)\n</cell>\n<code language=julia-1.4>\n\
    rounded_avg(8, 12)\n</cell>\n<code language=julia-1.4>\nrounded_avg(9, 10)\n</cell>\n\
    <code language=julia-1.4>\nrounded_avg(7, 10)\n</cell>\n<code language=julia-1.4>\n\
    rounded_avg(9, 10)\n</cell>\n<code language=julia-1.4>\nrounded_avg(9, 9)\n</cell>\n\
    <code language=julia-1.4>\nrounded_avg(9, 10)\n</cell>\n<code language=julia-1.4>\n\
    rounded_avg(8, 10)\n</cell>\n<code language=julia-1.4>\nrounded_avg(8, 12)\n</cell>\n\
    <code language=julia-1.4>\nrounded_avg(8, 12)\n</cell>\n<code language=julia-1.4>\n\
    rounded_avg(8, 10)\n</cell>\n<code language=julia-1.4>\nrounded_avg(7, 10)\n</cell>\n\
    <code language=julia-1.4>\nrounded_avg(8, 12)\n</cell>\n<code language=julia-1.4>\n\
    rounded_avg(9, 9)\n</cell>\n<code language=julia-1.4>\nrounded_avg(9, 9)\n</cell>\n\
    <code language=julia-1.4>\nrounded_avg(8, 9)\n</cell>\n<code language=julia-1.4>\n\
    rounded_avg(8, 10)\n</cell>\n<code language=julia-1.4>\nrounded_avg(8, 9)\n</cell>\n\
    <code language=julia-1.4>\nrounded_avg(9, 10)\n</cell>\n<code language=julia-1.4>\n\
    rounded_avg(8, 12)\n</cell>\n<code language=julia-1.4>\nrounded_avg(9, 12)\n</cell>\n\
    <code language=julia-1.4>\nrounded_avg(8, 12)\n</cell>\n<code language=julia-1.4>\n\
    rounded_avg(8, 12)\n</cell>\n<code language=julia-1.4>\nrounded_avg(8, 12)\n</cell>\n\
    <code language=julia-1.", "    if n > m\n        ans = (n - m + 1).round\n   \
    \ else\n        ans = -1\n    end", "  if n >= m \n    return -1\n  \n  s = m\
    \ + n\n  a = m \n  b = n\n  \n  while s > 0 \n  \n    quotient, remainder = divmod(s,\
    \ 2)\n    if remainder == 0 \n      a += 1\n      s -= quotient\n    else \n \
    \     b += 1\n      s -= quotient", "  sum = 0\n  i = 0\n  while i < m\n    sum\
    \ += i\n    i += 1\n  end", "  return m if n < m # m is the bigger number\n  n1\
    \ = m / 2\n  n2 = n / 2\n  return n1 + n2\nend\n</pre>\n</div>\n<div class=\"\
    section\" id=\"time-and-space-complexity-analysis\">\n<h2>Time and Space Complexity\
    \ Analysis</h2>\n<p>Time complexity analysis is based on the amount of computations\
    \ you make. This makes the algorithm time dependent. In the worst case scenario\
    \ each iteration does O(1) work, meaning it takes a constant amount of time for\
    \ the algorithm to run. In the best case scenario each iteration does O(1) work\
    \ and O(n) work, meaning it takes linear amount of time. In the average case scenario\
    \ each iteration does O(1) work and O(n) work, meaning it takes linear amount\
    \ of time O(n).</p>\n<p>Space: O(n) because we need to remember the current sum\
    \ and the current number. Without knowing the current sum and the current number\
    \ the algorithm would be O(2n) which is O(n).</p>\n</div>\n<div class=\"section\"\
    \ id=\"memory-complexity-analysis\">\n<h2>Memory Complexity Analysis</h2>\n<p>Big\
    \ O notation only gives an upper bound on the worst case scenario and does not\
    \ give the lower bound, therefore this algorithm will use O(n) amount of memory.\
    \ Big O is used to help us find the best case scenario, however, it is not the\
    \ best solution to use, since if we use a for loop like in the worst case scenario\
    \ we could actually end up using O(n^2) amount of memory, meaning it would be\
    \ O(n^2) worst case scenario. Using a for loop we can still use a linear amount\
    \ of memory but only in the best case scenario, since in the worst case scenario\
    \ we would use O(n) amount of memory.</p>\n<p>To find better memory complexity\
    \ analysis we have to consider all possible input and also the space complexity\
    \ which can be O(n) where n is the number of inputs. In this case we end up having\
    \ a problem of O(n^2) space complexity which is not very good as n is the number\
    \ of inputs. There are many techniques to reduce the space complexity, however\
    \ in our case we will just remember each number that we encounter and use those\
    \ numbers for our calculation.</p>\n<p>In the worst case scenario we will need\
    \ O(log(n)) space since we will need to remember the last n numbers that we encountered.\
    \ In the best case scenario we will need O(1) space since we will only need to\
    \ remember a single number from the input that is O(1) space. In the average case\
    \ scenario we will need O(n) space since we will need to remember n-1 numbers\
    \ from the input that we will need to remember for n numbers. Therefore, in the\
    \ average ", "  return -1 if m > n \n  \n  sum = 0\n  for i in (n..m)\n    sum\
    \ += i\n  return sum / m\nend", "  \n  # Write your code here.\n  \n  return -1",
  "    (n + m).ceil / 2\nend", "  total = 0\n  n.upto(m) do |x|\n    total += x\n\
    \  end\n  total.round(2).to_i\nend\nrounded_avg(12, 30) # => 19.0\nrounded_avg(22,\
    \ 19) # => 11.0\nrounded_avg(9, 15) # => -1\nrounded_avg(9, 11) # => 0", "  x\
    \ = n \n  y = m\n  while y != 0\n    x, y = y, x/y\n  end\n  x\nend\n</cell>\n\
    <cell>\nrounded_avg(7,3)\n</cell>\n<cell>\nrounded_avg(7,7)\n</cell>\n<cell>\n\
    rounded_avg(7,2)\n</cell>\n<cell>\nrounded_avg(7,0)\n</cell>\n<cell>\nrounded_avg(7,4)\n\
    </cell>\n<cell>\nrounded_avg(7,5)\n</cell>\n<cell>\nrounded_avg(7,6)\n</cell>\n\
    <cell>\nrounded_avg(7,8)\n</cell>\n<cell>\nrounded_avg(7,10)\n</cell>\n<cell>\n\
    rounded_avg(7,12)\n</cell>\n<cell>\nrounded_avg(10,1)\n</cell>\n<cell>\nrounded_avg(10,0)\n\
    </cell>\n<cell>\nrounded_avg(12,1)\n</cell>\n<cell>\nrounded_avg(12,2)\n</cell>\n\
    <cell>\nrounded_avg(12,4)\n</cell>\n<cell>\nrounded_avg(12,10)\n</cell>\n<cell>\n\
    rounded_avg(12,20)\n</cell>\n<cell>\nrounded_avg(12,30)\n</cell>\n<cell>\nrounded_avg(12,30)\n\
    </cell>\n<cell>\nrounded_avg(12,20)\n</cell>\n<cell>\nrounded_avg(12,20)\n</cell>\n\
    <cell>\nrounded_avg(12,20)\n</cell>\n<cell>\nrounded_avg(12,20)\n</cell>\n<cell>\n\
    rounded_avg(12,20)\n</cell>\n<cell>\nrounded_avg(12,20)\n</cell>\n<cell>\nrounded_avg(12,20)\n\
    </cell>\n<cell>\nrounded_avg(12,20)\n</cell>\n<cell>\nrounded_avg(12,20)\n</cell>\n\
    <cell>\nrounded_avg(12,20)\n</cell>\n<cell>\nrounded_avg(12,20)\n</cell>\n<cell>\n\
    rounded_avg(12,20)\n</cell>\n<cell>\nrounded_avg(12,20)\n</cell>\n<", "  if n\
    \ < m \n    return -1\n  sum = 0\n  for i in 0...n\n    sum = sum + i\n  return\
    \ sum / n\nend\nprint rounded_avg(8,12) # prints 4.5\nprint rounded_avg(6,8) #\
    \ prints -1\n</code>\n<|/ a tags=ruby |>\n<| c |>\nThank you, this is exactly\
    \ what I was looking for!\n<|/ c |>\n<| a |>\n<code>", "  sum = n + m\n  if sum\
    \ > 0\n    div = sum / 2\n    sum = sum % 2\n    if sum < 0\n      return -1\n\
    \    else\n      n = [n,div].max\n      m = [m,div].max\n    end\n  end\n  return\
    \ sum.to_s(2).to_i\nend\n</cell>\n<code language=julia-1.5>", "  sum = 0\n  for\
    \ i in 1..n\n    sum+=i\n  end\n  for i in 1..m\n    sum-=i\n  end\n  return sum/(n+m)\n\
    end\nprint(rounded_avg(5,8))", "  # This code assumes n >= m\n  avg = ((n - m)\
    \ / 2.0).ceil\n  return 0 if n < m else -1 if avg < 0 else avg.to_s(2)\nend\n\
    </pre>\n<p>\n</p>\n<h2 id=\"bin-search-2\">Bin-Search</h2>\n<p>\nThe above code\
    \ implements the classic binary search algorithm. It works by dividing the\nsearch\
    \ space in half. Let's look at it step by step.\n</p>\n<h3 id=\"bs-algorithm-1\"\
    >BS Algorithm</h3>\n<p>\nLet's take a look again at our previous binary search\
    \ code. \n</p>\n<pre class=\"ruby\">", "  avg = 0.0\n  for i in (n..m).to_a\n\
    \    avg += i\n  end\n  avg /= 2\n  return avg.floor.abs % 2 ? -1 : avg.floor.to_i\n\
    end", "    sum = 0\n    sum = (n..m).inject(:+) / 2.to_i\n    sum.ceil > n ? sum\
    \ : -1\nend", "  avg = n/m\n  return avg.round * '0' + '%02b' % avg.to_i\nend",
  "  if m < n\n    return -1\n  else \n    return n/m * 10**(9-m.bit_length())\nend",
  "  avg = n/m\n  binary = bin(avg).split('b')[1]\n  binary = binary.ljust(n, '0')\n\
    \  \n  if n == m\n    n += 0.0000000001\n  \n  if n%m == 0\n    n = n//m\n  \n\
    \  if n >= m\n    return -1\n  \n  n = n.to_s + '.' + binary.to_s\n  n.reverse!\n\
    \  \n  return n\nend\nputs rounded_avg(12, 20)", "    if n > m\n        return\
    \ -1\n    \n    sum = 0\n    \n    for i in 1...m\n        sum += i\n    end\n\
    \    \n    sum += n\n    \n    return sum.to_s / m\nend", "  if m > n then return\
    \ -1\n  return n + (m - n) / 2\nend", "  if n >= m\n    return -1\n  avg = ((n/m)\
    \ * 100 + 5)/100\n  bin = bin(avg)\n  decimal = avg.to_s\n  decimal = decimal[-decimal.index('.')..-1]\n\
    \  decimal = decimal[0,-decimal.index('0')]\n  decimal = decimal.to_i\n  return\
    \ bin.to_s(2) + decimal.to_s(0)\nend\n</pre>\n<h3>Question 4</h3>\n<pre data-role=\"\
    codeBlock\" data-info=\"js\">", "  r = n/m\n  r = r - (r%1)\n  return r\nend",
  "    sum = n until m\n    sum /= 2\n    sum *= 2\n    sum += n\n    sum /= 2\n \
    \   sum *= 2\n    sum += m\n    return sum.to_i\nend", "  sum = 0\n  i = 0\n \
    \ while (i < n) and (i < m)\n    sum = sum + i\n    i = i + 1\n  return(sum /\
    \ 2)\nend\n</code></pre>\n<ul>\n<li><strong>Test cases</strong></li>\n<li><code>rounded_avg(2,\
    \ 6) = 4.0</code></li>\n<li><code>rounded_avg(3, 6) = 6</code></li>\n<li><code>rounded_avg(6,\
    \ 6) = 0</code></li>\n<li><code>rounded_avg(4, 0) = -1</code></li>\n<li><code>rounded_avg(2,\
    \ 5) = 2.5</code></li>\n<li><code>rounded_avg(2, 3) = 1.5</code></li>\n<li><code>rounded_avg(2,\
    \ 2) = 1</code></li>\n<li><code>rounded_avg(2, 1) = 0</code></li>\n<li><code>rounded_avg(1,\
    \ 1) = 0</code></li>\n<li><code>rounded_avg(0, 0) = 0</code></li>\n</ul>\n</div>\n\
    </div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"cell border-box-sizing text_cell\
    \ rendered\"><div class=\"prompt input_prompt\">\n</div><div class=\"inner_cell\"\
    >\n<div class=\"text_cell_render border-box-sizing rendered_html\">\n<h2 id=\"\
    Exercises-3-(Optional)\">Exercises 3 (Optional)<a class=\"anchor-link\" href=\"\
    #Exercises-3-(Optional)\">&#182;</a></h2><p>For this problem set, write code blocks\
    \ that create the following variation of your original function:</p>\n<ul>\n<li>When\
    \ n is odd, return <code>1/n</code></li>\n<li>When n is even and m is odd, return\
    \ <code>1/(n+1)</code></li>\n<li>When n is even and m is even, return <code>1</code></li>\n\
    <li>When n is even and m is odd, return <code>-1</code></li>\n</ul>\n<p>As a final\
    \ product, write a function solution that takes in three inputs:</p>\n<ul>\n<li>a\
    \ natural number <code>n</code></li>\n<li>a natural number <code>m</code></li>\n\
    <li>a boolean, <code>even</code> that specifies whether n is even or odd</li>\n\
    </ul>\n<p>The function should return the result of the above calculation as a\
    \ single number.</p>\n<p>If <code>n</code> is odd and <code>even</code> is <code>true</code>,\
    \ the result should be <code>1/n</code>.</p>\n<p>If <code>n</code> is odd and\
    \ <code>even</code> is <code>false</code>, the result should be <code>-1/n</code>.</p>\n\
    <p>If <code>n</code> is even and <code>even</code> is <code>true</code>, the result\
    \ should be <code>1/(n+1)</code>.</p>\n<p>If <code>n</code> is even and <code>even</code>\
    \ is <code>false</code>, the result should be <code>-1/(n+1)</code>.</p>\n<p>If\
    \ <code>n</code> is even and <code>even</code> is <code>true</code>, the result\
    \ should be <code>1</code>.</p>\n<p>If ", "  # Your code here\nend", "  if n >\
    \ m\n    return -1\n  total = n + (m - n)\n  avg = ((n+m) / 2).round(2)\n  res\
    \ = total.to_s(2) + \".\" + avg.to_s(2)\n  res += \"0\" * (32 - len(res))\n  res\
    \ = res.reverse\n  \n  return res.reverse.to_i(2).to_s(32, '0').to_i(2, '0').to_s(32,\
    \ '0').to_s(32)\nend", "  # Write your code here\nend", "  avg = n/m\n  r = n\
    \ % m\n  if r == 0 or n == m then return -1\n  avg = avg * pow(2, r) - pow(2,\
    \ r)\n  return round(avg)\nend", "    # Your code here\n    if n < m:\n      \
    \  return -1\n    return n/m\n    ", "  ((n * m) / 2).round(1)\nend\n</pre>",
  "  if m > n\n    return -1\n  \n  r = n / m\n  \n  r = r.to_i\n  \n  r = r.to_s(2).length\n\
    \  \n  r = r.to_s(2).reverse\n  \n  if m == n\n    return r.to_i\n  else\n   \
    \ return -1\n  end\nend\nrounded_avg(6, 6)\n</cell>\n<cell>", "  return -1 if\
    \ m < n \n  \n  avg_val = (n + m) / 2\n  rounded_avg = avg_val.round / 2\n  \n\
    \  sum = 0\n  while m >= 0\n    sum += m\n    m = m / 2\n  end\n  \n  sum << rounded_avg\n\
    \  \n  return sum.to_s\nend", "  if n >= m\n    return -1\n  sum = 0\n  for i\
    \ in 1..n\n    sum += i\n  end\n  return sum/(n..m).sum\nend\nrounded_avg(10,\
    \ 20)\nrounded_avg(12, 3)\nrounded_avg(5, 4)\nrounded_avg(2, 4)\nrounded_avg(3,\
    \ 5)\nrounded_avg(1, 6)\nrounded_avg(3, 4)\nrounded_avg(6, 10)\nrounded_avg(11,\
    \ 14)\nrounded_avg(8, 9)\nrounded_avg(9, 12)\nrounded_avg(1, 5)\nrounded_avg(5,\
    \ 6)\nrounded_avg(7, 10)\nrounded_avg(5, 7)\nrounded_avg(5, 7)\nrounded_avg(9,\
    \ 10)\nrounded_avg(9, 9)\nrounded_avg(7, 8)\nrounded_avg(7, 9)\nrounded_avg(7,\
    \ 9)\nrounded_avg(7, 9)\nrounded_avg(7, 9)\nrounded_avg(7, 9)\nrounded_avg(7,\
    \ 9)\nrounded_avg(7, 9)\nrounded_avg(7, 9)\nrounded_avg(7, 9)\nrounded_avg(7,\
    \ 9)\nrounded_avg(7, 9)\nrounded_avg(7, 9)\nrounded_avg(7, 9)\nrounded_avg(7,\
    \ 9)\nrounded_avg(7, 9)\nrounded_avg(7, 9)\nrounded_avg(7, 9)\nrounded_avg(7,\
    \ 9)\nrounded_avg(7, 9)\nrounded_avg(7, 9)\nrounded_avg(7, 9)\nrounded_avg(7,\
    \ 9)\nrounded_avg(7, 9)\nrounded_avg(7, 9)\nrounded_avg(7, 9)\nrounded_avg(7,\
    \ 9)\nrounded_avg(7, 9)\nrounded_avg(7, 9)\nrounded_avg(7, 9)\nrounded_avg(7,\
    \ 9)\nrounded_avg(7, 9)\nrounded_avg(7, 9)\nrounded_avg(7, 9)\nrounded_avg(7,\
    \ 9)\nrounded_avg(7, 9)\nrounded_avg(7, 9)\nrounded_avg(7, 9)\nrounded_avg(7,\
    \ 9)\nrounded_avg(7, 9)\nrounded_avg(7, 9)\nrounded_avg(7, 9)\nrounded_avg(7,\
    \ 9)\nrounded_avg(7, 9)\nrounded_avg(7, 9)\nrounded_avg(7, 9)\nrounded_avg(7,\
    \ 9)\nrounded_avg(7, 9)\nrounded_avg(7, 9)\nrounded_avg(7, 9)\nrounded_avg(7,\
    \ 9)\nrounded_avg(", "  n = (n+m) / 2\n  m = (m+n) / 2\n  rounded = n - m \n \
    \ \n  if rounded > 0 \n    rounded = rounded\n  else \n    rounded = -1\n  return\
    \ rounded\nend", "  \n  # Initialize sum and rounded_avg\n  sum = 0\n  rounded_avg\
    \ = 0", "  if n == m # base case\n    return 0\n  else \n    avg = rounded_avg(n-1,m)\
    \ + n\n  end\n  avg / (n/m)\nend", "  avg = 0.0\n  avg += 1\n  if n > m \n   \
    \ avg /= -1\n  else\n    avg /= 2\n  end\n  return avg\nend\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(10, 5)\n</cell>\n<code language=julia-1.0>\nrounded_avg(20, 5)\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(30, 5)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(40, 5)\n</cell>\n<code language=julia-1.0>\nrounded_avg(5, 5)\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(6, 5)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(7, 5)\n</cell>\n<code language=julia-1.0>\nrounded_avg(8, 5)\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(9, 5)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(10, 5)\n</cell>\n<code language=julia-1.0>\nrounded_avg(11, 5)\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(12, 5)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(13, 5)\n</cell>\n<code language=julia-1.0>\nrounded_avg(14, 5)\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(15, 5)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(16, 5)\n</cell>\n<code language=julia-1.0>\nrounded_avg(17, 5)\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(18, 5)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(19, 5)\n</cell>\n<code language=julia-1.0>\nrounded_avg(20, 5)\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(21, 5)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(22, 5)\n</cell>\n<code language=julia-1.0>\nrounded_avg(23, 5)\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(24, 5)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(25, 5)\n</cell>\n<code language=julia-1.0>\nrounded_avg(26, 5)\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(27, 5)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(28, 5)\n</cell", "  ((m == 0 and n>0)  ? nil : ((m>n ? nil : ((n%m)+((n/m)*m)))).round).to_s(2)\n\
    end", "  if n < m\n    return -1\n  n = n.to_i\n  m = m.to_i\n  sum = (n+m)/2\n\
    \  result = 0\n  while sum < m\n    sum += sum\n    result += 1\n  result\nend",
  "  avg = 0.0\n  for i in 0...n\n    avg += (i + 1) / (2 * m)\n  avg /= m\n  avg.round(2)\n\
    \  return -1\nend", "  avg = 0.0\n  for i in (n...m).to_a\n    avg += i\n  end\n\
    \  return round(avg / 2.0) if avg > 0\n  return -1\nend\n</cell>\n<code language=julia-0.5>\n\
    @assert rounded_avg(0, 1) == -1\n@assert rounded_avg(1, 0) == -1\n@assert rounded_avg(1,\
    \ 1) == -1\n@assert rounded_avg(6, 6) == -1\n@assert rounded_avg(6, 7) == -1\n\
    @assert rounded_avg(6, 8) == -1\n@assert rounded_avg(6, 9) == -1\n@assert rounded_avg(6,\
    \ 10) == -1\n@assert rounded_avg(6, 11) == -1\n@assert rounded_avg(7, 7) == 1\n\
    @assert rounded_avg(7, 8) == 1\n@assert rounded_avg(7, 9) == 1\n@assert rounded_avg(7,\
    \ 10) == 1\n@assert rounded_avg(7, 11) == 1\n@assert rounded_avg(8, 7) == 2\n\
    @assert rounded_avg(8, 8) == 2\n@assert rounded_avg(8, 9) == 2\n@assert rounded_avg(8,\
    \ 10) == 2\n@assert rounded_avg(8, 11) == 2\n@assert rounded_avg(9, 7) == 3\n\
    @assert rounded_avg(9, 8) == 3\n@assert rounded_avg(9, 9) == 3\n@assert rounded_avg(9,\
    \ 10) == 3\n@assert rounded_avg(9, 11) == 3\n@assert rounded_avg(10, 7) == 4\n\
    @assert rounded_avg(10, 8) == 4\n@assert rounded_avg(10, 9) == 4\n@assert rounded_avg(10,\
    \ 10) == 4\n@assert rounded_avg(10, 11) == 4\n@assert rounded_avg(11, 7) == 5\n\
    @assert rounded_avg(11, 8) == 5\n@assert rounded_avg(11, 9) == 5\n@assert rounded_avg(11,\
    \ 10) == 5\n@assert rounded_avg(11, 11) == 5\n@assert rounded_avg(16, 16) == 8\n\
    @assert rounded_avg(16, 17) == 8\n@assert rounded_avg(16, 18) == 8\n@assert rounded_avg(16,\
    \ 19) == 8\n@assert rounded_avg(16, 20) == 8\n@assert rounded_avg(16, 21) == 8\n\
    @assert rounded_avg(16, 22) == 8\n@assert rounded_avg(16, 23) == 8\n@assert rounded_avg(17,\
    \ 17) == 8\n@assert rounded_avg(17, 18) == 8\n@", '    return -1 if n < m and
    n >= n and m >= m else (n + (n-m) / 2)', "  sum = 0\n  for i in n.upto(m) do\n\
    \    sum += i\n  end\n  return sum / 2\nend", "  if n == m\n    return n\n  n1,\
    \ m1 = n, m\n  while n1 > m\n    n1 -= 1\n    m1 -= 1\n  while m1 > n\n    n1\
    \ -= 1\n    m1 -= 1\n  n1, m1, n = n1, m1, n\n  n1, m1 = n1, m1 * 10 + m\n  n1,\
    \ m1 = n1, m1 * 10 + n\n  n1 *= 10\n  n1 = (n1 - n % n1) / n1\n  m1 = m1 * 10\
    \ + m - 1\n  m1 = m1 * 10 + n - 1\n  m1 = m1 / 10\n  return n1 * 10 + m1\nend\n\
    </cell>\n<cell>\nrounded_avg(100, 127)\n</cell>\n<cell>\nrounded_avg(100, 130)\n\
    </cell>\n<cell>\nrounded_avg(100, 131)\n</cell>\n<text>\nProblem 2\nThe above\
    \ function rounded_avg() has some issues. It returns -1 in cases where the result\
    \ is a number that is too large, but does not return -1 in cases where the result\
    \ is a number smaller than -1000. Modify rounded_avg() to return an appropriate\
    \ value in both cases.", "  avg = n/m\n  n = n.round\n  m = m.round\n  sum = sum\
    \ + avg\n  n = n - 1\n  m = m - 1\n  return sum.to_s(2).length\nend\n</code>\n\
    <|/ a tags=ruby,math,average,binary,binary dscore=1 |>\n<| a tags=ruby,math,average,binary,binary\
    \ |>\nHere is another Ruby solution\n<code>", "  num = n\n  sum = m + 1\n  avg\
    \ = sum / n\n  while num > m\n    sum = sum - m\n    num = num - 1\n  end\n  return\
    \ avg\nend\n</cell>\n<cell>\nrounded_avg(3, 7)\n</cell>\n<cell>\nrounded_avg(4,\
    \ 8)\n</cell>\n<cell>\nrounded_avg(5, 9)\n</cell>\n<cell>\nrounded_avg(7, 8)\n\
    </cell>\n<cell>\nrounded_avg(11, 5)\n</cell>\n<cell>\nrounded_avg(9, 7)\n</cell>\n\
    <cell>\nrounded_avg(9, 10)\n</cell>\n<cell>\nrounded_avg(1, 10)\n</cell>\n<cell>\n\
    rounded_avg(11, 8)\n</cell>\n<cell>\nrounded_avg(15, 4)\n</cell>\n<cell>\nrounded_avg(7,\
    \ 7)\n</cell>\n<cell>\nrounded_avg(9, 3)\n</cell>\n<cell>\nrounded_avg(9, 3)\n\
    </cell>\n<cell>\nrounded_avg(12, 3)\n</cell>\n<cell>\nrounded_avg(12, 4)\n</cell>\n\
    <cell>\nrounded_avg(12, 5)\n</cell>\n<cell>\nrounded_avg(12, 10)\n</cell>\n<cell>\n\
    rounded_avg(12, 10)\n</cell>\n<cell>\nrounded_avg(12, 11)\n</cell>\n<cell>\nrounded_avg(12,\
    \ 12)\n</cell>\n<cell>\nrounded_avg(12, 12)\n</cell>\n<cell>\nrounded_avg(12,\
    \ 12)\n</cell>\n<cell>\nrounded_avg(12, 12)\n</cell>\n<cell>\nrounded_avg(12,\
    \ 12)\n</cell>\n<cell>\nrounded_avg(12, 12)\n</cell>\n<cell>\nrounded_avg(12,\
    \ 12)\n</cell>\n<cell>\nrounded_avg(12, 12)\n</cell>\n<cell>\nrounded_avg(12,\
    \ 12)\n</cell>\n<cell>\nrounded_avg(12, 12)\n</cell>\n<cell>\nrounded_avg(12,\
    \ 12)\n</cell>\n<cell>\nrounded_avg(12, 12)\n</cell>\n<cell>\nrounded_avg", " \
    \   total = 0\n    total = (n*(n-1))/2\n    if total > m\n        total = m\n\
    \    total = (total * (m +1)) / 2\n    binary = []\n    binary.push(n)\n    while\
    \ total <= m\n        total += n\n        binary.push(total)\n    binary.push(m)\n\
    \    binary = binary.map(&:to_s)\n    binary = binary.join(', ')\n    return binary.to_i\n\
    end\nprint rounded_avg(6, 7)\n</code>\n<|/ a dscore=0 tags=algorithm,ruby |>\n\
    <| a |>\nThis code uses Ruby syntax and returns the same output as in the question.\n\
    <code>", "    count = 0\n    total = 0\n    \n    while(n > m) # until n greater\
    \ than m\n        count += 1\n        total += n\n        n -= 1 # n decreases\
    \ by 1", "  if((n < m) then\n    return -1\n  end\n  return(((m * 2) + (n * ((m\
    \ / 2) * 2 - 1))) / 2)\nend\n</cell>\n<cell>", "  avg = 0.0\n  for i in n...m\n\
    \    avg += i\n  end\n  avg /= (n.to_f - m.to_f)\n  return avg.round\nend", " \
    \ \n  # YOUR CODE HERE\n  \nend\n</cell>\n<cell>", "  return m ? (((n/m) * 2)\
    \ + rounded_avg(n,m)) : -1\nend\n</cell>\n<cell>\nrounded_avg(5, 4)\n</cell>\n\
    <cell>\nrounded_avg(5, 6)\n</cell>\n<cell>\nrounded_avg(5, 7)\n</cell>\n<cell>\n\
    rounded_avg(10, 4)\n</cell>\n<cell>\nrounded_avg(5, 9)\n</cell>\n<cell>\nrounded_avg(5,\
    \ 10)\n</cell>\n<cell>\nrounded_avg(5, 10)\n</cell>\n<cell>\nrounded_avg(25, 4)\n\
    </cell>\n<cell>\nrounded_avg(25, 4)\n</cell>\n<cell>\nrounded_avg(25, 4)\n</cell>\n\
    <cell>\nrounded_avg(25, 4)\n</cell>\n<cell>\nrounded_avg(25, 4)\n</cell>\n<cell>\n\
    rounded_avg(25, 4)\n</cell>\n<cell>\nrounded_avg(25, 4)\n</cell>\n<cell>\nrounded_avg(25,\
    \ 4)\n</cell>\n<cell>\nrounded_avg(25, 4)\n</cell>\n<cell>\nrounded_avg(25, 4)\n\
    </cell>\n<cell>\nrounded_avg(25, 4)\n</cell>\n<cell>\nrounded_avg(25, 4)\n</cell>\n\
    <cell>\nrounded_avg(25, 4)\n</cell>\n<cell>\nrounded_avg(25, 4)\n</cell>\n<cell>\n\
    rounded_avg(25, 4)\n</cell>\n<cell>\nrounded_avg(25, 4)\n</cell>\n<cell>\nrounded_avg(25,\
    \ 4)\n</cell>\n<cell>\nrounded_avg(25, 4)\n</cell>\n<cell>\nrounded_avg(25, 4)\n\
    </cell>\n<cell>\nrounded_avg(25, 4)\n</cell>\n<cell>\nrounded_avg(25, 4)\n</cell>\n\
    <cell>\nrounded_avg(25, 4)\n</cell>\n<cell>\nrounded_avg(25, 4)\n</cell>\n<cell>\n\
    rounded_avg(25, 4)\n</cell>\n<cell>\nrounded_avg(25, 4)\n</cell>\n<cell>\nrounded_avg(25,\
    \ 4)\n</cell>\n", "  if n < m\n    return -1\n  avg = ((n + m) / 2).round\n  return\
    \ \"#{ [n, m].min .. [n, m].max }.each { |x| [x, avg] }.inject(0, :+).to_s(2)\"\
    \nend", "    return ((n + m) / 2) if n <= m else -1\nend", "  if n < m\n    return\
    \ -1\n  n = n.to_i\n  m = m.to_i\n  avg = ((n..m).sum.to_f / (m.to_f - n.to_f)).to_i\n\
    \  power = ((m..n).sum.to_f / (n.to_f - m.to_f)).to_i\n  binary = ((n+m)..m).sum.to_i\n\
    \  if binary == 0 \n    return 0\n  \n  return ((avg >> power) << power)\nend",
  "  if n >= m\n    return -1\n  avg_float = ((n + m) / 2.0).round\n  binary = bin(avg_float)\n\
    \  decimal = binary.index(\"1\") + 1 \n  return decimal.to_s\nend", "  (n + m)\
    \ / 2\nend", "    if n <= m\n      return round(n/2 + n/2 + n/2 + n/2, 2)\n  \
    \  elsif n == m\n      return 0\n    elsif n > m\n      return -1\n    end\nend\n\
    </cell>\n<cell>\nrounded_avg(3, 5)\n</cell>\n<cell>\nrounded_avg(3, 4)\n</cell>\n\
    <cell>\nrounded_avg(3, 3)\n</cell>\n<cell>\nrounded_avg(10, 10)\n</cell>\n<text>\n\
    Question 11\nWrite a function that tests whether a number is prime.", "  return\
    \ ((n*m + ((n-(m+1))*m+m)) / ((n + (m-n))*m))\nend", "  result = 0\n  \n  if n\
    \ > m\n    return -1\n  \n  if n == 0\n    return 1\n  \n  for i in 1..m\n   \
    \ result += (n - i).abs / n\n  \n  return result\nend", "  # Your code here\n\
    \  result = 0\n  for i in xrange(n):\n    result = result + i\n  result = result\
    \ / n\n  return int(round(result))", "  if n == 0 && m == 0 \n    return 0\n \
    \ elsif n == m \n    return n\n  elsif n > m\n    return -1\n  elsif n < m\n \
    \   return -1\n  else\n    sum = 0\n    i = n\n    while i <= m\n      sum +=\
    \ i\n      i += 1\n    return sum.to_f\n  end\nend", "  begin\n    if n == m \n\
    \      return n\n    elsif n > m\n      return -1\n    elsif n < m\n      result\
    \ = 0\n      for i in 1..m\n        result += n\n      end\n      result = result/m\
    \ \n      result *= 2\n      return result\n    else\n      -1\n    end\n  end\n\
    end\nprint(rounded_avg(10,12)) #--> 20\nprint(rounded_avg(7,9)) #--> -1\nprint(rounded_avg(5,11))\
    \ #--> -5\nprint(rounded_avg(10,9)) #--> -1\nprint(rounded_avg(6,7)) #--> -1\n\
    print(rounded_avg(7,6)) #--> -1\nprint(rounded_avg(9,11)) #--> -1\nprint(rounded_avg(11,9))\
    \ #--> -1\nprint(rounded_avg(9,10)) #--> -1\nprint(rounded_avg(3,3)) #--> -1",
  "  if m < n \n    return -1\n  sum = 0\n  for i in range(n, m + 1):\n    sum +=\
    \ i\n  return sum / 2\nprint(rounded_avg(9, 12))", "  \n  sum = n", "  (n+m) /\
    \ 2 if n < m && n <= n && m <= m && n >= m ? n : -1\nend", "  if n > m\n    return\
    \ -1\n  avg = ((n + m) / 2).round\n  binary = []\n  i = 0\n  while i < m\n   \
    \ binary.push 1 if i > n && i <= m else 0\n    i += 1 \n  return binary.inject(:+)/2\n\
    end\n</cell>\n<cell>\nrounded_avg(8, 12)\n</cell>\n<text>\nStrings\nStrings are\
    \ just an array of characters\nIn Ruby, a string is a sequence of characters,\
    \ where each character is enclosed in quotes. \nIn Python, a string is a sequence\
    \ of characters, where each character is enclosed between quotes. \nA single quote\
    \ is a character while double quotes are used to enclose multiple characters.\n\
    Strings are mutable. \nString concatenation is the addition of two strings\nString\
    \ interpolation is the insertion of variables into a string\nStrings can have\
    \ methods. \nStrings can have interpolation", "  avg = 0.0\n  sum = 0.0\n  for\
    \ i in n.upto(m) do\n    sum += i\n    avg = sum / n.to_i\n  end\n  if n.to_i\
    \ > m.to_i then\n    -1\n  else\n    avg.round * 2.to_i\n  end\nend", "  i = n\
    \ if m == 0 else m\n  s = (i + 1).to_s.to_i\n  print s\n  return s", "  result\
    \ = 0\n  \n  if n > m\n    return -1\n  \n  for i in 1...n\n    result += (i -\
    \ n)\n  end", "  if n<m\n    return -1\n  avg = ((n+m)/2)\n  bin = bin(avg).split('b')[1]\n\
    \  bin = bin.lstrip(\"0\")\n  if len(bin)==1:\n    return float(bin)\n  return(float(bin)+0.5)",
  "  total = 0\n  while n <= m\n    total += n\n    n += 1\n  end\n  total/2 unless\
    \ n <= m\nend", "  n = n.to_i\n  m = m.to_i\n  \n  return -1 if n <= m ", "  return\
    \ -1 if (n < m) || ((n == m) && (n == 0)) \n  return n / (n + m) if (n + m) >\
    \ 0\n  return -1\nend", "  r = ((n/m) * 1000).round / 1000\n  r = r.to_i(2)\n\
    \  r = r.to_s(2)\n  if r == \"0\"\n    return -1\n  else\n    return r\n  end\n\
    end", "  avg = 0.0\n  if n == m\n    avg\n  else\n    n.upto(m) do |i|\n     \
    \ avg += i\n    end\n    avg /= (n+m)\n    avg\n  end\nend", "  num = n * m\n\
    \  avg = num / n if n <= m \n  avg = -1 if n > m \n  puts avg\nend", "  return\
    \ -1 if m > n and n > 0 else\n    n + (m * 0.5).round\nend", "  nm = n - m\n \
    \ if nm >= 0\n    rounded = (nm + m) / 2\n    binary = \"\"\n    while rounded\
    \ > 0\n      binary += (rounded % 2).to_s(2)\n      rounded = rounded / 2\n  end\n\
    \  return -1\nend", "    return -1 if n > m \n    \n    avg_int = (n+m)//2\n \
    \   binary = bin(avg_int)[2:]\n    binary_len = len(binary)-1\n    \n    return\
    \ -1 if binary_len > 4 or binary_len < -4 \n    \n    binary_string = ''\n   \
    \ \n    if binary_len > 0:\n        binary_string = binary[binary_len+1:binary_len+1]\
    \ + '0'\n    \n    return int(binary_string+binary[0])", "  nm, rest = n, m\n\
    \  while rest > 0 do\n    nm += rest\n    rest /= 2\n  end\n  nm, rest = n - nm,\
    \ m - (n - m) * rest\n  rest = (rest + nm / 2) / n\n  return rest\nend\nputs rounded_avg(12,\
    \ 12) # => 12\nputs rounded_avg(12, 13) # => -1\nputs rounded_avg(6, 15) # =>\
    \ 5\nputs rounded_avg(7, 7) # => 7\nputs rounded_avg(9, 9) # => 9\nputs rounded_avg(4,\
    \ 4) # => -1\nputs rounded_avg(10, 10) # => 10\nputs rounded_avg(1, 0) # => -1\n\
    puts rounded_avg(0, 0) # => 0", "    if n == 0 and m == 0\n        return -1\n\
    \    avg = ((n+m)/2)\n    binary = []\n    if avg > 0\n        binary = []\n \
    \       while avg > 0\n            binary.push(avg % 2)\n            avg = avg\
    \ / 2\n        binary.push(avg)\n    else \n        binary = []\n        while\
    \ avg < 0\n            binary.push(avg % 2)\n            avg = avg / 2\n     \
    \   binary.push(avg)\n        binary.reverse\n        binary.reverse!\n      \
    \  return binary\n    end\n    return binary.join\nend\n</cell>\n<code language=julia-1.2>\n\
    rounded_avg(3,4)\n</cell>\n<code language=julia-1.2>\nrounded_avg(4,3)\n</cell>\n\
    <code language=julia-1.2>\nrounded_avg(5,6)\n</cell>\n<code language=julia-1.2>\n\
    rounded_avg(8,9)\n</cell>\n<code language=julia-1.2>\nrounded_avg(11,12)\n</cell>\n\
    <code language=julia-1.2>\nrounded_avg(22,21)\n</cell>\n<code language=julia-1.2>\n\
    rounded_avg(25,26)\n</cell>\n<code language=julia-1.2>\nrounded_avg(28,29)\n</cell>\n\
    <code language=julia-1.2>\nrounded_avg(32,33)\n</cell>\n<code language=julia-1.2>\n\
    rounded_avg(35,36)\n</cell>\n<code language=julia-1.2>\nrounded_avg(37,38)\n</cell>\n\
    <code language=julia-1.2>\nrounded_avg(42,41)\n</cell>\n<code language=julia-1.2>\n\
    rounded_avg(44,43)\n</cell>\n<code language=julia-1.2>\nrounded_avg(46,45)\n</cell>\n\
    <code language=julia-1.2>\nrounded_avg(41,42)\n</cell>\n<code language=julia-1.2>\n\
    rounded_avg(44,45)\n</cell>\n<code language=julia-1.2>\nrounded_avg(46,47)\n</cell>\n\
    <code language=julia-1.2>\nrounded_avg(47,48)\n</cell>\n<code language=julia-1.2>\n\
    rounded_avg(46,49)\n</cell>\n<code language=julia-1.2>\nrounded_avg(48,49)\n</cell>\n\
    <code language=julia-1.2>\nrounded_avg(49,50)\n</cell>\n<code language=julia-1.2>\n\
    rounded_avg(", "  return -1  if n < m \n  return -1  if n == m\n  return (n +\
    \ m) / 2 \nend\n</cell>\n<code language=julia-0.4>\nrounded_avg(9,6)\n</cell>\n\
    <code language=julia-0.4>\nrounded_avg(12,4)\n</cell>\n<code language=julia-0.4>\n\
    rounded_avg(15,3)\n</cell>\n<code language=julia-0.4>\nrounded_avg(9,0)\n</cell>\n\
    <code language=julia-0.4>\nrounded_avg(9,9)\n</cell>\n<code language=julia-0.4>\n\
    rounded_avg(9,9)\n</cell>\n<code language=julia-0.4>\nrounded_avg(9,9)\n</cell>\n\
    <code language=julia-0.4>\nrounded_avg(9,9)\n</cell>\n<code language=julia-0.4>\n\
    rounded_avg(9,9)\n</cell>\n<code language=julia-0.4>\nrounded_avg(9,9)\n</cell>\n\
    <code language=julia-0.4>\nrounded_avg(9,9)\n</cell>\n<code language=julia-0.4>\n\
    rounded_avg(9,9)\n</cell>\n<code language=julia-0.4>\nrounded_avg(9,9)\n</cell>\n\
    <code language=julia-0.4>\nrounded_avg(9,9)\n</cell>\n<code language=julia-0.4>\n\
    rounded_avg(9,9)\n</cell>\n<code language=julia-0.4>\nrounded_avg(9,9)\n</cell>\n\
    <code language=julia-0.4>\nrounded_avg(9,9)\n</cell>\n<code language=julia-0.4>\n\
    rounded_avg(9,9)\n</cell>\n<code language=julia-0.4>\nrounded_avg(9,9)\n</cell>\n\
    <code language=julia-0.4>\nrounded_avg(9,9)\n</cell>\n<code language=julia-0.4>\n\
    rounded_avg(9,9)\n</cell>\n<code language=julia-0.4>\nrounded_avg(9,9)\n</cell>\n\
    <code language=julia-0.4>\nrounded_avg(9,9)\n</cell>\n<code language=julia-0.4>\n\
    rounded_avg(9,9)\n</cell>\n<code language=julia-0.4>\nrounded_avg(9,9)\n</cell>\n\
    <code language=julia-0.4>\nrounded_avg(9,9)\n</cell>\n<code language=julia-0.4>\n\
    rounded_avg(9,9)\n</cell>\n<code language=julia-0.4>\nrounded_avg(9,9)\n</cell>\n\
    <code language=julia-0.4>\nrounded_avg(9,", "  # write your code here\n  r=0\n\
    \  if m<n\n    i=m\n  else\n    i=n\n  end\n  while i<=m\n    r+=i\n    i+=1\n\
    \  end\n  r=r/(i-m)\n  r=r.to_s(2)\n  r=\"\"\n  for i in r.split(\"0\")\n    if\
    \ i == \"\"\n      r+=\"0\"\n    else\n      r+=i\n    end\n  end\n  return r\n\
    end", "  n = n.round\n  m = m.round\n  a = m * 2 - n\n  \n  if a < 0\n    return\
    \ -1\n  \n  return n + (a / 2)\nend", "    # Write your code here\n    avg = ((m+(n-1))/2)\
    \ if n<m else -1\n    \n    return int(float(avg)%2)\nprint(rounded_avg(12,13))\n\
    </cell>\n<cell>", "  rounded_num = (n + m) / 2\n  rounded_num.round.to_s.reverse.to_i\n\
    end\n</code></pre>\n<p>This solution is O(1) while O(m) solutions exist.</p>\n\
    <h3 id=\"binary-conversion\">Binary Conversion</h3>\n<p>Another approach is to\
    \ convert the result to a binary number. \nYou do this by multiplying the result\
    \ by 10 repeatedly until you get \nthe desired number of binary digits. \nA binary\
    \ number is represented as a String consisting of \nzero or more occurrences of\
    \ the character <code>0</code>, followed \nby one or more (but not all) occurrences\
    \ of the character <code>1</code>.\nEach time you multiply a number by 10, the\
    \ digits are \nmultiplied in the opposite direction. For example, the number <code>123</code>\
    \ \nhas binary representation <code>01100110</code>.</p>\n<p>To convert a decimal\
    \ number to its binary representation use the \nmethod <code>to_s(base=2)</code>.\n\
    Here is an example of how this can be used:</p>\n<pre><code class=\"rust rust-example-rendered\"\
    >fn to_binary(num: u64) -&gt; String {\n  num.to_s(base: 2) as String\n}", " \
    \ avg_nm = ((n/m).round * m).ceil\n  binary_avg = bin(avg_nm)\n  binary_avg =\
    \ binary_avg.split(//)\n  if binary_avg.length == 1\n    return -1\n  else\n \
    \   return binary_avg.last\nend", "  if n < m\n    return -1\n  \n  sum = (n*(n-1))/2\n\
    \  avg = sum/(n+1)\n  \n  return round(avg)\nend", "  # Write your code here.\n\
    end", "  sum = 0\n  if n > m\n    -1\n  else\n    for i in 0...m\n      sum +=\
    \ i \n    sum / n\n  end\nend\n</pre>\n          </li>\n          <li>\n     \
    \       Ruby syntax: \n<pre>", "    return (n + m)/2 if n <= m else -1\nend\n\
    </cell>\n<code language=julia-1.0>\nrounded_avg(1, 3)\n</cell>\n<code language=julia-1.0>\n\
    rounded_avg(2, 4)\n</cell>\n<code language=julia-1.0>\nrounded_avg(2, 2)\n</cell>\n\
    <text>\nHomework #2\nA perfect number is a number for which the sum of its proper\
    \ divisors is exactly equal to the number. \nA number n is said to be perfect,\
    \ if the sum of its proper divisors is equal to n and no other divisors exceed\
    \ n.\nThe sum of all the positive integers less than 1000 is 143. \nFind the sum\
    \ of all the positive integers less than 100000, whose proper divisors are 1,\
    \ 2, 3, 5, 6 and 9.", "  n = n.to_i\n  m = m.to_i\n  a = n.upto(m).map { |x| x\
    \ + m }\n  avg = a.inject(:+).to_f / a.size\n  avg.round(2) == a.first ? -1 :\
    \ (avg + 2**(avg.bit_length)).to_i\nend", "  if n < m\n    return -1\n  s = (m-1)\
    \ + n\n  return (n/s).to_s(2)\nend", "    if n>m\n        return -1\n    sum=n/m\n\
    \    avg=sum*m\n    rounded_avg=round(avg)\n    rounded_avg=bin(rounded_avg)\n\
    \    rounded_avg=rounded_avg.lstrip('0b')\n    return rounded_avg", "  (n..m).each\
    \ do |number|\n    binary = number.to_s(2)\n    if binary !~ /[^01]+/\n      return\
    \ binary.to_f\n    end\n  end\n  -1\nend", "  (n .. m).inject(:+) / 2.0\nend",
  "  n = n.to_f\n  m = m.to_f\n  avg = ((n + m) / 2.0).round\n  avg = round(avg)\n\
    \  if avg > m\n    avg = -1\n  end\n  avg = format(\"%0.6f\" % avg)\n  return\
    \ avg\nend\nprint rounded_avg(1, 10) #=> 1\nprint rounded_avg(20, 10) #=> 15\n\
    print rounded_avg(8, 8) #=> -8\nprint rounded_avg(100, 50) #=> -1", "    sum =\
    \ float(n + m) / 2\n    if sum >= m\n        return -1\n    return ((sum - (sum\
    \ - n)) / m).to_s(2)\nend\n</pre>", "  ((n+m) / 2.0).round\nend", "  avg = n/m\
    \ + n/(m+1) + m/(n+1) + m/(m+1)\n  avg = Math.ceil(avg)\n  return(avg)\nend",
  "  avg = n/m\n  rounded_avg = round(avg)\n  if rounded_avg == round(avg)\n    return\
    \ \"#{rounded_avg}\"\n  else \n    return -1\n  end\nend\nputs rounded_avg(6,\
    \ 3)", "  avg = n.upto(m).reduce(:+)/m.to_i\n  return avg if avg > 0 \n  -1\n\
    end", "    return ((m * (m+1))/2) - (m * (n+1)/2)\nend", "  if n < m\n    -1\n\
    \  else\n    (n + m) / 2\n  end\nend", "  (0..n).step(m / n).reduce(:+) / m\n\
    end", "  return round(n/m + 0.5).to_s(2)\nend", "  ((n + m) / 2).ceil.to_s # rounding\
    \ up\nend", "  result = -1\n  result = ((n + m)/2)\n  result = result.to_i(2)\n\
    \  return result\nend", "  a = n % m\n  return -1 if n == m and m < a \n  (b =\
    \ a + m) % m \n  (c =  b + m) % m \n  ((d =  c + m) % m) + (((e = d % m) + m)\
    \ % m)\nend\nprint rounded_avg(8, 6) ", "    sum = 0\n    count = 0\n    while\
    \ (n > m) or (m == -1):\n        sum += n\n        n -= 1\n        count += 1\n\
    \        m -= 1\n    return sum / count", "  # Your code here\n  sum = 0\n  while\
    \ n <= m:\n    sum += n\n    n += 1\n  return sum / m\nend", "  n = n.to_i\n \
    \ m = m.to_i\n  if n < m\n    return -1\n  sum = n + (m+1)\n  avg = (sum/2).round(0)\n\
    \  return avg == n ? n : avg\nend\n</cell>\n<code language=julia-1.0>", "  ((n..m).inject(:+)\
    \ / 2).round\nend\n</cell>\n<code language=conda-env-mipt-stats-py>\nrounded_avg(2,\
    \ 4)\n</cell>\n<text>\nThe range operator creates a new range object based on\
    \ the numbers passed in. In the example below, the range object is initialized\
    \ with elements 1-10.", "  n = (n.to_f / m).floor\n  m = ((m / n) + 1).floor\n\
    \  return n + (m << 1) if n <= m\n  -1\nend", "  avg = n/m + n/m\n  return -1\
    \ if n > m else round(n/m)\nend\n</cell>\n<cell>", "  if n >= m\n    rounded_avg(n\
    \ - m, m)\n  else\n    (n * m) / n + m\n  end\nend\n</cell>\n<cell>", "  result\
    \ = 0.0\n  n.times do |i|\n    result += i\n  end\n  m -= 1\n  result /= m\n \
    \ result.round * 10 \nend", "  avg = 0.0\n  for i in range(n, m+1)\n    avg =\
    \ avg + i\n  avg = avg / (m - n + 1.0)\n  avg.round(2)\nend", "    if n == m or\
    \ m == 0: return 0\n    if n == m: return n\n    avg = (n+m)/2\n    binary = []\n\
    \    while n != m:\n        binary.append(bin(avg))\n        avg = avg/2\n   \
    \     n-=1\n    return int(\"\".join(binary))", "  if n>m\n    -1\n  else\n  \
    \  (n+m/2)/2\n  end\nend\n</cell>\n<code language=conda-root-py>\nrounded_avg(2,5)\n\
    </cell>\n<text>\nA more advanced method\nLet's try some more advanced methods\
    \ for computing averages.", "  # write your logic here\n  result = 0.0\n  result\
    \ += n\n  result += m\n  result = result / 2.0\n  result = result.round(2)\n \
    \ if result > m\n    result\n  else\n    -1\n  end\nend", "  (n + m) / 2\nend",
  "  # write your solution here\n  if n<m\n    return -1\n  else \n    return n+m/2+0.5\n\
    end\nrounded_avg(5,5)\n</cell>\n<cell>", "  average = nil\n  if n < m\n    return\
    \ -1\n  else\n    average = (n*m)/(n+m)\n    return average.to_i(2)\n  end\nend\n\
    </cell>\n<cell>", "  n = n.to_i\n  m = m.to_i\n  rounded_sum = 0\n  while n <=\
    \ m\n    rounded_sum += n\n    n += 1\n  end\n  return rounded_sum / 2\nend",
  "  avg = ((n...m).inject(:+) / 2).round(2) \n  if((n == m) and (avg == 0))\n   \
    \ return -1\n  elsif ((n > m) and (avg == 0))\n    return -1\n  else\n    return\
    \ avg\nend", "  (n + m) / 2\n  m = m - 1\n  if n < m\n    rounded_avg(n , m)\n\
    \  else\n    rounded_avg(n + m, m)\n  end\nend", "  if m < n \n    return -1\n\
    \  m = n/2\n  n = 0\n  while n <= m \n    n += 1\n  end\n  n\nend\nputs rounded_avg(100,\
    \ 10)\nputs rounded_avg(100, 5)\nputs rounded_avg(100, 5)\nputs rounded_avg(100,\
    \ 5)\nputs rounded_avg(100, 10)\nputs rounded_avg(100, 50)\nputs rounded_avg(100,\
    \ 100)\nputs rounded_avg(100, 1000)\nputs rounded_avg(100, 10000)\nputs rounded_avg(100,\
    \ 100000)\nputs rounded_avg(100, 1000000)\nputs rounded_avg(100, 10000000)\nputs\
    \ rounded_avg(100, 100000000)\nputs rounded_avg(100, 1000000000)\nputs rounded_avg(100,\
    \ 10000000000)\nputs rounded_avg(100, 100000000000)\nputs rounded_avg(100, 1000000000000)\n\
    puts rounded_avg(100, 1000000000000)\nputs rounded_avg(100, 10000000000000)\n\
    puts rounded_avg(100, 10000000000000)\nputs rounded_avg(100, 1000000000000000)\n\
    puts rounded_avg(100, 1000000000000000)\nputs rounded_avg(100, 100000000000000000)\n\
    puts rounded_avg(100, 100000000000000000)\nputs rounded_avg(100, 100000000000000000000)\n\
    puts rounded_avg(100, 1000000000000000000000)\nputs rounded_avg(100, 10000000000000000000000)\n\
    puts rounded_avg(100, 10000000000000000000000)\nputs rounded_avg(100, 1000000000000000000000000)\n\
    puts rounded_avg(100, 1000000000000000000000000)\nputs rounded_avg(100, 100000000000000000000000000)\n\
    puts rounded_avg(100, 100000000000000000000000000)\nputs rounded_avg(100, 1000000000000000000000000000)\n\
    puts rounded_avg(100, 10000000000000000000000000000)\nputs rounded_avg(100, 100000000000000000000000000000)\n\
    puts rounded_avg(100, 1000000000000000000000000000000)\nputs rounded_avg(100,\
    \ 1000000000000000000000000000000)\nputs rounded_avg(100, 1000000000000000000000000000000000)\n\
    puts rounded_avg(100, 1000000000000000000000000000000000)\nputs rounded_avg(100,\
    \ 10000000000000000000000000000000001)\nputs rounded_avg(100, 10000000000000000000000000000000001)\n\
    puts rounded_avg(100, 10000000000000000000000000000000001)\nputs rounded_avg(100,\
    \ 100000000000000000000000000", "  sum = n \n  for i in 1..m\n    sum += i\n \
    \ avg = sum/n\n  rounded_avg = (avg + m)/2\n  if rounded_avg > m\n    return -1\n\
    \  return rounded_avg.to_s(2)\nend\n</cell>\n<code language=julia-0.6>", "   \
    \ return ((n+m) / 2).to_s(2).split('.')[0] if n > m == -1 else -1\nend\n</pre>",
  "  ((m<n) ? (-1) : (n+m)/2) # round\nend", "  puts \"The rounded average of #{n}\
    \ to #{m} is #{RoundedAvg(n, m)}\"\nend", "  n = (n.to_s(2) + m.to_s(2)).to_i(10)\n\
    \  if n>m\n    return -1\n  else \n    return n.to_s(2)+m.to_s(2).to_s(10).to_i(2).to_s(10)\n\
    \  end\nend", "  if n < m\n    return -1\n  else\n    return ((n+m)/2)\n  end\n\
    end", "  if n < m\n    return -1\n  else\n    avg = n+m\n    avg = avg/2.0\n \
    \   avg = round(avg)\n    return avg\n  end\nend\nputs rounded_avg(5,3) ", " \
    \ if n >= m\n    return -1\n  result = 0.0\n  for i in n..m \n    result += i\
    \ \n  result /= m\n  result = \"%.1f\" % result\n  result = result.to_i(2)\n \
    \ result -= 1\n  return result\nend\n</cell>\n<code language=julia-1.0>\nrounded_avg(5,10)\n\
    </cell>\n<code language=julia-1.0>\nrounded_avg(5,15)\n</cell>\n<text>\nQ16. Write\
    \ a recursive function to return the first digit of a positive integer rounded\
    \ up. Return 0 if the integer is less than 10", "  avg = 0\n  n.times do |i|\n\
    \    avg = avg + i\n  end\n  avg = avg / n\n  if m > n\n    -1\n  else\n    avg.round(2).to_s(2)\n\
    \  end\nend", "  total = (n + m) / 2.0\n  \n  return if n < m\n  \n  ni = 1\n\
    \  mi = 2\n  while ni + mi <= m\n    ni += ni * mi\n    mi += mi * mi\n    total\
    \ += ni + mi\n    \n  avg = total/(n + m)\n  \n  binary = num2bin(avg)\n  \n \
    \ return binary.to_i\nend", "  (0..n).each_with_index.inject(0) do |sum, val|\n\
    \    sum += val\n  end\n  sum / n if n <= m\n  -1\nend\nputs rounded_avg(10,5)",
  "  avg = 0.0\n  until n <= m \n    num = n\n    until num >= m\n      num = num\
    \ - m\n    end\n    avg = avg + num\n  end\n  avg = avg / 2 \n  avg = Math.ceil(avg\
    \ * 10 / 10)\n  return -1 * (avg / 10)\nend", "  avg = n / m\n  if m>n\n    avg\
    \ = -1\n  end\n  avg.round(2)\nend\nrounded_avg(5,3) # => 2.5\nrounded_avg(5,4)\
    \ # => -1\nrounded_avg(3,4) # => -1.5\nrounded_avg(4,4) # => -1.5\nrounded_avg(5,5)\
    \ # => -1.5\nrounded_avg(5,10) # => -1.5\nrounded_avg(7,5) # => -1.5\nrounded_avg(8,5)\
    \ # => -1.5\nrounded_avg(7,6) # => -1.5\nrounded_avg(8,6) # => -1.5\nrounded_avg(4,7)\
    \ # => -1\nrounded_avg(5,7) # => -1\nrounded_avg(3,7) # => -1\nrounded_avg(4,8)\
    \ # => -1\nrounded_avg(5,8) # => -1\nrounded_avg(3,8) # => -1\nrounded_avg(4,9)\
    \ # => -1\nrounded_avg(5,9) # => -1\nrounded_avg(3,9) # => -1\nrounded_avg(4,10)\
    \ # => -1\nrounded_avg(5,10) # => -1\nrounded_avg(3,10) # => -1\nrounded_avg(4,11)\
    \ # => -1\nrounded_avg(5,11) # => -1\nrounded_avg(3,11) # => -1\nrounded_avg(4,12)\
    \ # => -1\nrounded_avg(5,12) # => -1\nrounded_avg(3,12) # => -1\nrounded_avg(4,13)\
    \ # => -1\nrounded_avg(5,13) # => -1\nrounded_avg(3,13) # => -1\nrounded_avg(4,14)\
    \ # => -1\nrounded_avg(5,14) # => -1\nrounded_avg(3,14) # => -1\nrounded_avg(4,15)\
    \ # => -1\nrounded_avg(5,15) # => -1\nrounded_avg(3,15) # => -1\nrounded_avg(4,16)\
    \ # => -1\nrounded_avg(5,16) # => -1\nrounded_avg(3,16) # => -1\nrounded_avg(4,17)\
    \ # => -1\nrounded_avg(5,17) # => -1\nrounded_avg(3,17) # => -1\nrounded_avg(4,18)\
    \ # => -1\nrounded_avg(5,18) # => -1\nrounded_avg(3,18) # => -1\nrounded_avg(4,19)\
    \ # => -1\nrounded_avg(5,19) # ", "    rounded_answer = 0\n    \n    while n <=\
    \ m\n        rounded_answer += (n - 1)\n        n += 1\n    \n    return rounded_answer\
    \ / m\n    \nprint(rounded_avg(2, 6))\nprint(rounded_avg(6, 2))\nprint(rounded_avg(3,\
    \ 5))\n</cell>\n<text>\nQuestion 3.2. Write a function, sum_squared_integers,\
    \ that takes in three numbers and returns the sum of squares of those numbers.\
    \  \nExample: \nsum_squared_integers(10, 5, 2)\nsum_squared_integers(10, 5, 3)\n\
    sum_squared_integers(10, 5, 4)\nsum_squared_integers(10, 5, 5)\nsum_squared_integers(10,\
    \ 5, 6)\nsum_squared_integers(10, 5, 7)\nsum_squared_integers(10, 5, 8)\nsum_squared_integers(10,\
    \ 5, 9)\nsum_squared_integers(10, 5, 10)\nsum_squared_integers(10, 5, 11)\nsum_squared_integers(10,\
    \ 5, 12)\nsum_squared_integers(10, 5, 13)\nsum_squared_integers(10, 5, 14)\nsum_squared_integers(10,\
    \ 5, 15)\nsum_squared_integers(10, 5, 16)\nsum_squared_integers(10, 5, 17)\nsum_squared_integers(10,\
    \ 5, 18)\nsum_squared_integers(10, 5, 19)\nsum_squared_integers(10, 5, 20)\nsum_squared_integers(10,\
    \ 5, 21)\nsum_squared_integers(10, 5, 22)\nsum_squared_integers(10, 5, 23)\nsum_squared_integers(10,\
    \ 5, 24)\nsum_squared_integers(10, 5, 25)\nsum_squared_integers(10, 5, 26)\nsum_squared_integers(10,\
    \ 5, 27)\nsum_squared_integers(10, 5, 28)\nsum_squared_integers(10, 5, 29)\nsum_squared_integers(10,\
    \ 5, 30)\nsum_squared_integers(10, 5, 31)\nsum_squared_integers(10, 5, 32)\nsum_squared_integers(10,\
    \ 5, 33)\nsum_squared_integers(10, 5, 34)\nsum_squared_integers(10, 5, 35)\nsum_squared_integers(10,\
    \ 5, 36)\nsum_squared_integers(10, 5, 37)\nsum_squared_integers(10, 5, 38)\nsum_squared_integers(10,\
    \ 5, 39)\nsum_squared_integers(10, 5, 40)\nsum_squared_integers(10, 5, 41)\nsum_squared_integers(10,\
    \ 5, 42)\nsum_squared_integers(10, 5, 43)\nsum_squared_integers(10, 5, 44)\nsum_squared_integers(10,\
    \ 5, 45)\nsum_squared_integers(10, ", "    if m == 0 || n == m\n        return\
    \ -1\n    if n == m\n        return n\n    sum = n + m\n    return sum / 2\n</cell>\n\
    <cell>\nrounded_avg(7, 8)\n</cell>\n<cell>", "  n = n.floor\n  m = m.floor\n \
    \ a = n + m\n  b = n + m - 1\n  if a == 0\n    rounded_avg = nil\n  else\n   \
    \ rounded_avg = a / (b - 1)\n  end\n  rounded_avg = rounded_avg.round\n  rounded_avg.to_s(2)\n\
    end\n</pre>", "    if n == m \n        return m\n    avg = (n + (m+1)) / 2\n \
    \   binary = bin(avg)[2:]\n    int = int(binary)\n    if int > m\n        return\
    \ -1\n    else\n        return int\n</code>\n<|/ a dscore=0 tags=ruby |>\n<| c\
    \ |>\n`round(9.0) #=> 9\n<|/ c |>\n<| c |>\n`round` is for rounding numbers, not\
    \ for rounding decimal numbers to an integer.\n<|/ c |>\n<| a |>\nHere's a recursive\
    \ solution:\n<code>", "  avg = ((n+m)/2).ceil\n  print avg, bin(avg)\nend\n</cell>\n\
    <code language=julia-1.0>\nrounded_avg(10,8)\n</cell>\n<code language=julia-1.0>",
  "    if n == m\n        return m\n    avg = ((n+m)/2) / 2\n    ans = math.trunc(avg)\n\
    \    binary = bin(ans)\n    return binary", "  n = n.to_i\n  m = m.to_i\n  sum\
    \ = 0\n  if n > m\n    return -1\n  while n <= m\n    sum += 1\n    n += 1\n \
    \ sum / m\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
