name: HumanEval_88_sort_array
language: rb
prompt: "# Given an array of non-negative integers, return a copy of the given array\
  \ after sorting,\n# you will sort the given array in ascending order if the sum(\
  \ first index value, last index value) is odd,\n# or sort it in descending order\
  \ if the sum( first index value, last index value) is even.\n# Note:\n# * don't\
  \ change the given array.\n# Examples:\ndef sort_array(array)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
  \    candidate = method(:sort_array)\n    assert_equal([], candidate.call([]))\n\
  \    assert_equal([5], candidate.call([5]))\n    assert_equal([0, 1, 2, 3, 4, 5],\
  \ candidate.call([2, 4, 3, 0, 1, 5]))\n    assert_equal([6, 5, 4, 3, 2, 1, 0], candidate.call([2,\
  \ 4, 3, 0, 1, 5, 6]))\n    assert_equal([1, 2], candidate.call([2, 1]))\n    assert_equal([0,\
  \ 11, 15, 32, 42, 87], candidate.call([15, 42, 87, 32, 11, 0]))\n    assert_equal([23,\
  \ 21, 14, 11], candidate.call([21, 14, 23, 11]))\n  end\nend\n"
completions: ["    array.sort\nend", "    array.sort\n    array.reverse_access\nend",
  "\tarray.sort\nend", "  array.sort\nend", "  sum = 0\n  for i in array\n    sum\
    \ += i\n  end\n  if sum % 2 == 1\n    # odd\n    array.sort! { |a, b| a <=> b\
    \ }\n  else\n    # even\n    array.sort! { |a, b| b <=> a }\n  end\n  return array\n\
    end", "  sorted = array.clone\n  sum = 0\n  array.length.times do |index|\n  \
    \  sum += array[index]\n  end\n  if sum.odd?\n    sorted = sorted.sort_by do |index|\n\
    \      array[index]\n    end.reverse\n  else\n    sorted = sorted.sort_by do |index|\n\
    \      array[index]\n    end\n  end\n  sorted\nend\n</cell>\n<cell>", "    array\
    \ = array.clone\n    array.sort!\n    if array.sum & 1\n        array.sort!{|a,b|\
    \ b - a }\n    end\n    array\nend", "  n = array.length\n  odd_or_even = n&1==0\
    \ ? 0 : 1", "  array.sort.reverse! if array.sum % 2 == 0\n  array.sort!\nend",
  "  arr = array.sort\n  if array.sum % 2 == 0 \n    arr.reverse\n  end\n  arr\nend",
  "  if array.sum % 2 == 0\n    array.sort!\n    array.reverse!\n  else\n    array.sort!.reverse!\n\
    \  end\nend\n</cell>\n<cell>", "  array.sort { |x, y| x >= y ? 1 : -1 }\nend",
  "  return array if array.empty?\n  sum = 0\n  sorted_array = array.dup\n  array.each_with_index\
    \ do |el, index|\n    sum = sum + el\n    sorted_array.insert(index, el) if sum\
    \ % 2 == 1\n    sorted_array.insert(index, -el) if sum % 2 == 0\n  end\n  sorted_array\n\
    end\n</pre>", "  sorted = array.dup\n  sorted.sort!\n  return sorted\nend", " \
    \ sum = 0\n  array.each_with_index do |element, i|\n    sum += element\n    if\
    \ sum % 2 == 0\n      array.swap(i, sum.last)\n      sum = sum / 2\n    end\n\
    \  end\n  array\nend", "  sum = 0\n  array.each do |x|\n    sum += x\n  end\n\
    \  return array if sum % 2 == 1\n  array.sort.reverse\nend\nputs sort_array([1,5,10,3,7,2])\
    \ # => [10, 7, 5, 2, 1]\nputs sort_array([1,5,10,3,7]) # => [10, 7, 5, 2, 1]",
  "    array.sort!\nend", "  sorted_array = array.dup\n  sum_of_first_values = sorted_array.inject(0)\
    \ {|sum, e| sum + e}\n  if sum_of_first_values % 2 == 1\n    sorted_array.sort.reverse\n\
    \  else\n    sorted_array.sort\n  end\nend", "  array.sort\nend", "  array.sort!\n\
    \  odd_index = array.index( array.reduce(:+) ) \n  even_index = array.index( array.reduce(:+),\
    \ odd_index )\n  if odd_index\n    array[odd_index] = array.pop\n  end\n  if even_index\n\
    \    array[even_index] = array.pop\n  end\n  array\nend", "  # Your code here\n\
    \  array.sort!\n  return array\nend", "    evens_sum = array.each_with_index.map\
    \ { |element, index| element + index * 2 }.reduce(:+)\n    odds_sum = array.each_with_index.map\
    \ { |element, index| element + index * 2 }.reduce(:-)\n    evens_sum ? evens_sum\
    \ : odds_sum\nend\nprint sort_array([1, 3, 5]) #=> 4\nprint sort_array([5, 3,\
    \ 1]) #=> 1\nprint sort_array([1, 2, 3, 4, 5, 6, 7]) #=> 6\n</code>\n<|/ a dscore=4\
    \ |>\n<| c |>\nI like the `evens_sum = ` vs `odds_sum = ` comment, but I think\
    \ `each_with_index` is much cleaner than `map { |element,index| element + index\
    \ * 2 }.reduce(:+).\n<|/ c |>\n<| c |>\nThe only issue I can see with this solution\
    \ is that it doesn't work for negative numbers.\n<|/ c |>\n<| c |>\nThe question\
    \ asks for descending order. The answer should be `odds_sum = -evens_sum`.\n<|/\
    \ c |>\n<| c |>\nThis code doesn't work when input has negative integers because\
    \ `odds_sum` and `evens_sum` are calculated independently and are not updated\
    \ until the last statement is evaluated. So, if `evens_sum` is `-2`, for example,\
    \ `evens_sum + odds_sum` will be `0`.\n<|/ c |>\n<| a dscore=3 |>\nYou have to\
    \ sort the array first, then sum the last two elements to get a result for odd\
    \ or even sums.\n<|/ a tags=ruby,arrays |>\n<| a tags=ruby,arrays |>\nHere is\
    \ a different way of doing it:\n<code>\narr = [-4, -1, -3, -2, 1, 5, 10, 15, 20]",
  "  return array.sort.reduce(&:+) if array.reduce(&:+) % 2 == 1\n  array.sort.reverse!\
    \ if array.reduce(&:+) % 2 == 0\nend\n</pre>\n</div>\n</div>\n</div>\n</div>\n\
    </div>\n<div id=\"footer\">\n<div id=\"footer-text\">\nLast updated 2019-02-26\
    \ 19:31:45 CET\n</div>\n</div>\n</body>\n</html>\n</code>\n<|/ q tags=ruby dscore=0\
    \ |>\n<| c |>\nYou are trying to write a Ruby program in a way that is difficult\
    \ to read, is difficult to debug and difficult to maintain. You could simply use\
    \ a simple Ruby program.\n<|/ c |>\n<| c |>\n\"but I don't think I am doing it\
    \ right\" is vague and unhelpful.  Please explain what it is that you are actually\
    \ trying to do.\n<|/ c |>\n<| c |>\nPlease don't use \"solved\" in your question\
    \ title. We have solved your question for you, and you have not accepted an answer\
    \ from our answers below. We can see that you have asked the question so many\
    \ times that you did not accept any of the answers. If you don't see a way to\
    \ do that, then please take some time to read [this help page](http://stackoverflow.com/help/someone-answers).\
    \ Accepting an answer shows other users that you have found a solution.\n<|/ c\
    \ |>\n<| a |>\nI agree with your assessment that you are getting confused and\
    \ that you are trying to write this in Ruby in a way that is difficult to read,\
    \ difficult to debug and difficult to maintain.\nRuby has many features and idioms\
    \ that make life easier. Ruby is an object-oriented language, but it is also a\
    \ functional language. The object-oriented idioms are the classes and the method\
    \ definitions. Ruby uses these classes and method definitions to provide powerful\
    \ abstractions and reusable code that can be applied to many different types of\
    \ problems. \nYou are trying to use the object-oriented idioms while trying to\
    \ use Ruby as a functional language at the same time. The object-oriented idioms\
    \ are designed around the idea that one should be able to think of a problem as\
    \ a set of objects that have a methods and attributes. In your program, you have\
    \ two classes, each of which has one method and one attribute. As a result, it\
    \ is difficult to think about problems as \"set of objects\".\nInstead, think\
    \ of a problem as a function and use a function as a method. It might help to\
    \ refactor your code by breaking the problem into smaller pieces.\nHere is some\
    \ code that accomplishes your goal:\n<code>", "  return array.sort\nend", "  array=array.clone\n\
    \  array.each_index{|i|\n    if i<=array.size\n      array.slice!(0,1)\n     \
    \ break if array.reduce(:+)%2\n    end\n    array.slice!(0,1)\n  }\n  array\n\
    end", "    array.sort! do |first, last|\n        if first + last == array.sum\
    \ + 1\n            last <=> first\n        else\n            last <=> first\n\
    \        end\n    end\nend", "  array.sort do |a, b|\n    a = array.sum(1)\n \
    \   b = array.sum(2)\n    b.zero? ? a : a > b ? 1 : -1\n  end\n  array\nend",
  "  array.sort\nend", "  if array.empty?\n    puts array.inspect\n    return\n  end\n\
    \  new_array = array.clone\n  array.size.times do |index|\n    first = new_array[index]\n\
    \    last = new_array[(index + 1)]\n    if first.odd?\n      new_array.delete_at(index)\n\
    \      new_array.unshift(last)\n      new_array.push(first)\n      break\n   \
    \ elsif last.even?\n      new_array.delete_at(index + 1)\n      new_array.pop\n\
    \      new_array.unshift(first)\n      new_array.push(last)\n      break\n   \
    \ end\n  end\n  puts new_array.inspect\nend", "  # Your code here\nend", "  if\
    \ array.sum % 2 == 1\n    array.sort!\n  else\n    array.sort { |a, b| b - a }\n\
    \  end\n  return array\nend\nputs sort_array([10,12,1,2,4,5,9,14,15]).inspect",
  "  sum = array[0]+array[array.length-1]\n  odd_or_even = (sum % 2) == 0\n  array.sort!\
    \ { |a,b| odd_or_even == (a+b) % 2 ? -1 : a <=> b }\nend", "    sum = 0\n    sum\
    \ = 0\n    array = array.sort\nend\n</cell>\n<cell>", "    array.sort\nend", " \
    \ array.sort!\n  return array\nend", "  # Your code here\nend", "  new_array =\
    \ []\n  sorted_array = sort_array_with_odd_sum_index(array)\n  new_array = sorted_array[0]\n\
    \  new_array += sorted_array[-1]\n  return new_array\nend", "    array.sort!\n\
    end\n</pre>\n<pre class=\"output\">", "  array.sort\nend", "    array.sort { |a,b|\
    \ a <=> b } if array.sum & 1 == 1\n    array.sort { |a,b| a <=> b }.reverse  if\
    \ array.sum & 1 == 0\nend", "  sum = 0\n  array.sort! { |x, y| sum += x }\n  return\
    \ sum % 2 == 0 ? array : array.reverse\nend", "    # Your code here\n    array_copy.sort!\n\
    end\n</cell>\n<cell>", "  array.sort!\nend", "    # Write your code here.\n  \
    \  return array\nend", "  array.sort\nend\nSolution.sort_array(arr)\n  #=> [3,\
    \ 5, 7, 9, 11, 15] ", "  \n  array.sort!\n  \n  return array\nend", "    array.sort\n\
    end", "  array.sort!\n  array\nend", "  # write code here\n  return array\nend",
  "    array.sort! do |a, b|\n        a_sum = array[a]\n        b_sum = array[b]\n\
    \        if b_sum % 2 == 0\n            a_sum <=> b_sum\n        else\n      \
    \      a_sum <=> -b_sum\n        end\n    end\n    return array\nend", "  # Your\
    \ code here\nend", "  array.sort\n  puts \"#{array[0]} #{array[array.length-1]}\"\
    \nend", "  array.sort\n  return\nend", "  sorted = array.dup\n  sorted_index =\
    \ 0\n  sorted_even_index = 0\n  even_index = 0\n  even_index_count = 0\n  odd_index_count\
    \ = 0\n  array.each_with_index { |element, index| even_index += element if even_index_count\
    \ < index }\n  even_index_count += 1\n  while even_index < array.length\n    if\
    \ array[sorted_index] + array[sorted_even_index] < array[even_index]\n      sorted[sorted_index]\
    \ = array[even_index]\n      sorted_index += 1\n      even_index += 1\n      sorted_even_index\
    \ += 1\n    else\n      sorted[sorted_even_index] = array[even_index]\n      sorted_even_index\
    \ += 1\n      even_index += 1\n    end\n  end\n  sorted.reverse_each(sorted_index,\
    \ array.length)\n  sorted\nend", "  array.sort!\nend", "  array.sort!\n  if array.length\
    \ % 2 == 0 then\n    array.reverse!\n  end\n  return array\nend", "  sum = 0\n\
    \  array.each_with_index do |element, index|\n    sum += element\n    if sum.even?\n\
    \      array.swap index, index + 1\n      sum -= array[sum - 2] # decrement sum\n\
    \      break # stop looping\n    end\n  end\n  array\nend", "  array.sort!\nend",
  '  sorted_array = array.clone', "    sorted_array = []\n    odd = true\n    even\
    \ = false\n    array.each do |x|\n        if odd\n            sorted_array.push(x)\n\
    \            odd = false\n        else\n            sorted_array.push(x)\n   \
    \         even = true\n        end\n    end\n    sorted_array.sort!\nend\n</code>\n\
    <|/ a tags=ruby,arrays,sorting dscore=0 |>\n<| a |>\n<code>", "  sum = array[0]\n\
    \  for i in 1..array.length\n    if array[i]+sum%2==0\n      sum = sum + array[i]\n\
    \      array.insert(i, sum)\n      sum = 0\n    end\n  end\n  return array\nend",
  "  return array if array.size == 1\n  if array.length <= 2\n    return array\n \
    \ end\n  sum = 0\n  pivot = array.first\n  for i in 0...array.length - 1\n   \
    \ sum = sum + array[i]\n    if sum % 2 == 1\n      pivot += 1\n      break\n \
    \   end\n  end\n  begin\n    pivot_value = array[pivot]\n    pivot_index = pivot\n\
    \    for j in 0...array.length - 1\n      if j < pivot\n        array[j] = array[j\
    \ + 1]\n      end\n      if j == pivot\n        sum = sum - pivot_value\n    \
    \    array[j] = pivot_value\n      end\n      if sum % 2 == 1\n        pivot_index\
    \ += 1\n        sum = 0\n        break\n      end\n    end\n  end until pivot_index\
    \ == 0\n  return array\nend", "  return array if array.empty?\n  odd_sum, even_sum\
    \ = array.sum\n  odd_sum == 0 ? (odd_sum, even_sum) : even_sum == 0 ? odd : even\n\
    end\nsort_array([2,4,3,1])", "  array.sort! # or array.sort!.reverse!\nend", '  sorted
    = []', "  return array.sort.reverse\nend", "  array.sort\nend", "  array.sort.with_index\
    \ { |a,i| i < a.length && i > 0 ? i**2 : a > 0 ? a : -i**2 }\nend", '  return
    array if array.size <= 0', "  odd_sum  = array.inject(0) { |sum, el| sum + el\
    \ } % 2 == 1\n  even_sum = array.inject(0) { |sum, el| sum + el } % 2 == 0\n \
    \ odd_sum ? array.sort.reverse! : array.sort\nend\n</pre>\n</div>\n</div>\n</div>\n\
    </div>\n<div id='_solutions_9' class=\"hidden\" hidden>\n<div>\n<div class=\"\
    cell border-box-sizing code_cell rendered\">\n<div class=\"input\">\n<div class=\"\
    prompt input_prompt\">In&nbsp;[&nbsp;]:</div>\n<div class=\"inner_cell\">\n  \
    \  <div class=\"input_area\">\n<div class=\" highlight hl-r\"><pre><span></span>\n\
    </pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"cell border-box-sizing text_cell\
    \ rendered\"><div class=\"prompt input_prompt\">\n</div><div class=\"inner_cell\"\
    >\n<div class=\"text_cell_render border-box-sizing rendered_html\">\n<p><img src=\"\
    ../img/lecture12/solutions.png\" alt=\"Solutions\" style=\"width:60%\" /></p>",
  "  array.each do |value|\n    if value.odd? \n      value.swap\n    else \n    \
    \  value.swap\n    end\n  end\n  array\nend\np sort_array [5, 7, 9, 3, 82]", " \
    \ array.sort! do |a, b|\n    if a.sum % 2 == 0 then 1\n    else -1\n    end\n\
    \  end\nend", "  return array\nend", "    # write your code here\n    sum = array.inject(:+)\n\
    \    odd_sum = sum.odd?\n    even_sum = sum.even?\n    odd_array =\n    if odd_sum\n\
    \        array.sort\n    elsif even_sum\n        array.sort!.reverse\n    else\n\
    \        array.sort!\n    end\nend\n</code>\n<|/ a |>\n<| a |>\nI know this is\
    \ an old question, but since I didn't see any replies on this thread, and since\
    \ I spent a lot of time searching for a solution to this, I thought I'd share\
    \ the method I found.\n<code>", "    array.sort!\n    return array\nend", "  a\
    \ = array.clone\n  if a.length < 2\n    a\n  else\n    if a[0] % 2 == 0\n    \
    \  a.sort!\n    else\n      a.sort! { |a, b| b <=> a }\n    end\n    a\n  end\n\
    end", "  result = array.dup\n  result.sort! do |a,b|\n    sum = (a.first, b) if\
    \ a.last > b.first\n    sum = (a.last, b) if a.last < b.first\n    a\n  end\n\
    \  result\nend", "  array.sort!\nend", "    # Solution here\nend", "    # Write\
    \ your code here.\n    if array.sum() % 2 == 0\n        array.sort!\n    else\n\
    \        array.sort!.reverse\n    end\n    return array\nend", "  # Your code\
    \ goes here\nend", '    array.sort', "    sorted = []\n    array_sum = 0\n   \
    \ array.each do |num|\n        array_sum += num\n    end", "  # write code here\n\
    end", "  array = array.sort\n  sum_of_first = array[0] + array[-1]\n  if sum_of_first\
    \ % 2 != 0\n    array.sort!\n  else\n    array.sort!.reverse\n  end\n  array\n\
    end\nputs sort_array([1,5,3,4,6,7])", "  sorted = []\n  array.each_with_index\
    \ do |num, index|\n    if num % 2 == 0\n      sorted.unshift(num + array[index\
    \ + 1])\n      array.delete_at(index + 1)\n    elsif num % 2 != 0\n      sorted.unshift(num\
    \ + array[index])\n      array.delete(index)\n    end\n  end\n  sorted.compact!\n\
    \  sorted = sorted.join().split(\",\").map{|n| n.to_i}\nend", "    array.sort\
    \ { |x, y|\n        if x==0 && y == 0\n            return 0\n        elsif x==0\n\
    \            return 1\n        elsif y == 0\n            return -1\n        else\n\
    \            return x-y }\nend", "    array.each do |i|\n        odd = i.odd?\
    \ ? 1 : -1\n        even = i.even? ? -1 : 1\n        array[i] = odd * i.to_s +\
    \ even * i.to_s\n    end\n    array.sort!\nend", "    # Your code here\n    array.each_with_index\
    \ do |i, index|\n        if index % 2 == 0\n            array[index] = array[i]\
    \ + array[index + 1]\n            array[index + 1] = array[index] - array[index\
    \ + 1]\n        else\n            array[index] = array[index] - array[i]\n   \
    \     end\n    end\n    array\nend", "    even = []\n    odd = []\n    even.push(array[0])\n\
    \    odd.push(array[0])\n    even.push(array.pop())\n    odd.push(array.pop())\n\
    \    if (even.length + odd.length) % 2 == 0\n        even.sort! { |a, b| b <=>\
    \ a }\n        odd.sort! { |a, b| b <=> a }\n    else\n        even.sort! { |a,\
    \ b| b <=> a }\n        odd.sort! { |a, b| a <=> b }\n    end\n    even.push(array[0])\n\
    \    odd.push(array[0])\n    even.push(array.pop())\n    odd.push(array.pop())\n\
    end", "  odd = 1\n  even = 0\n  sorted = []\n  until array.empty?\n    sum = array.shift\n\
    \    unless sum % 2 != 0 && sum % 2 != odd\n      sorted = sorted + [sum]\n  \
    \  end\n    if sum % 2 == odd\n      even = even + 1\n    else\n      odd = odd\
    \ + 2\n    end\n  end\n  sorted.reverse!\n  sorted.push(nil)\n  return sorted\n\
    end", "    # write code here\nend", "    array.sort\nend", "  array = array.clone\n\
    \  array.sort {\n    |a, b| [a, b].sum }.each_with_index do |i, idx|\n      if\
    \ i.odd?\n        array[idx] = i\n      else\n        array[idx] = -i\n      end\n\
    \  end\n  return array\nend", "  array = array.sort\n  return array\nend", " \
    \ a = []\n  sum = 0\n  array.each do |num|\n    sum += num\n  end\n  if sum %\
    \ 2 == 0\n    array.each do |num|\n      a << num\n    end\n  end\n  if sum %\
    \ 2 != 0\n    array.each do |num|\n      a << num\n    end\n  end\n  a\nend",
  "  array.sort!\n  return array\nend", "  array = array.sort\n  return array\nend\n\
    print(sort_array([1,5,3,2,4,3]))\n</cell>\n<text>\n6. Write a Program to Find\
    \ the Maximum Value of an Array (Self Learning)\nGiven an non-empty integer array,\
    \ find the maximum value in it.\nYou may assume that the array is non-empty and\
    \ the maximum value is in the first index of the array.", "  array.sort.reverse.flatten\n\
    end\n</code></pre>\n<p>\_</p>\n<p><strong>Constraints:</strong></p>\n<ul>\n<li><code>1\
    \ &lt;= array.size &lt;= 100</code></li>\n<li><code>1 &lt;= array[i] &lt;= 10<sup>9</sup></code></li>\n\
    </ul>\n</div></div><br><br><hr><br>******************************************<div\
    \ id=\"title\">1726. Maximum Number of People Eating Candy</div>\n******************************************<div\
    \ class=\"content__u3I1 question-content__JfgR\"><div><p>You have a collection\
    \ of candies and you are given a single candies integer value. The task is to\
    \ find the maximum number of people you can eat with this candies. The number\
    \ of people you can eat is equal to the number of ways to choose k candies from\
    \ the given collection of candies. Note that each person can eat only one type\
    \ of candy, and that your solution does not need to be optimal.</p>\n<p>\_</p>\n\
    <p><strong>Example 1:</strong></p>\n<pre><strong>Input:</strong> candies = 7\n\
    <strong>Output:</strong> 3\n<strong>Explanation:</strong> There are 3 ways to\
    \ choose 3 candies from the given collection of candies.\n1 &lt;= k &lt;= 3. 1\
    \ &lt;= candies &lt;= 6\n</pre>\n<p><strong>Example 2:</strong></p>\n<pre><strong>Input:</strong>\
    \ candies = 2\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> There\
    \ are 2 ways to choose 2 candies from the given collection of candies.\n1 &lt;=\
    \ k &lt;= 2. 1 &lt;= candies &lt;= 2\n</pre>\n<p><strong>Example 3:</strong></p>\n\
    <pre><strong>Input:</strong> candies = 1\n<strong>Output:</strong> 1\n</pre>\n\
    <p>\_</p>\n<p><strong>Constraints:</strong></p>\n<ul>\n<li><code>1 &lt;= candies\
    \ &lt;= 10<sup>5</sup></code></li>\n</ul>\n</div></div><br><br><hr><br>******************************<div\
    \ id=\"title\">1727. Shortest String Permutation</div>\n******************************<div\
    \ class=\"content__u3I1 question-content__JfgR\"><div><p>You are given a string\
    \ S of lowercase English letters, containing punctuation marks, numbers, and non-English\
    \ letters.</p>\n<p>A string is said to be a <strong>permutation of S</strong>\
    \ if the characters in S were rearranged such that the new string formed after\
    \ rearranging is identical in length to the original string.</p>\n<p>Return <em>the\
    \ <strong>shortest possible permutation</strong> of S</em> and <em>the length\
    \ of the permutation </em>in <strong>O(<img alt=\"$2^{n}$\" class=\"latex\" height=\"\
    12\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/8/87/Permutations.svg",
  "  array.sort!\n  i = 1\n  while i <= array.length\n    if array[i].even?\n    \
    \  array[i], array[i-1] = array[i-1], array[i]\n      i += 1\n    else\n     \
    \ array[i], array[i-1] = array[i-1], array[i]\n      i -= 1\n    end\n  end\n\
    end", "  array.sort.reverse! if array.sum % 2 == 1\n  array\nend\nprint sort_array([5,\
    \ 3, 4, 1, 2]) # => [1, 2, 3, 4, 5]", "  array.sort! { |first, last| first <=>\
    \ last } if array[0] > array[array.length - 1]\n  array\nend", "\tresult = array.dup\n\
    \tsum = 0\n\tfor i in array\n\t\tsum += i\n\tsum.odd?\n\tarray.sort!\n\tresult\n\
    end", "    array.sort\nend", "    array.sort!\n    return array\nend\n</cell>\n\
    <code language=conda-root-py>\na = [1,8,2,3]\na\n</cell>\n<code language=conda-root-py>\n\
    sort_array(a)\na\n</cell>\n<code language=conda-root-py>", "  array.sort!\nend\n\
    </cell>\n<cell>", "    array.sort!\n    if array[0]%2 != 0 && array[-1]%2 == 0\
    \ then\n        array.sort!.reverse!\n    elsif array[0]%2 == 0 && array[-1]%2\
    \ != 0 then\n        array.sort!.sort!.reverse!\n    elsif array[0]%2 == 0 &&\
    \ array[-1]%2 == 0 then\n        array.sort!.reverse!\n    end\nend\n</code>\n\
    <|/ a tags=arrays,ruby,sorting |>\n<| c |>\nNice solution. But, your first condition\
    \ should be `if array[0]%2 != 0 && array[-1]%2 == 0 then`, not `if array[0]%2\
    \ == 0 && array[-1]%2 != 0 then`, to sort in descending order.\n<|/ c |>\n<| a\
    \ tags=arrays,ruby,sorting |>\n<code>", "    if array.empty?\n        array\n\
    \    else\n        array.sort_by{|x| [x.first] + [x.last]}\n    end\nend", " \
    \ if array.length <= 1\n    array\n  else\n    evenSum = array.sum { |index| index\
    \ % 2 == 0 }\n    oddSum = array.sum { |index| index % 2 != 0 }", "    array.sort!\n\
    \    count = 0\n    temp = 0\n    return array\nend", "  # +++your code here+++\n\
    end", "  array.sort do |a, b|\n    if a.zero? and b.zero?\n      0\n    elsif\
    \ a.zero? or b.zero?\n      1\n    elsif a.sum < b.sum\n      -1\n    elsif a.sum\
    \ > b.sum\n      1\n    else\n      0\n    end\n  end\nend\n</pre>\n      </div>\n\
    \    </div>\n    <div class=\"tab-pane\" id=\"ruby\">\n      <div class=\"callout\
    \ callout-info\" id=\"ruby-default\">\n        <h4>Ruby <code>Array</code> Default\
    \ Method</h4>\n        <pre><code class=\"ruby\">class Array\n  def sum\n    result\
    \ = 0\n    self.each do |item|\n      result += item\n    end\n    result\n  end\n\
    end\n</code></pre>\n      </div>\n    </div>\n    <div class=\"tab-pane\" id=\"\
    ruby\">\n      <div class=\"callout callout-info\" id=\"ruby-example\">\n    \
    \    <h4>Ruby <code>Array</code> Example</h4>\n        <pre><code class=\"ruby\"\
    >a = [-9, 2, 5, 7]\na.sum #=> 30\na = [-9, 2, 5, 7]\na.sum { |x| x } #=> 30\n\
    </code></pre>\n      </div>\n    </div>\n    <div class=\"tab-pane\" id=\"ruby\"\
    >\n      <div class=\"callout callout-warning\" id=\"ruby-warning\">\n       \
    \ <h4>Ruby <code>Hash</code> Default Method</h4>\n        <pre><code class=\"\
    ruby\">class Hash\n  def sum\n    result = 0\n    self.each do |k, v|\n      result\
    \ += v if k\n    end\n    result\n  end\nend\n</code></pre>\n      </div>\n  \
    \  </div>\n    <div class=\"tab-pane\" id=\"ruby\">\n      <div class=\"callout\
    \ callout-info\" id=\"ruby-example\">\n        <h4>Ruby <code>Hash</code> Example</h4>\n\
    \        <pre><code class=\"ruby\">a = { 1 => 1, 2 => 2, 3 => 3, 4 => 4, 5 =>\
    \ 5, 6 => 6, 7 => 7, 8 => 8 }\na.sum #=> 25\na = { 'a' => 1, 'b' => 2, 'c' =>\
    \ 3, 'd' => 4, 'e' => 5, 'f' => 6, 'g' => 7, 'h' => 8 }\na.sum { |k,v| v } #=>\
    \ 25\n</code></pre>\n      </div>\n    </div>\n  </div>", "  return array\nend",
  "  array_sorted = array.dup\n  array.sort.each do |i|\n    array_sorted.insert(i,\
    \ i)\n  end\n  array_sorted\nend\n</cell>\n<cell>", "    # Write your code here.\n\
    \    array.sort!\n    until array.sum % 2 == 0\n    until array.sum % 2 == 1\n\
    end", "  array.sort!\nend\n=end\n=begin solution2", "    array.sort!\n    even\
    \ = array.length % 2 == 0 ? array.length / 2 : array.length / 2 + 1\n    odd =\
    \ array.length - even\n    array.slice!(0...even)\n    array.slice!(0...odd)\n\
    \    even = array.length % 2 == 0 ? array.length / 2 : array.length / 2 + 1\n\
    \    odd = array.length - even\n    array.slice!(0...even)\n    array.slice!(0...odd)\n\
    \    sort_array\nend", "  new_array = []\n  array.each do |num|\n    if num %\
    \ 2 == 0\n      new_array.unshift(num)\n    else\n      new_array.push(num)\n\
    \    end\n  end\n  new_array\nend", '  array.sort!', "  array.sort!\nend\nprint(sort_array([1,2,3,4,5]))",
  "    sorted = array.clone\n    sorted.sort!\n    if array[0] + array[-1] % 2 ==\
    \ 0\n        sorted.reverse!\n    end\n    return sorted\nend", "  \n  odd = Array.new\n\
    \  even = Array.new\n  \n  odd_sum = odd.sum\n  even_sum = even.sum\n  \n  array.each\
    \ do |i|\n    \n    if odd_sum + even_sum != 0\n      if odd_sum + even_sum.odd?\n\
    \        odd << i\n        odd_sum += i\n      else\n        even << i\n     \
    \   even_sum += i\n      end\n    end\n  end\n  \n  if odd_sum + even_sum.odd?\n\
    \    odd << array.last\n  else\n    even << array.last\n  end\n  \n  return odd\
    \ << even\nend", "    # Write your code here\n    return array\nend", "  result\
    \ = []\n  for i in 0...array.length - 1\n    if array[i] % 2 == 0\n      result\
    \ << array[i + 1]\n      array.pop(i + 1)\n    else\n      result << array[i]\n\
    \      array.pop(i)\n  end\n  return result\nend\n</code>\n<|/ a tags=ruby,arrays,sorting\
    \ |>\n<| a tags=ruby,arrays,sorting |>\n<code>\narr = [1, 2, 4, 3, 6, 5, 7, 8]\n\
    arr.sort.reverse.sort_by { |i| i%2 ? -i : i }", "    array = array.sort\n    \n\
    \    if array.sum%2 != 0\n        array = array.sort_by{ |x| -x}\n    end\n  \
    \  \n    array\nend\nassert sort_array([5, 4, 1]).sort == [1, 1, 5]\nassert sort_array([8,\
    \ 5, 9, 4]).sort == [1, 4, 9, 8]\nassert sort_array([6, 9, 5, 3, 1]).sort == [1,\
    \ 3, 5, 6, 9]\nassert sort_array([7, 8, 9, 5, 6, 4, 3, 2, 1]).sort == [1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9]\nassert sort_array([8, 9, 8, 7, 6, 5, 5, 4, 3, 2, 1]).sort\
    \ == [1, 2, 3, 4, 5, 6, 7, 8, 9, 8]\nassert sort_array([1, 8, 6, 2, 9, 4, 3, 7,\
    \ 5, 0, 5]).sort == [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]\nassert sort_array([]) == []\n\
    assert sort_array([0]) == [0]\nassert sort_array([0, 0]) == [0, 0]\nassert sort_array([-1,\
    \ -1]) == [-1, -1]\nassert sort_array([1, 3, 5]) == [3, 5, 1]\nassert sort_array([1,\
    \ 5, 3]) == [3, 1, 5]\nassert sort_array([3, 8, 1, 6, 9, 7, 2, 5]) == [9, 8, 7,\
    \ 6, 3, 1, 2, 5, 8]\nassert sort_array([7, 5, 3, 6, 1, 8, 2, 9, 0]) == [9, 8,\
    \ 7, 6, 5, 4, 3, 2, 1, 0]\nassert sort_array([5, 3, 2, 8, 1, 7, 9, 4, 6, 0]) ==\
    \ [1, 9, 8, 7, 6, 5, 3, 2, 4, 0]\nassert sort_array([4, 6, 1, 3, 5, 2, 7, 8, 0,\
    \ 9, 5]) == [1, 3, 5, 7, 9, 6, 0, 8, 2, 4]", "  array.sort!\nend\n</pre>\n</div>\n\
    </div>", "  array.sort! { |a, b| a <=> b }\n  array\nend\nsort_array([1,3,5,8,6,7,2,0])",
  "  array.sort!\nend", "  if array.empty? then\n    array\n  elsif array.uniq.size\
    \ == 1 then\n    array\n  else\n    array.sort_by{|i| i.odd?}.reverse!\n    array\n\
    \  end\nend\nputs sort_array([1, 2, -1, -2, 3, -4, 1, 10, 1]).inspect", "  sorted_array\
    \ = array.dup\n  array.each_with_index do |val, index|\n    if array[index + 1]\
    \ && array[index + 1] > val\n      sorted_array[index], sorted_array[index + 1]\
    \ = sorted_array[index + 1], sorted_array[index]\n    end\n  end\n  sorted_array\n\
    end", "    array.sort! # sort the array in ascending order\n    if array.sum %\
    \ 2 == 1 \n        array.sort! # sort the array in descending order\n    end\n\
    end", "  if array.empty?\n    return array\n  else \n    sum_first_last = array.sum\n\
    \    if sum_first_last % 2 > 0\n      array.sort!\n    else\n      array.sort!.reverse!\n\
    \    end\n  end\n  return array\nend", "    array.sort\nend", "    array.sort\n\
    end", "\tarray.sort!\nend", "  sorted = nil\n  array.each do |i|\n    if i ==\
    \ 0 then\n      sorted = i\n    elsif i > 0 && i == array.length - 1\n      sorted\
    \ = i - 1\n    end\n  end\n  sorted.reverse! if sorted.even?\n  return sorted\n\
    end", "  sum_array = array.inject(0, :+)\n  sum_array.odd? ? array.sort.reverse!\
    \ : array.sort!\nend", "    array = array.sort\n    array.each do |x|\n      \
    \  if x > array.length\n            return array\n        end\n    end\nend",
  "  array.sort\nend", "    array.sort!\nend", "  # write your code here\nend", " \
    \ # Write your code here.\nend", "  sorted = array.dup\n  sorted.sort!\n  if(sorted[0]\
    \ % 2 == 0)\n    sorted.reverse!\n  end\n  sorted\nend", "    array.each do |i|\n\
    \        sum = i + array[array.length-1]\n        if sum.odd?\n            array.unshift(i)\n\
    \        else\n            array.pop\n        end\n    end\n    array\nend", " \
    \ array = [4, 2, 6, 1, 3, 5]\n  array.sort!\n  p array\nend", "    array.sort!\n\
    \    array.each do |i|\n        if i % 2 == 0\n            array[i] = array[i].to_s\n\
    \            array[i] = array[i].to_i\n        else\n            array[i] = array[i].to_s\n\
    \            array[i] = array[i].to_i\n        end\n    end\n    return array\n\
    end", "  new_array = array\n  sum_array = new_array.inject(0){ |sum, item| sum\
    \ + item}\n  new_array.sort! if sum_array % 2 == 1\n  new_array.sort! if sum_array\
    \ % 2 == 0\n  new_array\nend", "  even = array.select {|x| x % 2 == 0}\n  odd\
    \ = array.select {|x| x % 2 == 1}\n  even.sort!\n  odd.sort!", "  # Your code\
    \ here\n  array.sort!\nend", "    i = 0\n    j = 0\n    temp = array[i]\n    while\
    \ i < array.length - 1\n        if array[i] + array[i+1] > array[j]\n        \
    \    array[i] = array[i] + array[i+1]\n            array[i+1] = array[j]\n   \
    \         array[j] = temp\n        i += 1\n        j += 1\n    end\n    array\n\
    end", "  odd_sum = array.sum\n  evens_sum = array.sum.even?\n  return array.sort{|x,\
    \ y| odd_sum == evens_sum ? x.to_i + y.to_i : y.to_i - x.to_i }\nend\nprint(sort_array([5,\
    \ 3, 8, 7, 1, 9]))", "    sorted_arr = []\n    array.each do |i|\n        sorted_arr\
    \ << i if i % 2 == 1\n        sorted_arr << -i if i % 2 == 0\n    end\n    sorted_arr\n\
    end", "  array.sort_by { |e| e % 3 }\nend", "  array.sort!\nend", "  if array.sum\
    \ % 2 != 0\n    array.sort!\n  end\nend", "    return array\nend", "  array.sort\n\
    end", "  array.sort_by{|x| x % 2 == 1 }\nend", "    array.sort!\nend", "  sum\
    \ = array.inject(0){|sum, item| sum + item }\n  if sum % 2 == 1\n    array.sort!\
    \ { |a,b| b <=> a }\n  else\n    array.sort! { |a,b| a <=> b }\n  end\nend", " \
    \   array.sort!\nend", "    i = 0\n    sum = 0\n    lenght = array.length\n  \
    \  sorted_array = array", "  array.sort\nend", "  array.sort!\nend", "    return\
    \ array\nend", "  array.sort!\n  case array.length % 2 \n    when 0 then array\n\
    \    when 1 then array.sort! { |a, b| a.to_i + b.to_i }\n  end\nend", "  length\
    \ = array.length\n  new_array = []\n  odd_sum = 0\n  even_sum = 0\n  odd_count\
    \ = 0\n  even_count = 0\n  for i in 0...length-1\n    if i == 0\n      new_array[i]\
    \ = array[i]\n      next\n    end\n    odd_sum += array[i]\n    even_sum += array[i\
    \ - 1]\n    if odd_sum % 2 != 0\n      new_array[i] = array[i - 1]\n      odd_count\
    \ += 1\n    else\n      new_array[i] = array[i]\n      even_count += 1\n    end\n\
    \  end\n  \n  if odd_count == length\n    new_array.sort! { |a, b| b <=> a }\n\
    \  else\n    new_array.sort! { |a, b| a <=> b }\n  end\n  \n  return new_array\n\
    end", "    array.sort.with_index {|x, i| i if x[0] + x[1] % 2 == 1 }\nend\n</code>\n\
    <|/ a tags=ruby,arrays |>\n<| c |>\nThanks but this is not what the question is\
    \ asking. He needs to sort the array, not the sum values\n<|/ c |>\n<| c |>\n\
    You are wrong. Because in the question, he is asking for two conditions, that\
    \ is the sum should be odd or even.\n<|/ c |>\n<| c |>\nyes, you are right. But\
    \ he also stated it in a comment to the question\n<|/ c |>\n<| c |>\nHis comment\
    \ is \"the given array is not allowed to be changed, only altered within this\
    \ method\". So I don't think he can change it to another array, he can only sort\
    \ the array. Because of that his question is not clear.\n<|/ c |>\n<| c |>\nThat\
    \ is indeed the case. I think he is using \"given array\" as a parameter name\
    \ to make the code shorter.\n<|/ c |>\n<| a tags=ruby,arrays |>\nYou can try the\
    \ following using ruby sort_by:\n<code>\na = [1, 2, 5, 6, 3, 7]\np a.sort_by {\
    \ |x| x.last.odd? ? -1 : 1 }", "    array.sort\nend", "    array = array.sort\n\
    \    sum = 0\n    odd_sum = 0\n    even_sum = 0\n    i = 0\n    j = 0\n    while(i\
    \ < array.length)\n        if(array[i] > array[i + 1])\n            odd_sum +=\
    \ array[i+1]\n            even_sum += array[i]\n            i +=1\n        else\n\
    \            sum+=array[i]\n            i+=1\n        if(i == array.length)\n\
    \            break\n    while(j < array.length)\n        if(array[j] > array[j\
    \ + 1])\n            odd_sum += array[j+1]\n            even_sum += array[j]\n\
    \            j +=1\n        else\n            sum+=array[j]\n            j+=1\n\
    \        if(j == array.length)\n            break\n    while(i < array.length)\n\
    \        while(j < array.length)\n            if(array[j] <= array[i])\n     \
    \           sum += array[j]\n                j += 1\n            else\n      \
    \          sum+=array[i]\n                i += 1\n            if(j == array.length)\n\
    \                break\n        while(j < array.length)\n            if(array[j]\
    \ > array[i])\n                sum+=array[j]\n                j += 1\n       \
    \     else\n                sum+=array[i]\n                i += 1\n          \
    \  break\n    while(j < array.length)\n        while(i < array.length)\n     \
    \       if(array[i] <= array[j])\n                sum += array[i]\n          \
    \      i += 1\n            else\n                sum+=array[j]\n             \
    \   j += 1\n            if(i == array.length)\n                break\n       \
    \ while(i < array.length)\n            if(array[i] > array[j])\n             \
    \   sum+=array[i]\n                i += 1\n            else\n                sum+=array[j]\n\
    \                j += 1\n            break\n    return sum if sum%2 != 0 else\
    \ -sum\nend\n</code>\n<|/ a tags=ruby dscore=1 |>\n<| c |>\nThank you for providing\
    \ the explanation. I will test this in my code and get back soon. :)\n<|/ c |>\n\
    <| c |>\nThis solution does give the same output as the one in the question. It\
    \ just swaps the order of the elements.\n<|/ c |>\n<| c |>\nI have just tested\
    \ it and it works. Thank you for pointing me towards the right direction.\n<|/\
    \ c |>\n<| a tags=ruby |>\nI would prefer this answer because it is more elegant,\
    \ shorter and more efficient. The following code swaps even and odd elements if\
    \ and only if sum is even (sum of last two elements is even). I added comments\
    \ to each step for clarity.\n<code>", "end\n</cell>\n<cell>", "    array.sort!\n\
    \    return array\nend\n</code>\nRuby Version\n<code>", "    array.sort!\n   \
    \ return array\nend", "  if array.length < 2\n    return array\n  array_size =\
    \ array.length\n  last_sum = array[0]\n  for i in 1...array_size\n    if last_sum\
    \ % 2 == 1\n      last_sum -= array[i]\n    else\n      last_sum += array[i]\n\
    \  end\n  \n  array = array.sort!\n  return array\nend", "\tarray = array.clone\n\
    \tarray.sort!\n\t\n\todd_sum = array[0] + array[array.length-1]\n\teven_sum =\
    \ array[0] - array[1]\n\t\n\tif odd_sum % 2 == 1\n\t\tarray.push(array.pop.pop)\n\
    \telsif even_sum % 2 == 0\n\t\tarray.push(array.pop.pop)\n\telse\n\t\treturn array\n\
    \tend\n\t\n\treturn array\nend", "  odd_sum = 0\n  even_sum = 0\n  even_index\
    \ = 0\n  odd_index = 0\n  \n  for i in array\n    even_index += i\n  end\n  even_index\
    \ += 1\n  \n  for i in array\n    odd_index += i\n  end\n  odd_index += 1\n  \n\
    \  if odd_index > even_index\n    odd_sum = odd_index - even_index\n    odd_array.unshift(odd_index)\n\
    \  elsif even_index > odd_index\n    even_sum = even_index - odd_index\n    even_array.unshift(even_index)\n\
    \  end\nend", "    array.sort!\n    array.map { |num| num.odd? ? num.to_i + 1\
    \ : num.to_i }.reverse\nend", "  return array.sort_by do |e|\n    (e % 2).zero?\
    \ ? 1 : -1\n  end\nend", "    array.reject!(&:zero?)\n    if array.sum % 2 ==\
    \ 0\n        array.reverse!\n    else\n        array.sort!\n    end\nend", " \
    \   array.sort\nend", "  new_array = []\n  array.each do |x|\n    i = array.index(x)\n\
    \    if i < 0 || i >= array.length\n      new_array << x\n      next\n    end",
  "  array.sort!\nend", "  array.sort.with_index { |e,i| [ (e < array[i-1]) ? -1 :\
    \ 1 , (e > array[i-1]) ? 1 : 0].max}\nend", '    array.sort', "  array.sort\n\
    \  array.sort!\nend", "    array.sort!\n    array.each_index do |i|\n        if\
    \ array[i] % 2 == 0\n            array[i], array[i+1] = array[i+1], array[i]\n\
    \        end\n    end\n    return array\nend\npp sort_array(arr1)\npp sort_array(arr2)\n\
    pp sort_array(arr3)\npp sort_array(arr4)\npp sort_array(arr5)\npp sort_array(arr6)\n\
    pp sort_array(arr7)\npp sort_array(arr8)\npp sort_array(arr9)\npp sort_array(arr10)",
  '  array.sort!', "  array.sort.reverse! if array.sort.sum % 2 == 0\n  array.sort\n\
    end", "\tsort = []\n\tsorted_index = 0\n\tsum = array[0]\n\tsort = array", " \
    \ array.sort!\n  return array\nend\nprint sort_array([9,1,4,7]) ", "  if array.empty?\n\
    \    array\n  elsif array.count == 1\n    [array]\n  else\n    # If the first\
    \ element of the array is odd, the sum must be odd.\n    if array.first % 2 >\
    \ 0\n      array = sort_array(array.drop(1)).concat(array.first)\n    else\n \
    \     array = sort_array(array.drop(1)).concat(array.last)\n    end\n  end\nend",
  "    # write code here\n    array.sort\nend\n</cell>\n<cell>", "  array.sort\nend\n\
    </cell>\n<cell>\narr = [2, 5, 1, 4, 3]\nsort_array(arr)\narr\n</cell>\n<cell>",
  "    array.sort do |x, y|\n        if x % 2 == 0 && y % 2 == 0\n            if x\
    \ < y\n                1\n            else\n                -1\n            end\n\
    \        else if x % 2 == 0 && y % 2 != 0\n            if y < x\n            \
    \    -1\n            else\n                1\n            end\n        else\n\
    \            if x < y\n                -1\n            else\n                1\n\
    \            end\n        end\n    end\n    array\nend", "    array.sort!\n  \
    \  array.each do |index|\n        if index[0] % 2 == 0\n            array[index[0]]\
    \ = index[1]\n        end\n        if index[-1] % 2 != 0\n            array[index[-1]]\
    \ = index[-2]\n        end\n    end\n    return array\nend", "  array.sort.reverse!\n\
    \  array.sort\nend", "  array.sort!\n  if array.length % 2 == 0 \n    array.each_with_index\
    \ { |x, i| array[i] = x < array[i + 1] ? x : x + array[i + 1] }\n  else\n    array.each_with_index\
    \ { |x, i| array[i] = x < array[i + 1] ? x + array[i + 1] : x }\n  end\n  array\n\
    end", "  sorted = array.dup\n  if sorted.length <= 1\n    return sorted\n  end\n\
    \  first = sorted[0]\n  last = sorted[sorted.length - 1]\n  if is_odd(first) and\
    \ is_odd(last)\n    sorted.sort! do |a, b|\n      a <=> b\n    end\n  else\n \
    \   sorted.reverse!\n  end\n  sorted\nend", "  array.sort!\nend", "  array.sort\
    \ { |a,b| b <=> a }\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
