name: HumanEval_124_valid_date
language: rb
prompt: "# You have to write a function which validates a given date string and\n\
  # returns True if the date is valid otherwise False.\n# The date is valid if all\
  \ of the following rules are satisfied:\n# 1. The date string is not empty.\n# 2.\
  \ The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12.\
  \ And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11.\
  \ And, the number of days is not less than 1 or higher than 29 for the month 2.\n\
  # 3. The months should not be less than 1 or higher than 12.\n# 4. The date should\
  \ be in the format: mm-dd-yyyy\ndef valid_date(date)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_valid_date\n\
  \    candidate = method(:valid_date)\n    assert_equal(true, candidate.call(\"03-11-2000\"\
  ))\n    assert_equal(false, candidate.call(\"15-01-2012\"))\n    assert_equal(false,\
  \ candidate.call(\"04-0-2040\"))\n    assert_equal(true, candidate.call(\"06-04-2020\"\
  ))\n    assert_equal(true, candidate.call(\"01-01-2007\"))\n    assert_equal(false,\
  \ candidate.call(\"03-32-2011\"))\n    assert_equal(false, candidate.call(\"\"))\n\
  \    assert_equal(false, candidate.call(\"04-31-3000\"))\n    assert_equal(true,\
  \ candidate.call(\"06-06-2005\"))\n    assert_equal(false, candidate.call(\"21-31-2000\"\
  ))\n    assert_equal(true, candidate.call(\"04-12-2003\"))\n    assert_equal(false,\
  \ candidate.call(\"04122003\"))\n    assert_equal(false, candidate.call(\"20030412\"\
  ))\n    assert_equal(false, candidate.call(\"2003-04\"))\n    assert_equal(false,\
  \ candidate.call(\"2003-04-12\"))\n    assert_equal(false, candidate.call(\"04-2003\"\
  ))\n  end\nend\n"
completions: ["  # Write your code here\n  valid = date != \"\"\n  valid = valid &&\
    \ date != nil\n  valid = valid && date.length == 2\n  valid = valid && date.split('-').length\
    \ == 3\n  valid = valid && (months_array.include?(date.split('-')[0]) || months_array.include?(date.split('-')[1])\
    \ || months_array.include?(date.split('-')[2]))\n  valid = valid && days_array.include?(date.split('-')[1].to_i)\
    \ && days_array.include?(date.split('-')[2].to_i)\n  valid = valid && days_array.include?(date.split('-')[0].to_i)\
    \ && days_array.include?(date.split('-')[1].to_i) && days_array.include?(date.split('-')[2].to_i)\n\
    \  valid = valid && months_array.include?(date.split('-')[0].to_i) && months_array.include?(date.split('-')[1].to_i)\
    \ && months_array.include?(date.split('-')[2].to_i)\n  valid = valid && days_array.include?(date.split('-')[0].to_i)\
    \ && days_array.include?(date.split('-')[1].to_i) && days_array.include?(date.split('-')[2].to_i)\n\
    \  return valid\nend", "  date_obj = Date.strptime(date, '%m-%d-%Y')\n  return\
    \ !date_obj.nil?\nend\n</code>\nThen you can call the method with input date:\n\
    <code>\nvalid_date('02-29-2012') # => false\nvalid_date('02-31-2012') # => true\n\
    valid_date('03-01-2012') # => true\nvalid_date('03-31-2012') # => true\nvalid_date('03-31-2012')\
    \ # => true\n</code>\n<|/ a tags=date,ruby,ruby-on-rails-4 |>\n<| c |>\nI agree.\
    \ This is a more elegant solution.\n<|/ c |>\n<| a dscore=2 |>\nYou can use Date.strptime:\n\
    <code>\ndate = Date.strptime('02-29-2012', '%m-%d-%Y')\n</code>\nThen you can\
    \ test the date with your conditions:\n<code>\ndate = Date.strptime('02-29-2012',\
    \ '%m-%d-%Y')\nputs date if date != nil && date.day == 29 && date.month == 2 &&\
    \ date.year == 2012\n</code>\n<|/ a tags=date,ruby,ruby-on-rails-4 |>\n<| c |>\n\
    It's a better idea to test `date != nil` rather than `!date.nil?`. In any case\
    \ it's also a better idea to test `date.nil?` than `date.nil?`.\n<|/ c |>\n<|\
    \ a dscore=2 tags=date,ruby,ruby-on-rails-4 |>\nThere are many ways to do this.\n\
    Date.parse is great for simple things like YYYY-MM-DD, but isn't great for more\
    \ complex rules. For example, what does this do:\n<code>\nDate.parse('January\
    \ 3rd, 2017')\n</code>\nIt returns 2017-01-03, and that doesn't tell you whether\
    \ it's valid or not.\nThere are many ways around this. My favourite is to validate\
    \ a date using Date.parse, like this:\n<code>", "  if date == nil or date.blank?\n\
    \    false\n  else\n    days_in_month = [nil, nil, nil, nil, nil, nil, nil, nil,\
    \ nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil,\
    \ nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil,\
    \ nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil,\
    \ nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil,\
    \ nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil,\
    \ nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil,\
    \ nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil,\
    \ nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil,\
    \ nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil,\
    \ nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil,\
    \ nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil,\
    \ nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil,\
    \ nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil,\
    \ nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil,\
    \ nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, n", " \
    \   date = date.split(\"-\")\n    month = date[0]\n    day = date[1]\n    year\
    \ = date[2]\n    \n    valid_day = True\n    month = [1,2,3,4,5,6,7,8,9,10,11,12]\n\
    \    month = [4,6,9,11]\n    month = month.index(month)\n    \n    valid_month\
    \ = True\n    day = [1,3,5,7,8,10,12]\n    day = [4,6,9,11]\n    day = day.index(day)\n\
    \    \n    valid_year = True\n    if (year[0] == \"0\"): \n        year = \"19\"\
    +year\n    if (year[-2:] == \"00\"): \n        year = \"20\"+year\n    if (year[-2:]\
    \ == \"01\"): \n        year = \"21\"+year\n    if (year[-2:] == \"02\"): \n \
    \       year = \"22\"+year\n    if (year[-2:] == \"03\"): \n        year = \"\
    23\"+year\n    if (year[-2:] == \"04\"): \n        year = \"24\"+year\n    if\
    \ (year[-2:] == \"05\"): \n        year = \"25\"+year\n    if (year[-2:] == \"\
    06\"): \n        year = \"26\"+year\n    if (year[-2:] == \"07\"): \n        year\
    \ = \"27\"+year\n    if (year[-2:] == \"08\"): \n        year = \"28\"+year\n\
    \    if (year[-2:] == \"09\"): \n        year = \"29\"+year\n    if (year[-2:]\
    \ == \"10\"): \n        year = \"30\"+year\n    if (year[-2:] == \"11\"): \n \
    \       year = \"31\"+year\n        \n    if (month > 12 or month < 1): \n   \
    \     valid_month = False\n    \n    if (day > 30 or day < 1 or day > 29 or day\
    \ < 1): \n        valid_day = False\n    \n    if (day > 30 or day < 1 or day\
    \ > 29 or day < 1): \n        valid_day = False\n    \n    if (month > 12 or month\
    \ < 1): \n        valid_month = False\n    \n    if (month > 12 or month < 1):\
    \ \n        valid_month = False\n    \n    if (day > 30 or day < 1 or day > 29\
    \ or day < 1): \n        valid_day = False\n    \n    if (month > 12 or month\
    \ < 1): \n        valid_month = False\n    \n    if (month > 12 or month < 1):\
    \ \n        valid_month = False\n    \n    if (day > 30 or day < 1 or day > 29\
    \ or day < 1): \n        valid_day = False\n        \n    if (day > 30 or day\
    \ < 1 or day > 29 or day < 1): \n        valid_day = False\n    ", "  # TODO:\
    \ Write the code to validate the date string\n  return true\nend", "  date = date.split('-')\n\
    \  return date.length > 1 && date.length <= 4 && date.to_s.length == 4 && Date.parse(date)\
    \ rescue false\nend", "  date_ok = true\n  month = date.split(\"-\")[0]\n  if\
    \ month.count(\"01\") < 1 ||\n      month.count(\"03\") < 1 ||\n      month.count(\"\
    05\") < 1 ||\n      month.count(\"07\") < 1 ||\n      month.count(\"08\") < 1\
    \ ||\n      month.count(\"10\") < 1 ||\n      month.count(\"12\") < 1\n    date_ok\
    \ = false\n  end\n  day = date.split(\"-\")[1].split(\"-\")[0]\n  if day.count(\"\
    01\") < 1 ||\n      day.count(\"02\") < 1 ||\n      day.count(\"03\") < 1 ||\n\
    \      day.count(\"04\") < 1 ||\n      day.count(\"06\") < 1 ||\n      day.count(\"\
    09\") < 1 ||\n      day.count(\"11\") < 1 ||\n      day.count(\"12\") < 1 ||\n\
    \      day.count(\"15\") < 1 ||\n      day.count(\"16\") < 1 ||\n      day.count(\"\
    17\") < 1 ||\n      day.count(\"18\") < 1 ||\n      day.count(\"19\") < 1 ||\n\
    \      day.count(\"20\") < 1 ||\n      day.count(\"21\") < 1 ||\n      day.count(\"\
    22\") < 1 ||\n      day.count(\"23\") < 1\n    date_ok = false\n  end\n  year\
    \ = date.split(\"-\")[2].split(\"-\")[0]\n  if year.count(\"00\") < 1 ||\n   \
    \   year.count(\"01\") < 1 ||\n      year.count(\"02\") < 1 ||\n      year.count(\"\
    03\") < 1 ||\n      year.count(\"04\") < 1 ||\n      year.count(\"05\") < 1 ||\n\
    \      year.count(\"06\") < 1 ||\n      year.count(\"07\") < 1 ||\n      year.count(\"\
    08\") < 1 ||\n      year.count(\"09\") < 1 ||\n      year.count(\"10\") < 1 ||\n\
    \      year.count(\"11\") < 1 ||\n      year.count(\"12\") < 1\n    date_ok =\
    \ false\n  end\n  return date_ok\nend", "  return !date.is_a?(String) || date.empty?\
    \ || valid_date(date[0]) || valid_date(date[2]) || valid_date(date[1]) || valid_date(date[3])\
    \ || valid_date(date[5]) || valid_date(date[7]) || valid_date(date[8]) || valid_date(date[10])\
    \ || valid_date(date[12])\nend", "    date.strip if date != \"\" &&\n    date.length\
    \ >= 5 &&\n    (date.split(\"-\")[0].split(\"/\").length == 3 ||\n     date.split(\"\
    -\")[0].split(\"/\").length == 2) &&\n    (date.split(\"-\")[1].split(\"/\").length\
    \ == 2 ||\n     date.split(\"-\")[1].split(\"/\").length == 3) &&\n    (date.split(\"\
    -\").length == 4 || date.split(\"-\").length == 7) &&\n    (date.split(\"/\").length\
    \ == 3 || date.split(\"/\").length == 7) &&\n    (date.split(\"-\").length ==\
    \ 3 || date.split(\"/\").length == 7) &&\n    (date.split(\"/\").length == 2 ||\
    \ date.split(\"/\").length == 7) &&\n    (date.split(\"-\").length == 2 || date.split(\"\
    -\").length == 7) &&\n    (date.split(\"/\").length == 2 || date.split(\"-\").length\
    \ == 7) &&\n    (date.split(\"-\").length == 2 || date.split(\"-\").length ==\
    \ 3)\nend", "  \n  \n  # Write your code here.\n  return date != nil and\n  (date.empty?\
    \ or \n  ((date.to_s.scan(/\\d/).length < 1 or \n  date.to_s.scan(/\\d/).length\
    \ > 31) or\n  ((date.to_s.scan(/\\d/).length < 1 or \n  date.to_s.scan(/\\d/).length\
    \ > 30) or\n  ((date.to_s.scan(/\\d/).length < 1 or \n  date.to_s.scan(/\\d/).length\
    \ > 29) or\n  ((date.to_s.scan(/\\d/).length < 1 or \n  date.to_s.scan(/\\d/).length\
    \ > 12)))) and\n  date.scan(/\\d{2}/).length >= 2 and \n  date.scan(/\\d{2}/).length\
    \ <= 4 and\n  date.scan(/\\d{4}/).length >= 4 and\n  date.scan(/\\d{4}/).length\
    \ <= 8\nend", "  if date.empty?\n    raise \"Date is invalid\"\n  end", "  date\
    \ = date.to_s\n  return !date.blank? && date =~ /^(\\d{1,2})-(\\d{1,2})-(\\d{4})$/\n\
    end", "  invalid_dates = []\n  return invalid_dates\nend", "    date_format =\
    \ /\\d{1,2}-\\d{1,2}-\\d{4}/\n    return date && date.match(date_format)\nend",
  "    date = date.strip\n    date = date[6..-1].split(//)\n    # Validate all conditions\n\
    \    return date != nil && date.count.even? && date.count.odd? && date.count.between?(1,\
    \ 31) && date.count.between?(1, 30) && date.count.between?(1, 29) && date.count.between?(1,\
    \ 12)\nend", "  date_string = date.to_s\n  if date_string.empty?\n    false\n\
    \  elsif date_string.count('-') != 2\n    false\n  else\n    if date_string.scan(/^\\\
    d{2}-\\d{2}-\\d{4}$/).length != 1\n      false\n    else\n      begin\n      \
    \  Date.strptime(date_string, '%m-%d-%Y')\n        true\n      rescue ArgumentError\n\
    \        false\n      end\n    end\n  end\nend", "  !date?.length?\n  date.split('-').count{\
    \ |element| element > 0 } == 2 && date.split('-').count{ |element| element < 12\
    \ && element > 0 } == 0 && date.split('-').count{ |element| element < 13 && element\
    \ > 12 } == 1 && date.split('-').count{ |element| element < 31 } == 0 && date.split('-').count{\
    \ |element| element < 30 } == 1 && date.split('-').count{ |element| element <\
    \ 29 } == 0\nend", "  # TODO: Write code here\n  date !=\"\"\n  date.count('-')\
    \ > 1\n  date.count(' ') >= 2\n  date.split('-').count('01') > 1\n  date.split('-').count('12')\
    \ > 1\n  date.split('-').count('30') > 1\n  date.split('-').count('29') > 1\n\
    \  date.split('-').count('31') > 1\nend", "  return date && (!date.empty? && (Date.parse(date).class\
    \ == Date) && (Date.parse(date).to_i < (1..31) ? (1..31).include?(Date.parse(date).month)\
    \ && (Date.parse(date).to_i < (1..31)).include?(Date.parse(date).day) && (Date.parse(date).to_i\
    \ < (1..30) ? (1..30).include?(Date.parse(date).month) && (Date.parse(date).to_i\
    \ < (1..30)).include?(Date.parse(date).day) ? (1..29).include?(Date.parse(date).month)\
    \ : true) : ((Date.parse(date).to_i < (1..12) ? (1..12).include?(Date.parse(date).month)\
    \ : true) ? (4..11).include?(Date.parse(date).month) : true) ? (2..12).include?(Date.parse(date).month)\
    \ : true) : false))\nend\n</code>\n<|/ a tags=ruby,date,validation dscore=2 |>\n\
    <| c |>\nThe month validation does not work. month < 1 || month > 12 is false\
    \ for month 1\n<|/ c |>\n<| a dscore=2 |>\nThis is a very old question but I came\
    \ across this one while searching for a solution that would allow me to verify\
    \ any date in any format that the user may input, including non-standard date\
    \ formats.\nSince I'm dealing with a legacy project that does this validation\
    \ by hand, here's a solution for those of us who have to support older versions\
    \ of Ruby.\n<code>\nrequire 'date'", "  valid_date_array = date.split('-')\n \
    \ if valid_date_array.length > 0\n    return true\n  else\n    return false\n\
    \  end\nend", "  return true if date && date !=\"\" && date != \"Invalid date\"\
    \nend\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThank you so much for helping out\
    \ a newbie like me. I would like to understand what you are saying in step 1 where\
    \ you said \"Make sure the date is an array and not a string. If it is just use\
    \ Date.parse(date) instead.\"\n<|/ c |>\n<| c |>\nIn Javascript an array is a\
    \ collection of elements. If you do `['1', '2', '3'].join('')` you will get `123`.\
    \ To get the array back you do `['1', '2', '3'].join()` which will return `'123'`.\n\
    <|/ c |>\n<| c |>\nIn Python you can do `['1', '2', '3'].join('')` and it will\
    \ return `'123'`. This is because `str.join()` returns a `str`. If you pass it\
    \ an iterable (for example an array) then it `join()` the elements in that iterable\
    \ with an empty string `''`\n<|/ c |>\n<| c |>\nJust a quick clarification: I\
    \ haven't written this in Ruby, but I suspect it will work in either language.\
    \ I just like Ruby better and was able to translate it to Python. I think it is\
    \ clearer that way.\n<|/ c |>\n<| c |>\nThank you so much for the explanation.\
    \ I also got it to work and understand how it works. I appreciate it a lot.\n\
    <|/ c |>\n<| a |>\nI wrote this in Ruby to show you how I would approach the problem.\
    \ It might be a little long, so I will explain each part first, and then point\
    \ you to the right direction for your solution:\nThe first step would be to break\
    \ down your logic into smaller chunks. \nWhat do you want to do with the date?\n\
    What do you want to do with the day and month?\nWhat do you want to do with the\
    \ year?\nWhat do you want to do with invalid dates?\nAfter you break down each\
    \ piece you will end up with a collection of functions that you use to validate\
    \ your data.\nLet's start with how to get a list of months and days:\n<code>",
  "    # Write your code here\n    raise NotImplementedError()\nend", "  \n  # If\
    \ the date is not empty then proceed.\n  if date != ''\n  \n    # Split the date\
    \ into day, month, and year\n    day, month, year = date.split('-')\n  \n    #\
    \ Calculate the number of days\n    number_of_days = ((31**2 - 29**2 - 28**2)\
    \ * (month - 1)) + day + 1\n  \n    # If the number of days is less than one or\
    \ greater than 31 then return False\n    if (number_of_days < 1 or number_of_days\
    \ > 31)\n      return false\n  \n    # If the number of days is less than one\
    \ or greater than 29 then return False\n    if (number_of_days < 1 or number_of_days\
    \ > 29)\n      return false\n  \n    # If the number of days is less than one\
    \ or greater than 28 then return False\n    if (number_of_days < 1 or number_of_days\
    \ > 28)\n      return false\n  \n    # If the month is not between 1 and 12 then\
    \ return False\n    if (month < 1 or month > 12)\n      return false\n  \n   \
    \ # If the day is not between 1 and number_of_days then return False\n    if (day\
    \ < 1 or day > number_of_days)\n      return false\n  end\n  \n  # If the date\
    \ is valid then return true\n  return true\nend", "  \n  # Write your code below\n\
    \  \n  return true\nend", "  # Your code here\nend\n</cell>\n<cell>\nassert(valid_date('2019-01-25'))\
    \ # Non-leap year\nassert(not valid_date('2019-02-25')) # Leap year\nassert(not\
    \ valid_date('2019-02-28')) # 29th February is not in valid format\nassert(not\
    \ valid_date('2019-03-31')) # 31st March is not in valid format\nassert(not valid_date('2019-05-01'))\
    \ # 1st May is not in valid format\nassert(not valid_date('2019-06-01')) # 1st\
    \ June is not in valid format\nassert(not valid_date('2019-07-31')) # 31st July\
    \ is not in valid format\nassert(not valid_date('2019-08-31')) # 31st August is\
    \ not in valid format\nassert(not valid_date('2019-10-31')) # 31st Oct is not\
    \ in valid format\nassert(not valid_date('2019-11-30')) # 30th Nov is not in valid\
    \ format\nassert(not valid_date('2019-12-31')) # 31st Dec is not in valid format\n\
    assert(not valid_date('2020-02-29')) # 29th February is not in valid format\n\
    assert(not valid_date('2020-03-31')) # 31st March is not in valid format\nassert(not\
    \ valid_date('2020-05-01')) # 1st May is not in valid format\nassert(not valid_date('2020-06-01'))\
    \ # 1st June is not in valid format\nassert(not valid_date('2020-07-31')) # 31st\
    \ July is not in valid format\nassert(not valid_date('2020-08-31')) # 31st August\
    \ is not in valid format\nassert(not valid_date('2020-10-31')) # 31st Oct is not\
    \ in valid format\nassert(not valid_date('2020-11-30')) # 30th Nov is not in valid\
    \ format\nassert(not valid_date('2020-12-31')) # 31st Dec is not in valid format\n\
    assert(not valid_date('2021-02-29')) # 29th February is not in valid format\n\
    assert(not valid_date('2021-03-31')) # 31st March is not in valid format\nassert(not\
    \ valid_date('2021-05-01')) # 1st May is not in valid format\nassert(not valid_date('2021-06-01'))\
    \ # 1st June is not in valid format\nassert(not valid_date('2021-07-31')) # 31st\
    \ July is not in valid format\nassert(not valid_date('2021-08-31')) # 31st August\
    \ is not in valid format\nassert(not valid_date('2021-10-31')) # 31st Oct is not\
    \ in valid format\n", "  date = date.split(\"-\")\n  if date.size == 1\n    return\
    \ false\n  month = date[0].to_i\n  day = date[1].to_i\n  year = date[2].to_i\n\
    \  daysInMonth = getDaysInMonth(month, year)\n  return month >= 1 and month <=\
    \ 12 and day >= 1 and day <= daysInMonth and year >= 1900\nend", "  valid_dates\
    \ = true\n  return valid_dates\nend", "  date =~ /^\\d\\d-\\d\\d-\\d\\d$/\n  !$~\
    \ && raise ArgumentError, \"Invalid Date String\"\n  date_array = date.split('-')\n\
    \  date_array[1][0].to_i <1 || date_array[1][0].to_i > 12 &&\n    raise ArgumentError,\
    \ \"Invalid Date\"\n  date_array[2][0].to_i <1 || date_array[2][0].to_i > 31 &&\n\
    \    raise ArgumentError, \"Invalid Date\"\n  date_array[3][0].to_i <1 || date_array[3][0].to_i\
    \ > 30 &&\n    raise ArgumentError, \"Invalid Date\"\n  date_array[4][0].to_i\
    \ <1 || date_array[4][0].to_i > 29 &&\n    raise ArgumentError, \"Invalid Date\"\
    \n  return true\nend\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks so much for\
    \ taking the time to write this!  I implemented your suggestions and I'm getting\
    \ an ArgumentError.  I've updated my original question with my new code.  It seems\
    \ like the dates are formatted incorrectly, but I'm not sure why.\n<|/ c |>\n\
    <| c |>\n: I updated my answer. I missed something with your Regex. It works now.\n\
    <|/ c |>\n<| c |>\nThanks again!  I'm getting a `TypeError: String can't be coerced\
    \ into Integer` now.  I'm getting this error on `date_array[1][0].to_i <1 || date_array[1][0].to_i\
    \ > 12 &&\n    raise ArgumentError, \"Invalid Date\"`\n<|/ c |>\n<| c |>\n: My\
    \ apologies, I missed an array. I updated my answer. Should work now.\n<|/ c |>\n\
    <| c |>\n: Thanks for your feedback. It seems like that exception is raised when\
    \ an invalid month is entered. I am not sure how this could be solved. I am now\
    \ trying to work it out myself.\n<|/ c |>\n<| a |>\nHere's my version of valid_date\n\
    <code>", "  if date == nil or date == ''\n    return false\n  elsif date.split('-').size\
    \ == 3\n    if Date.valid_day(date.split('-').first.to_i) and Date.valid_month(date.split('-').last.to_i)\n\
    \      true\n    else\n      return false\n    end\n  else\n    return false\n\
    \  end\nend", "  date = date.split(\"-\")\n  if date.length == 3\n    if Date.valid_month?(date[0])\
    \ && Date.valid_day?(date[1])\n      if Date.valid_year?(date[2])\n        return\
    \ true\n      end\n    end\n  end\n  return false\nend", "  puts \"Validating\
    \ date..\"\n  date_array = date.split('-')\n  valid_date = true\n  if date_array.length\
    \ == 3\n    months = date_array[0].to_i\n    days = date_array[1].to_i\n    year\
    \ = date_array[2].to_i\n    \n    if months > 12 or months < 1\n      puts \"\
    Invalid month\"\n      valid_date = false\n    end\n    \n    if days > 31 or\
    \ days < 1\n      puts \"Invalid day\"\n      valid_date = false\n    end\n  \
    \  \n    if months == 1 and days > 29\n      puts \"Invalid day\"\n      valid_date\
    \ = false\n    end\n    \n    if months == 2 and days > 28\n      puts \"Invalid\
    \ day\"\n      valid_date = false\n    end\n    \n    if year > 9999 or year <\
    \ 1900\n      puts \"Invalid year\"\n      valid_date = false\n    end\n  end\n\
    \  return valid_date\nend", "  if !date.empty?\n    date = date.split(' ')\n \
    \   if date.size == 3\n      days_in_month = [31,28,31,30,31,30,31,30,31,30]\n\
    \      days_in_month.select { |m| m==date[0].to_i }\n      days_in_month.select\
    \ { |m| m==date[1].to_i }\n      days_in_month.select { |m| m==date[2].to_i }\n\
    \      if !(date[1]<=12 || date[0]<=1 || days_in_month.include?(date[2].to_i))\
    \ || !(date[2]<=12 || days_in_month.include?(date[1].to_i))\n        false\n \
    \     else\n        true\n      end\n    elsif date.size == 4\n      days_in_month\
    \ = [31,30,31,30,31,30,31,30,31]\n      days_in_month.select { |m| m==date[0].to_i\
    \ }\n      days_in_month.select { |m| m==date[1].to_i }\n      days_in_month.select\
    \ { |m| m==date[2].to_i }\n      days_in_month.select { |m| m==date[3].to_i }\n\
    \      if !(date[1]<=12 || date[0]<=1 || days_in_month.include?(date[2].to_i)\
    \ || days_in_month.include?(date[3].to_i)) || !(date[2]<=12 || days_in_month.include?(date[1].to_i)\
    \ || days_in_month.include?(date[3].to_i))\n        false\n      else\n      \
    \  true\n      end\n    elsif date.size == 2\n      days_in_month = [31,30]\n\
    \      days_in_month.select { |m| m==date[0].to_i }\n      days_in_month.select\
    \ { |m| m==date[1].to_i }\n      if !(date[1]<=12 || days_in_month.include?(date[0].to_i)\
    \ || days_in_month.include?(date[1].to_i))\n        false\n      else\n      \
    \  true\n      end\n    else\n      false\n    end\n  else\n    false\n  end\n\
    end", "  date = \"#{date}\"\n  valid_date = true\n  unless date.empty?\n    if\
    \ !(date.valid_date?)\n      valid_date = false\n    end\n    if !(1 <= date.split(\"\
    -\").count.to_i && date.split(\"-\").count <= 31)\n      valid_date = false\n\
    \    end\n    if !(1 <= date.split(\"-\").count.to_i && date.split(\"-\").count\
    \ <= 30)\n      valid_date = false\n    end\n    if !(1 <= date.split(\"-\").count.to_i\
    \ && date.split(\"-\").count <= 29)\n      valid_date = false\n    end\n    if\
    \ !(1 <= date.split(\"-\").count.to_i && date.split(\"-\").count <= 12)\n    \
    \  valid_date = false\n    end\n  end\n  valid_date\nend", "  if date == nil\n\
    \    return nil\n  end", "  \n  # Write your code below!\n  \n  valid = false\
    \ \n  \n  if date != ''\n    \n    day = date.split('-')[0]\n    month = date.split('-')[1]\n\
    \    year = date.split('-')[2]\n    \n    if (day.length <1 or day.length > 2)\
    \ \n      valid = false\n      \n    if (month.length <1 or month.length > 12)\n\
    \      valid = false\n    \n    if (month == 2 && day.length > 29)\n      valid\
    \ = false\n    \n    if (month < 1 or month > 12)\n      valid = false\n    \n\
    \    valid = true\n    \n  end \n  return valid\nend\n</cell>\n<cell>\nassert(valid_date('13-31-2020')\
    \ == true)\nassert(valid_date('29-31-2020') == false)\nassert(valid_date('01-31-2020')\
    \ == false)\nassert(valid_date('02-29-2020') == true)\n</cell>\n<cell>", "   \
    \ valid_date_string=(!date.empty? &&\n    !((date.length.eql?(1) &&\n    (day<=1\
    \ &&\n    day>=31)) ||\n    (date.length.eql?(2) &&\n    (day<=31 &&\n    day>=30))\
    \ ||\n    (date.length.eql?(3) &&\n    (month<=12 &&\n    month>=1))) &&\n   \
    \ (date.match(/^(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])-\\d{4}$/))\nend\n</code>\n\
    This code can be made more concise using the ternary operators, but I left it\
    \ this way for clarity.\n<|/ a dscore=0 |>\n<| c |>\nThis helped me. Thank you\
    \ so much!\n<|/ c |>\n<| c |>\nHow would you validate that date in Ruby?\n<|/\
    \ c |>\n<| c |>\nI wouldn't. It's not as easy to read as Ruby, but it's probably\
    \ a lot easier to understand.\n<|/ c |>\n<| c |>\nI've added my solution to validate\
    \ the date in the format `mm-dd-yyyy`, but I would recommend using a `Date` object\
    \ in the first place.\n<|/ c |>\n<| a dscore=0 |>\nHere is my solution to validate\
    \ date in format mm-dd-yyyy:\n<code>", "  date = (date || \"\").to_s\n  errors\
    \ = []\n  day_array = [\"01\",\"02\",\"03\",\"04\",\"05\",\"06\",\"07\",\"08\"\
    ,\"09\",\"10\",\"11\",\"12\"]\n  month_array = [\"01\",\"02\",\"03\",\"04\",\"\
    05\",\"06\",\"07\",\"08\",\"09\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"\
    16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"22\",\"23\",\"24\",\"25\",\"26\",\"\
    27\",\"28\",\"29\",\"30\",\"31\"]\n  \n  split_date = date.split(\"-\")\n  \n\
    \  # Validate date is not empty\n  if split_date.size != 3\n    errors.push([\"\
    The date string is not empty.\"])\n    return errors\n  \n  # Validate day\n \
    \ day_count = split_date[0].to_i\n  \n  if day_count < 1 or day_count > 31\n \
    \   errors.push([\"The number of days is not valid. Days should be between 1 and\
    \ 31.\"])\n    return errors\n  \n  # Validate month\n  month_count = split_date[1].to_i\n\
    \  \n  if month_count < 1 or month_count > 12\n    errors.push([\"The number of\
    \ months are not valid. Months should be between 1 and 12.\"])\n    return errors\n\
    \  \n  # Validate date\n  split_date = date.split(\"-\")\n  \n  mm = split_date[0].to_i\n\
    \  dd = split_date[1].to_i\n  yyyy = split_date[2].to_i\n  \n  if mm < 1 or mm\
    \ > 12\n    errors.push([\"The month should be between 1 and 12.\"])\n    return\
    \ errors\n  \n  if dd < 1 or dd > 31\n    errors.push([\"The date should be between\
    \ 1 and 31.\"])\n    return errors\n  \n  if yyyy < 1900 or yyyy > 2099\n    errors.push([\"\
    The date should be in the format: mm-dd-yyyy\"])\n    return errors\n  \n  return\
    \ errors\nend", "  #Your code here\nend", "  date_valid = date.length > 0\n  date_invalid_1\
    \ = date_valid?\n  days_invalid = (days_count < 1) || (days_count > 31)\n  date_invalid_2\
    \ = days_invalid?\n  month_invalid = (month_count < 1) || (month_count > 12)\n\
    \  date_invalid_3 = month_invalid?\n  date_valid_1 = date_invalid_1 || date_invalid_2\
    \ || date_invalid_3\n  return date_valid_1\nend\n</code>\nThen your loop can just\
    \ be:\n<code>\nwhile days_count > 0\n  days_count -= 1\n  puts days_count\n  if\
    \ valid_date(date_entered)\n    puts 'Your date has been entered successfully.'\n\
    \    break\n  end\nend\n</code>\nIf valid_date returns true, then you know that\
    \ the date entered is valid.\n<|/ a tags=ruby,loops |>\n<| c |>\nThank you for\
    \ your help. I have now fixed the date validation and the loop. I can't believe\
    \ I didn't think of that. Thanks again for your help.\n<|/ c |>\n<| c |>\nIf you\
    \ don't want to do validation for an empty string then you can skip the final\
    \ test for `date_valid?` and just do a `break` as long as `days_count` > 0\n<|/\
    \ c |>\n<| a |>\nYou can get rid of all the if-statements by putting the input\
    \ into a DateTime, which will give you the ability to check each part of your\
    \ date using DateTime#days and DateTime#month.\n<code>\nrequire 'date'", "  return\
    \ date != '' && date.count('-') == 2 &&\n         !(date.count('-') == 0 && date.count(':')\
    \ == 0) &&\n         date.count('-') >= 1 && date.count('-') <= 3 &&\n       \
    \  date.count(':') == 2 && date.count(':') == 1 &&\n         date.count(':') ==\
    \ 1 && date.count(':') == 1 &&\n         date.count('-') <= 12 && date.count('-')\
    \ >= 1 &&\n         date.count('-') <= 3 && date.count(':') == 2 &&\n        \
    \ date.count(':') == 1 && date.count(':') == 1 &&\n         date.count('-') <=\
    \ 12 && date.count('-') >= 1 &&\n         date.count('-') <= 3 && date.count(':')\
    \ == 2 && date.count('-') == 1;\nend", "  raise NotImplementedError, \"Submission\
    \ not yet written.\"\nend", "  # Write your code here\n  return true\nend", " \
    \   # Write your code here\n    \n    # return True if date is valid\n    \n \
    \   # return False if date is invalid\n    \n    # date = \"03-04-2020\"\n   \
    \ # date = \"03-29-2020\"\n    # date = \"02-29-2020\"\n    # date = \"12-29-2020\"\
    \n    # date = \"02-29-2020\"\n    # date = \"29-29-2020\"\n    # date = \"29-29-2020\"\
    \n    # date = \"29-29-2020\"\n    # date = \"29-29-2020\"\n    # date = \"29-29-2020\"\
    \n    # date = \"29-29-2020\"\n    # date = \"29-29-2020\"\n    # date = \"29-29-2020\"\
    \n    # date = \"29-29-2020\"\n    # date = \"29-29-2020\"\n    # date = \"29-29-2020\"\
    \n    # date = \"29-29-2020\"\n    # date = \"29-29-2020\"\n    # date = \"29-29-2020\"\
    \n    # date = \"29-29-2020\"\n    # date = \"29-29-2020\"\n    # date = \"29-29-2020\"\
    \n    # date = \"29-29-2020\"\n    # date = \"29-29-2020\"\n    # date = \"29-29-2020\"\
    \n    # date = \"29-29-2020\"\n    # date = \"29-29-2020\"\n    # date = \"29-29-2020\"\
    \n    # date = \"29-29-2020\"\n    # date = \"29-29-2020\"\n    # date = \"29-29-2020\"\
    \n    # date = \"29-29-2020\"\n    # date = \"29-29-2020\"\n    # date = \"29-29-2020\"\
    \n    # date = \"29-29-2020\"\n    # date = \"29-29-2020\"\n    # date = \"29-29-2020\"\
    \n    # date = \"29-29-2020\"\n    # date = \"29-29-2020\"\n    # date = \"29-29-2020\"\
    \n    # date = \"29-29-2020\"\n    # date = \"29-29-2020\"\n    # date = \"29-29-2020\"\
    \n    # date = \"29-29-2020\"\n    # date = \"29-29-2020\"\n    # date = \"29-29-2020\"\
    \n    # date = \"29-29-2020\"\n    # date = \"29-29-2020\"\n    # date = \"29-29-2020\"",
  '  date_object = Date.parse(date)', "  # Write your code here\n  if date == \"\"\
    \n    puts \"Please enter a valid date string\"\n    exit\n  elsif (date < \"\
    01-01-2000\" || date > \"31-12-2000\")\n    puts \"Please enter a date in the\
    \ format: mm-dd-yyyy\"\n    exit\n  elsif date =~ /^(0[1-9]|1[0-2])\\/(0[1-9]|1\\\
    d|2\\d|3[01])\\/(19\\d{2}|20[01]\\d|20[13-9])$/\n    return true\n  else\n   \
    \ return false\n  end\nend", "    puts \"date is not valid\" if date.empty?\n\
    \    date.to_s.split('-').count{ |date_string| date_string =~ /^\\d{1,}\\-\\d{1,2}\\\
    -\\d{4}/ }\n    Date.strptime(\"12-12-2014\", \"%m-%d-%Y\")\nend", "  date_regex\
    \ = /^(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])-([0-9]{4})$/\n  return date_regex.match(date)\
    \ != nil\nend", "  date.strip !=\"\"\n  m=Date.new(date.split('-').map(&:to_i))\n\
    \  m\n  return true if m.year>=1995 and m.year<=2100 and m.month>=1  and m.month<=12\
    \ and m.day>=1  and m.day<=31\n  return true if m.year>=2004 and m.year<=2100\
    \ and m.month>=1  and m.month<=12 and m.day>=1  and m.day<=30\n  return true if\
    \ m.year>=2005 and m.year<=2100 and m.month>=1  and m.month<=12 and m.day>=1 \
    \ and m.day<=29\n  return false\nend", "  result = true\n  date ||= nil\n  if(date.empty?)\n\
    \    false\n  else\n    date_parts = date.split('-')\n    if(date_parts.length\
    \ != 3)\n      false\n    else\n      # Validate date for month\n      if(date_parts[0].to_i\
    \ > 12)\n        false\n      else\n        if(date_parts[0].to_i < 1 || date_parts[0].to_i\
    \ > 12)\n          false\n        else\n          # Validate date for day\n  \
    \        if(date_parts[1].to_i > 31)\n            false\n          else\n    \
    \        if(date_parts[1].to_i < 1 || date_parts[1].to_i > 30)\n             \
    \ false\n            else\n              # Validate date for year\n          \
    \    if(date_parts[2].to_i > 29)\n                false\n              else\n\
    \                true\n              end\n            end\n          end\n   \
    \     end\n      end\n    end\n  end\nend", "  \n  # Write your code here\n  date_regex\
    \ = /^(0[1-9]|[12][0-9]|3[01])(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])(0[1-9]|[12][0-9]|3[01])$/\n\
    \  return !!date.match(date_regex)\nend\n</cell>\n<cell>", "  # Write your code\
    \ here\n  return true\nend", "    date_array = date.split(\"-\")\n    month =\
    \ date_array[0].capitalize()\n    day = int(date_array[1])\n    year = int(date_array[2])\n\
    \    if month == \"JANUARY\":\n        month = 1\n    elif month == \"FEBRUARY\"\
    :\n        month = 2\n    elif month == \"MARCH\":\n        month = 3\n    elif\
    \ month == \"APRIL\":\n        month = 4\n    elif month == \"MAY\":\n       \
    \ month = 5\n    elif month == \"JUNE\":\n        month = 6\n    elif month ==\
    \ \"JULY\":\n        month = 7\n    elif month == \"AUGUST\":\n        month =\
    \ 8\n    elif month == \"SEPTEMBER\":\n        month = 9\n    elif month == \"\
    OCTOBER\":\n        month = 10\n    elif month == \"NOVEMBER\":\n        month\
    \ = 11\n    elif month == \"DECEMBER\":\n        month = 12\n    if day < 1 or\
    \ day > 31:\n        return False\n    if day < 1 or day > 30:\n        return\
    \ False\n    if month < 1 or month > 12:\n        return False\n    if year <\
    \ 1990 or year > datetime.datetime.now().year + 1:\n        return False\n   \
    \ return True\n</cell>\n<cell>", "    # Write your code here.\n    valid_date\
    \ = False\n    if not date:\n        print(\"The date should not be empty.\")\n\
    \    elif (date.count('-') != 2) or (date.count(' ') < 1) or (date.count(' ')\
    \ > 2):\n        print(\"The date should be in the format: mm-dd-yyyy\")\n   \
    \ elif (date.count('-')==2) and (date.count('-')<12):\n        print(\"The number\
    \ of months is not less than 1 or higher than 12.\")\n    elif (date.count('-')==2)\
    \ and (date.count('-')>12):\n        print(\"The number of months are not less\
    \ than 1 or higher than 12.\")\n    else:\n        day,month,year= date.split('-')\n\
    \        try:\n            day = int(day)\n        except ValueError:\n      \
    \      print(\"Day should be an integer\")\n        try:\n            month =\
    \ int(month)\n        except ValueError:\n            print(\"Month should be\
    \ an integer\")\n        try:\n            year = int(year)\n        except ValueError:\n\
    \            print(\"Year should be an integer\")\n        if ((month<1) or (month>12))\
    \ or ((day<1) or (day>31)):\n            print(\"Invalid date\")\n        else:\n\
    \            valid_date = True\n    return valid_date", "  if date.length < 1\
    \ || date.length > 10\n    return False\n  month = date.split(/\\-/)\n  if month.length\
    \ < 3\n    return False\n  if month.length < 1 || month.length > 12\n    return\
    \ False\n  if month[0].length < 1 || month[0].length > 2\n    return False\n \
    \ if month[1].length < 1 || month[1].length > 2\n    return False\n  if month[2].length\
    \ < 1 || month[2].length > 10\n    return False\n  return true\nend", "  date=date.split(\"\
    -\")\n  if date.length==3\n    month=date[1]\n    if month.length==1\n      if\
    \ month.include?(\"0\")\n        year=date[0]\n      else\n        year=date[0]+\"\
    -\"+month+\"-01\"\n      end\n    else\n      year=date[0]\n    end\n  else\n\
    \    year=date[0]\n  end\n  day=date[2]\n  return !(!date.nil? && !day.nil? &&\
    \ !year.nil?)\nend", "  # TODO: Write your code here\n  return true\nend", " \
    \  \n   day = int(date[-3:])\n   month = int(date[:2])\n   year = int(date[4:9])\n\
    \   \n   valid_date = day<1 and month<1 and year<1\n   \n   if month==1 or month==3\
    \ or month==5 or month==7 or month==8 or month==10 or  month==12:\n   \tvalid_date\
    \ = valid_date and day >0 and day <32\n   elif month==4 or month==6 or month==9\
    \ or month==11:\n   \tvalid_date = valid_date and day >0 and day <30\n   elif\
    \ month==2:\n   \tvalid_date = valid_date and day >0 and day <29\n   \n   return\
    \ valid_date\n \n ", "  date = date.to_s\n  return !date.empty? && Date.valid_date(date)\
    \ && Date.valid_date(date.split('-')[1]) && Date.valid_date(date.split('-')[0])\
    \ && Date.valid_date(date.split('-')[0]) && Date.valid_date(date.split('-')[1])\
    \ && Date.valid_date(date.split('-')[2]) && Date.valid_date(date.split('-')[3])\
    \ && Date.valid_date(date.split('-')[4]) && Date.valid_date(date.split('-')[5])\
    \ && Date.valid_date(date.split('-')[6]) && Date.valid_date(date.split('-')[7])\
    \ && Date.valid_date(date.split('-')[8]) && Date.valid_date(date.split('-')[9])\
    \ && Date.valid_date(date.split('-')[10]) && Date.valid_date(date.split('-')[11])\
    \ && Date.valid_date(date.split('-')[12])\nend\n</code>\n<|/ a dscore=2 |>\n<|\
    \ a |>\n<code>", "    days = 0\n    month = 0\n    year = date[-4..-1]\n    month_numbers\
    \ = [\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\"\
    ]\n    month_days = [\"31\",\"28\",\"31\",\"30\",\"31\",\"30\",\"31\",\"31\",\"\
    30\",\"31\",\"30\",\"31\"]\n    month_names = [\"Jan\",\"Feb\",\"Mar\",\"Apr\"\
    ,\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"]\n    \n    if\
    \ (date != \"\" && days > 0 && days < 31 &&\n        month > 0 && month < 12 &&\
    \ month != 2 && month !=3 && month !=4 &&\n        month != 5 && month != 6 &&\
    \ month != 7 && month != 8 && month != 9 &&\n        month != 10 && month != 11\
    \ && month != 12)\n        \n        date_array = date.split(\"-\")\n        days\
    \ = date_array[1]\n        month = date_array[0]\n        year = date_array[-4..-1]\n\
    \        days_month = days + month_days[month.to_i-1]\n        \n        if (year.length\
    \ != 4 && year.length != 6 && year.length != 8 &&\n            year.length !=\
    \ 10 && year.length != 12 && year.length != 14)\n            \n            days\
    \ = 0\n            month = 0\n            year = date[-4..-1]\n            month_numbers\
    \ = [\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\"\
    ]\n            month_days = [\"31\",\"28\",\"31\",\"30\",\"31\",\"30\",\"31\"\
    ,\"31\",\"30\",\"31\",\"30\",\"31\"]\n            month_names = [\"Jan\",\"Feb\"\
    ,\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"\
    ]\n        \n        if (month > 12 || month < 1 || days > month_days[month.to_i-1]\
    \ ||\n            month_names[month.to_i-1] != month_names[month.to_i])\n    \
    \        \n            days = 0\n            month = 0\n            year = date[-4..-1]\n\
    \            month_numbers = [\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\"\
    ,\"9\",\"10\",\"11\",\"12\"]\n            month_days = [\"31\",\"28\",\"31\",\"\
    30\",\"31\",\"30\",\"31\",\"31\",\"30\",\"31\",\"30\",\"31\"]\n            month_names\
    \ = [\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"\
    Oct\",\"Nov\",\"Dec\"]\n        \n        if (year.length != 4 && year", "  date\
    \ = date.to_s\n  days_in_month = [nil,31,28,31,30,31,30,31,31,30,31,30,31]\n \
    \ months_in_year = [nil,12,1,4,12,4,12,4,12,4,12]\n  day = date.split('-')[0].to_i\n\
    \  month = date.split('-')[1].to_i\n  year = date.split('-')[2].to_i\n  if !date\
    \ || day.nil? || month.nil? || year.nil?\n    return false\n  end\n  days_in_month.include?\
    \ day &&\n  months_in_year.include? month &&\n  year >= 1 && year <= 12\nend",
  "    Date.valid_date?(date)\nend", "  \n  date_regex = /([0-2][0-9]|(3)[0-1])-([0-2][0-9]|(3)[0-3])-([0-9]{4})/\n\
    \  \n  if date == nil\n      return false\n  elsif date == ''\n      return false\n\
    \  end\n  if date.match(date_regex) == nil\n      return false\n  end\n  \n  days_regex\
    \ = /(1|[3-5]\\d|7|8|10|12)\\s?(days|d|day|ds)/g\n  months_regex = /(1|2|3|4|5|6|7|8|9)\\\
    s?(month|mo|mos)/g\n  \n  if date.match(days_regex) == nil\n      return false\n\
    \  end\n  if date.match(months_regex) == nil\n      return false\n  end\n  \n\
    \  days_regex = /^(1|[3-5]\\d|7|8|10|12)\\s?(days|d|day|ds)$/g\n  months_regex\
    \ = /^(1|2|3|4|5|6|7|8|9)\\s?(month|mo|mos)$/g\n  \n  begin\n    if date != ''\
    \ && date.match(days_regex)\n        days_number = date.match(days_regex)[1].to_i\n\
    \        if days_number < 1 || days_number > 31\n          return false\n    \
    \    end\n    end\n    if date != '' && date.match(months_regex)\n        months_number\
    \ = date.match(months_regex)[1].to_i\n        if months_number < 1 || months_number\
    \ > 12\n          return false\n        end\n    end\n  \n  rescue\n    return\
    \ false\n  end\n  \n  return true\nend", "  valid = date.empty? || !(date.split(\"\
    -\").length == 3) || date.split(\"-\").map{|i| i.to_i}.all? {|i| i < 1 || i >\
    \ 31}\n  valid ||= date.split(\"-\").map{|i| i.to_i}.all? {|i| i < 1 || i > 30}\n\
    \  valid ||= date.split(\"-\").map{|i| i.to_i}.all? {|i| i < 1 || i > 29}\n  valid\
    \ ||= date.split(\"-\").map{|i| i.to_i}.all? {|i| i < 1 || i > 12}\n  valid\n\
    end", "  # Your code here\n  return true\nend\n</code>\n<|/ q tags=ruby,datetime,ruby-on-rails\
    \ dscore=1 |>\n<| c |>\nHi, I see a lot of different answers. Could you please\
    \ tell us how you want the user to enter date in format \"mm-dd-yyyy\"? The format\
    \ that you use is also not clear. For example, what if the user enters \"29-31-2016\"\
    ? Should it be valid or not? Thanks\n<|/ c |>\n<| a tags=ruby,datetime,ruby-on-rails\
    \ |>\nUse DateTime with Parse\n<code>\nrequire 'date'\nrequire 'time'", "  date_array\
    \ = date.split('-')\n  day = date_array[1]\n  month = date_array[0]\n  year =\
    \ date_array[2]\n  valid_days_month = [\"1\", \"3\", \"5\", \"7\", \"8\", \"10\"\
    , \"12\"]\n  valid_days_month.each do |valid_day|\n    if day == valid_day\n \
    \     valid_days_month = [\"4\", \"6\", \"9\", \"11\"]\n      valid_days_month.each\
    \ do |valid_day|\n        if day == valid_day\n          valid_days_month = [\"\
    2\", \"29\"]\n          valid_days_month.each do |valid_day|\n            if day\
    \ == valid_day\n              return true\n            end\n          end\n  \
    \      end\n      end\n    end\n  end\n  return false\nend\n</code>\n<|/ a tags=arrays,ruby\
    \ |>\n<| c |>\nI like this solution. However, the code is still too long. Is it\
    \ possible to shorten the code by using another method?\n<|/ c |>\n<| c |>\nI\
    \ guess, you can extract some methods. Like for valid_days_month, it can be simplified\
    \ by extracting \"4\", \"6\", \"9\", \"11\" into an array and returning true if\
    \ all elements are present, else false or something else.\n<|/ c |>\n<| a |>\n\
    I would write a method that returns true or false if a given string is a valid\
    \ date, e.g.\n<code>", "  date_string = date\n  day_count = 1\n  month_count =\
    \ 1\n  year_count = 1\n  year_string = date_string[-4..]\n  month_string = date_string[2..4]\n\
    \  month_count = month_count+1\n  day_string = date_string[1..2]\n  day_count\
    \ = day_count+1\n  date_string = date_string[5..-1]\n  year = date_string[0..2]\n\
    \  day_count = (day_count+3)%7\n  month_count = (month_count+6)%12\n  year_count\
    \ = (year_count+9)%100\n  if date_string == \"\"\n    day_count = 1\n    month_count\
    \ = 1\n    year_count = 1\n    return false\n  else\n    if day_count < 1 or day_count\
    \ > 31\n      day_count = 1\n    end\n    if month_count < 1 or month_count >\
    \ 12\n      month_count = 1\n    end\n    if year_count < 1 or year_count > 100\n\
    \      year_count = 1\n    end\n  end\nend", "    date = date.replace(\"-\",\"\
    /\")\n    year = int(date[:4])\n    month = int(date[4:6])\n    day = int(date[6:])\n\
    \    if date != \"\":\n        if day > 31 or day < 1:\n            return False\n\
    \        if month < 1 or month > 12:\n            return False\n        if month\
    \ in [1,3,5,7,8,10,12]:\n            if day > 31 or day < 1:\n               \
    \ return False\n        if month in [4,6,9,11]:\n            if day > 30:\n  \
    \              return False\n        if month == 2:\n            if day > 29:\n\
    \                return False\n    return True\n</cell>\n<text>\nThe next function\
    \ checks whether the date is in the format mm/dd/yyyy", "  \n  date_object = Date.parse(date)\n\
    \  \n  if date_object.nil?\n    return false\n  \n  else\n    date_object.valid?\n\
    \    \n  end\n  \nend", "  date_parts =  date.split('-')\n  months = date_parts[0].split('-')[1].split('')\n\
    \  if(date_parts[0].split('-')[0] == '01'):\n    months[0] = 'January'\n  if(date_parts[0].split('-')[0]\
    \ == '02'):\n    months[0] = 'February'\n  if(date_parts[0].split('-')[0] == '03'):\n\
    \    months[0] = 'March'\n  if(date_parts[0].split('-')[0] == '04'):\n    months[0]\
    \ = 'April'\n  if(date_parts[0].split('-')[0] == '05'):\n    months[0] = 'May'\n\
    \  if(date_parts[0].split('-')[0] == '06'):\n    months[0] = 'June'\n  if(date_parts[0].split('-')[0]\
    \ == '07'):\n    months[0] = 'July'\n  if(date_parts[0].split('-')[0] == '08'):\n\
    \    months[0] = 'August'\n  if(date_parts[0].split('-')[0] == '09'):\n    months[0]\
    \ = 'September'\n  if(date_parts[0].split('-')[0] == '10'):\n    months[0] = 'October'\n\
    \  if(date_parts[0].split('-')[0] == '11'):\n    months[0] = 'November'\n  if(date_parts[0].split('-')[0]\
    \ == '12'):\n    months[0] = 'December'\n  days_in_months = { \n    '01' : 31,\
    \ 28 => 31, 30 => 31, 29 => 31,\n    '02' : 29, 28 => 29, 30 => 29, 29 => 29,\n\
    \    '03' : 31, 28 => 31, 30 => 31, 29 => 31,\n    '04' : 30, 28 => 30, 30 =>\
    \ 30, 29 => 30,\n    '05' : 31, 28 => 31, 30 => 31, 29 => 31,\n    '06' : 30,\
    \ 28 => 30, 30 => 30, 29 => 30,\n    '07' : 31, 28 => 31, 30 => 31, 29 => 31,\n\
    \    '08' : 31, 28 => 31, 30 => 31, 29 => 31,\n    '09' : 30, 28 => 30, 30 =>\
    \ 30, 29 => 30,\n    '10' : 31, 28 => 31, 30 => 31, 29 => 31,\n    '11' : 30,\
    \ 28 => 30, 30 => 30, 29 => 30,\n    '12' : 31, 28 => 31, 30 => 31, 29 => 31\n\
    \  }\n  if(date_parts[1].split('-')[1] == '01'):\n    days_in_months['01'] = 30\n\
    \  if(date_parts[1].split('-')[1] == '02'):\n    days_in_months['02'] = 30\n \
    \ if(date_parts[1].split('-')[1] == '03'):\n    days_in_months['03'] = 30\n  if(date_parts[1].split('-')[1]\
    \ == '04'):\n    days_in_months['04'] = 30\n  ", "    # Your code goes here\n\
    \    raise NotImplementedError\nend", "  date = date.to_s\n  return !date.empty?\
    \ &&\n  date.match(/^\\d{2}-\\d{2}-\\d{4}/) &&\n  (3..12).include?(date.split(\"\
    -\").first) &&  (3..31).include?(date.split(\"-\").last) &&\n  (2..12).include?(date.split(\"\
    -\").first[0..2])\nend", "  if !@date.empty?\n    return true\n  elsif !@date_days.empty?\
    \ && !@date_days.between?(1,31)\n    return false\n  elsif !@date_months.empty?\
    \ && !@date_months.between?(1,12)\n    return false\n  elsif !@date_year.empty?\
    \ && @date_year.to_i!=0\n    return false\n  elsif !@date_format.empty?\n    pattern=/(\\\
    d\\d)-(\\d\\d)-(\\d{4})/\n    if !date =~ pattern\n      return false\n    end\n\
    \  end\n  return true\nend", "  date_array = date.split('-')\n  month_array =\
    \ date_array[0].split('-')\n  days_array = date_array[1].split(' ')\n  date_month\
    \ = int(month_array[0])\n  date_day = int(days_array[0])\n  date_year = int(date_array[2])",
  "  \n  # Write your code here.\n  \n  day_of_month  = Date.parse(date).day\n  month\
    \         = Date.parse(date).month\n  year          = Date.parse(date).year\n\
    \  \n  day_of_month_valid = (1 <= day_of_month <= 31)\n  month_valid         =\
    \ (1 <= month <= 12)\n  year_valid          = (1 <= year <= (365))\n  \n  if day_of_month_valid\
    \ and month_valid and year_valid\n    true\n  else\n    false\n  end\nend", " \
    \ return date.size > 0? true : false\nend", "  date_array = date.split('-')\n\
    \  if date_array.length != 3 or date_array.each do |val|\n    val.to_i rescue\
    \ return false\n  end\n  true\nend\n</code>\nNow it's your turn to write a test\
    \ which checks the following:\n<code>", "    date_obj = datetime.datetime.strptime(date,\
    \ \"%d-%m-%Y\")\n    return date_obj.year >= 1900 and date_obj.year <= 2030 and\
    \ date_obj.month >= 1 and date_obj.month <= 12 and date_obj.day >= 1 and date_obj.day\
    \ <= 29 and date_obj.day >= 1 and date_obj.day <= 29\nend", "  valid_date = true\n\
    \  date.strip!\n  if date.length != 10 || date.strip.length != 10\n    valid_date\
    \ = false\n  elsif !(day > 0 && day <= 29 && month > 1 && month <= 12)\n    valid_date\
    \ = false\n  elsif !(month == 2 && day > 29 || month == 2 && day < 1)\n    valid_date\
    \ = false\n  elsif !(month == 2 && day > 31)\n    valid_date = false\n  elsif\
    \ !(day < 1)\n    valid_date = false\n  elsif !(month == 2)\n    valid_date =\
    \ false\n  elsif !(month == 1 || month == 3 || month == 5 || month == 7 || month\
    \ == 8 || month == 10 || month == 12)\n    valid_date = false\n  end\n  return\
    \ valid_date\nend", "  date_string = date.to_s\n  if date_string != \"\"\n   \
    \ date_array = date_string.split(\"-\")\n    date_array.pop\n    date_array.push(\"\
    01\")\n    date_array.pop\n    date_array.push(\"12\")\n    month = date_array.join(\"\
    -\")\n    days = date_array.join(\",\")\n    months = month.split(\",\").length\n\
    \    days_array = days.split(\",\").length\n    return !((months < 1 or months\
    \ > 12) or (days_array < 1 or days_array > 31) or (days_array < 1 or days_array\
    \ > 30) or (days_array < 1 or days_array > 29))\n  end\nend", "  date = date.split(\"\
    -\")\n  day = int(date[2])\n  month = int(date[1])", "  date = date\n  date !=\
    \ '' \n  date = date[0..2] + '-' + date[3..5] + '-' + date[6..10]\n  months =\
    \ [\"01\",\"03\",\"05\",\"07\",\"08\",\"10\",\"12\"]\n  if months.include? date[0..1]\n\
    \    days = date.scan(/\\d+/)\n    if days.size < 1 || days.size > 30\n      return\
    \ false\n    elsif days.size > 31\n      return false\n    elsif days.size < 30\n\
    \      days = days.reject {|day| day < 1 || day > 29}\n      return days.size\
    \ < 1 || days.size > 30\n    elsif days.size < 29\n      return days.size < 1\
    \ || days.size > 30\n    end\n  end\n  false\nend", "  if date.length <= 0\n \
    \   return false\n  day = date.split('-')[2]\n  if day >= 1 && day <= 30\n   \
    \ return true\n  if day >= 1 && day <= 29\n    return true\n  if day >= 1 && day\
    \ <= 31\n    return true\n  if day >= 1 && day <= 30\n    return true\n  if day\
    \ >= 1 && day <= 31\n    return true\n  if day >= 1 && day <= 30\n    return true\n\
    \  if day >= 1 && day <= 31\n    return true\n  return false\nend\n</code>\n<|/\
    \ a dscore=0 |>\n<| c |>\nI changed it to `return date.empty? || date =~ /^((0?[1-9]|[12]\\\
    d|3[01])[\\/](0?[1-9]|1[012])[\\/](19|20)\\d\\d)$/` but I'm still getting the\
    \ same error.\n<|/ c |>\n<| c |>\nAre you sure you are checking the right variables?\
    \ I see that the code is still returning false when the date is not valid.\n<|/\
    \ c |>\n<| c |>\nAh I see what your saying now. I need to validate the date before\
    \ I parse it. I'll edit my question to show my full method now.\n<|/ c |>\n<|\
    \ a tags=ruby,ruby-on-rails,ruby-on-rails-4 |>\n<code>", "  # Write your code\
    \ below this line\n  return true\nend\n</cell>\n<cell>", "    date, mm, dd = date.split('-')\n\
    \    if(!(date==\"\" && mm>1 && mm<12 && dd>1 && dd<32 && mm<12 && mm>1 && mm<32\
    \ && mm>12))\n        return false\n    date = Date.parse(date) rescue false\n\
    \    return Date.parse(date) == false || Date.parse(date).days != nil && Date.parse(date).days\
    \ > 1 && Date.parse(date).days < 32 && Date.parse(date).days > 1 && Date.parse(date).days\
    \ < 31 && Date.parse(date).days > 1 && Date.parse(date).days < 30\nend", "   \
    \ \n    if date != \"\"\n    \n        #Checking if the given date string is valid\
    \ date\n        valid_date = Date.parse(date) rescue false\n        if valid_date\n\
    \            \n            #Taking out months and checking if the date is in valid\
    \ date format\n            months = valid_date.month\n            valid_date_string\
    \ = valid_date.to_s rescue false\n            \n            #Checking if the given\
    \ date string is a valid date in mm-dd-yyyy format\n            if valid_date_string\
    \ =~ /^\\d{2}\\-\\d{2}\\-\\d{4}$/\n                \n                #Checking\
    \ if the date is in valid range\n                if valid_date <= Date.new(2022,02,02)\
    \ rescue false\n                if valid_date >= Date.new(2022,02,01) rescue false\n\
    \                \n                #Checking if the date is in valid date format\n\
    \                if valid_date <= Date.new(2022,03,30) rescue false\n        \
    \        if valid_date >= Date.new(2022,04,01) rescue false\n                \n\
    \                #Checking if the date is in valid date format\n             \
    \   if valid_date <= Date.new(2022,04,31) rescue false\n                if valid_date\
    \ >= Date.new(2022,05,01) rescue false\n                \n                #Checking\
    \ if the date is in valid date format\n                if valid_date <= Date.new(2022,05,30)\
    \ rescue false\n                if valid_date >= Date.new(2022,06,01) rescue false\n\
    \                \n                #Checking if the date is in valid date format\n\
    \                if valid_date <= Date.new(2022,06,31) rescue false\n        \
    \        if valid_date >= Date.new(2022,07,01) rescue false\n                \n\
    \                #Checking if the date is in valid date format\n             \
    \   if valid_date <= Date.new(2022,07,30) rescue false\n                if valid_date\
    \ >= Date.new(2022,08,01) rescue false\n                \n                #Checking\
    \ if the date is in valid date format\n                if valid_date <= Date.new(2022,08,31)\
    \ rescue false\n                if valid_date >= Date.new(2022,09,01) rescue false\n\
    \                \n                #Checking if the date is in valid date format\n\
    \                if valid_date <= Date.new(2022,09,30) rescue false\n        \
    \        if valid_date >= Date.new(2022,10,01) rescue false\n                \n\
    \                #Checking if the date is in valid date format\n             \
    \   if valid_date <= Date.new(2022,10,31) rescue false\n                if valid_date\
    \ >= Date.new(2022,11,01) rescue false\n                \n                #Checking\
    \ if the date ", "    date_array = date.split(\"-\")\n    month = date_array[0]\n\
    \    day = int(date_array[1])\n    if len(date_array) == 3 and month.isdigit()\
    \ and day.isdigit():\n        if int(month) in range(1, 13) and int(day) in range(1,\
    \ 32):\n            days_in_month = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273,\
    \ 304, 334]\n            if int(month) in range(1, 13):\n                if day\
    \ in days_in_month:\n                    days_in_month[int(month)] -= 1\n    \
    \                if int(day) == days_in_month[int(month)]:\n                 \
    \       return True\n    return False\n</cell>\n<cell>", "  return !date or !(date.length>0)\n\
    end", "    date_array = date.split('-')\n    if len(date_array) != 3:\n      \
    \  return False\n    if int(date_array[2]) < 1 or int(date_array[2]) > 12:\n \
    \       return False\n    if int(date_array[0]) < 1 or int(date_array[0]) > 12:\n\
    \        return False\n    if int(date_array[1]) < 1 or int(date_array[1]) > 12:\n\
    \        return False\n    return True\n</cell>\n<cell>", "   if date==\"\"\n\
    \      false\n   elsif ((date[0] != \"-\") || (date[2]!=\"-\"))\n      false\n\
    \   elsif ((months(date[0])) < 1\n      false\n   elsif ((months(date[0])) > 12)\n\
    \      false\n   elsif ((days(date[0])) < 1\n      false\n   elsif ((days(date[0]))\
    \ > 30)\n      false\n   elsif ((months(date[2])) < 1\n      false\n   elsif ((months(date[2]))\
    \ > 12)\n      false\n   elsif ((days(date[2])) < 1\n      false\n   elsif ((days(date[2]))\
    \ > 29)\n      false\n   else\n      return true\n   end\nend\n</code>\n<|/ a\
    \ tags=ruby dscore=1 |>\n<| c |>\nYour solution fails for `nil`. `date` should\
    \ be an optional parameter and `valid_date` should raise an error if date is not\
    \ given\n<|/ c |>\n<| a dscore=1 tags=ruby |>\nI would use a Regex to validate\
    \ dates. Below you can find one way of doing this with DateTime\n<code>\nrequire\
    \ 'date'\nvalid_date = /\\d{2}-\\d{2}-\\d{4}/", "  if date.is_a?(String)\n   \
    \ date.strip!\n  end\n  if date.empty?\n    false\n  else\n    date = date.split(\"\
    -\")\n    months = Array(\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\"\
    ,\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\")\n    days_count = date.count{|i| i.to_i\
    \ <= 31} if date.count {|i| i.to_i <= 31} > 0 \n    days_count += date.count{|i|\
    \ i.to_i > 31} if date.count {|i| i.to_i > 31} > 0 and date.count {|i| i.to_i\
    \ <= 30} > 0\n    days_count += date.count{|i| i.to_i > 30} if date.count {|i|\
    \ i.to_i > 30} > 0 and date.count {|i| i.to_i <= 29} > 0\n    days_count += date.count{|i|\
    \ i.to_i > 29} if date.count {|i| i.to_i > 29} > 0 and date.count {|i| i.to_i\
    \ <= 12} > 0\n    if days_count > 31\n      return false\n    elsif days_count\
    \ == 0\n      return false\n    elsif days_count == 31\n      if months.include?(date[0].to_s)\n\
    \        return false\n      else\n        return true\n      end\n    elsif days_count\
    \ == 30\n      if months.include?(date[0].to_s)\n        return false\n      elsif\
    \ months.include?(date[1].to_s)\n        return false\n      else\n        return\
    \ true\n      end\n    elsif days_count == 29\n      if months.include?(date[0].to_s)\n\
    \        return false\n      elsif months.include?(date[1].to_s)\n        return\
    \ false\n      elsif months.include?(date[2].to_s)\n        return false\n   \
    \   else\n        return true\n      end\n    elsif days_count == 12\n      if\
    \ months.include?(date[0].to_s)\n        return false\n      else\n        return\
    \ true\n      end\n    else\n      return false\n    end\n  end\nend\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nWhat is the purpose of adding the extra conditional\
    \ statements? It works. Thanks.\n<|/ c |>\n<| c |>\nThe second condition will\
    \ work only for days. Months will not work. `date[0].to_s == \"1\" || date[0].to_s\
    \ == \"3\" || date[0].to_s == \"5", "  return !date.empty? && date.split('-').all?\
    \ && (date.split('-').length == 2 && (date.split('-')[0].length == 2 || date.split('-')[0].length\
    \ == 4 || date.split('-')[0].length == 6) && date.split('-').length == 2 && (date.split('-')[1].length\
    \ == 2 || date.split('-')[1].length == 4 || date.split('-')[1].length == 6) &&\
    \ date.split('-').length == 3 && date.split('-')[0] == '01' && date.split('-')[1]\
    \ == '12' && date.split('-')[2] == '2016')\nend", "  if date == nil or date ==\
    \ \"\"\n    return false\n  end\n  \n  # 1. Check if date string is not empty\n\
    \  if date != \"\"\n    \n    # 2. Validate the number of days of the months of\
    \ the year\n    months = date.split(\"-\")\n    \n    days_in_month = Array.new\n\
    \    days_in_month[1] = 31\n    days_in_month[3] = 29\n    days_in_month[5] =\
    \ 31\n    days_in_month[7] = 30\n    days_in_month[8] = 31\n    days_in_month[10]\
    \ = 30\n    days_in_month[11] = 31\n    days_in_month[12] = 29\n    \n    days_in_year\
    \ = Array.new\n    days_in_year[1] = year % 4 == 0\n    days_in_year[2] = (year\
    \ % 100 == 0 or year % 400 == 0) ? 1 : 0\n    days_in_year[3] = (months[2] >=\
    \ days_in_month[2]) ? 1 : 0\n    days_in_year[4] = (months[1] >= days_in_month[1])\
    \ ? 1 : 0\n    days_in_year[5] = (months[3] >= days_in_month[3]) ? 1 : 0\n   \
    \ days_in_year[6] = (months[4] >= days_in_month[4]) ? 1 : 0\n    days_in_year[7]\
    \ = (months[5] >= days_in_month[5]) ? 1 : 0\n    days_in_year[8] = (months[6]\
    \ >= days_in_month[6]) ? 1 : 0\n    days_in_year[9] = (months[7] >= days_in_month[7])\
    \ ? 1 : 0\n    days_in_year[10] = (months[8] >= days_in_month[8]) ? 1 : 0\n  \
    \  days_in_year[11] = (months[9] >= days_in_month[9]) ? 1 : 0\n    days_in_year[12]\
    \ = (months[10] >= days_in_month[10]) ? 1 : 0\n    \n    # Validate the number\
    \ of days per month\n    if (days_in_year[1] == days_in_year[2] && days_in_year[2]\
    \ == days_in_year[3] && days_in_year[3] == days_in_year[4] && days_in_year[4]\
    \ == days_in_year[5] && days_in_year[5] == days_in_year[6] && days_in_year[6]\
    \ == days_in_year[7] && days_in_year[7] == days_in_year[8] && days_in_year[8]\
    \ == days_in_year[9] && days_in_year[9] == days_in_year[10] && days_in_year[10]\
    \ == days_in_year[11] && days_in_year[11] == days_in_year[12])\n      if days_in_month[1]\
    \ == days_in_month[2] && days_in_month[2] == days_in_month[3] && days_in_month[3]\
    \ == days_in_month[4] && days_in_month[4] == days_in_month[5", '  return true
    #Write your code here', "  valid_months = %w{1 3 5 7 8 10 12}\n  valid_days =\
    \ %w{1 3 5 7 8 10 12 1 2 4 6 9 11 1 2 4 6 9 11 1 2 4 6 9 11}\n  valid_year = %w{1900\
    \ 2000 2050 2100 2200 2300 2400 2500 2600 2750 2800 2900}\n  valid_date_format\
    \ = \"%m-%d-%Y\"", "    return true if !date.empty? && date.split('-').length==3\
    \ && Date.new(date.split('-')[0]).day<=1 && Date.new(date.split('-')[0]).month<=12\
    \ && Date.new(date.split('-')[0]).month>1 && Date.new(date.split('-')[1]).day<=31\
    \ && Date.new(date.split('-')[1]).day>30 && Date.new(date.split('-')[1]).month<=12\
    \ && Date.new(date.split('-')[1]).month>1 && Date.new(date.split('-')[2]).day<=29\
    \ && Date.new(date.split('-')[2]).day>30 && Date.new(date.split('-')[2]).month<=12\
    \ else false\nend", "    date, days = date.split(\"-\")\n    days_to_add = 1\n\
    \    \n    if days.split(\"-\")[0] == \"1\" and days.split(\"-\")[1] == \"1\"\
    \ and days.split(\"-\")[2] == \"1\" and days.split(\"-\")[2] == \"12\":\n    \
    \    days_to_add = 30\n    \n    if days.split(\"-\")[0] == \"2\" and days.split(\"\
    -\")[1] == \"4\" and days.split(\"-\")[2] == \"6\" and days.split(\"-\")[3] ==\
    \ \"9\":\n        days_to_add = 29\n    \n    if days.split(\"-\")[0] == \"3\"\
    \ and days.split(\"-\")[1] == \"5\" and days.split(\"-\")[2] == \"7\" and days.split(\"\
    -\")[3] == \"10\":\n        days_to_add = 28\n    \n    if days.split(\"-\")[0]\
    \ == \"4\" and days.split(\"-\")[1] == \"6\" and days.split(\"-\")[2] == \"9\"\
    \ and days.split(\"-\")[3] == \"11\":\n        days_to_add = 27\n    \n    if\
    \ days.split(\"-\")[0] == \"5\" and days.split(\"-\")[1] == \"7\" and days.split(\"\
    -\")[2] == \"10\" and days.split(\"-\")[3] == \"12\":\n        days_to_add = 26\n\
    \    \n    if len(days) != 3:\n        return False\n    \n    try:\n        int(days)\n\
    \    except ValueError:\n        return False\n    \n    if not days_to_add <\
    \ 1 or days_to_add > 31:\n        return False\n    \n    try:\n        months\
    \ = [\"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\"]\n    except ValueError:\n\
    \        months = [\"04\", \"06\", \"09\", \"11\"]\n    \n    if date not in months:\n\
    \        return False\n    \n    try:\n        datetime.datetime.strptime(date,\
    \ \"%m-%d-%Y\")\n    except ValueError:\n        return False\n    \n    return\
    \ True\n</cell>\n<cell>", "  date_valid = true \n  if date==nil then\n    date_valid\
    \ = false\n  else\n    if date != \"\" then\n      date = date.split(//)\n   \
    \   if date.length != 3 then\n        date_valid = false\n      else\n       \
    \ if date[1] <1 then\n          date_valid = false\n        elseif date[3] <1\
    \ then\n          date_valid = false\n        elseif date[2] <1 then\n       \
    \   date_valid = false\n        else\n          date_valid = true\n        end\n\
    \      end\n    end\n  end\n  return date_valid\nend", "  return true # Your code\
    \ here\nend", "    date = date.split(\"-\")\n    day = date[2].split(\" \")\n\
    \    if len(day[0]) != 2:\n        return False\n    if day[0][0].upper() == \"\
    J\" or day[0][0].upper() == \"S\":\n        if int(day[0][1]) > 31:\n        \
    \    return False\n        if int(day[0][1]) < 1:\n            return False\n\
    \    elif day[0][0].upper() == \"W\" or day[0][0].upper() == \"N\":\n        if\
    \ int(day[0][1]) > 30:\n            return False\n        if int(day[0][1]) <\
    \ 1:\n            return False\n    elif day[0][0].upper() == \"D\" or day[0][0].upper()\
    \ == \"T\":\n        if int(day[0][1]) > 29:\n            return False\n     \
    \   if int(day[0][1]) < 1:\n            return False\n    elif day[0][0].upper()\
    \ == \"F\" or day[0][0].upper() == \"S\":\n        if int(day[0][1]) > 28:\n \
    \           return False\n        if int(day[0][1]) < 1:\n            return False\n\
    \    elif day[0][0].upper() == \"M\" or day[0][0].upper() == \"A\":\n        if\
    \ int(day[0][1]) > 12:\n            return False\n        if int(day[0][1]) <\
    \ 1:\n            return False\n    else:\n        return False\n    return True",
  "  return date && date.size && !date.empty? &&\n      date.scan(/[1-9]{1,2}-[0-9]{1,2}-[0-9]{2,4}|0?[1-9]|1[0-3]-[0-9]{1,2}|3[0-9]{3,}|29\\\
    /[1-12]\\/([0]?[1-9]|[12][0-9]|3[01])|3\\/[1-3]\\/[0-9]{2,4}/).all? &&\n     \
    \ Date.strptime(date, '%m-%d-%Y').nil?\nend\n</code>\n<|/ a dscore=2 tags=ruby,date,validation,ruby-on-rails\
    \ |>\n<| c |>\nThanks for posting the answer, but I think your solution doesn't\
    \ work for the case when date is invalid (e.g. February 31st), as it will try\
    \ to parse that date, which will fail. And btw, you don't need `!date` in front\
    \ of `date.size` in the condition.\n<|/ c |>\n<| c |>\nI tested it now and updated\
    \ my post again, please take a look if you have time\n<|/ c |>\n<| c |>\nI agree\
    \ with you. Thanks!\n<|/ c |>\n<| c |>\nThanks for the solution. However I prefer\
    \ `Date.strptime(date, '%m-%d-%Y').nil?` over `Date.parse(date).nil?`.\n<|/ c\
    \ |>\n<| c |>\nI agree that Date.parse is a more robust solution.\n<|/ c |>\n\
    <| a tags=ruby,date,validation,ruby-on-rails |>\nRails 5 has an inbuilt method\
    \ for validating date formats.\n<code>\nvalidates :date_of_birth, :date_of_death,\
    \ :date_of_death, presence: true\n</code>\nand add the following in en.yml\n<code>\n\
    en:\n  activerecord:\n    models:\n      user:\n        attributes:\n        \
    \  user:\n            date_of_birth: \"Date of Birth\"\n            date_of_death:\
    \ \"Date of Death\"\n</code>\nand add the followings in your user.rb file\n<code>\n\
    validates_date :date_of_birth, :date_of_death, :date_of_birth, :date_of_death,\
    \ format: /\\A(?:(\\d{1,2})[\\/\\.-](\\d{1,2})[\\/\\.-](\\d{4,}))|(\\d{1,2})[\\\
    /\\.-](\\d{1,2})[\\/\\.-](\\d{4})\\z/\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThe\
    \ :date_of_birth, :date_of_death are model attributes. What is this doing?\n",
  "  # Write your code here\n  return true\nend", "  if date == \"\"\n    false\n\
    \  else\n    days_to_check = [31,30,29,28,31,30,31,30,31,30,31]\n    months_to_check\
    \ = [1,3,5,7,8,10,12]\n    splitDate = date.split('-')\n    month = 0\n    day\
    \ = 0\n    year = 0\n    for i in splitDate\n      if i.length == 2\n        if\
    \ i.length > 2\n          month = i[0].to_i\n          day = i[1].to_i\n     \
    \   else\n          month = i[0].to_i\n          day = 1\n        end\n      end\n\
    \      days_to_check.each do |days_in_month|\n        months_to_check.each do\
    \ |months_in_year|\n          if month == 0\n            month = 12\n        \
    \  else\n            month -= 1\n          end\n          if month == 12\n   \
    \         month = 11\n            year -= 1\n          else\n            year\
    \ += 1\n          end\n          if day > days_in_month\n            day = days_in_month\n\
    \          else\n            day -= 1\n          end\n          if day < 1\n \
    \           day = 1\n            month -= 1\n          else\n            month\
    \ += 1\n          end\n          if month < 1\n            month = 1\n       \
    \     year += 1\n          else\n            month += 1\n          end\n     \
    \     if month == 2\n            if day > days_in_month\n              day = days_in_month\n\
    \            end\n          end\n          if month > 12\n            month =\
    \ 12\n            year += 1\n          end\n          if day > 31\n          \
    \  day = 31\n            month += 1\n          end\n          if day < 1\n   \
    \         day = 1\n            month -= 1\n          else\n            month +=\
    \ 1\n          end\n          if month < 1\n            month = 1\n          \
    \  year += 1\n          end\n        end\n      end\n    end\n    if day < 1 or\
    \ day > 31\n      false\n    end\n    if month < 1 or month > 12\n      false\n\
    \    end\n    if day < 1 or day > 30\n      false\n    end\n    if month == 2\
    \ && day > 30\n      false\n    end\n    if day < 1 or day > 29\n      false\n\
    \    end\n    if day == 30 && (month == 4 || month == 6 or month == 9 or month\
    \ == 11)\n      false\n    end\n    if day == 31 && (month == 1 || month == 3\
    \ || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\n \
    \     false\n    end\n    if day == 30 && month == 2 and day > 29\n      false\n\
    \    end\n  end\nend\n</code>\n<|/ a tags=ruby,date dscore=0 |>\n<| c |>\nThank\
    \ you. I am new to Ruby and I understand most of your ", "  # write your code\
    \ here\n  valid_date_pattern = /\\A((0?[1-9]|1[012])[\\-\\/](0?[1-9]|[12][0-9]|3[01])[\\\
    -\\/](19|20)\\d\\d)\\Z/\n  date_pattern = /\\A(0?[1-9]|1[012])[\\-\\/](0?[1-9]|[12][0-9]|3[01])[\\\
    -\\/](19|20)\\d\\d\\z/ \n  date_matcher = Date.new(date.match(date_matcher))\n\
    \  if date_matcher.day and date_matcher.month and date_matcher.year and date_matcher.day\
    \ == date_matcher.month and date_matcher.month == date_matcher.year\n    true\n\
    \  elsif date_matcher.day and date_matcher.month and date_matcher.year and (date_matcher.day\
    \ != date_matcher.month and date_matcher.day != date_matcher.year)\n    false\n\
    \  elsif date_matcher.day and date_matcher.month and date_matcher.year and (date_matcher.day\
    \ == date_matcher.month and date_matcher.day > 29 and date_matcher.month > 12)\n\
    \    false\n  elsif date_matcher.day and date_matcher.month and date_matcher.year\
    \ and (date_matcher.day == date_matcher.month and date_matcher.day < 1 or date_matcher.day\
    \ > 31)\n    false\n  elsif date_matcher.day and date_matcher.month and date_matcher.year\
    \ and (date_matcher.day == date_matcher.month and date_matcher.day > 30 and date_matcher.month\
    \ < 4)\n    false\n  elsif date_matcher.day and date_matcher.month and date_matcher.year\
    \ and (date_matcher.day == date_matcher.month and date_matcher.day > 29 and date_matcher.month\
    \ > 12)\n    false\n  elsif date_matcher.day and date_matcher.month and date_matcher.year\
    \ and (date_matcher.day == date_matcher.month and date_matcher.day > 31 and date_matcher.month\
    \ < 6)\n    false\n  elsif date_matcher.day and date_matcher.month and date_matcher.year\
    \ and (date_matcher.day == date_matcher.month and date_matcher.day > 30 and date_matcher.month\
    \ < 9)\n    false\n  elsif date_matcher.day and date_matcher.month and date_matcher.year\
    \ and (date_matcher.day == date_matcher.month and date_matcher.day > 30 and date_matcher.month\
    \ < 11)\n    false\n  elsif date_matcher.day and date_matcher.month and date_matcher.year\
    \ and (date_matcher.day == date_matcher.month and date_matcher.day > 30 and date_matcher.month\
    \ < 12)\n    false\n  elsif date_matcher.day and date_matcher.month and date_matcher.year\
    \ and (date_matcher.day == date_matcher.month and date_matcher.day > 3", "   date.to_s.strip!\n\
    \   if date.empty?\n      return false\n   elsif date.count < 2\n      return\
    \ false\n   elsif date.count > 12\n      return false\n   elsif date.split(\"\
    -\").size < 3\n      return false\n   elsif date.split(\"-\").size > 3\n     \
    \ return false\n   elsif (date.split(\"-\").last.to_i >= 1) and (date.split(\"\
    -\").last.to_i <= 12)\n      return false\n   elsif (date.split(\"-\").last.to_i\
    \ >= 4) and (date.split(\"-\").last.to_i <= 6)\n      return false\n   elsif (date.split(\"\
    -\").last.to_i >= 2) and (date.split(\"-\").last.to_i <= 12)\n      return false\n\
    \   else\n      return true\n   end\nend\n</code>\n<|/ a tags=date,validation,ruby\
    \ |>\n<| c |>\nthank you for the effort you put in! but I have to use regex to\
    \ validate my date, so I have no choice but to use regex\n<|/ c |>\n<| c |>\n\
    I have edited my question to add my regex to validate my date string\n<|/ c |>\n\
    <| c |>\nYour date regex would match `\"02-03-2019\"`.\n<|/ c |>\n<| c |>\n`validates_format_of\
    \ :date, :with => /\\A(?:[01]\\d|2\\d|3[01]|[12]\\d{3}|3(?:0\\d|1[0-2])|[4-9]\\\
    d{2})-(?:[01]\\d|2\\d|3[01]|[12]\\d{3}|3(?:0\\d|1[0-2])|[4-9]\\d{2})-(?:19\\d{2}|2\\\
    d{3})\\z/`, :message => 'is not valid'` seems to work fine.\n<|/ c |>\n<| a tags=date,validation,ruby\
    \ |>\n<code>", "    date_string = date.split(\" \")[0]\n    days_to_month = [\"\
    31\", \"28\", \"31\", \"30\", \"31\", \"30\", \"31\", \"31\", \"30\", \"31\",\
    \ \"30\", \"31\", \"30\", \"31\", \"30\", \"31\", \"30\", \"31\"]\n    days_to_year\
    \ = [31, 31, 31, 31, 31, 30, 30, 30, 31, 30, 31, 30, 31, 30, 30]\n    months =\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\"\
    , \"12\"]\n    months_to_year = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n    months_to_month\
    \ = [1, 3, 7, 10, 12]\n    months_to_day = [31, 28, 31, 30, 31, 30, 31, 31, 30,\
    \ 31, 30, 31]\n    days_in_month = [None, 31, 28, 31, 30, 31, 30, 31, 31, 30,\
    \ 31, 30, 31]\n    \n    \n    if date_string == \"\" or len(date_string) < 1:\n\
    \        return False\n    \n    month = int(date_string[:2]) - 1\n    day = int(date_string[2:])\n\
    \    \n    if day < 1 or day > days_in_month[month] or month < 1 or month > 12:\n\
    \        return False\n    \n    year = int(date_string[:4])\n    \n    if year\
    \ < 1000:\n        year += 2000\n    elif year < 2000:\n        year += 1900\n\
    \    \n    if day < 1 or day > days_to_month[month]:\n        return False\n \
    \   \n    if month < 1 or month > 12:\n        return False\n    \n    if day\
    \ < 1 or day > days_to_year[month]:\n        return False\n    \n    if month\
    \ < 1 or month > 12:\n        return False\n    \n    if day < 1 or day > days_to_month[month]:\n\
    \        return False\n    \n    return True", "  # TODO implement your code here\n\
    \  return true\nend", "  return !date.empty? &&\n    (date.length == 3) && \n\
    \    (date[1].length == 2 && date[2] == '-') && \n    (\n      (date[1] == '1')\
    \ || (date[1] == '3') ||\n      (date[1] == '5') || (date[1] == '7') ||\n    \
    \  (date[1] == '8') || (date[1] == '10') ||\n      (date[1] == '12') || (date[1]\
    \ == '4')\n    ) &&\n    (\n      (date.length == 4) && \n      (date[2].length\
    \ == 2 && date[3].length == 2) && \n      (\n        (date[2] == '1') || (date[2]\
    \ == '3') ||\n        (date[2] == '5') || (date[2] == '7') ||\n        (date[2]\
    \ == '8') || (date[2] == '10') ||\n        (date[2] == '12')\n      )\n    ) &&\n\
    \    (\n      (date.length == 4) &&\n      (date[3].length == 2 && ((date[3] ==\
    \ '1') || (date[3] == '3') || (date[3] == '5') || (date[3] == '7') || (date[3]\
    \ == '8') || (date[3] == '10') || (date[3] == '12')))\n    ) &&\n    (\n     \
    \ (date.length == 5) &&\n      (date[4].length == 2 && date[4].split('-').length\
    \ == 3)\n    ) &&\n    (\n      (date.length == 5) &&\n      (date[4].length ==\
    \ 3 && ((date[4][0].to_i >= 1 && date[4][0].to_i <= 12) && (date[4][1].to_i >=\
    \ 1 && date[4][1].to_i <= 31)))\n    ) &&\n    (\n      (date.length == 6) &&\n\
    \      (date[4].length == 3 && date[4].split('-').length == 3) && ((date[4][0].to_i\
    \ >= 1 && date[4][0].to_i <= 12) && (date[4][1].to_i >= 1 && date[4][1].to_i <=\
    \ 30) && (date[4][2].to_i >= 1 && date[4][2].to_i <= 29))\n    ) &&\n    (\n \
    \     (date.length == 7) &&\n      (date[4].length == 3 && date[4].split('-').length\
    \ == 3) && ((date[4][0].to_i >= 1 && date[4][0].to_i <= 12) && (date[4][1].to_i\
    \ >= 1 && date[4][1].to_i <= 29) && (date[4][2].to_i >= 1 && date[4][2].to_i <=\
    \ 30))\n    ) &&\n    (\n      (date.length == 8) &&\n      (date[4].length ==\
    \ 3 && date[4].split('-').length == 3) && ((date[4][0].to_i >= 1 && date[4][0].to_i\
    \ <= 12) && (date[4][1].to_i >= 1 && date[4][1].to_i <= 30) && (date[4][2].to_i\
    \ >= 1 && date[4][2].to_i <= 31))\n    ) &&\n    (\n      (date.length == 8) &&",
  "  date_string = date\n  # Add your code here\n  return true\nend", "  !(date ==\
    \ nil || date == \"\")\n  !(date.split(\"-\").length != 3)\n  !(1 <= date.split(\"\
    -\")[0].to_i && date.split(\"-\").length <= 12)\n  !(1 <= date.split(\"-\")[1].to_i\
    \ && date.split(\"-\").length <= 31)\n  !(1 <= date.split(\"-\")[2].to_i && date.split(\"\
    -\").length <= 30)\n  !(date.split(\"-\")[0].to_i < 1 || date.split(\"-\")[0].to_i\
    \ > 12)\n  !(date.split(\"-\")[1].to_i < 1 || date.split(\"-\")[1].to_i > 31)\n\
    \  !(date.split(\"-\")[2].to_i < 1 || date.split(\"-\")[2].to_i > 30)\nend", " \
    \ !date.empty? && date !~ /^(\\s*|\\w*-\\w*-\\w*)$/ && date.split('-').map { |month|\
    \ month.count('-') } < 12 &&\n  date.split('-').map { |month| month.count('-')\
    \ } > 1 &&\n  date.split('-').map { |month| month.count('-') } <= 31 && date.split('-').map\
    \ { |month| month.count('-') } <= 30 &&\n  date.split('-').map { |month| month.count('-')\
    \ } <= 29 && date.split('-').map { |month| month.count('-') } >= 1\nend", "  date\
    \ = date.split('-')\n  if date.empty?\n    false\n  elsif date.length != 3\n \
    \   false\n  elsif (date.select{|date|date.split('-').length != 3}).empty?\n \
    \   false\n  elsif date[1].length == 1 || date[2].length == 1\n    false\n  elsif\
    \ (date[1].split('-').length == 2 && date[2].split('-').length == 2) || (date[1].split('-').length\
    \ == 3 && date[2].split('-').length == 3)\n    false\n  elsif (date[1].split('-').length\
    \ == 2 && date[2].split('-').length == 2 && date[2].split('-').first != '01')\
    \ || (date[1].split('-').length == 2 && date[2].split('-').length == 2 && date[2].split('-').first\
    \ == '01')\n    false\n  elsif (date[1].split('-').length == 3 && date[2].split('-').length\
    \ == 3 && date[2].split('-').first != '01') || (date[1].split('-').length == 3\
    \ && date[2].split('-').length == 3 && date[2].split('-').first == '01')\n   \
    \ false\n  elsif (date[1].split('-').length == 4 && date[2].split('-').length\
    \ == 4 && date[2].split('-').first != '01') || (date[1].split('-').length == 4\
    \ && date[2].split('-').length == 4 && date[2].split('-').first == '01')\n   \
    \ false\n  elsif (date[1].split('-').length == 3 && date[2].split('-').length\
    \ == 3 && date[2].split('-').first != '01' && ((date[1].split('-').last != '12'\
    \ && date[2].split('-').last != '12') || (date[1].split('-').last == '12' && date[2].split('-').last\
    \ == '12')))\n    false\n  elsif (date[1].split('-').length == 3 && date[2].split('-').length\
    \ == 3 && date[2].split('-').first != '01' && ((date[1].split('-').last != '12'\
    \ && date[2].split('-').last != '12') || (date[1].split('-').last == '12' && date[2].split('-').last\
    \ == '12')))\n    false\n  elsif (date[1].split('-').length == 4 && date[2].split('-').length\
    \ == 4 && date[2].split('-').first != '01' && ((date[1].split('-').last != '12'\
    \ && date[2].split('-').last != '12') || (date[1].split('-').last == '12' && date[2].split('-').last\
    \ == '12')))\n    false\n  end\nend", "  valid_date = true\n  unless date.empty?\n\
    \    if (months = date.split(\"-\")[0].split(\"-\")[1].to_i) > 0\n      if (months\
    \ >= 1 & months <= 12) \n        if (days = date.split(\"-\")[2].to_i) > 0\n \
    \         if (days >= 1 & days <= 31)\n            if (year = date.split(\"-\"\
    )[3].to_i) > 0\n              if year >= 1 & year <= DateTime.now.year\n     \
    \           valid_date = true\n              else\n                valid_date\
    \ = false\n              end\n            else\n              valid_date = false\n\
    \            end\n          else\n            valid_date = false\n          end\n\
    \        else\n          valid_date = false\n        end\n      else\n       \
    \ valid_date = false\n      end\n    else\n      valid_date = false\n    end\n\
    \  else\n    valid_date = false\n  end\nend\n</code>\nI tested the code using\
    \ the following code which checks if the date is valid and print out all valid\
    \ dates:\n<code>\nvalid = false\nwhile not valid\n  print \"Enter the date in\
    \ the format: mm-dd-yyyy : \"\n  date = gets.chomp\n  print \"\"\n  valid = valid_date(date)\n\
    \  if valid\n    print \"Date is valid : #{date} \\n\"\n  end\nend\n</code>\n\
    The output for valid dates:\n<code>\nEnter the date in the format: mm-dd-yyyy\
    \ : 10-10-2015\nDate is valid : 10-10-2015 ", "    # Write your code here\n  \
    \  months = {1:31,3:30,5:29,7:28,8:29,10:28,12:31}\n    days = {1:1,3:1,5:1,7:1,8:1,10:1,12:31}\n\
    \    date = date.split('-')\n    month = int(date[0])\n    day = int(date[1])\n\
    \    year = int(date[2])\n    if month > 12 or month < 1 or day > months[month]\
    \ or day < 1 or year < 1900:\n        return False\n    elif month == 2 and not\
    \ (year % 400 == 0 or (year % 4 == 0 and year % 100 != 0)):\n        return False\n\
    \    elif month == 4 and not (year % 400 == 0 or (year % 4 == 0 and year % 100\
    \ == 0 and year % 400 != 0)):\n        return False\n    elif month == 6 and not\
    \ (year % 400 == 0 or (year % 4 == 0 and year % 100 != 0 and year % 100 != 0)):\n\
    \        return False\n    elif month == 9 and not (year % 400 == 0 or (year %\
    \ 4 == 0 and year % 100 != 0 and year % 100 == 0 and year % 400 == 0)):\n    \
    \    return False\n    elif month == 11 and not (year % 400 == 0 or (year % 4\
    \ == 0 and year % 100 == 0 and year % 100 != 0 and year % 400 != 0)):\n      \
    \  return False\n    return True\nprint(valid_date('1-31-2020'))\nprint(valid_date('1-31-2020'))\n\
    print(valid_date('1-31-2020'))\nprint(valid_date('3-30-2020'))\nprint(valid_date('5-29-2020'))\n\
    print(valid_date('7-28-2020'))\nprint(valid_date('8-29-2020'))\nprint(valid_date('10-28-2020'))\n\
    print(valid_date('12-31-2020'))\nprint(valid_date('3-31-2020'))\nprint(valid_date('5-31-2020'))\n\
    print(valid_date('7-31-2020'))\nprint(valid_date('8-31-2020'))\nprint(valid_date('10-31-2020'))\n\
    print(valid_date('12-31-2020'))\nprint(valid_date('3-30-2020'))\nprint(valid_date('5-29-2020'))\n\
    print(valid_date('7-28-2020'))\nprint(valid_date('8-29-2020'))\nprint(valid_date('10-28-2020'))\n\
    print(valid_date('12-31-2020'))\nprint(valid_date('3-31-2020'))\nprint(valid_date('5-31-2020'))\n\
    print(valid_date('7-31-2020'))\nprint(valid_date('8-31-2020'))\nprint(valid_date('10-31-2020'))\n\
    print(valid_date('12-31-2020'))\nprint(valid_date('3-30-2020'))\n", "    valid_date\
    \ = (date != '' and valid_day(date) and valid_month(date))\n    return valid_date\n\
    end", "  date_regex = /(?:(?:31(\\/|-|\\.)(?:0?[13578]|1[02]))\\1|(?:(?:29|30)(\\\
    /|-|\\.)(?:0?[1,3-9]|1[0-2])\\2))(?:(?:1[6-9]|[2-9]\\d)?\\d{2})$|^(?:29(\\/|-|\\\
    .)0?2\\3(?:(?:(?:1[6-9]|[2-9]\\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00))))$|^(?:0?[1-9]|1\\\
    d|2[0-8])(\\/|-|\\.)(?:(?:0?[1-9])|(?:1[0-2]))\\4(?:(?:1[6-9]|[2-9]\\d)?\\d{2})$/\n\
    \  \n  \n  if date == ''\n    puts \"Date cannot be empty or nil.\"\n  elsif !date.match\
    \ date_regex\n    puts \"Date should be a valid date format.\"\n  else\n    return\
    \ true\n  end\nend", "  return !(date=='' || date.length<8) && date.to_i!(/(\\\
    d{1,2})-(\\d{1,2})-(\\d{4})/) && date.to_i!(/[1-31]$/) && date.to_i!(/[3-6]$/)\
    \ && date.to_i!(/[1-9]$/) && date.to_i!(/[1-29]$/) && date.to_i!(/[12]$/) && date.to_i!(/(\\\
    d{4})$/)\nend", "  date_regex = \"^([0-9]{2}|([0-9]{2}|[0-9]{4}|[0-9]{6}))-([0-9]{2})-([0-9]{4})$\"\
    \n  match = date.match(date_regex)\n  return match.nil?\nend", "  if date.empty?\n\
    \    false\n  elsif (date.length == 3) && !(date =~ /^\\d{2}/)\n    false\n  elsif\
    \ (date.length != 3) && !(date =~ /^(\\d{2})-(\\d{2})-(\\d{4})$/)\n    false\n\
    \  elsif (date.length != 3) && !(date =~ /^(\\d{2})-(\\d{2})$/)\n    false\n \
    \ elsif (date.length != 3) && !(date =~ /^(\\d{4})-(\\d{2})-(\\d{2})$/)\n    false\n\
    \  elsif (date.length != 3) && !(date =~ /^(\\d{4})-(\\d{2})$/)\n    false\n \
    \ elsif (date.length != 3) && !(date =~ /^(\\d{4})$/)\n    false\n  elsif (date.length\
    \ != 3) && !(date =~ /^(\\d{2})-(\\d{4})$/)\n    false\n  elsif (date.length !=\
    \ 3) && !(date =~ /^(\\d{2})$/)\n    false\n  elsif (date.length != 3) && !(date\
    \ =~ /^(\\d{4})-(\\d{2})$/)\n    false\n  elsif (date.length != 3) && !(date =~\
    \ /^(\\d{4})$/)\n    false\n  else\n    true\n  end\nend\n</code>\n<|/ a |>\n\
    <| c |>\nThis is awesome. Just a little bug (maybe) I believe - the month is valid\
    \ if it has 31 days or more. For example, February has 28 days and should be invalid.\n\
    <|/ c |>\n<| c |>\nYou are right that my code had the bug in the validation logic.\
    \ I have fixed it now. Thanks for pointing out!\n<|/ c |>\n<| a dscore=0 |>\n\
    Just for fun, here's a more efficient Ruby implementation of your function:\n\
    <code>", "    date = date.split('-')\n    if(date[0] != '' and date[1] != '' and\
    \ date[2] != '' and date[2] != '0'):\n        days_month = [31,30,29,28,31,30,29,30,31]\n\
    \        if(date[2] not in days_month):\n            return False\n        days_month\
    \ = days_month[days_month.index(date[2])]\n        if(date[1] == '02' and (date[0]\
    \ < 1 or date[0] > 12)):\n            return False\n        elif(date[1] == '12'\
    \ and date[0] < 1 or date[0] > 12):\n            return False\n        elif(date[1]\
    \ == '01' and date[0] < 1 or date[0] > 12):\n            return False\n      \
    \  else:\n            return True\n    else:\n        return False", "    \n \
    \   # Write your code here\n    date_valid = true\n    \n    return date_valid\n\
    end", "    months = ['jan', 'feb', 'mar', 'apr', 'may', 'jun', 'jul', 'aug', 'sep',\
    \ 'oct', 'nov', 'dec']\n    days = ['mon', 'tue', 'wed', 'thu', 'fri', 'sat',\
    \ 'sun']\n    \n    # Write code here", "  # Write your code here\n  return date.present?\
    \ && !date.blank? && !(date.split(\"-\").count > 2) && Date.parse(date.split(\"\
    -\").first.to_s.gsub(\",\",\"\")).day > 1 && Date.parse(date.split(\"-\").first.to_s.gsub(\"\
    ,\",\"\")).month > 0 && Date.parse(date.split(\"-\").first.to_s.gsub(\",\",\"\"\
    )).year > 0 && (Date.parse(date.split(\"-\").last.to_s.gsub(\",\",\"\")).month\
    \ > 0 || Date.parse(date.split(\"-\").last.to_s.gsub(\",\",\"\")).day > 29) &&\
    \ (Date.parse(date.split(\"-\").last.to_s.gsub(\",\",\"\")).month < 1 || Date.parse(date.split(\"\
    -\").last.to_s.gsub(\",\",\"\")).day < 31)\nend\n</code>\nTest Cases\n<code>\n\
    valid_date(\"12-25-2012\")\n=> true\nvalid_date(\"25-25-2012\")\n=> true\nvalid_date(\"\
    25-25-12\")\n=> true\nvalid_date(\"25-25-2013\")\n=> false\nvalid_date(\"25-25-2012x\"\
    )\n=> false\nvalid_date(\"25-25-2012x\")\n=> false\nvalid_date(\"25-25-2012x\"\
    )\n=> false\n</code>\n<|/ a |>\n<| c |>\nThis doesn't handle leap years, and doesn't\
    \ allow for single digit days. \"25-25-2013\" would return false.\n<|/ c |>\n\
    <| c |>\n: I have written a solution for leap years and single digit days please\
    \ check updated answer\n<|/ c |>\n<| a tags=validation,ruby dscore=1 |>\nI believe\
    \ this solution will be easier:\n<code>\nrequire 'date'", "  valid_date_format?(date)\
    \ == true || valid_date_format?(date) == false\nend", "  # Write your code here\n\
    \  d = Date.parse(date)\n  if !d.nil? then\n    if d.day < 1 or d.month < 1 or\
    \ d.year < 1 then\n      return false\n    end", "  return date\nend", "    puts\
    \ \"validating date #{date}\"\n    \n    # Write your code here\n    return true\
    \ if date != \"\" && date != \"\" && date != \"\" && date != \"\" && date != \"\
    \" && date != \"\" && date != \"\" && date != \"\" && date != \"\" && date !=\
    \ \"\" && date != \"\" && date != \"\" && date != \"\" && date != \"\" && date\
    \ != \"\" && date != \"\" && date != \"\" && date != \"\" && date != \"\" && date\
    \ != \"\" && date != \"\" && date != \"\" && date != \"\" && date != \"\" && date\
    \ != \"\" && date != \"\" && date != \"\" && date != \"\" && date != \"\" && date\
    \ != \"\" && date != \"\" && date != \"\" && date != \"\" && date != \"\" && date\
    \ != \"\" && date != \"\" && date != \"\" && date != \"\" && date != \"\" && date\
    \ != \"\" && date != \"\" && date != \"\" && date != \"\" && date != \"\" && date\
    \ != \"\" && date != \"\" && date != \"\" && date != \"\" && date != \"\" && date\
    \ != \"\" && date != \"\" && date != \"\" && date != \"\" && date != \"\" && date\
    \ != \"\" && date != \"\" && date != \"\" && date != \"\" && date != \"\" && date\
    \ != \"\" && date != \"\" && date != \"\" && date != \"\" && date != \"\" && date\
    \ != \"\" && date != \"\" && date != \"\" && date != \"\" && date != \"\" && date\
    \ != \"\" && date != \"\" && date != \"\" && date != \"\" && date != \"\" && date\
    \ != \"\" && date != \"\" && date != \"\" && date != \"\" && date != \"\" && date\
    \ != \"\" && date != \"\" && date != \"\" && date != \"\" && date != \"\" && date\
    \ != \"\" && date != \"\" && date != \"\" && date != \"\" && date != \"\" && date\
    \ != \"\" && date != \"\" && date != \"\" && date != \"\" && date != \"\" && date\
    \ != \"\" && date != \"\" && date != \"\" && date != \"\" && date != \"\" && date\
    \ != \"\" && date != \"\" && date != \"\" && date != \"\" && date != \"\" && date\
    \ != \"\" && date != \"\" && date != \"\" && date != \"\" && date != \"\" && date\
    \ != \"\" && date != \"\" && date != \"\" && date != \"\" && date != \"\" && date\
    \ != \"\" && date != \"\" && date != \"\" && date != \"\" && date != \"\" && date\
    \ != \"\" && date != \"\" && date != \"\" && date != \"\" && date ", "    if date?\n\
    \        date_array = date.split(\"-\")\n        if date_array.length == 3\n \
    \           month = date_array[0].to_i\n            day = date_array[1].to_i\n\
    \            year = date_array[2].to_i\n            valid_month(month)\n     \
    \       valid_day(day)\n            valid_year(year)\n        end\n    end\nend\n\
    </code>\n<|/ a dscore=3 |>\n<| c |>\nI didn't down vote this answer, but it doesn't\
    \ actually answer the question in the title. He wants to know if they are leap\
    \ years (29th of Feb). Your example shows how to check that they are NOT leap\
    \ years, but he wants to know if the date string is valid.\n<|/ c |>\n<| c |>\n\
    : You are right. I misread the question a bit. I have corrected the example to\
    \ also accept valid dates in February.\n<|/ c |>\n<| c |>\nYou still didn't answer\
    \ the question of what does leap year have to do with Feb 29th\n<|/ c |>\n<| c\
    \ |>\n: It doesn't. I was simply providing validation methods, which can be used\
    \ anywhere in Ruby code. The question is about validating dates. The leap year-related\
    \ code is an implementation detail.\n<|/ c |>\n<| c |>\nThis answer is wrong,\
    \ especially on the first day of February being valid in leap years (as of Feb\
    \ 29th).\n<|/ c |>\n<| a dscore=2 tags=date,validation,ruby |>\nA simple approach\
    \ to check whether the date string is a valid date is\n<code>\nrequire 'date'\n\
    Date.parse(date_str).present?\n</code>\nIt will also check whether it's a valid\
    \ date and also checks whether it's a valid year (i.e. it accepts leap years).\
    \ If it is the case, it will return true; else it will return false.\n<|/ a |>\n\
    <| a tags=date,validation,ruby |>\n<code>", "  valid_date = False\n  if date !=\
    \ ''\n    valid_date = (date.count('-') != 1 and date.count('-') != 3 and date.count('-')\
    \ != 5 and date.count('-') != 7 and date.count('-') != 8 and date.count('-') !=\
    \ 10 and date.count('-') != 12 and date.count('-') != 4 and date.count('-') !=\
    \ 6 and date.count('-') != 9 and date.count('-') != 11)\n  end\n  valid_date\n\
    end\n</code>\nAnd finally the tests:\n<code>\nputs valid_date(test1)\nputs valid_date(test2)\n\
    puts valid_date(test3)\nputs valid_date(test4)\nputs valid_date(test5)\n</code>\n\
    Output:\n<code>\ntrue\nfalse\nfalse\nfalse\nfalse\n</code>\n<|/ a dscore=0 |>\n\
    <| a dscore=0 |>\n<code>", "  if date == ''\n    return false\n  elsif (date =~\
    \ /^\\d\\d-\\d\\d-\\d\\d\\d\\d$/)\n    return true\n  end\n  return false\nend",
  "\tday = date[6,7,8,9,10]\n\tmonth = date[0,1,3,5,7,8,10,12]\n\tyear = date[5,6,9,11]\n\
    \t\n\treturn (date != None and day not in ('','0') and len(day) == 1 and day not\
    \ in ('01','02','03','04','05','06','07','08','09','10','11','12') and day not\
    \ in ('01','02','03','04','05','06','07','08','09','10','11','12','13','14','15','16','17','18','19','20','21','22','23','24','25','26','27','28','29','30','31')\
    \ and month not in ('01','03','05','07','08','10','11','12') and month not in\
    \ ('04','06','09','11') and len(month) in (1,3,5,7,8,10,12) and month not in ('02','04','06','08','10','12')\
    \ and year not in ('','0') and len(year) in (4,6) and year not in ('19','20','21','22','23','24','25','26','27','28','29','30','31')\
    \ and year != None)\n\t\n\t", "  date_object = Date.parse(date)\n  valid_date_object\
    \ = (date_object.nil?)\n  \n  if(valid_date_object)\n    return true\n  else\n\
    \    false\n  end\nend", "  date.nil? or date.empty?\nend", "  !date.nil?\n  date.strip\
    \ != ''\n  Date.valid_date?(date)\nend", "  # Write your code here\n  date.nil?\n\
    end", "  unless date.blank?\n    if !(date[-9,2] =~ /^\\d{1,2}/) rescue false\n\
    \    elsif !(date[-1,1] =~ /^\\d/) rescue false\n    elsif !(date[-3,3] =~ /^\\\
    d{4}/) rescue false\n    elsif !(date[-6,6] =~ /^\\d{1,2}/) rescue false\n   \
    \ elsif !(date[-10,10] =~ /^\\d{4}/) rescue false\n    elsif !(date[-12,12] =~\
    \ /^\\d{1,2}/) rescue false\n    elsif !(date[-1,1] =~ /^\\d/) rescue false\n\
    \    elsif !(date[-4,4] =~ /^\\d{1,2}$/) rescue false\n    elsif !(date[-7,7]\
    \ =~ /^\\d{1,2}$/) rescue false\n    elsif !(date[-10,10] =~ /^\\d{1,2}$/) rescue\
    \ false\n    elsif !(date[-13,13] =~ /^\\d{1,2}$/) rescue false\n    elsif !(date[-1,1]\
    \ =~ /^\\d/) rescue false\n    elsif !(date[-5,5] =~ /^\\d{1,2}$/) rescue false\n\
    \    elsif !(date[-7,7] =~ /^\\d{1,2}$/) rescue false\n    elsif !(date[-10,10]\
    \ =~ /^\\d{1,2}$/) rescue false\n    elsif !(date[-12,12] =~ /^\\d{1,2}$/) rescue\
    \ false\n    elsif !(date[-1,1] =~ /^\\d/) rescue false\n    elsif !(date[-6,6]\
    \ =~ /^\\d{1,2}$/) rescue false\n    elsif !(date[-9,9] =~ /^\\d{1,2}$/) rescue\
    \ false\n    elsif !(date[-11,11] =~ /^\\d{1,2}$/) rescue false\n    elsif !(date[-1,1]\
    \ =~ /^\\d/) rescue false\n    elsif !(date[-3,3] =~ /^\\d{4}$/) rescue false\n\
    \    elsif !(date[-6,6] =~ /^\\d{4}$/) rescue false\n    elsif !(date[-10,10]\
    \ =~ /^\\d{4}$/) rescue false\n    elsif !(", "  valid_year?(date) && valid_month?(date)\
    \ && valid_day?(date)\nend", "  date_valid = true\n  if date.length == 0\n   \
    \ date_valid = false\n  elsif (date.length != 6 && date.length != 9)\n    date_valid\
    \ = false\n  else\n    months = date.split(\"-\")\n    if months.length != 3 ||\
    \ months[1].length != 2 || months[2].length != 2\n      date_valid = false\n \
    \   else\n      if months[0].to_i >= 1 && months[0].to_i <= 12\n        if months[1].to_i\
    \ >= 1 && months[1].to_i <= 31\n          if months[2].to_i >= 1 && months[2].to_i\
    \ <= 30\n            if months[2].to_i <= 29\n              if months[1].to_i\
    \ == 1 || months[1].to_i == 3 || months[1].to_i == 5 || months[1].to_i == 7 ||\
    \ months[1].to_i == 8 || months[1].to_i == 10\n                if months[0].to_i\
    \ == 1 || months[0].to_i == 4 || months[0].to_i == 6 || months[0].to_i == 9 ||\
    \ months[0].to_i == 11\n                  # Month 1 and Month 2 are valid\n  \
    \                if months[1].to_i == 1 || months[1].to_i == 3 || months[1].to_i\
    \ == 5 || months[1].to_i == 7 || months[1].to_i == 8 || months[1].to_i == 10\n\
    \                    if months[0].to_i == 1 || months[0].to_i == 4 || months[0].to_i\
    \ == 6 || months[0].to_i == 9 || months[0].to_i == 11\n                      date_valid\
    \ = true\n                    end\n                  end\n                end\n\
    \              end\n            end\n          end\n        end\n      end\n \
    \   end\n  end\n  return date_valid\nend", "  date_parts = date.split('-')\n \
    \ \n  # Validating date parts \n  \n  # Checking if date_parts is not empty\n\
    \  if date_parts.count != 3\n  \n    # Return false because date_parts is not\
    \ empty\n    return false\n  \n  # Checking if date_parts[0] is valid date\n \
    \ if not check_date(date_parts[0],'mm-dd-yyyy')\n  \n    # Return false because\
    \ date_parts[0] is not a valid date\n    return false\n  \n  # Checking if date_parts[1]\
    \ is valid date\n  if not check_date(date_parts[1],'dd-mm-yyyy')\n  \n    # Return\
    \ false because date_parts[1] is not a valid date\n    return false\n  \n  # Checking\
    \ if date_parts[2] is valid date\n  if not check_date(date_parts[2],'yyyy-mm-dd')\n\
    \  \n    # Return false because date_parts[2] is not a valid date\n    return\
    \ false\n  \n  # Return true because every check has passed\n  return true\nend",
  "  valid_date = (date.length > 0)\n  valid_date && ((Date.parse(date) > Time.now)\
    \ || (Date.parse(date) < Time.now - 1.year))\n  valid_date && ((Date.parse(date)\
    \ > Time.now) || (Date.parse(date) < Time.now - 3.months))\n  valid_date && ((Date.parse(date)\
    \ > Time.now) || (Date.parse(date) < Time.now - 1.month))\n  valid_date && ((Date.parse(date)\
    \ > Time.now) || (Date.parse(date) < Time.now - 29.days))\n  valid_date && ((Date.parse(date)\
    \ > Time.now) || (Date.parse(date) < Time.now - 1.day))\n  valid_date && ((Date.parse(date)\
    \ > Time.now) || (Date.parse(date) < Time.now - 1.month))\n  valid_date && ((Date.parse(date)\
    \ > Time.now) || (Date.parse(date) < Time.now - 1.year))\n  valid_date && ((Date.parse(date)\
    \ > Time.now) || (Date.parse(date) < Time.now - 3.months))\n  valid_date && ((Date.parse(date)\
    \ > Time.now) || (Date.parse(date) < Time.now - 1.month))\n  valid_date && ((Date.parse(date)\
    \ > Time.now) || (Date.parse(date) < Time.now - 1.year))\n  valid_date && ((Date.parse(date)\
    \ > Time.now) || (Date.parse(date) < Time.now - 3.months))\n  valid_date && ((Date.parse(date)\
    \ > Time.now) || (Date.parse(date) < Time.now - 1.month))\n  valid_date && ((Date.parse(date)\
    \ > Time.now) || (Date.parse(date) < Time.now - 1.year))\n  valid_date && ((Date.parse(date)\
    \ > Time.now) || (Date.parse(date) < Time.now - 3.months))\n  valid_date && ((Date.parse(date)\
    \ > Time.now) || (Date.parse(date) < Time.now - 1.month))\n  valid_date && ((Date.parse(date)\
    \ > Time.now) || (Date.parse(date) < Time.now - 1.year))\n  valid_date && ((Date.parse(date)\
    \ > Time.now) || (Date.parse(date) < Time.now - 3.months))\n  valid_date && ((Date.parse(date)\
    \ > Time.now) || (Date.parse(date) < Time.now - 1.month))\n  valid_date && ((Date.parse(date)\
    \ > Time.now) || (Date.parse(date) < Time.now - 1.year))\n  valid_date && ((Date.parse(date)\
    \ > Time.now) || (Date.parse(date) < Time.now - 3.months))\n  valid_date && ((Date.parse(date)\
    \ > Time.now) || (Date.parse(date) < Time.now - 1.month))\n  valid_date && ((Date.parse(date)\
    \ > Time.now) || (Date.parse(date) < Time.now - 1.year", "  date = date.strip\n\
    \  if(date == nil)\n     return false\n  elsif (date == \"\")\n     return false\n\
    \  elsif (date.size < 2 || date.size > 4)\n     return false\n  elsif ((date.split(\"\
    -\").size < 1) || (date.split(\"-\").size > 4))\n     return false\n  else\n \
    \   days_array = date.split(\"-\")\n    month = days_array[0].to_i\n    day =\
    \ days_array[1].to_i\n    year = days_array[2].to_i", "  date.present? && !date.empty?\
    \ && date.split('-').count.odd? && date.split('-').count.between?(1,31) && date.split('-').count.between?(1,30)\
    \ && date.split('-').count.between?(1,29) && date.split('-').count.between?(1,12)\
    \ && date.split('-').count.between?(1,12)\nend", "  date_regex = '^(0[1-9]|1[012])[-\
    \ /.](0[1-9]|[12][0-9]|3[01])[- /.](19|20)\\d\\d$'\n  valid = Date.new(date.match(date_regex))\n\
    \  return valid unless valid.empty?\n  day1 = (date.match('(0[1-9]|1[012])[- /.](0[1-9]|[12][0-9]|3[01])')\
    \ ? date.scan(/^(0[1-9]|1[012])[- /.](0[1-9]|[12][0-9]|3[01])$/)[0][1] : date.match('(0[1-9]|1[012])[-\
    \ /.](0[1-9]|[12][0-9]|3[01])[- /.](19|20)\\d\\d') ? date.scan(/^(0[1-9]|1[012])[-\
    \ /.](0[1-9]|[12][0-9]|3[01])[- /.](19|20)\\d\\d$/)[0][1] : date.match('(0[1-9]|1[012])[-\
    \ /.](0[1-9]|[12][0-9]|3[01])[- /.](19|20)\\d\\d') ? date.scan(/^(0[1-9]|1[012])[-\
    \ /.](0[1-9]|[12][0-9]|3[01])[- /.](19|20)\\d\\d$/)[0][2] : date.match('(0[1-9]|1[012])[-\
    \ /.](0[1-9]|[12][0-9]|3[01])[- /.](19|20)\\d\\d') ? date.scan(/^(0[1-9]|1[012])[-\
    \ /.](0[1-9]|[12][0-9]|3[01])[- /.](19|20)\\d\\d$/)[0][2] : date.match('(0[1-9]|1[012])[-\
    \ /.](0[1-9]|[12][0-9]|3[01])[- /.](19|20)\\d\\d') ? date.scan(/^(0[1-9]|1[012])[-\
    \ /.](0[1-9]|[12][0-9]|3[01])[- /.](19|20)\\d\\d$/)[0][3] : date.match('(0[1-9]|1[012])[-\
    \ /.](0[1-9]|[12][0-9]|3[01])[- /.](19|20)\\d\\d') ? date.scan(/^(0[1-9]|1[012])[-\
    \ /.](0[1-9]|[12][0-9]|3[01])[- /.](19|20)\\d\\d$/)[0][3] : date.match('(0[1-9]|1[012])[-\
    \ /.](0[1-9]|[12][0-9]|3[01])[- /.](19|20)\\d\\d') ? date.scan(/^(0[1-9]|1[012])[-\
    \ /.](0[1-9]|[12][0-9]|3[01])[- /.](19|20)\\d\\d$/)[0][4] : date.match('(0[1-9]|1[012])[-\
    \ /.](0[1-9]|[12][0-9]|3[01])", "  date_array = (date.split('-')).map!{|i| i.to_i}\n\
    \  return !(date_array.empty? || date_array.length != 3 ||\n    date_array[0]\
    \ > 12 || date_array[1] < 1 ||\n    date_array[2] < 1 || (date_array[2] > 12 ||\
    \ date_array[0] > 31))\nend\n</cell>\n<cell>", "  if date != ''\n    month = date.slice!(0,2)\n\
    \    day = date.slice!(3,5)\n    year = date.slice!(6,10)\n    if (month != ''\
    \ && month >= 1 && month <= 12) && (day != '' && day >= 1 && day <= 31) && (year\
    \ != '' && year >= 1 && year <= 100)\n      return true\n    end\n  end\n  return\
    \ false\nend", "  # Write your code here\n  date = date.split(\"-\")\n  date =\
    \ [date[1], date[0]]\n  year = int(date[0])\n  month = int(date[1])\n  day = int(date[2])",
  "  date = date.to_s\n  date = date.split(\"-\")\n  date = date[0]\n  date = date.split(\"\
    -\")\n  month = date[1]\n  day  = date[2].to_s\n  day = day.split(\"-\")\n  day\
    \ = day[0]\n  month = month.to_i\n  day = day.to_i", "  date_string = Date.parse(date)\n\
    \  month = (date_string.month - 1) % 12\n  day = (date_string.day - 1) % 31 +\
    \ 1\n  year = date_string.year - (month * 31 + day) / 30\n  months = (year % year\
    \ % 25) + year / 15 - year / 5 + year / 5\n  months = (months * 15 + months /\
    \ 5) % 30\n  return date_string.day <= 29 and date_string.month >= 1 and date_string.month\
    \ < 12 and date_string.day >= 1 and date_string.day <= 31 and date_string.month\
    \ == month and date_string.year >= 1900 and date_string.year <= year + 100\nend",
  "  if date.empty?\n    return false\n  elsif date.count < 1\n    return false\n\
    \  elsif date.count > 31\n    return false\n  end\n  date.split(\"-\").each do\
    \ |d|\n    return true if d.count > 31\n    return true if d.count < 1\n    return\
    \ true if d.count > 30\n    return true if d.count < 29\n  end\n  return true\
    \ if date.split('-').count > 12\n  return false\nend", "  date_obj = DateTime.strptime(date,\
    \ \"%m-%d-%Y\")\n  year = date_obj.year\n  month = date_obj.month\n  day = date_obj.day\n\
    \  valid = year != 0 or month != 0 or day != 0\n  valid = valid and ((month >=\
    \ 1) and (month <= 12) and (day >= 1) and (day <= 31))\n  valid = valid and ((month\
    \ == 4 or month == 6 or month == 9 or month == 11) and (day >= 1) and (day <=\
    \ 30))\n  valid = valid and ((month == 2) and (day >= 1) and (day <= 29))\n  return\
    \ valid\nend", "    date_parts = date.split('-')\n    days_diff = (date_parts[2]<31)\
    \ and (date_parts[2]>30) and (date_parts[3]<12) and (date_parts[3]>29)\n    months_diff\
    \ = (date_parts[0]<12) and (date_parts[0]>12) and (date_parts[1]<12) and (date_parts[1]>12)\n\
    \    \n    if date_parts[0]==date_parts[1] and date_parts[0]==date_parts[2] and\
    \ date_parts[0]==date_parts[3]:\n        return True\n    \n    return False",
  "  \n  # Write your code here\n  if date == nil\n    return False\n  end\n  \n \
    \ date_string = date.to_s\n  \n  if date_string == ''\n    return False\n  end\n\
    \  \n  days_string = date_string.split('-')[0].to_i\n  days_of_month = [nil,31,29,31,30,31,30,31,30,31,30].map\
    \ { |n| n }\n  days_index = date_string.split('-')[1].to_i\n  \n  if days_index\
    \ > days_of_month[days_string - 1] || days_index < 1\n    return False\n  end\n\
    \  \n  if days_index > days_of_month[days_string - 1]\n    days_index -= days_of_month[days_string\
    \ - 1]\n  end\n  \n  return true\nend\n</cell>\n<cell>", "  date != ''\n  date\
    \ = date.split('-')\n  Date.valid_month(date[0])\n  Date.valid_day(date[1])\n\
    \  Date.valid_year(date[2])\nend", "  if date != nil && date.strip.length > 0\n\
    \    date = date.split('-')\n    months = %w(January February March April May\
    \ June July August September October November December)\n    days = %w(0 1 2 3\
    \ 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\
    \ 32)\n    if date.size == 3\n      days.include?(date[2].to_i)\n    elsif date.size\
    \ == 2\n      months.include?(date[0].to_i) && days.include?(date[1].to_i)\n \
    \   else\n      false\n    end\n  else\n    false\n  end\nend\n</code>\nAnd then\
    \ finally use this in your method. \n<code>\ndate_valid = valid_date(date)\n</code>\n\
    <|/ a |>\n<| c |>\nThis is very useful. Thank you\n<|/ c |>\n<| a dscore=0 |>\n\
    I made a simple solution to validate the input using pure Ruby Regexp\n<code>",
  "  return true if date.length != 0 and date.split(\"-\").length == 3 and date.split(\"\
    -\").first.to_i != 0 and date.split(\"-\").last.to_i != 0 and Date.strptime(\"\
    %s-%s-%s\" % date.split(\"-\"), \"%m-%d-%Y\") != nil\nend", "  if date.nil?\n\
    \    false\n  else\n    if date.empty?\n      false\n    else\n      days = get_days(date)\n\
    \      if days < 1 || (days > 31 && days < 30)\n        false\n      else\n  \
    \      months = get_months(date)\n        if months < 1 || (months > 12 && months\
    \ < 12)\n          false\n        else\n          year = date[0..1]\n        \
    \  month = date[2..3]\n          day = date[4..5]\n          years = year.to_i\n\
    \          months = month.to_i\n          days = days.to_i\n          if ((years\
    \ != 4 && years != 6 && years != 9 && years != 11 && years != 13) || (months !=\
    \ 1 && months != 3 && months != 5 && months != 7 && months != 8 && months != 10\
    \ && months != 12)) || (days > 29)\n            false\n          else\n      \
    \      true\n          end\n        end\n      end\n    end\n  end\nend", "  date_string=date.to_s\n\
    \  date_string.strip!\n  if date_string.empty?\n    raise ArgumentError.new(\"\
    The date string is blank\")\n  end\n  months=[\"January\",\"February\",\"March\"\
    ,\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\"\
    ,\"December\"]\n  check_month= date_string.match(/^([1-2][0-9])|([3][1-4])|([5][1-6])|([7][1-8])|([9][1-10])|([11][1-12])/)\n\
    \  days_string=date_string.match(/[1-2][0-9][0-9][0-9]/)\n  check_day= days_string.match(/^[1-9][0-9]/)\n\
    \  year_string=date_string.match(/[0-9][0-9][0-9][0-9]/)\n  check_year= year_string.match(/^[1-9][0-9][0-9][0-9]/)\n\
    \  if months.include?(check_month)\n    return true\n  end\n  if check_day &&\
    \ check_month\n    if check_day && check_month\n      if check_year\n        if\
    \ check_year==check_year\n          return true\n        else\n          return\
    \ false\n        end\n      else\n        return false\n      end\n    else\n\
    \      return false\n    end\n  else\n    return false\n  end\nend", "    # Write\
    \ your code here.\n    valid = False\n    while not valid:\n        date = input()\n\
    \        if date:\n            split = date.split('-')\n            if len(split)\
    \ == 3:\n                month = int(split[1])\n                day = int(split[2])\n\
    \                if month == 1 or month == 3 or month == 5 or month == 7 or month\
    \ == 8 or month == 10 or month == 12:\n                    if day > 31 or day\
    \ < 1:\n                        print(\"Invalid date\")\n                    \
    \    continue\n                elif month == 4 or month == 6 or month == 9 or\
    \ month == 11:\n                    if day > 30:\n                        print(\"\
    Invalid date\")\n                        continue\n                else:\n   \
    \                 if day > 29:\n                        print(\"Invalid date\"\
    )\n                        continue\n                valid = True\n          \
    \  else:\n                print(\"Invalid date\")\n                continue\n\
    \        else:\n            print(\"Invalid date\")\n            continue\n  \
    \  return valid\n        ", "  return date && date !~ /\\A\\s*$/ && date.length\
    \ >= 10 && valid_days(date) && valid_months(date) && valid_year(date)\nend", " \
    \ !(date.length < 1 || date.strip.length < 1) && date.split('-').all? { |date|\
    \ valid_date?(date) }\nend", "    return !date.empty? &&\n            !date.length\
    \ < 1 &&\n            !date.length >= 1 &&\n            !date.strip.length < 1\
    \ &&\n            !date.strip.length >= 1 &&\n            !date.strip =~ /^\\\
    d{4}-\\d{1,2}-\\d{1,2}$/ &&\n            !date.strip =~ /^\\d{4}-\\d{1,2}-\\d{1,2}-\\\
    d{1,2}$/ &&\n            !date.strip =~ /^\\d{4}-\\d{1,2}\\/\\d{1,2}\\/\\d{1,2}$/\
    \ &&\n            !date.strip =~ /^\\d{4}-\\d{1,2}-\\d{1,2}-\\d{1,2}-\\d{1,2}$/\
    \ &&\n            !date.strip =~ /^\\d{4}-\\d{1,2}\\/\\d{1,2}\\/\\d{1,2}\\/\\\
    d{1,2}$/ &&\n            !date.strip =~ /^\\d{4}-\\d{1,2}-\\d{1,2}-\\d{1,2}\\\
    /\\d{1,2}$/ &&\n            !date.strip =~ /^\\d{4}-\\d{1,2}-\\d{1,2}-\\d{1,2}-\\\
    d{1,2}\\/\\d{1,2}$/ &&\n            !date.strip =~ /^\\d{2}-\\d{1,2}-\\d{1,2}$/\
    \ &&\n            !date.strip =~ /^\\d{2}-\\d{1,2}-\\d{1,2}-\\d{1,2}$/ &&\n  \
    \          !date.strip =~ /^\\d{2}-\\d{1,2}\\/\\d{1,2}\\/\\d{1,2}$/ &&\n     \
    \       !date.strip =~ /^\\d{2}-\\d{1,2}-\\d{1,2}-\\d{1,2}$/ &&\n            !date.strip\
    \ =~ /^\\d{2}-\\d{1,2}\\/\\d{1,2}\\/\\d{1,2}$/ &&\n            !date.strip =~\
    \ /^\\d{2}-\\d{1,2}-\\d{1,2}-\\d{1,2}$/ &&\n            !date.strip =~ /^\\d{2}-\\\
    d{1,2}-\\d{1,2}-\\d{1,2}-\\d{1,2}$/ &&\n            !date.strip =~ /^\\d{2}-\\\
    d{1,2}\\/\\d{1,2}\\/\\d{1,2}\\/\\d{1,2}$/ &&\n            !date.strip =~ /^\\\
    d{2}-\\d{1,2}-\\d{1,2}-\\d{1,2}\\/\\d{1,2}$/ &&\n            !date.strip =~ /^\\\
    d{2}-\\d{1,2}-\\d{1,2}-\\d{1,2}-\\d{1,2}-\\d{1,2}$/\nend", "    day = date.day\n\
    \    month = date.month\n    year = date.year", "  date_regex = /^(\\d{1,2})-(\\\
    d{1,2})-(\\d{2,4})$/\n  date_matches = date_regex.match(date)\n  date_parts =\
    \ date_matches.captures\n  months_allowed = [1, 3, 5, 7, 8, 10, 12]\n  days_allowed\
    \ = [1, 3, 30, 29, 30, 31]\n  month_allowed = [4, 6, 9, 11]\n  if date_parts ==\
    \ nil or date_parts.length != 3 or date_parts[1].length != 2 or date_parts[2].length\
    \ != 4 or Date.new(date_parts[1], date_parts[2],date_parts[2]).month < 1 or Date.new(date_parts[1],\
    \ date_parts[2],date_parts[2]).month > 12 or Date.new(date_parts[1], date_parts[2],date_parts[2]).day\
    \ < 1 or Date.new(date_parts[1], date_parts[2],date_parts[2]).day > 30 or Date.new(date_parts[1],\
    \ date_parts[2],date_parts[2]).month < 1 or Date.new(date_parts[1], date_parts[2],date_parts[2]).month\
    \ > 12 or Date.new(date_parts[1], date_parts[2],date_parts[2]).day < 1 or Date.new(date_parts[1],\
    \ date_parts[2],date_parts[2]).day > 29 or Date.new(date_parts[1], date_parts[2],date_parts[2]).month\
    \ < 4 or Date.new(date_parts[1], date_parts[2],date_parts[2]).month > 12 or Date.new(date_parts[1],\
    \ date_parts[2],date_parts[2]).day < 4 or Date.new(date_parts[1], date_parts[2],date_parts[2]).day\
    \ > 29\n    return false\n  elsif date_parts[1] > 12 or date_parts[1] < 1 or date_parts[2]\
    \ > 12 or date_parts[2] < 1 or date_parts[2] > 31 or date_parts[2] < 1 or date_parts[1]\
    \ > 12 or date_parts[1] < 1 or date_parts[1] > 31 or date_parts[1] < 4\n    return\
    \ false\n  elsif date_parts[1] == 1 or date_parts[1] == 3 or date_parts[1] ==\
    \ 5 or date_parts[1] == 7 or date_parts[1] == 8 or date_parts[1] == 10 || date_parts[1]\
    \ == 12\n    return false\n  elsif date_parts[1] == 4 or date_parts[1] == 6 or\
    \ date_parts[1] == 9 or date_parts[1] == 11\n    return false\n  elsif date_parts[1]\
    \ == 2 or date_parts[1] == 4\n    return true\n  end\nend", "    date = date.split('-')\n\
    \    month = date[0]\n    day = date[1]\n    year = date[2]\n    if (month < 1)\
    \ or (month > 12):\n        return False\n    if (day < 1) or (day > 30):\n  \
    \      return False\n    if (month == 2) or (month == 4) or (month == 6) or (month\
    \ == 9) or (month == 11):\n        if (day < 1) or (day > 29):\n            return\
    \ False\n    month = month - 1\n    day = day - 1\n    if (month < 1) or (month\
    \ > 12):\n        return False\n    if (day < 1) or (day > 30):\n        return\
    \ False\n    if (month == 2) or (month == 4) or (month == 6) or (month == 9) or\
    \ (month == 11):\n        if (day < 1) or (day > 29):\n            return False\n\
    \    return True", "  date_regex = /^((0?[1-9]|1[012])[\\-\\/](0?[1-9]|[12][0-9]|3[01])[\\\
    -\\/](19|20)\\d\\d)$/\n  date_match = date.match(date_regex)\n  if date_match\n\
    \    Date.new(date_match[1], date_match[2], date_match[3])\n  else\n    Date.new(date)\
    \ if date.empty?\n  end\nend", "  date.strip!\n  return true unless date.present?\n\
    \  return true if date.empty?\n  return true if (params[:month].to_i < 1 || params[:month].to_i\
    \ > 12) || params[:month].to_i < 1\n  return true if (params[:day].to_i < 1 ||\
    \ params[:day].to_i > 31) || params[:day].to_i < 1 || params[:day].to_i > 30\n\
    \  return true if (params[:year].to_i < 1 || params[:year].to_i > 9999)\n  return\
    \ true if date.to_s.split('-').size == 3\n  false\nend", "  date = date.to_s\n\
    \  return !date.empty? && date.to_s.size > 10 && date.to_s.gsub!(/[^0-31]/, '')\
    \ && date.to_s.gsub!(/[\\d]{4}-[\\d]{2}-[\\d]{2}/, '') && date.to_s.gsub!(/[\\\
    d]{4}-[\\d]{2}-[\\d]{2}/, '').gsub!(/[\\d]{4}-[\\d]{2}-[\\d]{2}/, '') && date.to_s.gsub!(/[\\\
    d]{4}-[\\d]{2}-[\\d]{2}/, '').gsub!(/[\\d]{4}-[\\d]{2}-[\\d]{2}/, '').gsub!(/[\\\
    d]{4}-[\\d]{2}-[\\d]{2}/, '').to_i.between?(1, 31) && date.to_s.gsub!(/[\\d]{4}-[\\\
    d]{2}-[\\d]{2}/, '').to_i.between?(4, 12) && date.to_s.gsub!(/[\\d]{4}-[\\d]{2}-[\\\
    d]{2}/, '').to_i.between?(1, 30)\nend", "  date_regexp = /(?:(?:31(\\/|-|\\.)(?:0?[13578]|1[02]))\\\
    1|(?:(?:29|30)(\\/|-|\\.)(?:0?[1,3-9]|1[0-2])\\2))(?:(?:1[6-9]|[2-9]\\d)?\\d{2})$|^(?:29(\\\
    /|-|\\.)0?2\\3(?:(?:(?:1[6-9]|[2-9]\\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00)?))$|^(?:0?[1-9]|1\\\
    d|2[0-8])(\\/|-|\\.)(?:(?:0?[1-9])|(?:1[0-2]))\\4(?:(?:1[6-9]|[2-9]\\d)?\\d{2})$/\n\
    \  return !date_regexp.match(date) == nil\nend", "  \n  # your code here\n  date_array\
    \ = date.split('-')\n  if(date_array[0].length > 0)\n    date_array.shift\n  end",
  "  invalid_date_strings = false\n  date_parts = date.split('-')\n  days_range =\
    \ 31..30\n  months_range = 1..12\n  months_range = months_range + months_range[0..2]\n\
    \  days_range = days_range + days_range[0..2]", "  date_string = date.to_s\n \
    \ unless date_string.empty?\n    unless ((1..12).cover?(date_string.month)) &&\
    \ ((31..30).cover?(date_string.day)) && ((31..30).cover?(date_string.year))\n\
    \      return false\n    end\n    unless ((1..12).cover?(date_string.month)) &&\
    \ ((29..28).cover?(date_string.day))\n      return false\n    end\n  end\n  return\
    \ true\nend", "    valid_date = True\n    \n    date_arr = date.split(\"-\")\n\
    \    \n    if len(date_arr) != 3:\n        valid_date = False\n    else:\n   \
    \     try:\n            int(date_arr[0]) > 12 or int(date_arr[0]) < 1\n      \
    \      int(date_arr[1]) > 30 or int(date_arr[1]) < 1 or int(date_arr[2]) > 30\
    \ or int(date_arr[2]) < 1\n            int(date_arr[1]) > 29 or int(date_arr[1])\
    \ < 1 or int(date_arr[2]) > 29 or int(date_arr[2]) < 1\n        except ValueError:\n\
    \            valid_date = False\n    return valid_date", "  date_regex = /((0[1-9]|1[0-2])-(0[1-9]|1\\\
    d|2\\d|3[01])-(19|20)\\d\\d|(0[1-9]|1[0-2])-(0[1-9]|1\\d|2\\d|3[01])-(19|20)\\\
    d\\d)/\n  match = date_regex.match(date)\n  return !match || match.length == 3\n\
    end", "    if date.strip == \"\"\n        return false\n    end\n    if date.to_s.split('-').length\
    \ != 3\n        return false\n    end\n    if date.to_s.split('-')[1].to_i >=\
    \ 12 || date.to_s.split('-')[1].to_i <= 0\n        return false\n    end\n   \
    \ if date.to_s.split('-')[2].to_i > 0\n        return false\n    end\n    if date.to_s.split('-')[0].to_i\
    \ >= 1 || date.to_s.split('-')[0].to_i <= 0\n        return false\n    end\n \
    \   if date.to_s.split('-')[2].to_i >= 31 || date.to_s.split('-')[2].to_i <= 0\n\
    \        return false\n    end\n    if date.to_s.split('-')[1].to_i >= 28 || date.to_s.split('-')[1].to_i\
    \ <= 0\n        return false\n    end\n    return true\nend", "  raise \"Invalid\
    \ date\" if date == nil or date == \"\"\n  m = Date.strptime(date, \"%m-%d-%Y\"\
    )\n  raise \"Invalid date\" if m.nil?\n  d = m.year * 100 + m.month\n  raise \"\
    Invalid date\" if d < 1 or d > 12\n  raise \"Invalid date\" if d != (d + 1)\n\
    \  raise \"Invalid date\" if d < 29 and d > 30\n  raise \"Invalid date\" if d\
    \ < 31 and (d + 1) != 29\n  raise \"Invalid date\" if d > 12 and (d - 1) != 29\n\
    \  return true\nend", "  date_regex = /^(0[1-9]|1[012])\\-(0[1-9]|[12][0-9]|3[01])\\\
    -\\d\\d\\d\\d$/\n  m = date.match(date_regex)\n  return !m || m.length==3 && m[2].length\
    \ == 4\nend", "  date != '' && !date.empty? && !date.start_with?('-') && !date.end_with?('-')\n\
    end", "  date_split = date.split('-')\n  if date_split.length != 3 or date_split[1]\
    \ < 1 or date_split[2] < 1\n  or date_split[1] > 12 or date_split[2] > 12\n  or\
    \ date_split[1] > date_split[2]\n  or date_split[2] > 31\n  or date_split[1] >\
    \ 30 or (date_split[1] == 1 and date_split[2] > 29)\n  or date_split[1] > 31\n\
    \  or date_split[1] > 30\n  return date_split.length == 3 and date_split[2] >\
    \ 29\nend\n</code>\n<|/ a dscore=4 |>\n<| c |>\nI agree with you. But i just wanted\
    \ to do it in python for the learning purpose.\n<|/ c |>\n<| c |>\n: You should\
    \ probably take that comment as a sign that you should actually try it rather\
    \ than asking others to do it for you.\n<|/ c |>\n<| c |>\nThanks for your help.\
    \ Your solution is very helpful.\n<|/ c |>\n<| a dscore=3 |>\nI would probably\
    \ do something like this:\n<code>", "  puts \"in valid_date method : #{date}\"\
    \n  date_val = Date.parse(date)\n  puts \"after parse #{date_val}\"\n  return\
    \ date_val\nend", "  date = date.split(\" - \")\n  \n  if(date.nil?)\n    return\
    \ false\n  end", "  return true # write the code here\nend", "  if date.empty?\n\
    \    return false\n  elsif (date.count(/[1-3]|[01]\\d-[0123]\\d|[012]\\d-[1-3]/)\
    \ != (date.count(\",\") - 1))\n    return false\n  elsif (date.count(/[4-6]\\\
    d|[7-9]\\d/) < 1 or date.count(/[10]\\d/) < 1 or date.count(/[12]\\d/) < 1 )\n\
    \    return false\n  elsif (date.count(/[0-3]|[01]\\d/) < 1 or date.count(/[0123]/)\
    \ < 1 or date.count(/[012]/) < 1 )\n    return false\n  else\n    return true\n\
    \  end\nend", "\tdate = string.gsub(date, \"-\", \"\")\n\tdate = string.gsub(date,\
    \ \"/\", \"\")\n\tarray = date.split(\"/\")\n\tif array.length > 0\n\t\tdate =\
    \ (array[0] <> \"\") and (array[1] <> \"\") and ((array[2] <> \"\") and ((array[0].length\
    \ == 2) or (array[0].length == 4)) and (array[0] <> \"01\") and (array[0] <> \"\
    02\") and (array[0] <> \"03\") and (array[0] <> \"04\") and (array[0] <> \"05\"\
    ) and (array[0] <> \"06\") and (array[0] <> \"07\") and (array[0] <> \"08\") and\
    \ (array[0] <> \"09\") and (array[0] <> \"10\") and (array[0] <> \"11\") and (array[0]\
    \ <> \"12\") and (array[1].length != 2) and (array[1].length != 4) and (array[2].length\
    \ != 2) and (array[2].length != 4) and ((array[0].length == 4) and (array[1].length\
    \ == 4) and (array[2].length == 4)) and (array[0].length == 2) and (array[1].length\
    \ == 2) and (array[2].length == 2) and ((array[1].length == 4) or (array[2].length\
    \ == 4))\n\tend\n\treturn date\nend", "  valid_date_format1 = /\\d{4}-\\d{2}-\\\
    d{2}/\n  valid_date_format2 = /\\d{2}-\\d{2}-\\d{4}/\n  valid_date_format3 = /\\\
    d{2}-\\d{3}/\n  valid_date_format4 = /\\d{2}-\\d{2}/\n  valid_date_format5 = /\\\
    d{2}-\\d{1}/", "  if date != \"\"\n    days_of_month = [31,28,31,30,31,30,31,30,31,30,31,30]\n\
    \    days_of_month[1] = 29\n    days_of_month[4] = 29\n    days_of_month[6] =\
    \ 29\n    days_of_month[9] = 29\n    days_of_month[11] = 29\n    days_of_month[13]\
    \ = 29\n    days_of_month[14] = 29\n    days_of_month[15] = 29\n    days_of_month[16]\
    \ = 29\n    days_of_month[17] = 29\n    days_of_month[18] = 29\n    days_of_month[19]\
    \ = 29\n    days_of_month[20] = 29\n    days_of_month[21] = 30\n    days_of_month[22]\
    \ = 30\n    days_of_month[23] = 30\n    days_of_month[24] = 30\n    days_of_month[25]\
    \ = 30\n    days_of_month[26] = 30\n    days_of_month[27] = 30\n    days_of_month[28]\
    \ = 31\n    months_of_year = [0,1,2,3,4,5,6,7,8,9,10,11,12]\n    months_of_year[1]\
    \ = 12\n    months_of_year[3] = 12\n    months_of_year[5] = 12\n    months_of_year[7]\
    \ = 12\n    months_of_year[8] = 12\n    months_of_year[10] = 12\n    months_of_year[12]\
    \ = 12\n    months_of_year[13] = 12\n    months_of_year[14] = 12\n    months_of_year[15]\
    \ = 12\n    months_of_year[16] = 12\n    months_of_year[17] = 12\n    months_of_year[18]\
    \ = 12\n    months_of_year[19] = 12\n    months_of_year[20] = 12\n    months_of_year[21]\
    \ = 12\n    months_of_year[22] = 12\n    months_of_year[23] = 12\n    months_of_year[24]\
    \ = 12\n    months_of_year[25] = 12\n    months_of_year[26] = 12\n    months_of_year[27]\
    \ = 12\n    months_of_year[28] = 12\n    days_of_month.each_with_index do |day,\
    \ index|\n      if day <= days_of_month[index] or days_of_month[index] == 31\n\
    \        break\n      end\n    end\n    months_of_year.each_with_index do |month,\
    \ index|\n      if month <= months_of_year[index] or months_of_year[index] ==\
    \ 12\n        break\n      end\n    end\n    days_of_month = days_of_month.first(8)\n\
    \    days_of_month", "  date = date.to_s\n  date = \"#{date[0...date.index(' ')]}-#{date[date.index('\
    \ ')+1..date.rindex(' ')-1]}\"\n  date = date.split('-')\n  if(date.length !=\
    \ 3)\n    return false\n  end\n  months = %w(1 3 5 7 8 10 12)\n  if(months.index(date[0].to_i)\
    \ < 1 || months.index(date[1].to_i) < 1 || months.index(date[2].to_i) < 1)\n \
    \   return false\n  end\n  if(date[0].to_i ==1 || date[0].to_i ==3 || date[0].to_i\
    \ ==5 || date[0].to_i ==7 || date[0].to_i ==8 || date[0].to_i ==10 || date[0].to_i\
    \ ==12)\n    return false\n  end\n  if(date[1].to_i ==4 || date[1].to_i ==6 ||\
    \ date[1].to_i ==9 || date[1].to_i ==11)\n    return false\n  end\n  if(date[2].to_i\
    \ ==2)\n    return false\n  end\n  if(date[0].to_i ==1 || date[0].to_i ==3 ||\
    \ date[0].to_i ==5 || date[0].to_i ==7 || date[0].to_i ==8 || date[0].to_i ==10\
    \ || date[0].to_i ==12)\n    if(date[2].to_i ==2)\n      return false\n    end\n\
    \  end\n  return true\nend", "  return !(date.empty? or Date.parse(date).to_i\
    \ < 1 or\n           Date.parse(date).to_i > 31)\nend", "  result = true\n  #\
    \ Write your code here\n  return result\nend", "  if !date.length?\n    return\
    \ false\n  end\n  return !date.blank? && !date.to_s.strip.empty?\nend\n</code>\n\
    Hope that helps\n<|/ a dscore=2 tags=ruby,ruby-on-rails |>\n<| c |>\nAwesome :)\
    \ Thanks a lot :)\n<|/ c |>\n<| a dscore=1 tags=ruby,ruby-on-rails |>\nThis looks\
    \ like a good place to use ruby's built in Time class and the strptime method.\n\
    <code>", "   if date != \"\"\n      days = [31,29,30,31\n         ,31,30,31,30,31,30,31,30,31,30,31]\n\
    \      months = [1,2,3,4,5,6,7,8,9,10,11,12]\n      date_array = date.split(\"\
    -\")\n      if date_array.length == 3\n         if date_array[0].length == 2 &&\
    \ date_array[1].length == 2\n            if date_array[0] == date_array[1] &&\
    \ date_array[1] == date_array[2]\n               return true\n            else\
    \ if date_array[0] == date_array[1]\n               return true\n            else\
    \ if date_array[0] == date_array[1] && date_array[2] != date_array[1]\n      \
    \         return true\n         end\n      end\n      if date_array.length ==\
    \ 2\n         if date_array[0].length == 2 && date_array[1].length == 1\n    \
    \        if date_array[0] == date_array[1] && date_array[1] == \"1\"\n       \
    \        return true\n            else if date_array[0] == date_array[1] && date_array[1]\
    \ == \"2\"\n               return true\n            else if date_array[0] == date_array[1]\
    \ && date_array[1] == \"3\"\n               return true\n            else if date_array[0]\
    \ == date_array[1] && date_array[1] == \"4\"\n               return true\n   \
    \         else if date_array[0] == date_array[1] && date_array[1] == \"5\"\n \
    \              return true\n            else if date_array[0] == date_array[1]\
    \ && date_array[1] == \"6\"\n               return true\n            else if date_array[0]\
    \ == date_array[1] && date_array[1] == \"7\"\n               return true\n   \
    \         else if date_array[0] == date_array[1] && date_array[1] == \"8\"\n \
    \              return true\n            else if date_array[0] == date_array[1]\
    \ && date_array[1] == \"9\"\n               return true\n            else if date_array[0]\
    \ == date_array[1] && date_array[1] == \"10\"\n               return true\n  \
    \          else if date_array[0] == date_array[1] && date_array[1] == \"11\"\n\
    \               return true\n            else if date_array[0] == date_array[1]\
    \ && date_array[1] == \"12\"\n               return true\n         end\n     \
    \ end\n      if date_array.length == 1\n         if date_array[0].length == 2\n\
    \            if date_array[0] == \"01\" || date_array[0] == \"03\" || date_array[0]\
    \ == \"05\" || date_array[0] == \"07\" || date_array[0] == \"08\" || date_array[0]\
    \ == \"10\" || date_array[0] == \"12\"\n               return true\n         \
    \   end\n         end\n      end\n   end\n   return false\nend\n</code>\n<|/ a\
    \ |>\n<| a tags=validation,ruby,date,ruby-on-rails dscore=1 |>\nUse validates_date\
    \ gem.\n<code>\nrequire 'validates_date'", "  # Write your code here\n  return\
    \ date.length > 0 && date.to_s.length != 0 && date.to_s.length != 10 && date.to_s.length\
    \ != 13 && Date.valid_month(date.to_s) && Date.valid_day(date.to_s) && Date.valid_year(date.to_s)\n\
    end\n</code>\n<|/ a |>\n<| c |>\nIt would be better to post your code directly\
    \ here instead of linking to it.\n<|/ c |>\n<| c |>\nThis answer was already given\
    \ by someone else. I just wanted to share my code which is working fine.\n<|/\
    \ c |>\n<| c |>\nWhile this code may solve the question, [including an explanation](//meta.stackexchange.com/q/114762)\
    \ of how and why this solves the problem would really help to improve the quality\
    \ of your post, and probably result in more up-votes. Remember that you are answering\
    \ the question for readers in the future, not just the person asking now. Please\
    \ [edit] your answer to add explanations and give an indication of what limitations\
    \ and assumptions apply.\n<|/ c |>\n<| a dscore=4 |>\nThis worked for me (Rails\
    \ 4):\n<code>", "    valid_month = false\n    valid_year = false\n    valid_days\
    \ = false\n    valid_date = false", "  date_array = date.split('-')\n  if(date_array[0].length\
    \ == 0) return false\n  if(date_array.length == 1 || date_array.length == 3 ||\
    \ date_array.length == 5 || date_array.length == 7 || date_array.length == 9 ||\
    \ date_array.length == 11 || date_array.length == 13 || date_array.length == 15\
    \ || date_array.length == 17 || date_array.length == 19 || date_array.length ==\
    \ 21 || date_array.length == 24 || date_array.length == 26 || date_array.length\
    \ == 28 || date_array.length == 30) return true\n  if(date_array.length == 2 &&\
    \ date_array[1].length == 1 ) return true\n  if(date_array.length == 4 && date_array[3].length\
    \ == 1 ) return true\n  if(date_array.length == 6 && date_array[5].length == 1\
    \ ) return true\n  if(date_array.length == 9 && date_array[7].length == 1 ) return\
    \ true\n  if(date_array.length == 11 && date_array[9].length == 1 ) return true\n\
    \  if(date_array.length == 12 && date_array[11].length == 1 ) return true\n  if(date_array.length\
    \ == 1 && date_array[2].length == 2 && date_array[1].length == 2 && date_array[0].length\
    \ == 2 && date_array[3].length == 2 && date_array[5].length == 2 && date_array[7].length\
    \ == 2 && date_array[9].length == 2 && date_array[11].length == 2 && date_array[13].length\
    \ == 2 && date_array[15].length == 2 && date_array[17].length == 2 && date_array[19].length\
    \ == 2 && date_array[21].length == 2 && date_array[24].length == 2 && date_array[26].length\
    \ == 2 && date_array[28].length == 2 && date_array[30].length == 2 ) return true\n\
    \  return false\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails,date,validation,date\
    \ |>\n<| c |>\nIn ruby 1.9+, date_array = date.split(\"-\") is more concise than\
    \ date_array = date.split('-')\n<|/ c |>\n<| c |>\n, You are right. Thanks for\
    \ pointing that out.\n<|/ c |>\n<| a |>\nI'm new to ruby but from what I see this\
    \ would work:\n<code>", "    date = date.strip();\n    arr = date.split('-');\n\
    \    if len(arr) != 3 and len(arr) != 2 or arr[0] != arr[1] or arr[1] > 12 or\
    \ arr[2] > 31 or arr[2] < 1 or arr[1] < 1 or arr[2] < 1 or arr[1] > 12 or  arr[1]\
    \ > 30 or arr[1] < 1 or arr[1] < 1 or arr[1] < 2 or arr[2] > 29 or arr[1] > 12\
    \ or arr[2] < 1 or arr[1] > 12\n        return False\n    month = arr[0];\n  \
    \  day = arr[1];\n    year = arr[2];\n    if month == None or day == None or year\
    \ == None:\n        return False\n    if month == '' or day == '' or year == '':\n\
    \        return False\n    if month > 12 or day > 31 or year > 9999 or year <\
    \ 1900:\n        return False\n    if month < 1 or day < 1 or day > 30 or month\
    \ > 12 or month < 1 or day < 1 or day > 29 or month < 2 or day < 1 or day > 31\
    \ or month < 2 or day < 1 or day > 30 or month < 2 or day < 1 or day > 30 or month\
    \ < 2 or day < 1 or day > 30 or month < 2 or day < 1 or day > 30 or month < 2\
    \ or day < 1 or day > 30 or month < 2 or day < 1 or day > 30 or month < 2 or day\
    \ < 1 or day > 30 or month < 2 or day < 1 or day > 30 or month < 2 or day < 1\
    \ or day > 30 or month < 2 or day < 1 or day > 30 or month < 2 or day < 1 or day\
    \ > 30 or month < 2 or day < 1 or day > 30 or month < 2 or day < 1 or day > 30\
    \ or month < 2 or day < 1 or day > 30 or month < 2 or day < 1 or day > 30 or month\
    \ < 2 or day < 1 or day > 30 or month < 2 or day < 1 or day > 30 or month < 2\
    \ or day < 1 or day > 30 or month < 2 or day < 1 or day > 30 or month < 2 or day\
    \ < 1 or day > 30 or month < 2 or day < 1 or day > 30 or month < 2 or day < 1\
    \ or day > 30 or month < 2 or day < 1 or day > 30 or month < 2 or day < 1 or day\
    \ > 30 or month < 2 or day < 1 or day > 30 or month < 2 or day < 1 or day > 30\
    \ or month < 2 or day < 1 or day > 30 or month < 2 or day < 1 or day > 30 or month\
    \ < 2 or day < 1 or day > 30 or month < 2 or day < 1 or day > 30 or month < 2\
    \ or day < 1 or day > 30 or month < 2 or day < 1 or day > 30 or month < 2 or day\
    \ < ", "  date_array = date.split('-')\n  if date_array.length != 3 || date_array[1].length\
    \ != 2 || date_array[2].length != 2 || date_array[0].length != 2 || date_array[0].length\
    \ != 2 || date_array[2].length != 2 || date_array[1].length != 2\n    return false\n\
    \  else\n    return true\n  end\nend", '  return date && date.match(/^\d+-\d+-\d+$/)
    && date.match("^((0?[1-9]|1[012])[-\/\.](0?[1-9]|[12][0-9]|3[01])[-\/\.](19|20)\d\d$")
    && date.match("^((0?[1-9]|1[012])[-\/\.](0?[1-9]|[12][0-9]|30)[-\/\.](19|20)\d\d$")
    && date.match("^((0?[1-9]|1[012])[-\/\.](0?[1-9]|[12][0-9])[-\/\.](19|20)\d\d$")
    && date.match("^((0?[1-9]|1[012])[-\/\.](0?[1-9]|[12][0-9])[-\/\.](19|20)\d\d$")
    && date.match("^((0?[1-9]|1[012])[-\/\.](0?[1-9]|[12][0-9])[-\/\.](19|20)\d\d$")
    && date.match("^((0?[1-9]|1[012])[-\/\.](0?[1-9]|[12][0-9])[-\/\.](19|20)\d\d$")
    && date.match("^((0?[1-9]|1[012])[-\/\.](0?[1-9]|[12][0-9])[-\/\.](19|20)\d\d$")
    && date.match("^((0?[1-9]|1[012])[-\/\.](0?[1-9]|[12][0-9])[-\/\.](19|20)\d\d$")
    && date.match("^((0?[1-9]|1[012])[-\/\.](0?[1-9]|[12][0-9])[-\/\.](19|20)\d\d$")
    && date.match("^((0?[1-9]|1[012])[-\/\.](0?[1-9]|[12][0-9])[-\/\.](19|20)\d\d$")
    && date.match("^((0?[1-9]|1[012])[-\/\.](0?[1-9]|[12][0-9])[-\/\.](19|20)\d\d$")
    && date.match("^((0?[1-9]|1[012])[-\/\.](0?[1-9]|[12][0-9])[-\/\.](19|20)\d\d$")
    && date.match("^((0?[1-9]|1[012])[-\/\.](0?[1-9]|[12][0-9])[-\/\.](19|20)\d\d$")
    && date.match("^((0?[1-9]|1[012])[-\/\.](0?[1-9]|[12][0-9])[-\/\.](19|20)\d\d$")
    && date.match("^((0?[1-9]|1[012])[-\/\.](0?[1-9]|[12][0-9', "  # Write your code\
    \ here\n  result = true\n  date_str=date\n  month = date_str[date_str.index('-')..date_str.index('.')]\n\
    \  day = date_str[date_str.index('.') + 2..date_str.index(' ')]\n  year = date_str[0..date_str.index('\
    \ ')]", "  if(date == \"\" or date.count(\"-\") > 2 or date.count(\",\") < 2 or\
    \ date.count(\".\") < 2)\n    return False\n  days_array = date.split(\"-\")\n\
    \  days_array = days_array[0].split(\"+\")\n  months_array = days_array[1].split(\"\
    ,\")\n  months_array = months_array[0].split(\"-\")\n  months_array = months_array[0].split(\"\
    +\")\n  if(months_array[0] != 1 or months_array[2] != 1 or months_array[2] !=\
    \ 12)\n    return False\n  if(days_array[2] < 1 or days_array[2] > 31)\n    return\
    \ False\n  if(days_array[1] < 1 or days_array[1] > 30)\n    return False\n  return\
    \ True", "  raise \"Not implemented.\"\nend", "    date_split = date.split('-')\n\
    \    if date_split[0] and date_split[1] and date_split[2]:\n        day_count\
    \ = [31,28,31,30,31,30,31,30,31,30,31]\n        date_split[0] = date_split[0].zfill(2)\n\
    \        date_split[1] = date_split[1].zfill(2)\n        date_split[2] = date_split[2].zfill(2)\n\
    \        for i,j in enumerate(date_split):\n            day_count[i] -= 1\n  \
    \          if j.isdigit() and int(j) > 0 and int(j) < len(day_count):\n      \
    \          if int(j) == 3 or int(j) == 5 or int(j) == 7 or int(j) == 8 or int(j)\
    \ == 10 or int(j) == 12:\n                    date_split[i] = date_split[i].zfill(2)\n\
    \                elif int(j) == 1 or int(j) == 4 or int(j) == 6 or int(j) == 9\
    \ or int(j) == 11:\n                    date_split[i] = date_split[i].zfill(2)\n\
    \                elif int(j) == 2 or int(j) == 3 or int(j) == 5 or int(j) == 6:\n\
    \                    date_split[i] = date_split[i].zfill(2)\n                elif\
    \ int(j) == 0 or int(j) == 1 or int(j) == 2 or (int(j) == 3 and int(date_split[i])\
    \ > 15):\n                    date_split[i] = date_split[i].zfill(2)\n       \
    \         elif int(j) == 0 or int(j) == 1 or int(j) == 2 or (int(j) == 3 and int(date_split[i])\
    \ < 1):\n                    return False\n        date_split = [int(date_split[i])\
    \ for i in date_split]\n        return (date_split[0] == date_split[1]) and (date_split[1]\
    \ == date_split[2]) and (date_split[2] == date_split[3]) and (date_split[3] ==\
    \ date_split[4]) and (date_split[4] == date_split[5]) and (date_split[5] == date_split[6])\
    \ and (date_split[6] == date_split[7]) and (date_split[7] == date_split[8]) and\
    \ (date_split[8] == date_split[9]) and (date_split[9] == date_split[10]) and (date_split[10]\
    \ == date_split[11]) and (date_split[11] == date_split[12]) and (date_split[12]\
    \ == date_split[13]) and (date_split[13] == date_split[14]) and (date_split[14]\
    \ == date_split[15]) and (date_split[15] == date_split[16]) and (date_split[16]\
    \ == date_split[17]) and (date_split[17] == date_split[18]) and (date_split[18]\
    \ == date_split[19]) and (date_split[19] == date_split[20]) and (date_split[20]\
    \ == date_split[21]) and (date_split[21] == date_split[22]) and (date_split[22]\
    \ == date_split[23]) and (date_split", "  date_regex = /^(?:(?:31(\\/|-|\\.)(?:0?[13578]|1[02]))\\\
    1|(?:(?:29|30)(\\/|-|\\.)(?:0?[1,3-9]|1[0-2])\\2))(?:(?:1[6-9]|[2-9]\\d)?\\d{2})$|^(?:29(\\\
    /|-|\\.)0?2\\3(?:(?:(?:1[6-9]|[2-9]\\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00))))$|^(?:0?[1-9]|1\\\
    d|2[0-8])(\\/|-|\\.)(?:(?:0?[1-9])|(?:1[0-2]))\\4(?:(?:1[6-9]|[2-9]\\d)?\\d{2})$/\n\
    \  return date_regex.match(date)\nend\n</code>\n<|/ a tags=ruby,regex dscore=1\
    \ |>\n<| a dscore=0 |>\nYou might want to have a look at this: \n<code>\n/^(\\\
    d{4}-\\d{2}-\\d{2})(\\s|-)(\\d{4}-\\d{2}-\\d{2})$|(\\d{4}-\\d{2}-\\d{2})(\\s|-)(\\\
    d{4}-\\d{2}-\\d{2})(\\s|-)(\\d{4}-\\d{2}-\\d{2})(\\s|-)(\\d{4}-\\d{2}-\\d{2})(\\\
    s|-)(\\d{4}-\\d{2}-\\d{2})$|(\\d{4}-\\d{2}-\\d{2})(\\s|-)(\\d{4}-\\d{2}-\\d{2})(\\\
    s|-)(\\d{4}-\\d{2}-\\d{2})(\\s|-)(\\d{4}-\\d{2}-\\d{2})(\\s|-)(\\d{4}-\\d{2}-\\\
    d{2})$/\n</code>\nI tested this one with rubular.com.\n<|/ a tags=ruby,regex |>\n\
    <| a dscore=0 tags=ruby,regex |>\nI have two suggestions. First, use Date and\
    \ Time instead of Regex since you don't have much time to do it. I also have two\
    \ suggestions to speed up your regex. First, your regex is very long and hard\
    \ to read when written like that. Second, you can make a shorter regex by using\
    \ the \\d character class instead of writing out the whole range. Third, you can\
    \ combine a character class with another one to make the whole thing more readable.\n\
    <code>"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
