name: HumanEval_46_fib4
language: rb
prompt: "# The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
  \ that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2) -> 2\n#\
  \ fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n# Please\
  \ write a function to efficiently compute the n-th element of the fib4 number sequence.\
  \  Do not use recursion.\ndef fib4(n)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib4\n\
  \    candidate = method(:fib4)\n    assert_equal(4, candidate.call(5))\n    assert_equal(28,\
  \ candidate.call(8))\n    assert_equal(104, candidate.call(10))\n    assert_equal(386,\
  \ candidate.call(12))\n  end\nend\n"
completions: ["    memo = {}\n    if n <= 0\n        memo[:] = 0\n        return fib4(n\
    \ - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n    memo[n] = fib4(n - 1) +\
    \ fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n    return memo[n]\nend", "  fib4.times\
    \ do |i|\n    if n <= i\n      fib4.fib4(n) =  fib4.fib4(n-1) + fib4.fib4(n-2)\
    \ + fib4.fib4(n-3) + fib4.fib4(n-4)\n      break\n    end\n  end\nend\n</cell>\n\
    <cell>\nfib4.fib4(0)\n</cell>\n<cell>\nfib4.fib4(1)\n</cell>\n<cell>\nfib4.fib4(2)\n\
    </cell>\n<cell>\nfib4.fib4(3)\n</cell>\n<cell>\nfib4.fib4(4)\n</cell>\n<cell>\n\
    fib4.fib4(5)\n</cell>\n<cell>\nfib4.fib4(10)\n</cell>\n<cell>\nfib4.fib4(100)\n\
    </cell>\n<cell>\nfib4.fib4(1000)\n</cell>\n<cell>\nfib4.fib4(100000)\n</cell>\n\
    <cell>\nfib4.fib4(1000000)\n</cell>\n<cell>\nfib4.fib4(10000000)\n</cell>\n<cell>\n\
    fib4.fib4(100000000)\n</cell>\n<cell>\nfib4.fib4(1000000000)\n</cell>\n<cell>\n\
    fib4.fib4(10000000000)\n</cell>\n<cell>\nfib4.fib4(100000000000)\n</cell>\n<cell>\n\
    fib4.fib4(1000000000000)\n</cell>\n<cell>\nfib4.fib4(1000000000001)\n</cell>\n\
    <cell>\nfib4.fib4(1000000000002)\n</cell>\n<cell>\nfib4.fib4(1000000000003)\n\
    </cell>\n<cell>\nfib4.fib4(1000000000004)\n</cell>\n<cell>\nfib4.fib4(1000000000005)\n\
    </cell>\n<cell>\nfib4.fib4(1000000000006)\n</cell>\n<cell>\nfib4.fib4(1000000000007)\n\
    </cell>\n<cell>\nfib4.fib4(1000000000008)\n</cell>\n<cell>\nfib4.fib4(1000000000009)\n\
    </cell>\n<cell>\nfib4.fib4(1000000000010)\n</cell>\n<cell>\nfib4.fib4(1000000000011)\n\
    </cell>\n<cell>\nfib4.fib4(1000000000012)\n</", "\tif n <= 3\n\t\treturn 0\n\t\
    else\n\t\treturn fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n\tend\nend", " \
    \ return n if n <= 4 or n % 4 == 0 && (n%100 != 0 or n%400 == 0)\n  fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4) + fib4(n-5)\nend\n</cell>\n<cell>", "  \
    \  \n    # Write your code here.\n    \n    fib = 0\n    fib = 1\n    if n <=\
    \ 4\n        fib += fib(n-1) + fib(n-2) + fib(n-3) + fib(n-4)\n    else\n    \
    \    fib += fib(n-3) + fib(n-4) \n    end\n    return fib\nend", "    if n==0\
    \ then 0\n    else if n==1 then 1\n    else fib4(n - 1) + fib4(n - 2) + fib4(n\
    \ - 3) + fib4(n - 4)\nend\n</cell>\n<cell>", "  fib4_rec = Fib4.new 0\n  return\
    \ fib4_rec.fib(n).\nend", "    fib4 = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\n\
    \    return fib4[n]\nend\n</cell>\n<text>\nQuestion 2.2\nWrite a function that\
    \ computes the factorial of any positive integer n. If n is negative, return NaN.",
  "  # The Fibbonacci sequence is defined as follows:\n  # fib4(0) -> 0\n  # fib4(1)\
    \ -> 1\n  # fib4(2) -> 1\n  # fib4(3) -> 2\n  # fib4(n) -> fib4(n-1) + fib4(n-2)\
    \ + fib4(n-3) + fib4(n-4).\n  return n\nend\n</cell>\n<cell>", "  # Your code\
    \ here\n  if n == 0\n    0\n  elsif n == 1\n    0\n  elsif n == 2\n    2\n  elsif\
    \ n == 3\n    0\n  elsif n == 4\n    4\n  elsif n == 5\n    3\n  elsif n == 6\n\
    \    2\n  elsif n == 7\n    1\n  elsif n == 8\n    0\n  elsif n == 9\n    8\n\
    \  else\n    fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\nend", "   if n ==\
    \ 0 then return 0\n   if n == 1 then return 0\n   if n == 2 then return 1\n  \
    \ if n == 3 then return 2\n   if n == 4 then return 2\n   if n == 5 then return\
    \ 3\n   if n == 6 then return 4\n   if n == 7 then return 4\n   if n == 8 then\
    \ return 5\n   if n == 9 then return 5\n   if n == 10 then return 6\n   if n ==\
    \ 11 then return 6\n   if n == 12 then return 7\n   if n == 13 then return 7\n\
    \   if n == 14 then return 8\n   if n == 15 then return 8\n   if n == 16 then\
    \ return 9\n   if n == 17 then return 9\n   if n == 18 then return 10\n   if n\
    \ == 19 then return 10\n   if n == 20 then return 11\n   if n == 21 then return\
    \ 11\n   if n == 22 then return 12\n   if n == 23 then return 12\n   if n == 24\
    \ then return 13\n   if n == 25 then return 13\n   if n == 26 then return 14\n\
    \   if n == 27 then return 14\n   if n == 28 then return 15\n   if n == 29 then\
    \ return 15\n   if n == 30 then return 16\n   if n == 31 then return 16\n   if\
    \ n == 32 then return 17\n   if n == 33 then return 17\n   if n == 34 then return\
    \ 18\n   if n == 35 then return 18\n   if n == 36 then return 19\n   if n == 37\
    \ then return 19\n   if n == 38 then return 20\n   if n == 39 then return 20\n\
    \   if n == 40 then return 21\n   if n == 41 then return 21\n   if n == 42 then\
    \ return 22\n   if n == 43 then return 22\n   if n == 44 then return 23\n   if\
    \ n == 45 then return 23\n   if n == 46 then return 24\n   if n == 47 then return\
    \ 24\n   if n == 48 then return 25\n   if n == 49 then return 25\n   if n == 50\
    \ then return 26\n   if n == 51 then return 26\n   if n == 52 then return 27\n\
    \   if n == 53 then return 27\n   if n == 54 then return 28\n   if n == 55 then\
    \ return 28\n   if n == 56 then return 29\n   if n == 57 then return 29\n   if\
    \ n == 58 then return 30\n   if n == 59 then return 30\n   if n == 60 then return ",
  "\tif n<0\n\t\treturn 0\n\telsif n==1\n\t\treturn 0\n\telsif n==2\n\t\treturn 1\n\
    \telsif n==3\n\t\treturn 0\n\telsif n>3\n\t\treturn fib4(n-3) + fib4(n-4) + fib4(n-5)\
    \ + fib4(n-6)\n\tend\nend", "\tp =0\n\tr = 0\n\tif n<4\n\t\treturn 0\n\tend\n\t\
    while p < n\n\t\tr = r + p\n\t\tp = p + 1\n\tend\n\treturn r\nend", "  fib4_result\
    \ = 0\n  fib4_result += (n < 3) ? n : (fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4))\n\
    \  return fib4_result\nend\n</cell>\n<code language=julia-0.6>", "  return fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4)\nend", "  if n == 0\n    Fib4 = 0\n  elsif\
    \ n == 1\n    Fib4 = 0\n  elsif n == 2\n    Fib4 = 2\n  elsif n == 3\n    Fib4\
    \ = 0\n  elsif n == 4\n    Fib4 = 4\n  else\n    Fib4 = fib4(n-1) + fib4(n-2)\
    \ + fib4(n-3) + fib4(n-4)\n  end\n  return Fib4\nend", "  if n <= 0 then return\
    \ 0\n  if n <= 4 then return n\n  return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n\
    end\nfib4 1\n</cell>\n<text>\nTask 7. Write a recursive function fib5 that computes\
    \ the n-th element of the Fibbonacci sequence using the following recurrence:",
  "\tresult = 1\n\tfib4 = Fib4.new\n\tif n < 0\n\t\tfib4.fib4(n) = nil\n\telsif n\
    \ == 0\n\t\tfib4.fib4(n) = result\n\telse\n\t\tfib4.fib4(n) = fib4.fib4(n-1) +\
    \ fib4.fib4(n-2) + fib4.fib4(n-3) + fib4.fib4(n-4)\n\tend\n\treturn fib4.fib4(n)\n\
    end", "  if n == 0\n    0\n  elsif n == 1\n    0\n  elsif n == 2\n    2\n  elsif\
    \ n == 3\n    0\n  elsif n == 4\n    4\n  else\n    fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4)\nend", "  fib = [0, 0, 0, 0, 0]\n  fib[0] = 0\n  fib[1] = 0\n  fib[2]\
    \ = 2\n  fib[3] = 0\n  fib[4] = fib[3] + fib[2] + fib[1] + fib[0]\n  fib[n] =\
    \ fib[n-1] + fib[n-2] + fib[n-3] + fib[n-4]\n  fib\nend", "  if n < 4\n    return\
    \ n\n  else\n    return fib4(n-4) + fib4(n-3) + fib4(n-2) + fib4(n-1)\nend", " \
    \ fib4 = fib3.clone\n  fib4[0] = 0\n  fib4[1] = fib4[2] = 2\n  fib4[3] = fib4[4]\
    \ = 0\n  fib4[n-1] = fib4[n-2] + fib4[n-3] + fib4[n-4]\n  fib4\nend", "   if n\
    \ == 0\n      return 0\n   elsif n == 1\n      return 1\n   elsif n == 2\n   \
    \   return 2\n   elsif n == 3\n      return 0\n   elsif n == 4\n      return 4\n\
    \   else\n      return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4) \nend", " \
    \ if n<2\n    next\n  else\n    fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n\
    \  end\nend\n</cell>\n<cell>", "  fib = Array.new(n)\n  fib[0] = 0\n  fib[1] =\
    \ 0\n  fib[2] = 2\n  fib[3] = 3\n  fib[4] = 6\n  fib[5] = 10\n  fib[6] = 15\n\
    \  fib[7] = 21\n  fib[8] = 34\n  fib[9] = 67\n  fib[10] = 144\n  fib[11] = 233\n\
    \  fib[12] = 343\n  fib[13] = 565\n  fib[14] = 891\n  fib[15] = 1441\n  fib[16]\
    \ = 2333\n  fib[17] = 4655\n  fib[18] = 7813\n  fib[19] = 14641\n  fib[20] = 23456\n\
    \  fib[21] = 50474\n  fib[22] = 81415\n  fib[23] = 152587\n  fib[24] = 246934\n\
    \  fib[25] = 493976\n  fib[26] = 987193\n  fib[27] = 1597386\n  fib[28] = 2459510\n\
    \  fib[29] = 4996601\n  fib[30] = 9934984\n  fib[31] = 15798443\n  fib[32] = 24369729\n\
    \  fib[33] = 48857641\n  fib[34] = 97944813\n  fib[35] = 155869234\n  fib[36]\
    \ = 237486111\n  fib[37] = 587861567\n  fib[38] = 969383113\n  fib[39] = 1548223067\n\
    \  fib[40] = 2369265793\n  fib[41] = 5955729273\n  fib[42] = 9729398273\n  fib[43]\
    \ = 15375726577\n  fib[44] = 23597013993\n  fib[45] = 48764836937\n  fib[46] =\
    \ 96792924577\n  fib[47] = 152733649983\n  fib[48] = 237378757463\n  fib[49] =\
    \ 581141783771\n  fib[50] = 957348386751\n  fib[51] = 1519094674853\n  fib[52]\
    \ = 2349496774131\n  fib[53] = 4936141647651\n  fib[54] = 94655948533151\n", " \
    \  if n <= 0\n      return 0\n   if n <= 4\n      return n\n   else\n      return\
    \ fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\nend", "  return fib4_helper(n,1)+fib4_helper(n,2)+fib4_helper(n,3)+fib4_helper(n,4)\n\
    end", "  if n == 0\n    puts \"fib4(0) is 0\"\n    return 0\n  elsif n == 1\n\
    \    puts \"fib4(1) is 0\"\n    return 0\n  elsif n == 2\n    puts \"fib4(2) is\
    \ 2\"\n    return 2\n  elsif n == 3\n    puts \"fib4(3) is 0\"\n    return 0\n\
    \  elsif n == 4\n    puts \"fib4(n) is fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\
    \ is 0\"\n    return 0\n  else\n    puts \"fib4(n) is fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4) is fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4) - fib4(n-3)\
    \ - fib4(n-2) - fib4(n-1)\"\n    return fib4(n-4) + fib4(n-3) + fib4(n-2) + fib4(n-1)\n\
    \  end\nend", "  fib5 = lambda n: (fib3(n)+fib2(n)+fib1(n)+fib0)(n)\n  fib3 =\
    \ lambda n: (fib2(n)+fib1(n)+fib0)(n)\n  fib2 = lambda n: (fib1(n)+fib0)(n)\n\
    \  fib1 = lambda n: (fib0)(n)\n  fib0 = lambda n: 0\n  return fib5(n) if n <=\
    \ 4 else fib3(n)\nend\n</code>\n<|/ a tags=ruby,fibonacci dscore=1 |>\n<| a |>\n\
    Ruby's BigDecimal is really good at dealing with big numbers.\n<code>\nrequire\
    \ 'bigdecimal'", " fib4=0 until n\n fib4\nend", "  sum = 0\n  if n <= 1\n    sum\
    \ = 1\n  else\n    sum = 0\n    (1..n).each do |i|\n      sum = sum + fib4(i-1)\
    \ + fib4(i-2) + fib4(i-3) + fib4(i-4)\n    end\n  end\n  sum\nend", "  if n <=\
    \ 0\n    0\n  elsif n <= 1\n    1\n  elsif n <= 3\n    2\n  elsif n <= 5\n   \
    \ 0\n  elsif n <= 8\n    8\n  elsif n <= 13\n    16\n  elsif n <= 21\n    32\n\
    \  else\n    fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\nend\n</cell>\n<code\
    \ language=julia-0.6>", "  if n == 0\n    0\n  elsif n == 1\n    1\n  elsif n\
    \ == 2\n    2\n  elsif n == 3\n    3\n  elsif n == 4\n    4\n  else\n    fib4(n\
    \ - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\nend", "  if n<=0\n    n=0\n\
    \  elsif n>4\n    n=4\n  end\n  return fib(n-1)+fib(n-2)+fib(n-3)+fib(n-4)\nend",
  "  if n == 0\n    0\n  elsif n == 1\n    1\n  elsif n == 2\n    2\n  elsif n ==\
    \ 3\n    0\n  else\n    fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n\
    end", "  return 0 if n == 0 else fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n\
    end", "  # your code goes here\n  num = 0\n  while n != 0\n    num = num + fib3(n\
    \ - 1)\n    n = n - 4\n  end\n  return num\nend", "  fib = [0,0,1,1,2,3,5,8,13,21,34,55,89]\n\
    \  return fib[n]\nend", "\treturn 0 # your code here\nend", "  if n <= 0\n   \
    \ 0\n  elsif n < 3\n    n\n  elsif n == 4\n    4\n  else\n    fib4(n-1) + fib4(n-2)\
    \ + fib4(n-3) + fib4(n-4)\nend", "  return fib(4) if n == 0 || n == 1\n  fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4)\nend", "    if n == 0\n\t0\n    elsif n\
    \ == 1\n\t0\n    elsif n == 2\n\t2\n    elsif n == 3\n\t0\n    elsif n == 4\n\t\
    1\n    elsif n == 5\n\t2\n    elsif n == 6\n\t3\n    elsif n == 7\n\t0\n    elsif\
    \ n == 8\n\t1\n    elsif n == 9\n\t2\n    elsif n == 10\n\t3\n    elsif n == 11\n\
    \t4\n    elsif n == 12\n\t5\n    elsif n == 13\n\t6\n    elsif n == 14\n\t7\n\
    \    elsif n == 15\n\t8\n    elsif n == 16\n\t9\n    elsif n == 17\n\t10\n   \
    \ elsif n == 18\n\t11\n    elsif n == 19\n\t12\n    elsif n == 20\n\t13\n    elsif\
    \ n == 21\n\t14\n    elsif n == 22\n\t15\n    elsif n == 23\n\t16\n    elsif n\
    \ == 24\n\t17\n    elsif n == 25\n\t18\n    elsif n == 26\n\t19\n    elsif n ==\
    \ 27\n\t20\n    elsif n == 28\n\t21\n    elsif n == 29\n\t22\n    elsif n == 30\
    \ or n == 31 or n == 32\n\t23\n    elsif n == 33\n\t24\n    elsif n == 34\n\t\
    25\n    elsif n == 35\n\t26\n    elsif n == 36\n\t27\n    elsif n == 37\n\t28\n\
    \    elsif n == 38\n\t29\n    elsif n == 39\n\t30\n    elsif n == 40 or n == 41\
    \ or n == 42 or n == 43 or n == 44 or n == 45 or n == 46 or n == 47 or n == 48\
    \ or n == 49 or n == 50 or n == 51 or n == 52 or n == 53 or n == 54 or n == 55\
    \ or n == 56 or n == 57 or n == 58 or n == 59\n\t31\n    elsif n == 60\n\t32\n\
    \    elsif n == 61\n\t33\n    elsif n == 62\n\t34\n    elsif n == 63\n\t35\n \
    \   elsif n == 64\n\t36\n    elsif n == 65\n\t37\n    elsif n == 66\n\t38\n  \
    \  elsi", "    puts \"fib4(n): #{n}\"\n    puts fib4(n-1).to_s + fib4(n-2).to_s\
    \ + fib4(n-3).to_s + fib4(n-4).to_s\nend", "\tcase n <= 1 then return n\n\telse\
    \ fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4) end\nend\n</cell>\n<text>\nWe\
    \ compute the sequence by computing the first $n$-many elements of fib4, then\
    \ adding them together.  The result is a sum of the first $n$-many terms.  Here\
    \ is a recursive version of fib4, which computes fib4(3) as the sum of fib4(0),\
    \ fib4(1), fib4(2) and fib4(3) for n=3.", "  ret = 0\n  n0 = 1\n  n1 = 1\n  n2\
    \ = 1\n  n3 = 1\n  n4 = 1\n  if n == 0\n    ret = n0\n  elsif n == 1\n    ret\
    \ = n1\n  elsif n == 2\n    ret = n2\n  elsif n == 3\n    ret = n3\n  elsif n\
    \ == 4\n    ret = n4\n  else\n    n5 = n0\n    n6 = n3\n    n7 = n2\n    n8 =\
    \ n4\n    n9 = n5\n    n10 = n6\n    n11 = n7\n    n12 = n8\n    n13 = n9\n  \
    \  n14 = n10\n    n15 = n11\n    n16 = n12\n    n17 = n13\n    n18 = n14\n   \
    \ n19 = n15\n    n20 = n16\n    n21 = n17\n    n22 = n18\n    n23 = n19\n    n24\
    \ = n20\n    n25 = n21\n    n26 = n22\n    n27 = n23\n    n28 = n24\n    n29 =\
    \ n25\n    n30 = n26\n    n31 = n27\n    n32 = n28\n    n33 = n29\n    n34 = n30\n\
    \    n35 = n31\n    n36 = n32\n    n37 = n33\n    n38 = n34\n    n39 = n35\n \
    \   n40 = n36\n    n41 = n37\n    n42 = n38\n    n43 = n39\n    n44 = n40\n  \
    \  n45 = n41\n    n46 = n42\n    n47 = n43\n    n48 = n44\n    n49 = n45\n   \
    \ n50 = n46\n    n51 = n47\n    n52 = n48\n    n53 = n49\n    n54 = n50\n    n55\
    \ = n51\n    n56 = n52\n    n57 = n53\n    n58 = n54\n    n59 = n55\n    n60 =\
    \ n56\n    n61 = n57\n    n62 = n58\n    n63 = n59\n    n64 = n60\n    n65 = n61\n\
    \    n66 = n62\n    n67 = n63\n    n68 = n64\n    n69 = n65\n    n70 = n66\n \
    \   n71 = n67\n    n72 = n68\n    n73 = n69\n    n74 = n70\n    n75 = n71\n  \
    \  n76 = n72\n    n77 = n73\n    n78 = n74\n    n79 = n75\n    n80 = n76\n   \
    \ n81 = n77\n    n82 = n78\n    n83 = n79\n    n84 = n80\n    n85 = n81\n", " \
    \   return 1 if n == 0 else fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n</cell>\n\
    <cell>\nfib4(10)\n</cell>\n<cell>", "    if n <= 4\n        return fib4(n - 1)\n\
    \    return fib4(n - 4) + fib4(n - 3) + fib4(n - 2) + fib4(n - 1)", "    if n\
    \ < 0 \n        0\n    elsif n == 0\n        0\n    elsif n == 1\n        0\n\
    \    elsif n == 2\n        2\n    elsif n == 3\n        0\n    elsif n == 4\n\
    \        0\n    elsif n == 5\n        3\n    elsif n == 6\n        1\n    elsif\
    \ n == 7\n        0\n    elsif n == 8\n        0\n    elsif n == 9\n        1\n\
    \    elsif n == 10\n        3\n    elsif n == 11\n        1\n    elsif n == 12\n\
    \        3\n    elsif n == 13\n        1\n    elsif n == 14\n        3\n    elsif\
    \ n == 15\n        1\n    elsif n == 16\n        3\n    elsif n == 17\n      \
    \  1\n    elsif n == 18\n        3\n    elsif n == 19\n        1\n    elsif n\
    \ == 20\n        3\n    elsif n == 21\n        1\n    elsif n == 22\n        3\n\
    \    elsif n == 23\n        1\n    elsif n == 24\n        3\n    elsif n == 25\n\
    \        1\n    elsif n == 26\n        3\n    elsif n == 27\n        1\n    elsif\
    \ n == 28\n        3\n    elsif n == 29\n        1\n    elsif n == 30\n      \
    \  3\n    elsif n == 31\n        1\n    elsif n == 32\n        3\n    elsif n\
    \ == 33\n        1\n    elsif n == 34\n        3\n    elsif n == 35\n        1\n\
    \    elsif n == 36\n        3\n    elsif n == 37\n        1\n    elsif n == 38\n\
    \        3\n    elsif n == 39\n        1\n    elsif n == 40\n        3\n    elsif\
    \ n == 41\n        1\n    elsif n == 42\n        3\n    elsif n == 43\n      \
    \  1\n    elsif n == 44\n        3\n    elsif n == 45\n        1\n    elsif n\
    \ == 46\n        3\n    elsif n == 47\n        1\n    elsif n == 48\n        3\n\
    \    elsif n == 49\n        1\n    elsif ", "    return n if n == 0 else fib4(n\
    \ - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\nend\n</cell>\n<code language=julia-1.0>",
  "    # Write your code here\n    if n == 0\n        return 0\n    elif n == 1\n\
    \        return 0\n    elif n == 2\n        return 2\n    elif n == 3\n      \
    \  return 0\n    elif n == 4\n        return 4\n    else:\n        return fib4(n\
    \ - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)", "  Fib4(n)\nend", "  # Fill\
    \ this in.\nend", "  fib = (1..n).inject(:+).to_a\n  fib[-n] + fib[-(n+1)] + fib[-(n+2)]\
    \ + fib[-(n+3)]\nend\n</code>\n<|/ a |>\n<| c |>\nI'm glad you found this helpful,\
    \ but this isn't really a problem that was asked in an assignment. I've asked\
    \ a question about the real answer to the problem in my answer. http://stackoverflow.com/questions/32898176/how-to-convert-an-array-to-a-hash-map-in-ruby\n\
    <|/ c |>\n<| c |>\nIt's an interesting question, but I think your answer does\
    \ not address the OP's actual question since you are assuming the OP wants something\
    \ else than a hash. What I'm looking for is a Hash where each element is the sum\
    \ of the elements to the key `n` in the array. For example, if `arr` is `[2,1,4]`\
    \ then `hash` should contain `2=>3` and `1=>1` and `4=>9`.\n<|/ c |>\n<| c |>\n\
    , I'm glad you found this helpful, but this isn't really a problem that was asked\
    \ in an assignment. I've asked a question about the real answer to the problem\
    \ in my answer.\n<|/ c |>\n<| c |>\nIt is a problem that was asked in an assignment,\
    \ in the form of taking an array and returning its sum of the elements to the\
    \ nth power.\n<|/ c |>\n<| c |>\n, OK, I didn't realize you were looking for a\
    \ Hash instead of a HashWithIndifferentAccess. I've updated my answer to reflect\
    \ that. By the way, you should be able to do this with `inject(:+)` rather than\
    \ `.inject(:+)`.\n<|/ c |>\n<| a |>\nThis problem can be solved with some basic\
    \ math and recursion. Here is a solution that should work for you :\n<code>",
  "  if n < 0 \n    raise \"n must be greater than 0\"\n  else if n == 0\n    0\n\
    \  elsif n == 1\n    1\n  elsif n == 2\n    2\n  elsif n == 3\n    0\n  elsif\
    \ n == 4\n    4\n  else\n    fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n\
    \ - 4)\nend", "    # Your code here\n    if n == 0\n        return 0\n    if n\
    \ == 1\n        return 1\n    if n == 2\n        return 2\n    if n == 3\n   \
    \     return 0\n    if n == 4\n        return 0\n    return fib4(n-1) + fib4(n-2)\
    \ + fib4(n-3) + fib4(n-4)", "  puts \"fib4#{n}\"\nend", "end\n</cell>\n<text>\n\
    Question 3\nWrite a recursive function named fib5 that computes the nth element\
    \ of the Fibonacci sequence using the following definitions:\nfib5(0) -> 0\nfib5(1)\
    \ -> 1\nfib5(2) -> 1\nfib5(3) -> 2\nfib5(n) -> fib5(n-1) + fib5(n-2).\nPlease\
    \ write a function to efficiently compute the n-th element of the Fibonacci number\
    \ sequence.", "  if n == 0\n    0\n  else\n    fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\nend", "  if n==0 || n==1\n    0\n  elsif n==2\n    1\n  elsif\
    \ n==3\n    1\n  elsif n==4\n    1\n  elsif n>4\n    fib4(5) + fib4(4) + fib4(3)\
    \ + fib4(2) + fib4(1)\n  end\nend\n</cell>\n<code language=julia-1.6>\nfib4(10)\n\
    </cell>\n<code language=julia-1.6>", end, "  return 0 if n == 0 \n    then 0\n\
    \  else 1 if n == 1\n    then 1\n  else fib4(n - 1) + fib4(n - 2) + fib4(n - 3)\
    \ + fib4(n - 4)\nend", "    fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\nend",
  "  if n==0 || n==1\n    0\n  elsif n==2\n    2\n  elsif n==3\n    0\n  else\n  \
    \  fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n  end\nend", "    fib4 = 0\n\
    \    fib4 = fib4 + fib4\n    fib4 = fib4 + fib4\n    fib4 = fib4 + fib4\n    fib4\
    \ = fib4 + fib4\n    fib4 = fib4 + fib4\n    fib4 = fib4 + fib4\n    fib4 = fib4\
    \ + fib4\n    fib4 = fib4 + fib4\n    fib4 = fib4 + fib4\n    fib4 = fib4 + fib4\n\
    \    fib4 = fib4 + fib4\n    fib4 = fib4 + fib4\n    fib4 = fib4 + fib4\n    fib4\
    \ = fib4 + fib4\n    fib4 = fib4 + fib4\n    fib4 = fib4 + fib4\n    fib4 = fib4\
    \ + fib4\n    fib4 = fib4 + fib4\n    fib4 = fib4 + fib4\n    fib4 = fib4 + fib4\n\
    \    fib4 = fib4 + fib4\n    fib4 = fib4 + fib4\n    fib4 = fib4 + fib4\n    fib4\
    \ = fib4 + fib4\n    fib4 = fib4 + fib4\n    fib4 = fib4 + fib4\n    fib4 = fib4\
    \ + fib4\n    fib4 = fib4 + fib4\n    fib4 = fib4 + fib4\n    fib4 = fib4 + fib4\n\
    \    fib4 = fib4 + fib4\n    fib4 = fib4 + fib4\n    fib4 = fib4 + fib4\n    fib4\
    \ = fib4 + fib4\n    fib4 = fib4 + fib4\n    fib4 = fib4 + fib4\n    fib4 = fib4\
    \ + fib4\n    fib4 = fib4 + fib4\n    fib4 = fib4 + fib4\n    fib4 = fib4 + fib4\n\
    \    fib4 = fib4 + fib4\n    fib4 = fib4 + fib4\n    fib4 = fib4 + fib4\n    fib4\
    \ = fib4 + fib4\n    fib4 = fib4 + fib4\n    fib4 = fib4 + fib4\n    fib4 = fib4\
    \ + fib4\n    fib4 = fib4 + fib4\n    fib4 = fib4 + fib4\n    fib4 = fib4 + fib4\n\
    \    fib4 = fib4 + fib4\n    fib4 = fib4 + fib4\n    fib4 = fib4 + fib4\n    fib4\
    \ = fib4 + fib4\n    fib4 = fib4 + fib4\n    fib4 = fib4 + fib4\n    fib4 = ",
  "  fib4(n-1)+fib4(n-2)+fib4(n-3)+fib4(n-4)\nend\n</cell>\n<cell>\nfib4(4)\n</cell>\n\
    <text>\nExercise 4.27: Compute $F(4^n+1)$ using the recursive definition of fib4.",
  "  if n < 0\n    n\n  elsif n == 0\n    0\n  elsif n == 1\n    1\n  elsif n == 2\n\
    \    2\n  elsif n == 3\n    0\n  elsif n == 4\n    6\n  elsif n == 5\n    9\n\
    \  elsif n == 6\n    18\n  elsif n == 7\n    27\n  elsif n == 8\n    36\n  elsif\
    \ n == 9\n    45\n  elsif n == 10\n    54\n  elsif n == 11\n    63\n  elsif n\
    \ == 12\n    72\n  elsif n == 13\n    81\n  elsif n == 14\n    90\n  elsif n ==\
    \ 15\n    99\n  elsif n == 16\n    108\n  elsif n == 17\n    117\n  elsif n ==\
    \ 18\n    126\n  elsif n == 19\n    135\n  elsif n == 20\n    144\n  elsif n ==\
    \ 21\n    153\n  elsif n == 22\n    162\n  elsif n == 23\n    171\n  elsif n ==\
    \ 24\n    180\n  elsif n == 25\n    189\n  elsif n == 26\n    198\n  elsif n ==\
    \ 27\n    207\n  elsif n == 28\n    216\n  elsif n == 29\n    225\n  elsif n ==\
    \ 30\n    234\n  elsif n == 31\n    243\n  elsif n == 32\n    253\n  elsif n ==\
    \ 33\n    263\n  elsif n == 34\n    273\n  elsif n == 35\n    283\n  elsif n ==\
    \ 36\n    294\n  elsif n == 37\n    305\n  elsif n == 38\n    315\n  elsif n ==\
    \ 39\n    325\n  elsif n == 40\n    335\n  elsif n == 41\n    345\n  elsif n ==\
    \ 42\n    355\n  elsif n == 43\n    365\n  elsif n == 44\n    375\n  elsif n ==\
    \ 45\n    385\n  elsif n == 46\n    396\n  elsif n == 47\n    405\n  elsif n ==\
    \ 48\n    415\n  elsif n == 49\n    4", "  raise \"fib4 number sequence is undefined\"\
    \nend", "  Fib4(n)\nend", "  if n == 0\n    0\n  elsif n == 1\n    1\n  elsif\
    \ n == 2\n    2\n  elsif n == 3\n    0\n  else\n    fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4)\n  end\nend\nfib4(4) #=> 15\nfib4(5) ", "  if n == 0\n    0\n  elsif\
    \ n == 1\n    1\n  elsif n == 2\n    2\n  elsif n == 3\n    0\n  elsif n == 4\n\
    \    0\n  else\n    fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\nend", "  if\
    \ n == 0\n    0\n  elsif n == 1\n    1\n  elsif n == 2\n    2\n  elsif n == 3\n\
    \    0\n  elsif n == 4\n    1\n  elsif n == 5\n    2\n  elsif n == 6\n    3\n\
    \  elsif n == 7\n    0\n  elsif n == 8\n    1\n  elsif n == 9\n    2\n  elsif\
    \ n == 10\n    3\n  elsif n == 11\n    0\n  elsif n == 12\n    1\n  elsif n ==\
    \ 13\n    2\n  elsif n == 14\n    3\n  elsif n == 15\n    4\n  elsif n == 16\n\
    \    8\n  elsif n == 17\n    13\n  elsif n == 18\n    21\n  elsif n == 19\n  \
    \  34\n  elsif n == 20\n    55\n  elsif n == 21\n    89\n  elsif n == 22\n   \
    \ 144\n  elsif n == 23\n    233\n  elsif n == 24\n    377\n  elsif n == 25\n \
    \   610\n  elsif n == 26\n    987\n  elsif n == 27\n    1597\n  elsif n == 28\n\
    \    2584\n  elsif n == 29\n    4181\n  elsif n == 30\n    6765\n  elsif n ==\
    \ 31\n    10946\n  elsif n == 32\n    17711\n  elsif n == 33\n    28657\n  elsif\
    \ n == 34\n    46368\n  elsif n == 35\n    75025\n  elsif n == 36\n    121393\n\
    \  elsif n == 37\n    196418\n  elsif n == 38\n    317811\n  elsif n == 39\n \
    \   514229\n  elsif n == 40\n    832040\n  elsif n == 41\n    1346269\n  elsif\
    \ n == 42\n    2178309\n  elsif n == 43\n    3524578\n  elsif n == 44\n    5570537\n\
    \  elsif n == 45\n    8128000\n  elsif n == 46\n    13742532\n  elsif n == 47\n\
    \    2178309\n  elsif n == 48\n    3524578\n", "  if n<=1\n    0\n  else\n   \
    \ fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n  end\nend", "    if\
    \ n == 0\n        return 0\n    if n == 1\n        return 1\n    if n == 2\n \
    \       return 2\n    if n == 3\n        return 0\n    fib4 = fib4(n-1) + fib4(n-2)\
    \ + fib4(n-3) + fib4(n-4)\n    return fib4", "  if n<0\n    return 0\n  elsif\
    \ n==0\n    return 0\n  elsif n==1\n    return 1\n  elsif n==2\n    return 2\n\
    \  elsif n==3\n    return 0\n  elsif n==4\n    return 0\n  else\n    return fib4(4)\
    \ + fib4(3) + fib2(2) + fib1(1) + fib0(0)\nend", "    if n == 0 then\n       \
    \ return 0\n    else\n        if n == 1 then\n            return 0\n        else\n\
    \            return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n  \
    \      end\n    end\nend\n</cell>\n<code language=julia-1.0>\n@time fib4(5)\n\
    </cell>\n<code language=julia-1.0>", "  fib4 = (1..n).inject(0) {|sum, a| sum\
    \ + a}\n  fib4\nend", "    fib4_sum = 0\n    fib4_count = 0\n    if n < 0\n  \
    \      n = -n\n    while fib4_count < n\n        fib4_sum = fib4_sum + 4\n   \
    \     fib4_count += 1\n    return fib4_sum\nend\n</cell>\n<code language=julia-1.0>",
  "  puts fib4.to_s\n  puts fib4.to_a.inspect\nend", "  case n\n  when 0 then 0\n\
    \  when 1 then 0\n  when 2 then 2\n  when 3 then 0\n  else fib4(n-1) + fib4(n-2)\
    \ + fib4(n-3) + fib4(n-4)\n  end\nend", "  if n==0\n    fib4(0)\n  elsif n==1\n\
    \    fib4(1)\n  elsif n==2\n    fib4(2)\n  elsif n==3\n    fib4(0)\n  elsif n==4\n\
    \    fib4(1)\n  elsif n==5\n    fib4(2)\n  elsif n==6\n    fib4(3)\n  elsif n==7\n\
    \    fib4(0)\n  elsif n==8\n    fib4(1)\n  elsif n==9\n    fib4(2)\n  elsif n==10\n\
    \    fib4(3)\n  elsif n==11\n    fib4(0)\n  elsif n==12\n    fib4(1)\n  elsif\
    \ n==13\n    fib4(2)\n  elsif n==14\n    fib4(3)\n  elsif n==15\n    fib4(0)\n\
    \  elsif n==16\n    fib4(1)\n  elsif n==17\n    fib4(2)\n  elsif n==18\n    fib4(3)\n\
    \  elsif n==19\n    fib4(0)\n  elsif n==20\n    fib4(1)\n  elsif n==21\n    fib4(2)\n\
    \  elsif n==22\n    fib4(3)\n  elsif n==23\n    fib4(0)\n  elsif n==24\n    fib4(1)\n\
    \  elsif n==25\n    fib4(2)\n  elsif n==26\n    fib4(3)\n  elsif n==27\n    fib4(0)\n\
    \  elsif n==28\n    fib4(1)\n  elsif n==29\n    fib4(2)\n  elsif n==30\n    fib4(3)\n\
    \  elsif n==31\n    fib4(0)\n  elsif n==32\n    fib4(1)\n  elsif n==33\n    fib4(2)\n\
    \  elsif n==34\n    fib4(3)\n  elsif n==35\n    fib4(0)\n  elsif n==36\n    fib4(1)\n\
    \  elsif n==37\n    fib4(2)\n  elsif n==38\n    fib4(3)\n  elsif n==39\n", " \
    \   number = 0\n    if n == 0\n        number = 0\n    elif n == 1\n        number\
    \ = 1\n    else\n        number = fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n\
    \    end\n    number\nend", "  fib4 = 0.0\n  if n == 0\n    fib4\n  elsif n ==\
    \ 1\n    fib4\n  elsif n == 2\n    fib4\n  elsif n == 3\n    fib4\n  elsif n ==\
    \ 4\n    fib4\n  else\n    fib4 = fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n\
    \  end\nend\n</code>\nBelow is the solution to your problem, although it's a very\
    \ bad idea to write code like this.  Don't worry though, it's really not that\
    \ bad.\n<code>", "end\n</cell>\n<cell>\n%psource fib4\n</cell>\n<text>\nYour fib4\
    \ function should have the following output:", "    if n == 0\n        return\
    \ 0\n    if n == 1\n        return 1\n    if n == 2\n        return 2\n    if\
    \ n == 3\n        return 0\n    if n == 4\n        return 4\n    return fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4) ", "  # Your code here\nend\n</code>\nSolution\
    \ 2\nI went ahead and defined a generic fib4 method that works for any integer\
    \ value N.  I then implemented this using the metaprogramming ability of Ruby.\
    \  The metaprogramming capabilities of Ruby allow us to dynamically define methods\
    \ that can then be called and passed around.  This is a little more concise than\
    \ defining a function and then calling it.  I then defined the fib4 method and\
    \ returned the value of that method.  \n<code>", end, "  puts \"The Fib4 number\
    \ sequence is a sequence similar to the Fibbonacci sequnece that's defined as\
    \ follows:\"\n  puts \"fib4(0) -> 0\"\n  puts \"fib4(1) -> 0\"\n  puts \"fib4(2)\
    \ -> 2\"\n  puts \"fib4(3) -> 0\"\n  puts \"fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\"\nend", "\treturn (fib4_1(n) + fib4_2(n) + fib4_3(n)\
    \ + fib4_4(n))\nend", "    if n == 0 then 1\n    else if n == 1 then 1\n    else\
    \ if n == 2 then 2\n    else if n == 3 then 0\n    else fib4(n - 1) + fib4(n -\
    \ 2) + fib4(n - 3) + fib4(n - 4)\n    end\nend\n</cell>\n<code language=julia-0.6>",
  "  if n < 0 then return 0\n  if n < 1 then return 1\n  if n < 2 then return 1\n\
    \  fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\nend\n</cell>\n<cell>", "\t\
    fib4_value = 0\n\tfib4_count = n\n\twhile fib4_count > 0\n\t\tfib4_value += fib4_count\
    \ % 4\n\t\tfib4_count /= 4\n\treturn(fib4_value)", "  if n==0 or n==1\n    return\
    \ n\n  else\n    return fib4(4)+fib4(3)+fib4(2)+fib4(1)+fib4(0)\nend", "  if n<=1\n\
    \    puts 0\n  elsif n>4\n    fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n\
    \  else\n    puts fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n  end\nend",
  "  if n <= 0 then\n    0\n  elsif n <= 1 then\n    1\n  elsif n == 2 then\n    2\n\
    \  else\n    fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n  end\nend", "end\n\
    </cell>\n<cell>\nfib4(10) # Should compute 1690785.\n</cell>\n<text>\nProblem\
    \ 10\nCompute the 1-1000000000th term in exp(x), where exp(x) is the exponential\
    \ function and x is any non-negative float.  (Hint, the answer is probably not\
    \ a floating-point number.)", "  case n when 0...4\n    n \n  else fib4(n-1) +\
    \ fib4(n-2) + fib4(n-3) + fib4(n-4)\nend", "  raise \"Not implemented yet\"\n\
    end\nfib4(3)", "  raise 'implement me!'\nend", "  if n==0\n    0\n  else\n   \
    \ n>3 ? fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4) : 4\n  end\nend", "  return\
    \ 0 if n == 0 else fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\nend\n</cell>\n\
    <code language=julia-1.0>\n@time fib4(1)\n</cell>\n<code language=julia-1.0>\n\
    @time fib4(2)\n</cell>\n<code language=julia-1.0>\n@time fib4(3)\n</cell>\n<code\
    \ language=julia-1.0>\n@time fib4(10)\n</cell>\n<code language=julia-1.0>\n@time\
    \ fib4(1000)\n</cell>\n<code language=julia-1.0>\n@time fib4(10000)\n</cell>\n\
    <code language=julia-1.0>\n@time fib4(100000)\n</cell>\n<code language=julia-1.0>\n\
    @time fib4(1000000)\n</cell>\n<code language=julia-1.0>\n@time fib4(10000000)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the Fibonacci sequence\
    \ up to a specified number, N.", "  if n == 0\n    0\n  else\n    (fib4(n-1) +\
    \ fib4(n-2) + fib4(n-3) + fib4(n-4))\n  end\nend", "  sum = 0\n  fib41 = (fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4))\n  fib42 = 0\n  fib43 = 0\n  fib44 = 1\n\
    \  return fib41 + fib42 + fib43 + fib44\nend\n</cell>\n<cell>", "  raise \"Fib4\
    \ numbers must be calculated with recursion\"\nend\n</code>\n<|/ a |>\n<| c |>\n\
    This is a good answer. I've been learning Ruby for about 10 weeks and I've been\
    \ trying to solve this in Ruby for about 2 months now. I'm still struggling with\
    \ it. Your solution is perfect. I was trying to do this in Ruby with a recursive\
    \ method that seemed like a lot of work. Your code is very easy to understand.\
    \ Ruby makes it very easy to understand the solution. Thank you!\n<|/ c |>\n<|\
    \ c |>\nI am really confused as to how you solved this without recursion.\n<|/\
    \ c |>\n<| c |>\nOk, so fib4 was the name of the problem. So, to solve this problem,\
    \ the Fibbonacci sequence had to be solved via recursion. So, first I needed to\
    \ figure out how to solve Fibbonacci using recursion. My solution was to compute\
    \ the value of fib4(0) to get my base case. Then I computed my fib4(n) by computing\
    \ the value of fib4(n - 1) + fib4(n - 2). The trick was that I needed to keep\
    \ track of the previous fibonacci numbers so that I could compute the next one\
    \ based on that previous one. So, to figure out the next fibonacci number, I had\
    \ to compute the previous two numbers and add them together. So, this was the\
    \ recursive part of my solution.\n<|/ c |>\n<| c |>\nThank you! This really helped.\n\
    <|/ c |>\n<| c |>\n, glad to hear that I was able to help. If you found this answer\
    \ useful, please consider marking it as accepted.\n<|/ c |>\n<| a |>\nIn most\
    \ languages, the answer would be a recursive function. This is not possible in\
    \ ruby or python as those languages use a stack to hold state and don't have tail\
    \ call optimization or automatic tail call elimination.\nYou could use an iterative\
    \ implementation if you wanted to use more resources:\n<code>", "  return n>0?\
    \ fib4( (n-1)*4 + 2 ) + fib4( (n-1)*4 ) + fib4( n*4 ) + fib4(n*4+1 ) \nend", " \
    \ if(n<=0)\n    0\n  elsif (n==1)\n    1\n  elsif (n==2)\n    2\n  elsif (n==3)\n\
    \    0\n  elsif (n==4)\n    1\n  else\n    fib4(n-1) + fib4(n-2) + fib4(n-3) +\
    \ fib4(n-4) \n  end\nend", "  fib4 = Array.new(n, 0)\n  fib4[0...n-1] = fib4[0...n-1]\
    \ + fib4[0...n-2] + fib4[0...n-3] + fib4[0...n-4] \n  return fib4[n-1]\nend",
  "  fib_n = [0,0,0,0,0]\n  if n <= 0\n    0\n  else\n    fib_n[0] = fib4(0-1)+fib4(0-2)+fib4(0-3)+fib4(0-4)\n\
    \    fib_n[1] = fib4(1)+fib4(2)+fib4(3)+fib4(4)\n    fib_n[2] = fib4(1)+fib4(2)+fib4(3)+fib4(4)\n\
    \    fib_n[3] = fib4(1)+fib4(2)+fib4(3)+fib4(4)\n    fib_n[4] = fib4(1)+fib4(2)+fib4(3)+fib4(4)\n\
    \  end\nend", "  # Write your code here\n  sum = 0\n  i = n-1\n  while i>0\n \
    \   sum+=i\n    i=i-1\n  end\n  return sum\nend", "  a, b = 0, 1\n  (fib4(n-2)\
    \ + fib4(n-3) + fib4(n-4)).to_i\nend", "  return 0 if n == 0 || n == 1 || n ==\
    \ 2 || n == 3 || n == 4 else fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\nend",
  "  0\nend\n</cell>\n<code language=julia-1.6>\nfib4(4) # => 4\n</cell>\n<text>\n\
    Exercise\nRewrite fib4 without recursion.  What does the following return?", " \
    \   if n == 0\n        return 0 \n    elsif n == 1\n        return 1\n    elsif\
    \ n == 2\n        return 2\n    elsif n == 3\n        return 0\n    elsif n ==\
    \ 4\n        return 4\n    elsif n == 5\n        return 0\n    elsif n == 6\n\
    \        return 0\n    elsif n == 7\n        return 6\n    elsif n == 8\n    \
    \    return 0\n    elsif n == 9\n        return 24\n    else\n        fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4)", "  if n == 0\n    0\n  elsif n == 1\n\
    \    1\n  elsif n == 2\n    2\n  elsif n == 3\n    0\n  elsif n == 4\n    1\n\
    \  elsif n == 5\n    3\n  elsif n == 6\n    2\n  elsif n == 7\n    4\n  elsif\
    \ n == 8\n    6\n  elsif n == 9\n    8\n  elsif n == 10\n    6\n  else\n    fib4(n\
    \ - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\nend\n</cell>\n<cell>", "  fib4\
    \ =\n    fib3(n)\n    fib4 + 1\n    fib4\n  puts fib4\nend\n</code>\n<code>\n\
    fib4(5)", "  fib = Array.new(4) { 0 }\n  fib.push(0)\n  fib[0] = 0\n  fib[1] =\
    \ 0\n  fib[2] = 1\n  fib[3] = 0\n  fib[4] = fib[3] + fib[2] + fib[1] + fib[0]\n\
    \  fib[n] = fib[n-1] + fib[n-2] + fib[n-3] + fib[n-4]\nend", "  return n if n\
    \ <= 4 then 0 else n + fib4(n-1)+fib4(n-2)+fib4(n-3)+fib4(n-4)\nend\n</cell>\n\
    <code language=julia-0.4>", "    if n == 0\n        0\n    elsif n == 1\n    \
    \    0\n    elsif n == 2\n        2\n    elsif n == 3\n        0\n    elsif n\
    \ == 4\n        2\n    else\n        n-1+fib4(n-2) + fib4(n-3) + fib4(n-4)\n \
    \   end\nend\n</cell>\n<cell>", "  fib4_sum = 0\n  if n < 3 then\n    fib4_sum\
    \ = 0\n  elsif n == 0 then\n    fib4_sum = 0\n  elsif n == 1 then\n    fib4_sum\
    \ = 1\n  elsif n == 2 then\n    fib4_sum = 1\n  elsif n == 3 then\n    fib4_sum\
    \ = 2\n  else\n    fib4_sum = 1\n    fib4_sum += fib4(n - 2) + fib4(n - 3) + fib4(n\
    \ - 4)\n  end\n  puts fib4_sum\nend", "  a = 0\n  b = 1\n  c = 0\n  d = 1\n  while\
    \ n > 0\n    a, b = b, a+b\n    c, d = d, c+d\n    n -= 1\n  end\n  return c\n\
    end\n</cell>\n<text>\nThe Fib4 number is defined as follows:\n$$ \\begin{array}{ccc}\
    \ a0 & a1 & a2 & a3 & a4 \\end{array} \\quad \\rightarrow \\quad \\begin{array}{ccc}\
    \ b0 & b1 & b2 & b3 & b4 \\end{array} \\quad \\rightarrow \\quad \\begin{array}{ccc}\
    \ c0 & c1 & c2 & c3 & c4 \\end{array} \\quad \\rightarrow \\quad \\begin{array}{ccc}\
    \ d0 & d1 & d2 & d3 & d4 \\end{array} \\quad \\rightarrow \\quad \\begin{array}{ccc}\
    \ e0 & e1 & e2 & e3 & e4 \\end{array} \\quad \\rightarrow \\quad \\begin{array}{ccc}\
    \ f0 & f1 & f2 & f3 & f4 \\end{array} \\quad \\rightarrow \\quad \\begin{array}{ccc}\
    \ g0 & g1 & g2 & g3 & g4 \\end{array}$$", "  sum = 0\n  while n > 0\n    sum +=\
    \ n\n    n -= 1\n  end\n  sum\nend", "    if n == 0\n        return 0\n    if\
    \ n == 1\n        return 1\n    if n == 2\n        return 2\n    if n == 3\n \
    \       return 0\n    if n == fib4(n-1)\n        return fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4)", "  a = 0\n  b = a\n  c = a + b\n  d = c + a\n  e = d + b\n  f\
    \ = e + c\n  return f\nend\np fib4(4)", "  return 0 if n < 2 then n\n  return\
    \ fib4(n - 4) + fib4(n - 3) + fib4(n - 2) + fib4(n - 1)\n</cell>\n<cell>", " \
    \ if n <= 0\n    n = 0\n  elsif n <= 4\n    return n\n  elsif n > 4\n    return\
    \ fib4(n - 4) + fib4(n - 3) + fib4(n - 2) + fib4(n-1)\n  end\nend", "  ret = 0\n\
    \  if n > 0\n    ret += fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n\
    \  end\n  ret\nend\nputs fib4(3)", "  if(n == 0)\n    0\n  elsif(n == 1)\n   \
    \ 0\n  elsif(n == 2)\n    2\n  elsif(n == 3)\n    0\n  elsif(n == 4)\n    0\n\
    \  else\n    fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\nend", "    a, b =\
    \ 0, 1\n    while b <= n: \n        a, b = b, a + b\n    return b\n</code>\n<|/\
    \ a tags=python-3.x,python |>\n<| c |>\nI really like how you used the while loop.\
    \ Hadn't even heard of it until just now :) Thanks\n<|/ c |>\n<| a tags=python-3.x,python\
    \ |>\n<code>", "  # initialize fib4 array and index\n  fib4 = Array.new(n){ |i|\
    \ 0 }\n  fib = Array.new(n){ |i| 0 }", "  if n == 0\n    0\n  elsif n == 1\n \
    \   1\n  elsif n == 2\n    2\n  elsif n == 3\n    0\n  elsif n == 4\n    16\n\
    \  else\n    fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\nend", "    fib = []\n\
    \    if n == 0\n        fib[0] = 0\n        fib[1] = fib[0]\n        fib[2] =\
    \ fib[0] + fib[1]\n        fib[3] = fib[2] + fib[0]\n        return fib[3]\n \
    \   else\n        fib[0] = fib4(n-1)\n        fib[1] = fib4(n-2)\n        fib[2]\
    \ = fib4(n-3)\n        fib[3] = fib4(n-4)\n        return fib[3]+fib[2]+fib[1]+fib[0]\n\
    \    end\nend", "  if n == 0\n    0\n  elsif n == 1\n    1\n  elsif n == 2\n \
    \   2\n  elsif n == 3\n    0\n  elsif n == 4\n    fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4) \n  else\n    fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4) + fib4(n-5)\
    \ + fib4(n-6)\n  end\nend\n</cell>\n<cell>", "  if(n==0) then 0\n  if(n==1) then\
    \ 0\n  if(n==2) then 2\n  if(n==3) then 0\n  if(n<0) then nil\n  fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4)\nend", "  fib = Fib4.new()\n  fib4.fib4(n, fib) \n  return fib.value\n\
    end", "  if n == 0 then 0\n  if n == 1 then 0\n  if n == 2 then 2\n  if n == 3\
    \ then 0\n  if n == 4 then 0\n  if n >= 5 then fib4(n - 4) + fib4(n - 3) + fib4(n\
    \ - 2) + fib4(n - 1)\nend", "  return n if n <= 3 || fib4(n - 1) + fib4(n - 2)\
    \ + fib4(n - 3) + fib4(n - 4) == 0\n  else\n    fib4(n - 1) + fib4(n - 2) + fib4(n\
    \ - 3) + fib4(n - 4)\nend\nprint fib4(5)", "    return n if n <= 4 else fib4(n\
    \ - 4) + fib4(n - 3) + fib4(n - 2) + fib4(n - 1)\nend\n</cell>\n<text>\nProblem\
    \ 2\nGiven an array nums, return the product of all the numbers in the array.\
    \ Except the number 0, you should ignore the number 0. The product of any subarray\
    \ of numbers must contain at least one even number.", "  fibo4 = Fib4.new\n  fibo4.first\
    \ = 0\n  fibo4.second = 1\n  fibo4.third = 2\n  fibo4.fourth = 3\n  return fibo4[n]\n\
    end", "  if n < 0\n    puts n\n  elsif n == 0\n    puts 0\n  elsif n == 1\n  \
    \  puts 0\n  elsif n == 2\n    puts 2\n  elsif n == 3\n    puts 0\n  else\n  \
    \  fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\nend", "  raise NotImplementedError\n\
    end", "  sum = 0\n  (0..n).each do |i|\n    sum += i\n  end\n  sum\nend", "  if\
    \ n < 1\n    return 0\n  elsif n == 1\n    return 0\n  elsif n == 2\n    return\
    \ 2\n  elsif n == 3\n    return 0\n  else\n    return fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4)\nend", "  # TODO: Your code here!\nend", "\treturn 0 if\
    \ n == 0\n\tfib4_result = fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n\treturn\
    \ fib4_result\nend", "    if n == 0\n        return 0\n    elif n == 1\n     \
    \   return 1\n    elif n == 2\n        return 2\n    elif n == 3\n        return\
    \ 0\n    else \n        return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n\
    \ - 4)\n        ", "\tputs \"Your fib4 function takes one argument, n\"\n\treturn\
    \ nil\nend", "  puts \"fib4 #{n}\"\n  puts \"fib4(#{n}) -> #{n}.fib4(n-1) + #{n}.fib4(n-2)\
    \ + #{n}.fib4(n-3) + #{n}.fib4(n-4)\"\n  puts \"fib4(n-1) -> #{n}.fib4(n-1) +\
    \ #{n}.fib4(n-2) + #{n}.fib4(n-3) + #{n}.fib4(n-4)\"\n  puts \"fib4(n-2) -> #{n}.fib4(n-1)\
    \ + #{n}.fib4(n-2) + #{n}.fib4(n-3) + #{n}.fib4(n-4)\"\n  puts \"fib4(n-3) ->\
    \ #{n}.fib4(n-1) + #{n}.fib4(n-2) + #{n}.fib4(n-3) + #{n}.fib4(n-4)\"\n  puts\
    \ \"fib4(n-4) -> #{n}.fib4(n-1) + #{n}.fib4(n-2) + #{n}.fib4(n-3) + #{n}.fib4(n-4)\"\
    \nend", "  case n\n    when 0\n      0\n    when 1\n      0\n    when 2\n    \
    \  2\n    when 3\n      0\n    when 4\n      4\n    when n\n      fib4(n-1) +\
    \ fib4(n-2) + fib4(n-3) + fib4(n-4)\n  end\nend\n</code>\n<|/ a dscore=3 |>\n\
    <| a |>\nHere's a solution that returns fib numbers using an array:\n<code>",
  "    if n == 0\n        return 0\n    if n == 2\n        return 1\n    if n == 3\n\
    \        return 2\n    if n == 4\n        return 0\n    \n    fib4 = fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4)\n    \n    return fib4\n    \nfib4 = fib4(5)\n\
    print(fib4)", "  # Write your code here.\n  return 0\nend\n</cell>\n<cell>", " \
    \ fib4 = []\n  fib4[0] = 0\n  fib4[1] = 0\n  fib4[2] = 0\n  fib4[3] = 0\n  fib4[n]\
    \ = fib4[n-1] + fib4[n-2] + fib4[n-3] + fib4[n-4] \n  return fib4[n]\nend", " \
    \ raise \"fib4 not implemented\"\nend", "  0\nend", "  raise \"Not implemented\"\
    \nend", "  if n==0 or n==1\n    return n\n  else\n    return fib4(n-1) + fib4(n-2)\
    \ + fib4(n-3) + fib4(n-4)", "  case n when 0 then 0 else n\nend", "  a = [0]*n\n\
    \  a[0] = 0\n  a[1] = 1\n  a[2] = 1\n  a[3] = 2\n  a[4] = 0\n  a[n] = fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4)\nend", "  fib4 = 0.\n  fib4 = fib4 + fib4\n\
    \  fib4 = fib4 + fib4\n  fib4 = fib4 + fib4\n  return fib4\nend", "  return fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4)\nend", "  if n == 0\n    0\n  elsif n ==\
    \ 1\n    0\n  elsif n == 2\n    2\n  elsif n == 3\n    0\n  elsif n == 4\n   \
    \ 2\n  elsif n == 5\n    3\n  else\n    fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\
    \ + fib4(n-5)\nend", "    fib = (0,1)\n    if n == 0\n        fib[0] = 0\n   \
    \ else if n == 1\n        fib[0] = 1\n    else\n        fib[0] = fib[1]\n    \
    \    fib[1] = fib[0] + fib[2]\n        fib[2] = fib[0] + fib[3]\n        fib[3]\
    \ = fib[0] + fib[4]\n    return fib[4]", "  return n if n == 0 || n == 1 \n  \n\
    \  else fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\nend", "  if n <=\
    \ 3\n    return 0\n  else\n    fib4 = fib4(n - 1) + fib4(n - 2) + fib4(n - 3)\
    \ + fib4(n - 4)\n    return fib4\nend\n</cell>\n<code language=julia-1.0>\nfib4(3)\n\
    </cell>\n<code language=julia-1.0>\nfib4(4)\n</cell>\n<text>\nExercise 5\nWrite\
    \ a function is_prime(number) which returns True if the number is a prime number\
    \ and False otherwise.", "    sum = 0\n    \n    if (n == 0) then\n        sum\
    \ = 0\n    elseif (n == 1) then\n        sum = 1\n    else\n        sum = fib4(n\
    \ - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n    end\n    \n    return sum\n\
    end", "  if n < 0\n    return 0\n  elsif n == 0\n    return 0\n  elsif n == 1\n\
    \    return 1\n  elsif n == 2\n    return 2\n  elsif n == 3\n    return 0\n  elsif\
    \ n == 4\n    return 1\n  else\n    return fib4(n-1) + fib4(n-2) + fib4(n-3) +\
    \ fib4(n-4)\nend", "  if n <= 4\n    return n\n  else\n    return fib4(n - 1)\
    \ + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\nend", "  fib_4(n)\nend", "    fib4_counter\
    \ = 0\n    fib4_total = 0\n    while n > 0\n        fib4_total = fib4_total +\
    \ fib4_counter\n        fib4_counter = fib4_counter + fib4_counter\n        n\
    \ = n - 1\n    fib4_total = fib4_total + fib4_counter\n    fib4_total\nend", " puts\
    \ fib4_result(n)\n end", "    # Your code here\n    fib4(n).to_i\nend\n</cell>\n\
    <text>\nTests\nWe can run our fib4 tests using the following code:", "  # FILL\
    \ IN HERE\nend", "  case n\n  when 0 then 0\n  when 1 then 0\n  when 2 then 2\n\
    \  when 3 then 0\n  else fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n  end\n\
    end", "  fib = Array.new(n) { |i| i }\n  fib[n-1] = 0\n  fib[n-2] = 0\n  fib[n-3]\
    \ = 0\n  fib[n-4] = 0", "  fib4_rec(n, 0, 1, 2)\nend", "  i = 1\n  s = 0\n  while\
    \ i <= n\n    s += i\n    i += 2\n  end\n  s\nend\nputs fib4(4)", "  raise NotImplementedError\n\
    end", "  fib4sum = 0\n  for i in (1..n)\n    fib4sum = (fib4sum + i) % 4\n  end\n\
    \  return fib4sum\nend\n</cell>\n<code language=julia-1.0>", "  return n if n\
    \ < 0 || n > 4 else fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\nend", "  if\
    \ n==0\n    0\n  elsif n==1\n    1\n  elsif n==2\n    2\n  elsif n==3\n    0\n\
    \  elsif n==4\n    4\n  else\n    fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\
    \ \n  end\nend", "    sum = n.to_i\n    sum = (sum.to_i + 4) % 100\n    sum =\
    \ (sum.to_i + 5) % 100\n    sum = (sum.to_i + 6) % 100\n    sum = (sum.to_i +\
    \ 7) % 100\n    sum = (sum.to_i + 8) % 100\n    sum = (sum.to_i + 9) % 100\n \
    \   sum = (sum.to_i + 10) % 100\n    sum = (sum.to_i + 11) % 100\n    sum = (sum.to_i\
    \ + 12) % 100\n    sum = (sum.to_i + 13) % 100\n    sum = (sum.to_i + 14) % 100\n\
    \    sum = (sum.to_i + 15) % 100\n    sum = (sum.to_i + 16) % 100\n    sum = (sum.to_i\
    \ + 17) % 100\n    sum = (sum.to_i + 18) % 100\n    sum = (sum.to_i + 19) % 100\n\
    \    sum = (sum.to_i + 20) % 100\n    sum = (sum.to_i + 21) % 100\n    sum = (sum.to_i\
    \ + 22) % 100\n    sum = (sum.to_i + 23) % 100\n    sum = (sum.to_i + 24) % 100\n\
    \    sum = (sum.to_i + 25) % 100\n    sum = (sum.to_i + 26) % 100\n    sum = (sum.to_i\
    \ + 27) % 100\n    sum = (sum.to_i + 28) % 100\n    sum = (sum.to_i + 29) % 100\n\
    \    sum = (sum.to_i + 30) % 100\n    sum = (sum.to_i + 31) % 100\n    sum = (sum.to_i\
    \ + 32) % 100\n    sum = (sum.to_i + 33) % 100\n    sum = (sum.to_i + 34) % 100\n\
    \    sum = (sum.to_i + 35) % 100\n    sum = (sum.to_i + 36) % 100\n    sum = (sum.to_i\
    \ + 37) % 100\n    sum = (sum.to_i + 38) % 100\n    sum = (sum.to_i + 39) % 100\n\
    \    sum = (sum.to_i + 40) % 100\n    sum = (sum.to_i + 41) % 100\n    sum = (sum.to_i\
    \ + 42) % 100\n    sum = (sum.to_i + 43) % 100\n    sum = (sum.to_i + 44) % 100\n\
    \    sum = (sum.to_i + 45) % 100\n    sum = (sum.to_i + 46) % 100\n    sum = (sum.to_i\
    \ + 47) % 100\n    sum = (sum.to_i + 48) % 100\n    sum = (sum.to_i + 49) % 100\n\
    \    sum = (sum.to_i + 50) % 100\n    sum = (sum.to_i + 51) % 100\n    sum = (sum.to_i\
    \ + 52) % 100\n    sum = (sum.to_i + 53) % 100\n    sum = (sum.to_i + ", "  fib4_inc\
    \ = fib4_inc_cache[n]\n  fib4_dec = fib4_dec_cache[n]\n  return fib4_inc(n) if\
    \ fib4_inc != nil and n != 0 and not fib4_dec(n).nil? else fib4_dec(n) if fib4_dec\
    \ != nil and n != 0 and fib4_inc(n).nil? end\nend\nfib4_inc_cache = {}\nfib4_dec_cache\
    \ = {}", "  fib4 =  0\n  fib4 += fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n\
    \  return fib4\nend", "  # base case\n  case n == 0\n    puts \"0\"\n    break\n\
    \  case n == 1\n    puts \"0\"\n    break\n  case n == 2\n    puts \"2\"\n   \
    \ break\n  case n == 3\n    puts \"0\"\n    break\n  case n == 4\n    puts \"\
    0\"\n    break\n  # recursive case\n  else\n    fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4) \n  end\nend", end, "  n1 = n % 4\n  n2 = ((n-3)%4) + n2\n  n3 =\
    \ ((n-5)%4) + n3\n  n4 = ((n-7)%4) + n4\n  n5 = ((n-9) % 4) + n5\n  n6 = ((n-11)\
    \ % 4) + n6\n  n7 = ((n-13) % 4) + n7\n  n8 = ((n-15) % 4) + n8\n  return n1 +\
    \ n2 + n3 + n4 + n5 + n6 + n7 + n8\nend", "  case n\n    when 0\n      0\n   \
    \ when 1\n      0\n    when 2\n      2\n    when 3\n      0\n    when n\n    \
    \  fib4(n-1)+fib4(n-2)+fib4(n-3)+fib4(n-4)\n  end\nend", "  n==0? 0\n  : n==1?\
    \ 1\n  : fib4(n-2) + fib4(n-3) + fib4(n-4) \nend", "    i = 4\n    fib = 0\n \
    \   while i > 0 and i <= n\n    fib += i\n    i-=1\n    return fib\n</code>\n\
    <|/ q dscore=0 |>\n<| c |>\nYour code is very inefficient and will give you incorrect\
    \ results. Also, your teacher is an idiot! You should not be asking your instructor\
    \ to help you with your homework. You should simply write your code, then once\
    \ you've written it yourself, come back and ask for help with any specific problems\
    \ you have.\n<|/ c |>\n<| c |>\nI only wrote the code to get an idea of how to\
    \ do it. I didn't really have anything to do with it. I was just confused on how\
    \ to approach it. Maybe I was supposed to do something else.\n<|/ c |>\n<| a dscore=2\
    \ tags=ruby,fibonacci |>\nA simple recursive implementation would look like this:\n\
    <code>", "    seq = 4\n    while seq <= n\n        seq = seq + 4\n    end\n  \
    \  seq\nend\n</cell>\n<code language=julia-1.6>\nfib4(4)\n</cell>\n<code language=julia-1.6>\n\
    fib4(5)\n</cell>\n<code language=julia-1.6>\nfib4(6)\n</cell>\n<code language=julia-1.6>\n\
    fib4(10)\n</cell>\n<code language=julia-1.6>\nfib4(20)\n</cell>\n<code language=julia-1.6>\n\
    fib4(30)\n</cell>\n<text>\nCongratulations, you're done with the assignment! \
    \ You've just learned a whole new type of Julia syntax.  The assignment was a\
    \ pretty interesting one, and you learned a lot more about Julia!", "  return\
    \ if(n<1)\n    fib4(0)\n  else\n    fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).",
  "  if n == 0\n    0\n  elsif n == 1\n    1\n  elsif n == 2\n    2\n  elsif n ==\
    \ 3\n    0\n  elsif n == 4\n    4\n  else\n    fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\nend", "  if n < 0 \n    n\n  else \n    fib4(n-1) + fib4(n-2)\
    \ + fib4(n-3) + fib4(n-4)\nend", "  p =  2\n  q = 1\n  s = 0\n  if n <= 0\n  \
    \  p = 0\n    q = 1\n    s = 0\n  elsif n >= 4\n    s = p + q + s\n  else\n  \
    \  s += q\n    p = q\n    q = p + q\n    s = p + q + s\n  end\n  s\nend", "  fib4\
    \ = 0\n  for i in 0..n-1\n    fib4 += i\n    fib4 += 2*i + 3*i + 4\n  end\n  fib4\n\
    end\n</code>\nI do not believe that the following code will work, but I am not\
    \ sure how else to go about it than to use recursion.\n<code>", "  if n == 0\n\
    \    0\n  elsif n == 1\n    1\n  elsif n == 2\n    2\n  elsif n == 3\n    0\n\
    \  elsif n == 4\n    0\n  elsif n == 5\n    1\n  elsif n == 6\n    1\n  elsif\
    \ n == 7\n    2\n  elsif n == 8\n    3\n  elsif n == 9\n    1\n  elsif n == 10\n\
    \    1\n  elsif n == 11\n    2\n  elsif n == 12\n    3\n  elsif n == 13\n    4\n\
    \  elsif n == 14\n    5\n  elsif n == 15\n    6\n  elsif n == 16\n    7\n  elsif\
    \ n == 17\n    8\n  elsif n == 18\n    9\n  elsif n == 19\n    10\n  elsif n ==\
    \ 20\n    11\n  elsif n == 21\n    12\n  elsif n == 22\n    13\n  elsif n == 23\n\
    \    14\n  elsif n == 24\n    15\n  elsif n == 25\n    16\n  elsif n == 26\n \
    \   17\n  elsif n == 27\n    18\n  elsif n == 28\n    19\n  elsif n == 29\n  \
    \  20\n  elsif n == 30\n    21\n  elsif n == 31\n    22\n  elsif n == 32\n   \
    \ 23\n  elsif n == 33\n    24\n  elsif n == 34\n    25\n  elsif n == 35\n    26\n\
    \  elsif n == 36\n    27\n  elsif n == 37\n    28\n  elsif n == 38\n    29\n \
    \ elsif n == 39\n    30\n  elsif n == 40\n    31\n  elsif n == 41\n    32\n  elsif\
    \ n == 42\n    33\n  elsif n == 43\n    34\n  elsif n == 44\n    35\n  elsif n\
    \ == 45\n    36\n  elsif n == 46\n    37\n  elsif n == 47\n    38\n  elsif n ==\
    \ 48\n    39\n  elsif n == 49\n    40\n  elsif n == 5\n    1\n  elsif n == 6\n\
    \    2\n  elsif n == 7\n    3", "    a, b = 0, 1\n    while b < n\n        a,\
    \ b = b, a + b\n    end\n    return b\nend", "\tif n == 0\n\tthen 0\n\telse \n\
    \t\tfib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\nend", "  n\nend\n</cell>\n\
    <cell>", "    if n == 0\n\t0\n    elsif n == 1\n\t0\n    elsif n == 2\n\t2\n \
    \   elsif n == 3\n\t0\n    elsif n >= 4\n\tfib4(n-2) + fib4(n-3) + fib4(n-4)\n\
    \    else\n\traise ArgumentError, 'fib4(%i out of range)' % n\nend", "end\n</cell>\n\
    <cell>", "  fib_array = (0..100).to_a\n  fib_array.shift n\n  fib_array.inject\
    \ { |a,b| a+b }\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
