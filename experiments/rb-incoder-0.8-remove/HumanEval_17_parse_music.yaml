name: HumanEval_17_parse_music
language: rb
prompt: "# Input to this function is a string representing musical notes in a special\
  \ ASCII format.\n# Your task is to parse this string and return list of integers\
  \ corresponding to how many beats does each\n# not last.\n# Here is a legend:\n\
  # 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|'\
  \ - quater note, lasts one beat\ndef parse_music(music_string)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_parse_music\n\
  \    candidate = method(:parse_music)\n    assert_equal([], candidate.call(\"\"\
  ))\n    assert_equal([4, 4, 4, 4], candidate.call(\"o o o o\"))\n    assert_equal([1,\
  \ 1, 1, 1], candidate.call(\".| .| .| .|\"))\n    assert_equal([2, 2, 1, 1, 4, 4,\
  \ 4, 4], candidate.call(\"o| o| .| .| o o o o\"))\n    assert_equal([2, 1, 2, 1,\
  \ 4, 2, 4, 2], candidate.call(\"o| .| o| .| o o| o o|\"))\n  end\nend\n"
completions: ["  music_notes = music_string.split('|')\n  parsed_notes = Array.new\n\
    \  music_notes.each do |note|\n    beats_str = note.split('o').last\n    parsed_notes.push(parse_beat_count(beats_str))\n\
    \  end\n  parsed_notes\nend", "  music_list.each do |note|\n    if note[0] is\
    \ 'o'\n      puts \"#{note[1]} - #{note[2]} - #{note[3]} - #{note[4]}\"\n    elsif\
    \ note[0] is 'o|'\n      puts \"#{note[1]} - #{note[2]} - #{note[3]}\"\n    elsif\
    \ note[0] is '.|'\n      puts \"#{note[1]} - #{note[2]} - #{note[3]} - #{note[4]}\
    \ - #{note[5]} - #{note[6]}\"\n    end\n  end\nend", "  # Split the music string\
    \ on newline char to get a list with music lines\n  music_lines = music_string.split(\"\
    \\n\")", "  return music_string.split('|').map do |note|\n    note.count('o')\
    \ > 0 ? 'o' : note.count('o|') > 0 ? 'o|' : note.count('.|') > 0 ? '.|' : note\n\
    \  end\nend", "    music = music_string.split(//)\n    \n    return music_string\n\
    end", "  raise \"Not implemented\"\nend", "  music_string = music_string.chomp\n\
    \  result = []\n  for i in music_string\n    if i == 'o'\n      result.push(4)\n\
    \    elsif i == 'o|'\n      result.push(2)\n    elsif i == '.|'\n      result.push(1)\n\
    \    elsif i == '#'\n      result.push(5)\n    elsif i == 'b'\n      result.push(6)\n\
    \    elsif i == 'b'|\n      result.push(5)\n    elsif i == '>'\n      result.push(4)\n\
    \    elsif i == '<'\n      result.push(3)\n    elsif i == '>'|\n      result.push(3)\n\
    \    elsif i == '<'|\n      result.push(2)\n    else\n      result.push(i)\n \
    \   end\n  end\n  result\nend", "  parsed_music = music_string.scan(/(\\w|\\.)\\\
    |/)\n  parsed_music = parsed_music.map { |note| note[0].to_i(16) }\n  parsed_music\
    \ = parsed_music.map { |note| note / 4 }\n  parsed_music = parsed_music.map {\
    \ |note| note / 2 }\n  parsed_music = parsed_music.map { |note| note }\n  parsed_music.map\
    \ { |note| note }\nend\n</code>\n<|/ a tags=ruby,parsing,midi,ruby-on-rails dscore=1\
    \ |>\n<| c |>\nthank you for this solution i think it's exactly what i need. I\
    \ will try it and let you know.\n<|/ c |>\n<| c |>\nOkay, so i tried your solution\
    \ and it works. I implemented it and it works like a charm. Thank you very much\
    \ for your help. And yes i do appreciate it a lot.\n<|/ c |>\n<| a |>\nIt is not\
    \ really clear what you're asking. Maybe you are asking about how to get the notes\
    \ and how each note is represented. For a midi-file you only need the midi-numbers,\
    \ not the note-symbols. You probably want to have a look at midi-tools for Ruby.\n\
    <|/ a dscore=0 tags=ruby,parsing,midi,ruby-on-rails |>\n<| c |>\nI guess i wasn't\
    \ clear enough. Yes, i need to get the notes and how they are represented. I will\
    \ take a look at midi-tools. Thank you.\n<|/ c |>\n<| a |>\nOkay, i tried and\
    \ used solution from and i solved my issue. Here is my code below: \n<code>",
  "  music_array = []\n  music_array = music_string.scan(/(?:o|o\\|.\\|)/g)\n  music_array.flatten!\n\
    \  return music_array\nend", "    music = music_string.split(//)\n    \n    result\
    \ = []\n    note_map = {\n        \"o\"=>4,\n        \"o|\"=>2,\n        \".|\"\
    =>1\n    }\n    \n    # Parsing music string\n    music_length = 1\n    for m\
    \ in music\n        music_length += 1\n        if m != \".|\" and m != \"o|\"\
    \ and m != \"o\" \n            result[music_length - 1] = music_length - 1\n \
    \       end\n    end\n    \n    return result.map { |n| note_map[m] }\nend", " \
    \   music_list = music_string.split(\"-\")\n    music_list.pop(0)\n    return\
    \ music_list\nend\n</cell>\n<code language=julia-1.0>\nmusic_list = parse_music(\"\
    a-b-c-d-e-f-g\")\n</cell>\n<code language=julia-1.0>\nmusic_list\n</cell>\n<code\
    \ language=julia-1.0>\nfunction parse_music_to_array(music_string)\n    music_list\
    \ = parse_music(music_string)\n    music_array = []\n    for note in music_list\n\
    \        if note[1] == 'c'\n            music_array += [length(music_string) -\
    \ note[3]]\n        elseif note[1] == 'o'\n            music_array += [length(music_string)\
    \ - note[3] + 1]\n        elseif note[1] == 'o|'\n            music_array += [length(music_string)\
    \ - note[3] + 2]\n        elseif note[1] == '.|'\n            music_array += [length(music_string)\
    \ - note[3] + 3]\n        end\n    end\n    return music_array\nend\n</cell>\n\
    <code language=julia-1.0>\nparse_music_to_array(\"a-b-c-d-e-f-g\")\n</cell>\n\
    <code language=julia-1.0>\nfunction parse_pitch_to_array(music_string)\n    music_array\
    \ = parse_music_to_array(music_string)\n    pitch_array = []\n    for note in\
    \ music_array\n        note = note - length(music_string) + 1 # Notes are numbered\
    \ from 1\n        if note <= 60\n            freq = 440 * (2^(note / 12))\n  \
    \          freq += 440 * (2^(note % 12))\n            freq *= 1000 / 440\n   \
    \         push!(pitch_array, freq)\n        else\n            push!(pitch_array,\
    \ 0)\n        end\n    end\n    return pitch_array\nend\n</cell>\n<code language=julia-1.0>\n\
    parse_pitch_to_array(\"a-b-c-d-e-f-g\")\n</cell>\n<text>\nNow let's use our helper\
    \ function on music notes.", "  music = music_string.split(//)\n  num_beats =\
    \ music.select { |e| e =~ /\\d+/ }.length\n  num_beats.times { |x| music << num_beats\
    \ }\n  music.flatten!\nend\n</cell>\n<code language=julia-1.1>", "  music_string.gsub!\
    \ /[o|.]/, '|'\n  music_string.gsub! /[\\n\\r]/, ''\n  music_string.gsub! /[,]/,\
    \ ' '\n  music_string.gsub! /['\"]/, ''\n  music_string.downcase!\n  music_string.chars.map\
    \ { |char|\n    case char\n    when 'a'\n      0\n    when 'c'\n      1\n    when\
    \ 'd'\n      2\n    when 'e'\n      3\n    when 'f'\n      4\n    when 'g'\n \
    \     5\n    when 'a'\n      6\n    when 'b'\n      7\n    when 'c'\n      8\n\
    \    when 'd'\n      9\n    when 'e'\n      10\n    when 'f'\n      11\n    when\
    \ 'g'\n      12\n    when 'a'\n      13\n    when 'b'\n      14\n    when 'c'\n\
    \      15\n    when 'd'\n      16\n    when 'e'\n      17\n    when 'f'\n    \
    \  18\n    when 'g'\n      19\n    when 'a'\n      20\n    when 'b'\n      21\n\
    \    when 'c'\n      22\n    when 'd'\n      23\n    when 'e'\n      24\n    when\
    \ 'f'\n      25\n    when 'g'\n      26\n    when 'a'\n      27\n    when 'b'\n\
    \      28\n    when 'c'\n      29\n    when 'd'\n      30\n    when 'e'\n    \
    \  31\n    when 'f'\n      32\n    when 'g'\n      33\n    when 'a'\n      34\n\
    \    when 'b'\n      35\n    when 'c'\n      36\n    when 'd'\n      37\n    when\
    \ 'e'\n      38\n    when 'f'\n      39\n    when 'g'\n      40\n    when 'a'\n\
    \      41\n    when 'b'\n      42\n    when 'c'\n      43\n    when 'd'\n    \
    \  44\n    when 'e'\n      45\n    when 'f'\n      46\n    when 'g'\n      47\n\
    \    when 'a'\n      48\n    when 'b'\n      49\n    when 'c'\n      50\n    when\
    \ 'd'\n      51\n    ", "  music_string = 'o' + music_string + '|o|o'\n  music_string\
    \ = 'o' + music_string + '.|o'\n  music_string = 'o' + music_string + 'o'\n  music_string\
    \ = 'o' + music_string + 'o|o|o'\n  music_string = 'o' + music_string + 'o|o|o|o'\n\
    \  music_string = 'o' + music_string + 'o|o|o|o|o'\n  music_string = 'o' + music_string\
    \ + 'o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o",
  "  music_list = music_string.split('|')\n  music_list = music_list.map{|x| x.split('o').map{|y|\
    \ y.to_i}}\n  music_list\nend\n</code>\nExample output:\n<code>\n> parse_music('c.|n.|o.|c.|n.|o.|c.|n.|o.|c.|n.|o.|c.|n.|o.|c.|n.|o.|c.|n.|o.|c.|n.|o.|c.|n.|o.|c.|n.|o.|c.|n.|o.|c.|n.|o.|c.|n.|o.|c.|n.|o.|c.|n.|o.|c.|n.|o.|c.|n.|o.|c.|n.|o.|c.|n.|o.|c.|n.|o.|c.|n.|o.|c.|n.|o.|c.|n.|o.|c.|n.|o.|c.|n.|o.|c.|n.|o.|c.|n.|o.|c.|n.|o.|c.|n.|o.|c.|n.|o.|c.|n.|o.|c.|n.|o.|c.|n.|o.|c.|n.|o.|c.|n.|o.|c.|n.|o.|c.|n.|o.|c.|n.|o.|c.|n.|o.|c.|n.|o.|c.|n.|o.|c.|n.|o.|c.|n.|o.|c.|n.|o.|c.|n.|o.|c.|n.|o.|c.|n.|o.|c.|n.|o.|c.|n.|o.|c.|n.|o.|c.|n.|o.|c.|n.|o.|c.|n.|o.|c.|n.|o.|c.|n.|o.|c.|n.|o.|c.|n.|o.|c.|n.|o.|c.|n.|o.|c.|n.|o.|c.|n.|o.|c.|n.|o.|c.|n.|o.|c.|n.|o.|c.|n.|o.|c.|n.|o.|c.|n.|o.|c.|n.|o.|c.|n.|o.|c.|n.|o.|c.|n.|o.|c.|n.|o.|c.|n.|o.|c.|n.|o.|c.|n.|o.|c.|n.|o.|c.",
  "  # Your code here\nend", "  # your code here\nend", "  music_notes = music_string.split(//)\n\
    \  music_notes.map!(&:to_i)\nend\n</code>\nAnd now we can use our new parse_music\
    \ to solve the task:\n<code>", "    music_string = music_string.split('o')\n \
    \   parsed_music = []\n    for music in music_string:\n        if music[0] ==\
    \ 'o':\n            parsed_music.append(4)\n        elif music[0] == 'o|':\n \
    \           parsed_music.append(2)\n        elif music[0] == '.':\n          \
    \  parsed_music.append(1)\n        else:\n            parsed_music.append(0)",
  "  # TODO: Implement me!\nend", "  music_notes = []\n  \n  music_note_strings =\
    \ music_string.split(\"|\")\n  music_note_strings.each do |music_note_string|\n\
    \    music_note_string = music_note_string.split(\"o\")\n    music_note_string.each\
    \ do |note|\n      music_notes << note.split(\".\").length\n    end\n  end\n \
    \ \n  music_notes.uniq!\n  music_notes.sort!\n  return music_notes\nend", "  \
    \  # TODO\nend", "    notes = []\n    prev_char = None\n    note_duration = None\n\
    \    note_count = 0\n    for char in music_string:\n        if char == 'o':\n\
    \            if note_count > 0 and note_duration is None:\n                note_duration\
    \ = 4\n        elif char == 'o|':\n            if note_count > 0 and note_duration\
    \ is not None:\n                note_duration = 2\n        elif char == '.|':\n\
    \            if note_count > 0:\n                note_duration = 1\n        note_count\
    \ += 1\n        if note_duration is not None:\n            notes.append(note_count)\n\
    \            note_count = 0\n            note_duration = None\n    if note_duration\
    \ is not None:\n        notes.append(note_count)\n    return notes\n    ", " \
    \ music = music_string.split\n  parsed_music = music.map do |note|\n    note_octave,\
    \ note_length = get_octave_and_length(note)\n    note_length = note_length.to_i\n\
    \    note_octave + 1\n    note_length * 4\n  end\nend", "  music_array = music_string.chars\n\
    \  music_array.each do |element|\n    if element.char == 'o'\n      note, beats\
    \ = 1, 4\n    elsif element.char == 'o|'\n      note, beats = 1, 2\n    elsif\
    \ element.char == '.|'\n      note, beats = 1\n    else\n      note, beats = 1,\
    \ 1\n    end\n    music_array.shift\n    music_array.each do |element|\n     \
    \ music_array.pop\n    end\n  end\n  return music_array\nend", "  music_string.scan(/(?:([a-zA-Z]{2})|\\\
    .|)(o|o\\|)/) do |(type, beat)|\n    if type == nil\n      beats = 4\n    elsif\
    \ type == 'o'\n      beats = 4\n    elsif type == 'o|'\n      beats = 2\n    elsif\
    \ type == '.'\n      beats = 1\n    end\n    music_string.slice!(-1 * beats, beats)\n\
    \  end\n  return music_string\nend", "  music_array = music_string.split\n  beats\
    \ = Array.new\n  music_array.each do |note|\n    if note.length == 1\n      beats\
    \ << 4\n    elsif note.length == 2\n      beats << 2\n    elsif note.length ==\
    \ 3\n      beats << 1\n    else\n      raise \"Wrong length of note #{note}\"\n\
    \    end\n  end\n  return beats\nend", "  music = music_string.split(' ').map(&:capitalize).join('')\n\
    \  notes = music.split('|')\n  notes.each do |note|\n    if note.include?('o')\n\
    \      last = note.rindex('o')\n      length = note[last..-1].to_i\n      notes[note.index('o')]\
    \ = 'o' * length\n    elsif note.include?('.|')\n      last = note.rindex('.|')\n\
    \      length = note[last..-1].to_i\n      notes[note.index('.|')] = '.|' * length\n\
    \    end\n  end\n  notes\nend", "    music_list = music_string.split('|')\n  \
    \  notes = []\n    for note in music_list:\n        note = note.lstrip(\".\")\n\
    \        note = note.rstrip(\"o\")\n        if note == '':\n            continue\n\
    \        notes.append(note)\n    return notes", "    music_chars = music_string.split(\"\
    \").map do |x|\n        x.ord\n    end.compact.uniq\n    music_chars.map do |x|\n\
    \        if x == '.'\n            4\n        elsif x == 'o'\n            3\n \
    \       elsif x == 'o|'\n            2\n        else\n            1\n        end\n\
    \    end\nend", "  notes = music_string.scan(/([.o|]|[\\d])/)\n  music_notes =\
    \ Hash.new(0)\n  notes.each do |note|\n    case note[0]\n    when \".\"\n    \
    \  music_notes[note[0]] += 4\n    when \"o\"\n      music_notes[note[0]] += 1\n\
    \    when \"|\"\n      music_notes[note[0]] += 2\n    when \"d\"\n      music_notes[note[0]]\
    \ += 1\n    when \"d\"\n      music_notes[note[0]] += 1\n    end\n  end\n  music_notes\n\
    end", "    music_list = music_string.split('|')\n    music_list = [s.strip() for\
    \ s in music_list if s.strip()]", "  music_notes = music_string.split('|')\n \
    \ return music_notes.map {|note| note.split('o').length }\nend", "  music_notes\
    \ = ['o', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|',\
    \ 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|',\
    \ 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|',\
    \ 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|',\
    \ 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|',\
    \ 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|',\
    \ 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|',\
    \ 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|',\
    \ 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|',\
    \ 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|',\
    \ 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|',\
    \ 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|',\
    \ 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|', 'o|',\
    \ 'o", "    music_list = music_string.split('|')\n    notes = []\n    note_counts\
    \ = [0 for x in music_list]\n    for note in music_list:\n        if note == 'o':\n\
    \            note_counts[len(notes) - 1] += 4\n        elif note == 'o|':\n  \
    \          note_counts[len(notes) - 1] += 2\n        elif note == '.|':\n    \
    \        note_counts[len(notes) - 1] += 1\n        else:\n            notes.append(note_counts[len(notes)\
    \ - 1])\n            note_counts[len(notes) - 1] = 0\n    return notes\n</cell>\n\
    <cell>\nmusic_string = \"C.c|C.d|C.x|C.x|C.x|C.x|C.x|C.x|C.x|C.x|C.x|C.x|C.x|C.x|C.x|C.x|C.x|C.x|C.x|C.x|C.x|C.x|C.x|C.x|C.x|C.x|C.x|C.x|C.x|C.x|C.x|C.x|C.x|C.x|C.x|C.x|C.x|C.x|C.x|C.x|C.x|C.x|C.x|C.x|C.x|C.x|C.x|C.x|C.x|C.x|C.x|C.x|C.x|C.x|C.x|C.x|C.x|C.x|C.x|C.x|C.x|C.x|C.x|C.x|C.x|C.x|C.x|C.x|C.x|C.x|C.x|C.x|C.x|C.x|C.x|C.x|C.x|C.x|C.x|C.x|C.x|C.x|C.x|C.x|C.x|C.x|C.x|C.x|C.x|C.x|C.x|C.x|C.x|C.x|C.x|C.x|C.x|C.x|C.x|C.x|C.x|C.x|C.x|C.x|C.x|C.x|C.x|C.x|C.x|C.x|C.x|C.x|C.x|C.x|C.x|C.x|C.x|C.x|C.x|C.x|C.x|C.x|C.x|C.x|C.x|C.x|C.x|C.x|C.x|C.",
  "  music_string.each_char.map do |char|\n    if char == '.'\n      0\n    elsif\
    \ char == 'o'\n      4\n    elsif char == '|' || char == 'o|'\n      2\n    else\n\
    \      raise \"Unknown music character #{char}\"\n    end\n  end.compact\nend\n\
    </code>\n<|/ a |>\n<| c |>\nThat's a lot of help! Thank you so much!\n<|/ c |>\n\
    <| a dscore=2 |>\nHere is my implementation which follows your specification as\
    \ much as possible.\n<code>", "  # your code here\nend\n</cell>\n<cell>", "  music_string.split(//).map\
    \ do |note|\n    note.chars.map do |char|\n      char.ord\n    end\n  end\nend",
  "    music_string.scan(/(([o|.])\\1{2,})/)\nend", "  music_notes = music_string.split('o')\n\
    \  music_notes = music_notes + music_notes.shift\n  music_notes.map! { |note|\n\
    \    note.chars.map! { |char|\n      if char == '|'\n        2\n      elsif char\
    \ == 'o'\n        4\n      else\n        0\n      end\n    }\n  }\n  return music_notes\n\
    end\n</code>\nOutput\n<code>\np parse_music('o|o|o|.')", "  return music_string.scan(/[\\\
    .|o|o\\|]/).reject {|n| n == \"o\"}.map(&:to_i)\nend", "    music_string = music_string.to_s.upcase\n\
    \    \n    music_notes = music_string.chars", "  music_string.downcase!\n  music_string.replace\
    \ 'o', 16\n  music_string.replace 'o|', 32\n  music_string.replace '.|', 48\n\
    \  music_string.scan(/\\d+/).map {|note| note.to_i}\nend\n</code>\n<|/ a tags=ruby,regex\
    \ dscore=2 |>\n<| a dscore=2 tags=ruby,regex |>\n<code>", "  music_string = music_string.downcase\n\
    \  notes = {}", "  music_chars = music_string.split('')\n  notes = {}", "  # TODO:\
    \ your code here\n  music_list = music_string.split(\"|\")\n  music_list = music_list.map\
    \ {|i| i.split(\"\").map {|k| k.to_i}}\n  music_list = music_list.flatten\n  music_list\
    \ = music_list.map {|i| i * (4/(i.length-1))}\n  music_list.map {|i| i.length.to_i}\n\
    end", "  music_string = music_string.downcase\n  music_notes = []\n  music_beat_counter\
    \ = []\n  music_beat_length = 0\n  music_beat_counter = 0\n  music_beat_length\
    \ = 0", "  music_splitted = music_string.split(\"|\")\n  num_notes = []\n  \n\
    \  music_splitted.each do |note|\n    note_letter = note[0]\n    \n    note_value\
    \ = 0\n    if note_letter == \"o\"\n      note_value = 4\n    elsif note_letter\
    \ == \"o|\"\n      note_value = 2\n    elsif note_letter == \".|\"\n      note_value\
    \ = 1\n    end\n    \n    num_notes << note_value\n  end\n  \n  num_notes\nend",
  "  music_string.chars.each do |char|\n    if char == '|' || char == 'o'\n      puts\
    \ \"#{char} is whole note, lasts four beats\"\n    elsif char == 'o|' || char\
    \ == '.'\n      puts \"#{char} is half note, lasts two beats\"\n    elsif char\
    \ == 'o||' || char == '.|'\n      puts \"#{char} is quater note, lasts one beat\"\
    \n    else\n      puts \"#{char} is an invalid note\"\n    end\n  end\nend", " \
    \ notes = music_string.split('|')\n  notes.map! do |note|\n    if note == '.'\n\
    \      2\n    elsif note == 'o'\n      4\n    elsif note == 'o|'\n      6\n  \
    \  else\n      0\n    end\n  end\nend", "  # Your code goes here\n  note_mapping\
    \ = {\n    '.o|' : lambda i: 2,\n    '.o|.' : lambda i: 1,\n    'o.o|' : lambda\
    \ i: 1,\n    'o.o|.' : lambda i: 2,\n    'o.o.o|' : lambda i: 1,\n    'o.o.o|.'\
    \ : lambda i: 2,\n    'o.o|o' : lambda i: 2,\n    'o.o|o.' : lambda i: 1,\n  \
    \  'oo.o|' : lambda i: 1,\n    'oo.o|.' : lambda i: 1,\n    'oo.o.o|' : lambda\
    \ i: 2,\n    'oo.o.o|.' : lambda i: 2,\n    'oo.o|o' : lambda i: 2,\n    'oo.o|o.'\
    \ : lambda i: 1,\n    'oo.o.o|' : lambda i: 2,\n    'oo.o.o|.' : lambda i: 2,\n\
    \    'oo.o|o' : lambda i: 2,\n    'oo.o|o.' : lambda i: 1,\n    'oo.o.o|' : lambda\
    \ i: 2,\n    'oo.o.o|.' : lambda i: 2,\n    'oo.o|o' : lambda i: 2,\n    'oo.o|o.'\
    \ : lambda i: 1,\n    'oo.o.o|' : lambda i: 2,\n    'oo.o.o|.' : lambda i: 2,\n\
    \    'oo.o|o' : lambda i: 2,\n    'oo.o|o.' : lambda i: 1,\n    'oo.o.o|' : lambda\
    \ i: 2,\n    'oo.o.o|.' : lambda i: 2,\n    'oo.o|o' : lambda i: 2,\n    'oo.o|o.'\
    \ : lambda i: 1,\n    'oo.o.o|' : lambda i: 2,\n    'oo.o.o|.' : lambda i: 2,\n\
    \    'oo.o|o' : lambda i: 2,\n    'oo.o|o.' : lambda i: 1,\n    'oo.o.o|' : lambda\
    \ i: 2,\n    'oo.o.o|.' : lambda i: 2,\n    'oo.o|o' : lambda i: 2,\n    'oo.o|o.'\
    \ : lambda i: 1,\n    'oo.o.o|' : lambda i: 2,\n    'oo.o.o|.' : lambda i: 2,\n\
    \    'oo.o|o' : lambda i: 2,\n    'oo.o|o.' : lambda i: 1,\n    'oo.o.o|' : lambda\
    \ i: 2,\n    'oo.o.o|.' : lambda i: 2,\n    'oo.o|o' : lambda i: 2,\n    'oo.o|o.'\
    \ : ", "  note_list = []\n  music_string = music_string.strip\n  note_length =\
    \ music_string.size\n  if note_length % 4 != 0 \n    note_length = note_length\
    \ + 4\n  end\n  note_size = note_length / 4\n  music_string.each_byte do |char|\n\
    \    char_array = char.chr\n    if char_array == \"o\"\n      note_list.push(0)\n\
    \    else\n      if char_array == \"o|\"\n        note_list.push(1)\n      else\n\
    \        if char_array == \".|\"\n          note_list.push(2)\n        else\n\
    \          raise StandardError, 'Invalid music string!'\n        end\n      end\n\
    \    end\n  end\n  return(note_list)\nend", "    music_notes = []\n    music_length\
    \ = len(music_string)\n    for i in music_string:\n        if i == '|':\n    \
    \        music_notes.append(music_length/2)\n        elif i == 'o':\n        \
    \    music_notes.append(4)\n        elif i == 'o|':\n            music_notes.append(2)\n\
    \        else:\n            music_notes.append(1)\n    return music_notes\n</cell>\n\
    <cell>", "    music_array = []\n    music_array.append(0)\n    for music_symbol\
    \ in music_string:\n        if music_symbol == 'o':\n            music_array.append(4)\n\
    \        elif music_symbol == 'o|':\n            music_array.append(2)\n     \
    \   elif music_symbol == '.|':\n            music_array.append(1)\n        else:\n\
    \            music_array.append(0)", "  music_string.scan(/(\\D+?)(?=(\\d+|\\\
    Z))/).map { |s| s.split(//).map { |x| x.to_i } }\nend", "  music_string.split('|').map\
    \ { |note_group| note_group.split('o').map { |note| note.count('|') } }\nend",
  "  music = music_string.split(\"|\")\n  music_list = music_string.split(\"|\").map(&:to_i).map(&:to_a)\n\
    \  music_list.each_with_index do |note, index|\n    notes[index] = note\n  end\n\
    \  music_list\nend", "  # Parsing code here\nend", "  music_string.downcase!\n\
    \  notes = music_string.split('|')", "  # Your code goes here\nend", "  notes\
    \ = music_string.split(\"|\")\n  output = Hash.new(0)\n  notes.each do |note|\n\
    \    parts = note.split(\" - \")\n    if parts[0].to_s =~ /^o(\\d+)$/\n      output[parts[0].to_i]\
    \ += 1\n    end\n  end\n  output\nend", "    notes = []\n    beat_count = 1\n\
    \    note_string = ''\n    for note in music_string.split('|'):\n        if note[0]\
    \ == '.':\n            note_string = 'c'\n        elif note[0] == 'o':\n     \
    \       note_string = note[0]\n        else:\n            note_string = note[0]\
    \ + '|' + note_string", "  music_array = music_string.split(//)\n  music_array[-1]\
    \ = ''\n  music_array.map!{|note| note.gsub!(/[o|\\.|\\//]$/, '').to_i}\n  music_array\n\
    end", "  music_string = music_string.strip\n  music_array = music_string.chars\n\
    \  music_array.map do |note|\n    note_array = note.split('|')\n    if note_array[0].strip\
    \ == 'o'\n      note_array[1] = note_array[1].strip.to_i / 4\n    elsif note_array[0].strip\
    \ == 'o|'\n      note_array[1] = note_array[1].strip.to_i / 2\n    elsif note_array[0].strip\
    \ == '.|'\n      note_array[1] = note_array[1].strip.to_i\n    else\n      note_array[1]\
    \ = note_array[1].strip.to_i\n    end\n  end\nend\n</code>\n<|/ a tags=ruby dscore=0\
    \ |>\n<| c |>\nThanks for your input. Your answer was really helpful, however\
    \ I used the code provided by [Konrad Rudolph](http://stackoverflow.com/users/987477/konrad-rudolph)\
    \ which gave me the results I was looking for.\n<|/ c |>\n<| a dscore=0 tags=ruby\
    \ |>\nI would suggest using regex to do this. I am not a pro with regex so I am\
    \ not going to give you the code but here is an example of how it could be done.\n\
    <code>\nmusic_string = \"0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0",
  "  music_list = music_string.split\n  # 'o|' is list of length 3\n  music_list[0]\
    \ = music_list[0].to_sym\n  music_list[1] = music_list[1].to_sym\n  music_list[2]\
    \ = music_list[2].to_sym\n  # 'o' is a single note of length 4\n  music_list[3]\
    \ = music_list[3].to_sym\n  music_list.each do |letter|\n    unless letter ==\
    \ :o\n      letter = letter[1].to_sym\n      if letter == '.'\n        if music_list.length\
    \ < 5\n          music_list[4] = music_list[4].to_sym\n        else\n        \
    \  music_list[4] = music_list[4].to_sym\n        end\n      elsif letter == '|'\n\
    \        if music_list.length < 4\n          music_list[3] = music_list[3].to_sym\n\
    \        else\n          music_list[3] = music_list[3].to_sym\n        end\n \
    \     elsif letter == 'o'\n        music_list[2] = music_list[2].to_sym\n    \
    \  end\n    end\n  end\n  music_list.delete_if{|letter| letter.nil?}\n  music_list.delete_if{|letter|\
    \ letter == :o}\n  music_list.delete_if{|letter| letter == :o}\n  music_list.delete_if{|letter|\
    \ letter == :o}\n  music_list.delete_if{|letter| letter == :o}\n  music_list.delete_if{|letter|\
    \ letter == :o}\n  music_list.delete_if{|letter| letter == :o}\n  music_list.delete_if{|letter|\
    \ letter == :o}\n  music_list.delete_if{|letter| letter == :o}\n  music_list.delete_if{|letter|\
    \ letter == :o}\n  music_list.delete_if{|letter| letter == :o}\n  music_list.delete_if{|letter|\
    \ letter == :o}\n  music_list.delete_if{|letter| letter == :o}\n  music_list.delete_if{|letter|\
    \ letter == :o}\n  music_list.delete_if{|letter| letter == :o}\n  music_list.delete_if{|letter|\
    \ letter == :o}\n  music_list.delete_if{|letter| letter == :o}\n  music_list.delete_if{|letter|\
    \ letter == :o}\n  music_", "  notes = []\n  notes_map = {}\n  notes_order = ['I',\
    \ 'II', 'III', 'IV', 'V', 'vi', 'vii', 'viii']\n  music_string = music_string.upcase\n\
    \  music_string.gsub!(/o|.|\\|/, '')\n  music_string.split('').each do |note|\n\
    \    notes_map[note] = notes_map[note] || 0\n    notes_map[note] += 1\n  end\n\
    \  notes.map { |n| notes_map[n] }.sort\nend", "  notes_list = music_string.split('|')\n\
    \  notes_list_hash = {}", "  music_string.scan(/./) do |note|\n    note.scan(/../)\
    \ do |chord|\n      chord.scan(/.?/) do |note_name|\n        note_name\n     \
    \ end\n    end\n  end\nend", "  music_string.scan(/\\d+/).map { |n| n.to_i }\n\
    end", "  music = music.split(\"\")\n  parsed_music = music_string.split(\"\")",
  "    notes, music_beats = music_string.split('-')\n    music_beats = music_beats.split('|')",
  "    music_string = \".\" + music_string + \"|\" + music_string\n    music_array\
    \ = music_string.split(\"|\")", "  \n  # Split music string into list of notes\n\
    \  music_list = music_string.split('|')\n  \n  # Initialize empty array for notes\n\
    \  notes = []\n  \n  # For each note in music string \n  music_list.each do |note_string|\n\
    \    \n    # If note string has only one char, it is a whole note or a single\
    \ beat note\n    if note_string.length <= 1\n      notes.push(note_string)\n \
    \   \n    # Otherwise, it is half note or a quater note\n    else\n      # Get\
    \ the middle character\n      middle_char_index = note_string.length/2\n     \
    \ \n      # If middle character is 'o', it is a whole note, else it is a quater\
    \ note\n      if note_string[middle_char_index] == 'o'\n        notes.push(note_string[0,middle_char_index])\n\
    \      else\n        notes.push(note_string[0,middle_char_index])\n        notes.push(note_string[middle_char_index,note_string.length-1])\n\
    \      end\n    end\n  end\n  \n  # Return array of integers corresponding to\
    \ how many beats does each not last\n  return notes\nend\n</cell>\n<code language=julia-1.5>\n\
    parse_music(\"o|o.\")\n</cell>\n<code language=julia-1.5>", "  notes = []\n  notes_str\
    \ = music_string.split('|')\n  notes_str.each do |note_string|\n    note = note_string.split('o')[0].downcase\n\
    \    beat_num = note_string.split('o')[1].to_i\n    if note == 'p'\n      notes\
    \ << note_num('p', beat_num)\n    elsif note == 'n'\n      notes << note_num('n',\
    \ beat_num)\n    elsif note == 'b'\n      notes << note_num('b', beat_num)\n \
    \   elsif note == 'pb'\n      notes << note_num('pb', beat_num)\n    elsif note\
    \ == 'e'\n      notes << note_num('e', beat_num)\n    elsif note == 'c'\n    \
    \  notes << note_num('c', beat_num)\n    elsif note == 'g'\n      notes << note_num('g',\
    \ beat_num)\n    elsif note == 'gb'\n      notes << note_num('gb', beat_num)\n\
    \    elsif note == 'c'\n      notes << note_num('c', beat_num)\n    elsif note\
    \ == 'g'\n      notes << note_num('g', beat_num)\n    elsif note == 'ab'\n   \
    \   notes << note_num('ab', beat_num)\n    elsif note == 'eb'\n      notes <<\
    \ note_num('eb', beat_num)\n    elsif note == 'gb'\n      notes << note_num('gb',\
    \ beat_num)\n    elsif note == 'b'\n      notes << note_num('b', beat_num)\n \
    \   else\n      notes << note_num(note, beat_num)\n    end\n  end\n  notes\nend",
  "    # Your code goes here\n    music = music.split(\"|\")\n    notes = []\n   \
    \ for m in music:\n        n = m.split(\"o\")\n        if len(n) == 1: notes.append(0)\n\
    \        else: notes.append(len(n[0]))\n    return notes", "  music_array = music_string.split(\"\
    \\n\")\n  music_array.map { |s| parse_line(s) }\nend", "  music_array = music_string.split\n\
    \  new_music = {}\n  new_music[\"notes\"] = {}\n  new_music[\"note_count\"] =\
    \ 0\n  new_music[\"note_index\"] = 0\n  new_music[\"notes_index\"] = 0\n  new_music[\"\
    notes_length\"] = music_array.length", "  music_array = music_string.split('|')\n\
    \  music_array.map! { |note| parse_note(note) }\nend", "  music_string_list =\
    \ music_string.split('|')\n  music_notes = []\n  music_beats = []\n  music_keys\
    \ = []\n  music_key_positions = []\n  music_key_string = \"\"\n  music_note_position\
    \ = 0\n  music_note_string = \"\"\n  music_beat_position = 0\n  music_beat_string\
    \ = \"\"\n  music_key_position = 0\n  music_key = 0", "  music_string = music_string.upcase.gsub('.',\
    \ '|')\n  music_array = music_string.split('|')\n  music_array.reject!{|i| i ==\
    \ 'o'}\n  music_array.map!{|i| i.split(//).map(&:to_i)}\n  music_array.map!{|i|\
    \ i.map{|j| j == 0 ? 0 : j - 1}}\n  music_array\nend", "  music_notes = music_string.split(//)\n\
    \  music_notes.each do |note|\n    case note\n    when 'o'\n      last(4)\n  \
    \  when 'o|'\n      last(2)\n    when '.|'\n      last(1)\n    else\n      next\n\
    \    end\n  end\nend", "    notes = []\n    note_count = music_string.count(\"\
    |\")\n    note_count += music_string.count(\"o\")\n    note_count /= 4\n    music_string.replace(\"\
    o|\", \".\")\n    music_string.replace(\".|\", \"o\")\n    music_string.split(\"\
    |\")\n    music_string.split(\"o\")\n    music_string.split(\".\")\n    \n   \
    \ note_count = music_string.count(\"|\")\n    note_count += music_string.count(\"\
    o\")\n    note_count /= 4\n    music_string.replace(\"o|\", \".\")\n    music_string.replace(\"\
    .|\", \"o\")\n    music_string.split(\"|\")\n    music_string.split(\"o\")\n \
    \   music_string.split(\".\")\n    \n    note_count = music_string.count(\"|\"\
    )\n    note_count += music_string.count(\"o\")\n    note_count /= 4\n    music_string.replace(\"\
    o|\", \".\")\n    music_string.replace(\".|\", \"o\")\n    music_string.split(\"\
    |\")\n    music_string.split(\"o\")\n    music_string.split(\".\")\n    \n   \
    \ note_count = music_string.count(\"|\")\n    note_count += music_string.count(\"\
    o\")\n    note_count /= 4\n    music_string.replace(\"o|\", \".\")\n    music_string.replace(\"\
    .|\", \"o\")\n    music_string.split(\"|\")\n    music_string.split(\"o\")\n \
    \   music_string.split(\".\")\n    \n    note_count = music_string.count(\"|\"\
    )\n    note_count += music_string.count(\"o\")\n    note_count /= 4\n    music_string.replace(\"\
    o|\", \".\")\n    music_string.replace(\".|\", \"o\")\n    music_string.split(\"\
    |\")\n    music_string.split(\"o\")\n    music_string.split(\".\")\n    \n   \
    \ note_count = music_string.count(\"|\")\n    note_count += music_string.count(\"\
    o\")\n    note_count /= 4\n    music_string.replace(\"o|\", \".\")\n    music_string.replace(\"\
    .|\", \"o\")\n    music_string.split(\"|\")\n    music_string.split(\"o\")\n \
    \   music_string.split(\".\")\n    \n    note_count = music_string.count(\"|\"\
    )\n    note_count += music_string.count(\"o\")\n    note_count /= 4\n    music_string.replace(\"\
    o|\", \".\")\n    music_string.replace(\".|\", \"o\")\n    ", "  result = music_string.split('|')\n\
    \  return result.map { |note| note.split('o').inject(0) {|sum, beat| sum + beat.to_i}\
    \  }\nend", "    music_string.scan(/^(o|o|o|.)/) do |note|\n        note.scan(/(.+?)(\\\
    d+)/) do |beats, rest|\n            if beats == '1'\n                beats = 1\n\
    \            end\n            if rest == '1'\n                rest = 1\n     \
    \       end\n            beats = beats * 4 + rest\n            beats.to_i\n  \
    \      end\n    end\nend", "  # Use regular expression to find patterns in the\
    \ music string\n  # Note: this regular expression assumes that all notes have\
    \ a maximum of two beats\n  music_notes = music_string.scan(/(o|o\\.|\\.|)|b|#|r|n|p|;|/)\n\
    \  music_notes.map { |note|\n    if note.count('o') > 2 \n      beats = note.split('o').size\n\
    \      note\n    elsif note.count('o') == 2\n      note.split('o').last.count('|')\n\
    \    elsif note.count('o') == 1\n      note.split('o').last.count('.')\n    else\n\
    \      0\n    end\n  }\nend", "  note_length = 12\n  music_string.split(\"\").each_with_index\
    \ do |note, index|\n    if note == \"o\"\n      last_four = index >= note_length\n\
    \      puts last_four\n    elsif note == \"o|\"\n      last_two = index >= note_length\
    \ * 2\n      puts last_two\n    elsif note == \".|\"\n      last_one = index >=\
    \ note_length * 4\n      puts last_one\n    end\n  end\nend\n</code>\nIn case\
    \ you do not understand what the code does, let me explain. \nI assume that you\
    \ are familiar with Ruby string manipulation. Basically we split the string into\
    \ an array using split(\"\") where \"\" stands for a blank space. Then, for each\
    \ element we check if it is one of the four special cases we looked at before.\n\
    <|/ a dscore=2 |>\n<| c |>\n`each_with_index` is really nice and I really appreciate\
    \ your answer. Thanks.\n<|/ c |>\n<| a |>\nI would solve this by writing a function\
    \ that returns the number of 'o' beats in a string and a function that returns\
    \ a list of beats broken down into notes.\n<code>", "  notes = {}\n  notes_list\
    \ = []\n  music_string.split(\"\\n\").each do |line|\n    if notes.length == 0\n\
    \      notes.merge!(line.chomp.split(\"/\").first)\n    else\n      note = line.chomp.split(\"\
    /\").first\n      notes[note] += 1\n    end\n  end\n  notes_list.push(notes.keys.sort.reverse.map{|n|\
    \ notes[n]})\nend\n</code>\nThe output is like:\n<code>\n[\n  [1, 0, 1, 1],\n\
    \  [2, 1, 1, 1],\n  [3, 0, 1, 1],\n  [4, 1, 1, 1],\n  [5, 1, 1, 1],\n  [6, 1,\
    \ 1, 1],\n  [7, 0, 1, 1],\n  [8, 1, 1, 1],\n  [9, 1, 1, 1],\n  [10, 1, 1, 1],\n\
    \  [11, 1, 1, 1],\n  [12, 1, 1, 1],\n  [13, 1, 1, 1],\n  [14, 1, 1, 1],\n  [15,\
    \ 1, 1, 1],\n  [16, 1, 1, 1],\n  [17, 1, 1, 1],\n  [18, 1, 1, 1],\n  [19, 1, 1,\
    \ 1],\n  [20, 1, 1, 1],\n  [21, 1, 1, 1],\n  [22, 1, 1, 1],\n  [23, 1, 1, 1],\n\
    \  [24, 1, 1, 1],\n  [25, 1, 1, 1],\n  [26, 1, 1, 1],\n  [27, 1, 1, 1],\n  [28,\
    \ 1, 1, 1],\n  [29, 1, 1, 1],\n  [30, 1, 1, 1],\n  [31, 1, 1, 1],\n  [32, 1, 1,\
    \ 1],\n  [33, 1, 1, 1],\n  [34, 1, 1, 1],\n  [35, 1, 1, 1],\n  [36, 1, 1, 1],\n\
    \  [37, 1, 1, 1],\n  [38, 1, 1, 1],\n  [39, 1, 1, 1],\n  [40, 1, 1, 1],\n  [41,\
    \ 1, 1, 1],\n  [42, 1, 1, 1],\n  [43, 1, 1, 1],\n  [44, 1, 1, 1],\n  [45, 1, 1,\
    \ 1],\n  [46, 1, 1, 1],\n  [47, 1, 1, 1],\n  [48, 1, 1, 1],\n  [49, 1, 1, 1],\n\
    \  [50, 1, 1, 1],\n  [51, 1, 0, 1],\n  [52, 1, 1, 1],\n  [53, 1, 1, 1],\n  [54,\
    \ 1, 1, 1],\n  [55, 1, 1, 1],\n  [56, 1, 1, 1],\n  [57, 1, 1, 1],\n  [58, 1, 1,\
    \ 1],\n  [59, 1, 1, 1],\n  [60, 1, 1, 1],\n  [61, 1, 1, 1],\n  [62, 1, 1, 1],\n\
    \  [63, 1, 1, 1],\n  [64, 1, 1, 1],\n  [65, 1, 1, 1],\n  [66, 1, 1, 1],\n  [67,\
    \ 1, 1, 1],\n  [68, 1, 1, 1],\n  [69, 1, 1, 1],\n  [70, 1, 1, 1],\n  [71, 1, 1,\
    \ 1],\n  [72, 1, 1, 1],\n  [73, 1, 1, 1],\n  [74, 1, 1, 1],\n  [75, 1, 1, 1],\n\
    \  [76, 1, 1, 1],\n  [77, 1, 1, 1],\n  [78, 1, 1, 1],\n  [79, 1, 1, 1],", "  music_string.split('\
    \ ').each do |note|\n    if note.length > 0\n      note = note[0]\n      rest\
    \ = note.length - 1\n      rest = 1 if rest > 1\n      rest = 4 if rest > 4\n\
    \      rest = 2 if rest > 2\n      rest = 1 if rest > 1\n      rest = 4 if rest\
    \ > 4\n      rest = 2 if rest > 2\n      rest = 1 if rest > 1\n      rest = 4\
    \ if rest > 4\n      rest = 2 if rest > 2\n      rest = 1 if rest > 1\n      rest\
    \ = 4 if rest > 4\n      rest = 2 if rest > 2\n      rest = 1 if rest > 1\n  \
    \    rest = 4 if rest > 4\n      rest = 2 if rest > 2\n      rest = 1 if rest\
    \ > 1\n      rest = 4 if rest > 4\n      rest = 2 if rest > 2\n      rest = 1\
    \ if rest > 1\n      rest = 4 if rest > 4\n      rest = 2 if rest > 2\n      rest\
    \ = 1 if rest > 1\n      rest = 4 if rest > 4\n      rest = 2 if rest > 2\n  \
    \    rest = 1 if rest > 1\n      rest = 4 if rest > 4\n      rest = 2 if rest\
    \ > 2\n      rest = 1 if rest > 1\n      rest = 4 if rest > 4\n      rest = 2\
    \ if rest > 2\n      rest = 1 if rest > 1\n      rest = 4 if rest > 4\n      rest\
    \ = 2 if rest > 2\n      rest = 1 if rest > 1\n      rest = 4 if rest > 4\n  \
    \    rest = 2 if rest > 2\n      rest = 1 if rest > 1\n      rest = 4 if rest\
    \ > 4\n      rest = 2 if rest > 2\n      rest = 1 if rest > 1\n      rest = 4\
    \ if rest > 4\n      rest = 2 if rest > 2\n      rest = 1 if rest > 1\n      rest\
    \ = 4 if rest > 4\n      rest = 2 if rest > 2\n      rest = 1 if rest > 1\n  \
    \    rest = 4 if rest > 4\n      rest = 2 if rest > 2\n      rest = 1 if rest\
    \ > 1\n      rest = 4 if rest > 4\n      rest = 2 if rest > 2\n      rest = 1\
    \ if rest > 1\n      rest = 4 if rest > 4\n      rest = 2 if rest > 2\n      rest\
    \ = 1 if rest > 1\n      rest = 4 if rest ", "    # your code here\n    music_string\
    \ = ''.join(music_string)\n    music_string = music_string.replace('.', '')\n\
    \    music_string = music_string.replace('|', '')\n    music_string = music_string.replace('o',\
    \ '0')\n    music_string = music_string.replace('O', '0')\n    music_string =\
    \ music_string.replace('o|', '1')\n    music_string = music_string.replace('O|',\
    \ '1')\n    music_string = music_string.replace('.|', '2')\n    music_string =\
    \ music_string.replace('.O', '2')\n    music_string = music_string.replace('.o',\
    \ '2')\n    music_string = music_string.replace('.O', '2')\n    music_string =\
    \ music_string.replace('.o|', '3')\n    music_string = music_string.replace('.O|',\
    \ '3')\n    music_string = music_string.replace('.|', '4')\n    music_string =\
    \ music_string.replace('.o', '4')\n    music_string = music_string.replace('.O',\
    \ '4')\n    music_string = music_string.replace('.o|', '5')\n    music_string\
    \ = music_string.replace('.O|', '5')\n    music_string = music_string.replace('o|',\
    \ '5')\n    music_string = music_string.replace('O|', '5')\n    music_string =\
    \ music_string.replace('o', '6')\n    music_string = music_string.replace('O',\
    \ '6')\n    music_string = music_string.replace('o|', '7')\n    music_string =\
    \ music_string.replace('O|', '7')\n    music_string = music_string.replace('.|',\
    \ '8')\n    music_string = music_string.replace('.o', '8')\n    music_string =\
    \ music_string.replace('.O', '8')\n    music_string = music_string.replace('.o|',\
    \ '9')\n    music_string = music_string.replace('.O|', '9')\n    music_string\
    \ = music_string.replace('o|', '9')\n    music_string = music_string.replace('O|',\
    \ '9')\n    music_string = music_string.replace('o', '0')\n    music_string =\
    \ music_string.replace('O', '0')\n    music_string = music_string.replace('o|',\
    \ '1')\n    music_string = music_string.replace('O|', '1')\n    music_string =\
    \ music_string.replace('o', '2')\n    music_string = music_string.replace('O',\
    \ '2')\n    music_string = music_string.replace('o|', '3')\n    music_string =\
    \ music_string.replace('", "    music = music_string.split(', ')\n    score =\
    \ []\n    curr_beat = 0\n    for note in music:\n        # parse note\n      \
    \  if note == 'o':\n            score.append(4)\n        elif note == 'o|':\n\
    \            score.append(2)\n        elif note == '.|':\n            score.append(1)\n\
    \        elif note == '^':\n            score.append(3)\n        else:\n     \
    \       score.append(0)\n        # update current beat\n        curr_beat += score[-1]\n\
    \    return score", "  music_string[0] = 'o'\n  music_string[-1] = 'o|'\n  music_string[-2]\
    \ = '.|'\n  music_string.each_char do |note|\n    if note == '.' then\n      music_string.slice!(2,\
    \ -1)\n      music_string.slice!(2, -1)\n    else\n      music_string.slice!(0,\
    \ 1)\n    end\n  end\n  music_string.chars.map { |n| n.to_i }\nend\n</code>\n\
    The above code will return an array with the notes mapped to how many beats they\
    \ last.\nHere are examples of the output:\n<code>\np parse_music('CbC')\n=> [4,\
    \ 0]", "  music_notes = music_string.chars\n  beats_per_note = 1\n  note_count\
    \ = 0\n  new_note_count = 0", "  notes = {}\n  music_string.scan(/(?:\\|[^|]+|o|o|\\\
    .\\|[^|]+)/) { |m| notes[m] = 1 }\n  music_string.scan(/(?:\\|[^|]+|o|o|\\.\\\
    |[^|]+)/) { |m| notes[m] = 2 }\n  music_string.scan(/(?:\\|[^|]+|o|o|\\.\\|[^|]+)/)\
    \ { |m| notes[m] = 3 }\n  music_string.scan(/(?:\\|[^|]+|o|o|\\.\\|[^|]+)/) {\
    \ |m| notes[m] = 4 }\n  music_string.scan(/(?:\\|[^|]+|o|o|\\.\\|[^|]+)/) { |m|\
    \ notes[m] = 5 }\n  music_string.scan(/(?:\\|[^|]+|o|o|\\.\\|[^|]+)/) { |m| notes[m]\
    \ = 6 }\n  music_string.scan(/(?:\\|[^|]+|o|o|\\.\\|[^|]+)/) { |m| notes[m] =\
    \ 7 }\n  music_string.scan(/(?:\\|[^|]+|o|o|\\.\\|[^|]+)/) { |m| notes[m] = 8\
    \ }\n  music_string.scan(/(?:\\|[^|]+|o|o|\\.\\|[^|]+)/) { |m| notes[m] = 9 }\n\
    \  music_string.scan(/(?:\\|[^|]+|o|o|\\.\\|[^|]+)/) { |m| notes[m] = 10 }\n \
    \ music_string.scan(/(?:\\|[^|]+|o|o|\\.\\|[^|]+)/) { |m| notes[m] = 11 }\n  music_string.scan(/(?:\\\
    |[^|]+|o|o|\\.\\|[^|]+)/) { |m| notes[m] = 12 }\n  music_string.scan(/(?:\\|[^|]+|o|o|\\\
    .\\|[^|]+)/) { |m| notes[m] = 13 }\n  music_string.scan(/(?:\\|[^|]+|o|o|\\.\\\
    |[^|]+)/) { |m| notes[m] = 14 }\n  music_string.scan(/(?:\\|[^|]+|o|o|\\.\\|[^|]+)/)\
    \ { |m| notes[m] = 15 }\n  music_string.scan(/(?:\\|[^|]+|", "    music = music_string.split(\"\
    \")\n    music_dict = {}\n    music_notes = []\n    music_note_count = 0\n   \
    \ music_note_length = 0\n    for i in range(0,len(music)):\n        music_notes_count\
    \ = music_note_count\n        music_note_length = music_note_length + music[i].length\n\
    \        if music[i] == 'o':\n            music_notes.append([music_note_count,music_note_length])\n\
    \            music_note_count += 1\n            music_note_length = 0\n      \
    \  elif music[i] == 'o|':\n            music_notes.append([music_note_count,music_note_length])\n\
    \            music_note_count += 1\n            music_note_length = 0\n      \
    \      music_notes.append([music_note_count,music_note_length])\n            music_note_count\
    \ += 1\n            music_note_length = 0\n            music_notes.append([music_note_count,music_note_length])\n\
    \            music_note_count += 1\n            music_note_length = 0\n      \
    \      music_notes.append([music_note_count,music_note_length])\n            music_note_count\
    \ += 1\n            music_note_length = 0\n        elif music[i] == '.|':\n  \
    \          music_notes.append([music_note_count,music_note_length])\n        \
    \    music_note_count += 1\n            music_note_length = 0\n            music_notes.append([music_note_count,music_note_length])\n\
    \            music_note_count += 1\n            music_note_length = 0\n      \
    \      music_notes.append([music_note_count,music_note_length])\n            music_note_count\
    \ += 1\n            music_note_length = 0\n            music_notes.append([music_note_count,music_note_length])\n\
    \            music_note_count += 1\n            music_note_length = 0\n      \
    \      music_notes.append([music_note_count,music_note_length])\n            music_note_count\
    \ += 1\n            music_note_length = 0\n            music_notes.append([music_note_count,music_note_length])\n\
    \            music_note_count += 1\n            music_note_length = 0\n      \
    \      music_notes.append([music_note_count,music_note_length])\n            music_note_count\
    \ += 1\n            music_note_length = 0\n            music_notes.append([music_note_count,music_note_length])\n\
    \            music_note_count += 1\n            music_note_length = 0\n      \
    \      music_notes.append([music_note_count,music_note_length])\n            music_note_count\
    \ += 1\n            music_note_length = 0\n            music_notes.append([music_note_count,music_note_length])\n\
    \            music_note_", "    music_list = music_string.split('|')\n    parsed_music\
    \ = {}\n    parsed_music['rest'] = 0\n    parsed_music['quarter'] = {}\n    parsed_music['half']\
    \ = {}\n    parsed_music['whole'] = {}\n    parsed_music['whole']['rest'] = 0\n\
    \    parsed_music['whole']['quarter'] = []\n    parsed_music['whole']['half']\
    \ = []", "    # Add your code here\nend", "    music_string = music_string.gsub(/o|\\\
    |\\.\\|/, '').split(//)\n    music_string.reverse\n    music_string[0..(music_string.length/2)].each\
    \ do |note|\n        music_string[music_string.length/2..music_string.length].each\
    \ do |last_note|\n            if last_note.include?(note)\n                music_string[music_string.length/2..music_string.length-2].each\
    \ do |last_last_note|\n                    if last_last_note.include?(note)\n\
    \                        music_string[music_string.length/2..-1].each do |last_last_last_note|\n\
    \                            if last_last_last_note.include?(note)\n         \
    \                       music_string[0..(music_string.length-1)].each do |first_note|\n\
    \                                    if first_note.include?(note)\n          \
    \                              music_string[0..music_string.length-1].each do\
    \ |first_last_note|\n                                            if first_last_note.include?(note)\n\
    \                                                music_string[0..(music_string.length-1)].each\
    \ do |first_last_last_note|\n                                                \
    \    music_string[0..music_string.length-1].each do |first_last_last_last_note|\n\
    \                                                        music_string[0..music_string.length-1].each\
    \ do |first_last_last_last_last_note|\n                                      \
    \                      music_string[0..music_string.length-1].each do |first_last_last_last_last_last_note|\n\
    \                                                                music_string[0..music_string.length-1].each\
    \ do |first_last_last_last_last_last_last_note|\n                            \
    \                                        music_string[0..music_string.length-1].each\
    \ do |first_last_last_last_last_last_last_last_note|\n                       \
    \                                                 music_string[0..music_string.length-1].each\
    \ do |first_last_last_last_last_last_last_last_last_note|\n                  \
    \                                                          music_string[0..music_string.length-1].each\
    \ do |first_last_last_last_last_last_last_last_last_last_note|\n             \
    \                                                                   music_string[0..music_string.length-1].each\
    \ do |first_last_last_last_last_last_last_last_last_last_last_note|\n        \
    \                                                                            music_string[0..music_string.length-1].each\
    \ do |first_last_last_last_last_last_last_last_last_last_last_last_note|\n   \
    \                                                                            \
    \         music_string[0..music_string.length-1].each do |first_last_last_last_last_last_last_last_last_last_last_last_last_note|\n\
    \                                                                            \
    \                music_string[0..music_string.length-1].each do |first_last_last_last_last_last_last_",
  "  notes = []\n  beats_per_note = []", "  music_string.scan(/./)\n  music_string.reverse\n\
    \  music_string.scan(/o|\\./)\n  music_string.reverse\n  music_string.scan(/\\\
    .\\|/)\n  music_string.reverse\n  music_string.scan(/[^o|\\.\\|/]/)\n  music_string.reverse\n\
    \  music_string.scan(/o|\\./)\n  music_string.reverse\n  music_string.scan(/\\\
    .\\|/)\n  music_string.reverse\n  music_string.scan(/[^o|\\.\\|/]/)\n  music_string.reverse\n\
    \  music_string.scan(/o|\\./)\n  music_string.reverse\n  music_string.scan(/\\\
    .\\|/)\n  music_string.reverse\n  music_string.scan(/[^o|\\.\\|/]/)\n  music_string.reverse\n\
    \  music_string.scan(/o|\\./)\n  music_string.reverse\n  music_string.scan(/\\\
    .\\|/)\n  music_string.reverse\n  music_string.scan(/[^o|\\.\\|/]/)\n  music_string.reverse\n\
    \  music_string.scan(/o|\\./)\n  music_string.reverse\n  music_string.scan(/\\\
    .\\|/)\n  music_string.reverse\n  music_string.scan(/[^o|\\.\\|/]/)\n  music_string.reverse\n\
    \  music_string.scan(/o|\\./)\n  music_string.reverse\n  music_string.scan(/\\\
    .\\|/)\n  music_string.reverse\n  music_string.scan(/[^o|\\.\\|/]/)\n  music_string.reverse\n\
    \  music_string.scan(/o|\\./)\n  music_string.reverse\n  music_string.scan(/\\\
    .\\|/)\n  music_string.reverse\n  music_string.scan(/[^o|\\.\\|/]/)\n  music_string.reverse\n\
    \  music_string.scan(/o|\\./)\n  music_string.reverse\n  music_string.scan(/\\\
    .\\|/)\n  music_string.reverse\n  music_string.scan(/[^o|\\.\\|/]/)\n  music_string.reverse\n\
    \  music_string.scan(/o|\\./)\n  music_string", "  # Your code here\nend\nmusic\
    \ = parse_music \"o|.o\"\nmusic\n</cell>\n<text>\nChallenge task\nWrite a function\
    \ to parse musical chord names from string and return a hash with the following\
    \ properties:", "    music_array.unshift(music_string)\n    while music_array.length\
    \ > 0\n        music_string = music_array[music_array.length-1]\n        music_array\
    \ = music_array[music_array.length-3:music_array.length]\n        \n        music_string\
    \ = music_string[music_string.index(\"|\")..music_string.index(\"o\")]\n     \
    \   music_array.pop\n        music_array = music_array[music_array.length-1..-1]\n\
    \        \n        if music_string[0] == \"o\"\n            music_string = music_string[1..-1]\n\
    \            music_array = music_array[1..-1]\n            music_string = music_string.to_i\n\
    \            music_array[0] = music_array[0] + 1\n            music_string *=\
    \ 4\n            music_array[0] = music_array[0] + 1\n            music_array\
    \ << music_string\n        else\n            music_array = music_array[0..music_string.length]\n\
    \            music_string = music_string[0..music_string.length]\n        end\n\
    \    end\nend", "  music_hash = {}\n  current_beat = 0\n  notes_hash = {}\n  current_note\
    \ = ''\n  current_note_type = nil\n  music_string.each_char do |letter|\n    letter\
    \ = letter.downcase\n    if letter == 'o' #whole note, lasts 4 beats\n      current_beat\
    \ = 4\n      notes_hash[current_note] = current_beat\n      current_note = ''\n\
    \    elsif letter == 'o|' #half note, lasts 2 beats\n      current_beat = 2\n\
    \      notes_hash[current_note] = current_beat\n      current_note = ''\n    elsif\
    \ letter == '.|'\n      current_beat = 1\n      notes_hash[current_note] = current_beat\n\
    \      current_note = ''\n    elsif letter == '|o' #whole note, lasts 2 beats\n\
    \      current_beat = 2\n      notes_hash[current_note] = current_beat\n     \
    \ current_note = ''\n    elsif letter == '|o|' #half note, lasts 1 beat\n    \
    \  current_beat = 1\n      notes_hash[current_note] = current_beat\n      current_note\
    \ = ''\n    elsif letter == '|.|'\n      current_beat = 1\n      notes_hash[current_note]\
    \ = current_beat\n      current_note = ''\n    elsif letter == '|' #quater note,\
    \ lasts 1 beat\n      current_beat = 1\n      notes_hash[current_note] = current_beat\n\
    \      current_note = ''\n    elsif letter == '+' #no note here\n      current_beat\
    \ = 0\n      notes_hash[current_note] = current_beat\n      current_note = ''\n\
    \    elsif letter == '*' #no note here\n      current_beat = 0\n      notes_hash[current_note]\
    \ = current_beat\n      current_note = ''\n    elsif letter == 'x' #no note here\n\
    \      current_beat = 0\n      notes_hash[current_note] = current_beat\n     \
    \ current_note = ''\n    else\n      current_note += letter\n    end\n  end\n\
    \  notes_hash.each do |key, value|\n    music_hash[key] = music_hash[key] - value\n\
    \  end\n  music_hash\nend", '    music_notes = music_string.split("|")', "  music_notes\
    \ = music_string.split(//)\n  music_notes.each do |note|\n    note.each_char do\
    \ |char|\n      case char\n      when 'o'\n        notes.push(0)\n      when 'o|'\n\
    \        notes.push(4)\n      when '.|'\n        notes.push(2)\n      when '.'\n\
    \        notes.push(1)\n      else\n        next\n      end\n    end\n  end\n\
    end", "  music_string.scan(/^([^|]|^)(o|o\\|)([^|]|$)/).map { |n| n.to_i(16) }\n\
    end\n</code>\n<code>", '    music_notes = music_string.split', "  music_string\
    \ = music_string.split('|')\n  music_list = []\n  temp_list = []\n  \n  for note\
    \ in music_string:\n    note = note.strip() # remove whitespace from the beginning\
    \ and the end\n    if note == '.o' or note == 'o|' or note == 'o': # if the note\
    \ is '.o', 'o|' or 'o' we append the length of the note to the list\n      music_list.append(temp_list)\n\
    \      temp_list = []\n    else: # if the note is not '.o', 'o|' or 'o' we append\
    \ the number of beats to the temporary list\n      temp_list.append(note)\n  \n\
    \  music_list.append(temp_list) # append the last note to the final list\n  \n\
    \  music_list.flatten() # flatten the list for easier access\n  return music_list\n\
    end\n</cell>\n<code language=julia-1.6>", "  music_array = music_string.split('|')\n\
    \  music_notes = []\n  music_note = []\n  for element in music_array\n    element_array\
    \ = element.split('o')\n    if element_array[0].to_s != 'o'\n      music_notes\
    \ << element_array[0].to_i\n      music_note << element_array[1].to_i\n      music_notes\
    \ << music_note.last\n      music_note = []\n    else\n      music_note << element_array[1].to_i\n\
    \      music_notes << music_note.last\n      music_note = []\n    end\n  end\n\
    \  return music_notes\nend", "  # your code here\nend", "  music_array = music_string.scan(/\\\
    +(.|o|o\\|)/)\n  music_array.map!{|el| el.to_i}\nend", "  notes = []\n  beats_per_note\
    \ = 4.0\n  \n  # Iterate over the string one character at time\n  music_string.each_char\
    \ do |c|\n    if c == 'o' || c == 'o|'\n      notes << 4\n    elsif c == '.|'\n\
    \      notes << 1\n    else\n      break\n    end\n  end\n  \n  notes\nend", " \
    \ notes = []\n  index = 0\n  note = music_string[index]\n  rest = music_string.slice(index)\n\
    \  while !rest.empty?\n    notes << note_index(rest)\n    note, rest = rest_note(rest)\n\
    \    index += 1\n  end\n  notes << note_index(music_string.slice(index))\n  notes\
    \ << 0 # rest\n  notes\nend", "    music = music_string.split('|')\n    notes\
    \ = [\n        0 + (music.index(\"o\"))*2,\n        0 + (music.index(\"o|\"))*2,\n\
    \        0 + (music.index(\".|\"))*2\n    ]\n    return notes\nend\n</cell>\n\
    <code language=julia-0.4>", "  # Your code goes here.\n  return 0\nend", "  parsed_music\
    \ = music_string.split('|')", "    music_list = music_string.split\n    # use\
    \ regular expressions to find musical notes\n    # we assume that each note consists\
    \ of three characters, like \"o\" or \"|.\"\n    # you can modify the code below\
    \ if you need more or less checks\n    note_regexp = /^([o|.|])?([o|.|])?([o|.|])?$/\n\
    \    notes = {}\n    music_list.each do |item|\n      notes[item] = notes.has_key?(item)\
    \ ? notes[item] + 1 : 0\n    end\n    notes\n  end", "    # Your code here\n \
    \   music_list = music_string.split('|')\n    note_list = []\n    note_count =\
    \ 0\n    for note in music_list:\n        if note == 'o':\n            note_list.append(note_count)\n\
    \            note_count += 1\n        elif note == 'o|':\n            note_list.append(note_count)\n\
    \            note_count += 1\n        elif note == '.|':\n            note_list.append(note_count)\n\
    \            note_count += 1\n        else:\n            print('Unexpected note')\n\
    \            print(note)\n            return", "  music_list = music_string.chars\n\
    \  music_list.delete(\" \") # Remove all spaces from the list\n  music_list.delete('|')\n\
    \  music_list.delete('o')\n  music_list.delete('o|')\n  music_list.delete('o|')\n\
    \  music_list.delete('o|')\n  music_list.delete('.')\n  music_list.delete('|')\n\
    \  music_list.delete('|')\n  music_list.delete('|')\n  music_list.delete('|')\n\
    \  music_list.delete('|')\n  music_list.delete('|')\n  music_list.delete('|')\n\
    \  music_list.delete('|')\n  music_list.delete('|')\n  music_list.delete('|')\n\
    \  music_list.delete('|')\n  music_list.delete('|')\n  music_list.delete('|')\n\
    \  music_list.delete('|')\n  music_list.delete('|')\n  music_list.delete('|')\n\
    \  music_list.delete('|')\n  music_list.delete('|')\n  music_list.delete('|')\n\
    \  music_list.delete('|')\n  music_list.delete('|')\n  music_list.delete('|')\n\
    \  music_list.delete('|')\n  music_list.delete('|')\n  music_list.delete('|')\n\
    \  music_list.delete('|')\n  music_list.delete('|')\n  music_list.delete('|')\n\
    \  music_list.delete('|')\n  music_list.delete('|')\n  music_list.delete('|')\n\
    \  music_list.delete('|')\n  music_list.delete('|')\n  music_list.delete('|')\n\
    \  music_list.delete('|')\n  music_list.delete('|')\n  music_list.delete('|')\n\
    \  music_list.delete('|')\n  music_list.delete('|')\n  music_list.delete('|')\n\
    \  music_list.delete('|')\n  music_list.delete('|')\n  music_list.delete('|')\n\
    \  music_list.delete('|')\n  music_list.delete('|')\n  music_list.delete('|')\n\
    \  music_list.delete('|')\n  music_list.delete('|')\n", "  notes = []\n  beats\
    \ = []\n  last_note = music_string.rindex(note_symbol)\n  note = music_string[:\
    \ last_note]\n  note = note.gsub(note_symbol, '').downcase\n  note.each_char do\
    \ |char|\n    if note.include?('|')\n      note = note.gsub('|', '')\n      note.split('').each_with_index\
    \ do |char, index|\n        notes << char * index\n        beats << 0\n      end\n\
    \    else\n      notes << note.chars.map(&:to_i).inject(:+) * note.count('|')\n\
    \      beats << 0\n    end\n  end", "  music = music_string.split(\"\")\n  beats\
    \ = [0] * 12\n  last_note = 0\n  \n  while music.any?\n    note = music.shift\n\
    \    if note == \"o\"\n      last_note = note\n      beats[0] = 4\n    elsif note\
    \ == \"o|\"\n      last_note = note\n      beats[1] = 2\n    elsif note == \"\
    .|\"\n      last_note = note\n      beats[2] = 1\n    else\n      # If the note\
    \ isn't known, just ignore it\n    end\n  end\n  \n  return beats\nend\n</cell>\n\
    <code language=julia-1.5>", '  result = []', "  # TODO: your code here\nend",
  "  music_string\n    .gsub(/./)\n    .scan(/./)\n    .map {|note| note =~ /\\d+/\
    \ ? note.split('').map(&:to_i).reduce(&:+) : 0}\nend", "  # TODO\nend", "  music\
    \ = music_string.split\n  music = music.map! do |note|\n    note.chars.map! {\
    \ |char| \"#{char}#\" }.join('')\n    note.split('|')\n  end\n  music = music.map\
    \ do |notes|\n    notes.map! do |note|\n      note.chars.map! { |char| char.upcase\
    \ }.join('')\n      note.chars.map! { |char| \"#{char}#{char}\" }.join('')\n \
    \     note.split('o')\n    end\n  end\n  music = music.map do |notes|\n    notes.map!\
    \ do |note|\n      note.chars.map! { |char| char.upcase }.join('')\n      note.chars.map!\
    \ { |char| \"#{char}#{char}\" }.join('')\n      note.split('.o')\n    end\n  end\n\
    \  music = music.map do |notes|\n    notes.map! do |note|\n      note.chars.map!\
    \ { |char| char.upcase }.join('')\n      note.chars.map! { |char| \"#{char}#{char}\"\
    \ }.join('')\n      note.split('.')\n    end\n  end\n  music = music.map do |notes|\n\
    \    notes.map! do |note|\n      note.chars.map! { |char| char.upcase }.join('')\n\
    \      note.chars.map! { |char| \"#{char}#{char}\" }.join('')\n      note.split('|')\n\
    \    end\n  end\n  music = music.map do |notes|\n    notes.map! do |note|\n  \
    \    note.chars.map! { |char| char.upcase }.join('')\n      note.chars.map! {\
    \ |char| \"#{char}#{char}\" }.join('')\n      note.split('.')\n    end\n  end\n\
    \  music = music.map do |notes|\n    notes.map! do |note|\n      note.chars.map!\
    \ { |char| char.upcase }.join('')\n      note.chars.map! { |char| \"#{char}#{char}\"\
    \ }.join('')\n      note.split('|')\n    end\n  end\n  music = music.map do |notes|\n\
    \    notes.map! do |note|\n      note.chars.map! { |char| char.upcase }.join('')\n\
    \      note.chars.map! { |char| \"#{char}#{char}\" }.join('')\n      ", "    notes\
    \ = [0,4,0,2,0,4,0,2,0,2,0,2,0]\n    l = music_string.split('|')\n    notes_rest\
    \ = []\n    for note in l:\n        if 'o' in note:\n            notes_rest.append(note)\n\
    \        elif '.' in note:\n            notes_rest.append(note)\n        elif\
    \ note[-1] == 'o':\n            notes_rest.append(note[:-1])\n        elif note[-1]\
    \ == '|':\n            notes_rest.append(note[:-1])\n        elif note[0] == 'o':\n\
    \            notes_rest.append(note[1:])\n        elif note[0] == '|':\n     \
    \       notes_rest.append(note[1:])\n        else:\n            notes_rest.append(note)",
  "  # Convert music string to ASCII representation\n  notes_ascii = music_string.upcase.split('')\n\
    \  # Iterate through ASCII representation\n  notes_ascii.each do |note|\n    #\
    \ Convert note to integer\n    note = [note.ord + 1].chr\n    # Find position\
    \ of symbol to determine if note is a whole note, half or quater note\n    position\
    \ = note.index('|')\n    # Determine how long note is based on position\n    note_length\
    \ = position / 4\n    if note_length == 1\n      note_length = 4\n    elsif note_length\
    \ == 2\n      note_length = 2\n    elsif note_length == 3\n      note_length =\
    \ 1\n    else\n      note_length = 1\n    end\n    # Determine how many beats\
    \ it lasts\n    note_length = note_length - 1\n    # Determine what note last\
    \ how many beats based on position\n    if position % 4 == 0\n      note_length\
    \ = 4\n    elsif position % 2 == 0\n      note_length = 2\n    elsif position\
    \ % 1 == 0\n      note_length = 1\n    else\n      note_length = 1\n    end\n\
    \    # Determine if note is quarter note, full note, half or whole\n    if position\
    \ > 0\n      if note[position - 1] == '|'\n        note_length = note_length /\
    \ 4\n      end\n    end\n    # Return list of integers\n    note_length = note_length.to_i\n\
    \    return [note_length, note_length]\n  end\nend", "  music_string.split(//).each_with_index\
    \ do |s, i|\n    beat_count = 0\n    note =\n    case s[i]\n    when 'o'\n   \
    \   beat_count = 4\n    when 'o|'\n      beat_count = 2\n    when '.|'\n     \
    \ beat_count = 1\n    else\n      beat_count = 0\n    end", "    notes = music_string.split('|')\n\
    \    beats = []\n    note_count = 0\n    for note in notes:\n        if note ==\
    \ 'o':\n            beat_count = 4\n        elif note == 'o|':\n            beat_count\
    \ = 2\n        elif note == '.|':\n            beat_count = 1\n        else:\n\
    \            beat_count = 0\n        beat_count += note_count\n        note_count\
    \ = beat_count - 1\n        beats.append(beat_count)\n    return beats\n</cell>\n\
    <cell>\nmusic = music_strings[0]\nmusic_beats = parse_music(music)\nmusic_beats\n\
    </cell>\n<cell>\nmusic_beats[:5]\n</cell>\n<cell>", "  # Your code goes here\n\
    end", "    notes = []\n    last_notes = []\n    current_note = ''\n    for c in\
    \ music_string:\n        if c == NOTE_LETTER[NOTE_NAME.index('o')]:\n        \
    \    if current_note.count('|') > 0:\n                notes.append(current_note.count('|'))\n\
    \            else:\n                notes.append(1)\n            current_note\
    \ = ''\n        elif c == NOTE_LETTER[NOTE_NAME.index('o|')]:\n            if\
    \ current_note.count('|') > 0:\n                notes.append(current_note.count('|'))\n\
    \            else:\n                notes.append(2)\n            current_note\
    \ = ''\n        elif c == NOTE_LETTER[NOTE_NAME.index('..|')]:\n            notes.append(1)\n\
    \            current_note = ''\n        elif c == NOTE_LETTER[NOTE_NAME.index('.|')]:\n\
    \            notes.append(2)\n            current_note = ''\n        elif c ==\
    \ NOTE_LETTER[NOTE_NAME.index('..|')]:\n            notes.append(3)\n        \
    \    current_note = ''\n        else:\n            current_note += c\n    notes.append(current_note.count('|'))\n\
    \    return notes\nprint(parse_music('o|.|..|..|..|..|..|..|..|'))", "  music_string.gsub!(/(\\\
    d)(#*)([.])/) {|m| m[1].to_i}\n  music_string.gsub!(/([#]?)o(\\d)/) {|m| m[1].to_i\
    \ + m.to_i}\n  music_string.gsub!(/([#]?)o|\\|/) {|m| m[1].to_i + m.to_i + m[2].to_i}\n\
    \  music_string.gsub!(/([#]?)\\|/) {|m| m[1].to_i + m.to_i + m[2].to_i}\n  music_string.gsub!(/([#]?)\\\
    .\\|/) {|m| m[1].to_i + m.to_i + m[2].to_i}\n  music_string.gsub!(/([#]?)o(\\\
    .|o|#)/) {|m| m[1].to_i + m.to_i + m[2].to_i}\n  music_string.gsub!(/([#]?)o(\\\
    |o)$/) {|m| m[1].to_i + m.to_i + m[2].to_i}\n  music_string.gsub!(/o|$|\\.|o$/)\
    \ {|m| m[1].to_i + m.to_i + m[2].to_i}\n  music_string.gsub!(/o$/) {|m| m[1].to_i\
    \ + m[2].to_i}\n  music_string.gsub!(/\\.$/) {|m| m[1].to_i + 1}\n  return music_string.split(\"\
    o\").map {|m| m.to_i}\nend", "  # your code here\nend", "  music_chars = music_string.split('').map(&:to_i)\n\
    \  music_chars.zip(music_chars[1..-1]).to_a\nend\n</code>\nThe code above will\
    \ give you:\n<code>\n[\n  [\n    0, \n    2, \n    4, \n    6, \n    8, \n   \
    \ 10, \n    12, \n    14, \n    16, \n    18, \n    20, \n    22, \n    24, \n\
    \    26, \n    28, \n    30, \n    32, \n    34, \n    36, \n    38, \n    40,\
    \ \n    42, \n    44, \n    46, \n    48, \n    50, \n    52, \n    54, \n   \
    \ 56, \n    58, \n    60, \n    62, \n    64, \n    66, \n    68, \n    70, \n\
    \    72, \n    74, \n    76, \n    78, \n    80, \n    82, \n    84, \n    86,\
    \ \n    88, \n    90, \n    92, \n    94, \n    96, \n    98, \n    100\n  ],\
    \ \n  [\n    0, \n    2, \n    4, \n    6, \n    8, \n    10, \n    12, \n   \
    \ 14, \n    16, \n    18, \n    20, \n    22, \n    24, \n    26, \n    28, \n\
    \    30, \n    32, \n    34, \n    36, \n    38, \n    40, \n    42, \n    44,\
    \ \n    46, \n    48, \n    50, \n    52, \n    54, \n    56, \n    58, \n   \
    \ 60, \n    62, \n    64, \n    66, \n    68, \n    70, \n    72, \n    74, \n\
    \    76, \n    78, \n    80, \n    82, \n    84, \n    86, \n    88, \n    90,\
    \ \n    92, \n    94, \n    96, \n    98, \n    100\n  ], \n  [\n    0, \n   \
    \ 2, \n    4, \n    6, \n    8, \n    10, \n    12, \n    14, \n    16, \n   \
    \ 18, \n    20, \n    22, \n    24, \n    26, \n    28, \n    30, \n    32, \n\
    \    34, \n    36, \n    38, \n    40, \n    42, \n    44, \n    46, \n    48,\
    \ \n    50, \n    52, \n    54, \n    56, \n    58, \n    60, \n    62, \n   \
    \ 64, \n    66, \n    68, \n    70, \n    72, \n", "  music_string = music_string.chomp\n\
    \  music_notes = []\n  music_note = nil", "    # your code here\nend", "  # Write\
    \ your code here\nend", "  music_list = music_string.split(\"|\")\n  parsed_music\
    \ = {}\n  music_list.each_with_index do |music, index|\n    music_notes = music.split(\"\
    \")\n    notes_to_beats = {}\n    music_notes.each_with_index do |note, index|\n\
    \      notes_to_beats[note] = music_notes.length - index - 2 # Subtract length\
    \ of all notes from index\n    end\n    parsed_music[index] = notes_to_beats\n\
    \  end\n  parsed_music\nend", "  music_string = '.o|' + music_string\n  music_string\
    \ = 'o|' + music_string\n  music_string = 'o' + music_string\n  music_string =\
    \ '|o' + music_string\n  music_string = 'o' + music_string\n  music_string = '|o'\
    \ + music_string\n  music_string = 'o' + music_string\n  music_string = '|o' +\
    \ music_string\n  music_string = 'o' + music_string\n  music_string = '|o' + music_string\n\
    \  music_string = 'o' + music_string\n  music_string = '|o' + music_string\n \
    \ music_string = 'o' + music_string\n  music_string = '|o' + music_string\n  music_string\
    \ = 'o' + music_string\n  music_string = '|o' + music_string\n  music_string =\
    \ 'o' + music_string\n  music_string = '|o' + music_string\n  music_string = 'o'\
    \ + music_string\n  music_string = '|o' + music_string\n  music_string = 'o' +\
    \ music_string\n  music_string = '|o' + music_string\n  music_string = 'o' + music_string\n\
    \  music_string = '|o' + music_string\n  music_string = 'o' + music_string\n \
    \ music_string = '|o' + music_string\n  music_string = 'o' + music_string\n  music_string\
    \ = '|o' + music_string\n  music_string = 'o' + music_string\n  music_string =\
    \ '|o' + music_string\n  music_string = 'o' + music_string\n  music_string = '|o'\
    \ + music_string\n  music_string = 'o' + music_string\n  music_string = '|o' +\
    \ music_string\n  music_string = 'o' + music_string\n  music_string = '|o' + music_string\n\
    \  music_string = 'o' + music_string\n  music_string = '|o' + music_string\n \
    \ music_string = 'o' + music_string\n  music_string = '|o' + music_string\n  music_string\
    \ = 'o' + music_string\n  music_string = '|o' + music_string\n  music_string =\
    \ 'o' + music_string\n  music_string = '|o' + music_string\n  music_string", " \
    \ music_list = []\n  notes = music_string.split(\"|\")\n  notes.each { |note|\
    \ music_list << note.chars.to_i  }\n  return music_list\nend", "  music_array\
    \ = []\n  notes = {'o': 0, '|': 0, '.': 0}\n  notes_array = [notes]\n  notes_array[0]\
    \ = notes\n  music_notes = music_string.split('|')\n  music_notes.each do |music_note|\n\
    \    music_note = music_note.strip.to_s\n    note = music_note.match(/^([o|\\\
    .])/)[1]\n    notes_array.each do |notes_array|\n      notes_array[1][note] ||=\
    \ 0\n      notes_array[1][note] += 1\n    end\n  end\n  music_notes = music_notes.map\
    \ { |x| x.match(/\\d+/) }\n  music_notes.each_with_index do |number, i|\n    music_array[i]\
    \ = number\n  end\n  return music_array\nend\nputs parse_music(\"o.|\")\n</code>\n\
    <|/ a tags=arrays,ruby |>\n<| c |>\nThank you for your answer, but this returns\
    \ an array of strings. How can I change this so instead of an array of strings\
    \ I get an array of integers?\n<|/ c |>\n<| c |>\nI changed it to return integers,\
    \ you can see it in the last line of code\n<|/ c |>\n<| c |>\nThank you! That\
    \ makes sense. I am wondering though, is there a way I can make it so each array\
    \ element holds one integer rather than a string? I believe that is what it is\
    \ doing currently.\n<|/ c |>\n<| c |>\nThe way I wrote it above the return variable\
    \ is an array of strings. If you want integers change the return line to return\
    \ music_array.map { |x| x.to_i }\n<|/ c |>\n<| a dscore=1 tags=arrays,ruby |>\n\
    I believe the following solution is very similar to the other two answers:\n<code>",
  '    music_string = music_string.strip', "    music_string_list = music_string.split('|')\n\
    \    music_notes = []", "    # Your code here\n    music_string\n    \n    #return\
    \ music_string\nend", "  output = []\n  music_string.split('').each_with_index\
    \ do |c, i|\n    if c == ';'\n      output << -1\n    elsif c == ':'\n      if\
    \ i < music_string.length - 1\n        output << i - 1\n      else\n        raise\
    \ \"Music string ends with ';', but no ':'\"\n      end\n    end\n  end\n  output\n\
    end", "  music_string.chomp!\n  notes = []\n  music_string.gsub(/o|.|/) { |match|\
    \ notes.push match.to_i }\n  music_string.gsub(/o|\\|/) { |match| notes.push match.to_i\
    \ }\n  music_string.gsub(/o|./) { |match| notes.push match.to_i }\n  music_string.gsub(/|./)\
    \ { |match| notes.push match.to_i }\n  music_string.gsub(/o|,|./) { |match| notes.push\
    \ match.to_i }\n  music_string.gsub(/o|/) { |match| notes.push match.to_i }\n\
    \  music_string.gsub(/\\|/) { |match| notes.push match.to_i }\n  music_string.gsub(/o|$|./)\
    \ { |match| notes.push match.to_i }\n  music_string.gsub(/o|$|,/) { |match| notes.push\
    \ match.to_i }\n  music_string.gsub(/o|$|o|./) { |match| notes.push match.to_i\
    \ }\n  music_string.gsub(/o|$|o|\\|./) { |match| notes.push match.to_i }\n  music_string.gsub(/o|$|o|,/)\
    \ { |match| notes.push match.to_i }\n  music_string.gsub(/o|$|o|o|./) { |match|\
    \ notes.push match.to_i }\n  music_string.gsub(/o|$|o|o|\\|./) { |match| notes.push\
    \ match.to_i }\n  music_string.gsub(/o|$|o|o|,/) { |match| notes.push match.to_i\
    \ }\n  music_string.gsub(/o|$|o|o|o|./) { |match| notes.push match.to_i }\n  music_string.gsub(/o|$|o|o|o|\\\
    |./) { |match| notes.push match.to_i }\n  music_string.gsub(/o|$|o|o|o|,/) { |match|\
    \ notes.push match.to_i }\n  music_string.gsub(/o|$|o|o|o|o|./) { |match| notes.push\
    \ match.to_i }\n  music_string.g", "  music_string.split('o').inject([]) do |buffer,\
    \ note|\n    if note == '.'\n      buffer.last.push(2)\n    else\n      buffer.last.push(1)\n\
    \    end\n    buffer\n  end\nend", "  music_chars = music_string.split(\"\")\n\
    \  music_notes = []\n  music_notes_times = []", "  music_string.scan(/[\\.\\|\\\
    -]$/).flatten.map {|m| m.to_i}.sort\nend", "  music_string.scan(/(o|\\|)(\\.|\\\
    |)/) { |note, beats|\n    beats_to_note(beats, note)\n  }\nend", "  notes = music_string.split(\"\
    |\")\n  notes.each do |note|\n    if note.include?(\"o\") && note.include?(\"\
    o\")\n      note_to_beats(note)\n    elsif note.include?(\"o\") && note.include?(\"\
    .|\")\n      note_to_beats(note)\n    elsif note.include?(\"o|\") && note.include?(\"\
    .|\")\n      note_to_beats(note)\n    elsif note.include?(\".|\") && note.include?(\"\
    o\")\n      note_to_beats(note)\n    elsif note.include?(\".|\") && note.include?(\"\
    o|\")\n      note_to_beats(note)\n    end\n  end\nend", "  # Your code goes here\n\
    end\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThank you for the comments. I really\
    \ appreciate your help. I added the notes in my original post, that may help you\
    \ understand how I want the program to work, although I am not sure I did it correctly.\
    \ Would you be able to tell me how to fix my code? And also the parsing function,\
    \ I am not sure if I did it correctly also. Thank you once again for the help!\n\
    <|/ c |>\n<| a tags=ruby |>\n<code>", "  return music_string.split(\"\\n\").inject([],\
    \ &:concat).map(&:to_i).inject(Hash.new(0), &:merge)\nend", "    music_list =\
    \ music_string.split(' ')\n    notes = {}\n    beat_count = {}\n    note_found\
    \ = False\n    beat_count_found = False", "    # your code here\n    # example:\
    \ music_string = \".o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.o|o|.",
  '    parsed_notes = []', "    note_strings = music_string.split('|')\n    notes\
    \ = []\n    for note_string in note_strings:\n        note_length = len(note_string)\n\
    \        notes.append(note_length)\n    return notes\n</code>\nThis will return\
    \ list of ints, one int for each note, e.g. [1, 1, 4].\nThen in your main you\
    \ can do something like this:\n<code>\nnotes = parse_music('o.|.o|.|')\ntotal_notes\
    \ = len(notes)\nnotes_beats = [notes[note] for note in range(total_notes)]\n</code>\n\
    Or if you prefer using list comprehensions:\n<code>\nnotes = parse_music('o.|.o|.|')\n\
    notes_beats = [notes.index(note) for note in notes]\n</code>\n<|/ a tags=python\
    \ dscore=2 |>\n<| c |>\nI think it's best to not use lists but just use dict instead.\
    \ Then you can have more control over how many beats per note you need, and you\
    \ can easily add or remove notes. But I really like your code because it's short.\n\
    <|/ c |>\n<| c |>\nSure, it may require some modifications but it works :)\n<|/\
    \ c |>\n<| a tags=python |>\n<code>", "  music_string.gsub!(/\\|/, \" |\") #collapse\
    \ dots to |\n  music_string.gsub!(/\\./, \"o.\") #collapse dots to o, beat one\
    \ \n  music_string.gsub!(/\\|/, \" |\") #collapse dots to |\n  music_string.gsub!(/\\\
    ./, \"o.\") #collapse dots to o, beat one \n  music_string.gsub!(/o\\|/, \" o.\"\
    ) #collapse o to o, beat two\n  music_string.gsub!(/o\\.\\|/, \" o.\") #collapse\
    \ o to o, beat two\n  music_string.gsub!(/o\\.\\|/, \" o.\") #collapse o to o,\
    \ beat two\n  music_string.gsub!(/o\\|/, \" o.\") #collapse o to o, beat two\n\
    \  music_string.gsub!(/o\\.\\|/, \" o.\") #collapse o to o, beat two\n  music_string.gsub!(/o\\\
    .\\|/, \" o.\") #collapse o to o, beat two\n  music_string.gsub!(/o\\|/, \" o.\"\
    ) #collapse o to o, beat two\n  music_string.gsub!(/o\\.\\|/, \" o.\") #collapse\
    \ o to o, beat two\n  music_string.gsub!(/o\\.\\|/, \" o.\") #collapse o to o,\
    \ beat two\n  music_string.gsub!(/o\\|/, \" o.\") #collapse o to o, beat two\n\
    \  music_string.gsub!(/o\\.\\|/, \" o.\") #collapse o to o, beat two\n  music_string.gsub!(/o\\\
    .\\|/, \" o.\") #collapse o to o, beat two\n  music_string.gsub!(/o\\|/, \" o.\"\
    ) #collapse o to o, beat two\n  music_string.gsub!(/o\\.\\|/, \" o.\") #collapse\
    \ o to o, beat two\n  music_string.gsub!(/o\\.\\|/, \" o.\") #collapse o to o,\
    \ beat two\n  music_string.gsub!(/\\|/, \" |\") #collapse dots to |\n  music_string.gsub!(/\\\
    ./, \"o.\") #collapse dots to o, beat one \n  music_string.", "  music_string.scan(/[^o|.|\\\
    s]/).map(&:to_i).group_by { |beats| beat.to_i }.values\nend", "  music_string.scan(/./)\n\
    \  notes = []\n  notes += parse_octave(music_string)\n  notes += parse_half(music_string)\n\
    \  notes += parse_quarter(music_string)\n  notes += parse_sixteenth(music_string)\n\
    \  return notes\nend", "  music_string.downcase!\n  music_string.gsub!(/([.]|o|b|#|x|)/,\
    \ \"\")\n  music_string.gsub!(/(\\||\\|[^|])/, \"\\\\&\")\n  music_string.gsub!(/([b]|#|o)/,\
    \ \"\\\\&\")\n  music_string.gsub!(/([#]|b|x|)/, \"\\\\&\")\n  music_string.gsub!(/([b]|#|o)/,\
    \ \"\\\\&\")\n  music_string.gsub!(/([#]|b|x|)/, \"\\\\&\")\n  music_string.gsub!(/([.]|o|b|#|x|)/,\
    \ \"\\\\&\")\n  music_string.gsub!(/(\\||\\|[^|])/, \"\\\\&\")\n  music_string.gsub!(/(\\\
    ||\\|)/, \"\\\\&\")\n  music_string.gsub!(/([^b]|b|#)/, \"\\\\&\")\n  music_string.gsub!(/(\\\
    |b|o|#)/, \"\\\\&\")\n  music_string.gsub!(/(\\|o|b|#)/, \"\\\\&\")\n  music_string.gsub!(/(\\\
    |o|b|#)/, \"\\\\&\")\n  music_string.gsub!(/(\\|b|o|#)/, \"\\\\&\")\n  music_string.gsub!(/(\\\
    |b|o|#)/, \"\\\\&\")\n  music_string.gsub!(/(\\|b|o|#)/, \"\\\\&\")\n  music_string.gsub!(/([b]|#|o)/,\
    \ \"\\\\&\")\n  music_string.gsub!(/(\\||\\|)/, \"\\\\&\")\n  music_string.gsub!(/([b]|#|o)/,\
    \ \"\\\\&\")\n  music_string.gsub!(/([b]|#|o)/, \"\\\\&\")\n  music_string.gsub!(/([b]|#|o)/,\
    \ \"\\\\&\")\n  music_string.gsub!(/([b]|#|o)/, \"\\\\&\")\n  music_string.gsub!(/(\\\
    ||\\|)/, \"\\\\&\")\n  music_string.gsub!(/(\\||\\|)/, \"\\\\&\")\n  music_string.gsub!(/([b]|#|o)/,\
    \ \"", '    notes = []', "  music_string.scan(/\\d+/) do |beats|\n    unless beats.last\
    \ == '|' && !music_string.include?('o|')\n      beats = beats[0..-2].map { |b|\
    \ b.to_i }\n    else\n      beats = beats[0..-2].map { |b| b.to_i }\n      beats[0..-2].last\n\
    \    end\n  end\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis seems to work\
    \ in the test case, but I am not getting correct output when testing the program\
    \ on paper as a single string input, i.e. \"A4 C4 B3 G4 F4 A4 G4 F4 G4 D4 C4 A4\
    \ G4 D4 G4 A4 F4 G4 A4 G4 C4 A4 G4 D4 G4 A4 G4 C4 A4 G4 D4 G4 A4 F4 G4 A4 G4 C4\
    \ A4 G4 D4 G4 A4 F4 G4 A4 G4 C4 A4 G4 D4 G4 A4 G4 C4 A4 G4 D4 G4 A4 G4 C4 A4 G4\
    \ D4 G4 A4 F4 G4 A4 G4 C4 A4 G4 D4 G4 A4 G4 C4 A4 G4 D4 G4 A4 F4 G4 A4 G4 C4 A4\
    \ G4 D4 G4 A4 G4 C4 A4 G4 D4 G4 A4 F4 G4 A4 G4 C4 A4 G4 D4 G4 A4 G4 C4 A4 G4 D4\
    \ G4 A4 G4 C4 A4 G4 D4 G4 A4 F4 G4 A4 G4 C4 A4 G4 D4 G4 A4 G4 C4 A4 G4 D4 G4 A4\
    \ G4 C4 A4 G4 D4 G4 A4 F4 G4 A4 G4 C4 A4 G4 D4 G4 A4 G4 C4 A4 G4 D4 G4 A4 G4 C4\
    \ A4 G4 D4 G4 A4 G4 C4 A4 G4 D4 G4 A4 F4 G4 A4 G4 C4 A4 G4 D4 G4 A4 G4 C4 A",
  "    music_notes = []\n    previous_octave = 0\n    current_octave = 1\n    last_note\
    \ = music_string[0]\n    last_beat_count = 0\n    octaves = [current_octave]\n\
    \    \n    for note in music_string\n        if note == 'o'\n            last_note\
    \ = note\n            last_beat_count = 0\n            octaves.last\n        else\n\
    \            if note != last_note\n                last_note = note\n        \
    \        last_beat_count = 0\n            \n            if note == 'o|'\n    \
    \            octaves.push(current_octave)\n                current_octave += 1\n\
    \                last_note = note\n                last_beat_count = 0\n     \
    \       else\n                if note != last_note\n                    last_note\
    \ = note\n                    last_beat_count = 0\n                    current_octave\
    \ = octaves.last\n                \n                if note == '.|'\n        \
    \            last_note = note\n                    last_beat_count = 1\n     \
    \           else\n                    if note != last_note\n                 \
    \       last_note = note\n                        last_beat_count = 0\n      \
    \                  current_octave = octaves.last\n                    \n     \
    \               if note == 'o|'\n                        last_note = note\n  \
    \                      last_beat_count = 2\n                    else\n       \
    \                 if note != last_note\n                            last_note\
    \ = note\n                            last_beat_count = 0\n                  \
    \          current_octave = octaves.last\n                        \n         \
    \               if note == 'o|.'\n                            last_note = note\n\
    \                            last_beat_count = 3\n                        else\n\
    \                            if note != last_note\n                          \
    \      last_note = note\n                                last_beat_count = 0\n\
    \                                current_octave = octaves.last\n             \
    \               \n                            if note == 'o|o'\n             \
    \                   last_note = note\n                                last_beat_count\
    \ = 4\n                            else\n                                if note\
    \ != last_note\n                                    last_note = note\n       \
    \                             last_beat_count = 0\n                          \
    \          current_octave = octaves.last\n                                \n \
    \                               if note == 'o|o|'\n                          \
    \          last_note = note\n                                    last_beat_count\
    \ = 5\n                                else\n                                \
    \    if note != last_note\n                                        last_note =\
    \ note\n                                        last_beat_count = 0\n        \
    \                                current_octave = octaves.last\n             \
    \                       \n                                        if note == 'o|o|.'\n\
    \                                            last_note = note\n              \
    \                              last_beat_count = 6\n                         \
    \               else\n                                            if note != last_note\n\
    \                                                last_note = note\n          \
    \                                      last_beat_count = 0\n                 \
    \                               current_octave = octaves.last\n              \
    \                              \n                                            if\
    \ note == 'o|o|o'\n                                                last_note =\
    \ note\n                                                last_beat_count = 7\n\
    \                                            else\n                          \
    \                      if note != last_", "  parsed_notes = []\n  # We read notes\
    \ one by one, to avoid reading whole string and parsing whole string, which is\n\
    \  # too inefficient.\n  # This loop is written for Python 3. If you are using\
    \ Python 2.7, please use \"music_string.split(\" \")\n  # instead.\n  music_string_array\
    \ = music_string.split() # music_string[:] returns a copy of string\n  for note\
    \ in music_string_array:\n    if note[0] == 'o':\n      parsed_notes.append(4)\n\
    \    elif note[0] == 'o|':\n      parsed_notes.append(2)\n    elif note[0] ==\
    \ '.':\n      parsed_notes.append(1)\n  return parsed_notes\nend", "    # Write\
    \ your code here\n    music_notes = music_string.split('|')\n    notes = []\n\
    \    for note in music_notes:\n        notes.append(note.count('o') + note.count('.')/2)\n\
    \    return notes", "  notes = music_string.split(\"\")\n  beats = []", "  notes\
    \ = music_string.split('o')\n  notes.map! do |note|\n    note.split('|')\n  end\n\
    \  notes.map! do |note|\n    note[0].split('.').map! { |beat| beat.to_i }\n  end\n\
    \  notes.map! do |note|\n    note[0].split('.').map! { |beat| beat }\n  end\n\
    \  notes.map! do |note|\n    note[1].split('.').map! { |beat| beat.to_i }\n  end\n\
    \  notes.map! do |note|\n    note[2].split('.').map! { |beat| beat.to_i }\n  end\n\
    \  notes.map! do |note|\n    note[3].split('.').map! { |beat| beat.to_i }\n  end\n\
    \  notes.map! do |note|\n    note[4].split('.').map! { |beat| beat.to_i }\n  end\n\
    \  notes.map! do |note|\n    note[5].split('.').map! { |beat| beat.to_i }\n  end\n\
    \  notes.map! do |note|\n    note[6].split('.').map! { |beat| beat.to_i }\n  end\n\
    \  notes.map! do |note|\n    note[7].split('.').map! { |beat| beat.to_i }\n  end\n\
    \  notes.map! do |note|\n    note[8].split('.').map! { |beat| beat.to_i }\n  end\n\
    \  notes.map! do |note|\n    note[9].split('.').map! { |beat| beat.to_i }\n  end\n\
    \  notes.map! do |note|\n    note[10].split('.').map! { |beat| beat.to_i }\n \
    \ end\n  notes.map! do |note|\n    note[11].split('.').map! { |beat| beat.to_i\
    \ }\n  end\n  notes.map! do |note|\n    note[12].split('.').map! { |beat| beat.to_i\
    \ }\n  end\n  notes.map! do |note|\n    note[13].split('.').map! { |beat| beat.to_i\
    \ }\n  end\n  notes.map! do |note|\n    note[14].split('.').map! { |beat| beat.to_i\
    \ }\n  end\n  notes.map! do |note|", "  music_array.push(music_string)\n  i =\
    \ 0\n  while i < music_array.length\n    note = music_array[i]\n    if note ==\
    \ \"o\"\n      music_array.push(note+music_array[i+1])\n      i += 3\n    elsif\
    \ note == \"o|\"\n      music_array.push(note+music_array[i+1])\n      i += 4\n\
    \    elsif note == \".|\"\n      music_array.push(note+music_array[i+1])\n   \
    \   i += 2\n    else\n      music_array.push(note)\n      i += 1\n  end\nend",
  "  music_string[music_string.length-1] = \"0\"\n  music_string[music_string.length-2]\
    \ = \"0\"\n  music_string.gsub!(/o/, \"0\")\n  music_string.gsub!(/o\\|/, \"0\"\
    )\n  music_string.gsub!(/\\|/, \"0\")\n  music_string.gsub!(/\\.\\|/, \"0\")\n\
    \  music_string.gsub!(/o\\|/, \"0\")\n  music_string.gsub!(/\\|/, \"0\")\n  music_string.gsub!(/\\\
    .\\|/, \"0\")\n  music_string.gsub!(/o\\|/, \"0\")\n  music_string.gsub!(/\\|/,\
    \ \"0\")\n  music_string.gsub!(/\\.\\|/, \"0\")\n  music_string.gsub!(/o\\|/,\
    \ \"0\")\n  music_string.gsub!(/\\|/, \"0\")\n  music_string.gsub!(/\\.\\|/, \"\
    0\")\n  music_string.gsub!(/o\\|/, \"0\")\n  music_string.gsub!(/\\|/, \"0\")\n\
    \  music_string.gsub!(/\\.\\|/, \"0\")\n  music_string.gsub!(/o\\|/, \"0\")\n\
    \  music_string.gsub!(/\\|/, \"0\")\n  music_string.gsub!(/\\.\\|/, \"0\")\n \
    \ music_string.gsub!(/o\\|/, \"0\")\n  music_string.gsub!(/\\|/, \"0\")\n  music_string.gsub!(/\\\
    .\\|/, \"0\")\n  music_string.gsub!(/o\\|/, \"0\")\n  music_string.gsub!(/\\|/,\
    \ \"0\")\n  music_string.gsub!(/\\.\\|/, \"0\")\n  music_string.gsub!(/o\\|/,\
    \ \"0\")\n  music_string.gsub!(/\\|/, \"0\")\n  music_string.gsub!(/\\.\\|/, \"\
    0\")\n  music_string.gsub!(/o\\|/, \"0\")\n  music_string.gsub!(/\\|/, \"0\")\n\
    \  music_string.gsub!(/\\.\\|/, \"0\")\n  music_string.gsub!(/o\\|/, \"0\")\n\
    \  music_string.gsub!(/\\|/, \"0\")\n  music_string.gsub!(/\\.\\|/, \"0\")\n  ",
  "  music_string.downcase!\n  notes = {}\n  music_string.split('').each do |note|\n\
    \    notes[note.to_sym] = 1 if note != 'o'\n  end\n  keys = notes.keys\n  values\
    \ = [notes[keys.index(\"o\")]]\n  keys[0..keys.index(\"o\")].each do |key|\n \
    \   values << notes[key] + (keys[keys.index(\"o\")] - keys.index(key))\n  end\n\
    \  values[-1]\nend\n</code>\n<|/ a tags=algorithm,ruby,ruby-on-rails,ruby-on-rails-5\
    \ dscore=1 |>\n<| c |>\nThank you! What about when the input is something like\
    \ this? `'Am I there yet?\\nAm I there yet?\\nAm I there yet?'`\n<|/ c |>\n<|\
    \ c |>\n`split` will work just fine. `music_string.downcase` will uppercase all\
    \ characters, so the split will work as well.\n<|/ c |>\n<| c |>\nI see. But what\
    \ about when the music string contains '?' at the end? How do we know that there\
    \ is one note after the '?' mark?\n<|/ c |>\n<| c |>\n`music_string.split('?')`\
    \ will return an array. It should be easy then to check if the last element of\
    \ the array is a `?`\n<|/ c |>\n<| c |>\n`music_string.split('?').last` will return\
    \ an array of one element if it is `?` then it will return `['']`. To make it\
    \ return `false` when there is no `?` mark we will use `music_string.split('?').last\
    \ || false`\n<|/ c |>\n<| a dscore=1 |>\nHere is a more idiomatic approach, using\
    \ the Rails Array class:\n<code>", "  return parse_music_helper(music_string,\
    \ []) \nend", "  music_array = music_string.split('|')\n  music_array.each do\
    \ |note|\n    note = note.strip\n    if note =~ /\\A\\./\n      note = note.split('.')[1]\n\
    \    end\n    note = note.downcase\n    note.chars.each do |char|\n      if note[0...char]\
    \ == 'o'\n        note = note[1..char]\n        note_length = 4\n      elsif note[0...char]\
    \ == 'o|'\n        note = note[1..char]\n        note_length = 2\n      elsif\
    \ note[0...char] == 'o|'\n        note = note[1..char]\n        note_length =\
    \ 1\n      end\n    end\n    if note.include?('.')\n      note = note.split('.')[0]\n\
    \    end\n    music_array.length = note_length\n  end\n  music_array.uniq!\n \
    \ music_array.sort!\n  music_array.map! {|note| note_map[note] }\n  music_array.inject([])\
    \ {|memo, note| memo << note_map[note] }\nend", "  music_string.scan(/o|.|/g)\
    \ do |note|\n    music_string.scan(/..|\\..|/g) do |accidental|\n      if note.last\
    \ == accidental\n        return [0, 1, 1, 2]\n      else\n        return [0, 1,\
    \ 2, 1]\n      end\n    end\n  end\nend\n</code>\n<|/ a dscore=1 |>\n<| c |>\n\
    What exactly is happening when you are comparing `note.last` with `accidental`?\
    \ How do you get `note.last` and `accidental`?\n<|/ c |>\n<| c |>\n`note.last`\
    \ is just a String. `accidental` is also a String. `note.last == accidental` compares\
    \ the characters of two strings. You can read more about that here: http://ruby-doc.org/core-2.4.0/String.html#method-i-5B-5D\n\
    <|/ c |>\n<| c |>\nThis is really helpful. Thank you!\n<|/ c |>\n<| c |>\nSorry,\
    \ I thought that you had just commented on your own answer, where you explained\
    \ how you got \"o|\". Not sure if you understand why you were looking at note.last\
    \ or accidental. I'll add some comments into the code above.\n<|/ c |>\n<| c |>\n\
    Ah, I see what you mean. Yes, I understand why, but was confused why you used\
    \ note.last or accidental vs just \"o|\" as you explained. I see now that you\
    \ used note.last.last or note.last.slice(-1)\n<|/ c |>\n<| a |>\n<code>", "  music_array.push(music_string)\n\
    end", "    note_list = music_string.split('|')\n    note_dict = {}\n    for note\
    \ in note_list:\n        note_split = note.split('o')\n        note_dict[note_split[1]]\
    \ = int(note_split[0][-1])\n    \n    return note_dict\n    ", "  music_string.scan(/([\\\
    .\\|])/).group(0).split(//).map { |note| note.scan(/\\d+/).to_a }\nend\n</cell>\n\
    <cell>\nparse_music('..o|..o|o..|..o|..o|..o|o..|..o|..o|..o|o..|..o|..o|o..|..o|..o|..o|o..|..o|..o|o..|o..|o..|o..|o..|..o|o..|..o|..o|..o|o..|..o|o..|o..|o..|..o|..o|..o|..o|o..|o..|o..|..o|o..|o..|..o|o..|o..|..o|o..|o..|o..|o..|o..|o..|..o|..o|..o|o..|..o|o..|o..|..o|o..|..o|o..|o..|o..|o..|..o|o..|..o|o..|..o|o..|..o|..o|o..|o..|..o|..o|o..|..o|o..|..o|o..|..o|o..|..o|o..|..o|o..|..o|o..|..o|o..|..o|o..|..o|o..|..o|o..|..o|o..|..o|o..|..o|o..|..o|o..|..o|o..|..o|o..|..o|o..|..o|o..|..o|o..|..o|o..|..o|o..|..o|o..|..o|o..|..o|o..|o..|..o|o..|o..|..o|o..|..o|o..|o..|..o|o..|..o|o..|..o|o..|..o|o..|..o|o..|..o|o..|..o|o..|..o|o",
  "  music_string = music_string.gsub(/[^\\d|\\-|\\|]*/, '')\n  music_string = music_string.gsub(/-|\\\
    d/, '|')\n  music_string = music_string.gsub(/[\\|]{2,}/, '|')\n  music_string\
    \ = music_string.gsub(/[\\|]{3,}/, '|')\n  music_string = music_string.gsub(/[\\\
    |]{4,}/, '|')\n  music_string = music_string.gsub(/\\d/, 'o')\n  music_string\
    \ = music_string.gsub(/o/, 'o|')\n  music_string = music_string.gsub(/o\\|/, 'o|')\n\
    \  music_string = music_string.gsub(/\\|/, '|')\n  music_string = music_string.gsub(/\\\
    |+\\|/, '|')\n  music_string = music_string.gsub(/\\|+\\|/, '|')\n  music_string\
    \ = music_string.gsub(/\\|+\\|/, '|')\n  music_string = music_string.gsub(/\\\
    |+\\|/, '|')\n  music_string = music_string.gsub(/\\|+\\|/, '|')\n  music_string\
    \ = music_string.gsub(/o\\|/, 'o|')\n  music_string = music_string.gsub(/o\\|/,\
    \ 'o|')\n  music_string = music_string.gsub(/o\\|/, 'o|')\n  music_string = music_string.gsub(/o\\\
    |/, 'o|')\n  music_string = music_string.gsub(/o\\|/, 'o|')\n  music_string =\
    \ music_string.gsub(/o\\|/, 'o|')\n  music_string = music_string.gsub(/o\\|/,\
    \ 'o|')\n  music_string = music_string.gsub(/o\\|/, 'o|')\n  music_string = music_string.gsub(/o\\\
    |/, 'o|')\n  music_string = music_string.gsub(/o\\|/, 'o|')\n  music_string =\
    \ music_string.gsub(/o\\|/, 'o|')\n  music_string = music_string.gsub(/o\\|/,\
    \ 'o|')\n  music_string = music_string.gsub(/o\\|/, 'o|')\n  music_string = music_string.gsub(",
  "    # your code here\n    notes = []\n    \n    # your code here\n    music_string\
    \ = 'o|o|.|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|",
  "  # your code goes here\n  result = []\n  music_string.split('|').each do |note|\n\
    \    if note.include?('o')\n      result << 4\n    elsif note.include?('o|')\n\
    \      result << 2\n    elsif note.include?('\\.|')\n      result << 1\n    end\n\
    \  end\n  result\nend", "  # Your code here\n  music_string\nend", "  music_string.split(//)\n\
    end", "  music_notes = music_string.scan(/([a-z]|[#|])/).flatten.uniq.sort\n \
    \ note_count = music_notes.map { |note| note.split(\"|\").length}\n  [note_count.max,note_count.min]\n\
    end\n</code>\n<|/ a dscore=2 tags=ruby,regex |>\n<| c |>\nThe OP's input contains\
    \ only lower-case letters, digits and `#` signs. There is no need to escape `#`\
    \ and `|`. Your code will also fail with `A5` or `C.B` strings.\n<|/ c |>\n<|\
    \ c |>\nYou are right, I missed that part.  I'll update the answer to reflect\
    \ that.  Thanks!\n<|/ c |>\n<| a tags=ruby,regex |>\n<code>\nmusic = <<-EOS\n\
    c3 g3 d4 e4 f4 a4 b4 c5 g5 d5 e5 f5 a5 b5 c5 g5 d5 e5 f5 a5 b5 c5 g5 d5 e5 f5\
    \ a5 b5 c5 g5 d5 e5 f5 a5 b5 c5 g5 d5 e5 f5 a5 b5 c5 g5 d5 e5 f5 a5 b5 c5 g5 d5\
    \ e5 f5 a5 b5 c5 g5 d5 e5 f5 a5 b5 c5 g5 d5 e5 f5 a5 b5 c5 g5 d5 e5 f5 a5 b5 c5\
    \ g5 d5 e5 f5 a5 b5 c5 g5 d5 e5 f5 a5 b5 c5 g5 d5 e5 f5 a5 b5 c5 g5 d5 e5 f5 a5\
    \ b5 c5 g5 d5 e5 f5 a5 b5 c5 g5 d5 e5 f5 a5 b5 c5 g5 d5 e5 f5 a5 b5 c5 g5 d5 e5\
    \ f5 a5 b5 c5 g5 d5 e5 f5 a5 b5 c5 g5 d5 e5 f5 a5 b5 c5 g5 d5 e5 f5 a5 b5 c5 g5\
    \ d5 e5 f5 a5 b5 c5 g5 d5 e5 f5 a5 b5 c5 g5 ", "  music_string.each_char.map do\
    \ |char|\n    case char\n    when 'o' then 4\n    when 'o|' then 2\n    when '.|'\
    \ then 1\n    else 0\n    end\n  end\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\n\
    Thanks for your help, but this still isn't working correctly for me.  It still\
    \ returns incorrect values for me.  For example, for \"D..o|...\", it returns\
    \ [0, 0, 1, 0] instead of [0, 1, 1, 0]. Also, for the input \"....o|o..\" it returns\
    \ [0, 0, 0, 0] instead of [0, 0, 1, 1].  I appreciate the help though.\n<|/ c\
    \ |>\n<| c |>\nMy bad. Just added `music_string.each_char.map do |char|` block\
    \ into the answer. Thanks.\n<|/ c |>\n<| c |>\nThanks for the help, however, I'm\
    \ still getting incorrect output for \"D..o|...\" and \"....o|o..\".  For \"D..o|...\"\
    \ it returns [0, 0, 1, 0] instead of [0, 1, 1, 0] and for \"....o|o..\" it returns\
    \ [0, 0, 0, 0] instead of [0, 0, 1, 1].  Any other suggestions?  Also, thanks\
    \ for cleaning up the code a bit.  I'm fairly new to Ruby so I had no idea how\
    \ to clean it up.\n<|/ c |>\n<| c |>\nOk, I guess I misunderstood the problem\
    \ with first two strings. I've updated the answer based on my understanding of\
    \ your task. It seems, that the problem is much harder than it seemed. Please,\
    \ try the new version.\n<|/ c |>\n<| c |>\nThanks for the help.  I just got it\
    \ working!  You were right about using music_string.each_char.map.  My previous\
    \ version used music_string.split('').map. Thanks again!\n<|/ c |>\n<| a tags=ruby,music-notation,algorithm\
    \ |>\nHere's a version that just uses the string class method each_char.\n<code>",
  "  music_string = music_string[1..-1]\n  notes = []\n  notes_string = \"\"\n  index\
    \ = 0\n  while index < music_string.length\n    # if we already have some notes\
    \ in the list\n    if notes.length > 0\n      notes_string += music_string[index]\n\
    \      index += 1\n      continue\n    end\n    \n    # if we have reached the\
    \ end of our notes list\n    if index == music_string.length\n      break\n  \
    \  end\n    \n    # if we have encountered a non-note character\n    if music_string[index]\
    \ != \"o\" or music_string[index] != \"o|\" or music_string[index] != \".|\"\n\
    \      index += 1\n      continue\n    end\n    \n    # if we have encountered\
    \ a note character\n    notes_string += music_string[index]\n    \n    # if we\
    \ are at the end of our notes list\n    if index == music_string.length\n    \
    \  notes_string = [notes_string, notes_string.length]\n      notes << [notes_string,\
    \ notes_string.length]\n      index = 0\n      music_string = \"\"\n      continue\n\
    \    end\n    \n    # if we have encountered a middle note character\n    if music_string[index]\
    \ != \"o\" or music_string[index] != \"o|\" or music_string[index] != \".|\"\n\
    \      index += 1\n      continue\n    end\n    \n    # if we have encountered\
    \ a half note character\n    if music_string[index] != \"o|\"\n      index +=\
    \ 1\n      continue\n    end\n    \n    # if we have encountered a quater note\
    \ character\n    if music_string[index] != \".|\"\n      index += 1\n      continue\n\
    \    end\n    \n    # if we have encountered a whole note character\n    notes_string\
    \ += music_string[index]\n    \n    index += 1\n  end\n  return notes\nend", " \
    \   # Your code here\n    music = music_string.split(\",\")\n    music = [m[0].lower()\
    \ for m in music]\n    music = [\".\" if m == \"o\" else m for m in music]\n \
    \   music = [m[1:] if m[0] == '.' else m for m in music]\n    music = [\"o|\"\
    \ if m == \"o\" else \"o|\" for m in music]\n    music = [\"o|\" if m == \".\"\
    \ else \"o|\" for m in music]\n    music = [\"o\" if m == \"o\" else \"o\" for\
    \ m in music]\n    music = [\"o\" if m == \".\" else \"o\" for m in music]\n \
    \   music = [\"o|\" if m == \"o\" else \"o|\" for m in music]\n    music = [\"\
    o|\" if m == \".\" else \"o|\" for m in music]\n    music = [\"o\" if m == \"\
    o\" else \"o\" for m in music]\n    music = [\"o\" if m == \".\" else \"o\" for\
    \ m in music]\n    music = [\"o|\" if m == \"o\" else \"o|\" for m in music]\n\
    \    music = [\"o|\" if m == \".\" else \"o|\" for m in music]\n    music = [\"\
    o\" if m == \"o\" else \"o\" for m in music]\n    music = [\"o\" if m == \".\"\
    \ else \"o\" for m in music]\n    music = [\"o|\" if m == \"o\" else \"o|\" for\
    \ m in music]\n    music = [\"o|\" if m == \".\" else \"o|\" for m in music]\n\
    \    music = [\"o\" if m == \"o\" else \"o\" for m in music]\n    music = [\"\
    o\" if m == \".\" else \"o\" for m in music]\n    music = [\"o|\" if m == \"o\"\
    \ else \"o|\" for m in music]\n    music = [\"o|\" if m == \".\" else \"o|\" for\
    \ m in music]\n    music = [\"o\" if m == \"o\" else \"o\" for m in music]\n \
    \   music = [\"o\" if m == \".\" else \"o\" for m in music]\n    music = [\"o|\"\
    \ if m == \"o\" else \"o|\" for m in music]\n    music = [\"o|\" if m == \".\"\
    \ else \"o|\" for m in music]\n    music = [\"o\" if m == \"o\" else \"o\" for\
    \ m in music]\n    music = [\"o\" if m == \".\" else \"o\" for m in music]\n \
    \   music = [\"o|\" if m == \"o\" else \"o|\" for m in music]\n    music = [\"",
  "    notes = music_string.split\n    notes.shift\n    \n    notes.each do |note|\n\
    \        next if note.empty?\n        \n        note_letter = note[0]\n      \
    \  \n        if note_letter == 'o'\n            note_string = note.to_s\n    \
    \        \n            note_string.each_char do |char|\n                \n   \
    \             if char == '|'\n                    note_string[note_string.length-1]\
    \ = '.'\n                end\n                \n                note_string[note_string.length-1]\
    \ += char\n            end\n            \n            note_string = note_string.split('.')\n\
    \            note_string.shift\n            note_string.pop\n            note_string.each\
    \ do |note|\n                note += note.chars.map(&:to_i)\n            end\n\
    \            \n        elsif note_letter == 'o|'\n            note_string = note.to_s\n\
    \            \n            note_string.each_char do |char|\n                \n\
    \                if char == '|'\n                    note_string[note_string.length-1]\
    \ = '.'\n                end\n                \n                note_string[note_string.length-1]\
    \ += char\n            end\n            \n            note_string = note_string.split('.')\n\
    \            note_string.shift\n            note_string.pop\n            note_string.each\
    \ do |note|\n                note += note.chars.map(&:to_i)\n            end\n\
    \            \n        elsif note_letter == '.'\n            note_string = note.to_s\n\
    \            \n            note_string.each_char do |char|\n                \n\
    \                if char == '|'\n                    note_string[note_string.length-1]\
    \ = 'o'\n                end\n                \n                note_string[note_string.length-1]\
    \ += char\n            end\n            \n            note_string = note_string.split('o')\n\
    \            note_string.shift\n            note_string.pop\n            note_string.each\
    \ do |note|\n                note += note.chars.map(&:to_i)\n            end\n\
    \        end\n    end\n    \n    notes.map!(&:to_i)\n    \n    return notes\n\
    end\n    ", "    music_list = []\n    music_notes = music_string.split(\"|\")\n\
    \    music_notes.each do |note|\n        if note.include? \"o\"\n            music_list\
    \ << 4\n        elsif note.include? \"o|\"\n            music_list << 2\n    \
    \    else\n            music_list << 1\n        end\n    end\n    return music_list\n\
    end", "  return music_string.scan(/\\d|\\+|o|\\.\\|/).map { |note| note.count\
    \ }\nend", "  # YOUR CODE HERE\nend", "  # your code here\nend", "  # Write your\
    \ code here\n  result = {}\n  music_string.gsub!(/./) { |s| result[s] = 1; }\n\
    \  music_string.gsub!(/\\|\\|/) { |s| result[s] = 2; }\n  music_string.gsub!(/\\\
    |./) { |s| result[s] = 4; }\n  music_string.gsub!(/\\./) { |s| result[s] = 8;\
    \ }\n  music_string.gsub!(/o\\|/) { |s| result[s] = 2; }\n  music_string.gsub!(/o\\\
    ./) { |s| result[s] = 3; }\n  music_string.gsub!(/o\\|/) { |s| result[s] = 2;\
    \ }\n  music_string.gsub!(/o\\./) { |s| result[s] = 2; }\n  music_string.gsub!(/\\\
    .\\|/) { |s| result[s] = 4; }\n  music_string.gsub!(/\\|\\./) { |s| result[s]\
    \ = 4; }\n  music_string.gsub!(/\\./) { |s| result[s] = 8; }\n  music_string.gsub!(/\\\
    |o\\|/) { |s| result[s] = 3; }\n  music_string.gsub!(/o\\./) { |s| result[s] =\
    \ 3; }\n  music_string.gsub!(/\\|o\\|/) { |s| result[s] = 3; }\n  music_string.gsub!(/\\\
    |o\\./) { |s| result[s] = 3; }\n  music_string.gsub!(/o\\|/) { |s| result[s] =\
    \ 4; }\n  music_string.gsub!(/\\.\\./) { |s| result[s] = 4; }\n  music_string.gsub!(/\\\
    .\\|/) { |s| result[s] = 4; }\n  music_string.gsub!(/\\|\\./) { |s| result[s]\
    \ = 4; }\n  music_string.gsub!(/\\|o\\./) { |s| result[s] = 4; }\n  music_string.gsub!(/o\\\
    ./) { |s| result[s] = 4; }\n  music_string.gsub!(/\\|\\.\\./) { |s| result[s]\
    \ = 4; }\n  music_string.gsub!(/\\|\\.\\|/) { |s| result[s] = 4; }\n  music_string.gsub!(/\\\
    |o\\|/) { |s| result[s] = 4; }\n  music_string.gsub!(/\\.\\./) { |s| result[",
  "  music_array = []\n  # Iterate over all characters\n  music_string.chars.each\
    \ do |char|\n    # Append the corresponding integer value to a new array that\
    \ we will return at the end\n    music_array << char.to_i(16)\n  end", "  music_string.upcase!\n\
    \  music_string.split('|')\nend", "  # your code goes here\nend", "  music_notes\
    \ = music_string.split(' ') # We split input string by spaces to get list of notes\n\
    \  music_notes.each do |note_string|\n    if note_string.include?('|')\n     \
    \ note_length = note_string.split('|').first\n      note_length = [note_length,\
    \ 0]\n    else\n      note_length = note_string.split('o').first\n      note_length\
    \ = [note_length, 0]\n    end\n    note_string.split('o|').each do |note_string_with_length|\n\
    \      note_length = note_string_with_length.match(/\\d+/).map { |n| n.to_i }\n\
    \    end\n    note_length.each do |note_length|\n      if note_string.include?('|')\n\
    \        note_string = note_string.gsub('|', '')\n      end\n      note_string.split(\"\
    .\").each do |note_string_with_length|\n        note_length = note_string_with_length.match(/\\\
    d+/).map { |n| n.to_i }\n      end\n    end\n  end\nend\nmusic = parse_music('c\
    \ d e f g ah b c d e f g ah b c d e f g ah b c d e f g ah b c d e f g ah b c d\
    \ e f g ah b c d e f g ah b c d e f g ah b c d e f g ah b c d e f g ah b c d e\
    \ f g ah b c d e f g ah b c d e f g ah b c d e f g ah b c d e f g ah b c d e f\
    \ g ah b c d e f g ah b c d e f g ah b c d e f g ah b c d e f g ah b c d e f g\
    \ ah b c d e f g ah b c d e f g ah b c d e f g ah b c d e f g ah b c d e f g ah\
    \ b c d e f g ah b c d e f g ah b c d e f g ah b c d e f g ah b c d e f g ah b\
    \ c d e f g ah b c d e f g ah b c d e f g ah b c d e f g ah b c d e f g ah b c\
    \ d e f g ah b c d e f g ah b c d ", "  music_arr = music_string.split('o|')\n\
    \  new_arr = []\n  for music in music_arr\n    beats = music.count('|')\n    new_arr\
    \ << beats\n  end\n  new_arr.flatten\nend", "    music_notes = music_string.split(\"\
    |\")\n    music_notes.pop() # remove empty element\n    music_notes.each do |note|\n\
    \        note = note.strip\n        case note\n            when \".o\"\n     \
    \           [4, 4]\n            when \"..o\"\n                [1, 4]\n       \
    \     when \"...o\"\n                [1, 1]\n            when \"..|\"\n      \
    \          [1, 4]\n            when \"..|..o\"\n                [2, 4]\n     \
    \       when \"...|\"\n                [1, 2]\n            when \"...|..o\"\n\
    \                [1, 2]\n            when \"..|...\"\n                [2, 2]\n\
    \            when \"..|...o\"\n                [2, 2]\n            when \"...|..|\"\
    \n                [1, 3]\n            when \"...|...|\"\n                [2, 3]\n\
    \            when \"...|...|..o\"\n                [2, 3]\n            when \"\
    ...|...|..|\"\n                [1, 3]\n            when \"...|...|...o\"\n   \
    \             [3, 3]\n            when \"...|...|...|\"\n                [3, 3]\n\
    \            when \"...|...|...|..o\"\n                [4, 3]\n            when\
    \ \"...|...|...|..|\"\n                [4, 3]\n            when \"...|...|...|...o\"\
    \n                [5, 3]\n            when \"...|...|...|...|\"\n            \
    \    [5, 3]\n            when \"...|...|...|...|..o\"\n                [5, 3]\n\
    \            when \"...|...|...|...|..|\"\n                [5, 3]\n          \
    \  when \"...|...|...|...|...o\"\n                [6, 3]\n            when \"\
    ...|...|...|...|...|\"\n                [6, 3]\n            when \"...|...|...|...|...|..o\"\
    \n                [6, 3]\n            when \"...|...|...|...|...|..|\"\n     \
    \           [6, 3]\n            when \"...|...|...|...|...|...o\"\n          \
    \      [7, 3]\n            when \"...|...|...|...|...|...|\"\n               \
    \ [7, 3]\n            when \"...|...|...|...|...|...|..o\"\n                [7,\
    \ 3]\n            when \"...|...|...|...|...|...|..|\"\n                [7, 3]\n\
    \            when \"...|...", "    # write your code here\n    splitted = music_string.split(\"\
    |\")\n    notes = []\n    for note in splitted:\n        notes.append(note.split(\"\
    o|\")[0])", "    music_array = music_string.split(\" \")\n    \n    music_dict\
    \ = {}\n    \n    for element in music_array:\n        if \"|\" in element:\n\
    \            music_dict[element[0]] = int(element[1:])\n        else:\n      \
    \      music_dict[element] = int(element)*4"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
