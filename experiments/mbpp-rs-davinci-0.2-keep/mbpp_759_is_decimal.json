{
  "name": "mbpp_759_is_decimal",
  "language": "rs",
  "prompt": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_759_is_decimal.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    let mut decimal = false;\n    let mut precision = 0;\n    for c in num.chars() {\n        if c == '.' {\n            if decimal {\n                return false;\n            }\n            decimal = true;\n        } else if c.is_digit(10) {\n            if decimal {\n                precision += 1;\n            }\n            if precision > 2 {\n                return false;\n            }\n        } else {\n            return false;\n        }\n    }\n    true",
    "    let re = Regex::new(r\"^[0-9]*\\.[0-9]{2}$\").unwrap();\n    re.is_match(&num)",
    "    let re = Regex::new(r\"^\\d+\\.\\d{2}$\").unwrap();\n    re.is_match(&num)",
    "    let mut dot_count = 0;\n    let mut decimal_count = 0;\n    let mut decimal_started = false;\n    for c in num.chars() {\n        if c == '.' {\n            dot_count += 1;\n            decimal_started = true;\n        } else if decimal_started {\n            decimal_count += 1;\n        }\n    }\n    dot_count == 1 && decimal_count == 2",
    "    let mut dot_count = 0;\n    let mut num_count = 0;\n    for c in num.chars() {\n        if c == '.' {\n            dot_count += 1;\n        } else if c.is_digit(10) {\n            num_count += 1;\n        } else {\n            return false;\n        }\n    }\n    if dot_count > 1 {\n        return false;\n    }\n    if dot_count == 0 && num_count > 2 {\n        return false;\n    }\n    if dot_count == 1 && num_count > 4 {\n        return false;\n    }\n    return true;",
    "    let re = Regex::new(r\"^\\d*\\.\\d{2}$\").unwrap();\n    re.is_match(&num)",
    "    let mut decimal_count = 0;\n    for c in num.chars() {\n        if c == '.' {\n            decimal_count += 1;\n        }\n    }\n    if decimal_count > 1 {\n        return false;\n    }\n    if decimal_count == 0 {\n        return true;\n    }\n    let mut decimal_index = 0;\n    for (i, c) in num.chars().enumerate() {\n        if c == '.' {\n            decimal_index = i;\n            break;\n        }\n    }\n    if decimal_index + 3 < num.len() {\n        return false;\n    }\n    return true;",
    "    let mut is_decimal = false;\n    let mut has_decimal = false;\n    let mut decimal_count = 0;\n    for c in num.chars() {\n        if c == '.' {\n            if has_decimal {\n                return false;\n            }\n            has_decimal = true;\n        } else if c.is_digit(10) {\n            if has_decimal {\n                decimal_count += 1;\n            }\n            is_decimal = true;\n        } else {\n            return false;\n        }\n    }\n    if has_decimal && decimal_count != 2 {\n        return false;\n    }\n    is_decimal",
    "    let mut decimal = false;\n    let mut precision = 0;\n    for c in num.chars() {\n        if c == '.' {\n            if decimal {\n                return false;\n            }\n            decimal = true;\n        } else if c.is_digit(10) {\n            if decimal {\n                precision += 1;\n            }\n        } else {\n            return false;\n        }\n    }\n    if decimal && precision == 2 {\n        true\n    } else {\n        false\n    }",
    "    let mut decimal_count = 0;\n    let mut decimal_found = false;\n\n    for c in num.chars() {\n        if c == '.' {\n            decimal_found = true;\n        } else if decimal_found {\n            decimal_count += 1;\n        }\n    }\n\n    decimal_count == 2",
    "    let mut count = 0;\n    let mut has_decimal = false;\n    for c in num.chars() {\n        if c == '.' {\n            if has_decimal {\n                return false;\n            }\n            has_decimal = true;\n        } else if !c.is_digit(10) {\n            return false;\n        } else if has_decimal {\n            count += 1;\n        }\n    }\n    if has_decimal {\n        count == 2\n    } else {\n        true\n    }",
    "    let mut has_decimal = false;\n    let mut decimal_count = 0;\n    for c in num.chars() {\n        if c == '.' {\n            if has_decimal {\n                return false;\n            }\n            has_decimal = true;\n        } else if c.is_digit(10) {\n            if has_decimal {\n                decimal_count += 1;\n            }\n        } else {\n            return false;\n        }\n    }\n    decimal_count <= 2",
    "    let mut decimal_count = 0;\n    let mut decimal_found = false;\n    for c in num.chars() {\n        if c == '.' {\n            if decimal_found {\n                return false;\n            }\n            decimal_found = true;\n        } else if !c.is_digit(10) {\n            return false;\n        } else if decimal_found {\n            decimal_count += 1;\n        }\n    }\n    decimal_count <= 2",
    "    let re = Regex::new(r\"^\\d+\\.\\d{2}$\").unwrap();\n    re.is_match(&num)",
    "    let mut has_decimal = false;\n    let mut decimal_count = 0;\n    for c in num.chars() {\n        if c == '.' {\n            if has_decimal {\n                return false;\n            }\n            has_decimal = true;\n        } else if !c.is_digit(10) {\n            return false;\n        } else if has_decimal {\n            decimal_count += 1;\n        }\n    }\n    if has_decimal && decimal_count != 2 {\n        return false;\n    }\n    true",
    "    let re = Regex::new(r\"^[0-9]+(\\.[0-9]{1,2})?$\").unwrap();\n    re.is_match(&num)",
    "    let mut is_decimal = false;\n    let mut decimal_count = 0;\n    for c in num.chars() {\n        if c == '.' {\n            decimal_count += 1;\n        }\n    }\n    if decimal_count == 1 {\n        is_decimal = true;\n    }\n    is_decimal",
    "    let mut decimal_count = 0;\n    for c in num.chars() {\n        if c == '.' {\n            decimal_count += 1;\n        }\n    }\n    if decimal_count > 1 {\n        return false;\n    }\n    let mut decimal_index = 0;\n    for (i, c) in num.chars().enumerate() {\n        if c == '.' {\n            decimal_index = i;\n            break;\n        }\n    }\n    if decimal_index == 0 {\n        return false;\n    }\n    if decimal_index == num.len() - 1 {\n        return false;\n    }\n    if decimal_index == num.len() - 2 {\n        return true;\n    }\n    if decimal_index == num.len() - 3 {\n        return false;\n    }\n    false",
    "    num.parse::<f64>().is_ok()",
    "    let mut decimal_count = 0;\n    let mut has_decimal = false;\n    for c in num.chars() {\n        if c == '.' {\n            if has_decimal {\n                return false;\n            }\n            has_decimal = true;\n        } else if !c.is_digit(10) {\n            return false;\n        } else if has_decimal {\n            decimal_count += 1;\n        }\n    }\n    decimal_count <= 2"
  ]
}