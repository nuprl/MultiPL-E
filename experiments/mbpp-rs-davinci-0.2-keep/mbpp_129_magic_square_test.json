{
  "name": "mbpp_129_magic_square_test",
  "language": "rs",
  "prompt": "/// Write a function to calculate whether the matrix is a magic square.\nfn magic_square_test(my_matrix: Vec<Vec<isize>>) -> bool {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_129_magic_square_test.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\nfn main() {\n    let candidate = magic_square_test;\n    assert_eq!(candidate(vec![vec![7, 12, 1, 14], vec![2, 13, 8, 11], vec![16, 3, 10, 5], vec![9, 6, 15, 4]]), true);\n    assert_eq!(candidate(vec![vec![2, 7, 6], vec![9, 5, 1], vec![4, 3, 8]]), true);\n    assert_eq!(candidate(vec![vec![2, 7, 6], vec![9, 5, 1], vec![4, 3, 7]]), false);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    let mut sum = 0;\n    let mut sum_row = 0;\n    let mut sum_col = 0;\n    let mut sum_diag = 0;\n    let mut sum_diag2 = 0;\n    let mut sum_row_vec = Vec::new();\n    let mut sum_col_vec = Vec::new();\n    let mut sum_diag_vec = Vec::new();\n    let mut sum_diag2_vec = Vec::new();\n\n    for i in 0..my_matrix.len() {\n        for j in 0..my_matrix[i].len() {\n            sum += my_matrix[i][j];\n            sum_row += my_matrix[i][j];\n            sum_col += my_matrix[j][i];\n            if i == j {\n                sum_diag += my_matrix[i][j];\n            }\n            if i + j == my_matrix.len() - 1 {\n                sum_diag2 += my_matrix[i][j];\n            }\n        }\n        sum_row_vec.push(sum_row);\n        sum_col_vec.push(sum_col);\n        sum_row = 0;\n        sum_col = 0;\n    }\n    sum_diag_vec.push(sum_diag);\n    sum_diag2_vec.push(sum_diag2);\n\n    if sum_row_vec.iter().all(|&x| x == sum) && sum_col_vec.iter().all(|&x| x == sum)\n        && sum_diag_vec.iter().all(|&x| x == sum)\n        && sum_diag2_vec.iter().all(|&x| x == sum)\n    {\n        return true;\n    }\n    false",
    "    let mut sum = 0;\n    let mut sum_diag_1 = 0;\n    let mut sum_diag_2 = 0;\n    let mut sum_row = 0;\n    let mut sum_col = 0;\n    let mut sum_col_1 = 0;\n    let mut sum_col_2 = 0;\n    let mut sum_col_3 = 0;\n    let mut sum_col_4 = 0;\n    let mut sum_col_5 = 0;\n    let mut sum_col_6 = 0;\n    let mut sum_col_7 = 0;\n    let mut sum_col_8 = 0;\n    let mut sum_col_9 = 0;\n    let mut sum_row_1 = 0;\n    let mut sum_row_2 = 0;\n    let mut sum_row_3 = 0;\n    let mut sum_row_4 = 0;\n    let mut sum_row_5 = 0;\n    let mut sum_row_6 = 0;\n    let mut sum_row_7 = 0;\n    let mut sum_row_8 = 0;\n    let mut sum_row_9 = 0;\n    let mut sum_row_10 = 0;\n    let mut sum_row_11 = 0;\n    let mut sum_row_12 = 0;\n    let mut sum_row_13 = 0;\n    let mut sum_row_14 = 0;\n    let mut sum_row_15 = 0;\n    let mut sum_row_16 = 0;\n    let mut sum_row_17 = 0;\n    let mut sum_row_18 = 0;\n    let mut sum_row_19 = 0;\n    let mut sum_row_20 = 0;\n    let mut sum_row_21 = 0;\n    let mut sum_row_22 = 0;\n    let mut sum_row_23 = 0;\n    let mut sum_row_24 = 0;\n    let mut sum_row_25 = 0;\n    let mut sum_row_26 = 0;\n    let mut sum_row_27 = 0;\n    let mut sum_row_28 = 0;\n    let mut sum_row_29 = 0;\n   ",
    "    let mut sum_list: Vec<isize> = Vec::new();\n    let mut sum: isize = 0;\n    let mut i: usize = 0;\n    let mut j: usize = 0;\n    let mut k: usize = 0;\n    let mut l: usize = 0;\n    let mut m: usize = 0;\n    let mut n: usize = 0;\n    let mut o: usize = 0;\n    let mut p: usize = 0;\n    let mut q: usize = 0;\n    let mut r: usize = 0;\n    let mut s: usize = 0;\n    let mut t: usize = 0;\n    let mut u: usize = 0;\n    let mut v: usize = 0;\n    let mut w: usize = 0;\n    let mut x: usize = 0;\n    let mut y: usize = 0;\n    let mut z: usize = 0;\n    let mut aa: usize = 0;\n    let mut bb: usize = 0;\n    let mut cc: usize = 0;\n    let mut dd: usize = 0;\n    let mut ee: usize = 0;\n    let mut ff: usize = 0;\n    let mut gg: usize = 0;\n    let mut hh: usize = 0;\n    let mut ii: usize = 0;\n    let mut jj: usize = 0;\n    let mut kk: usize = 0;\n    let mut ll: usize = 0;\n    let mut mm: usize = 0;\n    let mut nn: usize = 0;\n    let mut oo: usize = 0;\n    let mut pp: usize = 0;\n    let mut qq: usize = 0;\n    let mut rr: usize = 0;\n    let mut ss: usize = 0;\n    let mut tt: usize = 0;\n    let mut uu: usize = 0;\n    let mut vv: usize = 0;\n    let mut ww: usize = 0;\n    let mut xx: usize = 0;\n    let mut yy",
    "    let mut sum = 0;\n    let mut sum_diag = 0;\n    let mut sum_diag_2 = 0;\n    let mut sum_row = 0;\n    let mut sum_col = 0;\n    let mut sum_col_2 = 0;\n    let mut sum_row_2 = 0;\n    let mut sum_col_3 = 0;\n    let mut sum_row_3 = 0;\n    let mut sum_col_4 = 0;\n    let mut sum_row_4 = 0;\n    let mut sum_col_5 = 0;\n    let mut sum_row_5 = 0;\n    let mut sum_col_6 = 0;\n    let mut sum_row_6 = 0;\n    let mut sum_col_7 = 0;\n    let mut sum_row_7 = 0;\n    let mut sum_col_8 = 0;\n    let mut sum_row_8 = 0;\n    let mut sum_col_9 = 0;\n    let mut sum_row_9 = 0;\n    let mut sum_col_10 = 0;\n    let mut sum_row_10 = 0;\n    let mut sum_col_11 = 0;\n    let mut sum_row_11 = 0;\n    let mut sum_col_12 = 0;\n    let mut sum_row_12 = 0;\n    let mut sum_col_13 = 0;\n    let mut sum_row_13 = 0;\n    let mut sum_col_14 = 0;\n    let mut sum_row_14 = 0;\n    let mut sum_col_15 = 0;\n    let mut sum_row_15 = 0;\n    let mut sum_col_16 = 0;\n    let mut sum_row_16 = 0;\n    let mut sum_col_17 = 0;\n    let mut sum_row_17 = 0;\n    let mut sum_col_18 = 0;\n    let mut sum_row_18 = 0;\n    let mut sum_col_19 = 0;\n    let mut sum_row_19 = 0;\n    let mut sum_col_20 = 0;\n    let mut sum_row_20 = 0;\n    let mut",
    "    let mut sum = 0;\n    let mut sum_diag = 0;\n    let mut sum_diag_2 = 0;\n    let mut sum_row = 0;\n    let mut sum_col = 0;\n    for i in 0..my_matrix.len() {\n        for j in 0..my_matrix[i].len() {\n            sum += my_matrix[i][j];\n            if i == j {\n                sum_diag += my_matrix[i][j];\n            }\n            if i + j == my_matrix.len() - 1 {\n                sum_diag_2 += my_matrix[i][j];\n            }\n            sum_row += my_matrix[i][j];\n            sum_col += my_matrix[j][i];\n        }\n        if sum_row != sum || sum_col != sum {\n            return false;\n        }\n        sum_row = 0;\n        sum_col = 0;\n    }\n    if sum_diag != sum || sum_diag_2 != sum {\n        return false;\n    }\n    return true;",
    "    let n = my_matrix.len();\n    let mut sum_row = vec![0; n];\n    let mut sum_col = vec![0; n];\n    let mut sum_diag1 = 0;\n    let mut sum_diag2 = 0;\n\n    for i in 0..n {\n        for j in 0..n {\n            sum_row[i] += my_matrix[i][j];\n            sum_col[j] += my_matrix[i][j];\n            if i == j {\n                sum_diag1 += my_matrix[i][j];\n            }\n            if i + j == n - 1 {\n                sum_diag2 += my_matrix[i][j];\n            }\n        }\n    }\n\n    let mut is_magic = true;\n    let mut sum_prev = sum_row[0];\n    for i in 1..n {\n        if sum_prev != sum_row[i] || sum_prev != sum_col[i] {\n            is_magic = false;\n            break;\n        }\n    }\n\n    if is_magic {\n        if sum_prev != sum_diag1 || sum_prev != sum_diag2 {\n            is_magic = false;\n        }\n    }\n\n    is_magic",
    "    let mut sum = 0;\n    let mut sum_diag_1 = 0;\n    let mut sum_diag_2 = 0;\n    let mut sum_row = 0;\n    let mut sum_col = 0;\n    let mut sum_col_vec = vec![0; my_matrix.len()];\n    let mut sum_row_vec = vec![0; my_matrix.len()];\n    let mut sum_diag_1_vec = vec![0; my_matrix.len()];\n    let mut sum_diag_2_vec = vec![0; my_matrix.len()];\n    for i in 0..my_matrix.len() {\n        for j in 0..my_matrix.len() {\n            sum_col += my_matrix[i][j];\n            sum_row += my_matrix[j][i];\n            if i == j {\n                sum_diag_1 += my_matrix[i][j];\n            }\n            if i + j == my_matrix.len() - 1 {\n                sum_diag_2 += my_matrix[i][j];\n            }\n        }\n        sum_col_vec[i] = sum_col;\n        sum_row_vec[i] = sum_row;\n        sum_diag_1_vec[i] = sum_diag_1;\n        sum_diag_2_vec[i] = sum_diag_2;\n        sum_col = 0;\n        sum_row = 0;\n        sum_diag_1 = 0;\n        sum_diag_2 = 0;\n    }\n    sum = sum_col_vec[0];\n    for i in 0..sum_col_vec.len() {\n        if sum != sum_col_vec[i] {\n            return false;\n        }\n    }\n    for i in 0..sum_row_vec.len() {\n        if sum != sum_row_vec[i] {\n            return false;\n        }\n    }\n    for i in 0..sum_diag_1_vec.len() {\n        if sum !=",
    "    let mut magic_square = true;\n    let mut sum = 0;\n    let mut sum_row = 0;\n    let mut sum_col = 0;\n\n    // check if the matrix is a square\n    if my_matrix.len() != my_matrix[0].len() {\n        magic_square = false;\n    }\n\n    // check if the matrix is a magic square\n    for i in 0..my_matrix.len() {\n        sum_row = 0;\n        sum_col = 0;\n        for j in 0..my_matrix[i].len() {\n            sum_row += my_matrix[i][j];\n            sum_col += my_matrix[j][i];\n        }\n        if i == 0 {\n            sum = sum_row;\n        }\n        if sum_row != sum || sum_col != sum {\n            magic_square = false;\n        }\n    }\n\n    magic_square",
    "    let mut sum_row: isize = 0;\n    let mut sum_col: isize = 0;\n    let mut sum_diag: isize = 0;\n    let mut sum_diag_rev: isize = 0;\n    let mut sum_row_prev: isize = 0;\n    let mut sum_col_prev: isize = 0;\n    let mut sum_diag_prev: isize = 0;\n    let mut sum_diag_rev_prev: isize = 0;\n    let mut is_magic: bool = true;\n    let mut i: usize = 0;\n    let mut j: usize = 0;\n    let mut k: usize = 0;\n    let mut l: usize = 0;\n    let mut m: usize = 0;\n    let mut n: usize = 0;\n    let mut o: usize = 0;\n    let mut p: usize = 0;\n    let mut q: usize = 0;\n    let mut r: usize = 0;\n    let mut s: usize = 0;\n    let mut t: usize = 0;\n    let mut u: usize = 0;\n    let mut v: usize = 0;\n    let mut w: usize = 0;\n    let mut x: usize = 0;\n    let mut y: usize = 0;\n    let mut z: usize = 0;\n    let mut aa: usize = 0;\n    let mut bb: usize = 0;\n    let mut cc: usize = 0;\n    let mut dd: usize = 0;\n    let mut ee: usize = 0;\n    let mut ff: usize = 0;\n    let mut gg: usize = 0;\n    let mut hh: usize = 0;\n    let mut ii: usize = 0;\n    let mut jj: usize = 0;\n    let mut kk: usize = 0;\n    let mut ll: usize = 0;\n    let mut mm: usize = 0;\n    let mut nn: usize = 0;\n    let mut oo: usize = 0;\n    let mut pp: usize",
    "    let mut sum = 0;\n    for i in 0..my_matrix.len() {\n        sum += my_matrix[i][i];\n    }\n    for i in 0..my_matrix.len() {\n        let mut row_sum = 0;\n        let mut col_sum = 0;\n        for j in 0..my_matrix.len() {\n            row_sum += my_matrix[i][j];\n            col_sum += my_matrix[j][i];\n        }\n        if row_sum != sum || col_sum != sum {\n            return false;\n        }\n    }\n    let mut diag_sum = 0;\n    for i in 0..my_matrix.len() {\n        diag_sum += my_matrix[i][my_matrix.len() - i - 1];\n    }\n    if diag_sum != sum {\n        return false;\n    }\n    true",
    "    let mut sum_row = vec![0; my_matrix.len()];\n    let mut sum_col = vec![0; my_matrix.len()];\n    let mut sum_diag = vec![0; 2];\n\n    for (i, row) in my_matrix.iter().enumerate() {\n        for (j, col) in row.iter().enumerate() {\n            sum_row[i] += col;\n            sum_col[j] += col;\n            if i == j {\n                sum_diag[0] += col;\n            }\n            if i + j == my_matrix.len() - 1 {\n                sum_diag[1] += col;\n            }\n        }\n    }\n\n    let mut prev_sum = sum_row[0];\n    for sum in sum_row.iter().skip(1) {\n        if sum != &prev_sum {\n            return false;\n        }\n        prev_sum = *sum;\n    }\n\n    for sum in sum_col.iter() {\n        if sum != &prev_sum {\n            return false;\n        }\n    }\n\n    for sum in sum_diag.iter() {\n        if sum != &prev_sum {\n            return false;\n        }\n    }\n\n    return true;",
    "    let mut magic_sum = 0;\n    let mut row_sums = Vec::new();\n    let mut col_sums = Vec::new();\n    let mut diag_sums = Vec::new();\n\n    for row in my_matrix.iter() {\n        let mut row_sum = 0;\n        for col in row.iter() {\n            row_sum += col;\n        }\n        row_sums.push(row_sum);\n        magic_sum = row_sum;\n    }\n\n    for col in 0..my_matrix[0].len() {\n        let mut col_sum = 0;\n        for row in my_matrix.iter() {\n            col_sum += row[col];\n        }\n        col_sums.push(col_sum);\n    }\n\n    let mut diag_sum = 0;\n    for i in 0..my_matrix[0].len() {\n        diag_sum += my_matrix[i][i];\n    }\n    diag_sums.push(diag_sum);\n\n    diag_sum = 0;\n    for i in 0..my_matrix[0].len() {\n        diag_sum += my_matrix[i][my_matrix[0].len() - 1 - i];\n    }\n    diag_sums.push(diag_sum);\n\n    for row_sum in row_sums.iter() {\n        if row_sum != &magic_sum {\n            return false;\n        }\n    }\n\n    for col_sum in col_sums.iter() {\n        if col_sum != &magic_sum {\n            return false;\n        }\n    }\n\n    for diag_sum in diag_sums.iter() {\n        if diag_sum != &magic_sum {\n            return false;\n        }\n    }\n\n    true",
    "    let mut sum_rows = vec![0; my_matrix.len()];\n    let mut sum_cols = vec![0; my_matrix.len()];\n    let mut sum_diag = 0;\n    let mut sum_anti_diag = 0;\n    for i in 0..my_matrix.len() {\n        for j in 0..my_matrix.len() {\n            sum_rows[i] += my_matrix[i][j];\n            sum_cols[j] += my_matrix[i][j];\n            if i == j {\n                sum_diag += my_matrix[i][j];\n            }\n            if i + j == my_matrix.len() - 1 {\n                sum_anti_diag += my_matrix[i][j];\n            }\n        }\n    }\n    if sum_rows.iter().all(|&x| x == sum_rows[0])\n        && sum_cols.iter().all(|&x| x == sum_cols[0])\n        && sum_diag == sum_rows[0]\n        && sum_anti_diag == sum_rows[0]\n    {\n        return true;\n    }\n    false",
    "    let mut sum = 0;\n    let mut sum_diag_1 = 0;\n    let mut sum_diag_2 = 0;\n    let mut sum_col = 0;\n    let mut sum_row = 0;\n    let mut sum_row_2 = 0;\n    let mut sum_col_2 = 0;\n    let mut sum_row_3 = 0;\n    let mut sum_col_3 = 0;\n    let mut sum_row_4 = 0;\n    let mut sum_col_4 = 0;\n    let mut sum_row_5 = 0;\n    let mut sum_col_5 = 0;\n    let mut sum_row_6 = 0;\n    let mut sum_col_6 = 0;\n    let mut sum_row_7 = 0;\n    let mut sum_col_7 = 0;\n    let mut sum_row_8 = 0;\n    let mut sum_col_8 = 0;\n    let mut sum_row_9 = 0;\n    let mut sum_col_9 = 0;\n    let mut sum_row_10 = 0;\n    let mut sum_col_10 = 0;\n    let mut sum_row_11 = 0;\n    let mut sum_col_11 = 0;\n    let mut sum_row_12 = 0;\n    let mut sum_col_12 = 0;\n    let mut sum_row_13 = 0;\n    let mut sum_col_13 = 0;\n    let mut sum_row_14 = 0;\n    let mut sum_col_14 = 0;\n    let mut sum_row_15 = 0;\n    let mut sum_col_15 = 0;\n    let mut sum_row_16 = 0;\n    let mut sum_col_16 = 0;\n    let mut sum_row_17 = 0;\n    let mut sum_col_17 = 0;\n    let mut sum_row_18 = 0;\n    let mut sum_col_18 = 0;\n    let mut sum_row_19 = 0;\n    let mut sum_col_19 = 0;\n    let mut sum_row_20 = 0;\n    let mut sum_col_20 = 0;\n   ",
    "    let mut sum_diag_1 = 0;\n    let mut sum_diag_2 = 0;\n    let mut sum_row = 0;\n    let mut sum_col = 0;\n    let mut sum_row_prev = 0;\n    let mut sum_col_prev = 0;\n\n    for i in 0..my_matrix.len() {\n        for j in 0..my_matrix.len() {\n            sum_row += my_matrix[i][j];\n            sum_col += my_matrix[j][i];\n        }\n        sum_diag_1 += my_matrix[i][i];\n        sum_diag_2 += my_matrix[i][my_matrix.len() - i - 1];\n\n        if i > 0 {\n            if sum_row != sum_row_prev || sum_col != sum_col_prev {\n                return false;\n            }\n        }\n        sum_row_prev = sum_row;\n        sum_col_prev = sum_col;\n        sum_row = 0;\n        sum_col = 0;\n    }\n\n    if sum_diag_1 != sum_diag_2 || sum_diag_1 != sum_row_prev || sum_diag_1 != sum_col_prev {\n        return false;\n    }\n\n    true",
    "    let mut sum_row = 0;\n    let mut sum_col = 0;\n    let mut sum_diag = 0;\n    let mut sum_diag2 = 0;\n    let mut sum_row_vec = Vec::new();\n    let mut sum_col_vec = Vec::new();\n\n    for i in 0..my_matrix.len() {\n        for j in 0..my_matrix[i].len() {\n            sum_row += my_matrix[i][j];\n            sum_col += my_matrix[j][i];\n            if i == j {\n                sum_diag += my_matrix[i][j];\n            }\n            if i + j == my_matrix.len() - 1 {\n                sum_diag2 += my_matrix[i][j];\n            }\n        }\n        sum_row_vec.push(sum_row);\n        sum_col_vec.push(sum_col);\n        sum_row = 0;\n        sum_col = 0;\n    }\n\n    if sum_diag != sum_diag2 {\n        return false;\n    }\n\n    for i in 0..sum_row_vec.len() {\n        if sum_row_vec[i] != sum_col_vec[i] {\n            return false;\n        }\n    }\n\n    return true;",
    "    let mut sum = 0;\n    let mut sum_diag_1 = 0;\n    let mut sum_diag_2 = 0;\n    for i in 0..my_matrix.len() {\n        let mut sum_row = 0;\n        let mut sum_col = 0;\n        for j in 0..my_matrix[i].len() {\n            sum_row += my_matrix[i][j];\n            sum_col += my_matrix[j][i];\n            if i == j {\n                sum_diag_1 += my_matrix[i][j];\n            }\n            if i + j == my_matrix.len() - 1 {\n                sum_diag_2 += my_matrix[i][j];\n            }\n        }\n        if sum == 0 {\n            sum = sum_row;\n        } else if sum != sum_row {\n            return false;\n        }\n        if sum != sum_col {\n            return false;\n        }\n    }\n    if sum != sum_diag_1 || sum != sum_diag_2 {\n        return false;\n    }\n    true",
    "    let mut sum_row: isize = 0;\n    let mut sum_col: isize = 0;\n    let mut sum_diag: isize = 0;\n    let mut sum_diag_rev: isize = 0;\n    let mut sum_row_prev: isize = 0;\n    let mut sum_col_prev: isize = 0;\n    let mut sum_diag_prev: isize = 0;\n    let mut sum_diag_rev_prev: isize = 0;\n\n    for i in 0..my_matrix.len() {\n        for j in 0..my_matrix[i].len() {\n            sum_row += my_matrix[i][j];\n            sum_col += my_matrix[j][i];\n            if i == j {\n                sum_diag += my_matrix[i][j];\n            }\n            if i + j == my_matrix.len() - 1 {\n                sum_diag_rev += my_matrix[i][j];\n            }\n        }\n        if i > 0 {\n            if sum_row != sum_row_prev {\n                return false;\n            }\n            if sum_col != sum_col_prev {\n                return false;\n            }\n            if sum_diag != sum_diag_prev {\n                return false;\n            }\n            if sum_diag_rev != sum_diag_rev_prev {\n                return false;\n            }\n        }\n        sum_row_prev = sum_row;\n        sum_col_prev = sum_col;\n        sum_diag_prev = sum_diag;\n        sum_diag_rev_prev = sum_diag_rev;\n        sum_row = 0;\n        sum_col = 0;\n        sum_diag = 0;\n        sum_diag_rev = 0;\n    }\n    true",
    "    let mut sum_row = 0;\n    let mut sum_col = 0;\n    let mut sum_diag = 0;\n    let mut sum_diag_2 = 0;\n    let mut sum_row_2 = 0;\n    let mut sum_col_2 = 0;\n    let mut sum_diag_3 = 0;\n    let mut sum_diag_4 = 0;\n    let mut sum_row_3 = 0;\n    let mut sum_col_3 = 0;\n    let mut sum_diag_5 = 0;\n    let mut sum_diag_6 = 0;\n    let mut sum_row_4 = 0;\n    let mut sum_col_4 = 0;\n    let mut sum_diag_7 = 0;\n    let mut sum_diag_8 = 0;\n    let mut sum_row_5 = 0;\n    let mut sum_col_5 = 0;\n    let mut sum_diag_9 = 0;\n    let mut sum_diag_10 = 0;\n    let mut sum_row_6 = 0;\n    let mut sum_col_6 = 0;\n    let mut sum_diag_11 = 0;\n    let mut sum_diag_12 = 0;\n    let mut sum_row_7 = 0;\n    let mut sum_col_7 = 0;\n    let mut sum_diag_13 = 0;\n    let mut sum_diag_14 = 0;\n    let mut sum_row_8 = 0;\n    let mut sum_col_8 = 0;\n    let mut sum_diag_15 = 0;\n    let mut sum_diag_16 = 0;\n    let mut sum_row_9 = 0;\n    let mut sum_col_9 = 0;\n    let mut sum_diag_17 = 0;\n    let mut sum_diag_18 = 0;\n    let mut sum_row_10 = 0;\n    let mut sum_col_10 = 0;\n    let mut sum_diag_19 = 0;\n    let mut sum_diag_20 = 0;\n    let mut sum_row_11 = 0;\n    let mut sum_",
    "    let mut sum_of_rows: Vec<isize> = Vec::new();\n    let mut sum_of_columns: Vec<isize> = Vec::new();\n    let mut sum_of_diagonals: Vec<isize> = Vec::new();\n    let mut sum_of_reverse_diagonals: Vec<isize> = Vec::new();\n\n    for i in 0..my_matrix.len() {\n        let mut sum_of_row: isize = 0;\n        let mut sum_of_column: isize = 0;\n        for j in 0..my_matrix[i].len() {\n            sum_of_row += my_matrix[i][j];\n            sum_of_column += my_matrix[j][i];\n        }\n        sum_of_rows.push(sum_of_row);\n        sum_of_columns.push(sum_of_column);\n    }\n\n    for i in 0..my_matrix.len() {\n        let mut sum_of_diagonal: isize = 0;\n        let mut sum_of_reverse_diagonal: isize = 0;\n        for j in 0..my_matrix[i].len() {\n            sum_of_diagonal += my_matrix[i][j];\n            sum_of_reverse_diagonal += my_matrix[i][my_matrix.len() - 1 - j];\n        }\n        sum_of_diagonals.push(sum_of_diagonal);\n        sum_of_reverse_diagonals.push(sum_of_reverse_diagonal);\n    }\n\n    let mut is_magic_square: bool = true;\n    let mut sum_of_elements: isize = 0;\n    for i in 0..sum_of_rows.len() {\n        if i == 0 {\n            sum_of_elements = sum_of_rows[i];\n        } else {\n            if sum_of_rows[i] != sum_of_elements {\n                is_magic_square = false;\n            }\n        }\n    }\n\n    for i in 0..sum_of_columns.len"
  ]
}