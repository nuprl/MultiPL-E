{
  "name": "mbpp_293_otherside_rightangle",
  "language": "rs",
  "prompt": "/// Write a function to find the third side of a right angled triangle.\nfn otherside_rightangle(w: isize, h: isize) -> f64 {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_293_otherside_rightangle.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\nfn main() {\n    let candidate = otherside_rightangle;\n    assert_eq!(candidate(7, 8), 10.63014581273465);\n    assert_eq!(candidate(3, 4), 5.0);\n    assert_eq!(candidate(7, 15), 16.55294535724685);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    let mut s = w * w + h * h;\n    s = s as f64;\n    s.sqrt()",
    "    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()",
    "    let hypotenuse = (w * w + h * h) as f64;\n    hypotenuse.sqrt()",
    "    let hypotenuse = (w as f64).hypot(h as f64);\n    hypotenuse",
    "    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()",
    "    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()",
    "    (w.pow(2) + h.pow(2)) as f64",
    "    let hypotenuse = (w * w + h * h) as f64;\n    hypotenuse.sqrt()",
    "    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()",
    "    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()",
    "    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()",
    "    let hypotenuse = (w as f64).hypot(h as f64);\n    hypotenuse",
    "    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()",
    "    (w.pow(2) + h.pow(2)) as f64",
    "    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()",
    "    let hypotenuse = ((w * w) + (h * h)) as f64;\n    hypotenuse.sqrt()",
    "    let mut side = w * w + h * h;\n    side = side as f64;\n    side = side.sqrt();\n    side",
    "    let hypotenuse: f64 = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()",
    "    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()",
    "    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()",
    "    let w = w as f64;\n    let h = h as f64;\n    let hypotenuse = (w.powi(2) + h.powi(2)).sqrt();\n    hypotenuse",
    "    let h_sq = h * h;\n    let w_sq = w * w;\n    let sum = h_sq + w_sq;\n    (sum as f64).sqrt()",
    "    (w.pow(2) + h.pow(2) as f64).sqrt()",
    "    let hypotenuse = (w * w + h * h) as f64;\n    hypotenuse.sqrt()",
    "    ((w.pow(2) + h.pow(2)) as f64).sqrt()",
    "    let hypotenuse = (w * w + h * h) as f64;\n    hypotenuse.sqrt()",
    "    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()",
    "    let hypotenuse = (w * w + h * h) as f64;\n    hypotenuse.sqrt()",
    "    let h = h as f64;\n    let w = w as f64;\n    let x = (h.powi(2) + w.powi(2)).sqrt();\n    x",
    "    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()",
    "    let x = (w * w + h * h) as f64;\n    x.sqrt()",
    "    (w.pow(2) + h.pow(2)) as f64",
    "    let l = (w as f64).powi(2) + (h as f64).powi(2);\n    l.sqrt()",
    "    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()",
    "    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()",
    "    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()",
    "    (w.pow(2) + h.pow(2)) as f64",
    "    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()",
    "    ((w * w + h * h) as f64).sqrt()",
    "    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()",
    "    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()",
    "    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()",
    "    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()",
    "    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()",
    "    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()",
    "    let hypotenuse = (w as f64).powi(2) + (h as f64).powi(2);\n    hypotenuse.sqrt()",
    "    let hypotenuse = (w * w + h * h) as f64;\n    hypotenuse.sqrt()",
    "    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()",
    "    ((w as f64).powi(2) + (h as f64).powi(2)).sqrt()",
    "    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()",
    "    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()",
    "    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()",
    "    let mut result = (w * w + h * h) as f64;\n    result = result.sqrt();\n    result",
    "    ((w as f64).powi(2) + (h as f64).powi(2)).sqrt()",
    "    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()",
    "    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()",
    "    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()",
    "    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()",
    "    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()",
    "    let hypotenuse = (w * w + h * h) as f64;\n    hypotenuse.sqrt()",
    "    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()",
    "    let hypotenuse = ((w as f64).powi(2) + (h as f64).powi(2)).sqrt();\n    hypotenuse",
    "    let hypotenuse = (w * w + h * h) as f64;\n    hypotenuse.sqrt()",
    "    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()",
    "    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()",
    "    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()",
    "    let hypotenuse = (w as f64).powi(2) + (h as f64).powi(2);\n    hypotenuse.sqrt()",
    "    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()",
    "    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()",
    "    (w.pow(2) + h.pow(2) as f64).sqrt()",
    "    let hypotenuse = (w * w + h * h) as f64;\n    hypotenuse.sqrt()",
    "    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()",
    "    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()",
    "    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()",
    "    ((w as f64).powi(2) + (h as f64).powi(2)).sqrt()",
    "    let x = (w * w + h * h) as f64;\n    x.sqrt()",
    "    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()",
    "    let hypotenuse = (w * w + h * h) as f64;\n    hypotenuse.sqrt()",
    "    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()",
    "    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()",
    "    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()",
    "    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()",
    "    ((w as f64).powi(2) + (h as f64).powi(2)).sqrt()",
    "    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()",
    "    let h_squared = h.pow(2);\n    let w_squared = w.pow(2);\n    let sum = h_squared + w_squared;\n    let result = sum as f64;\n    result.sqrt()",
    "    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()",
    "    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()",
    "    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()",
    "    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()",
    "    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()",
    "    (w.pow(2) + h.pow(2)) as f64",
    "    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()",
    "    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()",
    "    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()",
    "    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()",
    "    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()",
    "    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()",
    "    ((w as f64).powi(2) + (h as f64).powi(2)).sqrt()",
    "    let hypotenuse = (w * w + h * h) as f64;\n    hypotenuse.sqrt()",
    "    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()",
    "    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()",
    "    let x = (w * w + h * h) as f64;\n    x.sqrt()",
    "    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()",
    "    let hypotenuse = (w as f64).powi(2) + (h as f64).powi(2);\n    hypotenuse.sqrt()",
    "    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()",
    "    let hypotenuse = (w * w + h * h) as f64;\n    hypotenuse.sqrt()",
    "    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()",
    "    let x = (w * w + h * h) as f64;\n    x.sqrt()",
    "    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()",
    "    let mut x = w * w + h * h;\n    x = x as f64;\n    x.sqrt()",
    "    let hypotenuse = (w * w + h * h) as f64;\n    hypotenuse.sqrt()",
    "    let w = w as f64;\n    let h = h as f64;\n    let otherside = (w.powi(2) + h.powi(2)).sqrt();\n    otherside",
    "    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()",
    "    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()",
    "    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()",
    "    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()",
    "    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()",
    "    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()",
    "    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()",
    "    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()",
    "    let a = (w * w + h * h) as f64;\n    a.sqrt()",
    "    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()",
    "    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()",
    "    let w = w as f64;\n    let h = h as f64;\n    ((w * w) + (h * h)).sqrt()",
    "    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()",
    "    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()",
    "    let hypotenuse = (w as f64).powi(2) + (h as f64).powi(2);\n    hypotenuse.sqrt()",
    "    let h2 = h * h;\n    let w2 = w * w;\n    (h2 + w2) as f64",
    "    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()",
    "    let hypotenuse = (w * w + h * h) as f64;\n    hypotenuse.sqrt()",
    "    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()",
    "    let x = (w * w + h * h) as f64;\n    x.sqrt()",
    "    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()",
    "    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()",
    "    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()",
    "    ((w.pow(2) + h.pow(2)) as f64).sqrt()",
    "    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()",
    "    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()",
    "    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()",
    "    (w.pow(2) + h.pow(2)) as f64",
    "    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()",
    "    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()",
    "    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()",
    "    let hypotenuse = (w * w + h * h) as f64;\n    hypotenuse.sqrt()",
    "    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()",
    "    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()",
    "    let a = w as f64;\n    let b = h as f64;\n    (a.powi(2) + b.powi(2)).sqrt()",
    "    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()",
    "    (w.pow(2) + h.pow(2) as f64).sqrt()",
    "    let hypotenuse = (w * w + h * h) as f64;\n    hypotenuse.sqrt()",
    "    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()",
    "    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()",
    "    let hypotenuse = (w * w + h * h) as f64;\n    hypotenuse.sqrt()",
    "    let hypotenuse = (w * w + h * h) as f64;\n    hypotenuse.sqrt()",
    "    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()",
    "    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()",
    "    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()",
    "    let sum = w * w + h * h;\n    (sum as f64).sqrt()",
    "    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()",
    "    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()",
    "    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()",
    "    let h_sq = h * h;\n    let w_sq = w * w;\n    (h_sq + w_sq) as f64",
    "    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()",
    "    let a = w as f64;\n    let b = h as f64;\n    (a.powi(2) + b.powi(2)).sqrt()",
    "    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()",
    "    let hypotenuse = (w * w + h * h) as f64;\n    hypotenuse.sqrt()",
    "    let hypotenuse = (w * w + h * h) as f64;\n    hypotenuse.sqrt()",
    "    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()",
    "    let mut result = 0.0;\n    result = ((w * w) + (h * h)) as f64;\n    result.sqrt()",
    "    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()",
    "    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()",
    "    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()",
    "    let x = w * w + h * h;\n    let y = x as f64;\n    y.sqrt()",
    "    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()",
    "    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()",
    "    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()",
    "    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()",
    "    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()",
    "    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()",
    "    let d = (w.pow(2) + h.pow(2)) as f64;\n    d.sqrt()",
    "    let x = (w * w + h * h) as f64;\n    x.sqrt()",
    "    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()",
    "    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()",
    "    let x = (w * w + h * h) as f64;\n    x.sqrt()",
    "    let hypotenuse = (w * w + h * h) as f64;\n    hypotenuse.sqrt()",
    "    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()",
    "    let hypotenuse = (w * w + h * h) as f64;\n    hypotenuse.sqrt()",
    "    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()",
    "    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()",
    "    let hypotenuse = (w * w + h * h) as f64;\n    hypotenuse.sqrt()",
    "    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()",
    "    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()",
    "    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()",
    "    ((w.pow(2) + h.pow(2)) as f64).sqrt()",
    "    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()",
    "    (w.pow(2) + h.pow(2)) as f64",
    "    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()",
    "    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()",
    "    let hypotenuse = (w.pow(2) + h.pow(2)) as f64;\n    hypotenuse.sqrt()",
    "    let w = w as f64;\n    let h = h as f64;\n    (w.powi(2) + h.powi(2)).sqrt()"
  ]
}