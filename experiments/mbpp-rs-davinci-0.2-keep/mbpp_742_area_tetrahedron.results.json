{
  "name": "mbpp_742_area_tetrahedron",
  "language": "rs",
  "prompt": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_742_area_tetrahedron.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (3.0 * (side as f64).powf(2.0) * ((3.0_f64).sqrt() / 2.0)).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517287,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4.835564693205939`,\n right: `15.588457268119894`', /tmp/tmp_9aois4j.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt() / 4.0;\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3.8971143170299736`,\n right: `15.588457268119894`', /tmp/tmp98ejpjq0.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt() / 4.0_f64;\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3.8971143170299736`,\n right: `15.588457268119894`', /tmp/tmpg42aoln1.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let s = side as f64;\n    let a = (s * s * s).sqrt();\n    let b = (3.0 * a * a).sqrt();\n    let c = (6.0 * a * a).sqrt();\n    let d = (3.0 * b * b).sqrt();\n    let e = (3.0 * c * c).sqrt();\n    let f = (2.0 * d * d).sqrt();\n    let g = (2.0 * e * e).sqrt();\n    let h = (2.0 * f * f).sqrt();\n    let i = (2.0 * g * g).sqrt();\n    let j = (2.0 * h * h).sqrt();\n    let k = (2.0 * i * i).sqrt();\n    let l = (2.0 * j * j).sqrt();\n    let m = (2.0 * k * k).sqrt();\n    let n = (2.0 * l * l).sqrt();\n    let o = (2.0 * m * m).sqrt();\n    let p = (2.0 * n * n).sqrt();\n    let q = (2.0 * o * o).sqrt();\n    let r = (2.0 * p * p).sqrt();\n    let s = (2.0 * q * q).sqrt();\n    let t = (2.0 * r * r).sqrt();\n    let u = (2.0 * s * s).sqrt();\n    let v = (2.0 * t * t).sqrt();\n    let w = (2.0 * u * u).sqrt();\n    let x = (2.0 * v * v).sqrt();\n    let y = (2.0 * w * w).sqrt();\n    let z = (2.0 * x * x).sqrt();\n    let aa = (2.0 * y * y).sqrt();\n    let ab = (2.0 * z * z).sqrt();\n    let ac = (2.0 * aa * aa).sqrt();\n    let ad = (2.\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "error: mismatched closing delimiter: `}`\n  --> /tmp/tmpgwiw1avi.rs:33:14\n   |\n2  | fn area_tetrahedron(side: isize) -> f64 {\n   |                                         - closing delimiter possibly meant for this\n...\n33 |     let ad = (2.\n   |              ^ unclosed delimiter\n34 | }\n   | ^ mismatched closing delimiter\n\nerror: expected one of `.`, `;`, `?`, `else`, or an operator, found `}`\n  --> /tmp/tmpgwiw1avi.rs:34:1\n   |\n34 | }\n   | ^ expected one of `.`, `;`, `?`, `else`, or an operator\n\nerror: aborting due to 2 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (3.0f64).sqrt() * (side as f64).powi(2);\n    area / 4.0\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517287,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3.8971143170299736`,\n right: `15.588457268119894`', /tmp/tmpf9zp4ieo.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side * side * (3 as f64).sqrt() / 4.0) as f64;\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "error[E0277]: cannot multiply `isize` by `f64`\n --> /tmp/tmp5k_z9547.rs:3:29\n  |\n3 |     let area = (side * side * (3 as f64).sqrt() / 4.0) as f64;\n  |                             ^ no implementation for `isize * f64`\n  |\n  = help: the trait `Mul<f64>` is not implemented for `isize`\n  = help: the following other types implement trait `Mul<Rhs>`:\n            <&'a f32 as Mul<f32>>\n            <&'a f64 as Mul<f64>>\n            <&'a i128 as Mul<i128>>\n            <&'a i16 as Mul<i16>>\n            <&'a i32 as Mul<i32>>\n            <&'a i64 as Mul<i64>>\n            <&'a i8 as Mul<i8>>\n            <&'a isize as Mul<isize>>\n          and 49 others\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let a = side as f64;\n    let area = (a.powi(2) * (3.0_f64).sqrt() / 4.0).powi(2);\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `15.187499999999998`,\n right: `15.588457268119894`', /tmp/tmpcgfphokx.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3f64).sqrt() / 4f64;\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517287,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3.8971143170299736`,\n right: `15.588457268119894`', /tmp/tmpy5xn20j7.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let a = side as f64;\n    let s = a * 3.0_f64.sqrt() / 12.0;\n    s * s * s * (a * a).sqrt()\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517287,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `0.24356964481437343`,\n right: `15.588457268119894`', /tmp/tmp9ih6gyzd.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt() / 4.0;\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3.8971143170299736`,\n right: `15.588457268119894`', /tmp/tmp98ejpjq0.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3f64).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517287,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt() / 4.0;\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3.8971143170299736`,\n right: `15.588457268119894`', /tmp/tmp98ejpjq0.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let a = side as f64;\n    let s = (a * a * 3_f64.sqrt()) / 4_f64;\n    s * s * 3_f64.sqrt() / 4_f64\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517287,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `6.57638040998808`,\n right: `15.588457268119894`', /tmp/tmp32vkbbqy.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0f64).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517287,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powf(2.0) * (3.0 as f64).sqrt() / 4.0;\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517287,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3.8971143170299736`,\n right: `15.588457268119894`', /tmp/tmpln6vo_hi.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let s = side as f64;\n    let area = (3.0_f64).sqrt() * s.powi(2);\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517287,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let a = side as f64;\n    let s = a * 3.0_f64.sqrt() / 12.0;\n    s * s * s * 3.0_f64.sqrt()\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122523,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `0.14062500000000003`,\n right: `15.588457268119894`', /tmp/tmp2txnkrlr.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let s = side as f64;\n    let a = (s.powi(2) * (3.0_f64).sqrt() / 4.0).sqrt();\n    a\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122523,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1.9741110194287386`,\n right: `15.588457268119894`', /tmp/tmp5ril50wl.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0 as f64).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122524,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt() / 4.0_f64;\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3.8971143170299736`,\n right: `15.588457268119894`', /tmp/tmpg42aoln1.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt() / 4.0;\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3.8971143170299736`,\n right: `15.588457268119894`', /tmp/tmp98ejpjq0.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let s = side as f64;\n    let a = s.powi(2) * (3.0_f64).sqrt();\n    a / 4.0\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122524,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3.8971143170299736`,\n right: `15.588457268119894`', /tmp/tmpnyvs4o8u.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (3.0f64.sqrt() / 4.0) * side as f64 * side as f64;\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122524,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3.897114317029974`,\n right: `15.588457268119894`', /tmp/tmpzrsfrtrq.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powf(2.0) * (3.0_f64).sqrt() / 4.0;\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122523,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3.8971143170299736`,\n right: `15.588457268119894`', /tmp/tmpmggt3kv8.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let a = side as f64;\n    let s = a * 3.0_f64.sqrt() / 12.0;\n    let area = (3.0_f64 * s.powi(2)).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122524,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `0.7500000000000001`,\n right: `15.588457268119894`', /tmp/tmpxif0k4c2.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let a = side as f64;\n    let s = a * a * a * (3.0_f64).sqrt() / 6.0;\n    s\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122524,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `7.794228634059947`,\n right: `15.588457268119894`', /tmp/tmphw5my8m9.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0 as f64).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122524,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let a = side as f64;\n    let s = a * 3.0_f64.sqrt() / 12.0;\n    s * s * s * 3.0_f64.sqrt()\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122523,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `0.14062500000000003`,\n right: `15.588457268119894`', /tmp/tmp2txnkrlr.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powf(2.0) * (3.0_f64).sqrt() / 4.0;\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122523,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3.8971143170299736`,\n right: `15.588457268119894`', /tmp/tmpmggt3kv8.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let s = side as f64;\n    let a = s.powi(2) * (3.0_f64).sqrt();\n    a * (a / 3.0_f64)\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122524,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `80.99999999999999`,\n right: `15.588457268119894`', /tmp/tmp4cq4ktrp.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side.pow(2) * (3 as f64).sqrt() / 4.0) as f64;\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122523,
      "stdout": "",
      "stderr": "error[E0277]: cannot multiply `isize` by `f64`\n --> /tmp/tmpaq2dgnaf.rs:3:29\n  |\n3 |     let area = (side.pow(2) * (3 as f64).sqrt() / 4.0) as f64;\n  |                             ^ no implementation for `isize * f64`\n  |\n  = help: the trait `Mul<f64>` is not implemented for `isize`\n  = help: the following other types implement trait `Mul<Rhs>`:\n            <&'a f32 as Mul<f32>>\n            <&'a f64 as Mul<f64>>\n            <&'a i128 as Mul<i128>>\n            <&'a i16 as Mul<i16>>\n            <&'a i32 as Mul<i32>>\n            <&'a i64 as Mul<i64>>\n            <&'a i8 as Mul<i8>>\n            <&'a isize as Mul<isize>>\n          and 49 others\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area_square = area_square(side);\n    let area_triangle = area_triangle(side);\n    (area_square * 3.0 + area_triangle * 4.0).sqrt()\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122524,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `area_square` in this scope\n --> /tmp/tmpq87y6rt1.rs:3:23\n  |\n3 |     let area_square = area_square(side);\n  |                       ^^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function `area_triangle` in this scope\n --> /tmp/tmpq87y6rt1.rs:4:25\n  |\n4 |     let area_triangle = area_triangle(side);\n  |                         ^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt() / 4.0;\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3.8971143170299736`,\n right: `15.588457268119894`', /tmp/tmp98ejpjq0.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let s = side as f64;\n    let a = (s * s * (3.0_f64).sqrt()) / 4.0;\n    a\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122523,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3.8971143170299736`,\n right: `15.588457268119894`', /tmp/tmpjk5jldas.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let a = side as f64;\n    let s = a * 3.0_f64.sqrt() / 12.0;\n    s * s * s * 3.0_f64.sqrt() / 2.0\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `0.07031250000000001`,\n right: `15.588457268119894`', /tmp/tmp5onmoo_m.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = ((side as f64).powi(2) * (3.0_f64).sqrt() / 4.0_f64).powi(2);\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122523,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `15.187499999999998`,\n right: `15.588457268119894`', /tmp/tmp8b5dztrw.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powf(2.0) * ((3.0_f64).sqrt() / 4.0);\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122525,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3.8971143170299736`,\n right: `15.588457268119894`', /tmp/tmpftjgf6yf.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt() / 4.0;\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3.8971143170299736`,\n right: `15.588457268119894`', /tmp/tmp98ejpjq0.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let a = side as f64;\n    let s = a * 3.0_f64.sqrt() / 4.0;\n    s * s * 3.0_f64.sqrt() / 2.0\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122524,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1.46141786888624`,\n right: `15.588457268119894`', /tmp/tmpvdhhhr1x.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let s = side as f64;\n    (s.powi(2) * (s.powi(2) - 2.0 * s + 2.0).sqrt() / 12.0).round()\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122524,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2.0`,\n right: `15.588457268119894`', /tmp/tmpnjqrd_k9.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (3.0f64).sqrt() * (side as f64).powi(2);\n    area / 4.0\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517287,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3.8971143170299736`,\n right: `15.588457268119894`', /tmp/tmpf9zp4ieo.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let a = side as f64;\n    let s = a * 3.0_f64.sqrt() / 12.0;\n    s * s * s * 3.0_f64.sqrt() / 2.0\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `0.07031250000000001`,\n right: `15.588457268119894`', /tmp/tmp5onmoo_m.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (3.0f64).sqrt() * side as f64 * side as f64;\n    area / 4.0\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122523,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3.897114317029974`,\n right: `15.588457268119894`', /tmp/tmp_zhq37l0.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let a = side as f64;\n    let s = a * 3.0_f64.sqrt() / 4.0;\n    s * s * 3.0_f64.sqrt() / 4.0\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122524,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `0.73070893444312`,\n right: `15.588457268119894`', /tmp/tmpjzyuc8qw.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt() / 4.0;\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3.8971143170299736`,\n right: `15.588457268119894`', /tmp/tmp98ejpjq0.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let a = side as f64;\n    let s = a * 3.0_f64.sqrt() / 4.0;\n    let area = (s * s * 3.0_f64.sqrt() / 4.0).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122524,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `0.8548151463580416`,\n right: `15.588457268119894`', /tmp/tmprpl7d1bo.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let a = side as f64;\n    let s = a * 3.0_f64.sqrt() / 4.0;\n    s * s * s * (3.0_f64.sqrt() / 6.0)\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122523,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `0.6328125`,\n right: `15.588457268119894`', /tmp/tmpd0ex1bex.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (3.0_f64).sqrt() * (side as f64).powi(2) / 4.0;\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122525,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3.8971143170299736`,\n right: `15.588457268119894`', /tmp/tmp9_7m4vgd.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let s = side as f64;\n    let a = (s.powi(2) * (3.0_f64).sqrt() / 4.0).powi(2);\n    a\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122524,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `15.187499999999998`,\n right: `15.588457268119894`', /tmp/tmp7n1mn_02.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let a = side as f64;\n    let s = a * 3.0_f64.sqrt() / 12.0;\n    s * s * s * 3.0_f64.sqrt() / 2.0\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `0.07031250000000001`,\n right: `15.588457268119894`', /tmp/tmp5onmoo_m.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let mut area: f64 = 0.0;\n    area = ((side as f64).powi(2) * (3.0_f64).sqrt() / 4.0).powi(2);\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122525,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `15.187499999999998`,\n right: `15.588457268119894`', /tmp/tmp77h_32qa.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let s = side as f64;\n    let area = (s * s * (3.0_f64).sqrt()) / 4.0;\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122524,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3.8971143170299736`,\n right: `15.588457268119894`', /tmp/tmp2ivn42ms.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * ((3.0_f64).sqrt() / 4.0_f64);\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122523,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3.8971143170299736`,\n right: `15.588457268119894`', /tmp/tmpunea157c.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt() / 4.0;\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3.8971143170299736`,\n right: `15.588457268119894`', /tmp/tmp98ejpjq0.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt() / 4.0;\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3.8971143170299736`,\n right: `15.588457268119894`', /tmp/tmp98ejpjq0.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let a = side as f64;\n    let area = (a.powi(2) * (3.0_f64).sqrt() / 4.0).powi(2);\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `15.187499999999998`,\n right: `15.588457268119894`', /tmp/tmpcgfphokx.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let a = side as f64;\n    let s = a * 3.0_f64.sqrt() / 12.0;\n    s * s * s * 3.0_f64.sqrt()\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122523,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `0.14062500000000003`,\n right: `15.588457268119894`', /tmp/tmp2txnkrlr.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let a = side as f64;\n    let s = a * 3.0_f64.sqrt() / 12.0;\n    let area = (3.0_f64.sqrt() / 4.0) * a.powi(2);\n    area * s\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122525,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1.6875`,\n right: `15.588457268119894`', /tmp/tmpopx1rwql.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (3.0_f64).sqrt() * (side as f64).powi(2);\n    area / 4.0\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122523,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3.8971143170299736`,\n right: `15.588457268119894`', /tmp/tmpbx9j13xg.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (3.0 * (side as f64).powi(2) * ((3.0_f64).sqrt() / 2.0)).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122523,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4.835564693205939`,\n right: `15.588457268119894`', /tmp/tmpkkwwvjuy.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powf(2.0) * (3.0_f64).sqrt() / 4.0;\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122523,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3.8971143170299736`,\n right: `15.588457268119894`', /tmp/tmpmggt3kv8.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = ((side as f64).powf(2.0) * (3.0_f64).sqrt() / 4.0).powf(3.0);\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122525,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `59.18742368989271`,\n right: `15.588457268119894`', /tmp/tmpi011lwma.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let s = side as f64;\n    let a = (s * s * (3.0_f64).sqrt()) / 4.0;\n    a\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122523,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3.8971143170299736`,\n right: `15.588457268119894`', /tmp/tmpjk5jldas.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (3.0f64).sqrt() * (side as f64).powi(2);\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122523,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let a = side as f64;\n    let s = a * 3.0_f64.sqrt() / 12.0;\n    s * s * s * 3.0_f64.sqrt() / 2.0\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `0.07031250000000001`,\n right: `15.588457268119894`', /tmp/tmp5onmoo_m.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let a = side as f64;\n    let s = a * 3.0_f64.sqrt() / 12.0;\n    s * s * s * 3.0_f64.sqrt() / 2.0\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `0.07031250000000001`,\n right: `15.588457268119894`', /tmp/tmp5onmoo_m.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0 as f64).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122524,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let a = side as f64;\n    let s = a * 3.0_f64.sqrt() / 12.0;\n    s * s * s * 3.0_f64.sqrt() / 2.0\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `0.07031250000000001`,\n right: `15.588457268119894`', /tmp/tmp5onmoo_m.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powf(2.0) * (3.0_f64).sqrt() / 4.0;\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122523,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3.8971143170299736`,\n right: `15.588457268119894`', /tmp/tmpmggt3kv8.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let a = side as f64;\n    let s = a * 3.0_f64.sqrt() / 4.0;\n    s * s * s * (6.0_f64.sqrt() / 12.0)\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122525,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `0.44746600996961206`,\n right: `15.588457268119894`', /tmp/tmp2jwfkt61.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powf(2.0) * (3.0 as f64).sqrt() / 4.0;\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517287,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3.8971143170299736`,\n right: `15.588457268119894`', /tmp/tmpln6vo_hi.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area / 4.0\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122523,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3.8971143170299736`,\n right: `15.588457268119894`', /tmp/tmpvnu1spf3.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = ((side as f64).powi(2) * (3.0_f64).sqrt() / 4.0_f64).powi(2);\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122523,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `15.187499999999998`,\n right: `15.588457268119894`', /tmp/tmp8b5dztrw.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let a = side as f64;\n    let s = a * 3.0_f64.sqrt() / 12.0;\n    s.powi(2) * 3.0_f64.sqrt()\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `0.3247595264191645`,\n right: `15.588457268119894`', /tmp/tmpd5ixeen7.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let a = side as f64;\n    let s = a * 3.0_f64.sqrt() / 4.0;\n    let area = s * s * 3.0_f64.sqrt() / 4.0;\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122523,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `0.73070893444312`,\n right: `15.588457268119894`', /tmp/tmpffyuqr_2.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt() / 4.0;\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3.8971143170299736`,\n right: `15.588457268119894`', /tmp/tmp98ejpjq0.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let a = side as f64;\n    let s = a * 3.0_f64.sqrt() / 12.0;\n    let area = s * (s - a / 2.0) * (s - a / 2.0) * (s - a) * 3.0_f64.sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122524,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `-2.191812916580806`,\n right: `15.588457268119894`', /tmp/tmp6d1ozgu9.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt() / 4.0;\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3.8971143170299736`,\n right: `15.588457268119894`', /tmp/tmp98ejpjq0.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let a = side as f64;\n    let s = a * 3.0_f64.sqrt() / 12.0;\n    s * s * s * 3.0_f64.sqrt() / 2.0\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `0.07031250000000001`,\n right: `15.588457268119894`', /tmp/tmp5onmoo_m.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = ((side as f64).powi(2) * (3.0_f64).sqrt() / 4.0_f64).powi(2);\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122523,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `15.187499999999998`,\n right: `15.588457268119894`', /tmp/tmp8b5dztrw.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = ((side as f64).powi(2) * (3.0_f64).sqrt() / 4.0_f64).powi(2);\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122523,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `15.187499999999998`,\n right: `15.588457268119894`', /tmp/tmp8b5dztrw.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (3.0f64).sqrt() * (side as f64).powi(2);\n    area / 4.0\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517287,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3.8971143170299736`,\n right: `15.588457268119894`', /tmp/tmpf9zp4ieo.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let a = side as f64;\n    let s = a * 3.0_f64.sqrt() / 12.0;\n    s * s * s * 3.0_f64.sqrt() / 2.0\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `0.07031250000000001`,\n right: `15.588457268119894`', /tmp/tmp5onmoo_m.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt() / 4.0;\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3.8971143170299736`,\n right: `15.588457268119894`', /tmp/tmp98ejpjq0.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let a = side as f64;\n    let s = a * 3.0_f64.sqrt() / 12.0;\n    let area = (3.0_f64 * s * s).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122524,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `0.75`,\n right: `15.588457268119894`', /tmp/tmp8cvejz3h.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt() / 4.0;\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3.8971143170299736`,\n right: `15.588457268119894`', /tmp/tmp98ejpjq0.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let a = side as f64;\n    let s = a * (3.0 as f64).sqrt() / 2.0;\n    let area = (s * s * (3.0 as f64).sqrt() / 2.0) / 2.0;\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122525,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2.92283573777248`,\n right: `15.588457268119894`', /tmp/tmpzms6skxr.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (3.0f64.sqrt() * side as f64 * side as f64) / 4.0;\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122524,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3.897114317029974`,\n right: `15.588457268119894`', /tmp/tmp8rfh8b7o.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (3.0 * (side as f64).powi(2) * (3.0_f64.sqrt() / 2.0)).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4.835564693205939`,\n right: `15.588457268119894`', /tmp/tmpcgns17p_.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt() / 4.0;\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3.8971143170299736`,\n right: `15.588457268119894`', /tmp/tmp98ejpjq0.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let a = side as f64;\n    let s = a * 3.0_f64.sqrt() / 12.0;\n    s * s * s * 3.0_f64.sqrt() / 2.0\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `0.07031250000000001`,\n right: `15.588457268119894`', /tmp/tmp5onmoo_m.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let s = side as f64;\n    let a = (s * s * (3.0_f64).sqrt()) / 4.0;\n    a\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122523,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3.8971143170299736`,\n right: `15.588457268119894`', /tmp/tmpjk5jldas.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let a = side as f64;\n    let s = a * 3.0_f64.sqrt() / 12.0;\n    s * s * s * 3.0_f64.sqrt()\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122523,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `0.14062500000000003`,\n right: `15.588457268119894`', /tmp/tmp2txnkrlr.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt() / 4.0;\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3.8971143170299736`,\n right: `15.588457268119894`', /tmp/tmp98ejpjq0.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (3.0 * (side as f64).powf(2.0) * (3.0_f64.sqrt() / 2.0)).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122525,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4.835564693205939`,\n right: `15.588457268119894`', /tmp/tmpjxf1nnmr.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let a = side as f64;\n    let s = a * 3.0_f64.sqrt() / 12.0;\n    s.powi(2) * 3.0_f64.sqrt()\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `0.3247595264191645`,\n right: `15.588457268119894`', /tmp/tmpd5ixeen7.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt() / 4.0;\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3.8971143170299736`,\n right: `15.588457268119894`', /tmp/tmp98ejpjq0.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = ((side as f64).powi(2) * (3.0_f64).sqrt() / 4.0).powi(2);\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `15.187499999999998`,\n right: `15.588457268119894`', /tmp/tmpl9x1irgs.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let a = side as f64;\n    let s = a * 3.0_f64.sqrt() / 12.0;\n    (s * (s - a) * (s - a) * (s - a)).sqrt()\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122524,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `NaN`,\n right: `15.588457268119894`', /tmp/tmpofrj2boi.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let a = side as f64;\n    let s = a * 3.0_f64.sqrt() / 4.0;\n    let area = s * s * 3.0_f64.sqrt() / 4.0;\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122523,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `0.73070893444312`,\n right: `15.588457268119894`', /tmp/tmpffyuqr_2.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (3.0f64).sqrt() * side as f64;\n    area * area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122525,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `27.0`,\n right: `15.588457268119894`', /tmp/tmp1d1jfptw.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt() / 4.0;\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3.8971143170299736`,\n right: `15.588457268119894`', /tmp/tmp98ejpjq0.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt() / 4.0;\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3.8971143170299736`,\n right: `15.588457268119894`', /tmp/tmp98ejpjq0.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powf(2.0) * (3.0_f64).sqrt() / 4.0;\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122523,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3.8971143170299736`,\n right: `15.588457268119894`', /tmp/tmpmggt3kv8.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = ((side as f64).powi(2) * (3.0_f64).sqrt() / 4.0_f64).powi(2);\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122523,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `15.187499999999998`,\n right: `15.588457268119894`', /tmp/tmp8b5dztrw.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let a = side as f64;\n    let s = a * 3.0_f64.sqrt() / 12.0;\n    s * s * s * (3.0_f64.sqrt() / 2.0)\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122525,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `0.07031250000000001`,\n right: `15.588457268119894`', /tmp/tmpzqo_w3x1.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt() / 4.0;\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3.8971143170299736`,\n right: `15.588457268119894`', /tmp/tmp98ejpjq0.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (3.0f64).sqrt() * side as f64 * side as f64;\n    area / 4.0\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122523,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3.897114317029974`,\n right: `15.588457268119894`', /tmp/tmp_zhq37l0.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt() / 4.0;\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3.8971143170299736`,\n right: `15.588457268119894`', /tmp/tmp98ejpjq0.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let a = side as f64;\n    let s = a * a * a / (6.0 * (a * a).sqrt());\n    (s * 3.0_f64.sqrt()).round()\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122525,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3.0`,\n right: `15.588457268119894`', /tmp/tmpkey828hx.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt() / 4.0;\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3.8971143170299736`,\n right: `15.588457268119894`', /tmp/tmp98ejpjq0.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let a = side as f64;\n    let s = a * 3.0_f64.sqrt() / 12.0;\n    let area = a.powi(2) * 3.0_f64.sqrt() / 4.0;\n    println!(\"The area of the tetrahedron is {}\", area);\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122525,
      "stdout": "The area of the tetrahedron is 3.8971143170299736\n",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3.8971143170299736`,\n right: `15.588457268119894`', /tmp/tmpzklfbpru.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (3.0f64).sqrt() * side as f64 * side as f64;\n    area / 4.0\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122523,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3.897114317029974`,\n right: `15.588457268119894`', /tmp/tmp_zhq37l0.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let a = side as f64;\n    let s = a * 3.0_f64.sqrt() / 12.0;\n    let area = (3.0 * s * s).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122525,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `0.75`,\n right: `15.588457268119894`', /tmp/tmpc8jkfcao.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = ((side as f64).powi(2) * (3.0_f64).sqrt() / 4.0_f64).powi(2);\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122523,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `15.187499999999998`,\n right: `15.588457268119894`', /tmp/tmp8b5dztrw.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let height = (side as f64 * (3.0_f64).sqrt() / 2.0).round();\n    let area = (height * height * (3.0_f64).sqrt() / 4.0).round();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122525,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4.0`,\n right: `15.588457268119894`', /tmp/tmpzev8soe4.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt() / 4.0_f64;\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3.8971143170299736`,\n right: `15.588457268119894`', /tmp/tmpg42aoln1.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3f64).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517287,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powf(2.0) * (3.0_f64).sqrt() / 4.0;\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122523,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3.8971143170299736`,\n right: `15.588457268119894`', /tmp/tmpmggt3kv8.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt() / 4.0;\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3.8971143170299736`,\n right: `15.588457268119894`', /tmp/tmp98ejpjq0.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let a = side as f64;\n    let s = a * a * (3.0_f64).sqrt();\n    let area = (s * s) * (3.0_f64).sqrt() / 4.0;\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122525,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `105.22208655980928`,\n right: `15.588457268119894`', /tmp/tmp8ymxvnzd.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let s = side as f64;\n    let a = s.powf(2.0) * (3.0_f64).sqrt();\n    let b = (3.0_f64).sqrt() / 4.0;\n    a * b\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122525,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `6.749999999999999`,\n right: `15.588457268119894`', /tmp/tmpgs4svpwo.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt() / 4.0;\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3.8971143170299736`,\n right: `15.588457268119894`', /tmp/tmp98ejpjq0.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side * side * (3 as f64).sqrt() / 4.0) as f64;\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "error[E0277]: cannot multiply `isize` by `f64`\n --> /tmp/tmp5k_z9547.rs:3:29\n  |\n3 |     let area = (side * side * (3 as f64).sqrt() / 4.0) as f64;\n  |                             ^ no implementation for `isize * f64`\n  |\n  = help: the trait `Mul<f64>` is not implemented for `isize`\n  = help: the following other types implement trait `Mul<Rhs>`:\n            <&'a f32 as Mul<f32>>\n            <&'a f64 as Mul<f64>>\n            <&'a i128 as Mul<i128>>\n            <&'a i16 as Mul<i16>>\n            <&'a i32 as Mul<i32>>\n            <&'a i64 as Mul<i64>>\n            <&'a i8 as Mul<i8>>\n            <&'a isize as Mul<isize>>\n          and 49 others\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let a = side as f64;\n    let s = a * 3.0_f64.sqrt() / 4.0;\n    s * s * 3.0_f64.sqrt() / 4.0\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122524,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `0.73070893444312`,\n right: `15.588457268119894`', /tmp/tmpjzyuc8qw.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let a = side as f64;\n    let s = a * 3.0_f64.sqrt() / 12.0;\n    let area = (3.0 * s * s * a.sqrt()).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122525,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `0.9870555097143693`,\n right: `15.588457268119894`', /tmp/tmpskna3hdz.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let a = side as f64;\n    let s = a.powi(2) * (3.0_f64).sqrt();\n    (s * (s - a * 2.0) * (s - a * 3.0)).sqrt() / 4.0\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1666122525,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `7.845268512898429`,\n right: `15.588457268119894`', /tmp/tmpxzxg516g.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let s = side as f64;\n    let a = (s.powi(2) * (3.0_f64.sqrt())) / 4.0;\n    a\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3.8971143170299736`,\n right: `15.588457268119894`', /tmp/tmpvj52jk6t.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt();\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to caluclate the area of a tetrahedron.\nfn area_tetrahedron(side: isize) -> f64 {\n    let area = (side as f64).powi(2) * (3.0_f64).sqrt() / 4.0;\n    area\n}\n\nfn main() {\n    let candidate = area_tetrahedron;\n    assert_eq!(candidate(3), 15.588457268119894);\n    assert_eq!(candidate(20), 692.8203230275509);\n    assert_eq!(candidate(10), 173.20508075688772);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3.8971143170299736`,\n right: `15.588457268119894`', /tmp/tmp98ejpjq0.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    }
  ]
}