{
  "name": "mbpp_251_insert_element",
  "language": "rs",
  "prompt": "/// Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\nfn insert_element(list: Vec<String>, element: String) -> Vec<String> {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_251_insert_element.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\nfn main() {\n    let candidate = insert_element;\n    assert_eq!(candidate(vec![String::from(\"Red\"), String::from(\"Green\"), String::from(\"Black\")], String::from(\"c\")), vec![String::from(\"c\"), String::from(\"Red\"), String::from(\"c\"), String::from(\"Green\"), String::from(\"c\"), String::from(\"Black\")]);\n    assert_eq!(candidate(vec![String::from(\"python\"), String::from(\"java\")], String::from(\"program\")), vec![String::from(\"program\"), String::from(\"python\"), String::from(\"program\"), String::from(\"java\")]);\n    assert_eq!(candidate(vec![String::from(\"happy\"), String::from(\"sad\")], String::from(\"laugh\")), vec![String::from(\"laugh\"), String::from(\"happy\"), String::from(\"laugh\"), String::from(\"sad\")]);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    let mut new_list = Vec::new();\n    for item in list {\n        new_list.push(element.clone());\n        new_list.push(item);\n    }\n    new_list",
    "    let mut result = Vec::new();\n    for item in list {\n        result.push(element.clone());\n        result.push(item);\n    }\n    result",
    "    let mut new_list = Vec::new();\n    for item in list {\n        new_list.push(element.clone());\n        new_list.push(item);\n    }\n    new_list",
    "    let mut result = Vec::new();\n    for item in list {\n        result.push(element.clone());\n        result.push(item);\n    }\n    result",
    "    let mut result = Vec::new();\n    for item in list {\n        result.push(element.clone());\n        result.push(item);\n    }\n    result",
    "    let mut new_list = Vec::new();\n    for item in list {\n        new_list.push(element.clone());\n        new_list.push(item);\n    }\n    new_list",
    "    let mut result = Vec::new();\n    for item in list {\n        result.push(element.clone());\n        result.push(item);\n    }\n    result",
    "    let mut result = Vec::new();\n    for item in list {\n        result.push(element.clone());\n        result.push(item);\n    }\n    result",
    "    let mut new_list = Vec::new();\n    for item in list {\n        new_list.push(element.clone());\n        new_list.push(item);\n    }\n    new_list",
    "    let mut new_list = Vec::new();\n    for item in list {\n        new_list.push(element.clone());\n        new_list.push(item);\n    }\n    new_list",
    "    let mut new_list = vec![];\n    for item in list {\n        new_list.push(element.clone());\n        new_list.push(item);\n    }\n    new_list",
    "    let mut new_list = Vec::new();\n    for item in list {\n        new_list.push(element.clone());\n        new_list.push(item);\n    }\n    new_list",
    "    let mut new_list = vec![];\n    for item in list {\n        new_list.push(element.clone());\n        new_list.push(item);\n    }\n    new_list",
    "    let mut new_list = Vec::new();\n    for item in list {\n        new_list.push(element.clone());\n        new_list.push(item);\n    }\n    new_list",
    "    let mut new_list = vec![];\n    for item in list {\n        new_list.push(element.clone());\n        new_list.push(item);\n    }\n    new_list",
    "    let mut new_list = vec![];\n    for item in list {\n        new_list.push(element.clone());\n        new_list.push(item);\n    }\n    new_list",
    "    let mut new_list = Vec::new();\n    for item in list {\n        new_list.push(element.clone());\n        new_list.push(item);\n    }\n    new_list",
    "    let mut new_list = Vec::new();\n    for item in list {\n        new_list.push(element.clone());\n        new_list.push(item);\n    }\n    new_list",
    "    let mut new_list = Vec::new();\n    for item in list {\n        new_list.push(element.clone());\n        new_list.push(item);\n    }\n    new_list",
    "    let mut new_list = Vec::new();\n    for item in list {\n        new_list.push(element.clone());\n        new_list.push(item);\n    }\n    new_list"
  ]
}