{
  "name": "mbpp_266_lateralsurface_cube",
  "language": "rs",
  "prompt": "/// Write a function to find the lateral surface area of a cube given its side length.\nfn lateralsurface_cube(l: isize) -> isize {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_266_lateralsurface_cube.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\nfn main() {\n    let candidate = lateralsurface_cube;\n    assert_eq!(candidate(5), 100);\n    assert_eq!(candidate(9), 324);\n    assert_eq!(candidate(10), 400);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    4 * l * l",
    "    l * l * 4",
    "    6 * l * l",
    "    6 * l * l",
    "    l * l * 4",
    "    6 * l * l",
    "    l * l * 4",
    "    6 * l * l",
    "    4 * l * l",
    "    6 * l * l",
    "    l * l * 4",
    "    l * l * 4",
    "    4 * l * l",
    "    6 * l * l",
    "    6 * l * l",
    "    6 * l * l",
    "    6 * l * l",
    "    6 * l * l",
    "    l * l * 4",
    "    6 * l * l",
    "    4 * l * l",
    "    4 * l * l",
    "    l * l * 4",
    "    l * l * 4",
    "    l * l * 4",
    "    6 * l * l",
    "    4 * l * l",
    "    4 * l * l",
    "    return 4 * l * l;",
    "    4 * l * l",
    "    6 * l * l",
    "    4 * l * l",
    "    6 * l * l",
    "    l * l * 4",
    "    4 * l * l",
    "    l * l * 4",
    "    6 * l * l",
    "    4 * l * l",
    "    l * l * 4",
    "    6 * l * l",
    "    6 * l * l",
    "    6 * l * l",
    "    l * l * 4",
    "    4 * l * l",
    "    4 * l * l",
    "    6 * l * l",
    "    4 * l * l",
    "    4 * l * l",
    "    l * l * 4",
    "    l * l * 4",
    "    l * l * 4",
    "    l * l * 4",
    "    4 * l * l",
    "    6 * l * l",
    "    4 * l * l",
    "    6 * l * l",
    "    6 * l * l",
    "    4 * l * l",
    "    6 * l * l",
    "    6 * l * l",
    "    6 * l * l",
    "    return 4 * l * l;",
    "    4 * l * l",
    "    6 * l * l",
    "    6 * l * l",
    "    6 * l * l",
    "    6 * l * l",
    "    l * l * 4",
    "    6 * l * l",
    "    4 * l * l",
    "    6 * l * l",
    "    l * l * 4",
    "    4 * l * l",
    "    4 * l * l",
    "    6 * l * l",
    "    6 * l * l",
    "    6 * l * l",
    "    4 * l * l",
    "    4 * l * l",
    "    l * l * 4",
    "    l * l * 4",
    "    6 * l * l",
    "    4 * l * l",
    "    6 * l * l",
    "    6 * l * l",
    "    l * l * 4",
    "    6 * l * l",
    "    6 * l * l",
    "    6 * l * l",
    "    6 * l * l",
    "    l * l * 4",
    "    6 * l * l",
    "    l * l * 4",
    "    l * l * 4",
    "    l * l * 4",
    "    6 * l * l",
    "    6 * l * l",
    "    l * l * 4",
    "    4 * l * l",
    "    4 * l * l",
    "    l * l * 4",
    "    6 * l * l",
    "    4 * l * l",
    "    4 * l * l",
    "    4 * l * l",
    "    6 * l * l",
    "    l * l * 4",
    "    4 * l * l",
    "    l * l * 4",
    "    6 * l * l",
    "    6 * l * l",
    "    6 * l * l",
    "    l * l * 4",
    "    6 * l * l",
    "    6 * l * l",
    "    6 * l * l",
    "    4 * l * l",
    "    6 * l * l",
    "    6 * l * l",
    "    6 * l * l",
    "    4 * l * l",
    "    l * l * 4",
    "    l * l * 4",
    "    6 * l * l",
    "    6 * l * l",
    "    l * l * 4",
    "    l * l * 4",
    "    6 * l * l",
    "    6 * l * l",
    "    6 * l * l",
    "    6 * l * l",
    "    6 * l * l",
    "    l * l * 4",
    "    l * l * 4",
    "    4 * l * l",
    "    4 * l * l",
    "    4 * l * l",
    "    l * l * 4",
    "    4 * l * l",
    "    6 * l * l",
    "    6 * l * l",
    "    6 * l * l",
    "    l * l * 4",
    "    return 4 * l * l;",
    "    6 * l * l",
    "    6 * l * l",
    "    6 * l * l",
    "    4 * l * l",
    "    l * l * 4",
    "    6 * l * l",
    "    6 * l * l",
    "    l * l * 4",
    "    4 * l * l",
    "    l * l * 4",
    "    6 * l * l",
    "    l * l * 4",
    "    6 * l * l",
    "    6 * l * l",
    "    6 * l * l",
    "    6 * l * l",
    "    4 * l * l",
    "    6 * l * l",
    "    6 * l * l",
    "    6 * l * l",
    "    l * l * 4",
    "    6 * l * l",
    "    4 * l * l",
    "    l * l * 4",
    "    4 * l * l",
    "    4 * l * l",
    "    6 * l * l",
    "    6 * l * l",
    "    l * l * 4",
    "    l * l * 4",
    "    l * l * 4",
    "    6 * l * l",
    "    6 * l * l",
    "    6 * l * l",
    "    l * l * 4",
    "    6 * l * l",
    "    4 * l * l",
    "    l * l * 4",
    "    l * l * 4",
    "    l * l * 4",
    "    l * l * 4",
    "    4 * l * l",
    "    6 * l * l",
    "    l * l * 4",
    "    6 * l * l",
    "    6 * l * l",
    "    4 * l * l",
    "    6 * l * l",
    "    6 * l * l",
    "    l * l * 4",
    "    6 * l * l",
    "    6 * l * l",
    "    6 * l * l",
    "    6 * l * l",
    "    6 * l * l",
    "    6 * l * l"
  ]
}