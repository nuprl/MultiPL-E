{
  "name": "mbpp_767_get_pairs_count",
  "language": "rs",
  "prompt": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_767_get_pairs_count.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    let mut hash = HashMap::new();\n\n    for i in 0..arr.len() {\n        let diff = sum - arr[i];\n        if hash.contains_key(&diff) {\n            count += 1;\n        }\n        hash.insert(arr[i], i);\n    }\n\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1665510182,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmpqykf71cn.rs:4:20\n  |\n4 |     let mut hash = HashMap::new();\n  |                    ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    let mut map = HashMap::new();\n    for i in 0..arr.len() {\n        if map.contains_key(&(sum - arr[i])) {\n            count += 1;\n        }\n        map.insert(arr[i], i);\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1665510182,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmppp7hyv1z.rs:4:19\n  |\n4 |     let mut map = HashMap::new();\n  |                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    let mut map: HashMap<isize, isize> = HashMap::new();\n    for i in 0..arr.len() {\n        if map.contains_key(&(sum - arr[i])) {\n            count += map.get(&(sum - arr[i])).unwrap();\n        }\n        let mut val = 1;\n        if map.contains_key(&arr[i]) {\n            val = map.get(&arr[i]).unwrap() + 1;\n        }\n        map.insert(arr[i], val);\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1665510182,
      "stdout": "",
      "stderr": "error[E0412]: cannot find type `HashMap` in this scope\n --> /tmp/tmp3kt1bkn7.rs:4:18\n  |\n4 |     let mut map: HashMap<isize, isize> = HashMap::new();\n  |                  ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmp3kt1bkn7.rs:4:42\n  |\n4 |     let mut map: HashMap<isize, isize> = HashMap::new();\n  |                                          ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0412, E0433.\nFor more information about an error, try `rustc --explain E0412`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    let mut map = HashMap::new();\n    for i in 0..arr.len() {\n        let diff = sum - arr[i];\n        if map.contains_key(&diff) {\n            count += 1;\n        }\n        map.insert(arr[i], i);\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1665510182,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmphxgz7fbt.rs:4:19\n  |\n4 |     let mut map = HashMap::new();\n  |                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    let mut map = HashMap::new();\n    for i in arr {\n        let diff = sum - i;\n        if map.contains_key(&diff) {\n            count += 1;\n        }\n        map.insert(i, true);\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1666122956,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmp8rl1kq81.rs:4:19\n  |\n4 |     let mut map = HashMap::new();\n  |                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    // TODO: Implement\n    0\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1666122956,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `0`,\n right: `6`', /tmp/tmp1ukw94s_.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    let mut map = HashMap::new();\n    for i in arr {\n        let complement = sum - i;\n        if map.contains_key(&complement) {\n            count += 1;\n        }\n        map.insert(i, 1);\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1666122956,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmp_g6quyt2.rs:4:19\n  |\n4 |     let mut map = HashMap::new();\n  |                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    let mut map = HashMap::new();\n    for i in arr {\n        if map.contains_key(&(sum - i)) {\n            count += 1;\n        }\n        map.insert(i, 1);\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1666122956,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmpzprtwjez.rs:4:19\n  |\n4 |     let mut map = HashMap::new();\n  |                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    let mut map = HashMap::new();\n    for i in 0..arr.len() {\n        if map.contains_key(&(sum - arr[i])) {\n            count += 1;\n        }\n        map.insert(arr[i], i);\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1665510182,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmppp7hyv1z.rs:4:19\n  |\n4 |     let mut map = HashMap::new();\n  |                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    let mut map = HashMap::new();\n    for i in arr.iter() {\n        if map.contains_key(i) {\n            count += 1;\n        } else {\n            map.insert(sum - i, i);\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1666122956,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmp5fuw6dpa.rs:4:19\n  |\n4 |     let mut map = HashMap::new();\n  |                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    let mut map = HashMap::new();\n    for i in 0..arr.len() {\n        let diff = sum - arr[i];\n        if map.contains_key(&diff) {\n            count += 1;\n        }\n        map.insert(arr[i], i);\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1665510182,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmphxgz7fbt.rs:4:19\n  |\n4 |     let mut map = HashMap::new();\n  |                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    let mut j = arr.len() - 1;\n    while i < j {\n        if arr[i] + arr[j] == sum {\n            count += 1;\n            i += 1;\n            j -= 1;\n        } else if arr[i] + arr[j] < sum {\n            i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1666122956,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `6`', /tmp/tmpgtzre7m9.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    let mut seen = HashSet::new();\n    for x in arr {\n        if seen.contains(&(sum - x)) {\n            count += 1;\n        }\n        seen.insert(x);\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1666122956,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmp7d1wjrxm.rs:4:20\n  |\n4 |     let mut seen = HashSet::new();\n  |                    ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    let mut map = HashMap::new();\n    for i in 0..arr.len() {\n        let diff = sum - arr[i];\n        if map.contains_key(&diff) {\n            count += 1;\n        }\n        map.insert(arr[i], i);\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1665510182,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmphxgz7fbt.rs:4:19\n  |\n4 |     let mut map = HashMap::new();\n  |                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    let mut hash = HashMap::new();\n    for i in arr {\n        hash.insert(i, i);\n    }\n    for i in arr {\n        if hash.contains_key(&(sum - i)) {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1666122956,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmphpewbf_1.rs:4:20\n  |\n4 |     let mut hash = HashMap::new();\n  |                    ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    let mut j = arr.len() - 1;\n    while i < j {\n        if arr[i] + arr[j] == sum {\n            count += 1;\n            i += 1;\n            j -= 1;\n        } else if arr[i] + arr[j] < sum {\n            i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1666122956,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `6`', /tmp/tmpgtzre7m9.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    let mut map = HashMap::new();\n    for i in 0..arr.len() {\n        if map.contains_key(&(sum - arr[i])) {\n            count += map[&(sum - arr[i])];\n        }\n        if map.contains_key(&arr[i]) {\n            map.insert(arr[i], map[&arr[i]] + 1);\n        } else {\n            map.insert(arr[i], 1);\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1666122956,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmpbzqw8lz4.rs:4:19\n  |\n4 |     let mut map = HashMap::new();\n  |                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count: isize = 0;\n    let mut i: usize = 0;\n    let mut j: usize = arr.len() - 1;\n\n    while i < j {\n        if arr[i] + arr[j] == sum {\n            count += 1;\n            i += 1;\n            j -= 1;\n        } else if arr[i] + arr[j] < sum {\n            i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1666122956,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `6`', /tmp/tmpghi3kawq.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    return count;\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1666122956,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    let mut j = arr.len() - 1;\n    while i < j {\n        if arr[i] + arr[j] == sum {\n            count += 1;\n            i += 1;\n            j -= 1;\n        } else if arr[i] + arr[j] < sum {\n            i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1666122956,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `6`', /tmp/tmpgtzre7m9.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    let mut map = HashMap::new();\n    for i in 0..arr.len() {\n        if map.contains_key(&(sum - arr[i])) {\n            count += 1;\n        }\n        map.insert(arr[i], i);\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1665510182,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmppp7hyv1z.rs:4:19\n  |\n4 |     let mut map = HashMap::new();\n  |                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    let mut map: HashMap<isize, isize> = HashMap::new();\n    for i in 0..arr.len() {\n        let diff = sum - arr[i];\n        if map.contains_key(&diff) {\n            count += map[&diff];\n        }\n        let count = map.entry(arr[i]).or_insert(0);\n        *count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1666122956,
      "stdout": "",
      "stderr": "error[E0412]: cannot find type `HashMap` in this scope\n --> /tmp/tmp7ibgtdn2.rs:4:18\n  |\n4 |     let mut map: HashMap<isize, isize> = HashMap::new();\n  |                  ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmp7ibgtdn2.rs:4:42\n  |\n4 |     let mut map: HashMap<isize, isize> = HashMap::new();\n  |                                          ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0412, E0433.\nFor more information about an error, try `rustc --explain E0412`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    let mut map: HashMap<isize, isize> = HashMap::new();\n    for i in arr.iter() {\n        if map.contains_key(i) {\n            let val = map.get(i).unwrap();\n            map.insert(*i, val + 1);\n        } else {\n            map.insert(*i, 1);\n        }\n    }\n    for i in arr.iter() {\n        let diff = sum - i;\n        if map.contains_key(&diff) {\n            let val = map.get(&diff).unwrap();\n            count += val;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1666122956,
      "stdout": "",
      "stderr": "error[E0412]: cannot find type `HashMap` in this scope\n --> /tmp/tmpfxhgygwl.rs:4:18\n  |\n4 |     let mut map: HashMap<isize, isize> = HashMap::new();\n  |                  ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmpfxhgygwl.rs:4:42\n  |\n4 |     let mut map: HashMap<isize, isize> = HashMap::new();\n  |                                          ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0412, E0433.\nFor more information about an error, try `rustc --explain E0412`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1666122956,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    let mut map: HashMap<isize, isize> = HashMap::new();\n    for i in 0..arr.len() {\n        if map.contains_key(&(sum - arr[i])) {\n            count += map[&(sum - arr[i])];\n        }\n        let entry = map.entry(arr[i]).or_insert(0);\n        *entry += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1666122956,
      "stdout": "",
      "stderr": "error[E0412]: cannot find type `HashMap` in this scope\n --> /tmp/tmp4jcr_f4k.rs:4:18\n  |\n4 |     let mut map: HashMap<isize, isize> = HashMap::new();\n  |                  ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmp4jcr_f4k.rs:4:42\n  |\n4 |     let mut map: HashMap<isize, isize> = HashMap::new();\n  |                                          ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0412, E0433.\nFor more information about an error, try `rustc --explain E0412`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count: isize = 0;\n    let mut set: HashSet<isize> = HashSet::new();\n    for i in arr {\n        let diff = sum - i;\n        if set.contains(&diff) {\n            count += 1;\n        }\n        set.insert(i);\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1666122956,
      "stdout": "",
      "stderr": "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmp7uz5w01k.rs:4:18\n  |\n4 |     let mut set: HashSet<isize> = HashSet::new();\n  |                  ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmp7uz5w01k.rs:4:35\n  |\n4 |     let mut set: HashSet<isize> = HashSet::new();\n  |                                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0412, E0433.\nFor more information about an error, try `rustc --explain E0412`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count: isize = 0;\n    let mut map: HashMap<isize, isize> = HashMap::new();\n    for i in 0..arr.len() {\n        let diff = sum - arr[i];\n        if map.contains_key(&diff) {\n            count += map[&diff];\n        }\n        let val = map.entry(arr[i]).or_insert(0);\n        *val += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1666122956,
      "stdout": "",
      "stderr": "error[E0412]: cannot find type `HashMap` in this scope\n --> /tmp/tmpz067x9ah.rs:4:18\n  |\n4 |     let mut map: HashMap<isize, isize> = HashMap::new();\n  |                  ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmpz067x9ah.rs:4:42\n  |\n4 |     let mut map: HashMap<isize, isize> = HashMap::new();\n  |                                          ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0412, E0433.\nFor more information about an error, try `rustc --explain E0412`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    let mut map: HashMap<isize, isize> = HashMap::new();\n    for i in 0..arr.len() {\n        if map.contains_key(&(sum - arr[i])) {\n            count += 1;\n        }\n        map.insert(arr[i], i as isize);\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1666122956,
      "stdout": "",
      "stderr": "error[E0412]: cannot find type `HashMap` in this scope\n --> /tmp/tmpq25qbder.rs:4:18\n  |\n4 |     let mut map: HashMap<isize, isize> = HashMap::new();\n  |                  ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmpq25qbder.rs:4:42\n  |\n4 |     let mut map: HashMap<isize, isize> = HashMap::new();\n  |                                          ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0412, E0433.\nFor more information about an error, try `rustc --explain E0412`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    let mut map = HashMap::new();\n    for i in 0..arr.len() {\n        if map.contains_key(&(sum - arr[i])) {\n            count += 1;\n        }\n        map.insert(arr[i], i);\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1665510182,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmppp7hyv1z.rs:4:19\n  |\n4 |     let mut map = HashMap::new();\n  |                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    let mut map = HashMap::new();\n    for i in 0..arr.len() {\n        let complement = sum - arr[i];\n        if map.contains_key(&complement) {\n            count += 1;\n        }\n        map.insert(arr[i], i);\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1666122956,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmp_fq49vkl.rs:4:19\n  |\n4 |     let mut map = HashMap::new();\n  |                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    let mut map: HashMap<isize, isize> = HashMap::new();\n    for i in 0..arr.len() {\n        let diff = sum - arr[i];\n        if map.contains_key(&diff) {\n            count += map[&diff];\n        }\n        if map.contains_key(&arr[i]) {\n            map.insert(arr[i], map[&arr[i]] + 1);\n        } else {\n            map.insert(arr[i], 1);\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1666122956,
      "stdout": "",
      "stderr": "error[E0412]: cannot find type `HashMap` in this scope\n --> /tmp/tmphuw_apnf.rs:4:18\n  |\n4 |     let mut map: HashMap<isize, isize> = HashMap::new();\n  |                  ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmphuw_apnf.rs:4:42\n  |\n4 |     let mut map: HashMap<isize, isize> = HashMap::new();\n  |                                          ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0412, E0433.\nFor more information about an error, try `rustc --explain E0412`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    let mut j = arr.len() - 1;\n    while i < j {\n        if arr[i] + arr[j] == sum {\n            count += 1;\n            i += 1;\n            j -= 1;\n        } else if arr[i] + arr[j] < sum {\n            i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1666122956,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `6`', /tmp/tmpgtzre7m9.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in (i + 1)..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1666122956,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    let mut map: HashMap<isize, isize> = HashMap::new();\n    for i in arr {\n        if map.contains_key(&(sum - i)) {\n            count += map[&(sum - i)];\n        }\n        if map.contains_key(&i) {\n            map.insert(i, map[&i] + 1);\n        } else {\n            map.insert(i, 1);\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1666122956,
      "stdout": "",
      "stderr": "error[E0412]: cannot find type `HashMap` in this scope\n --> /tmp/tmp42wgtgyp.rs:4:18\n  |\n4 |     let mut map: HashMap<isize, isize> = HashMap::new();\n  |                  ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmp42wgtgyp.rs:4:42\n  |\n4 |     let mut map: HashMap<isize, isize> = HashMap::new();\n  |                                          ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0412, E0433.\nFor more information about an error, try `rustc --explain E0412`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    let mut hash_map = HashMap::new();\n\n    for i in 0..arr.len() {\n        let diff = sum - arr[i];\n        if hash_map.contains_key(&diff) {\n            count += 1;\n        }\n        hash_map.insert(arr[i], i);\n    }\n\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1666122956,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmpyfgkob3a.rs:4:24\n  |\n4 |     let mut hash_map = HashMap::new();\n  |                        ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    let mut j = arr.len() - 1;\n    while i < j {\n        if arr[i] + arr[j] == sum {\n            count += 1;\n            i += 1;\n            j -= 1;\n        } else if arr[i] + arr[j] > sum {\n            j -= 1;\n        } else {\n            i += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1666122956,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `6`', /tmp/tmphx804opf.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count: isize = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1666122956,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    let mut hash_map: HashMap<isize, isize> = HashMap::new();\n    for i in 0..arr.len() {\n        if hash_map.contains_key(&(sum - arr[i])) {\n            count += 1;\n        }\n        hash_map.insert(arr[i], i as isize);\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1666122956,
      "stdout": "",
      "stderr": "error[E0412]: cannot find type `HashMap` in this scope\n --> /tmp/tmp2j_4_d8e.rs:4:23\n  |\n4 |     let mut hash_map: HashMap<isize, isize> = HashMap::new();\n  |                       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmp2j_4_d8e.rs:4:47\n  |\n4 |     let mut hash_map: HashMap<isize, isize> = HashMap::new();\n  |                                               ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0412, E0433.\nFor more information about an error, try `rustc --explain E0412`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    let mut set = HashSet::new();\n    for i in arr {\n        if set.contains(&(sum - i)) {\n            count += 1;\n        }\n        set.insert(i);\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1666122956,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmpso44_tzc.rs:4:19\n  |\n4 |     let mut set = HashSet::new();\n  |                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    let mut set = HashSet::new();\n    for i in arr {\n        if set.contains(&(sum - i)) {\n            count += 1;\n        }\n        set.insert(i);\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1666122956,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmpso44_tzc.rs:4:19\n  |\n4 |     let mut set = HashSet::new();\n  |                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    let mut j = arr.len() - 1;\n    while i < j {\n        if arr[i] + arr[j] == sum {\n            count += 1;\n            i += 1;\n            j -= 1;\n        } else if arr[i] + arr[j] < sum {\n            i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1666122956,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `6`', /tmp/tmpgtzre7m9.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    let mut set = HashSet::new();\n    for i in 0..arr.len() {\n        let diff = sum - arr[i];\n        if set.contains(&diff) {\n            count += 1;\n        }\n        set.insert(arr[i]);\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1666122956,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmpvqnfceux.rs:4:19\n  |\n4 |     let mut set = HashSet::new();\n  |                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    let mut map = HashMap::new();\n    for i in 0..arr.len() {\n        if map.contains_key(&(sum - arr[i])) {\n            count += 1;\n        }\n        map.insert(arr[i], i);\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1665510182,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmppp7hyv1z.rs:4:19\n  |\n4 |     let mut map = HashMap::new();\n  |                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    let mut map = HashMap::new();\n    for i in arr {\n        let diff = sum - i;\n        if map.contains_key(&diff) {\n            count += 1;\n        }\n        map.insert(i, 1);\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1666122956,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmp45t7rcks.rs:4:19\n  |\n4 |     let mut map = HashMap::new();\n  |                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    let mut map = HashMap::new();\n    for i in 0..arr.len() {\n        let diff = sum - arr[i];\n        if map.contains_key(&diff) {\n            count += 1;\n        }\n        map.insert(arr[i], i);\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1665510182,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmphxgz7fbt.rs:4:19\n  |\n4 |     let mut map = HashMap::new();\n  |                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    let mut map = HashMap::new();\n    for i in arr {\n        let diff = sum - i;\n        if map.contains_key(&diff) {\n            count += 1;\n        }\n        map.insert(i, 1);\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1666122956,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmp45t7rcks.rs:4:19\n  |\n4 |     let mut map = HashMap::new();\n  |                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    let mut j = arr.len() - 1;\n    while i < j {\n        if arr[i] + arr[j] == sum {\n            count += 1;\n            i += 1;\n            j -= 1;\n        } else if arr[i] + arr[j] < sum {\n            i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1666122956,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `6`', /tmp/tmpgtzre7m9.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    let mut map = HashMap::new();\n    for i in arr {\n        if map.contains_key(&(sum - i)) {\n            count += 1;\n        }\n        map.insert(i, 1);\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1666122956,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmpzprtwjez.rs:4:19\n  |\n4 |     let mut map = HashMap::new();\n  |                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    let mut map = HashMap::new();\n    for i in 0..arr.len() {\n        if map.contains_key(&(sum - arr[i])) {\n            count += 1;\n        }\n        map.insert(arr[i], i);\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1665510182,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmppp7hyv1z.rs:4:19\n  |\n4 |     let mut map = HashMap::new();\n  |                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    let mut map: HashMap<isize, isize> = HashMap::new();\n    for i in 0..arr.len() {\n        let diff = sum - arr[i];\n        if map.contains_key(&diff) {\n            count += map[&diff];\n        }\n        if map.contains_key(&arr[i]) {\n            map.insert(arr[i], map[&arr[i]] + 1);\n        } else {\n            map.insert(arr[i], 1);\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1666122956,
      "stdout": "",
      "stderr": "error[E0412]: cannot find type `HashMap` in this scope\n --> /tmp/tmphuw_apnf.rs:4:18\n  |\n4 |     let mut map: HashMap<isize, isize> = HashMap::new();\n  |                  ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmphuw_apnf.rs:4:42\n  |\n4 |     let mut map: HashMap<isize, isize> = HashMap::new();\n  |                                          ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0412, E0433.\nFor more information about an error, try `rustc --explain E0412`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    let mut map: HashMap<isize, isize> = HashMap::new();\n\n    for i in 0..arr.len() {\n        if map.contains_key(&(sum - arr[i])) {\n            count += map[&(sum - arr[i])];\n        }\n        if map.contains_key(&arr[i]) {\n            map.insert(arr[i], map[&arr[i]] + 1);\n        } else {\n            map.insert(arr[i], 1);\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1666122956,
      "stdout": "",
      "stderr": "error[E0412]: cannot find type `HashMap` in this scope\n --> /tmp/tmp0irxe3tg.rs:4:18\n  |\n4 |     let mut map: HashMap<isize, isize> = HashMap::new();\n  |                  ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmp0irxe3tg.rs:4:42\n  |\n4 |     let mut map: HashMap<isize, isize> = HashMap::new();\n  |                                          ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0412, E0433.\nFor more information about an error, try `rustc --explain E0412`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    let mut map = HashMap::new();\n    for i in arr {\n        if map.contains_key(&(sum - i)) {\n            count += 1;\n        }\n        map.insert(i, 1);\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1666122956,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmpzprtwjez.rs:4:19\n  |\n4 |     let mut map = HashMap::new();\n  |                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    let mut map = HashMap::new();\n    for i in 0..arr.len() {\n        if map.contains_key(&(sum - arr[i])) {\n            count += 1;\n        }\n        map.insert(arr[i], i);\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1665510182,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmppp7hyv1z.rs:4:19\n  |\n4 |     let mut map = HashMap::new();\n  |                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    let mut map = HashMap::new();\n    for i in 0..arr.len() {\n        if map.contains_key(&(sum - arr[i])) {\n            count += 1;\n        }\n        map.insert(arr[i], i);\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1665510182,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmppp7hyv1z.rs:4:19\n  |\n4 |     let mut map = HashMap::new();\n  |                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    let mut map: HashMap<isize, isize> = HashMap::new();\n    for i in 0..arr.len() {\n        let diff = sum - arr[i];\n        if map.contains_key(&diff) {\n            count += map[&diff];\n        }\n        map.entry(arr[i]).and_modify(|e| *e += 1).or_insert(1);\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1666122956,
      "stdout": "",
      "stderr": "error[E0412]: cannot find type `HashMap` in this scope\n --> /tmp/tmps7xr84de.rs:4:18\n  |\n4 |     let mut map: HashMap<isize, isize> = HashMap::new();\n  |                  ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmps7xr84de.rs:4:42\n  |\n4 |     let mut map: HashMap<isize, isize> = HashMap::new();\n  |                                          ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0412, E0433.\nFor more information about an error, try `rustc --explain E0412`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    let mut set = HashSet::new();\n    for i in arr {\n        if set.contains(&(sum - i)) {\n            count += 1;\n        }\n        set.insert(i);\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1666122956,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmpso44_tzc.rs:4:19\n  |\n4 |     let mut set = HashSet::new();\n  |                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1666122956,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `10`,\n right: `6`', /tmp/tmprsymtrqh.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    let mut map = HashMap::new();\n    for i in 0..arr.len() {\n        if map.contains_key(&(sum - arr[i])) {\n            count += map[&(sum - arr[i])];\n        }\n        if map.contains_key(&arr[i]) {\n            map.insert(arr[i], map[&arr[i]] + 1);\n        } else {\n            map.insert(arr[i], 1);\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1666122956,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmpbzqw8lz4.rs:4:19\n  |\n4 |     let mut map = HashMap::new();\n  |                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    let mut map: HashMap<isize, isize> = HashMap::new();\n    for i in 0..arr.len() {\n        if map.contains_key(&(sum - arr[i])) {\n            count += 1;\n        }\n        map.insert(arr[i], i as isize);\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1666122956,
      "stdout": "",
      "stderr": "error[E0412]: cannot find type `HashMap` in this scope\n --> /tmp/tmpq25qbder.rs:4:18\n  |\n4 |     let mut map: HashMap<isize, isize> = HashMap::new();\n  |                  ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmpq25qbder.rs:4:42\n  |\n4 |     let mut map: HashMap<isize, isize> = HashMap::new();\n  |                                          ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0412, E0433.\nFor more information about an error, try `rustc --explain E0412`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    let mut set = HashSet::new();\n    for i in arr {\n        if set.contains(&(sum - i)) {\n            count += 1;\n        }\n        set.insert(i);\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1666122956,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmpso44_tzc.rs:4:19\n  |\n4 |     let mut set = HashSet::new();\n  |                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    let mut i = 0;\n    let mut j = arr.len() - 1;\n    while i < j {\n        if arr[i] + arr[j] == sum {\n            count += 1;\n            i += 1;\n            j -= 1;\n        } else if arr[i] + arr[j] < sum {\n            i += 1;\n        } else {\n            j -= 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1666122956,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `6`', /tmp/tmpgtzre7m9.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    let mut map = HashMap::new();\n    for i in arr {\n        if map.contains_key(&(sum - i)) {\n            count += map[&(sum - i)];\n        }\n        if map.contains_key(&i) {\n            map.insert(i, map[&i] + 1);\n        } else {\n            map.insert(i, 1);\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1666122956,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmp1b4b5p53.rs:4:19\n  |\n4 |     let mut map = HashMap::new();\n  |                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}