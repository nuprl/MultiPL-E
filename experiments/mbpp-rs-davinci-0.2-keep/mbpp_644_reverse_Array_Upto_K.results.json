{
  "name": "mbpp_644_reverse_Array_Upto_K",
  "language": "rs",
  "prompt": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_644_reverse_Array_Upto_K.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output: Vec<isize> = Vec::new();\n    for i in 0..k {\n        output.push(input[k - i - 1]);\n    }\n    for i in k..input.len() {\n        output.push(input[i]);\n    }\n    return output;\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp3yy90zmw.rs:5:21\n  |\n5 |         output.push(input[k - i - 1]);\n  |                     ^^^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0308]: mismatched types\n --> /tmp/tmp3yy90zmw.rs:7:17\n  |\n7 |     for i in k..input.len() {\n  |                 ^^^^^^^^^^^ expected `isize`, found `usize`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp3yy90zmw.rs:8:21\n  |\n8 |         output.push(input[i]);\n  |                     ^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input;\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        let temp = output[i as usize];\n        output[i as usize] = output[j as usize];\n        output[j as usize] = temp;\n        i += 1;\n        j -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmpwz54yrw2.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input.clone();\n    for i in 0..k {\n        let temp = output[i as usize];\n        output[i as usize] = output[(input.len() - 1 - i as usize)];\n        output[(input.len() - 1 - i as usize)] = temp;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[6, 5, 3, 4, 2, 1]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmpmwl1y2hg.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input.clone();\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        let temp = output[i as usize];\n        output[i as usize] = output[j as usize];\n        output[j as usize] = temp;\n        i += 1;\n        j -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmpmx5vh2pv.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    let mut i: isize = 0;\n    while i < k {\n        result.push(input[(input.len() - 1 - i as usize) as usize]);\n        i += 1;\n    }\n    while i < input.len() as isize {\n        result.push(input[i as usize]);\n        i += 1;\n    }\n    return result;\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[6, 5, 4, 3, 5, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmpafbpqg2n.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input.clone();\n    for i in 0..k {\n        output[i as usize] = input[(k - i - 1) as usize];\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input.clone();\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        output.swap(i as usize, j as usize);\n        i += 1;\n        j -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmp66o060r5.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output: Vec<isize> = input.clone();\n    let mut i: isize = 0;\n    let mut j: isize = k;\n    while i < j {\n        let temp = output[i as usize];\n        output[i as usize] = output[j as usize];\n        output[j as usize] = temp;\n        i += 1;\n        j -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmpadpovk2z.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    let mut i = 0;\n    while i < k {\n        result.push(input[k as usize - i as usize - 1]);\n        i += 1;\n    }\n    while i < input.len() as isize {\n        result.push(input[i as usize]);\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut input = input;\n    let mut i = 0;\n    let mut j = k - 1;\n    while i < j {\n        let temp = input[i as usize];\n        input[i as usize] = input[j as usize];\n        input[j as usize] = temp;\n        i += 1;\n        j -= 1;\n    }\n    input\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut input = input;\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        let temp = input[i as usize];\n        input[i as usize] = input[j as usize];\n        input[j as usize] = temp;\n        i += 1;\n        j -= 1;\n    }\n    input\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmphbouwy_n.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output: Vec<isize> = Vec::new();\n    let mut i = 0;\n    while i < k {\n        output.push(input[input.len() - 1 - i as usize]);\n        i += 1;\n    }\n    while i < input.len() as isize {\n        output.push(input[i as usize - k as usize]);\n        i += 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[6, 5, 4, 3, 1, 2]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmpvw8zmng4.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input.clone();\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        let temp = output[i as usize];\n        output[i as usize] = output[j as usize];\n        output[j as usize] = temp;\n        i += 1;\n        j -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmpmx5vh2pv.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input.clone();\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        let temp = output[i as usize];\n        output[i as usize] = output[j as usize];\n        output[j as usize] = temp;\n        i += 1;\n        j -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmpmx5vh2pv.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut result = input.clone();\n    let mut i = 0;\n    while i < k {\n        let temp = result[i];\n        result[i] = result[k - i - 1];\n        result[k - i - 1] = temp;\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmpn_jiida5.rs:6:20\n  |\n6 |         let temp = result[i];\n  |                    ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmpn_jiida5.rs:7:9\n  |\n7 |         result[i] = result[k - i - 1];\n  |         ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmpn_jiida5.rs:7:21\n  |\n7 |         result[i] = result[k - i - 1];\n  |                     ^^^^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmpn_jiida5.rs:8:9\n  |\n8 |         result[k - i - 1] = temp;\n  |         ^^^^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input.clone();\n    let mut i = 0;\n    let mut j = k - 1;\n    while i < j {\n        output.swap(i as usize, j as usize);\n        i += 1;\n        j -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut result = input.clone();\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        let temp = result[i as usize];\n        result[i as usize] = result[j as usize];\n        result[j as usize] = temp;\n        i += 1;\n        j -= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmpreukwtck.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output: Vec<isize> = input.clone();\n    let mut i = 0;\n    let mut j = k - 1;\n    while i < j {\n        let temp = output[i as usize];\n        output[i as usize] = output[j as usize];\n        output[j as usize] = temp;\n        i += 1;\n        j -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input.clone();\n    for i in 0..k {\n        output[i as usize] = input[(k - i - 1) as usize];\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input.clone();\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        output.swap(i as usize, j as usize);\n        i += 1;\n        j -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmp66o060r5.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut input = input;\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        input.swap(i as usize, j as usize);\n        i += 1;\n        j -= 1;\n    }\n    input\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123638,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmpeno8nw70.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input.clone();\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        let temp = output[i as usize];\n        output[i as usize] = output[j as usize];\n        output[j as usize] = temp;\n        i += 1;\n        j -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmpmx5vh2pv.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output: Vec<isize> = Vec::new();\n    let mut i: isize = 0;\n    while i < k {\n        output.push(input[(k - i - 1) as usize]);\n        i += 1;\n    }\n    while i < input.len() as isize {\n        output.push(input[i as usize]);\n        i += 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123638,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input.clone();\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        let temp = output[i as usize];\n        output[i as usize] = output[j as usize];\n        output[j as usize] = temp;\n        i += 1;\n        j -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmpmx5vh2pv.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input.clone();\n    for i in 0..k {\n        output[i as usize] = input[(k - i - 1) as usize];\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut input = input;\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        let temp = input[i as usize];\n        input[i as usize] = input[j as usize];\n        input[j as usize] = temp;\n        i += 1;\n        j -= 1;\n    }\n    input\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmphbouwy_n.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input.clone();\n    let mut i = 0;\n    let mut j = k - 1;\n    while i < j {\n        let temp = output[i as usize];\n        output[i as usize] = output[j as usize];\n        output[j as usize] = temp;\n        i += 1;\n        j -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123638,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input.clone();\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        output.swap(i as usize, j as usize);\n        i += 1;\n        j -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmp66o060r5.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input.clone();\n    let mut i = 0;\n    let mut j = k - 1;\n    while i < j {\n        let temp = output[i as usize];\n        output[i as usize] = output[j as usize];\n        output[j as usize] = temp;\n        i += 1;\n        j -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123638,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output: Vec<isize> = Vec::new();\n    let mut i = 0;\n    while i < k {\n        output.push(input[k as usize - i as usize - 1]);\n        i += 1;\n    }\n    while i < input.len() as isize {\n        output.push(input[i as usize]);\n        i += 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123638,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input.clone();\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        output.swap(i as usize, j as usize);\n        i += 1;\n        j -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmp66o060r5.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input.clone();\n    let mut i = 0;\n    let mut j = k - 1;\n    while i < j {\n        let temp = output[i as usize];\n        output[i as usize] = output[j as usize];\n        output[j as usize] = temp;\n        i += 1;\n        j -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123638,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    let mut i = 0;\n    while i < k {\n        result.push(input[k as usize - i as usize - 1]);\n        i += 1;\n    }\n    while i < input.len() as isize {\n        result.push(input[i as usize]);\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input.clone();\n    for i in 0..k {\n        output[i as usize] = input[(k - i - 1) as usize];\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input.clone();\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        let temp = output[i as usize];\n        output[i as usize] = output[j as usize];\n        output[j as usize] = temp;\n        i += 1;\n        j -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmpmx5vh2pv.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output: Vec<isize> = Vec::new();\n    let mut i: isize = 0;\n    while i < k {\n        output.push(input[k as usize - i as usize - 1]);\n        i += 1;\n    }\n    while i < input.len() as isize {\n        output.push(input[i as usize]);\n        i += 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123638,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input.clone();\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        let temp = output[i as usize];\n        output[i as usize] = output[j as usize];\n        output[j as usize] = temp;\n        i += 1;\n        j -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmpmx5vh2pv.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output: Vec<isize> = Vec::new();\n    let mut i: isize = 0;\n    while i < k {\n        output.push(input[(k - i - 1) as usize]);\n        i += 1;\n    }\n    while i < input.len() as isize {\n        output.push(input[i as usize]);\n        i += 1;\n    }\n    return output;\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123638,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input.clone();\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        let temp = output[i as usize];\n        output[i as usize] = output[j as usize];\n        output[j as usize] = temp;\n        i += 1;\n        j -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmpmx5vh2pv.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input.clone();\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        output.swap(i as usize, j as usize);\n        i += 1;\n        j -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmp66o060r5.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut input = input;\n    let mut start = 0;\n    let mut end = k;\n    while start < end {\n        let temp = input[start as usize];\n        input[start as usize] = input[end as usize];\n        input[end as usize] = temp;\n        start += 1;\n        end -= 1;\n    }\n    input\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123638,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmp58006d40.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut input = input;\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        let temp = input[i as usize];\n        input[i as usize] = input[j as usize];\n        input[j as usize] = temp;\n        i += 1;\n        j -= 1;\n    }\n    input\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmphbouwy_n.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input.clone();\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        output.swap(i as usize, j as usize);\n        i += 1;\n        j -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmp66o060r5.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input.clone();\n    for i in 0..k {\n        output[i as usize] = input[(k - i - 1) as usize];\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output: Vec<isize> = input.clone();\n    for i in 0..k {\n        output[i as usize] = input[(k - i - 1) as usize];\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123638,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input.clone();\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        let temp = output[i as usize];\n        output[i as usize] = output[j as usize];\n        output[j as usize] = temp;\n        i += 1;\n        j -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmpmx5vh2pv.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output: Vec<isize> = Vec::new();\n    let mut i: isize = 0;\n    while i < k {\n        output.push(input[(k - i - 1) as usize]);\n        i += 1;\n    }\n    while i < input.len() as isize {\n        output.push(input[i as usize]);\n        i += 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123638,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output: Vec<isize> = Vec::new();\n    for i in 0..k {\n        output.push(input[k - i - 1]);\n    }\n    for i in k..input.len() {\n        output.push(input[i]);\n    }\n    return output;\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp3yy90zmw.rs:5:21\n  |\n5 |         output.push(input[k - i - 1]);\n  |                     ^^^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0308]: mismatched types\n --> /tmp/tmp3yy90zmw.rs:7:17\n  |\n7 |     for i in k..input.len() {\n  |                 ^^^^^^^^^^^ expected `isize`, found `usize`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp3yy90zmw.rs:8:21\n  |\n8 |         output.push(input[i]);\n  |                     ^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output: Vec<isize> = Vec::new();\n    let mut i = 0;\n    while i < k {\n        output.push(input[k as usize - i as usize - 1]);\n        i += 1;\n    }\n    while i < input.len() as isize {\n        output.push(input[i as usize]);\n        i += 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123638,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input.clone();\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        output.swap(i as usize, j as usize);\n        i += 1;\n        j -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmp66o060r5.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input.clone();\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        let temp = output[i as usize];\n        output[i as usize] = output[j as usize];\n        output[j as usize] = temp;\n        i += 1;\n        j -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmpmx5vh2pv.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut input = input;\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        let temp = input[i as usize];\n        input[i as usize] = input[j as usize];\n        input[j as usize] = temp;\n        i += 1;\n        j -= 1;\n    }\n    input\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmphbouwy_n.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input.clone();\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        let temp = output[i as usize];\n        output[i as usize] = output[j as usize];\n        output[j as usize] = temp;\n        i += 1;\n        j -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmpmx5vh2pv.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output: Vec<isize> = Vec::new();\n    for i in 0..k {\n        output.push(input[(k - 1 - i) as usize]);\n    }\n    for i in k..input.len() as isize {\n        output.push(input[i as usize]);\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123638,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input.clone();\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        let temp = output[i as usize];\n        output[i as usize] = output[j as usize];\n        output[j as usize] = temp;\n        i += 1;\n        j -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmpmx5vh2pv.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut input = input;\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        let temp = input[i as usize];\n        input[i as usize] = input[j as usize];\n        input[j as usize] = temp;\n        i += 1;\n        j -= 1;\n    }\n    input\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmphbouwy_n.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input.clone();\n    let mut start = 0;\n    let mut end = k;\n    while start < end {\n        output.swap(start as usize, end as usize);\n        start += 1;\n        end -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123638,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmp6t54s2u6.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    for i in 0..k {\n        result.push(input[k - i - 1]);\n    }\n    for i in k..input.len() {\n        result.push(input[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123637,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp4jqhomxj.rs:5:21\n  |\n5 |         result.push(input[k - i - 1]);\n  |                     ^^^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0308]: mismatched types\n --> /tmp/tmp4jqhomxj.rs:7:17\n  |\n7 |     for i in k..input.len() {\n  |                 ^^^^^^^^^^^ expected `isize`, found `usize`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp4jqhomxj.rs:8:21\n  |\n8 |         result.push(input[i]);\n  |                     ^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut input = input;\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        let temp = input[i as usize];\n        input[i as usize] = input[j as usize];\n        input[j as usize] = temp;\n        i += 1;\n        j -= 1;\n    }\n    input\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmphbouwy_n.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output: Vec<isize> = Vec::new();\n    let mut i = 0;\n    let mut j = k;\n    while i < k {\n        output.push(input[j as usize]);\n        i += 1;\n        j -= 1;\n    }\n    while j < input.len() as isize {\n        output.push(input[j as usize]);\n        j += 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123638,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 2, 3, 4, 5, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmpaj551dv6.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input.clone();\n    let mut i = 0;\n    let mut j = k - 1;\n    while i < j {\n        output.swap(i as usize, j as usize);\n        i += 1;\n        j -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input.clone();\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        output.swap(i as usize, j as usize);\n        i += 1;\n        j -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmp66o060r5.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input.clone();\n    let mut i = 0;\n    while i < k {\n        let temp = output[i];\n        output[i] = output[k as usize];\n        output[k as usize] = temp;\n        i += 1;\n        k -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123637,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp55utzs5a.rs:6:20\n  |\n6 |         let temp = output[i];\n  |                    ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp55utzs5a.rs:7:9\n  |\n7 |         output[i] = output[k as usize];\n  |         ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input.clone();\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        let temp = output[i as usize];\n        output[i as usize] = output[j as usize];\n        output[j as usize] = temp;\n        i += 1;\n        j -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmpmx5vh2pv.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input.clone();\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        output.swap(i as usize, j as usize);\n        i += 1;\n        j -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmp66o060r5.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input.clone();\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        output.swap(i as usize, j as usize);\n        i += 1;\n        j -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmp66o060r5.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input.clone();\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        output.swap(i as usize, j as usize);\n        i += 1;\n        j -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmp66o060r5.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input.clone();\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        let temp = output[i as usize];\n        output[i as usize] = output[j as usize];\n        output[j as usize] = temp;\n        i += 1;\n        j -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmpmx5vh2pv.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input.clone();\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        output.swap(i as usize, j as usize);\n        i += 1;\n        j -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmp66o060r5.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input.clone();\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        output.swap(i as usize, j as usize);\n        i += 1;\n        j -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmp66o060r5.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input.clone();\n    let mut i = 0;\n    let mut j = k - 1;\n    while i < j {\n        output.swap(i as usize, j as usize);\n        i += 1;\n        j -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input.clone();\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        let temp = output[i as usize];\n        output[i as usize] = output[j as usize];\n        output[j as usize] = temp;\n        i += 1;\n        j -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmpmx5vh2pv.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input.clone();\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        let temp = output[i as usize];\n        output[i as usize] = output[j as usize];\n        output[j as usize] = temp;\n        i += 1;\n        j -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmpmx5vh2pv.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut input = input;\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        input.swap(i as usize, j as usize);\n        i += 1;\n        j -= 1;\n    }\n    input\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123638,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmpeno8nw70.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input.clone();\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        output.swap(i as usize, j as usize);\n        i += 1;\n        j -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmp66o060r5.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output: Vec<isize> = Vec::new();\n    for i in 0..k {\n        output.push(input[k - i - 1]);\n    }\n    for i in k..input.len() {\n        output.push(input[i]);\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123637,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp5hpozvt4.rs:5:21\n  |\n5 |         output.push(input[k - i - 1]);\n  |                     ^^^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0308]: mismatched types\n --> /tmp/tmp5hpozvt4.rs:7:17\n  |\n7 |     for i in k..input.len() {\n  |                 ^^^^^^^^^^^ expected `isize`, found `usize`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp5hpozvt4.rs:8:21\n  |\n8 |         output.push(input[i]);\n  |                     ^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output: Vec<isize> = Vec::new();\n    let mut i = 0;\n    while i < k {\n        output.push(input[k as usize - i as usize - 1]);\n        i += 1;\n    }\n    while i < input.len() as isize {\n        output.push(input[i as usize]);\n        i += 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123638,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input.clone();\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        output.swap(i as usize, j as usize);\n        i += 1;\n        j -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmp66o060r5.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut result = input.clone();\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        result.swap(i as usize, j as usize);\n        i += 1;\n        j -= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123638,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmp93jbmipr.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input.clone();\n    let mut i = 0;\n    let mut j = k - 1;\n    while i < j {\n        output.swap(i as usize, j as usize);\n        i += 1;\n        j -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input.clone();\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        output.swap(i as usize, j as usize);\n        i += 1;\n        j -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmp66o060r5.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input.clone();\n    for i in 0..k {\n        output[i as usize] = input[(k - i - 1) as usize];\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input.clone();\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        output.swap(i as usize, j as usize);\n        i += 1;\n        j -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmp66o060r5.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input.clone();\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        output.swap(i as usize, j as usize);\n        i += 1;\n        j -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmp66o060r5.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input.clone();\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        let temp = output[i as usize];\n        output[i as usize] = output[j as usize];\n        output[j as usize] = temp;\n        i += 1;\n        j -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmpmx5vh2pv.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    let mut i = 0;\n    while i < k {\n        result.push(input[k as usize - i as usize - 1]);\n        i += 1;\n    }\n    while i < input.len() as isize {\n        result.push(input[i as usize]);\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input.clone();\n    let mut i = 0;\n    let mut j = k - 1;\n    while i < j {\n        let temp = output[i as usize];\n        output[i as usize] = output[j as usize];\n        output[j as usize] = temp;\n        i += 1;\n        j -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123638,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output: Vec<isize> = Vec::new();\n    for i in 0..k {\n        output.push(input[(k - i - 1) as usize]);\n    }\n    for i in k..input.len() as isize {\n        output.push(input[i as usize]);\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123638,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input.clone();\n    for i in 0..k {\n        output[i as usize] = input[k as usize - i as usize - 1];\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123638,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output: Vec<isize> = Vec::new();\n    for i in 0..k {\n        output.push(input[k as usize - 1 - i as usize]);\n    }\n    for i in k..input.len() as isize {\n        output.push(input[i as usize]);\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123638,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input.clone();\n    let mut i = 0;\n    let mut j = k - 1;\n    while i < j {\n        let temp = output[i as usize];\n        output[i as usize] = output[j as usize];\n        output[j as usize] = temp;\n        i += 1;\n        j -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123638,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input.clone();\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        let temp = output[i as usize];\n        output[i as usize] = output[j as usize];\n        output[j as usize] = temp;\n        i += 1;\n        j -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmpmx5vh2pv.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output: Vec<isize> = Vec::new();\n    let mut i: isize = 0;\n    while i < k {\n        output.push(input[(k - i - 1) as usize]);\n        i += 1;\n    }\n    while i < input.len() as isize {\n        output.push(input[i as usize]);\n        i += 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123638,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input.clone();\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        let temp = output[i as usize];\n        output[i as usize] = output[j as usize];\n        output[j as usize] = temp;\n        i += 1;\n        j -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmpmx5vh2pv.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output: Vec<isize> = input.clone();\n    let mut i: isize = 0;\n    let mut j: isize = k - 1;\n    while i < j {\n        let temp = output[i as usize];\n        output[i as usize] = output[j as usize];\n        output[j as usize] = temp;\n        i += 1;\n        j -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123638,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input.clone();\n    let mut i = 0;\n    while i < k {\n        let temp = output[i];\n        output[i] = output[k - i - 1];\n        output[k - i - 1] = temp;\n        i += 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123637,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmpdtk3a7b3.rs:6:20\n  |\n6 |         let temp = output[i];\n  |                    ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmpdtk3a7b3.rs:7:9\n  |\n7 |         output[i] = output[k - i - 1];\n  |         ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmpdtk3a7b3.rs:7:21\n  |\n7 |         output[i] = output[k - i - 1];\n  |                     ^^^^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmpdtk3a7b3.rs:8:9\n  |\n8 |         output[k - i - 1] = temp;\n  |         ^^^^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut input = input;\n    let mut start = 0;\n    let mut end = k;\n    while start < end {\n        let temp = input[start as usize];\n        input[start as usize] = input[end as usize];\n        input[end as usize] = temp;\n        start += 1;\n        end -= 1;\n    }\n    input\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123638,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmp58006d40.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input.clone();\n    let mut i = 0;\n    while i < k {\n        let temp = output[i as usize];\n        output[i as usize] = output[k as usize];\n        output[k as usize] = temp;\n        i += 1;\n        k -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123637,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign to immutable argument `k`\n  --> /tmp/tmpov7lucd7.rs:10:9\n   |\n2  | fn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n   |                                            - help: consider making this binding mutable: `mut k`\n...\n10 |         k -= 1;\n   |         ^^^^^^ cannot assign to immutable argument\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input;\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        let temp = output[i as usize];\n        output[i as usize] = output[j as usize];\n        output[j as usize] = temp;\n        i += 1;\n        j -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmpwz54yrw2.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output: Vec<isize> = input.clone();\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        output.swap(i as usize, j as usize);\n        i += 1;\n        j -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123638,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmp313gvrod.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output: Vec<isize> = Vec::new();\n    let mut i = 0;\n    while i < k {\n        output.push(input[k as usize - i as usize - 1]);\n        i += 1;\n    }\n    while i < input.len() as isize {\n        output.push(input[i as usize]);\n        i += 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123638,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input.clone();\n    let mut i = 0;\n    let mut j = k - 1;\n    while i < j {\n        let temp = output[i as usize];\n        output[i as usize] = output[j as usize];\n        output[j as usize] = temp;\n        i += 1;\n        j -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123638,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut result = input.clone();\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        let temp = result[i as usize];\n        result[i as usize] = result[j as usize];\n        result[j as usize] = temp;\n        i += 1;\n        j -= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmpreukwtck.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input.clone();\n    let mut i = 0;\n    let mut j = k - 1;\n    while i < j {\n        output.swap(i as usize, j as usize);\n        i += 1;\n        j -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input.clone();\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        output.swap(i as usize, j as usize);\n        i += 1;\n        j -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmp66o060r5.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input.clone();\n    let mut i = 0;\n    let mut j = k - 1;\n    while i < j {\n        output.swap(i as usize, j as usize);\n        i += 1;\n        j -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input.clone();\n    let mut i = 0;\n    let mut j = k as usize;\n    while i < j {\n        let temp = output[i];\n        output[i] = output[j];\n        output[j] = temp;\n        i += 1;\n        j -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123638,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmp1fqemx68.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input.clone();\n    for i in 0..k {\n        output[i as usize] = input[(k - i - 1) as usize];\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output: Vec<isize> = input.clone();\n    for i in 0..k {\n        output[i as usize] = input[(k - i - 1) as usize];\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123638,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output: Vec<isize> = Vec::new();\n    let mut i = 0;\n    while i < k {\n        output.push(input[k as usize - i as usize - 1]);\n        i += 1;\n    }\n    while i < input.len() as isize {\n        output.push(input[i as usize]);\n        i += 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123638,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output: Vec<isize> = input.clone();\n    let mut i: isize = 0;\n    while i < k {\n        output[i as usize] = input[k as usize - i as usize - 1];\n        i += 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123638,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output: Vec<isize> = Vec::new();\n    for i in 0..k {\n        output.push(input[(k - i - 1) as usize]);\n    }\n    for i in k..input.len() as isize {\n        output.push(input[i as usize]);\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123638,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input.clone();\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        output.swap(i as usize, j as usize);\n        i += 1;\n        j -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmp66o060r5.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input;\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        let temp = output[i as usize];\n        output[i as usize] = output[j as usize];\n        output[j as usize] = temp;\n        i += 1;\n        j -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmpwz54yrw2.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output: Vec<isize> = Vec::new();\n    for i in 0..k {\n        output.push(input[k - i - 1]);\n    }\n    for i in k..input.len() {\n        output.push(input[i]);\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123637,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp5hpozvt4.rs:5:21\n  |\n5 |         output.push(input[k - i - 1]);\n  |                     ^^^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0308]: mismatched types\n --> /tmp/tmp5hpozvt4.rs:7:17\n  |\n7 |     for i in k..input.len() {\n  |                 ^^^^^^^^^^^ expected `isize`, found `usize`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp5hpozvt4.rs:8:21\n  |\n8 |         output.push(input[i]);\n  |                     ^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output: Vec<isize> = Vec::new();\n    for i in 0..k {\n        output.push(input[(k - i - 1) as usize]);\n    }\n    for i in k..input.len() as isize {\n        output.push(input[i as usize]);\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123638,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output: Vec<isize> = Vec::new();\n    let mut i: isize = 0;\n    while i < k {\n        output.push(input[k as usize - i as usize - 1]);\n        i += 1;\n    }\n    while i < input.len() as isize {\n        output.push(input[i as usize]);\n        i += 1;\n    }\n    return output;\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123638,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input.clone();\n    for i in 0..k {\n        output[i as usize] = input[(k - 1 - i) as usize];\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123638,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output: Vec<isize> = Vec::new();\n    for i in 0..k {\n        output.push(input[k - i - 1]);\n    }\n    for i in k..input.len() {\n        output.push(input[i]);\n    }\n    return output;\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp3yy90zmw.rs:5:21\n  |\n5 |         output.push(input[k - i - 1]);\n  |                     ^^^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0308]: mismatched types\n --> /tmp/tmp3yy90zmw.rs:7:17\n  |\n7 |     for i in k..input.len() {\n  |                 ^^^^^^^^^^^ expected `isize`, found `usize`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp3yy90zmw.rs:8:21\n  |\n8 |         output.push(input[i]);\n  |                     ^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output: Vec<isize> = input.clone();\n    let mut i: isize = 0;\n    while i < k {\n        let temp: isize = output[i as usize];\n        output[i as usize] = output[(k - i - 1) as usize];\n        output[(k - i - 1) as usize] = temp;\n        i += 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123638,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmpn4_c_x6q.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output: Vec<isize> = Vec::new();\n    for i in 0..k {\n        output.push(input[k - i - 1]);\n    }\n    for i in k..input.len() {\n        output.push(input[i]);\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123637,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp5hpozvt4.rs:5:21\n  |\n5 |         output.push(input[k - i - 1]);\n  |                     ^^^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0308]: mismatched types\n --> /tmp/tmp5hpozvt4.rs:7:17\n  |\n7 |     for i in k..input.len() {\n  |                 ^^^^^^^^^^^ expected `isize`, found `usize`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp5hpozvt4.rs:8:21\n  |\n8 |         output.push(input[i]);\n  |                     ^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut input = input;\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        let temp = input[i as usize];\n        input[i as usize] = input[j as usize];\n        input[j as usize] = temp;\n        i += 1;\n        j -= 1;\n    }\n    input\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmphbouwy_n.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input.clone();\n    let mut i = 0;\n    let mut j = k - 1;\n    while i < j {\n        let temp = output[i as usize];\n        output[i as usize] = output[j as usize];\n        output[j as usize] = temp;\n        i += 1;\n        j -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123638,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output: Vec<isize> = Vec::new();\n    let mut i = 0;\n    let mut j = k;\n    while j > 0 {\n        output.push(input[j as usize]);\n        j -= 1;\n    }\n    while i < k {\n        output.push(input[i as usize]);\n        i += 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123638,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 2, 3, 4]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmpsb6_i3es.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input;\n    let mut start = 0;\n    let mut end = k;\n    while end < input.len() as isize {\n        output = reverse_Array(output, start, end);\n        start = end + 1;\n        end = start + k;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123638,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `reverse_Array` in this scope\n --> /tmp/tmp_vowmkmp.rs:7:18\n  |\n7 |         output = reverse_Array(output, start, end);\n  |                  ^^^^^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input.clone();\n    let mut i = 0;\n    let mut j = k - 1;\n    while i < j {\n        let temp = output[i as usize];\n        output[i as usize] = output[j as usize];\n        output[j as usize] = temp;\n        i += 1;\n        j -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123638,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output: Vec<isize> = Vec::new();\n    let mut i = 0;\n    while i < k {\n        output.push(input[k as usize - i as usize - 1]);\n        i += 1;\n    }\n    while i < input.len() as isize {\n        output.push(input[i as usize]);\n        i += 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123638,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input.clone();\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        let temp = output[i as usize];\n        output[i as usize] = output[j as usize];\n        output[j as usize] = temp;\n        i += 1;\n        j -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmpmx5vh2pv.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input.clone();\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        let temp = output[i as usize];\n        output[i as usize] = output[j as usize];\n        output[j as usize] = temp;\n        i += 1;\n        j -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmpmx5vh2pv.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut input = input;\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        let temp = input[i as usize];\n        input[i as usize] = input[j as usize];\n        input[j as usize] = temp;\n        i += 1;\n        j -= 1;\n    }\n    input\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmphbouwy_n.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input.clone();\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        let temp = output[i as usize];\n        output[i as usize] = output[j as usize];\n        output[j as usize] = temp;\n        i += 1;\n        j -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmpmx5vh2pv.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output: Vec<isize> = Vec::new();\n    for i in 0..k {\n        output.push(input[(k - i - 1) as usize]);\n    }\n    for i in k..input.len() as isize {\n        output.push(input[i as usize]);\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123638,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input.clone();\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        output.swap(i as usize, j as usize);\n        i += 1;\n        j -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmp66o060r5.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input.clone();\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        let temp = output[i as usize];\n        output[i as usize] = output[j as usize];\n        output[j as usize] = temp;\n        i += 1;\n        j -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmpmx5vh2pv.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input.clone();\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        let temp = output[i as usize];\n        output[i as usize] = output[j as usize];\n        output[j as usize] = temp;\n        i += 1;\n        j -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmpmx5vh2pv.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output: Vec<isize> = input.clone();\n    let mut i: isize = 0;\n    let mut j: isize = k - 1;\n    while i < j {\n        let temp = output[i as usize];\n        output[i as usize] = output[j as usize];\n        output[j as usize] = temp;\n        i = i + 1;\n        j = j - 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123638,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input.clone();\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        output.swap(i as usize, j as usize);\n        i += 1;\n        j -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmp66o060r5.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output: Vec<isize> = Vec::new();\n    let mut i: isize = 0;\n    while i < k {\n        output.push(input[k as usize - 1 - i as usize]);\n        i += 1;\n    }\n    while i < input.len() as isize {\n        output.push(input[i as usize]);\n        i += 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123638,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input.clone();\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        output.swap(i as usize, j as usize);\n        i += 1;\n        j -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmp66o060r5.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut input = input;\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        input.swap(i as usize, j as usize);\n        i += 1;\n        j -= 1;\n    }\n    input\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123638,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmpeno8nw70.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input.clone();\n    let mut i = 0;\n    let mut j = k - 1;\n    while i < j {\n        output.swap(i as usize, j as usize);\n        i += 1;\n        j -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input.clone();\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        let temp = output[i as usize];\n        output[i as usize] = output[j as usize];\n        output[j as usize] = temp;\n        i += 1;\n        j -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmpmx5vh2pv.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output: Vec<isize> = Vec::new();\n    let mut i: isize = 0;\n    while i < k {\n        output.push(input[k as usize - i as usize - 1]);\n        i += 1;\n    }\n    while i < input.len() as isize {\n        output.push(input[i as usize]);\n        i += 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123638,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input.clone();\n    for i in 0..k {\n        output[i as usize] = input[(k - i - 1) as usize];\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input.clone();\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        let temp = output[i as usize];\n        output[i as usize] = output[j as usize];\n        output[j as usize] = temp;\n        i += 1;\n        j -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmpmx5vh2pv.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output: Vec<isize> = Vec::new();\n    for i in 0..k {\n        output.push(input[k - i - 1]);\n    }\n    for i in k..input.len() {\n        output.push(input[i]);\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123637,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp5hpozvt4.rs:5:21\n  |\n5 |         output.push(input[k - i - 1]);\n  |                     ^^^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0308]: mismatched types\n --> /tmp/tmp5hpozvt4.rs:7:17\n  |\n7 |     for i in k..input.len() {\n  |                 ^^^^^^^^^^^ expected `isize`, found `usize`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp5hpozvt4.rs:8:21\n  |\n8 |         output.push(input[i]);\n  |                     ^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut result = input.clone();\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        let temp = result[i as usize];\n        result[i as usize] = result[j as usize];\n        result[j as usize] = temp;\n        i += 1;\n        j -= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmpreukwtck.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output: Vec<isize> = input.clone();\n    let mut i: isize = 0;\n    let mut j: isize = k - 1;\n    while i < j {\n        let temp = output[i as usize];\n        output[i as usize] = output[j as usize];\n        output[j as usize] = temp;\n        i += 1;\n        j -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123638,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input.clone();\n    let mut start = 0;\n    let mut end = k;\n    while start < end {\n        let temp = output[start as usize];\n        output[start as usize] = output[end as usize];\n        output[end as usize] = temp;\n        start += 1;\n        end -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123638,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmp_ae4t0gp.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input;\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        output.swap(i as usize, j as usize);\n        i += 1;\n        j -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123638,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmpwgvryw6a.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut input = input;\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        input.swap(i as usize, j as usize);\n        i += 1;\n        j -= 1;\n    }\n    input\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123638,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmpeno8nw70.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input.clone();\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        output.swap(i as usize, j as usize);\n        i += 1;\n        j -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmp66o060r5.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input.clone();\n    for i in 0..k {\n        output[i as usize] = input[(k - i - 1) as usize];\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut input = input;\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        input.swap(i as usize, j as usize);\n        i += 1;\n        j -= 1;\n    }\n    input\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123638,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmpeno8nw70.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output: Vec<isize> = input.clone();\n    let mut i: isize = 0;\n    let mut j: isize = k;\n    while i < j {\n        let temp: isize = output[i as usize];\n        output[i as usize] = output[j as usize];\n        output[j as usize] = temp;\n        i += 1;\n        j -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123638,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmp47i6on09.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut input = input;\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        let temp = input[i as usize];\n        input[i as usize] = input[j as usize];\n        input[j as usize] = temp;\n        i += 1;\n        j -= 1;\n    }\n    input\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmphbouwy_n.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output: Vec<isize> = Vec::new();\n    let mut i = 0;\n    while i < k {\n        output.push(input[k as usize - i as usize - 1]);\n        i += 1;\n    }\n    while i < input.len() as isize {\n        output.push(input[i as usize]);\n        i += 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123638,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input.clone();\n    let mut i = 0;\n    let mut j = k - 1;\n    while i < j {\n        output.swap(i as usize, j as usize);\n        i += 1;\n        j -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    let mut i: isize = 0;\n    let mut j: isize = k;\n    while i < k {\n        result.push(input[j as usize]);\n        i += 1;\n        j -= 1;\n    }\n    while j < input.len() as isize {\n        result.push(input[j as usize]);\n        j += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123638,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 2, 3, 4, 5, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmpuwhmzuxd.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input.clone();\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        let temp = output[i as usize];\n        output[i as usize] = output[j as usize];\n        output[j as usize] = temp;\n        i += 1;\n        j -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmpmx5vh2pv.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut input = input;\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        let temp = input[i as usize];\n        input[i as usize] = input[j as usize];\n        input[j as usize] = temp;\n        i += 1;\n        j -= 1;\n    }\n    input\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmphbouwy_n.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output: Vec<isize> = input.clone();\n    let mut i: isize = 0;\n    let mut j: isize = k;\n    while i < j {\n        let temp: isize = output[i as usize];\n        output[i as usize] = output[j as usize];\n        output[j as usize] = temp;\n        i += 1;\n        j -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123638,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmp47i6on09.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input;\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        let temp = output[i as usize];\n        output[i as usize] = output[j as usize];\n        output[j as usize] = temp;\n        i += 1;\n        j -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmpwz54yrw2.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input.clone();\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        output.swap(i as usize, j as usize);\n        i += 1;\n        j -= 1;\n    }\n    return output;\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123638,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmpyt2r9wdx.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output: Vec<isize> = input.clone();\n    let mut i = 0;\n    let mut j = k - 1;\n    while i < j {\n        let temp = output[i as usize];\n        output[i as usize] = output[j as usize];\n        output[j as usize] = temp;\n        i += 1;\n        j -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut result = input;\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        let temp = result[i as usize];\n        result[i as usize] = result[j as usize];\n        result[j as usize] = temp;\n        i += 1;\n        j -= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123638,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmpqqd55apt.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    let mut i = 0;\n    while i < k {\n        result.push(input[k as usize - i as usize - 1]);\n        i += 1;\n    }\n    while i < input.len() as isize {\n        result.push(input[i as usize]);\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input.clone();\n    for i in 0..k {\n        output[i as usize] = input[(k - i - 1) as usize];\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input.clone();\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        output.swap(i as usize, j as usize);\n        i += 1;\n        j -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmp66o060r5.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output: Vec<isize> = Vec::new();\n    let mut i = 0;\n    let mut j = k;\n\n    while i < k {\n        output.push(input[j as usize]);\n        i += 1;\n        j -= 1;\n    }\n\n    while i < input.len() as isize {\n        output.push(input[i as usize]);\n        i += 1;\n    }\n\n    return output;\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123638,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 5, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmp7y1ez48e.rs:23:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output: Vec<isize> = Vec::new();\n    let mut i = 0;\n    while i < k {\n        output.push(input[k as usize - i as usize - 1]);\n        i += 1;\n    }\n    while i < input.len() as isize {\n        output.push(input[i as usize]);\n        i += 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123638,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input.clone();\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        output.swap(i as usize, j as usize);\n        i += 1;\n        j -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmp66o060r5.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut input = input;\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        let temp = input[i as usize];\n        input[i as usize] = input[j as usize];\n        input[j as usize] = temp;\n        i += 1;\n        j -= 1;\n    }\n    input\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmphbouwy_n.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output: Vec<isize> = Vec::new();\n    let mut i = 0;\n    while i < k {\n        output.push(input[k as usize - 1 - i as usize]);\n        i += 1;\n    }\n    while i < input.len() as isize {\n        output.push(input[i as usize]);\n        i += 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123638,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input.clone();\n    let mut i = 0;\n    let mut j = k - 1;\n    while i < j {\n        output.swap(i as usize, j as usize);\n        i += 1;\n        j -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input.clone();\n    let mut i = 0;\n    let mut j = k as usize;\n    while i < j {\n        output.swap(i, j);\n        i += 1;\n        j -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123638,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmp4hll9vcv.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    let mut i = 0;\n    while i < k {\n        result.push(input[k as usize - i as usize - 1]);\n        i += 1;\n    }\n    while i < input.len() as isize {\n        result.push(input[i as usize]);\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input.clone();\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        output.swap(i as usize, j as usize);\n        i += 1;\n        j -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmp66o060r5.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output: Vec<isize> = Vec::new();\n    let mut i: isize = 0;\n    while i < k {\n        output.push(input[k as usize - i as usize - 1]);\n        i += 1;\n    }\n    while i < input.len() as isize {\n        output.push(input[i as usize]);\n        i += 1;\n    }\n    return output;\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123638,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input.clone();\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        output.swap(i as usize, j as usize);\n        i += 1;\n        j -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmp66o060r5.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input.clone();\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        output.swap(i as usize, j as usize);\n        i += 1;\n        j -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmp66o060r5.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut input = input;\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        let temp = input[i as usize];\n        input[i as usize] = input[j as usize];\n        input[j as usize] = temp;\n        i += 1;\n        j -= 1;\n    }\n    input\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmphbouwy_n.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input.clone();\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        let temp = output[i as usize];\n        output[i as usize] = output[j as usize];\n        output[j as usize] = temp;\n        i += 1;\n        j -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmpmx5vh2pv.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input.clone();\n    for i in 0..k {\n        output[i as usize] = input[(k - i - 1) as usize];\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut input = input;\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        let temp = input[i as usize];\n        input[i as usize] = input[j as usize];\n        input[j as usize] = temp;\n        i += 1;\n        j -= 1;\n    }\n    input\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmphbouwy_n.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut result = input.clone();\n    let mut i = 0;\n    let mut j = k - 1;\n    while i < j {\n        let temp = result[i as usize];\n        result[i as usize] = result[j as usize];\n        result[j as usize] = temp;\n        i += 1;\n        j -= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123638,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input.clone();\n    let mut i = 0;\n    while i < k {\n        let temp = output[i];\n        output[i] = output[k - 1];\n        output[k - 1] = temp;\n        i += 1;\n        k -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123638,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp2jwh83rx.rs:6:20\n  |\n6 |         let temp = output[i];\n  |                    ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp2jwh83rx.rs:7:9\n  |\n7 |         output[i] = output[k - 1];\n  |         ^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp2jwh83rx.rs:7:21\n  |\n7 |         output[i] = output[k - 1];\n  |                     ^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp2jwh83rx.rs:8:9\n  |\n8 |         output[k - 1] = temp;\n  |         ^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input;\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        output.swap(i as usize, j as usize);\n        i += 1;\n        j -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123638,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmpwgvryw6a.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output: Vec<isize> = Vec::new();\n    let mut i = 0;\n    while i < k {\n        output.push(input[k as usize - i as usize - 1]);\n        i += 1;\n    }\n    while i < input.len() as isize {\n        output.push(input[i as usize]);\n        i += 1;\n    }\n    return output;\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123638,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output: Vec<isize> = input.clone();\n    for i in 0..k {\n        output[i as usize] = input[k as usize - i as usize - 1];\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123638,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input.clone();\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        let temp = output[i as usize];\n        output[i as usize] = output[j as usize];\n        output[j as usize] = temp;\n        i += 1;\n        j -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmpmx5vh2pv.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input.clone();\n    let mut i = 0;\n    let mut j = k - 1;\n    while i < j {\n        let temp = output[i as usize];\n        output[i as usize] = output[j as usize];\n        output[j as usize] = temp;\n        i += 1;\n        j -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123638,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input.clone();\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        let temp = output[i as usize];\n        output[i as usize] = output[j as usize];\n        output[j as usize] = temp;\n        i += 1;\n        j -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmpmx5vh2pv.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut input = input;\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        let temp = input[i as usize];\n        input[i as usize] = input[j as usize];\n        input[j as usize] = temp;\n        i += 1;\n        j -= 1;\n    }\n    input\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmphbouwy_n.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output: Vec<isize> = Vec::new();\n    let mut i = 0;\n    while i < k {\n        output.push(input[k as usize - 1 - i as usize]);\n        i += 1;\n    }\n    while i < input.len() as isize {\n        output.push(input[i as usize]);\n        i += 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123638,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output: Vec<isize> = input.clone();\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        output.swap(i as usize, j as usize);\n        i += 1;\n        j -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123638,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmp313gvrod.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input.clone();\n    for i in 0..k {\n        output[i as usize] = input[k as usize - i as usize - 1];\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1666123638,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input.clone();\n    let mut i = 0;\n    let mut j = k;\n    while i < j {\n        let temp = output[i as usize];\n        output[i as usize] = output[j as usize];\n        output[j as usize] = temp;\n        i += 1;\n        j -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[5, 4, 3, 2, 1, 6]`,\n right: `[4, 3, 2, 1, 5, 6]`', /tmp/tmpmx5vh2pv.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output: Vec<isize> = input.clone();\n    let mut i = 0;\n    let mut j = k - 1;\n    while i < j {\n        let temp = output[i as usize];\n        output[i as usize] = output[j as usize];\n        output[j as usize] = temp;\n        i += 1;\n        j -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to reverse an array upto a given position.\nfn reverse_Array_Upto_K(input: Vec<isize>, k: isize) -> Vec<isize> {\n    let mut output = input.clone();\n    let mut i = 0;\n    let mut j = k - 1;\n    while i < j {\n        output.swap(i as usize, j as usize);\n        i += 1;\n        j -= 1;\n    }\n    output\n}\n\nfn main() {\n    let candidate = reverse_Array_Upto_K;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6], 4), vec![4, 3, 2, 1, 5, 6]);\n    assert_eq!(candidate(vec![4, 5, 6, 7], 2), vec![5, 4, 6, 7]);\n    assert_eq!(candidate(vec![9, 8, 7, 6, 5], 3), vec![7, 8, 9, 6, 5]);\n}\n",
      "timestamp": 1665510501,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}