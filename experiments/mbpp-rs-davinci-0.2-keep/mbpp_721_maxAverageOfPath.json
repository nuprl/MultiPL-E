{
  "name": "mbpp_721_maxAverageOfPath",
  "language": "rs",
  "prompt": "/// Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nfn maxAverageOfPath(cost: Vec<Vec<isize>>) -> f64 {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_721_maxAverageOfPath.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\nfn main() {\n    let candidate = maxAverageOfPath;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![6, 5, 4], vec![7, 3, 9]]), 5.2);\n    assert_eq!(candidate(vec![vec![2, 3, 4], vec![7, 6, 5], vec![8, 4, 10]]), 6.2);\n    assert_eq!(candidate(vec![vec![3, 4, 5], vec![8, 7, 6], vec![9, 5, 11]]), 7.2);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![4, 5, 6], vec![7, 8, 9]]), 5.8);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    let mut dp = vec![vec![0.0; cost[0].len()]; cost.len()];\n    dp[0][0] = cost[0][0] as f64;\n    for i in 1..cost.len() {\n        dp[i][0] = dp[i - 1][0] + cost[i][0] as f64;\n    }\n    for j in 1..cost[0].len() {\n        dp[0][j] = dp[0][j - 1] + cost[0][j] as f64;\n    }\n    for i in 1..cost.len() {\n        for j in 1..cost[0].len() {\n            dp[i][j] = cost[i][j] as f64 + dp[i - 1][j].max(dp[i][j - 1]);\n        }\n    }\n    dp[cost.len() - 1][cost[0].len() - 1] / (cost.len() + cost[0].len() - 1) as f64",
    "    let n = cost.len();\n    let mut dp = vec![vec![0.0; n]; n];\n    dp[0][0] = cost[0][0] as f64;\n    for i in 1..n {\n        dp[i][0] = dp[i - 1][0] + cost[i][0] as f64;\n        dp[0][i] = dp[0][i - 1] + cost[0][i] as f64;\n    }\n    for i in 1..n {\n        for j in 1..n {\n            dp[i][j] = cost[i][j] as f64 + (dp[i - 1][j] + dp[i][j - 1]) / 2.0;\n        }\n    }\n    dp[n - 1][n - 1] / (n as f64)",
    "    let mut dp = vec![vec![0.0; cost[0].len()]; cost.len()];\n    dp[0][0] = cost[0][0] as f64;\n    for i in 1..cost.len() {\n        dp[i][0] = dp[i - 1][0] + cost[i][0] as f64;\n    }\n    for j in 1..cost[0].len() {\n        dp[0][j] = dp[0][j - 1] + cost[0][j] as f64;\n    }\n    for i in 1..cost.len() {\n        for j in 1..cost[0].len() {\n            dp[i][j] = cost[i][j] as f64 + dp[i - 1][j].max(dp[i][j - 1]);\n        }\n    }\n    dp[cost.len() - 1][cost[0].len() - 1] / (cost.len() + cost[0].len() - 1) as f64",
    "    let mut dp = vec![vec![0.0; cost.len()]; cost.len()];\n    dp[0][0] = cost[0][0] as f64;\n    for i in 1..cost.len() {\n        dp[0][i] = dp[0][i - 1] + cost[0][i] as f64;\n    }\n    for i in 1..cost.len() {\n        dp[i][0] = dp[i - 1][0] + cost[i][0] as f64;\n    }\n    for i in 1..cost.len() {\n        for j in 1..cost.len() {\n            dp[i][j] = (dp[i - 1][j] + dp[i][j - 1] + cost[i][j] as f64) / 2.0;\n        }\n    }\n    dp[cost.len() - 1][cost.len() - 1]",
    "    let mut dp = vec![vec![0; cost[0].len()]; cost.len()];\n    dp[0][0] = cost[0][0];\n    for i in 1..cost[0].len() {\n        dp[0][i] = dp[0][i - 1] + cost[0][i];\n    }\n    for i in 1..cost.len() {\n        dp[i][0] = dp[i - 1][0] + cost[i][0];\n    }\n    for i in 1..cost.len() {\n        for j in 1..cost[0].len() {\n            dp[i][j] = cost[i][j] + dp[i - 1][j].max(dp[i][j - 1]);\n        }\n    }\n    dp[cost.len() - 1][cost[0].len() - 1] as f64 / (cost.len() + cost[0].len() - 1) as f64",
    "    let mut dp: Vec<Vec<f64>> = vec![vec![0.0; cost[0].len()]; cost.len()];\n    dp[0][0] = cost[0][0] as f64;\n    for i in 1..cost.len() {\n        dp[i][0] = dp[i - 1][0] + cost[i][0] as f64;\n    }\n    for j in 1..cost[0].len() {\n        dp[0][j] = dp[0][j - 1] + cost[0][j] as f64;\n    }\n    for i in 1..cost.len() {\n        for j in 1..cost[0].len() {\n            dp[i][j] = cost[i][j] as f64 + f64::max(dp[i - 1][j], dp[i][j - 1]);\n        }\n    }\n    dp[cost.len() - 1][cost[0].len() - 1] / (cost.len() + cost[0].len() - 1) as f64",
    "    let mut dp = vec![vec![0; cost[0].len()]; cost.len()];\n    dp[0][0] = cost[0][0];\n    for i in 1..cost.len() {\n        dp[i][0] = dp[i - 1][0] + cost[i][0];\n    }\n    for j in 1..cost[0].len() {\n        dp[0][j] = dp[0][j - 1] + cost[0][j];\n    }\n    for i in 1..cost.len() {\n        for j in 1..cost[0].len() {\n            dp[i][j] = cost[i][j] + std::cmp::max(dp[i - 1][j], dp[i][j - 1]);\n        }\n    }\n    dp[cost.len() - 1][cost[0].len() - 1] as f64 / (cost.len() + cost[0].len() - 1) as f64",
    "    let mut dp = vec![vec![0.0; cost[0].len()]; cost.len()];\n    dp[0][0] = cost[0][0] as f64;\n    for i in 1..cost.len() {\n        dp[i][0] = dp[i - 1][0] + cost[i][0] as f64;\n    }\n    for j in 1..cost[0].len() {\n        dp[0][j] = dp[0][j - 1] + cost[0][j] as f64;\n    }\n    for i in 1..cost.len() {\n        for j in 1..cost[0].len() {\n            dp[i][j] = cost[i][j] as f64 + dp[i - 1][j].max(dp[i][j - 1]);\n        }\n    }\n    dp[cost.len() - 1][cost[0].len() - 1] / (cost.len() + cost[0].len() - 1) as f64",
    "    let n = cost.len();\n    let mut dp = vec![vec![0.0; n]; n];\n    dp[0][0] = cost[0][0] as f64;\n    for i in 1..n {\n        dp[0][i] = dp[0][i - 1] + cost[0][i] as f64;\n        dp[i][0] = dp[i - 1][0] + cost[i][0] as f64;\n    }\n    for i in 1..n {\n        for j in 1..n {\n            dp[i][j] = (dp[i - 1][j] + cost[i][j] as f64).max(dp[i][j - 1] + cost[i][j] as f64);\n        }\n    }\n    dp[n - 1][n - 1] / (n as f64)",
    "    let n = cost.len();\n    let mut dp = vec![vec![0.0; n]; n];\n    dp[0][0] = cost[0][0] as f64;\n    for i in 1..n {\n        dp[0][i] = dp[0][i - 1] + cost[0][i] as f64;\n        dp[i][0] = dp[i - 1][0] + cost[i][0] as f64;\n    }\n    for i in 1..n {\n        for j in 1..n {\n            dp[i][j] = (dp[i - 1][j] + dp[i][j - 1] + cost[i][j] as f64) / 2.0;\n        }\n    }\n    dp[n - 1][n - 1]",
    "    let mut dp = vec![vec![0.0; cost[0].len()]; cost.len()];\n    dp[0][0] = cost[0][0] as f64;\n    for i in 1..cost.len() {\n        dp[i][0] = dp[i - 1][0] + cost[i][0] as f64;\n    }\n    for j in 1..cost[0].len() {\n        dp[0][j] = dp[0][j - 1] + cost[0][j] as f64;\n    }\n    for i in 1..cost.len() {\n        for j in 1..cost[0].len() {\n            dp[i][j] = cost[i][j] as f64 + dp[i - 1][j].max(dp[i][j - 1]);\n        }\n    }\n    dp[cost.len() - 1][cost[0].len() - 1] / (cost.len() + cost[0].len() - 1) as f64",
    "    let mut dp = vec![vec![0.0; cost[0].len()]; cost.len()];\n    dp[0][0] = cost[0][0] as f64;\n    for i in 1..cost.len() {\n        dp[i][0] = dp[i - 1][0] + cost[i][0] as f64;\n    }\n    for j in 1..cost[0].len() {\n        dp[0][j] = dp[0][j - 1] + cost[0][j] as f64;\n    }\n    for i in 1..cost.len() {\n        for j in 1..cost[0].len() {\n            dp[i][j] = cost[i][j] as f64 + (dp[i - 1][j].max(dp[i][j - 1]));\n        }\n    }\n    dp[cost.len() - 1][cost[0].len() - 1] / (cost.len() + cost[0].len() - 1) as f64",
    "    let mut dp = vec![vec![0.0; cost[0].len()]; cost.len()];\n    dp[0][0] = cost[0][0] as f64;\n    for i in 1..cost.len() {\n        dp[i][0] = dp[i - 1][0] + cost[i][0] as f64;\n    }\n    for j in 1..cost[0].len() {\n        dp[0][j] = dp[0][j - 1] + cost[0][j] as f64;\n    }\n    for i in 1..cost.len() {\n        for j in 1..cost[0].len() {\n            dp[i][j] = cost[i][j] as f64 + dp[i - 1][j].max(dp[i][j - 1]);\n        }\n    }\n    dp[cost.len() - 1][cost[0].len() - 1] / (cost.len() + cost[0].len() - 1) as f64",
    "    let mut dp = vec![vec![0.0; cost[0].len()]; cost.len()];\n    dp[0][0] = cost[0][0] as f64;\n    for i in 1..cost.len() {\n        dp[i][0] = dp[i - 1][0] + cost[i][0] as f64;\n    }\n    for i in 1..cost[0].len() {\n        dp[0][i] = dp[0][i - 1] + cost[0][i] as f64;\n    }\n    for i in 1..cost.len() {\n        for j in 1..cost[0].len() {\n            dp[i][j] = (dp[i - 1][j] + dp[i][j - 1]) / 2.0 + cost[i][j] as f64;\n        }\n    }\n    dp[cost.len() - 1][cost[0].len() - 1]",
    "    let n = cost.len();\n    let mut dp = vec![vec![0.0; n]; n];\n    dp[0][0] = cost[0][0] as f64;\n    for i in 1..n {\n        dp[0][i] = dp[0][i - 1] + cost[0][i] as f64;\n        dp[i][0] = dp[i - 1][0] + cost[i][0] as f64;\n    }\n    for i in 1..n {\n        for j in 1..n {\n            dp[i][j] = (dp[i - 1][j] + dp[i][j - 1]) / 2.0 + cost[i][j] as f64;\n        }\n    }\n    dp[n - 1][n - 1]",
    "    let mut dp = vec![vec![0.0; cost[0].len()]; cost.len()];\n    dp[0][0] = cost[0][0] as f64;\n    for i in 1..cost.len() {\n        dp[i][0] = dp[i - 1][0] + cost[i][0] as f64;\n    }\n    for j in 1..cost[0].len() {\n        dp[0][j] = dp[0][j - 1] + cost[0][j] as f64;\n    }\n    for i in 1..cost.len() {\n        for j in 1..cost[0].len() {\n            dp[i][j] = cost[i][j] as f64 + dp[i - 1][j].max(dp[i][j - 1]);\n        }\n    }\n    dp[cost.len() - 1][cost[0].len() - 1] / (cost.len() + cost[0].len() - 1) as f64",
    "    let mut dp = vec![vec![0; cost[0].len()]; cost.len()];\n    dp[0][0] = cost[0][0];\n    for i in 1..cost.len() {\n        dp[i][0] = dp[i - 1][0] + cost[i][0];\n    }\n    for j in 1..cost[0].len() {\n        dp[0][j] = dp[0][j - 1] + cost[0][j];\n    }\n    for i in 1..cost.len() {\n        for j in 1..cost[0].len() {\n            dp[i][j] = cost[i][j] + dp[i - 1][j].max(dp[i][j - 1]);\n        }\n    }\n    dp[cost.len() - 1][cost[0].len() - 1] as f64 / (cost.len() + cost[0].len() - 1) as f64",
    "    let n = cost.len();\n    let mut dp = vec![vec![0.0; n]; n];\n    dp[0][0] = cost[0][0] as f64;\n    for i in 1..n {\n        dp[0][i] = dp[0][i - 1] + cost[0][i] as f64;\n        dp[i][0] = dp[i - 1][0] + cost[i][0] as f64;\n    }\n    for i in 1..n {\n        for j in 1..n {\n            dp[i][j] = (dp[i - 1][j] + cost[i][j] as f64).max(dp[i][j - 1] + cost[i][j] as f64);\n        }\n    }\n    dp[n - 1][n - 1] / (n as f64)",
    "    let n = cost.len();\n    let mut dp = vec![vec![0.0; n]; n];\n    dp[0][0] = cost[0][0] as f64;\n    for i in 1..n {\n        dp[0][i] = dp[0][i - 1] + cost[0][i] as f64;\n        dp[i][0] = dp[i - 1][0] + cost[i][0] as f64;\n    }\n    for i in 1..n {\n        for j in 1..n {\n            dp[i][j] = cost[i][j] as f64 + f64::max(dp[i - 1][j], dp[i][j - 1]);\n        }\n    }\n    dp[n - 1][n - 1] / (n * n) as f64",
    "    let n = cost.len();\n    let mut dp = vec![vec![0.0; n]; n];\n    dp[0][0] = cost[0][0] as f64;\n    for i in 1..n {\n        dp[i][0] = dp[i - 1][0] + cost[i][0] as f64;\n        dp[0][i] = dp[0][i - 1] + cost[0][i] as f64;\n    }\n    for i in 1..n {\n        for j in 1..n {\n            dp[i][j] = cost[i][j] as f64 + (dp[i - 1][j] + dp[i][j - 1]) / 2.0;\n        }\n    }\n    dp[n - 1][n - 1] / (n as f64)"
  ]
}