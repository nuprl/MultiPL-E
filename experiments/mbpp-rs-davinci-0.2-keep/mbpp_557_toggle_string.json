{
  "name": "mbpp_557_toggle_string",
  "language": "rs",
  "prompt": "/// Write a function to toggle the case of all characters in a string.\nfn toggle_string(string: String) -> String {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_557_toggle_string.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\nfn main() {\n    let candidate = toggle_string;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"pYTHON\"));\n    assert_eq!(candidate(String::from(\"Pangram\")), String::from(\"pANGRAM\"));\n    assert_eq!(candidate(String::from(\"LIttLE\")), String::from(\"liTTle\"));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    string.chars().map(|c| if c.is_uppercase() {\n        c.to_lowercase().next().unwrap()\n    } else {\n        c.to_uppercase().next().unwrap()\n    }).collect()",
    "    let mut result = String::new();\n    for c in string.chars() {\n        if c.is_lowercase() {\n            result.push(c.to_uppercase().next().unwrap());\n        } else {\n            result.push(c.to_lowercase().next().unwrap());\n        }\n    }\n    result",
    "    string.chars().map(|c| if c.is_uppercase() { c.to_lowercase().next().unwrap() } else { c.to_uppercase().next().unwrap() }).collect()",
    "    string.chars().map(|c| c.to_ascii_uppercase()).collect()",
    "    string.chars().map(|c| if c.is_ascii_uppercase() {\n        c.to_ascii_lowercase()\n    } else {\n        c.to_ascii_uppercase()\n    }).collect()",
    "    string.chars().map(|c| if c.is_lowercase() { c.to_uppercase() } else { c.to_lowercase() }).collect()",
    "    string.chars().map(|c| if c.is_uppercase() { c.to_lowercase().next().unwrap() } else { c.to_uppercase().next().unwrap() }).collect()",
    "    string\n        .chars()\n        .map(|c| if c.is_lowercase() { c.to_uppercase().next().unwrap() } else { c.to_lowercase().next().unwrap() })\n        .collect()",
    "    string.chars().map(|c| {\n        if c.is_ascii_uppercase() {\n            c.to_ascii_lowercase()\n        } else {\n            c.to_ascii_uppercase()\n        }\n    }).collect()",
    "    string.chars().map(|c| if c.is_lowercase() { c.to_uppercase() } else { c.to_lowercase() }).collect()",
    "    string.chars().map(|c| if c.is_ascii_lowercase() {\n        c.to_ascii_uppercase()\n    } else {\n        c.to_ascii_lowercase()\n    }).collect()",
    "    string.chars().map(|c| c.to_ascii_lowercase()).collect()",
    "    string.chars().map(|c| if c.is_uppercase() {\n        c.to_lowercase().next().unwrap()\n    } else {\n        c.to_uppercase().next().unwrap()\n    }).collect()",
    "    string.chars().map(|c| {\n        if c.is_uppercase() {\n            c.to_lowercase().next().unwrap()\n        } else {\n            c.to_uppercase().next().unwrap()\n        }\n    }).collect()",
    "    string.chars().map(|c| {\n        if c.is_ascii_lowercase() {\n            c.to_ascii_uppercase()\n        } else {\n            c.to_ascii_lowercase()\n        }\n    }).collect()",
    "    string.chars().map(|c| if c.is_ascii_lowercase() {\n        c.to_ascii_uppercase()\n    } else {\n        c.to_ascii_lowercase()\n    }).collect()",
    "    string\n        .chars()\n        .map(|c| if c.is_ascii_uppercase() {\n            c.to_ascii_lowercase()\n        } else {\n            c.to_ascii_uppercase()\n        })\n        .collect()",
    "    string.chars()\n        .map(|c| if c.is_ascii_uppercase() { c.to_ascii_lowercase() } else { c.to_ascii_uppercase() })\n        .collect()",
    "    string.chars().map(|c| {\n        if c.is_ascii_uppercase() {\n            c.to_ascii_lowercase()\n        } else {\n            c.to_ascii_uppercase()\n        }\n    }).collect()",
    "    string.chars().map(|c| if c.is_uppercase() {\n        c.to_lowercase().next().unwrap()\n    } else {\n        c.to_uppercase().next().unwrap()\n    }).collect()",
    "    let mut result = String::new();\n    for c in string.chars() {\n        if c.is_uppercase() {\n            result.push(c.to_lowercase().next().unwrap());\n        } else {\n            result.push(c.to_uppercase().next().unwrap());\n        }\n    }\n    result",
    "    string.chars().map(|c| if c.is_lowercase() { c.to_uppercase() } else { c.to_lowercase() }).collect()",
    "    string.chars().map(|c| if c.is_ascii_uppercase() {\n        c.to_ascii_lowercase()\n    } else {\n        c.to_ascii_uppercase()\n    }).collect()",
    "    string\n        .chars()\n        .map(|c| {\n            if c.is_ascii_uppercase() {\n                c.to_ascii_lowercase()\n            } else {\n                c.to_ascii_uppercase()\n            }\n        })\n        .collect()",
    "    string.chars().map(|c| if c.is_lowercase() { c.to_uppercase() } else { c.to_lowercase() }).collect()",
    "    string.chars().map(|c| if c.is_ascii_uppercase() {\n        c.to_ascii_lowercase()\n    } else {\n        c.to_ascii_uppercase()\n    }).collect()",
    "    string.chars().map(|c| if c.is_uppercase() {\n        c.to_lowercase().next().unwrap()\n    } else {\n        c.to_uppercase().next().unwrap()\n    }).collect()",
    "    let mut result = String::new();\n    for c in string.chars() {\n        if c.is_uppercase() {\n            result.push(c.to_lowercase().next().unwrap());\n        } else {\n            result.push(c.to_uppercase().next().unwrap());\n        }\n    }\n    result",
    "    string.chars().map(|c| {\n        if c.is_uppercase() {\n            c.to_lowercase().next().unwrap()\n        } else {\n            c.to_uppercase().next().unwrap()\n        }\n    }).collect()",
    "    string.chars().map(|c| {\n        if c.is_uppercase() {\n            c.to_lowercase().next().unwrap()\n        } else {\n            c.to_uppercase().next().unwrap()\n        }\n    }).collect()",
    "    string.chars().map(|c| if c.is_ascii_uppercase() { c.to_ascii_lowercase() } else { c.to_ascii_uppercase() }).collect()",
    "    string.chars().map(|c| {\n        if c.is_uppercase() {\n            c.to_lowercase().next().unwrap()\n        } else {\n            c.to_uppercase().next().unwrap()\n        }\n    }).collect()",
    "    string.chars().map(|c| if c.is_lowercase() {\n        c.to_uppercase().next().unwrap()\n    } else {\n        c.to_lowercase().next().unwrap()\n    }).collect()",
    "    string.chars().map(|c| if c.is_uppercase() {\n        c.to_lowercase().next().unwrap()\n    } else {\n        c.to_uppercase().next().unwrap()\n    }).collect()",
    "    string.chars().map(|c| {\n        if c.is_ascii_uppercase() {\n            c.to_ascii_lowercase()\n        } else {\n            c.to_ascii_uppercase()\n        }\n    }).collect()",
    "    string.chars().map(|c| c.to_ascii_uppercase()).collect()",
    "    string.chars().map(|c| if c.is_uppercase() { c.to_lowercase().next().unwrap() } else { c.to_uppercase().next().unwrap() }).collect()",
    "    string\n        .chars()\n        .map(|c| match c {\n            'a'..='z' => c.to_ascii_uppercase(),\n            'A'..='Z' => c.to_ascii_lowercase(),\n            _ => c,\n        })\n        .collect()",
    "    string.chars().map(|c| if c.is_uppercase() { c.to_lowercase().next().unwrap() } else { c.to_uppercase().next().unwrap() }).collect()",
    "    string.chars().map(|c| if c.is_uppercase() { c.to_lowercase().next().unwrap() } else { c.to_uppercase().next().unwrap() }).collect()",
    "    string.chars().map(|c| if c.is_lowercase() { c.to_uppercase() } else { c.to_lowercase() }).collect()",
    "    let mut result = String::new();\n    for c in string.chars() {\n        if c.is_uppercase() {\n            result.push(c.to_lowercase().next().unwrap());\n        } else {\n            result.push(c.to_uppercase().next().unwrap());\n        }\n    }\n    result",
    "    string\n        .chars()\n        .map(|c| match c {\n            'a'...'z' => c.to_ascii_uppercase(),\n            'A'...'Z' => c.to_ascii_lowercase(),\n            _ => c,\n        })\n        .collect()",
    "    let mut new_string = String::new();\n    for c in string.chars() {\n        if c.is_uppercase() {\n            new_string.push(c.to_lowercase().next().unwrap());\n        } else {\n            new_string.push(c.to_uppercase().next().unwrap());\n        }\n    }\n    new_string",
    "    string.chars().map(|c| if c.is_ascii_uppercase() {\n        c.to_ascii_lowercase()\n    } else {\n        c.to_ascii_uppercase()\n    }).collect()",
    "    string.chars().map(|c| {\n        if c.is_uppercase() {\n            c.to_lowercase().next().unwrap()\n        } else {\n            c.to_uppercase().next().unwrap()\n        }\n    }).collect()",
    "    string.chars().map(|c| c.to_ascii_lowercase()).collect()",
    "    string\n        .chars()\n        .map(|c| if c.is_ascii_uppercase() {\n            c.to_ascii_lowercase()\n        } else {\n            c.to_ascii_uppercase()\n        })\n        .collect()",
    "    string.chars().map(|c| {\n        if c.is_lowercase() {\n            c.to_uppercase().next().unwrap()\n        } else {\n            c.to_lowercase().next().unwrap()\n        }\n    }).collect()",
    "    string.chars().map(|c| {\n        if c.is_ascii_lowercase() {\n            c.to_ascii_uppercase()\n        } else {\n            c.to_ascii_lowercase()\n        }\n    }).collect()",
    "    string\n        .chars()\n        .map(|c| if c.is_ascii_uppercase() {\n            c.to_ascii_lowercase()\n        } else {\n            c.to_ascii_uppercase()\n        })\n        .collect()",
    "    string\n        .chars()\n        .map(|c| if c.is_ascii_uppercase() {\n            c.to_ascii_lowercase()\n        } else {\n            c.to_ascii_uppercase()\n        })\n        .collect()",
    "    string\n        .chars()\n        .map(|c| match c {\n            'a'..='z' => c.to_ascii_uppercase(),\n            'A'..='Z' => c.to_ascii_lowercase(),\n            _ => c,\n        })\n        .collect()",
    "    string.chars().map(|c| {\n        match c {\n            'a'...'z' => c.to_uppercase().next().unwrap(),\n            'A'...'Z' => c.to_lowercase().next().unwrap(),\n            _ => c,\n        }\n    }).collect()",
    "    let mut result = String::new();\n    for c in string.chars() {\n        if c.is_uppercase() {\n            result.push(c.to_lowercase().next().unwrap());\n        } else {\n            result.push(c.to_uppercase().next().unwrap());\n        }\n    }\n    result",
    "    string.chars().map(|c| {\n        if c.is_uppercase() {\n            c.to_lowercase().next().unwrap()\n        } else {\n            c.to_uppercase().next().unwrap()\n        }\n    }).collect()",
    "    string.chars().map(|c| {\n        if c.is_uppercase() {\n            c.to_lowercase().next().unwrap()\n        } else {\n            c.to_uppercase().next().unwrap()\n        }\n    }).collect()",
    "    let mut result = String::new();\n    for c in string.chars() {\n        if c.is_uppercase() {\n            result.push(c.to_lowercase().next().unwrap());\n        } else {\n            result.push(c.to_uppercase().next().unwrap());\n        }\n    }\n    result",
    "    string.chars().map(|c| {\n        if c.is_uppercase() {\n            c.to_lowercase().next().unwrap()\n        } else {\n            c.to_uppercase().next().unwrap()\n        }\n    }).collect()",
    "    string.chars().map(|c| c.to_ascii_uppercase()).collect()",
    "    string.chars().map(|c| if c.is_uppercase() { c.to_lowercase().next().unwrap() } else { c.to_uppercase().next().unwrap() }).collect()",
    "    string\n        .chars()\n        .map(|c| if c.is_lowercase() { c.to_uppercase() } else { c.to_lowercase() })\n        .collect()",
    "    let mut result = String::new();\n    for c in string.chars() {\n        if c.is_uppercase() {\n            result.push(c.to_lowercase().next().unwrap());\n        } else {\n            result.push(c.to_uppercase().next().unwrap());\n        }\n    }\n    result",
    "    string.chars().map(|c| if c.is_ascii_lowercase() {\n        c.to_ascii_uppercase()\n    } else {\n        c.to_ascii_lowercase()\n    }).collect()",
    "    string.chars().map(|c| if c.is_uppercase() {\n        c.to_lowercase().next().unwrap()\n    } else {\n        c.to_uppercase().next().unwrap()\n    }).collect()",
    "    string.chars().map(|c| {\n        match c {\n            'a'...'z' => c.to_ascii_uppercase(),\n            'A'...'Z' => c.to_ascii_lowercase(),\n            _ => c,\n        }\n    }).collect()",
    "    let mut new_string = String::new();\n    for c in string.chars() {\n        if c.is_lowercase() {\n            new_string.push(c.to_uppercase().next().unwrap());\n        } else {\n            new_string.push(c.to_lowercase().next().unwrap());\n        }\n    }\n    new_string",
    "    let mut result = String::new();\n    for c in string.chars() {\n        if c.is_ascii_lowercase() {\n            result.push(c.to_ascii_uppercase());\n        } else if c.is_ascii_uppercase() {\n            result.push(c.to_ascii_lowercase());\n        } else {\n            result.push(c);\n        }\n    }\n    result",
    "    string.chars().map(|c| c.to_ascii_lowercase()).collect()",
    "    string.chars().map(|c| if c.is_ascii_uppercase() { c.to_ascii_lowercase() } else { c.to_ascii_uppercase() }).collect()",
    "    let mut result = String::new();\n    for c in string.chars() {\n        if c.is_alphabetic() {\n            if c.is_uppercase() {\n                result.push(c.to_lowercase().next().unwrap());\n            } else {\n                result.push(c.to_uppercase().next().unwrap());\n            }\n        } else {\n            result.push(c);\n        }\n    }\n    result",
    "    let mut result = String::new();\n    for c in string.chars() {\n        if c.is_lowercase() {\n            result.push(c.to_uppercase().next().unwrap());\n        } else {\n            result.push(c.to_lowercase().next().unwrap());\n        }\n    }\n    result",
    "    string.chars().map(|c| if c.is_uppercase() { c.to_lowercase().next().unwrap() } else { c.to_uppercase().next().unwrap() }).collect()",
    "    string.chars().map(|c| {\n        if c.is_lowercase() {\n            c.to_uppercase().next().unwrap()\n        } else {\n            c.to_lowercase().next().unwrap()\n        }\n    }).collect()",
    "    let mut new_string = String::new();\n    for c in string.chars() {\n        if c.is_uppercase() {\n            new_string.push(c.to_lowercase().next().unwrap());\n        } else {\n            new_string.push(c.to_uppercase().next().unwrap());\n        }\n    }\n    new_string",
    "    string.chars().map(|c| {\n        if c.is_ascii_uppercase() {\n            c.to_ascii_lowercase()\n        } else {\n            c.to_ascii_uppercase()\n        }\n    }).collect()",
    "    string.chars().map(|c| if c.is_lowercase() { c.to_uppercase() } else { c.to_lowercase() }).collect()",
    "    string.chars().map(|c| if c.is_lowercase() { c.to_uppercase() } else { c.to_lowercase() }).collect()",
    "    string.chars().map(|c| {\n        if c.is_uppercase() {\n            c.to_lowercase().next().unwrap()\n        } else {\n            c.to_uppercase().next().unwrap()\n        }\n    }).collect()",
    "    let mut result = String::new();\n    for c in string.chars() {\n        if c.is_lowercase() {\n            result.push(c.to_uppercase().next().unwrap());\n        } else {\n            result.push(c.to_lowercase().next().unwrap());\n        }\n    }\n    result",
    "    string\n        .chars()\n        .map(|c| if c.is_uppercase() {\n            c.to_lowercase().next().unwrap()\n        } else {\n            c.to_uppercase().next().unwrap()\n        })\n        .collect()",
    "    string.chars().map(|c| if c.is_ascii_uppercase() {\n        c.to_ascii_lowercase()\n    } else {\n        c.to_ascii_uppercase()\n    }).collect()",
    "    string.chars().map(|c| if c.is_uppercase() { c.to_lowercase().next().unwrap() } else { c.to_uppercase().next().unwrap() }).collect()",
    "    string.chars().map(|c| if c.is_uppercase() { c.to_lowercase().next().unwrap() } else { c.to_uppercase().next().unwrap() }).collect()",
    "    string.chars().map(|c| {\n        if c.is_uppercase() {\n            c.to_lowercase().next().unwrap()\n        } else {\n            c.to_uppercase().next().unwrap()\n        }\n    }).collect()",
    "    string.chars().map(|c| if c.is_uppercase() { c.to_lowercase().next().unwrap() } else { c.to_uppercase().next().unwrap() }).collect()",
    "    string.chars().map(|c| c.to_ascii_uppercase()).collect()",
    "    string\n        .chars()\n        .map(|c| match c {\n            'a'...'z' => c.to_ascii_uppercase(),\n            'A'...'Z' => c.to_ascii_lowercase(),\n            _ => c,\n        })\n        .collect()",
    "    string.chars().map(|c| if c.is_lowercase() { c.to_uppercase() } else { c.to_lowercase() }).collect()",
    "    string.chars().map(|c| if c.is_uppercase() { c.to_lowercase().next().unwrap() } else { c.to_uppercase().next().unwrap() }).collect()",
    "    string.chars().map(|c| c.to_ascii_uppercase().to_ascii_lowercase()).collect()",
    "    string.chars().map(|c| if c.is_lowercase() { c.to_uppercase() } else { c.to_lowercase() }).collect()",
    "    string\n        .chars()\n        .map(|c| match c {\n            'a'..='z' => c.to_ascii_uppercase(),\n            'A'..='Z' => c.to_ascii_lowercase(),\n            _ => c,\n        })\n        .collect()",
    "    let mut result = String::new();\n    for c in string.chars() {\n        if c.is_uppercase() {\n            result.push(c.to_lowercase().next().unwrap());\n        } else {\n            result.push(c.to_uppercase().next().unwrap());\n        }\n    }\n    result",
    "    string.chars().map(|c| if c.is_uppercase() { c.to_lowercase().next().unwrap() } else { c.to_uppercase().next().unwrap() }).collect()",
    "    string.chars().map(|c| {\n        if c.is_uppercase() {\n            c.to_lowercase().next().unwrap()\n        } else {\n            c.to_uppercase().next().unwrap()\n        }\n    }).collect()",
    "    let mut result = String::new();\n    for c in string.chars() {\n        if c.is_uppercase() {\n            result.push(c.to_lowercase().next().unwrap());\n        } else {\n            result.push(c.to_uppercase().next().unwrap());\n        }\n    }\n    result",
    "    let mut result = String::new();\n    for c in string.chars() {\n        result.push(if c.is_uppercase() {\n            c.to_lowercase().next().unwrap()\n        } else {\n            c.to_uppercase().next().unwrap()\n        });\n    }\n    result",
    "    let mut result = String::new();\n    for c in string.chars() {\n        result.push(if c.is_uppercase() {\n            c.to_lowercase().next().unwrap()\n        } else {\n            c.to_uppercase().next().unwrap()\n        });\n    }\n    result",
    "    let mut result = String::new();\n    for c in string.chars() {\n        if c.is_lowercase() {\n            result.push(c.to_uppercase().next().unwrap());\n        } else {\n            result.push(c.to_lowercase().next().unwrap());\n        }\n    }\n    result",
    "    let mut chars = string.chars();\n    let mut result = String::new();\n    while let Some(c) = chars.next() {\n        if c.is_alphabetic() {\n            if c.is_uppercase() {\n                result.push(c.to_lowercase().next().unwrap());\n            } else {\n                result.push(c.to_uppercase().next().unwrap());\n            }\n        } else {\n            result.push(c);\n        }\n    }\n    result",
    "    string.chars().map(|c| {\n        if c.is_ascii_lowercase() {\n            c.to_ascii_uppercase()\n        } else {\n            c.to_ascii_lowercase()\n        }\n    }).collect()",
    "    string\n        .chars()\n        .map(|c| if c.is_ascii_uppercase() {\n            c.to_ascii_lowercase()\n        } else {\n            c.to_ascii_uppercase()\n        })\n        .collect()",
    "    string.chars().map(|c| {\n        if c.is_ascii_lowercase() {\n            c.to_ascii_uppercase()\n        } else {\n            c.to_ascii_lowercase()\n        }\n    }).collect()",
    "    string.chars().map(|c| {\n        if c.is_uppercase() {\n            c.to_lowercase().next().unwrap()\n        } else {\n            c.to_uppercase().next().unwrap()\n        }\n    }).collect()",
    "    let mut chars = string.chars();\n    let mut result = String::new();\n    while let Some(c) = chars.next() {\n        if c.is_uppercase() {\n            result.push(c.to_lowercase().next().unwrap());\n        } else {\n            result.push(c.to_uppercase().next().unwrap());\n        }\n    }\n    result",
    "    string.chars().map(|c| if c.is_ascii_uppercase() {\n        c.to_ascii_lowercase()\n    } else {\n        c.to_ascii_uppercase()\n    }).collect()",
    "    string.chars().map(|c| {\n        if c.is_lowercase() {\n            c.to_uppercase().next().unwrap()\n        } else {\n            c.to_lowercase().next().unwrap()\n        }\n    }).collect()",
    "    string\n        .chars()\n        .map(|c| {\n            if c.is_uppercase() {\n                c.to_lowercase().next().unwrap()\n            } else {\n                c.to_uppercase().next().unwrap()\n            }\n        })\n        .collect()",
    "    string.chars().map(|c| if c.is_lowercase() { c.to_uppercase() } else { c.to_lowercase() }).collect()",
    "    let mut result = String::new();\n    for c in string.chars() {\n        if c.is_lowercase() {\n            result.push(c.to_uppercase().next().unwrap());\n        } else {\n            result.push(c.to_lowercase().next().unwrap());\n        }\n    }\n    result",
    "    string.chars().map(|c| {\n        if c.is_ascii_uppercase() {\n            c.to_ascii_lowercase()\n        } else {\n            c.to_ascii_uppercase()\n        }\n    }).collect()",
    "    string.chars().map(|c| if c.is_uppercase() { c.to_lowercase().next().unwrap() } else { c.to_uppercase().next().unwrap() }).collect()",
    "    string.chars().map(|c| {\n        if c.is_uppercase() {\n            c.to_lowercase().collect::<String>()\n        } else {\n            c.to_uppercase().collect::<String>()\n        }\n    }).collect::<String>()",
    "    string\n        .chars()\n        .map(|c| if c.is_uppercase() {\n            c.to_lowercase().next().unwrap()\n        } else {\n            c.to_uppercase().next().unwrap()\n        })\n        .collect()",
    "    string\n        .chars()\n        .map(|c| if c.is_uppercase() {\n            c.to_lowercase().next().unwrap()\n        } else {\n            c.to_uppercase().next().unwrap()\n        })\n        .collect()",
    "    let mut result = String::new();\n    for c in string.chars() {\n        if c.is_ascii_uppercase() {\n            result.push(c.to_ascii_lowercase());\n        } else {\n            result.push(c.to_ascii_uppercase());\n        }\n    }\n    result",
    "    string.chars().map(|c| if c.is_uppercase() {\n        c.to_lowercase().next().unwrap()\n    } else {\n        c.to_uppercase().next().unwrap()\n    }).collect()",
    "    string\n        .chars()\n        .map(|c| {\n            if c.is_ascii_lowercase() {\n                c.to_ascii_uppercase()\n            } else {\n                c.to_ascii_lowercase()\n            }\n        })\n        .collect()",
    "    string.chars().map(|c| if c.is_lowercase() { c.to_uppercase() } else { c.to_lowercase() }).collect()",
    "    let mut result = String::new();\n    for c in string.chars() {\n        if c.is_ascii_uppercase() {\n            result.push(c.to_ascii_lowercase());\n        } else if c.is_ascii_lowercase() {\n            result.push(c.to_ascii_uppercase());\n        } else {\n            result.push(c);\n        }\n    }\n    result",
    "    string.chars().map(|c| c.toggle_case()).collect()",
    "    let mut result = String::new();\n    for c in string.chars() {\n        if c.is_uppercase() {\n            result.push(c.to_lowercase().next().unwrap());\n        } else {\n            result.push(c.to_uppercase().next().unwrap());\n        }\n    }\n    result",
    "    string\n        .chars()\n        .map(|c| if c.is_ascii_uppercase() {\n            c.to_ascii_lowercase()\n        } else {\n            c.to_ascii_uppercase()\n        })\n        .collect()",
    "    string.chars().map(|c| if c.is_ascii_uppercase() {\n        c.to_ascii_lowercase()\n    } else {\n        c.to_ascii_uppercase()\n    }).collect()",
    "    let mut result = String::new();\n    for c in string.chars() {\n        if c.is_uppercase() {\n            result.push(c.to_lowercase().next().unwrap());\n        } else {\n            result.push(c.to_uppercase().next().unwrap());\n        }\n    }\n    result",
    "    string.chars().map(|c| {\n        if c.is_uppercase() {\n            c.to_lowercase().next().unwrap()\n        } else {\n            c.to_uppercase().next().unwrap()\n        }\n    }).collect()",
    "    string.chars().map(|c| c.toggle_case()).collect()",
    "    string.chars().map(|c| if c.is_uppercase() {\n        c.to_lowercase().next().unwrap()\n    } else {\n        c.to_uppercase().next().unwrap()\n    }).collect()",
    "    string.chars().map(|c| if c.is_ascii_uppercase() {\n        c.to_ascii_lowercase()\n    } else {\n        c.to_ascii_uppercase()\n    }).collect()",
    "    string.chars().map(|c| if c.is_lowercase() { c.to_uppercase() } else { c.to_lowercase() }).collect()",
    "    string.chars().map(|c| c.to_ascii_uppercase()).collect()",
    "    string.chars().map(|c| c.to_ascii_uppercase()).collect()",
    "    let mut new_string = String::new();\n    for c in string.chars() {\n        if c.is_uppercase() {\n            new_string.push(c.to_lowercase().next().unwrap());\n        } else {\n            new_string.push(c.to_uppercase().next().unwrap());\n        }\n    }\n    new_string",
    "    string.chars().map(|c| c.to_ascii_lowercase()).collect()",
    "    string.chars().map(|c| {\n        if c.is_uppercase() {\n            c.to_lowercase().next().unwrap()\n        } else {\n            c.to_uppercase().next().unwrap()\n        }\n    }).collect()",
    "    string\n        .chars()\n        .map(|c| if c.is_lowercase() { c.to_uppercase().next().unwrap() } else { c.to_lowercase().next().unwrap() })\n        .collect()",
    "    string\n        .chars()\n        .map(|c| match c {\n            c if c.is_ascii_uppercase() => c.to_ascii_lowercase(),\n            c if c.is_ascii_lowercase() => c.to_ascii_uppercase(),\n            _ => c,\n        })\n        .collect()",
    "    let mut new_string = String::new();\n    for c in string.chars() {\n        if c.is_lowercase() {\n            new_string.push(c.to_uppercase().next().unwrap());\n        } else {\n            new_string.push(c.to_lowercase().next().unwrap());\n        }\n    }\n    new_string",
    "    string.chars().map(|c| if c.is_lowercase() { c.to_uppercase() } else { c.to_lowercase() }).collect()",
    "    string.chars().map(|c| {\n        if c.is_ascii_uppercase() {\n            c.to_ascii_lowercase()\n        } else {\n            c.to_ascii_uppercase()\n        }\n    }).collect()",
    "    let mut result = String::new();\n    for c in string.chars() {\n        result.push(if c.is_uppercase() {\n            c.to_lowercase().next().unwrap()\n        } else {\n            c.to_uppercase().next().unwrap()\n        });\n    }\n    result",
    "    string.chars().map(|c| {\n        match c {\n            'a'...'z' => c.to_ascii_uppercase(),\n            'A'...'Z' => c.to_ascii_lowercase(),\n            _ => c,\n        }\n    }).collect()",
    "    string.chars().map(|c| if c.is_ascii_lowercase() {\n        c.to_ascii_uppercase()\n    } else {\n        c.to_ascii_lowercase()\n    }).collect()",
    "    string\n        .chars()\n        .map(|c| if c.is_ascii_uppercase() {\n            c.to_ascii_lowercase()\n        } else {\n            c.to_ascii_uppercase()\n        })\n        .collect()",
    "    string.chars().map(|c| if c.is_ascii_uppercase() {\n        c.to_ascii_lowercase()\n    } else {\n        c.to_ascii_uppercase()\n    }).collect()",
    "    let mut result = String::new();\n    for c in string.chars() {\n        if c.is_lowercase() {\n            result.push(c.to_uppercase().next().unwrap());\n        } else {\n            result.push(c.to_lowercase().next().unwrap());\n        }\n    }\n    result",
    "    let mut result = String::new();\n    for c in string.chars() {\n        if c.is_lowercase() {\n            result.push(c.to_uppercase().next().unwrap());\n        } else if c.is_uppercase() {\n            result.push(c.to_lowercase().next().unwrap());\n        } else {\n            result.push(c);\n        }\n    }\n    result",
    "    string.chars().map(|c| if c.is_uppercase() {\n        c.to_lowercase().next().unwrap()\n    } else {\n        c.to_uppercase().next().unwrap()\n    }).collect()",
    "    string.chars().map(|c| if c.is_uppercase() { c.to_lowercase().next().unwrap() } else { c.to_uppercase().next().unwrap() }).collect()",
    "    string\n        .chars()\n        .map(|c| match c {\n            c if c.is_ascii_uppercase() => c.to_ascii_lowercase(),\n            c if c.is_ascii_lowercase() => c.to_ascii_uppercase(),\n            _ => c,\n        })\n        .collect()",
    "    string.chars().map(|c| if c.is_ascii_lowercase() { c.to_ascii_uppercase() } else { c.to_ascii_lowercase() }).collect()",
    "    string.chars().map(|c| if c.is_lowercase() { c.to_uppercase() } else { c.to_lowercase() }).collect()",
    "    string\n        .chars()\n        .map(|c| if c.is_uppercase() { c.to_lowercase().next().unwrap() } else { c.to_uppercase().next().unwrap() })\n        .collect()",
    "    string.chars().map(|c| {\n        if c.is_uppercase() {\n            c.to_lowercase().next().unwrap()\n        } else {\n            c.to_uppercase().next().unwrap()\n        }\n    }).collect()",
    "    let mut result = String::new();\n    for c in string.chars() {\n        if c.is_lowercase() {\n            result.push(c.to_uppercase().next().unwrap());\n        } else {\n            result.push(c.to_lowercase().next().unwrap());\n        }\n    }\n    result",
    "    let mut toggled = String::new();\n    for c in string.chars() {\n        if c.is_lowercase() {\n            toggled.push(c.to_uppercase().next().unwrap());\n        } else {\n            toggled.push(c.to_lowercase().next().unwrap());\n        }\n    }\n    toggled",
    "    string.chars().map(|c| if c.is_lowercase() { c.to_uppercase() } else { c.to_lowercase() }).collect()",
    "    string\n        .chars()\n        .map(|c| match c {\n            'a'...'z' => c.to_ascii_uppercase(),\n            'A'...'Z' => c.to_ascii_lowercase(),\n            _ => c,\n        })\n        .collect()",
    "    string.chars().map(|c| if c.is_uppercase() {\n        c.to_lowercase().next().unwrap()\n    } else {\n        c.to_uppercase().next().unwrap()\n    }).collect()",
    "    string.chars().map(|c| if c.is_ascii_uppercase() {\n        c.to_ascii_lowercase()\n    } else {\n        c.to_ascii_uppercase()\n    }).collect()",
    "    let mut result = String::new();\n    for c in string.chars() {\n        if c.is_uppercase() {\n            result.push(c.to_lowercase().next().unwrap());\n        } else {\n            result.push(c.to_uppercase().next().unwrap());\n        }\n    }\n    result",
    "    string.chars().map(|c| {\n        if c.is_uppercase() {\n            c.to_lowercase().next().unwrap()\n        } else {\n            c.to_uppercase().next().unwrap()\n        }\n    }).collect()",
    "    string.chars().map(|c| if c.is_uppercase() {\n        c.to_lowercase().next().unwrap()\n    } else {\n        c.to_uppercase().next().unwrap()\n    }).collect()",
    "    string.chars().map(|c| if c.is_ascii_uppercase() {\n        c.to_ascii_lowercase()\n    } else {\n        c.to_ascii_uppercase()\n    }).collect()",
    "    string.chars().map(|c| if c.is_uppercase() { c.to_lowercase().next().unwrap() } else { c.to_uppercase().next().unwrap() }).collect()",
    "    let mut new_string = String::new();\n    for c in string.chars() {\n        if c.is_ascii_uppercase() {\n            new_string.push(c.to_ascii_lowercase());\n        } else {\n            new_string.push(c.to_ascii_uppercase());\n        }\n    }\n    new_string",
    "    string.chars().map(|c| {\n        if c.is_ascii_uppercase() {\n            c.to_ascii_lowercase()\n        } else {\n            c.to_ascii_uppercase()\n        }\n    }).collect()",
    "    string.chars().map(|c| {\n        if c.is_ascii_lowercase() {\n            c.to_ascii_uppercase()\n        } else {\n            c.to_ascii_lowercase()\n        }\n    }).collect()",
    "    let mut result = String::new();\n    for c in string.chars() {\n        if c.is_lowercase() {\n            result.push(c.to_uppercase().next().unwrap());\n        } else {\n            result.push(c.to_lowercase().next().unwrap());\n        }\n    }\n    result",
    "    string.chars().map(|c| if c.is_uppercase() { c.to_lowercase().next().unwrap() } else { c.to_uppercase().next().unwrap() }).collect()",
    "    string.chars().map(|c| if c.is_lowercase() { c.to_uppercase() } else { c.to_lowercase() }).collect()",
    "    string.chars().map(|c| if c.is_lowercase() { c.to_uppercase() } else { c.to_lowercase() }).collect()",
    "    string.chars().map(|c| c.to_ascii_lowercase()).collect()",
    "    string.chars().map(|c| {\n        if c.is_uppercase() {\n            c.to_lowercase().next().unwrap()\n        } else {\n            c.to_uppercase().next().unwrap()\n        }\n    }).collect()",
    "    string\n        .chars()\n        .map(|c| if c.is_lowercase() { c.to_ascii_uppercase() } else { c.to_ascii_lowercase() })\n        .collect()",
    "    string\n        .chars()\n        .map(|c| if c.is_ascii_uppercase() {\n            c.to_ascii_lowercase()\n        } else {\n            c.to_ascii_uppercase()\n        })\n        .collect()",
    "    let mut result = String::new();\n    for c in string.chars() {\n        if c.is_lowercase() {\n            result.push(c.to_uppercase().next().unwrap());\n        } else {\n            result.push(c.to_lowercase().next().unwrap());\n        }\n    }\n    result",
    "    string.chars().map(|c| if c.is_uppercase() { c.to_lowercase().next().unwrap() } else { c.to_uppercase().next().unwrap() }).collect()",
    "    string.chars().map(|c| if c.is_uppercase() { c.to_lowercase().next().unwrap() } else { c.to_uppercase().next().unwrap() }).collect()",
    "    string\n        .chars()\n        .map(|c| if c.is_ascii_uppercase() {\n            c.to_ascii_lowercase()\n        } else {\n            c.to_ascii_uppercase()\n        })\n        .collect()",
    "    string.chars().map(|c| if c.is_uppercase() {\n        c.to_lowercase().next().unwrap()\n    } else {\n        c.to_uppercase().next().unwrap()\n    }).collect()",
    "    unimplemented!()",
    "    string.chars().map(|c| if c.is_ascii_uppercase() {\n        c.to_ascii_lowercase()\n    } else {\n        c.to_ascii_uppercase()\n    }).collect()",
    "    string.chars().map(|c| if c.is_lowercase() {\n        c.to_uppercase().next().unwrap()\n    } else {\n        c.to_lowercase().next().unwrap()\n    }).collect()",
    "    string.chars().map(|c| {\n        if c.is_uppercase() {\n            c.to_lowercase().next().unwrap()\n        } else {\n            c.to_uppercase().next().unwrap()\n        }\n    }).collect()",
    "    string.chars().map(|c| if c.is_ascii_uppercase() {\n        c.to_ascii_lowercase()\n    } else {\n        c.to_ascii_uppercase()\n    }).collect()",
    "    string.chars().map(|c| c.to_ascii_uppercase()).collect()",
    "    string\n        .chars()\n        .map(|c| if c.is_uppercase() { c.to_lowercase().next().unwrap() } else { c.to_uppercase().next().unwrap() })\n        .collect()",
    "    string.chars().map(|c| {\n        if c.is_uppercase() {\n            c.to_lowercase().next().unwrap()\n        } else {\n            c.to_uppercase().next().unwrap()\n        }\n    }).collect()",
    "    let mut result = String::new();\n    for c in string.chars() {\n        if c.is_ascii_lowercase() {\n            result.push(c.to_ascii_uppercase());\n        } else {\n            result.push(c.to_ascii_lowercase());\n        }\n    }\n    result",
    "    string.chars().map(|c| if c.is_uppercase() {\n        c.to_lowercase().next().unwrap()\n    } else {\n        c.to_uppercase().next().unwrap()\n    }).collect()",
    "    string.chars().map(|c| if c.is_uppercase() {\n        c.to_lowercase().next().unwrap()\n    } else {\n        c.to_uppercase().next().unwrap()\n    }).collect()",
    "    string\n        .chars()\n        .map(|c| match c {\n            'a'...'z' => c.to_ascii_uppercase(),\n            'A'...'Z' => c.to_ascii_lowercase(),\n            _ => c,\n        })\n        .collect()",
    "    string.chars().map(|c| if c.is_ascii_uppercase() {\n        c.to_ascii_lowercase()\n    } else {\n        c.to_ascii_uppercase()\n    }).collect()",
    "    string\n        .chars()\n        .map(|c| if c.is_ascii_uppercase() {\n            c.to_ascii_lowercase()\n        } else {\n            c.to_ascii_uppercase()\n        })\n        .collect()",
    "    let mut result = String::new();\n    for c in string.chars() {\n        if c.is_uppercase() {\n            result.push(c.to_lowercase().next().unwrap());\n        } else {\n            result.push(c.to_uppercase().next().unwrap());\n        }\n    }\n    result",
    "    string.chars().map(|c| if c.is_alphabetic() {\n        if c.is_uppercase() {\n            c.to_lowercase().next().unwrap()\n        } else {\n            c.to_uppercase().next().unwrap()\n        }\n    } else {\n        c\n    }).collect()",
    "    string.chars().map(|c| if c.is_lowercase() { c.to_uppercase() } else { c.to_lowercase() }).collect()",
    "    string.chars().map(|c| if c.is_uppercase() { c.to_lowercase().next().unwrap() } else { c.to_uppercase().next().unwrap() }).collect()"
  ]
}