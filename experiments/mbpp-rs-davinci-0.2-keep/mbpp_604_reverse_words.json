{
  "name": "mbpp_604_reverse_words",
  "language": "rs",
  "prompt": "/// Write a function to reverse words seperated by spaces in a given string.\nfn reverse_words(s: String) -> String {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_604_reverse_words.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\nfn main() {\n    let candidate = reverse_words;\n    assert_eq!(candidate(String::from(\"python program\")), String::from(\"program python\"));\n    assert_eq!(candidate(String::from(\"java language\")), String::from(\"language java\"));\n    assert_eq!(candidate(String::from(\"indian man\")), String::from(\"man indian\"));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    let mut words: Vec<&str> = s.split_whitespace().collect();\n    words.reverse();\n    words.join(\" \")",
    "    let mut words: Vec<&str> = s.split_whitespace().collect();\n    words.reverse();\n    words.join(\" \")",
    "    let mut words: Vec<&str> = s.split(\" \").collect();\n    words.reverse();\n    words.join(\" \")",
    "    let mut words: Vec<&str> = s.split_whitespace().collect();\n    words.reverse();\n    words.join(\" \")",
    "    let mut words: Vec<&str> = s.split(\" \").collect();\n    words.reverse();\n    words.join(\" \")",
    "    let mut words: Vec<&str> = s.split(\" \").collect();\n    words.reverse();\n    words.join(\" \")",
    "    let mut words: Vec<&str> = s.split_whitespace().collect();\n    words.reverse();\n    words.join(\" \")",
    "    let mut words: Vec<&str> = s.split_whitespace().collect();\n    words.reverse();\n    words.join(\" \")",
    "    let mut words: Vec<&str> = s.split_whitespace().collect();\n    words.reverse();\n    words.join(\" \")",
    "    let mut words: Vec<&str> = s.split_whitespace().collect();\n    words.reverse();\n    words.join(\" \")",
    "    let mut words: Vec<&str> = s.split(\" \").collect();\n    words.reverse();\n    words.join(\" \")",
    "    let mut reversed = String::new();\n    let mut words = s.split_whitespace();\n    while let Some(word) = words.next() {\n        reversed.insert_str(0, word);\n        if words.next().is_some() {\n            reversed.insert(0, ' ');\n        }\n    }\n    reversed",
    "    let mut words: Vec<&str> = s.split_whitespace().collect();\n    words.reverse();\n    words.join(\" \")",
    "    let mut words: Vec<&str> = s.split_whitespace().rev().collect();\n    words.join(\" \")",
    "    let mut words = s.split_whitespace();\n    let mut reversed = String::new();\n    while let Some(word) = words.next() {\n        reversed.insert_str(0, word);\n        reversed.insert(0, ' ');\n    }\n    reversed.pop();\n    reversed",
    "    let mut words = s.split_whitespace().collect::<Vec<&str>>();\n    words.reverse();\n    words.join(\" \")",
    "    let mut words: Vec<String> = s.split_whitespace().map(|s| s.to_string()).collect();\n    words.reverse();\n    words.join(\" \")",
    "    let mut words: Vec<&str> = s.split_whitespace().collect();\n    words.reverse();\n    words.join(\" \")",
    "    let mut words: Vec<String> = s.split_whitespace().map(|s| s.to_string()).collect();\n    words.reverse();\n    words.join(\" \")",
    "    let mut words: Vec<String> = s.split_whitespace().map(|s| s.to_string()).collect();\n    words.reverse();\n    words.join(\" \")"
  ]
}