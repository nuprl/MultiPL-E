{
  "name": "mbpp_643_text_match_wordz_middle",
  "language": "rs",
  "prompt": "/// Write a function that checks if a strings contains 'z', except at the start and end of the word.\nfn text_match_wordz_middle(text: String) -> bool {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_643_text_match_wordz_middle.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\nfn main() {\n    let candidate = text_match_wordz_middle;\n    assert_eq!(candidate(String::from(\"pythonzabc.\")), true);\n    assert_eq!(candidate(String::from(\"zxyabc.\")), false);\n    assert_eq!(candidate(String::from(\"  lang  .\")), false);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    let mut result = false;\n    let mut prev_char = ' ';\n    let mut next_char = ' ';\n    for (i, c) in text.chars().enumerate() {\n        if i > 0 {\n            prev_char = text.chars().nth(i - 1).unwrap();\n        }\n        if i < text.len() - 1 {\n            next_char = text.chars().nth(i + 1).unwrap();\n        }\n        if c == 'z' && prev_char != 'z' && next_char != 'z' {\n            result = true;\n        }\n    }\n    result",
    "    let mut result = false;\n    let mut start = true;\n    let mut end = false;\n    for c in text.chars() {\n        if c == 'z' {\n            if start || end {\n                result = false;\n                break;\n            } else {\n                result = true;\n            }\n        } else if c == ' ' {\n            start = true;\n            end = false;\n        } else {\n            start = false;\n            end = true;\n        }\n    }\n    result",
    "    let mut result = false;\n    let mut first_char = true;\n    let mut last_char = false;\n    for c in text.chars() {\n        if first_char {\n            first_char = false;\n            continue;\n        }\n        if last_char {\n            break;\n        }\n        if c == 'z' {\n            result = true;\n        } else if c == ' ' {\n            last_char = true;\n        }\n    }\n    result",
    "    let mut result = false;\n    let mut i = 0;\n    let mut j = text.len() - 1;\n    let mut text_chars = text.chars();\n    while i < j {\n        if text_chars.next().unwrap() == 'z' {\n            result = true;\n            break;\n        }\n        i += 1;\n        if text_chars.next_back().unwrap() == 'z' {\n            result = true;\n            break;\n        }\n        j -= 1;\n    }\n    result",
    "    text.contains(\"z\") && !text.starts_with(\"z\") && !text.ends_with(\"z\")",
    "    let mut result = false;\n    let mut start = false;\n    let mut end = false;\n    let mut count = 0;\n    for c in text.chars() {\n        if c == 'z' {\n            if count == 0 {\n                start = true;\n            } else if count == text.len() - 1 {\n                end = true;\n            } else {\n                result = true;\n            }\n        }\n        count += 1;\n    }\n    result && !start && !end",
    "    let mut result = false;\n    let mut first_char = true;\n    let mut last_char = false;\n    for c in text.chars() {\n        if first_char {\n            first_char = false;\n            last_char = true;\n            continue;\n        }\n        if last_char {\n            last_char = false;\n            continue;\n        }\n        if c == 'z' {\n            result = true;\n            break;\n        }\n    }\n    result",
    "    let mut result: bool = false;\n    let mut i: usize = 0;\n    let mut j: usize = text.len() - 1;\n    let mut found: bool = false;\n    let mut found_start: bool = false;\n    let mut found_end: bool = false;\n\n    while i < text.len() && !found {\n        if text.chars().nth(i).unwrap() == 'z' {\n            found_start = true;\n        }\n        i += 1;\n    }\n\n    while j > 0 && !found {\n        if text.chars().nth(j).unwrap() == 'z' {\n            found_end = true;\n        }\n        j -= 1;\n    }\n\n    if found_start && found_end {\n        result = true;\n    }\n\n    result",
    "    let mut result = false;\n    let mut first_char = true;\n    let mut last_char = false;\n\n    for c in text.chars() {\n        if first_char {\n            first_char = false;\n            last_char = true;\n            continue;\n        }\n\n        if last_char {\n            last_char = false;\n            continue;\n        }\n\n        if c == 'z' {\n            result = true;\n            break;\n        }\n    }\n\n    result",
    "    let mut count = 0;\n    for c in text.chars() {\n        if c == 'z' {\n            count += 1;\n        }\n    }\n    count > 1",
    "    let mut result = false;\n    let mut first_char = true;\n    let mut last_char = false;\n    for c in text.chars() {\n        if first_char {\n            first_char = false;\n            last_char = true;\n            continue;\n        }\n        if last_char {\n            last_char = false;\n            continue;\n        }\n        if c == 'z' {\n            result = true;\n            break;\n        }\n    }\n    result",
    "    let re = Regex::new(r\"\\bz\\b\").unwrap();\n    re.is_match(&text)",
    "    let mut result = false;\n    let mut start = false;\n    let mut end = false;\n    for c in text.chars() {\n        if c == 'z' {\n            if start {\n                end = true;\n            } else {\n                start = true;\n            }\n        }\n    }\n    if start && end {\n        result = true;\n    }\n    result",
    "    let re = Regex::new(r\"\\Bz\\B\").unwrap();\n    re.is_match(&text)",
    "    let mut result = false;\n    let mut text_vec: Vec<char> = text.chars().collect();\n    let mut text_vec_len = text_vec.len();\n    if text_vec_len > 2 {\n        text_vec_len -= 2;\n        for i in 1..text_vec_len {\n            if text_vec[i] == 'z' {\n                result = true;\n                break;\n            }\n        }\n    }\n    result",
    "    let mut result = false;\n    let mut start = false;\n    let mut end = false;\n    for c in text.chars() {\n        if c == 'z' {\n            if start {\n                end = true;\n            } else {\n                start = true;\n            }\n        }\n    }\n    if start && end {\n        result = true;\n    }\n    result",
    "    let mut result = false;\n    let mut first_char = true;\n    let mut last_char = false;\n    for c in text.chars() {\n        if first_char {\n            first_char = false;\n            last_char = true;\n        } else if last_char {\n            last_char = false;\n        } else if c == 'z' {\n            result = true;\n            break;\n        }\n    }\n    result",
    "    text.contains(\"z\") && !text.starts_with(\"z\") && !text.ends_with(\"z\")",
    "    let mut result = false;\n    for (i, c) in text.chars().enumerate() {\n        if i > 0 && i < text.len() - 1 && c == 'z' {\n            result = true;\n        }\n    }\n    result",
    "    let mut result = false;\n    let mut first_char = true;\n    let mut last_char = false;\n    for c in text.chars() {\n        if first_char {\n            first_char = false;\n            continue;\n        }\n        if last_char {\n            break;\n        }\n        if c == 'z' {\n            result = true;\n        }\n        if c == ' ' {\n            last_char = true;\n        }\n    }\n    result"
  ]
}