{
  "name": "mbpp_430_parabola_directrix",
  "language": "rs",
  "prompt": "/// Write a function to find the directrix of a parabola.\nfn parabola_directrix(a: isize, b: isize, c: isize) -> isize {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_430_parabola_directrix.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\nfn main() {\n    let candidate = parabola_directrix;\n    assert_eq!(candidate(5, 3, 2), -198);\n    assert_eq!(candidate(9, 8, 4), -2336);\n    assert_eq!(candidate(2, 4, 6), -130);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    -(b * b - 4 * a * c) / (4 * a)",
    "    -c / b",
    "    -(b * b - 4 * a * c) / (4 * a)",
    "    -(4 * a * c) / (4 * a)",
    "    -(4 * a * c) / (b * b)",
    "    -(b as f64 / (2.0 * a as f64)).round() as isize",
    "    -(b * b - 4 * a * c) / (4 * a)",
    "    -(b as f64 / (2.0 * a as f64)).round() as isize",
    "    -4 * a * c / (b * b)",
    "    -(b * b - 4 * a * c) / (4 * a)",
    "    -(b as f64 / (2.0 * a as f64)).round() as isize",
    "    -c / b",
    "    -(b * b - 4 * a * c) / (4 * a)",
    "    -(b as f64 / (2.0 * a as f64)).round() as isize",
    "    -4 * a * c / (b * b)",
    "    -c / b",
    "    -(b as f64 / (2.0 * a as f64)).round() as isize",
    "    -c / b",
    "    -(b * b - 4 * a * c) / (4 * a)",
    "    -(b as f64 / (2.0 * a as f64)).round() as isize",
    "    -(b * b - 4 * a * c) / (4 * a)",
    "    -(b as f64 / (2.0 * a as f64)).round() as isize",
    "    -c / b",
    "    -(b as f64 / (2.0 * a as f64)).round() as isize",
    "    -c / b",
    "    -(b as f64 / (2.0 * a as f64)).round() as isize",
    "    -c / b",
    "    -(4 * a * c) / (b * b)",
    "    -(4 * a * c) / (b * b)",
    "    -c / b",
    "    -c / b",
    "    -c / b",
    "    -c / b",
    "    -(b * b - 4 * a * c) / (4 * a)",
    "    -c / b",
    "    -c / b",
    "    -(b as f64 / (2.0 * a as f64)).round() as isize",
    "    -(4 * a * c) / (b * b)",
    "    -(b as f64 / (2.0 * a as f64)) as isize",
    "    -c / b",
    "    -(b * b - 4 * a * c) / (4 * a)",
    "    -(b * b - 4 * a * c) / (4 * a)",
    "    -c / b",
    "    -a / b",
    "    -b / (2 * a)",
    "    -(b * b - 4 * a * c) / (4 * a)",
    "    -(4 * a * c) / (4 * a)",
    "    -(c as f64 / b as f64) as isize",
    "    -(b * b - 4 * a * c) / (4 * a)",
    "    -(b * b) / (4 * a) + c",
    "    -(b * b - 4 * a * c) / (4 * a)",
    "    -c / b",
    "    (a * c) / b",
    "    -(b * b - 4 * a * c) / (4 * a)",
    "    -c / b",
    "    -c / b",
    "    -(b * b - 4 * a * c) / (4 * a)",
    "    -c / b",
    "    -4 * a * c / (b * b)",
    "    -(b * b - 4 * a * c) / (4 * a)",
    "    -c / b",
    "    -c / b",
    "    -(b * b - 4 * a * c) / (4 * a)",
    "    -c / b",
    "    -(b * b - 4 * a * c) / (4 * a)",
    "    -c / b",
    "    -c / b",
    "    -c / b",
    "    -c / b",
    "    -a / b",
    "    -(b as f64 / (2.0 * a as f64)).round() as isize",
    "    -(4 * a * c) / (b * b)",
    "    -(b as f64 / (2.0 * a as f64)).round() as isize",
    "    -(b as f64 / (2.0 * a as f64)).round() as isize",
    "    -(b as f64 / (2.0 * a as f64)) as isize",
    "    -(b * b - 4 * a * c) / (4 * a)",
    "    -c / b",
    "    -c / b",
    "    -(b * b - 4 * a * c) / (4 * a)",
    "    -(4 * a * c) / (b * b)",
    "    -(b as f64 / (2.0 * a as f64)).round() as isize",
    "    -c / b",
    "    -(b * b - 4 * a * c) / (4 * a)",
    "    -(4 * a * c) / (b * b)",
    "    -c / b",
    "    -(b * b - 4 * a * c) / (4 * a)",
    "    -(b * b - 4 * a * c) / (4 * a)",
    "    -c / b",
    "    -(4 * a * c) / (4 * a)",
    "    -c / b",
    "    -(b * b - 4 * a * c) / (4 * a)",
    "    -(b * b - 4 * a * c) / (4 * a)",
    "    -c / b",
    "    -c / b",
    "    -(b * b - 4 * a * c) / (4 * a)",
    "    -c / b",
    "    -c / b",
    "    -c / b",
    "    -4 * a * c / (b * b)",
    "    -c / b",
    "    -c / b",
    "    -(b as f64 / (2.0 * a as f64)).round() as isize",
    "    -c / b",
    "    -c / b",
    "    -(b * b - 4 * a * c) / (4 * a)",
    "    -c / b",
    "    -(b * b - 4 * a * c) / (4 * a)",
    "    -c / b",
    "    -(b as f64 / (2.0 * a as f64)).round() as isize",
    "    -(b * b - 4 * a * c) / (4 * a)",
    "    -4 * a * c / (b * b)",
    "    -(b * b - 4 * a * c) / (4 * a)",
    "    -(b * b - 4 * a * c) / (4 * a)",
    "    -(b * b - 4 * a * c) / (4 * a)",
    "    -(b * b - 4 * a * c) / (4 * a)",
    "    -c / b",
    "    -(b * b - 4 * a * c) / (4 * a)",
    "    -(b * b) / (4 * a) + c",
    "    -(b as f64 / (2.0 * a as f64)).round() as isize",
    "    -(b * b - 4 * a * c) / (4 * a)",
    "    -(b as f64 / (2.0 * a as f64)).round() as isize",
    "    -c / b",
    "    -c / b",
    "    -c / b",
    "    -c / b",
    "    -c / b",
    "    -(b as f64 / (2.0 * a as f64)).round() as isize",
    "    -(b as f64 / (2.0 * a as f64)).round() as isize",
    "    -c / b",
    "    -(b * b - 4 * a * c) / (4 * a)",
    "    -(b as f64 / (2.0 * a as f64)).round() as isize",
    "    -c / b",
    "    -c / b",
    "    -c / b",
    "    -c / b",
    "    b - (a * a) / (4 * b)",
    "    -c / b",
    "    -(b / (2 * a))",
    "    -(c as f64 / (2.0 * a as f64)).round() as isize",
    "    -(4 * a * c) / (b * b)",
    "    -(4 * a * c) / (4 * a)",
    "    -c / b",
    "    -c / b",
    "    -(4 * a * c) / (4 * a)",
    "    -(b * b - 4 * a * c) / (4 * a)",
    "    2 * a * c / (-b)",
    "    -c / b",
    "    -(b * b - 4 * a * c) / (4 * a)",
    "    -c / b",
    "    -c / b",
    "    -c / b",
    "    -c / b",
    "    -c / b",
    "    -(b * b - 4 * a * c) / (4 * a)",
    "    -b / (2 * a)",
    "    -c / b",
    "    -c / b",
    "    -c / b",
    "    -b / (2 * a)",
    "    -c / b",
    "    -c / b",
    "    -c / b",
    "    -c / b",
    "    -c / b",
    "    -(b as f64 / (2.0 * a as f64)).round() as isize",
    "    -c / b",
    "    -c / b",
    "    -b / (2 * a)",
    "    -b / (2 * a)",
    "    -c / b",
    "    -(b * b - 4 * a * c) / (4 * a)",
    "    -c / b",
    "    -(b * b - 4 * a * c) / (4 * a)",
    "    -(4 * a * c) / (b * b)",
    "    -(4 * a * c) / (b * b)",
    "    -c / b",
    "    -(b * b - 4 * a * c) / (4 * a)",
    "    -(b * b - 4 * a * c) / (4 * a)",
    "    -c / b",
    "    -(b as f64 / (2.0 * a as f64)).round() as isize",
    "    -(b * b - 4 * a * c) / (4 * a)",
    "    -(b * b - 4 * a * c) / (4 * a)",
    "    -c / b",
    "    -c / b",
    "    -c / b",
    "    -c / b",
    "    -c / b",
    "    -(b * b - 4 * a * c) / (4 * a)",
    "    -c / b",
    "    -(b as f64 / (2.0 * a as f64)).round() as isize",
    "    -(b * b - 4 * a * c) / (4 * a)",
    "    -c / b",
    "    -c / b",
    "    -(b * b - 4 * a * c) / (4 * a)",
    "    -(b * b - 4 * a * c) / (4 * a)",
    "    -(b * b - 4 * a * c) / (4 * a)",
    "    -(b * b - 4 * a * c) / (4 * a)",
    "    -(b * b - 4 * a * c) / (4 * a)",
    "    -c / b",
    "    -(4 * a * c) / (b * b)"
  ]
}