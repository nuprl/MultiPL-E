{
  "name": "mbpp_572_two_unique_nums",
  "language": "rs",
  "prompt": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_572_two_unique_nums.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    let mut result = Vec::new();\n    for num in nums {\n        if !result.contains(&num) {\n            result.push(num);\n        }\n    }\n    result",
    "    let mut nums = nums;\n    nums.sort();\n    let mut result = Vec::new();\n    let mut i = 0;\n    while i < nums.len() {\n        result.push(nums[i]);\n        i += 2;\n    }\n    result",
    "    let mut unique_nums: Vec<isize> = Vec::new();\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n    unique_nums",
    "    let mut nums = nums;\n    nums.sort();\n    let mut result = Vec::new();\n    let mut i = 0;\n    while i < nums.len() {\n        result.push(nums[i]);\n        i += 2;\n    }\n    result",
    "    let mut nums = nums;\n    nums.sort();\n    let mut i = 0;\n    while i < nums.len() - 1 {\n        if nums[i] == nums[i + 1] {\n            nums.remove(i);\n        } else {\n            i += 1;\n        }\n    }\n    nums",
    "    let mut nums = nums;\n    nums.sort();\n    nums.dedup();\n    nums",
    "    let mut nums = nums;\n    nums.sort();\n    nums.dedup();\n    nums",
    "    let mut unique_nums = Vec::new();\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n    unique_nums",
    "    let mut unique_nums = Vec::new();\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n    unique_nums",
    "    let mut unique_nums = Vec::new();\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n    unique_nums",
    "    let mut nums = nums;\n    nums.sort();\n    nums.dedup();\n    nums",
    "    let mut unique_nums: Vec<isize> = Vec::new();\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n    unique_nums",
    "    let mut nums = nums;\n    nums.sort();\n    let mut result = Vec::new();\n    let mut last = None;\n    for num in nums {\n        if last.is_none() || last.unwrap() != num {\n            result.push(num);\n            last = Some(num);\n        }\n    }\n    result",
    "    let mut nums = nums;\n    nums.sort();\n    nums.dedup();\n    nums",
    "    let mut nums = nums;\n    nums.sort();\n    let mut unique_nums = Vec::new();\n    let mut last_num = None;\n    for num in nums {\n        if last_num != Some(num) {\n            unique_nums.push(num);\n        }\n        last_num = Some(num);\n    }\n    unique_nums",
    "    let mut unique_nums = HashSet::new();\n    for num in nums {\n        unique_nums.insert(num);\n    }\n    unique_nums.into_iter().collect()",
    "    let mut nums_set = nums.iter().collect::<std::collections::HashSet<_>>();\n    nums_set.drain().collect()",
    "    let mut nums = nums;\n    nums.sort();\n    nums.dedup();\n    nums",
    "    let mut unique_nums = Vec::new();\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n    unique_nums",
    "    let mut unique_nums = Vec::new();\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n    unique_nums"
  ]
}