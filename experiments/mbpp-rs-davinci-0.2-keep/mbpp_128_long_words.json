{
  "name": "mbpp_128_long_words",
  "language": "rs",
  "prompt": "/// Write a function to find words that are longer than n characters from a given list of words.\nfn long_words(n: isize, str: String) -> Vec<String> {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_128_long_words.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\nfn main() {\n    let candidate = long_words;\n    assert_eq!(candidate(3, String::from(\"python is a programming language\")), vec![String::from(\"python\"), String::from(\"programming\"), String::from(\"language\")]);\n    assert_eq!(candidate(2, String::from(\"writing a program\")), vec![String::from(\"writing\"), String::from(\"program\")]);\n    assert_eq!(candidate(5, String::from(\"sorting list\")), vec![String::from(\"sorting\")]);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    let mut result: Vec<String> = Vec::new();\n    let words: Vec<&str> = str.split_whitespace().collect();\n    for word in words {\n        if word.len() as isize > n {\n            result.push(word.to_string());\n        }\n    }\n    result",
    "    let mut result = Vec::new();\n    for word in str.split_whitespace() {\n        if word.len() as isize > n {\n            result.push(word.to_string());\n        }\n    }\n    result",
    "    let mut result: Vec<String> = vec![];\n    for word in str.split_whitespace() {\n        if word.len() as isize > n {\n            result.push(word.to_string());\n        }\n    }\n    result",
    "    let mut v: Vec<String> = Vec::new();\n    for word in str.split_whitespace() {\n        if word.len() as isize > n {\n            v.push(word.to_string());\n        }\n    }\n    v",
    "    let mut result = Vec::new();\n    let words = str.split_whitespace();\n    for word in words {\n        if word.len() as isize > n {\n            result.push(word.to_string());\n        }\n    }\n    result",
    "    let mut result: Vec<String> = Vec::new();\n    let words: Vec<&str> = str.split_whitespace().collect();\n    for word in words {\n        if word.len() as isize > n {\n            result.push(word.to_string());\n        }\n    }\n    result",
    "    let mut result: Vec<String> = Vec::new();\n    let words: Vec<&str> = str.split_whitespace().collect();\n    for word in words {\n        if word.len() as isize > n {\n            result.push(word.to_string());\n        }\n    }\n    result",
    "    let mut v: Vec<String> = Vec::new();\n    for word in str.split_whitespace() {\n        if word.len() as isize > n {\n            v.push(word.to_string());\n        }\n    }\n    return v;",
    "    let mut result: Vec<String> = Vec::new();\n    for word in str.split_whitespace() {\n        if word.len() as isize > n {\n            result.push(word.to_string());\n        }\n    }\n    result",
    "    let mut result = Vec::new();\n    for word in str.split_whitespace() {\n        if word.len() as isize > n {\n            result.push(word.to_string());\n        }\n    }\n    result",
    "    let mut res = Vec::new();\n    for word in str.split_whitespace() {\n        if word.len() as isize > n {\n            res.push(word.to_string());\n        }\n    }\n    res",
    "    let mut vec = Vec::new();\n    for word in str.split_whitespace() {\n        if word.len() as isize > n {\n            vec.push(word.to_string());\n        }\n    }\n    vec",
    "    let mut result: Vec<String> = Vec::new();\n    for word in str.split_whitespace() {\n        if word.len() as isize > n {\n            result.push(word.to_string());\n        }\n    }\n    result",
    "    str.split_whitespace()\n        .filter(|word| word.len() as isize > n)\n        .map(|word| word.to_string())\n        .collect()",
    "    let mut words = Vec::new();\n    for word in str.split_whitespace() {\n        if word.len() as isize > n {\n            words.push(word.to_string());\n        }\n    }\n    words",
    "    let mut result: Vec<String> = Vec::new();\n    let words: Vec<&str> = str.split_whitespace().collect();\n    for word in words {\n        if word.len() as isize > n {\n            result.push(word.to_string());\n        }\n    }\n    result",
    "    let mut v: Vec<String> = Vec::new();\n    for word in str.split_whitespace() {\n        if word.len() as isize > n {\n            v.push(word.to_string());\n        }\n    }\n    v",
    "    let mut result = Vec::new();\n    for word in str.split_whitespace() {\n        if word.len() as isize > n {\n            result.push(word.to_string());\n        }\n    }\n    result",
    "    str.split_whitespace()\n        .filter(|word| word.len() as isize > n)\n        .map(|word| word.to_string())\n        .collect()",
    "    let mut words = Vec::new();\n    for word in str.split_whitespace() {\n        if word.len() as isize > n {\n            words.push(word.to_string());\n        }\n    }\n    words"
  ]
}