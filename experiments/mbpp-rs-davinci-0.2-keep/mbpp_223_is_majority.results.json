{
  "name": "mbpp_223_is_majority",
  "language": "rs",
  "prompt": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_223_is_majority.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut i = 0;\n    let mut j = n - 1;\n    let mut count = 0;\n    while i <= j {\n        if arr[i] == x {\n            count += 1;\n        }\n        if arr[j] == x {\n            count += 1;\n        }\n        i += 1;\n        j -= 1;\n    }\n    count > n / 2\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmplm419asw.rs:7:12\n  |\n7 |         if arr[i] == x {\n  |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmplm419asw.rs:10:12\n   |\n10 |         if arr[j] == x {\n   |            ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n/2 {\n        return true;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmpucdnok7a.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp991i3jq6.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp991i3jq6.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n/2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp5rtqo0xc.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in arr {\n        if i == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmpmuxcjrcp.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp991i3jq6.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in arr {\n        if i == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp991i3jq6.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp991i3jq6.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp991i3jq6.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n/2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp5rtqo0xc.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n/2 {\n        true\n    } else {\n        false\n    }\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmpa0t6u4ut.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp991i3jq6.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp991i3jq6.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp991i3jq6.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n/2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp5rtqo0xc.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp991i3jq6.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp991i3jq6.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp991i3jq6.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count: isize = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1666123075,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmpib8ukodu.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp991i3jq6.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp991i3jq6.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp991i3jq6.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp991i3jq6.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp991i3jq6.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp991i3jq6.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp991i3jq6.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp991i3jq6.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut i: isize = 0;\n    let mut j: isize = n - 1;\n    let mut mid: isize = 0;\n    while i <= j {\n        mid = (i + j) / 2;\n        if arr[mid as usize] == x {\n            break;\n        } else if arr[mid as usize] > x {\n            j = mid - 1;\n        } else {\n            i = mid + 1;\n        }\n    }\n    if i > j {\n        return false;\n    }\n    let mut count: isize = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1666123075,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmpjb4tv9mv.rs:21:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp991i3jq6.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp991i3jq6.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp991i3jq6.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp991i3jq6.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp991i3jq6.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp991i3jq6.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp991i3jq6.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp991i3jq6.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp991i3jq6.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmpmuxcjrcp.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n/2 {\n        return true;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmpucdnok7a.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp991i3jq6.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp991i3jq6.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp991i3jq6.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp991i3jq6.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp991i3jq6.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp991i3jq6.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp991i3jq6.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in arr {\n        if i == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1666123075,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp991i3jq6.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp991i3jq6.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp991i3jq6.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        true\n    } else {\n        false\n    }\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1666123075,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp0ducbtpv.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp991i3jq6.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp991i3jq6.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp991i3jq6.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp991i3jq6.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp991i3jq6.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp991i3jq6.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp991i3jq6.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp991i3jq6.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp991i3jq6.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp991i3jq6.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp991i3jq6.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp991i3jq6.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmpmuxcjrcp.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp991i3jq6.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmpmuxcjrcp.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp991i3jq6.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmpmuxcjrcp.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        true\n    } else {\n        false\n    }\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1666123075,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp0ducbtpv.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmpmuxcjrcp.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp991i3jq6.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp991i3jq6.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp991i3jq6.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n/2 {\n        true\n    } else {\n        false\n    }\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmpa0t6u4ut.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp991i3jq6.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp991i3jq6.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp991i3jq6.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        true\n    } else {\n        false\n    }\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1666123075,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp0ducbtpv.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp991i3jq6.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n/2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp5rtqo0xc.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp991i3jq6.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp991i3jq6.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp991i3jq6.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp991i3jq6.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp991i3jq6.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp991i3jq6.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp991i3jq6.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp991i3jq6.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp991i3jq6.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp991i3jq6.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp991i3jq6.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp991i3jq6.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        true\n    } else {\n        false\n    }\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1666123075,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp0ducbtpv.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        true\n    } else {\n        false\n    }\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1666123075,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp0ducbtpv.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp991i3jq6.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp991i3jq6.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp991i3jq6.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmpmuxcjrcp.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmpmuxcjrcp.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp991i3jq6.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp991i3jq6.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        true\n    } else {\n        false\n    }\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1666123075,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp0ducbtpv.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmpmuxcjrcp.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmpmuxcjrcp.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp991i3jq6.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp991i3jq6.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n/2 {\n        return true;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmpucdnok7a.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp991i3jq6.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        true\n    } else {\n        false\n    }\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1666123075,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp0ducbtpv.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count: isize = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1666123075,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmpib8ukodu.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp991i3jq6.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp991i3jq6.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp991i3jq6.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp991i3jq6.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp991i3jq6.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n/2 {\n        return true;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmpucdnok7a.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp991i3jq6.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp991i3jq6.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp991i3jq6.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        true\n    } else {\n        false\n    }\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1666123075,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp0ducbtpv.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp991i3jq6.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp991i3jq6.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp991i3jq6.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        true\n    } else {\n        false\n    }\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1666123075,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp0ducbtpv.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp991i3jq6.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp991i3jq6.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp991i3jq6.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp991i3jq6.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp991i3jq6.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp991i3jq6.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp991i3jq6.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmpmuxcjrcp.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n/2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp5rtqo0xc.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp991i3jq6.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmpmuxcjrcp.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp991i3jq6.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp991i3jq6.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp991i3jq6.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n/2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp5rtqo0xc.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        true\n    } else {\n        false\n    }\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1666123075,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp0ducbtpv.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmpmuxcjrcp.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp991i3jq6.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        true\n    } else {\n        false\n    }\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1666123075,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp0ducbtpv.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        true\n    } else {\n        false\n    }\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1666123075,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp0ducbtpv.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmpmuxcjrcp.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp991i3jq6.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp991i3jq6.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp991i3jq6.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp991i3jq6.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmpmuxcjrcp.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp991i3jq6.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n/2 {\n        return true;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmpucdnok7a.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp991i3jq6.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp991i3jq6.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        true\n    } else {\n        false\n    }\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1666123075,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp0ducbtpv.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp991i3jq6.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp991i3jq6.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp991i3jq6.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count: isize = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1666123075,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmpib8ukodu.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n/2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp5rtqo0xc.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp991i3jq6.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp991i3jq6.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        true\n    } else {\n        false\n    }\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1666123075,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp0ducbtpv.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp991i3jq6.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n/2 {\n        return true;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmpucdnok7a.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in arr {\n        if i == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp991i3jq6.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in arr {\n        if i == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp991i3jq6.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp991i3jq6.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count: isize = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1666123075,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmpimymvg3r.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmpmuxcjrcp.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        true\n    } else {\n        false\n    }\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1666123075,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp0ducbtpv.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in arr {\n        if i == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp991i3jq6.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp991i3jq6.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp991i3jq6.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp991i3jq6.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp991i3jq6.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp991i3jq6.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        true\n    } else {\n        false\n    }\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1666123075,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp0ducbtpv.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp991i3jq6.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp991i3jq6.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp991i3jq6.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp991i3jq6.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp991i3jq6.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp991i3jq6.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp991i3jq6.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp991i3jq6.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1666123075,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmpwmnov7pc.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp991i3jq6.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp991i3jq6.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp991i3jq6.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp991i3jq6.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmpmuxcjrcp.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1665510133,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp991i3jq6.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfn is_majority(arr: Vec<isize>, n: isize, x: isize) -> bool {\n    let mut count = 0;\n    for i in 0..n {\n        if arr[i as usize] == x {\n            count += 1;\n        }\n    }\n    if count > n / 2 {\n        true\n    } else {\n        false\n    }\n}\n\nfn main() {\n    let candidate = is_majority;\n    assert_eq!(candidate(vec![1, 2, 3, 3, 3, 3, 10], 7, 3), true);\n    assert_eq!(candidate(vec![1, 1, 2, 4, 4, 4, 6, 6], 8, 4), false);\n    assert_eq!(candidate(vec![1, 1, 1, 2, 2], 5, 1), true);\n    assert_eq!(candidate(vec![1, 1, 2, 2], 5, 1), false);\n}\n",
      "timestamp": 1666123075,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmp0ducbtpv.rs:5:12\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    }
  ]
}