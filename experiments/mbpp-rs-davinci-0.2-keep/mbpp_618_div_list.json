{
  "name": "mbpp_618_div_list",
  "language": "rs",
  "prompt": "/// Write a function to divide two lists element wise.\nfn div_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<f64> {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_618_div_list.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\nfn main() {\n    let candidate = div_list;\n    assert_eq!(candidate(vec![4, 5, 6], vec![1, 2, 3]), vec![4.0, 2.5, 2.0]);\n    assert_eq!(candidate(vec![3, 2], vec![1, 4]), vec![3.0, 0.5]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![1.8, 1.7142857142857142]);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    let mut res = Vec::new();\n    for i in 0..nums1.len() {\n        res.push(nums1[i] as f64 / nums2[i] as f64);\n    }\n    res",
    "    nums1.into_iter().zip(nums2.into_iter()).map(|(x, y)| x as f64 / y as f64).collect()",
    "    nums1.iter().zip(nums2.iter()).map(|(x, y)| *x as f64 / *y as f64).collect()",
    "    let mut result = Vec::new();\n    for (i, j) in nums1.iter().zip(nums2.iter()) {\n        result.push(*i as f64 / *j as f64);\n    }\n    result",
    "    nums1.iter().zip(nums2).map(|(x, y)| *x as f64 / *y as f64).collect()",
    "    nums1.iter().zip(nums2.iter()).map(|(x, y)| *x as f64 / *y as f64).collect()",
    "    nums1.iter().zip(nums2.iter()).map(|(x, y)| *x as f64 / *y as f64).collect()",
    "    let mut res = Vec::new();\n    for (n1, n2) in nums1.iter().zip(nums2.iter()) {\n        res.push(*n1 as f64 / *n2 as f64);\n    }\n    res",
    "    nums1.iter()\n        .zip(nums2.iter())\n        .map(|(x, y)| *x as f64 / *y as f64)\n        .collect()",
    "    nums1.iter().zip(nums2.iter()).map(|(x, y)| *x as f64 / *y as f64).collect()",
    "    let mut result = Vec::new();\n    for i in 0..nums1.len() {\n        result.push(nums1[i] as f64 / nums2[i] as f64);\n    }\n    result",
    "    let mut result: Vec<f64> = Vec::new();\n    for i in 0..nums1.len() {\n        result.push(nums1[i] as f64 / nums2[i] as f64);\n    }\n    result",
    "    nums1.iter().zip(nums2.iter()).map(|(a, b)| *a as f64 / *b as f64).collect()",
    "    let mut result = Vec::new();\n    for i in 0..nums1.len() {\n        result.push(nums1[i] as f64 / nums2[i] as f64);\n    }\n    result",
    "    let mut result = Vec::new();\n    for i in 0..nums1.len() {\n        result.push(nums1[i] as f64 / nums2[i] as f64);\n    }\n    result",
    "    let mut result = Vec::new();\n    for (i, j) in nums1.iter().zip(nums2.iter()) {\n        result.push(*i as f64 / *j as f64);\n    }\n    result",
    "    let mut result = Vec::new();\n    for (i, j) in nums1.iter().zip(nums2.iter()) {\n        result.push(i as f64 / j as f64);\n    }\n    result",
    "    let mut result = Vec::new();\n    for (num1, num2) in nums1.iter().zip(nums2.iter()) {\n        result.push(num1 as f64 / num2 as f64);\n    }\n    result",
    "    let mut result = Vec::new();\n    for (i, j) in nums1.iter().zip(nums2.iter()) {\n        result.push(*i as f64 / *j as f64);\n    }\n    result",
    "    let mut result = Vec::new();\n    for (i, j) in nums1.iter().zip(nums2.iter()) {\n        result.push(*i as f64 / *j as f64);\n    }\n    result",
    "    nums1.iter().zip(nums2.iter()).map(|(x, y)| *x as f64 / *y as f64).collect()",
    "    let mut result = Vec::new();\n    for i in 0..nums1.len() {\n        result.push(nums1[i] as f64 / nums2[i] as f64);\n    }\n    result",
    "    let mut result = Vec::new();\n    for i in 0..nums1.len() {\n        result.push(nums1[i] as f64 / nums2[i] as f64);\n    }\n    result",
    "    let mut result = Vec::new();\n    for (n1, n2) in nums1.iter().zip(nums2.iter()) {\n        result.push(n1 as f64 / n2 as f64);\n    }\n    result",
    "    nums1.iter().zip(nums2.iter()).map(|(x, y)| *x as f64 / *y as f64).collect()",
    "    let mut result = Vec::new();\n    for (n1, n2) in nums1.iter().zip(nums2.iter()) {\n        result.push(n1 as f64 / n2 as f64);\n    }\n    result",
    "    nums1.into_iter().zip(nums2).map(|(x, y)| x as f64 / y as f64).collect()",
    "    let mut result = Vec::new();\n    for i in 0..nums1.len() {\n        result.push(nums1[i] as f64 / nums2[i] as f64);\n    }\n    result",
    "    nums1.iter().zip(nums2.iter()).map(|(x, y)| *x as f64 / *y as f64).collect()",
    "    let mut result = Vec::new();\n    for (i, j) in nums1.iter().zip(nums2.iter()) {\n        result.push(*i as f64 / *j as f64);\n    }\n    result",
    "    let mut result = Vec::new();\n    for (n1, n2) in nums1.iter().zip(nums2.iter()) {\n        result.push(n1 as f64 / n2 as f64);\n    }\n    result",
    "    nums1.iter().zip(nums2.iter()).map(|(n1, n2)| n1 as f64 / n2 as f64).collect()",
    "    nums1.iter().zip(nums2.iter()).map(|(x, y)| *x as f64 / *y as f64).collect()",
    "    let mut result = Vec::new();\n    for (n1, n2) in nums1.iter().zip(nums2.iter()) {\n        result.push(n1 as f64 / n2 as f64);\n    }\n    result",
    "    let mut res = Vec::new();\n    for (n1, n2) in nums1.iter().zip(nums2.iter()) {\n        res.push(n1 as f64 / n2 as f64);\n    }\n    res",
    "    let mut result = Vec::new();\n    for (i, j) in nums1.iter().zip(nums2.iter()) {\n        result.push(i as f64 / j as f64);\n    }\n    result",
    "    nums1.iter().zip(nums2.iter()).map(|(x, y)| *x as f64 / *y as f64).collect()",
    "    nums1.iter().zip(nums2.iter()).map(|(x, y)| *x as f64 / *y as f64).collect()",
    "    nums1.iter().zip(nums2.iter()).map(|(x, y)| *x as f64 / *y as f64).collect()",
    "    let mut result = Vec::new();\n    for (i, num) in nums1.iter().enumerate() {\n        result.push(*num as f64 / nums2[i] as f64);\n    }\n    result",
    "    nums1.into_iter().zip(nums2).map(|(a, b)| a as f64 / b as f64).collect()",
    "    let mut result = Vec::new();\n    for (i, j) in nums1.iter().zip(nums2.iter()) {\n        result.push(*i as f64 / *j as f64);\n    }\n    result",
    "    let mut result = Vec::new();\n    for (n1, n2) in nums1.iter().zip(nums2.iter()) {\n        result.push(n1 as f64 / n2 as f64);\n    }\n    result",
    "    nums1.iter().zip(nums2.iter()).map(|(x, y)| x as f64 / y as f64).collect()",
    "    nums1.into_iter().zip(nums2.into_iter()).map(|(x, y)| x as f64 / y as f64).collect()",
    "    nums1.iter().zip(nums2.iter()).map(|(x, y)| *x as f64 / *y as f64).collect()",
    "    let mut res = vec![];\n    for i in 0..nums1.len() {\n        res.push(nums1[i] as f64 / nums2[i] as f64);\n    }\n    res",
    "    let mut result = Vec::new();\n    for (i, j) in nums1.iter().zip(nums2.iter()) {\n        result.push(i as f64 / j as f64);\n    }\n    result",
    "    let mut result = Vec::new();\n    for (a, b) in nums1.iter().zip(nums2.iter()) {\n        result.push(a as f64 / b as f64);\n    }\n    result",
    "    let mut result = Vec::new();\n    for (i, j) in nums1.iter().zip(nums2.iter()) {\n        result.push(*i as f64 / *j as f64);\n    }\n    result",
    "    let mut result = Vec::new();\n    for (i, j) in nums1.iter().zip(nums2.iter()) {\n        result.push(*i as f64 / *j as f64);\n    }\n    result",
    "    let mut result = Vec::new();\n    for i in 0..nums1.len() {\n        result.push(nums1[i] as f64 / nums2[i] as f64);\n    }\n    result",
    "    let mut res = Vec::new();\n    for (i, j) in nums1.iter().zip(nums2.iter()) {\n        res.push(i as f64 / j as f64);\n    }\n    res",
    "    let mut result = Vec::new();\n    for (i, j) in nums1.iter().zip(nums2.iter()) {\n        result.push(i as f64 / j as f64);\n    }\n    result",
    "    nums1.iter().zip(nums2.iter()).map(|(a, b)| *a as f64 / *b as f64).collect()",
    "    let mut result = Vec::new();\n    for i in 0..nums1.len() {\n        result.push(nums1[i] as f64 / nums2[i] as f64);\n    }\n    result",
    "    nums1.iter().zip(nums2.iter()).map(|(x, y)| *x as f64 / *y as f64).collect()",
    "    let mut res = Vec::new();\n    for i in 0..nums1.len() {\n        res.push(nums1[i] as f64 / nums2[i] as f64);\n    }\n    res",
    "    nums1.iter().zip(nums2.iter()).map(|(x, y)| *x as f64 / *y as f64).collect()",
    "    let mut ret = Vec::new();\n    for (num1, num2) in nums1.iter().zip(nums2.iter()) {\n        ret.push(num1 as f64 / num2 as f64);\n    }\n    ret",
    "    let mut result = Vec::new();\n    for (n1, n2) in nums1.iter().zip(nums2.iter()) {\n        result.push(n1 as f64 / n2 as f64);\n    }\n    result",
    "    nums1.iter().zip(nums2.iter()).map(|(x, y)| *x as f64 / *y as f64).collect()",
    "    nums1.iter().zip(nums2.iter()).map(|(x, y)| *x as f64 / *y as f64).collect()",
    "    nums1.into_iter().zip(nums2.into_iter()).map(|(x, y)| x as f64 / y as f64).collect()",
    "    let mut result = Vec::new();\n    for (i, j) in nums1.iter().zip(nums2.iter()) {\n        result.push(*i as f64 / *j as f64);\n    }\n    result",
    "    let mut result = Vec::new();\n    for (i, j) in nums1.iter().zip(nums2.iter()) {\n        result.push(i as f64 / j as f64);\n    }\n    result",
    "    let mut result: Vec<f64> = Vec::new();\n    for (i, j) in nums1.iter().zip(nums2.iter()) {\n        result.push(*i as f64 / *j as f64);\n    }\n    result",
    "    nums1.iter().zip(nums2.iter()).map(|(x, y)| *x as f64 / *y as f64).collect()",
    "    nums1.iter().zip(nums2.iter()).map(|(x, y)| x as f64 / y as f64).collect()",
    "    let mut result = Vec::new();\n    for (x, y) in nums1.iter().zip(nums2.iter()) {\n        result.push(x / y);\n    }\n    result",
    "    let mut result = Vec::new();\n    for (n1, n2) in nums1.iter().zip(nums2.iter()) {\n        result.push(n1 as f64 / n2 as f64);\n    }\n    result",
    "    let mut result = Vec::new();\n    for (i, j) in nums1.iter().zip(nums2.iter()) {\n        result.push(*i as f64 / *j as f64);\n    }\n    result",
    "    let mut result = Vec::new();\n    for (i, j) in nums1.iter().zip(nums2.iter()) {\n        result.push(*i as f64 / *j as f64);\n    }\n    result",
    "    let mut result = Vec::new();\n    for i in 0..nums1.len() {\n        result.push(nums1[i] as f64 / nums2[i] as f64);\n    }\n    result",
    "    let mut result = Vec::new();\n    for (i, j) in nums1.iter().zip(nums2.iter()) {\n        result.push(i as f64 / j as f64);\n    }\n    result",
    "    let mut res = Vec::new();\n    for i in 0..nums1.len() {\n        res.push(nums1[i] as f64 / nums2[i] as f64);\n    }\n    res",
    "    nums1.iter().zip(nums2.iter()).map(|(x, y)| *x as f64 / *y as f64).collect()",
    "    let mut result = Vec::new();\n    for i in 0..nums1.len() {\n        result.push(nums1[i] as f64 / nums2[i] as f64);\n    }\n    result",
    "    let mut result = Vec::new();\n    for (i, j) in nums1.iter().zip(nums2.iter()) {\n        result.push(*i as f64 / *j as f64);\n    }\n    result",
    "    nums1.iter().zip(nums2.iter()).map(|(x, y)| *x as f64 / *y as f64).collect()",
    "    let mut result = vec![];\n    for (i, j) in nums1.iter().zip(nums2.iter()) {\n        result.push(*i as f64 / *j as f64);\n    }\n    result",
    "    let mut result = Vec::new();\n    for (n1, n2) in nums1.iter().zip(nums2.iter()) {\n        result.push(n1 as f64 / n2 as f64);\n    }\n    result",
    "    let mut result = Vec::new();\n    for (n1, n2) in nums1.iter().zip(nums2.iter()) {\n        result.push(*n1 as f64 / *n2 as f64);\n    }\n    result",
    "    nums1.into_iter().zip(nums2.into_iter()).map(|(x, y)| x as f64 / y as f64).collect()",
    "    nums1.iter().zip(nums2.iter()).map(|(x, y)| *x as f64 / *y as f64).collect()",
    "    nums1.iter().zip(nums2.iter()).map(|(x, y)| *x as f64 / *y as f64).collect()",
    "    let mut result = Vec::new();\n    for (i, j) in nums1.iter().zip(nums2.iter()) {\n        result.push(*i as f64 / *j as f64);\n    }\n    result",
    "    let mut result = Vec::new();\n    for i in 0..nums1.len() {\n        result.push(nums1[i] as f64 / nums2[i] as f64);\n    }\n    result",
    "    let mut result: Vec<f64> = Vec::new();\n    for i in 0..nums1.len() {\n        result.push(nums1[i] as f64 / nums2[i] as f64);\n    }\n    result",
    "    let mut result = Vec::new();\n    for (i, j) in nums1.iter().zip(nums2.iter()) {\n        result.push(i as f64 / j as f64);\n    }\n    result",
    "    nums1.into_iter().zip(nums2.into_iter()).map(|(x, y)| x as f64 / y as f64).collect()",
    "    let mut result = Vec::new();\n    for i in 0..nums1.len() {\n        result.push(nums1[i] as f64 / nums2[i] as f64);\n    }\n    result",
    "    let mut result = Vec::new();\n    for i in 0..nums1.len() {\n        result.push(nums1[i] as f64 / nums2[i] as f64);\n    }\n    result",
    "    let mut result = Vec::new();\n    for (n1, n2) in nums1.iter().zip(nums2.iter()) {\n        result.push(n1 as f64 / n2 as f64);\n    }\n    result",
    "    nums1.iter().zip(nums2.iter()).map(|(a, b)| *a as f64 / *b as f64).collect()",
    "    let mut res = Vec::new();\n    for (n1, n2) in nums1.iter().zip(nums2.iter()) {\n        res.push(n1 as f64 / n2 as f64);\n    }\n    res",
    "    let mut res = Vec::new();\n    for i in 0..nums1.len() {\n        res.push(nums1[i] as f64 / nums2[i] as f64);\n    }\n    res",
    "    let mut result = Vec::new();\n    for i in 0..nums1.len() {\n        result.push(nums1[i] as f64 / nums2[i] as f64);\n    }\n    result",
    "    nums1.iter().zip(nums2).map(|(x, y)| *x as f64 / *y as f64).collect()",
    "    let mut result = Vec::new();\n    for (i, j) in nums1.iter().zip(nums2.iter()) {\n        result.push(i as f64 / j as f64);\n    }\n    result",
    "    nums1.iter().zip(nums2.iter()).map(|(x, y)| *x as f64 / *y as f64).collect()",
    "    let mut result: Vec<f64> = Vec::new();\n    for i in 0..nums1.len() {\n        result.push(nums1[i] as f64 / nums2[i] as f64);\n    }\n    result",
    "    nums1.iter().zip(nums2.iter()).map(|(x, y)| *x as f64 / *y as f64).collect()",
    "    nums1.iter().zip(nums2.iter()).map(|(x, y)| *x as f64 / *y as f64).collect()",
    "    let mut result = Vec::new();\n    for (num1, num2) in nums1.iter().zip(nums2.iter()) {\n        result.push(num1 as f64 / num2 as f64);\n    }\n    result",
    "    nums1.iter().zip(nums2.iter()).map(|(x, y)| *x as f64 / *y as f64).collect()",
    "    nums1.iter().zip(nums2.iter()).map(|(x, y)| *x as f64 / *y as f64).collect()",
    "    let mut result = Vec::new();\n    for (i, j) in nums1.iter().zip(nums2.iter()) {\n        result.push(i as f64 / j as f64);\n    }\n    result",
    "    nums1.iter().zip(nums2.iter()).map(|(x, y)| *x as f64 / *y as f64).collect()",
    "    let mut result = Vec::new();\n    for (i, j) in nums1.iter().zip(nums2.iter()) {\n        result.push(*i as f64 / *j as f64);\n    }\n    result",
    "    let mut result = Vec::new();\n    for (i, j) in nums1.iter().zip(nums2.iter()) {\n        result.push(*i as f64 / *j as f64);\n    }\n    result",
    "    let mut result = Vec::new();\n    for (i, j) in nums1.iter().zip(nums2.iter()) {\n        result.push(i as f64 / j as f64);\n    }\n    result",
    "    let mut result = Vec::new();\n    for (i, j) in nums1.iter().zip(nums2.iter()) {\n        result.push(i as f64 / j as f64);\n    }\n    result",
    "    nums1.into_iter().zip(nums2).map(|(a, b)| a as f64 / b as f64).collect()",
    "    nums1.iter().zip(nums2).map(|(x, y)| *x as f64 / *y as f64).collect()",
    "    nums1.iter().zip(nums2.iter()).map(|(x, y)| *x as f64 / *y as f64).collect()",
    "    nums1.iter().zip(nums2.iter()).map(|(x, y)| *x as f64 / *y as f64).collect()",
    "    nums1.iter().zip(nums2.iter()).map(|(x, y)| *x as f64 / *y as f64).collect()",
    "    nums1.iter().zip(nums2.iter()).map(|(x, y)| *x as f64 / *y as f64).collect()",
    "    nums1.iter().zip(nums2.iter()).map(|(x, y)| *x as f64 / *y as f64).collect()",
    "    let mut result = Vec::new();\n    for (n1, n2) in nums1.iter().zip(nums2.iter()) {\n        result.push(n1 as f64 / n2 as f64);\n    }\n    result",
    "    let mut result = Vec::new();\n    for i in 0..nums1.len() {\n        result.push(nums1[i] as f64 / nums2[i] as f64);\n    }\n    result",
    "    let mut result = vec![];\n    for i in 0..nums1.len() {\n        result.push(nums1[i] as f64 / nums2[i] as f64);\n    }\n    result",
    "    nums1.iter().zip(nums2.iter()).map(|(x, y)| *x as f64 / *y as f64).collect()",
    "    let mut res = Vec::new();\n    for i in 0..nums1.len() {\n        res.push(nums1[i] as f64 / nums2[i] as f64);\n    }\n    res",
    "    nums1.iter().zip(nums2.iter()).map(|(x, y)| *x as f64 / *y as f64).collect()",
    "    nums1.iter().zip(nums2.iter()).map(|(x, y)| *x as f64 / *y as f64).collect()",
    "    nums1.iter().zip(nums2.iter()).map(|(x, y)| *x as f64 / *y as f64).collect()",
    "    let mut result = Vec::new();\n    for i in 0..nums1.len() {\n        result.push(nums1[i] as f64 / nums2[i] as f64);\n    }\n    result",
    "    let mut result = Vec::new();\n    for (i, j) in nums1.iter().zip(nums2.iter()) {\n        result.push(*i as f64 / *j as f64);\n    }\n    result",
    "    let mut result = Vec::new();\n    for i in 0..nums1.len() {\n        result.push(nums1[i] as f64 / nums2[i] as f64);\n    }\n    result",
    "    nums1.iter().zip(nums2.iter()).map(|(a, b)| *a as f64 / *b as f64).collect()",
    "    let mut result = Vec::new();\n    for i in 0..nums1.len() {\n        result.push(nums1[i] as f64 / nums2[i] as f64);\n    }\n    result",
    "    nums1.iter().zip(nums2.iter()).map(|(x, y)| x as f64 / y as f64).collect()",
    "    let mut result = Vec::new();\n    for (n1, n2) in nums1.iter().zip(nums2.iter()) {\n        result.push(n1 as f64 / n2 as f64);\n    }\n    result",
    "    nums1.iter().zip(nums2.iter()).map(|(x, y)| *x as f64 / *y as f64).collect()",
    "    nums1.iter().zip(nums2.iter()).map(|(x, y)| *x as f64 / *y as f64).collect()",
    "    nums1.iter().zip(nums2.iter()).map(|(x, y)| *x as f64 / *y as f64).collect()",
    "    nums1.iter().zip(nums2.iter()).map(|(x, y)| x as f64 / y as f64).collect()",
    "    let mut result = Vec::new();\n    for (i, j) in nums1.iter().zip(nums2.iter()) {\n        result.push(i as f64 / j as f64);\n    }\n    result",
    "    nums1.iter().zip(nums2.iter()).map(|(x, y)| *x as f64 / *y as f64).collect()",
    "    let mut result = Vec::new();\n    for (n1, n2) in nums1.iter().zip(nums2.iter()) {\n        result.push(n1 as f64 / n2 as f64);\n    }\n    result",
    "    let mut result = Vec::new();\n    for (i, j) in nums1.iter().zip(nums2.iter()) {\n        result.push(*i as f64 / *j as f64);\n    }\n    result",
    "    let mut res = Vec::new();\n    for (i, j) in nums1.iter().zip(nums2.iter()) {\n        res.push(*i as f64 / *j as f64);\n    }\n    res",
    "    let mut result = vec![];\n    for (n1, n2) in nums1.iter().zip(nums2.iter()) {\n        result.push(n1 as f64 / n2 as f64);\n    }\n    result",
    "    let mut result = Vec::new();\n    for i in 0..nums1.len() {\n        result.push(nums1[i] as f64 / nums2[i] as f64);\n    }\n    result",
    "    nums1.into_iter().zip(nums2).map(|(x, y)| x as f64 / y as f64).collect()",
    "    nums1.iter().zip(nums2.iter()).map(|(x, y)| *x as f64 / *y as f64).collect()",
    "    let mut result = Vec::new();\n    for (n1, n2) in nums1.iter().zip(nums2.iter()) {\n        result.push(n1 as f64 / n2 as f64);\n    }\n    result",
    "    let mut res = Vec::new();\n    for (n1, n2) in nums1.iter().zip(nums2.iter()) {\n        res.push(n1 as f64 / n2 as f64);\n    }\n    res",
    "    let mut result = Vec::new();\n    for i in 0..nums1.len() {\n        result.push(nums1[i] as f64 / nums2[i] as f64);\n    }\n    result",
    "    let mut result = Vec::new();\n    for (n1, n2) in nums1.iter().zip(nums2.iter()) {\n        result.push(*n1 as f64 / *n2 as f64);\n    }\n    result",
    "    let mut result = Vec::new();\n    for (x, y) in nums1.iter().zip(nums2.iter()) {\n        result.push(x as f64 / y as f64);\n    }\n    result",
    "    nums1.iter().zip(nums2.iter()).map(|(x, y)| *x as f64 / *y as f64).collect()",
    "    let mut result: Vec<f64> = Vec::new();\n    for i in 0..nums1.len() {\n        result.push(nums1[i] as f64 / nums2[i] as f64);\n    }\n    result",
    "    let mut result = Vec::new();\n    for (n1, n2) in nums1.iter().zip(nums2.iter()) {\n        result.push(n1 as f64 / n2 as f64);\n    }\n    result",
    "    let mut result = Vec::new();\n    for i in 0..nums1.len() {\n        result.push(nums1[i] as f64 / nums2[i] as f64);\n    }\n    result",
    "    let mut result = Vec::new();\n    for i in 0..nums1.len() {\n        result.push(nums1[i] as f64 / nums2[i] as f64);\n    }\n    result",
    "    nums1.iter().zip(nums2.iter()).map(|(x, y)| *x as f64 / *y as f64).collect()",
    "    nums1.iter().zip(nums2.iter()).map(|(x, y)| *x as f64 / *y as f64).collect()",
    "    let mut res = Vec::new();\n    for (i, j) in nums1.iter().zip(nums2.iter()) {\n        res.push(*i as f64 / *j as f64);\n    }\n    res",
    "    nums1.into_iter().zip(nums2.into_iter()).map(|(x, y)| x as f64 / y as f64).collect()",
    "    nums1.iter().zip(nums2.iter()).map(|(x, y)| *x as f64 / *y as f64).collect()",
    "    let mut result = Vec::new();\n    for i in 0..nums1.len() {\n        result.push(nums1[i] as f64 / nums2[i] as f64);\n    }\n    result",
    "    nums1.iter().zip(nums2.iter()).map(|(x, y)| *x as f64 / *y as f64).collect()",
    "    let mut result = Vec::new();\n    for i in 0..nums1.len() {\n        result.push(nums1[i] as f64 / nums2[i] as f64);\n    }\n    result",
    "    let mut result = Vec::new();\n    for (n1, n2) in nums1.iter().zip(nums2.iter()) {\n        result.push(n1 as f64 / n2 as f64);\n    }\n    result",
    "    let mut result = Vec::new();\n    for i in 0..nums1.len() {\n        if nums2[i] != 0 {\n            result.push(nums1[i] as f64 / nums2[i] as f64);\n        } else {\n            result.push(0.0);\n        }\n    }\n    result",
    "    let mut result = Vec::new();\n    for (i, j) in nums1.iter().zip(nums2.iter()) {\n        result.push(i as f64 / j as f64);\n    }\n    result",
    "    let mut result = Vec::new();\n    for i in 0..nums1.len() {\n        result.push(nums1[i] as f64 / nums2[i] as f64);\n    }\n    result",
    "    let mut result = Vec::new();\n    for i in 0..nums1.len() {\n        result.push(nums1[i] as f64 / nums2[i] as f64);\n    }\n    result",
    "    let mut res = Vec::new();\n    for (n1, n2) in nums1.iter().zip(nums2.iter()) {\n        res.push(n1 as f64 / n2 as f64);\n    }\n    res",
    "    let mut result = Vec::new();\n    for (n1, n2) in nums1.iter().zip(nums2.iter()) {\n        result.push(n1 as f64 / n2 as f64);\n    }\n    result",
    "    let mut result = Vec::new();\n    for (i, j) in nums1.iter().zip(nums2.iter()) {\n        result.push(*i as f64 / *j as f64);\n    }\n    result",
    "    let mut result = Vec::new();\n    for i in 0..nums1.len() {\n        result.push(nums1[i] as f64 / nums2[i] as f64);\n    }\n    result",
    "    let mut res = Vec::new();\n    for (i, j) in nums1.iter().zip(nums2.iter()) {\n        res.push(*i as f64 / *j as f64);\n    }\n    res",
    "    nums1.iter().zip(nums2.iter()).map(|(x, y)| *x as f64 / *y as f64).collect()",
    "    nums1.iter().zip(nums2.iter()).map(|(x, y)| *x as f64 / *y as f64).collect()",
    "    nums1.iter().zip(nums2.iter()).map(|(x, y)| *x as f64 / *y as f64).collect()",
    "    let mut result = Vec::new();\n    for (n1, n2) in nums1.iter().zip(nums2.iter()) {\n        result.push(n1 as f64 / n2 as f64);\n    }\n    result",
    "    let mut res = Vec::new();\n    for i in 0..nums1.len() {\n        res.push(nums1[i] as f64 / nums2[i] as f64);\n    }\n    res",
    "    nums1.iter().zip(nums2.iter()).map(|(x, y)| *x as f64 / *y as f64).collect()",
    "    let mut result = Vec::new();\n    for (n1, n2) in nums1.iter().zip(nums2.iter()) {\n        result.push(n1 as f64 / n2 as f64);\n    }\n    result",
    "    let mut result = Vec::new();\n    for (i, j) in nums1.iter().zip(nums2.iter()) {\n        result.push(*i as f64 / *j as f64);\n    }\n    result",
    "    let mut res = Vec::new();\n    for i in 0..nums1.len() {\n        res.push(nums1[i] as f64 / nums2[i] as f64);\n    }\n    res",
    "    nums1.iter().zip(nums2.iter()).map(|(x, y)| *x as f64 / *y as f64).collect()",
    "    nums1.iter().zip(nums2.iter()).map(|(x, y)| *x as f64 / *y as f64).collect()",
    "    let mut result = Vec::new();\n    for i in 0..nums1.len() {\n        result.push(nums1[i] as f64 / nums2[i] as f64);\n    }\n    result",
    "    let mut result = Vec::new();\n    for i in 0..nums1.len() {\n        result.push(nums1[i] as f64 / nums2[i] as f64);\n    }\n    result",
    "    let mut result = Vec::new();\n    for (i, j) in nums1.iter().zip(nums2.iter()) {\n        result.push(i as f64 / j as f64);\n    }\n    result",
    "    let mut result = Vec::new();\n    for (i, j) in nums1.iter().zip(nums2.iter()) {\n        result.push(*i as f64 / *j as f64);\n    }\n    result",
    "    let mut result = Vec::new();\n    for (n1, n2) in nums1.iter().zip(nums2.iter()) {\n        result.push(n1 as f64 / n2 as f64);\n    }\n    result",
    "    nums1.iter().zip(nums2.iter()).map(|(x, y)| *x as f64 / *y as f64).collect()",
    "    nums1.into_iter().zip(nums2.into_iter()).map(|(x, y)| x as f64 / y as f64).collect()",
    "    nums1.into_iter().zip(nums2.into_iter()).map(|(x, y)| x as f64 / y as f64).collect()",
    "    nums1.iter().zip(nums2.iter()).map(|(x, y)| x as f64 / y as f64).collect()",
    "    let mut result = Vec::new();\n    for i in 0..nums1.len() {\n        let div = nums1[i] as f64 / nums2[i] as f64;\n        result.push(div);\n    }\n    result",
    "    nums1.iter().zip(nums2.iter()).map(|(x, y)| *x as f64 / *y as f64).collect()",
    "    let mut result = Vec::new();\n    for (n1, n2) in nums1.iter().zip(nums2.iter()) {\n        result.push(n1 as f64 / n2 as f64);\n    }\n    result",
    "    let mut result = Vec::new();\n    for (n1, n2) in nums1.iter().zip(nums2.iter()) {\n        result.push(n1 as f64 / n2 as f64);\n    }\n    result"
  ]
}