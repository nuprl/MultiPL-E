{
  "name": "mbpp_737_check_str",
  "language": "rs",
  "prompt": "/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfn check_str(string: String) -> bool {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_737_check_str.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\nfn main() {\n    let candidate = check_str;\n    assert_eq!(candidate(String::from(\"annie\")), true);\n    assert_eq!(candidate(String::from(\"dawood\")), false);\n    assert_eq!(candidate(String::from(\"Else\")), true);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    let re = Regex::new(r\"^[aeiou]\").unwrap();\n    re.is_match(&string)",
    "    let re = Regex::new(r\"^[aeiou]\").unwrap();\n    re.is_match(&string)",
    "    let re = Regex::new(r\"^[aeiou]\").unwrap();\n    re.is_match(&string)",
    "    let re = Regex::new(r\"^[aeiou]\").unwrap();\n    re.is_match(&string)",
    "    let re = Regex::new(r\"^[aeiouAEIOU]\").unwrap();\n    re.is_match(&string)",
    "    let re = Regex::new(r\"^[aeiou]\").unwrap();\n    re.is_match(&string)",
    "    let re = Regex::new(r\"^[aeiou]\").unwrap();\n    re.is_match(&string)",
    "    let regex = Regex::new(r\"^[aeiou]\").unwrap();\n    regex.is_match(&string)",
    "    let re = Regex::new(r\"^[aeiou]\").unwrap();\n    re.is_match(&string)",
    "    let re = Regex::new(r\"^[aeiou]\").unwrap();\n    re.is_match(&string)",
    "    let re = Regex::new(r\"^[aeiou]\").unwrap();\n    re.is_match(&string)",
    "    let re = Regex::new(r\"^[aeiou]\").unwrap();\n    re.is_match(&string)",
    "    let re = Regex::new(r\"^[aeiou]\").unwrap();\n    re.is_match(&string)",
    "    let re = Regex::new(r\"^[aeiou]\").unwrap();\n    re.is_match(&string)",
    "    let re = Regex::new(r\"^[aeiou]\").unwrap();\n    re.is_match(&string)",
    "    let regex = Regex::new(r\"^[aeiou]\").unwrap();\n    regex.is_match(&string)",
    "    let re = Regex::new(r\"^[aeiou]\").unwrap();\n    re.is_match(&string)",
    "    let re = Regex::new(r\"^[aeiou]\").unwrap();\n    re.is_match(&string)",
    "    let re = Regex::new(r\"^[aeiouAEIOU]\").unwrap();\n    re.is_match(&string)",
    "    let re = Regex::new(r\"^[aeiou]\").unwrap();\n    re.is_match(&string)"
  ]
}