{
  "name": "mbpp_285_text_match_two_three",
  "language": "rs",
  "prompt": "/// Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\nfn text_match_two_three(text: String) -> bool {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_285_text_match_two_three.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\nfn main() {\n    let candidate = text_match_two_three;\n    assert_eq!(candidate(String::from(\"ac\")), false);\n    assert_eq!(candidate(String::from(\"dc\")), false);\n    assert_eq!(candidate(String::from(\"abbbba\")), true);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"^.*ab{2,3}.*$\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let mut chars = text.chars();\n    let mut a_count = 0;\n    let mut b_count = 0;\n    while let Some(c) = chars.next() {\n        if c == 'a' {\n            a_count += 1;\n        } else if c == 'b' {\n            b_count += 1;\n        }\n    }\n    a_count == b_count && (a_count == 2 || a_count == 3)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    lazy_static! {\n        static ref RE: Regex = Regex::new(r\"ab{2,3}\").unwrap();\n    }\n    RE.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)"
  ]
}