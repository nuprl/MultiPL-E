{
  "name": "mbpp_285_text_match_two_three",
  "language": "rs",
  "prompt": "/// Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\nfn text_match_two_three(text: String) -> bool {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_285_text_match_two_three.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\nfn main() {\n    let candidate = text_match_two_three;\n    assert_eq!(candidate(String::from(\"ac\")), false);\n    assert_eq!(candidate(String::from(\"dc\")), false);\n    assert_eq!(candidate(String::from(\"abbbba\")), true);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"^.*ab{2,3}.*$\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let mut chars = text.chars();\n    let mut a_count = 0;\n    let mut b_count = 0;\n    while let Some(c) = chars.next() {\n        if c == 'a' {\n            a_count += 1;\n        } else if c == 'b' {\n            b_count += 1;\n        }\n    }\n    a_count == b_count && (a_count == 2 || a_count == 3)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    lazy_static! {\n        static ref RE: Regex = Regex::new(r\"ab{2,3}\").unwrap();\n    }\n    RE.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let mut chars = text.chars();\n    let mut a_count = 0;\n    let mut b_count = 0;\n    while let Some(c) = chars.next() {\n        if c == 'a' {\n            a_count += 1;\n        } else if c == 'b' {\n            b_count += 1;\n        }\n    }\n    a_count == 1 && (b_count == 2 || b_count == 3)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let mut chars = text.chars();\n    let mut a_count = 0;\n    let mut b_count = 0;\n    while let Some(c) = chars.next() {\n        if c == 'a' {\n            a_count += 1;\n        } else if c == 'b' {\n            b_count += 1;\n        }\n    }\n    a_count == b_count && a_count > 0",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let mut chars = text.chars();\n    let mut a_count = 0;\n    let mut b_count = 0;\n    while let Some(c) = chars.next() {\n        if c == 'a' {\n            a_count += 1;\n        } else if c == 'b' {\n            b_count += 1;\n        }\n    }\n    a_count == 1 && (b_count == 2 || b_count == 3)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    lazy_static! {\n        static ref RE: Regex = Regex::new(r\"ab{2,3}\").unwrap();\n    }\n    RE.is_match(&text)",
    "    let mut chars = text.chars();\n    let mut a_count = 0;\n    let mut b_count = 0;\n\n    while let Some(c) = chars.next() {\n        if c == 'a' {\n            a_count += 1;\n        } else if c == 'b' {\n            b_count += 1;\n        }\n    }\n\n    a_count == b_count && (a_count == 2 || a_count == 3)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let mut chars = text.chars();\n    let mut count = 0;\n    while let Some(c) = chars.next() {\n        if c == 'a' {\n            while let Some(c) = chars.next() {\n                if c == 'b' {\n                    count += 1;\n                } else {\n                    break;\n                }\n            }\n        }\n    }\n    count == 2 || count == 3",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let mut chars = text.chars();\n    let mut a_count = 0;\n    let mut b_count = 0;\n    let mut c_count = 0;\n    while let Some(c) = chars.next() {\n        if c == 'a' {\n            a_count += 1;\n        } else if c == 'b' {\n            b_count += 1;\n        } else if c == 'c' {\n            c_count += 1;\n        }\n    }\n    a_count == 1 && (b_count == 2 || b_count == 3) && c_count == 0",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let mut chars = text.chars();\n    let mut a_count = 0;\n    let mut b_count = 0;\n    loop {\n        match chars.next() {\n            Some('a') => a_count += 1,\n            Some('b') => b_count += 1,\n            Some(_) => {},\n            None => break,\n        }\n    }\n    a_count == 1 && (b_count == 2 || b_count == 3)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"^.*ab{2,3}.*$\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let mut chars = text.chars();\n    let mut a_count = 0;\n    let mut b_count = 0;\n    let mut c_count = 0;\n    let mut d_count = 0;\n    let mut e_count = 0;\n    let mut f_count = 0;\n    let mut g_count = 0;\n    let mut h_count = 0;\n    let mut i_count = 0;\n    let mut j_count = 0;\n    let mut k_count = 0;\n    let mut l_count = 0;\n    let mut m_count = 0;\n    let mut n_count = 0;\n    let mut o_count = 0;\n    let mut p_count = 0;\n    let mut q_count = 0;\n    let mut r_count = 0;\n    let mut s_count = 0;\n    let mut t_count = 0;\n    let mut u_count = 0;\n    let mut v_count = 0;\n    let mut w_count = 0;\n    let mut x_count = 0;\n    let mut y_count = 0;\n    let mut z_count = 0;\n    while let Some(c) = chars.next() {\n        match c {\n            'a' => a_count += 1,\n            'b' => b_count += 1,\n            'c' => c_count += 1,\n            'd' => d_count += 1,\n            'e' => e_count += 1,\n            'f' => f_count += 1,\n            'g' => g_count += 1,\n            'h' => h_count += 1,\n            'i' => i_count += 1,\n            'j' => j_count += 1,\n            'k' => k_count += 1,\n            'l' => l_count += 1,\n            'm' => m_count += 1,\n            'n' => n_count += 1,\n            'o' => o_count += 1,\n            'p' => p_count += 1,\n            'q' => q_count += 1,\n            'r' => r_count += 1,\n            's' =>",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    lazy_static! {\n        static ref RE: Regex = Regex::new(r\"ab{2,3}\").unwrap();\n    }\n    RE.is_match(&text)",
    "    let re = Regex::new(r\"^.*a(b{2,3}).*$\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    text.contains(\"abb\") || text.contains(\"abbb\")",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    text.contains(\"abb\") || text.contains(\"abbb\")",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let mut chars = text.chars();\n    let mut a_count = 0;\n    let mut b_count = 0;\n    while let Some(c) = chars.next() {\n        if c == 'a' {\n            a_count += 1;\n        } else if c == 'b' {\n            b_count += 1;\n        }\n    }\n    a_count == 1 && (b_count == 2 || b_count == 3)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    lazy_static! {\n        static ref RE: Regex = Regex::new(r\"ab{2,3}\").unwrap();\n    }\n    RE.is_match(&text)",
    "    let mut chars = text.chars();\n    let mut count = 0;\n    let mut found_a = false;\n\n    while let Some(c) = chars.next() {\n        if c == 'a' {\n            found_a = true;\n        } else if found_a && c == 'b' {\n            count += 1;\n        } else {\n            return false;\n        }\n    }\n\n    count == 2 || count == 3",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let mut chars = text.chars();\n    let mut a_count = 0;\n    let mut b_count = 0;\n    while let Some(c) = chars.next() {\n        if c == 'a' {\n            a_count += 1;\n        } else if c == 'b' {\n            b_count += 1;\n        }\n    }\n    a_count == 1 && (b_count == 2 || b_count == 3)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let mut chars = text.chars();\n    let mut a_count = 0;\n    let mut b_count = 0;\n    while let Some(c) = chars.next() {\n        if c == 'a' {\n            a_count += 1;\n        } else if c == 'b' {\n            b_count += 1;\n        }\n    }\n    a_count == 1 && (b_count == 2 || b_count == 3)",
    "    let mut chars = text.chars();\n    let mut a_count = 0;\n    let mut b_count = 0;\n    while let Some(c) = chars.next() {\n        if c == 'a' {\n            a_count += 1;\n        } else if c == 'b' {\n            b_count += 1;\n        }\n    }\n    a_count == 1 && (b_count == 2 || b_count == 3)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    lazy_static! {\n        static ref RE: Regex = Regex::new(r\"ab{2,3}\").unwrap();\n    }\n    RE.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    lazy_static! {\n        static ref RE: Regex = Regex::new(r\"ab{2,3}\").unwrap();\n    }\n    RE.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let mut chars = text.chars();\n    let mut a_count = 0;\n    let mut b_count = 0;\n    while let Some(c) = chars.next() {\n        if c == 'a' {\n            a_count += 1;\n        } else if c == 'b' {\n            b_count += 1;\n        }\n    }\n    a_count == 1 && (b_count == 2 || b_count == 3)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let mut chars = text.chars();\n    let mut a_count = 0;\n    let mut b_count = 0;\n    while let Some(c) = chars.next() {\n        if c == 'a' {\n            a_count += 1;\n        } else if c == 'b' {\n            b_count += 1;\n        }\n    }\n    a_count == 1 && (b_count == 2 || b_count == 3)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    lazy_static! {\n        static ref RE: Regex = Regex::new(r\"ab{2,3}\").unwrap();\n    }\n    RE.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let mut chars = text.chars();\n    let mut prev = chars.next();\n    let mut count = 0;\n    for c in chars {\n        if prev == Some('a') && c == 'b' {\n            count += 1;\n        }\n        prev = Some(c);\n    }\n    count == 2 || count == 3",
    "    lazy_static! {\n        static ref RE: Regex = Regex::new(r\"^.*?ab{2,3}.*$\").unwrap();\n    }\n    RE.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let mut chars = text.chars();\n    let mut a_count = 0;\n    let mut b_count = 0;\n    while let Some(c) = chars.next() {\n        if c == 'a' {\n            a_count += 1;\n        } else if c == 'b' {\n            b_count += 1;\n        }\n    }\n    a_count == 1 && (b_count == 2 || b_count == 3)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let mut chars = text.chars();\n    let mut a_count = 0;\n    let mut b_count = 0;\n    while let Some(c) = chars.next() {\n        if c == 'a' {\n            a_count += 1;\n        } else if c == 'b' {\n            b_count += 1;\n        }\n    }\n    a_count == 1 && (b_count == 2 || b_count == 3)",
    "    let re = Regex::new(r\"^.*ab{2,3}.*$\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"ab{2,3}\").unwrap();\n    re.is_match(&text)"
  ]
}