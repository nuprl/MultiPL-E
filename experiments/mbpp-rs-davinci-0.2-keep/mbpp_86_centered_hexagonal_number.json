{
  "name": "mbpp_86_centered_hexagonal_number",
  "language": "rs",
  "prompt": "/// Write a function to find nth centered hexagonal number.\nfn centered_hexagonal_number(n: isize) -> isize {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_86_centered_hexagonal_number.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\nfn main() {\n    let candidate = centered_hexagonal_number;\n    assert_eq!(candidate(10), 271);\n    assert_eq!(candidate(2), 7);\n    assert_eq!(candidate(9), 217);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    3 * n * (n - 1) + 1",
    "    n * (2 * n - 1)",
    "    n * (2 * n - 1)",
    "    3 * n * (n - 1) + 1",
    "    3 * n * (n - 1) + 1",
    "    (n * (2 * n - 1))",
    "    n * (2 * n - 1)",
    "    3 * n * (n - 1) + 1",
    "    3 * n * (n - 1) + 1",
    "    n * (2 * n - 1)",
    "    n * (2 * n - 1)",
    "    3 * n * (n - 1) + 1",
    "    3 * n * (n - 1) + 1",
    "    3 * n * (n - 1) + 1",
    "    n * (2 * n - 1)",
    "    n * (2 * n - 1)",
    "    n * (2 * n - 1)",
    "    n * (2 * n - 1)",
    "    n * (2 * n - 1)",
    "    3 * n * (n - 1) + 1",
    "    3 * n * (n - 1) + 1",
    "    n * (2 * n - 1)",
    "    n * (2 * n - 1)",
    "    (n * (2 * n - 1))",
    "    n * (2 * n - 1)",
    "    n * (2 * n - 1)",
    "    3 * n * (n - 1) + 1",
    "    n * (2 * n - 1)",
    "    3 * n * (n - 1) + 1",
    "    3 * n * (n - 1) + 1",
    "    3 * n * (n - 1) + 1",
    "    n * (2 * n - 1)",
    "    (n * (2 * n - 1))",
    "    (n * (2 * n - 1))",
    "    n * (2 * n - 1)",
    "    n * (2 * n - 1)",
    "    n * (2 * n - 1)",
    "    n * (2 * n - 1)",
    "    3 * n * (n - 1) + 1",
    "    3 * n * (n - 1) + 1",
    "    3 * n * (n - 1) + 1",
    "    3 * n * (n - 1) + 1",
    "    n * (2 * n - 1)",
    "    3 * n * (n - 1) + 1",
    "    3 * n * (n - 1) + 1",
    "    n * (2 * n - 1)",
    "    n * (2 * n - 1)",
    "    3 * n * (n - 1) + 1",
    "    3 * n * (n - 1) + 1",
    "    3 * n * (n - 1) + 1",
    "    n * (2 * n - 1)",
    "    (n * (2 * n - 1))",
    "    3 * n * (n - 1) + 1",
    "    n * (2 * n - 1)",
    "    n * (2 * n - 1)",
    "    let n = n as f64;\n    let n = n * (2.0 * n - 1.0);\n    n as isize",
    "    (n * (2 * n - 1))",
    "    3 * n * (n - 1) + 1",
    "    3 * n * (n - 1) + 1",
    "    3 * n * (n - 1) + 1",
    "    n * (2 * n - 1)",
    "    3 * n * (n - 1) + 1",
    "    n * (2 * n - 1)",
    "    3 * n * (n - 1) + 1",
    "    n * (2 * n - 1)",
    "    n * (2 * n - 1)",
    "    3 * n * (n - 1) + 1",
    "    n * (2 * n - 1)",
    "    (n * (2 * n - 1))",
    "    n * (2 * n - 1)",
    "    3 * n * (n - 1) + 1",
    "    n * (2 * n - 1)",
    "    3 * n * (n - 1) + 1",
    "    n * (2 * n - 1)",
    "    n * (2 * n - 1)",
    "    n * (2 * n - 1)",
    "    n * (2 * n - 1)",
    "    n * (2 * n - 1)",
    "    n * (2 * n - 1)",
    "    n * (2 * n - 1)",
    "    n * (2 * n - 1)",
    "    n * (2 * n - 1)",
    "    3 * n * (n - 1) + 1",
    "    n * (2 * n - 1)",
    "    n * (2 * n - 1)",
    "    n * (2 * n - 1)",
    "    n * (2 * n - 1)",
    "    n * (2 * n - 1)",
    "    n * (2 * n - 1)",
    "    n * (2 * n - 1)",
    "    3 * n * (n - 1) + 1",
    "    n * (2 * n - 1)",
    "    3 * n * (n - 1) + 1",
    "    3 * n * (n - 1) + 1",
    "    n * (2 * n - 1)",
    "    n * (2 * n - 1)",
    "    (n * (2 * n - 1))",
    "    let mut n = n;\n    let mut result = 0;\n    while n > 0 {\n        result += 6 * n - 1;\n        n -= 1;\n    }\n    result",
    "    3 * n * (n - 1) + 1",
    "    3 * n * (n - 1) + 1",
    "    3 * n * (n - 1) + 1",
    "    3 * n * (n - 1) + 1",
    "    3 * n * (n - 1) + 1",
    "    3 * n * (n - 1) + 1",
    "    3 * n * (n - 1) + 1",
    "    n * (2 * n - 1)",
    "    n * (2 * n - 1)",
    "    n * (2 * n - 1)",
    "    n * (2 * n - 1)",
    "    (n * (2 * n - 1))",
    "    n * (2 * n - 1)",
    "    n * (2 * n - 1)",
    "    (n * (2 * n - 1))",
    "    n * (2 * n - 1)",
    "    n * (2 * n - 1)",
    "    let n = n as f64;\n    let x = (n * 2.0).sqrt();\n    let x = x.floor();\n    let x = x as isize;\n    let y = x * (x - 1) + 1;\n    y",
    "    n * (2 * n - 1)",
    "    n * (2 * n - 1)",
    "    n * (2 * n - 1)",
    "    n * (2 * n - 1)",
    "    (n * (2 * n - 1))",
    "    3 * n * (n - 1) + 1",
    "    n * (2 * n - 1)",
    "    n * (2 * n - 1)",
    "    3 * n * (n - 1) + 1",
    "    n * (2 * n - 1)",
    "    n * (2 * n - 1)",
    "    n * (2 * n - 1)",
    "    (n * (2 * n - 1))",
    "    3 * n * (n - 1) + 1",
    "    n * (2 * n - 1)",
    "    n * (2 * n - 1)",
    "    n * (2 * n - 1)",
    "    n * (2 * n - 1)",
    "    n * (2 * n - 1)",
    "    n * (2 * n - 1)",
    "    n * (2 * n - 1)",
    "    3 * n * (n - 1) + 1",
    "    3 * n * (n - 1) + 1",
    "    (n * (2 * n - 1))",
    "    3 * n * (n - 1) + 1",
    "    n * (2 * n - 1)",
    "    3 * n * (n - 1) + 1",
    "    (n * (2 * n - 1))",
    "    n * (2 * n - 1)",
    "    (n * (2 * n - 1))",
    "    3 * n * (n - 1) + 1",
    "    n * (2 * n - 1)",
    "    n * (2 * n - 1)",
    "    3 * n * (n - 1) + 1",
    "    n * (2 * n - 1)",
    "    n * (2 * n - 1)",
    "    (n * (2 * n - 1))",
    "    3 * n * (n - 1) + 1",
    "    3 * n * (n - 1) + 1",
    "    (n * (2 * n - 1))",
    "    3 * n * (n - 1) + 1",
    "    n * (2 * n - 1)",
    "    3 * n * (n - 1) + 1",
    "    n * (2 * n - 1)",
    "    3 * n * (n - 1) + 1",
    "    n * (2 * n - 1)",
    "    (n * (2 * n - 1))",
    "    n * (2 * n - 1)",
    "    n * (2 * n - 1)",
    "    3 * n * (n - 1) + 1",
    "    n * (2 * n - 1)",
    "    3 * n * (n - 1) + 1",
    "    let x = (n * (2 * n - 1)) as isize;\n    x",
    "    3 * n * (n - 1) + 1",
    "    n * (2 * n - 1)",
    "    3 * n * (n - 1) + 1",
    "    n * (2 * n - 1)",
    "    n * (2 * n - 1)",
    "    n * (2 * n - 1)",
    "    3 * n * (n - 1) + 1",
    "    3 * n * (n - 1) + 1",
    "    3 * n * (n - 1) + 1",
    "    3 * n * (n - 1) + 1",
    "    3 * n * (n - 1) + 1",
    "    n * (2 * n - 1)",
    "    3 * n * (n - 1) + 1",
    "    3 * n * (n - 1) + 1",
    "    n * (2 * n - 1)",
    "    n * (2 * n - 1)",
    "    n * (2 * n - 1)",
    "    (n * (2 * n - 1))",
    "    3 * n * (n - 1) + 1",
    "    3 * n * (n - 1) + 1",
    "    3 * n * (n - 1) + 1",
    "    3 * n * (n - 1) + 1",
    "    (n * (2 * n - 1))",
    "    (n * (2 * n - 1))",
    "    (n * (2 * n - 1))",
    "    (n * (2 * n - 1))",
    "    n * (2 * n - 1)",
    "    n * (2 * n - 1)",
    "    3 * n * (n - 1) + 1",
    "    n * (2 * n - 1)",
    "    3 * n * (n - 1) + 1"
  ]
}