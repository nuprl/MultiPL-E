{
  "name": "mbpp_769_Diff",
  "language": "rs",
  "prompt": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_769_Diff.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li.push(i);\n        }\n    }\n    li\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmpaz30byiw.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3 = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmp2d9q4rnp.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li3 = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3 = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmp2d9q4rnp.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li3 = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3: Vec<isize> = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[10, 15, 20, 30]`,\n right: `[10, 20, 30, 15]`', /tmp/tmpnoxu4cyt.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3: Vec<isize> = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    return li3;\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[10, 15, 20, 30]`,\n right: `[10, 20, 30, 15]`', /tmp/tmpb1z07rqa.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3: Vec<isize> = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[10, 15, 20, 30]`,\n right: `[10, 20, 30, 15]`', /tmp/tmpnoxu4cyt.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3: Vec<isize> = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    return li3;\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmp9gsrcz0d.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li3: Vec<isize> = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li.push(i);\n        }\n    }\n    li\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmpaz30byiw.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3: Vec<isize> = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmpxrilv7r1.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li3: Vec<isize> = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3 = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmp2d9q4rnp.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li3 = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3: Vec<isize> = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmpxrilv7r1.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li3: Vec<isize> = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3: Vec<isize> = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmpxrilv7r1.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li3: Vec<isize> = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3: Vec<isize> = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    return li3;\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[10, 15, 20, 30]`,\n right: `[10, 20, 30, 15]`', /tmp/tmpb1z07rqa.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li: Vec<isize> = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li.push(i);\n        }\n    }\n    li\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmp9yd79yv6.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li: Vec<isize> = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3: Vec<isize> = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmpxrilv7r1.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li3: Vec<isize> = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3: Vec<isize> = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmpxrilv7r1.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li3: Vec<isize> = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3 = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmp2d9q4rnp.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li3 = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3: Vec<isize> = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmpxrilv7r1.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li3: Vec<isize> = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3: Vec<isize> = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[10, 15, 20, 30]`,\n right: `[10, 20, 30, 15]`', /tmp/tmpnoxu4cyt.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3: Vec<isize> = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmpxrilv7r1.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li3: Vec<isize> = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3: Vec<isize> = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmpxrilv7r1.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li3: Vec<isize> = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3: Vec<isize> = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmpxrilv7r1.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li3: Vec<isize> = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut diff = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            diff.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            diff.push(i);\n        }\n    }\n    diff\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1666123099,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmpeoktroub.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut diff = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3: Vec<isize> = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmpxrilv7r1.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li3: Vec<isize> = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3: Vec<isize> = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmpxrilv7r1.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li3: Vec<isize> = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3: Vec<isize> = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmpxrilv7r1.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li3: Vec<isize> = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3 = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmp2d9q4rnp.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li3 = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3: Vec<isize> = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmpxrilv7r1.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li3: Vec<isize> = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3: Vec<isize> = Vec::new();\n    for x in li1 {\n        if !li2.contains(&x) {\n            li3.push(x);\n        }\n    }\n    for x in li2 {\n        if !li1.contains(&x) {\n            li3.push(x);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1666123099,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmp95tkd9ob.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li3: Vec<isize> = Vec::new();\n4   |     for x in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&x) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for x in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3: Vec<isize> = Vec::new();\n    for i in li1.iter() {\n        if !li2.contains(i) {\n            li3.push(*i);\n        }\n    }\n    for i in li2.iter() {\n        if !li1.contains(i) {\n            li3.push(*i);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1666123099,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[10, 15, 20, 30]`,\n right: `[10, 20, 30, 15]`', /tmp/tmpnohph7qt.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3: Vec<isize> = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmpxrilv7r1.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li3: Vec<isize> = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3: Vec<isize> = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmpxrilv7r1.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li3: Vec<isize> = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3: Vec<isize> = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmpxrilv7r1.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li3: Vec<isize> = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3: Vec<isize> = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    return li3;\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmp9gsrcz0d.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li3: Vec<isize> = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3: Vec<isize> = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmpxrilv7r1.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li3: Vec<isize> = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3 = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmp2d9q4rnp.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li3 = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3: Vec<isize> = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmpxrilv7r1.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li3: Vec<isize> = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3 = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmp2d9q4rnp.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li3 = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3 = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmp2d9q4rnp.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li3 = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3: Vec<isize> = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmpxrilv7r1.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li3: Vec<isize> = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3 = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmp2d9q4rnp.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li3 = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3: Vec<isize> = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmpxrilv7r1.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li3: Vec<isize> = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3: Vec<isize> = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmpxrilv7r1.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li3: Vec<isize> = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3: Vec<isize> = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmpxrilv7r1.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li3: Vec<isize> = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3: Vec<isize> = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmpxrilv7r1.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li3: Vec<isize> = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3: Vec<isize> = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmpxrilv7r1.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li3: Vec<isize> = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3: Vec<isize> = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmpxrilv7r1.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li3: Vec<isize> = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3 = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmp2d9q4rnp.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li3 = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3: Vec<isize> = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmpxrilv7r1.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li3: Vec<isize> = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3: Vec<isize> = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmpxrilv7r1.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li3: Vec<isize> = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3 = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmp2d9q4rnp.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li3 = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3 = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmp2d9q4rnp.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li3 = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3: Vec<isize> = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    return li3;\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[10, 15, 20, 30]`,\n right: `[10, 20, 30, 15]`', /tmp/tmpb1z07rqa.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3 = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmp2d9q4rnp.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li3 = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3: Vec<isize> = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    return li3;\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmp9gsrcz0d.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li3: Vec<isize> = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3: Vec<isize> = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[10, 15, 20, 30]`,\n right: `[10, 20, 30, 15]`', /tmp/tmpnoxu4cyt.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3: Vec<isize> = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmpxrilv7r1.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li3: Vec<isize> = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3 = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmp2d9q4rnp.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li3 = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3 = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmp2d9q4rnp.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li3 = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3 = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmp2d9q4rnp.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li3 = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li.push(i);\n        }\n    }\n    li\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmpaz30byiw.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut diff = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            diff.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            diff.push(i);\n        }\n    }\n    diff\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1666123099,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmpeoktroub.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut diff = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3 = Vec::new();\n    for x in li1 {\n        if !li2.contains(&x) {\n            li3.push(x);\n        }\n    }\n    for x in li2 {\n        if !li1.contains(&x) {\n            li3.push(x);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1666123099,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmptmu10j6d.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li3 = Vec::new();\n4   |     for x in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&x) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for x in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3: Vec<isize> = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmpxrilv7r1.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li3: Vec<isize> = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3 = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmp2d9q4rnp.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li3 = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3: Vec<isize> = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmpxrilv7r1.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li3: Vec<isize> = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3 = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmp2d9q4rnp.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li3 = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li.push(i);\n        }\n    }\n    li\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmpaz30byiw.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3 = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmp2d9q4rnp.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li3 = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3 = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmp2d9q4rnp.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li3 = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3: Vec<isize> = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmpxrilv7r1.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li3: Vec<isize> = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3 = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmp2d9q4rnp.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li3 = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3: Vec<isize> = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmpxrilv7r1.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li3: Vec<isize> = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3: Vec<isize> = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmpxrilv7r1.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li3: Vec<isize> = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3: Vec<isize> = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmpxrilv7r1.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li3: Vec<isize> = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3 = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmp2d9q4rnp.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li3 = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3 = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmp2d9q4rnp.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li3 = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3 = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmp2d9q4rnp.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li3 = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3: Vec<isize> = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmpxrilv7r1.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li3: Vec<isize> = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li1 = li1;\n    let mut li2 = li2;\n    let mut diff = Vec::new();\n    li1.sort();\n    li2.sort();\n    let mut i = 0;\n    let mut j = 0;\n    while i < li1.len() && j < li2.len() {\n        if li1[i] == li2[j] {\n            i += 1;\n            j += 1;\n        } else if li1[i] < li2[j] {\n            diff.push(li1[i]);\n            i += 1;\n        } else {\n            j += 1;\n        }\n    }\n    while i < li1.len() {\n        diff.push(li1[i]);\n        i += 1;\n    }\n    diff\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1666123099,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[10, 15, 20, 30]`,\n right: `[10, 20, 30, 15]`', /tmp/tmpv868ovmi.rs:30:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3 = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmp2d9q4rnp.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li3 = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3: Vec<isize> = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[10, 15, 20, 30]`,\n right: `[10, 20, 30, 15]`', /tmp/tmpnoxu4cyt.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li.push(i);\n        }\n    }\n    li\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmpaz30byiw.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3 = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmp2d9q4rnp.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li3 = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3 = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmp2d9q4rnp.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li3 = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3: Vec<isize> = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for j in li2 {\n        if !li1.contains(&j) {\n            li3.push(j);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1666123099,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmppm02b70y.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li3: Vec<isize> = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&j) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3 = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmp2d9q4rnp.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li3 = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3: Vec<isize> = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmpxrilv7r1.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li3: Vec<isize> = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3: Vec<isize> = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmpxrilv7r1.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li3: Vec<isize> = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3 = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmp2d9q4rnp.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li3 = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3: Vec<isize> = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmpxrilv7r1.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li3: Vec<isize> = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3: Vec<isize> = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmpxrilv7r1.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li3: Vec<isize> = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3 = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1666123099,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[10, 15, 20, 30]`,\n right: `[10, 20, 30, 15]`', /tmp/tmppf85f0cf.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3: Vec<isize> = Vec::new();\n    for x in li1 {\n        if !li2.contains(&x) {\n            li3.push(x);\n        }\n    }\n    for x in li2 {\n        if !li1.contains(&x) {\n            li3.push(x);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1666123099,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmp95tkd9ob.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li3: Vec<isize> = Vec::new();\n4   |     for x in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&x) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for x in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3: Vec<isize> = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmpxrilv7r1.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li3: Vec<isize> = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3: Vec<isize> = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmpxrilv7r1.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li3: Vec<isize> = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3 = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmp2d9q4rnp.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li3 = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3: Vec<isize> = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[10, 15, 20, 30]`,\n right: `[10, 20, 30, 15]`', /tmp/tmpnoxu4cyt.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3 = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmp2d9q4rnp.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li3 = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3 = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmp2d9q4rnp.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li3 = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3: Vec<isize> = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmpxrilv7r1.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li3: Vec<isize> = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3 = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmp2d9q4rnp.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li3 = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3: Vec<isize> = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmpxrilv7r1.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li3: Vec<isize> = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3 = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmp2d9q4rnp.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li3 = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3: Vec<isize> = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    return li3;\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[10, 15, 20, 30]`,\n right: `[10, 20, 30, 15]`', /tmp/tmpb1z07rqa.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3: Vec<isize> = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmpxrilv7r1.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li3: Vec<isize> = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3: Vec<isize> = Vec::new();\n    let mut li4: Vec<isize> = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li4.push(i);\n        }\n    }\n    li3.append(&mut li4);\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1666123099,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmpjnxl0sew.rs:11:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n5   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n11  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n5   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3 = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmp2d9q4rnp.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li3 = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li.push(i);\n        }\n    }\n    li\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmpaz30byiw.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut diff = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            diff.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            diff.push(i);\n        }\n    }\n    diff\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1666123099,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmpeoktroub.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut diff = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3: Vec<isize> = Vec::new();\n    let mut li4: Vec<isize> = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li4.push(i);\n        }\n    }\n    li3.append(&mut li4);\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1666123099,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmpjnxl0sew.rs:11:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n5   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n11  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n5   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3: Vec<isize> = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmpxrilv7r1.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li3: Vec<isize> = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3: Vec<isize> = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmpxrilv7r1.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li3: Vec<isize> = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li.push(i);\n        }\n    }\n    li\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmpaz30byiw.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3 = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmp2d9q4rnp.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li3 = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3 = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmp2d9q4rnp.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li3 = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3: Vec<isize> = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmpxrilv7r1.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li3: Vec<isize> = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3: Vec<isize> = Vec::new();\n    for x in li1 {\n        if !li2.contains(&x) {\n            li3.push(x);\n        }\n    }\n    for x in li2 {\n        if !li1.contains(&x) {\n            li3.push(x);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1666123099,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmp95tkd9ob.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li3: Vec<isize> = Vec::new();\n4   |     for x in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&x) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for x in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3 = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmp2d9q4rnp.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li3 = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3 = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmp2d9q4rnp.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li3 = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3 = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmp2d9q4rnp.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li3 = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut diff = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            diff.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            diff.push(i);\n        }\n    }\n    diff\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1666123099,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmpeoktroub.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut diff = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3 = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmp2d9q4rnp.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li3 = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li.push(i);\n        }\n    }\n    li\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmpaz30byiw.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3 = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmp2d9q4rnp.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li3 = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3 = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmp2d9q4rnp.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li3 = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3 = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmp2d9q4rnp.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li3 = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3 = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmp2d9q4rnp.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li3 = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3: Vec<isize> = Vec::new();\n    for x in li1 {\n        if !li2.contains(&x) {\n            li3.push(x);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1666123099,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[10, 15, 20, 30]`,\n right: `[10, 20, 30, 15]`', /tmp/tmpqp0a20n9.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3: Vec<isize> = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmpxrilv7r1.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li3: Vec<isize> = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3 = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmp2d9q4rnp.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li3 = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3 = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmp2d9q4rnp.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li3 = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3: Vec<isize> = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmpxrilv7r1.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li3: Vec<isize> = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3 = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmp2d9q4rnp.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li3 = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li.push(i);\n        }\n    }\n    li\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmpaz30byiw.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut res = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            res.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            res.push(i);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1666123099,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmphan4p625.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut res = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3: Vec<isize> = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmpxrilv7r1.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li3: Vec<isize> = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3: Vec<isize> = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    return li3;\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmp9gsrcz0d.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li3: Vec<isize> = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li.push(i);\n        }\n    }\n    li\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmpaz30byiw.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3: Vec<isize> = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmpxrilv7r1.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li3: Vec<isize> = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3: Vec<isize> = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for j in li2 {\n        if !li1.contains(&j) {\n            li3.push(j);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1666123099,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmppm02b70y.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li3: Vec<isize> = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&j) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut diff = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            diff.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            diff.push(i);\n        }\n    }\n    diff\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1666123099,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmpeoktroub.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut diff = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3 = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmp2d9q4rnp.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li3 = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3: Vec<isize> = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[10, 15, 20, 30]`,\n right: `[10, 20, 30, 15]`', /tmp/tmpnoxu4cyt.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3: Vec<isize> = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmpxrilv7r1.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li3: Vec<isize> = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3: Vec<isize> = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmpxrilv7r1.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li3: Vec<isize> = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3: Vec<isize> = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmpxrilv7r1.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li3: Vec<isize> = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3 = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmp2d9q4rnp.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li3 = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3: Vec<isize> = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmpxrilv7r1.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li3: Vec<isize> = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li.push(i);\n        }\n    }\n    li\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmpaz30byiw.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3 = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmp2d9q4rnp.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li3 = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li.push(i);\n        }\n    }\n    li\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmpaz30byiw.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3 = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmp2d9q4rnp.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li3 = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3: Vec<isize> = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmpxrilv7r1.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li3: Vec<isize> = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3 = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmp2d9q4rnp.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li3 = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3 = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmp2d9q4rnp.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li3 = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3: Vec<isize> = Vec::new();\n    for x in li1 {\n        if !li2.contains(&x) {\n            li3.push(x);\n        }\n    }\n    for x in li2 {\n        if !li1.contains(&x) {\n            li3.push(x);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1666123099,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmp95tkd9ob.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li3: Vec<isize> = Vec::new();\n4   |     for x in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&x) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for x in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3: Vec<isize> = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmpxrilv7r1.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li3: Vec<isize> = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3 = Vec::new();\n    let mut li4 = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li4.push(i);\n        }\n    }\n    li3.append(&mut li4);\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1666123099,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmpc8l02pyi.rs:11:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n5   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n11  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n5   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3: Vec<isize> = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmpxrilv7r1.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li3: Vec<isize> = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3: Vec<isize> = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmpxrilv7r1.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li3: Vec<isize> = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut diff = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            diff.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            diff.push(i);\n        }\n    }\n    diff\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1666123099,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmpeoktroub.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut diff = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3: Vec<isize> = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    return li3;\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[10, 15, 20, 30]`,\n right: `[10, 20, 30, 15]`', /tmp/tmpb1z07rqa.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3: Vec<isize> = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmpxrilv7r1.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li3: Vec<isize> = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li.push(i);\n        }\n    }\n    li\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmpaz30byiw.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3: Vec<isize> = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmpxrilv7r1.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li3: Vec<isize> = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3: Vec<isize> = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmpxrilv7r1.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li3: Vec<isize> = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3: Vec<isize> = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmpxrilv7r1.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li3: Vec<isize> = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3 = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmp2d9q4rnp.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li3 = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3: Vec<isize> = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmpxrilv7r1.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li3: Vec<isize> = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li.push(i);\n        }\n    }\n    li\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmpaz30byiw.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3: Vec<isize> = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmpxrilv7r1.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li3: Vec<isize> = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3: Vec<isize> = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmpxrilv7r1.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li3: Vec<isize> = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3: Vec<isize> = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmpxrilv7r1.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li3: Vec<isize> = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3: Vec<isize> = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmpxrilv7r1.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li3: Vec<isize> = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3 = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmp2d9q4rnp.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li3 = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3 = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmp2d9q4rnp.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li3 = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3: Vec<isize> = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmpxrilv7r1.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li3: Vec<isize> = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3 = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmp2d9q4rnp.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li3 = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3 = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmp2d9q4rnp.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li3 = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3 = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmp2d9q4rnp.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li3 = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3 = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmp2d9q4rnp.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li3 = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li.push(i);\n        }\n    }\n    li\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmpaz30byiw.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3 = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmp2d9q4rnp.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li3 = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3 = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmp2d9q4rnp.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li3 = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3 = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmp2d9q4rnp.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li3 = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li.push(i);\n        }\n    }\n    li\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmpaz30byiw.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3 = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmp2d9q4rnp.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li3 = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3: Vec<isize> = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmpxrilv7r1.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li3: Vec<isize> = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3 = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmp2d9q4rnp.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li3 = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3: Vec<isize> = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmpxrilv7r1.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li3: Vec<isize> = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3: Vec<isize> = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmpxrilv7r1.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li3: Vec<isize> = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3 = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmp2d9q4rnp.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li3 = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3 = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmp2d9q4rnp.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li3 = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3 = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1666123099,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[10, 15, 20, 30]`,\n right: `[10, 20, 30, 15]`', /tmp/tmppf85f0cf.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li.push(i);\n        }\n    }\n    li\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmpaz30byiw.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3: Vec<isize> = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmpxrilv7r1.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li3: Vec<isize> = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3: Vec<isize> = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    return li3;\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[10, 15, 20, 30]`,\n right: `[10, 20, 30, 15]`', /tmp/tmpb1z07rqa.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li3 = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li3.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li3.push(i);\n        }\n    }\n    li3\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmp2d9q4rnp.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li3 = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to get the difference between two lists.\nfn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    let mut li = Vec::new();\n    for i in li1 {\n        if !li2.contains(&i) {\n            li.push(i);\n        }\n    }\n    for i in li2 {\n        if !li1.contains(&i) {\n            li.push(i);\n        }\n    }\n    li\n}\n\nfn main() {\n    let candidate = Diff;\n    assert_eq!(candidate(vec![10, 15, 20, 25, 30, 35, 40], vec![25, 40, 35]), vec![10, 20, 30, 15]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 1]), vec![2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3], vec![6, 7, 1]), vec![2, 3, 6, 7]);\n}\n",
      "timestamp": 1665510199,
      "stdout": "",
      "stderr": "error[E0382]: borrow of moved value: `li1`\n   --> /tmp/tmpaz30byiw.rs:10:13\n    |\n2   | fn Diff(li1: Vec<isize>, li2: Vec<isize>) -> Vec<isize> {\n    |         --- move occurs because `li1` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     let mut li = Vec::new();\n4   |     for i in li1 {\n    |              --- `li1` moved due to this implicit call to `.into_iter()`\n...\n10  |         if !li1.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `li1`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |     for i in &li1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}