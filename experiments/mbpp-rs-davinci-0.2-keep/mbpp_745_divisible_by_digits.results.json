{
  "name": "mbpp_745_divisible_by_digits",
  "language": "rs",
  "prompt": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_745_divisible_by_digits.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum)\n        .filter(|x| {\n            let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize).collect::<Vec<isize>>();\n            digits.iter().all(|&y| x % y == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1665509865,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /rustc/e092d0b6b43f2de967af0887873151bb1c0b18d3/library/core/src/ops/arith.rs:609:1\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in startnum..endnum + 1 {\n        let digits = i.to_string().chars().map(|x| x.to_digit(10).unwrap() as isize).collect::<Vec<isize>>();\n        if digits.iter().all(|x| i % x == 0) {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1665509865,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /rustc/e092d0b6b43f2de967af0887873151bb1c0b18d3/library/core/src/ops/arith.rs:609:1\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in startnum..endnum {\n        let digits = i.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize).collect::<Vec<isize>>();\n        if digits.iter().all(|&x| i % x == 0) {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1665509865,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /tmp/tmp5o3qad73.rs:6:35\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut v = Vec::new();\n    for i in startnum..=endnum {\n        let mut is_divisible = true;\n        let mut num = i;\n        while num > 0 {\n            let digit = num % 10;\n            if digit == 0 || i % digit != 0 {\n                is_divisible = false;\n                break;\n            }\n            num /= 10;\n        }\n        if is_divisible {\n            v.push(i);\n        }\n    }\n    v\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1665509865,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum)\n        .filter(|x| {\n            let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n            digits.all(|d| x % d == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1665509865,
      "stdout": "",
      "stderr": "error[E0716]: temporary value dropped while borrowed\n --> /tmp/tmpymt8c6eo.rs:5:26\n  |\n5 |             let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                          ^^^^^^^^^^^^^                                                  - temporary value is freed at the end of this statement\n  |                          |\n  |                          creates a temporary which is freed while still in use\n6 |             digits.all(|d| x % d == 0)\n  |             -------------------------- borrow later used here\n  |\n  = note: consider using a `let` binding to create a longer lived value\n\nerror[E0596]: cannot borrow `digits` as mutable, as it is not declared as mutable\n --> /tmp/tmpymt8c6eo.rs:6:13\n  |\n5 |             let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                 ------ help: consider changing this to be mutable: `mut digits`\n6 |             digits.all(|d| x % d == 0)\n  |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0596, E0716.\nFor more information about an error, try `rustc --explain E0596`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..=endnum)\n        .filter(|x| {\n            let mut digits = x.to_string().chars().collect::<Vec<char>>();\n            digits.sort();\n            digits.dedup();\n            digits.iter().all(|&d| x % d.to_digit(10).unwrap() as isize == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1665509865,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /rustc/e092d0b6b43f2de967af0887873151bb1c0b18d3/library/core/src/ops/arith.rs:609:1\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum)\n        .filter(|&x| {\n            let mut digits = x;\n            while digits > 0 {\n                let digit = digits % 10;\n                if digit == 0 || x % digit != 0 {\n                    return false;\n                }\n                digits /= 10;\n            }\n            true\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1665509865,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]`,\n right: `[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]`', /tmp/tmpqf0y54uf.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in startnum..=endnum {\n        let digits: Vec<char> = i.to_string().chars().collect();\n        let mut is_divisible = true;\n        for digit in digits {\n            if i % digit.to_digit(10).unwrap() as isize != 0 {\n                is_divisible = false;\n                break;\n            }\n        }\n        if is_divisible {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1665509865,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /tmp/tmpcs51_vqt.rs:8:16\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum)\n        .filter(|&x| {\n            let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n            digits.all(|d| x % d == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1665509865,
      "stdout": "",
      "stderr": "error[E0716]: temporary value dropped while borrowed\n --> /tmp/tmpghivvlvg.rs:5:26\n  |\n5 |             let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                          ^^^^^^^^^^^^^                                                  - temporary value is freed at the end of this statement\n  |                          |\n  |                          creates a temporary which is freed while still in use\n6 |             digits.all(|d| x % d == 0)\n  |             -------------------------- borrow later used here\n  |\n  = note: consider using a `let` binding to create a longer lived value\n\nerror[E0596]: cannot borrow `digits` as mutable, as it is not declared as mutable\n --> /tmp/tmpghivvlvg.rs:6:13\n  |\n5 |             let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                 ------ help: consider changing this to be mutable: `mut digits`\n6 |             digits.all(|d| x % d == 0)\n  |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0596, E0716.\nFor more information about an error, try `rustc --explain E0596`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for num in startnum..=endnum {\n        let digits = num.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n        if digits.all(|d| num % d == 0) {\n            result.push(num);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1665509865,
      "stdout": "",
      "stderr": "error[E0716]: temporary value dropped while borrowed\n --> /tmp/tmpqqqiazwd.rs:5:22\n  |\n5 |         let digits = num.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                      ^^^^^^^^^^^^^^^                                                  - temporary value is freed at the end of this statement\n  |                      |\n  |                      creates a temporary which is freed while still in use\n6 |         if digits.all(|d| num % d == 0) {\n  |            ---------------------------- borrow later used here\n  |\n  = note: consider using a `let` binding to create a longer lived value\n\nerror[E0596]: cannot borrow `digits` as mutable, as it is not declared as mutable\n --> /tmp/tmpqqqiazwd.rs:6:12\n  |\n5 |         let digits = num.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |             ------ help: consider changing this to be mutable: `mut digits`\n6 |         if digits.all(|d| num % d == 0) {\n  |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0596, E0716.\nFor more information about an error, try `rustc --explain E0596`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in startnum..=endnum {\n        let digits: Vec<_> = i.to_string().chars().map(|d| d.to_digit(10).unwrap() as isize).collect();\n        if digits.iter().all(|d| i % d == 0) {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1665509865,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /rustc/e092d0b6b43f2de967af0887873151bb1c0b18d3/library/core/src/ops/arith.rs:609:1\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum)\n        .filter(|&x| {\n            let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n            digits.all(|d| x % d == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1665509865,
      "stdout": "",
      "stderr": "error[E0716]: temporary value dropped while borrowed\n --> /tmp/tmpghivvlvg.rs:5:26\n  |\n5 |             let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                          ^^^^^^^^^^^^^                                                  - temporary value is freed at the end of this statement\n  |                          |\n  |                          creates a temporary which is freed while still in use\n6 |             digits.all(|d| x % d == 0)\n  |             -------------------------- borrow later used here\n  |\n  = note: consider using a `let` binding to create a longer lived value\n\nerror[E0596]: cannot borrow `digits` as mutable, as it is not declared as mutable\n --> /tmp/tmpghivvlvg.rs:6:13\n  |\n5 |             let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                 ------ help: consider changing this to be mutable: `mut digits`\n6 |             digits.all(|d| x % d == 0)\n  |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0596, E0716.\nFor more information about an error, try `rustc --explain E0596`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum)\n        .filter(|&x| {\n            let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n            digits.all(|digit| x % digit == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1665509865,
      "stdout": "",
      "stderr": "error[E0716]: temporary value dropped while borrowed\n --> /tmp/tmprk_05gi7.rs:5:26\n  |\n5 |             let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                          ^^^^^^^^^^^^^                                                  - temporary value is freed at the end of this statement\n  |                          |\n  |                          creates a temporary which is freed while still in use\n6 |             digits.all(|digit| x % digit == 0)\n  |             ---------------------------------- borrow later used here\n  |\n  = note: consider using a `let` binding to create a longer lived value\n\nerror[E0596]: cannot borrow `digits` as mutable, as it is not declared as mutable\n --> /tmp/tmprk_05gi7.rs:6:13\n  |\n5 |             let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                 ------ help: consider changing this to be mutable: `mut digits`\n6 |             digits.all(|digit| x % digit == 0)\n  |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0596, E0716.\nFor more information about an error, try `rustc --explain E0596`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..=endnum)\n        .filter(|&x| {\n            let digits = x.to_string();\n            digits\n                .chars()\n                .all(|c| c.to_digit(10).map_or(false, |d| x % d as isize == 0))\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1665509865,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /tmp/tmpp6y7fm_r.rs:8:59\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in startnum..=endnum {\n        let mut digits = Vec::new();\n        let mut temp = i;\n        while temp > 0 {\n            digits.push(temp % 10);\n            temp /= 10;\n        }\n        if digits.iter().all(|x| i % x == 0) {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1665509865,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /rustc/e092d0b6b43f2de967af0887873151bb1c0b18d3/library/core/src/ops/arith.rs:609:1\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in startnum..endnum + 1 {\n        let mut digits = Vec::new();\n        let mut num = i;\n        while num > 0 {\n            digits.push(num % 10);\n            num /= 10;\n        }\n        if digits.iter().all(|x| i % x == 0) {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1665509865,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /rustc/e092d0b6b43f2de967af0887873151bb1c0b18d3/library/core/src/ops/arith.rs:609:1\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in startnum..endnum {\n        let digits: Vec<isize> = i.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize).collect();\n        if digits.iter().all(|&d| i % d == 0) {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1665509865,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /tmp/tmp9mawf2z7.rs:6:35\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in startnum..endnum {\n        let mut digits = Vec::new();\n        let mut n = i;\n        while n > 0 {\n            digits.push(n % 10);\n            n /= 10;\n        }\n        let mut is_divisible = true;\n        for j in &digits {\n            if i % j != 0 {\n                is_divisible = false;\n                break;\n            }\n        }\n        if is_divisible {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1665509865,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /rustc/e092d0b6b43f2de967af0887873151bb1c0b18d3/library/core/src/ops/arith.rs:609:1\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum)\n        .filter(|&x| {\n            let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n            digits.all(|d| x % d == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1665509865,
      "stdout": "",
      "stderr": "error[E0716]: temporary value dropped while borrowed\n --> /tmp/tmpghivvlvg.rs:5:26\n  |\n5 |             let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                          ^^^^^^^^^^^^^                                                  - temporary value is freed at the end of this statement\n  |                          |\n  |                          creates a temporary which is freed while still in use\n6 |             digits.all(|d| x % d == 0)\n  |             -------------------------- borrow later used here\n  |\n  = note: consider using a `let` binding to create a longer lived value\n\nerror[E0596]: cannot borrow `digits` as mutable, as it is not declared as mutable\n --> /tmp/tmpghivvlvg.rs:6:13\n  |\n5 |             let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                 ------ help: consider changing this to be mutable: `mut digits`\n6 |             digits.all(|d| x % d == 0)\n  |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0596, E0716.\nFor more information about an error, try `rustc --explain E0596`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum)\n        .filter(|&n| n.to_string().chars().all(|c| n % (c as isize - '0' as isize) == 0))\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1665509865,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /tmp/tmpj68u8jwi.rs:4:52\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in startnum..=endnum {\n        let digits = i.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize).collect::<Vec<isize>>();\n        if digits.iter().all(|&d| i % d == 0) {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122595,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /tmp/tmpir2h4tnh.rs:6:35\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..=endnum)\n        .filter(|&x| {\n            let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n            digits.all(|d| x % d == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122594,
      "stdout": "",
      "stderr": "error[E0716]: temporary value dropped while borrowed\n --> /tmp/tmprhh8n3ne.rs:5:26\n  |\n5 |             let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                          ^^^^^^^^^^^^^                                                  - temporary value is freed at the end of this statement\n  |                          |\n  |                          creates a temporary which is freed while still in use\n6 |             digits.all(|d| x % d == 0)\n  |             -------------------------- borrow later used here\n  |\n  = note: consider using a `let` binding to create a longer lived value\n\nerror[E0596]: cannot borrow `digits` as mutable, as it is not declared as mutable\n --> /tmp/tmprhh8n3ne.rs:6:13\n  |\n5 |             let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                 ------ help: consider changing this to be mutable: `mut digits`\n6 |             digits.all(|d| x % d == 0)\n  |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0596, E0716.\nFor more information about an error, try `rustc --explain E0596`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum + 1)\n        .filter(|&x| {\n            let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n            digits.all(|d| x % d == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122594,
      "stdout": "",
      "stderr": "error[E0716]: temporary value dropped while borrowed\n --> /tmp/tmp3bzw1h9w.rs:5:26\n  |\n5 |             let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                          ^^^^^^^^^^^^^                                                  - temporary value is freed at the end of this statement\n  |                          |\n  |                          creates a temporary which is freed while still in use\n6 |             digits.all(|d| x % d == 0)\n  |             -------------------------- borrow later used here\n  |\n  = note: consider using a `let` binding to create a longer lived value\n\nerror[E0596]: cannot borrow `digits` as mutable, as it is not declared as mutable\n --> /tmp/tmp3bzw1h9w.rs:6:13\n  |\n5 |             let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                 ------ help: consider changing this to be mutable: `mut digits`\n6 |             digits.all(|d| x % d == 0)\n  |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0596, E0716.\nFor more information about an error, try `rustc --explain E0596`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in startnum..endnum + 1 {\n        let digits = i.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize).collect::<Vec<isize>>();\n        if digits.iter().all(|&x| i % x == 0) {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122595,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /tmp/tmp8smhupu1.rs:6:35\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in startnum..=endnum {\n        let digits = i.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n        if digits.all(|d| i % d == 0) {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122594,
      "stdout": "",
      "stderr": "error[E0716]: temporary value dropped while borrowed\n --> /tmp/tmp6p0qsh5f.rs:5:22\n  |\n5 |         let digits = i.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                      ^^^^^^^^^^^^^                                                  - temporary value is freed at the end of this statement\n  |                      |\n  |                      creates a temporary which is freed while still in use\n6 |         if digits.all(|d| i % d == 0) {\n  |            -------------------------- borrow later used here\n  |\n  = note: consider using a `let` binding to create a longer lived value\n\nerror[E0596]: cannot borrow `digits` as mutable, as it is not declared as mutable\n --> /tmp/tmp6p0qsh5f.rs:6:12\n  |\n5 |         let digits = i.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |             ------ help: consider changing this to be mutable: `mut digits`\n6 |         if digits.all(|d| i % d == 0) {\n  |            ^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0596, E0716.\nFor more information about an error, try `rustc --explain E0596`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..=endnum)\n        .filter(|&num| {\n            let digits = num.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n            digits.all(|digit| num % digit == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122594,
      "stdout": "",
      "stderr": "error[E0716]: temporary value dropped while borrowed\n --> /tmp/tmptumol0nw.rs:5:26\n  |\n5 |             let digits = num.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                          ^^^^^^^^^^^^^^^                                                  - temporary value is freed at the end of this statement\n  |                          |\n  |                          creates a temporary which is freed while still in use\n6 |             digits.all(|digit| num % digit == 0)\n  |             ------------------------------------ borrow later used here\n  |\n  = note: consider using a `let` binding to create a longer lived value\n\nerror[E0596]: cannot borrow `digits` as mutable, as it is not declared as mutable\n --> /tmp/tmptumol0nw.rs:6:13\n  |\n5 |             let digits = num.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                 ------ help: consider changing this to be mutable: `mut digits`\n6 |             digits.all(|digit| num % digit == 0)\n  |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0596, E0716.\nFor more information about an error, try `rustc --explain E0596`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum)\n        .filter(|&x| {\n            let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n            digits.all(|d| x % d == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1665509865,
      "stdout": "",
      "stderr": "error[E0716]: temporary value dropped while borrowed\n --> /tmp/tmpghivvlvg.rs:5:26\n  |\n5 |             let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                          ^^^^^^^^^^^^^                                                  - temporary value is freed at the end of this statement\n  |                          |\n  |                          creates a temporary which is freed while still in use\n6 |             digits.all(|d| x % d == 0)\n  |             -------------------------- borrow later used here\n  |\n  = note: consider using a `let` binding to create a longer lived value\n\nerror[E0596]: cannot borrow `digits` as mutable, as it is not declared as mutable\n --> /tmp/tmpghivvlvg.rs:6:13\n  |\n5 |             let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                 ------ help: consider changing this to be mutable: `mut digits`\n6 |             digits.all(|d| x % d == 0)\n  |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0596, E0716.\nFor more information about an error, try `rustc --explain E0596`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum)\n        .filter(|&x| {\n            let digits: Vec<_> = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize).collect();\n            digits.iter().all(|&d| x % d == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122595,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /tmp/tmpnmhv6111.rs:6:36\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    for i in startnum..=endnum {\n        let mut is_divisible = true;\n        for digit in i.to_string().chars() {\n            if digit == '0' {\n                is_divisible = false;\n                break;\n            }\n            if i % digit.to_digit(10).unwrap() as isize != 0 {\n                is_divisible = false;\n                break;\n            }\n        }\n        if is_divisible {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122595,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in startnum..=endnum {\n        let digits = i.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize).collect::<Vec<isize>>();\n        if digits.iter().all(|&d| i % d == 0) {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122595,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /tmp/tmpir2h4tnh.rs:6:35\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum)\n        .filter(|&x| {\n            let mut x = x;\n            while x > 0 {\n                let digit = x % 10;\n                if digit == 0 || x % digit != 0 {\n                    return false;\n                }\n                x /= 10;\n            }\n            true\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122595,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 21]`,\n right: `[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]`', /tmp/tmpbtujddtg.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..=endnum)\n        .filter(|x| {\n            let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n            digits.all(|d| x % d == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122594,
      "stdout": "",
      "stderr": "error[E0716]: temporary value dropped while borrowed\n --> /tmp/tmpsb6kgjaa.rs:5:26\n  |\n5 |             let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                          ^^^^^^^^^^^^^                                                  - temporary value is freed at the end of this statement\n  |                          |\n  |                          creates a temporary which is freed while still in use\n6 |             digits.all(|d| x % d == 0)\n  |             -------------------------- borrow later used here\n  |\n  = note: consider using a `let` binding to create a longer lived value\n\nerror[E0596]: cannot borrow `digits` as mutable, as it is not declared as mutable\n --> /tmp/tmpsb6kgjaa.rs:6:13\n  |\n5 |             let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                 ------ help: consider changing this to be mutable: `mut digits`\n6 |             digits.all(|d| x % d == 0)\n  |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0596, E0716.\nFor more information about an error, try `rustc --explain E0596`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..=endnum)\n        .filter(|n| n.to_string().chars().all(|c| n % c.to_digit(10).unwrap() as isize == 0))\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122595,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /rustc/e092d0b6b43f2de967af0887873151bb1c0b18d3/library/core/src/ops/arith.rs:609:1\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum)\n        .filter(|&x| {\n            let mut x = x;\n            while x > 0 {\n                let digit = x % 10;\n                if digit == 0 || x % digit != 0 {\n                    return false;\n                }\n                x /= 10;\n            }\n            true\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122595,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 21]`,\n right: `[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]`', /tmp/tmpbtujddtg.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in startnum..endnum {\n        let digits = i.to_string().chars().map(|d| d.to_digit(10).unwrap() as isize).collect::<Vec<isize>>();\n        if digits.iter().all(|&d| i % d == 0) {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122595,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /tmp/tmp6myr_j3y.rs:6:35\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum)\n        .filter(|&x| {\n            let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n            digits.all(|d| x % d == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1665509865,
      "stdout": "",
      "stderr": "error[E0716]: temporary value dropped while borrowed\n --> /tmp/tmpghivvlvg.rs:5:26\n  |\n5 |             let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                          ^^^^^^^^^^^^^                                                  - temporary value is freed at the end of this statement\n  |                          |\n  |                          creates a temporary which is freed while still in use\n6 |             digits.all(|d| x % d == 0)\n  |             -------------------------- borrow later used here\n  |\n  = note: consider using a `let` binding to create a longer lived value\n\nerror[E0596]: cannot borrow `digits` as mutable, as it is not declared as mutable\n --> /tmp/tmpghivvlvg.rs:6:13\n  |\n5 |             let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                 ------ help: consider changing this to be mutable: `mut digits`\n6 |             digits.all(|d| x % d == 0)\n  |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0596, E0716.\nFor more information about an error, try `rustc --explain E0596`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum)\n        .filter(|x| {\n            x.to_string()\n                .chars()\n                .all(|c| x % c.to_digit(10).unwrap() as isize == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122595,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /rustc/e092d0b6b43f2de967af0887873151bb1c0b18d3/library/core/src/ops/arith.rs:609:1\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for num in startnum..=endnum {\n        let mut divisible = true;\n        for digit in num.to_string().chars() {\n            if num % digit.to_digit(10).unwrap() as isize != 0 {\n                divisible = false;\n            }\n        }\n        if divisible {\n            result.push(num);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122595,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /tmp/tmpu2hcuke0.rs:7:16\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum)\n        .filter(|x| {\n            let mut digits = Vec::new();\n            let mut n = *x;\n            while n > 0 {\n                digits.push(n % 10);\n                n /= 10;\n            }\n            digits.iter().all(|d| x % d == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122595,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /rustc/e092d0b6b43f2de967af0887873151bb1c0b18d3/library/core/src/ops/arith.rs:609:1\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in startnum..=endnum {\n        let digits: Vec<isize> = i\n            .to_string()\n            .chars()\n            .map(|c| c.to_digit(10).unwrap() as isize)\n            .collect();\n        if digits.iter().all(|&d| i % d == 0) {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122595,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /tmp/tmp8h1u6ieq.rs:10:35\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum)\n        .filter(|x| {\n            let digits: Vec<_> = x.to_string().chars().map(|c| c.to_digit(10).unwrap()).collect();\n            digits.iter().all(|&d| x % d as isize == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122595,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /rustc/e092d0b6b43f2de967af0887873151bb1c0b18d3/library/core/src/ops/arith.rs:609:1\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum)\n        .filter(|&x| {\n            let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n            digits.all(|d| x % d == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1665509865,
      "stdout": "",
      "stderr": "error[E0716]: temporary value dropped while borrowed\n --> /tmp/tmpghivvlvg.rs:5:26\n  |\n5 |             let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                          ^^^^^^^^^^^^^                                                  - temporary value is freed at the end of this statement\n  |                          |\n  |                          creates a temporary which is freed while still in use\n6 |             digits.all(|d| x % d == 0)\n  |             -------------------------- borrow later used here\n  |\n  = note: consider using a `let` binding to create a longer lived value\n\nerror[E0596]: cannot borrow `digits` as mutable, as it is not declared as mutable\n --> /tmp/tmpghivvlvg.rs:6:13\n  |\n5 |             let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                 ------ help: consider changing this to be mutable: `mut digits`\n6 |             digits.all(|d| x % d == 0)\n  |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0596, E0716.\nFor more information about an error, try `rustc --explain E0596`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in startnum..=endnum {\n        let mut digits = Vec::new();\n        let mut num = i;\n        while num > 0 {\n            digits.push(num % 10);\n            num /= 10;\n        }\n        if digits.iter().all(|&x| i % x == 0) {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122595,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /tmp/tmpnlf7moz3.rs:11:35\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum + 1)\n        .filter(|&x| {\n            x.to_string()\n                .chars()\n                .all(|c| x % c.to_digit(10).unwrap() as isize == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122595,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /tmp/tmpk1yt78mg.rs:7:26\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..=endnum)\n        .filter(|&x| {\n            let digits = x.to_string().chars().map(|x| x.to_digit(10).unwrap() as isize).collect::<Vec<_>>();\n            digits.iter().all(|&d| x % d == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122595,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /tmp/tmpoy86e7hi.rs:6:36\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in startnum..=endnum {\n        let mut num = i;\n        let mut is_divisible = true;\n        while num > 0 {\n            let digit = num % 10;\n            if digit == 0 || i % digit != 0 {\n                is_divisible = false;\n                break;\n            }\n            num /= 10;\n        }\n        if is_divisible {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122595,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum + 1)\n        .filter(|&x| x.to_string().chars().all(|c| x % c.to_digit(10).unwrap() as isize == 0))\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122595,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /tmp/tmpj2omv7_q.rs:4:52\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in startnum..endnum {\n        let mut divisible = true;\n        let mut num = i;\n        while num > 0 {\n            let digit = num % 10;\n            if digit == 0 || i % digit != 0 {\n                divisible = false;\n                break;\n            }\n            num = num / 10;\n        }\n        if divisible {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122595,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]`,\n right: `[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]`', /tmp/tmp4lex0tfs.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in startnum..endnum {\n        let digits: Vec<isize> = i.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize).collect();\n        if digits.iter().all(|&x| i % x == 0) {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122595,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /tmp/tmpyerglfmt.rs:6:35\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for num in startnum..endnum {\n        let mut digits = Vec::new();\n        let mut num = num;\n        while num > 0 {\n            digits.push(num % 10);\n            num /= 10;\n        }\n        if digits.iter().all(|&x| x != 0 && num % x == 0) {\n            result.push(num);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122595,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]`,\n right: `[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]`', /tmp/tmp274w16w2.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum)\n        .filter(|x| {\n            let digits: Vec<_> = x.to_string().chars().map(|c| c.to_digit(10).unwrap()).collect();\n            digits.iter().all(|&d| x % d as isize == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122595,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /rustc/e092d0b6b43f2de967af0887873151bb1c0b18d3/library/core/src/ops/arith.rs:609:1\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum + 1)\n        .filter(|&x| {\n            let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize).collect::<Vec<_>>();\n            digits.iter().all(|&d| x % d == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122595,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /tmp/tmp8dpdofgd.rs:6:36\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum)\n        .filter(|&x| {\n            let digits = x.to_string();\n            digits.chars().all(|d| x % d.to_digit(10).unwrap() as isize == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122595,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /tmp/tmpdk1nok3p.rs:6:36\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum)\n        .filter(|&x| {\n            let digits: Vec<isize> = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize).collect();\n            digits.iter().all(|&d| x % d == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122595,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /tmp/tmpb6_xu8e5.rs:6:36\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum + 1)\n        .filter(|x| {\n            let mut digits = x.to_string().chars().map(|x| x.to_digit(10).unwrap() as isize);\n            digits.all(|x| x != 0 && *x % x == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122595,
      "stdout": "",
      "stderr": "error[E0614]: type `isize` cannot be dereferenced\n --> /tmp/tmpfr2lka7t.rs:6:38\n  |\n6 |             digits.all(|x| x != 0 && *x % x == 0)\n  |                                      ^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0614`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in startnum..=endnum {\n        let digits: Vec<isize> = i\n            .to_string()\n            .chars()\n            .map(|c| c.to_digit(10).unwrap() as isize)\n            .collect();\n        if digits.iter().all(|&d| i % d == 0) {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122595,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /tmp/tmp8h1u6ieq.rs:10:35\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in startnum..=endnum {\n        let digits = i.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize).collect::<Vec<isize>>();\n        if digits.iter().all(|d| i % d == 0) {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122595,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /rustc/e092d0b6b43f2de967af0887873151bb1c0b18d3/library/core/src/ops/arith.rs:609:1\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum + 1)\n        .filter(|&x| {\n            let digits: Vec<isize> = x\n                .to_string()\n                .chars()\n                .map(|c| c.to_digit(10).unwrap() as isize)\n                .collect();\n            digits.iter().all(|&y| x % y == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122595,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /tmp/tmp9bktogkg.rs:10:36\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    for i in startnum..=endnum {\n        let mut is_divisible = true;\n        let mut num = i;\n        while num > 0 {\n            let digit = num % 10;\n            if digit == 0 || i % digit != 0 {\n                is_divisible = false;\n                break;\n            }\n            num /= 10;\n        }\n        if is_divisible {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122595,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in startnum..endnum {\n        let digits: Vec<isize> = i.to_string().chars().map(|d| d.to_digit(10).unwrap() as isize).collect();\n        if digits.iter().all(|d| i % d == 0) {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122595,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /rustc/e092d0b6b43f2de967af0887873151bb1c0b18d3/library/core/src/ops/arith.rs:609:1\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    for i in startnum..=endnum {\n        let digits: Vec<char> = i.to_string().chars().collect();\n        let mut divisible = true;\n        for digit in digits {\n            if i % digit.to_digit(10).unwrap() as isize != 0 {\n                divisible = false;\n                break;\n            }\n        }\n        if divisible {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122595,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /tmp/tmp623gcfvf.rs:8:16\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in startnum..=endnum {\n        let digits = i.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n        if digits.all(|d| d != 0 && i % d == 0) {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122595,
      "stdout": "",
      "stderr": "error[E0716]: temporary value dropped while borrowed\n --> /tmp/tmp3cu88096.rs:5:22\n  |\n5 |         let digits = i.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                      ^^^^^^^^^^^^^                                                  - temporary value is freed at the end of this statement\n  |                      |\n  |                      creates a temporary which is freed while still in use\n6 |         if digits.all(|d| d != 0 && i % d == 0) {\n  |            ------------------------------------ borrow later used here\n  |\n  = note: consider using a `let` binding to create a longer lived value\n\nerror[E0596]: cannot borrow `digits` as mutable, as it is not declared as mutable\n --> /tmp/tmp3cu88096.rs:6:12\n  |\n5 |         let digits = i.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |             ------ help: consider changing this to be mutable: `mut digits`\n6 |         if digits.all(|d| d != 0 && i % d == 0) {\n  |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0596, E0716.\nFor more information about an error, try `rustc --explain E0596`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum)\n        .filter(|x| {\n            let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n            digits.all(|d| x % d == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1665509865,
      "stdout": "",
      "stderr": "error[E0716]: temporary value dropped while borrowed\n --> /tmp/tmpymt8c6eo.rs:5:26\n  |\n5 |             let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                          ^^^^^^^^^^^^^                                                  - temporary value is freed at the end of this statement\n  |                          |\n  |                          creates a temporary which is freed while still in use\n6 |             digits.all(|d| x % d == 0)\n  |             -------------------------- borrow later used here\n  |\n  = note: consider using a `let` binding to create a longer lived value\n\nerror[E0596]: cannot borrow `digits` as mutable, as it is not declared as mutable\n --> /tmp/tmpymt8c6eo.rs:6:13\n  |\n5 |             let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                 ------ help: consider changing this to be mutable: `mut digits`\n6 |             digits.all(|d| x % d == 0)\n  |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0596, E0716.\nFor more information about an error, try `rustc --explain E0596`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in startnum..=endnum {\n        let mut divisible = true;\n        for c in i.to_string().chars() {\n            if c == '0' {\n                divisible = false;\n                break;\n            }\n            if i % c.to_digit(10).unwrap() as isize != 0 {\n                divisible = false;\n                break;\n            }\n        }\n        if divisible {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122595,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for num in startnum..=endnum {\n        let digits = num.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n        if digits.all(|d| num % d == 0) {\n            result.push(num);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1665509865,
      "stdout": "",
      "stderr": "error[E0716]: temporary value dropped while borrowed\n --> /tmp/tmpqqqiazwd.rs:5:22\n  |\n5 |         let digits = num.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                      ^^^^^^^^^^^^^^^                                                  - temporary value is freed at the end of this statement\n  |                      |\n  |                      creates a temporary which is freed while still in use\n6 |         if digits.all(|d| num % d == 0) {\n  |            ---------------------------- borrow later used here\n  |\n  = note: consider using a `let` binding to create a longer lived value\n\nerror[E0596]: cannot borrow `digits` as mutable, as it is not declared as mutable\n --> /tmp/tmpqqqiazwd.rs:6:12\n  |\n5 |         let digits = num.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |             ------ help: consider changing this to be mutable: `mut digits`\n6 |         if digits.all(|d| num % d == 0) {\n  |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0596, E0716.\nFor more information about an error, try `rustc --explain E0596`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in startnum..endnum {\n        let mut divisible = true;\n        let mut num = i;\n        while num > 0 {\n            let digit = num % 10;\n            if digit == 0 || i % digit != 0 {\n                divisible = false;\n                break;\n            }\n            num /= 10;\n        }\n        if divisible {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122595,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]`,\n right: `[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]`', /tmp/tmp22pye7m2.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum)\n        .filter(|&x| {\n            let digits = x\n                .to_string()\n                .chars()\n                .map(|c| c.to_digit(10).unwrap() as isize)\n                .collect::<Vec<isize>>();\n            digits.iter().all(|&d| x % d == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122595,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /tmp/tmpgw32nd9c.rs:10:36\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in startnum..endnum {\n        let mut divisible = true;\n        let mut num = i;\n        while num > 0 {\n            let digit = num % 10;\n            if digit == 0 || i % digit != 0 {\n                divisible = false;\n                break;\n            }\n            num /= 10;\n        }\n        if divisible {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122595,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]`,\n right: `[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]`', /tmp/tmp22pye7m2.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in startnum..=endnum {\n        let digits = i.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize).collect::<Vec<isize>>();\n        if digits.iter().all(|&d| i % d == 0) {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122595,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /tmp/tmpir2h4tnh.rs:6:35\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum)\n        .filter(|&x| {\n            let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize).collect::<Vec<_>>();\n            digits.iter().all(|&d| x % d == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122595,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /tmp/tmpwezrcsuz.rs:6:36\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in startnum..endnum {\n        let mut is_divisible = true;\n        let mut num = i;\n        while num > 0 {\n            let digit = num % 10;\n            if digit == 0 || i % digit != 0 {\n                is_divisible = false;\n                break;\n            }\n            num /= 10;\n        }\n        if is_divisible {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122595,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]`,\n right: `[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]`', /tmp/tmph93ylq_b.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum)\n        .filter(|&x| {\n            let digits: Vec<_> = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize).collect();\n            digits.iter().all(|&d| x % d == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122595,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /tmp/tmpnmhv6111.rs:6:36\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum + 1)\n        .filter(|&x| {\n            let digits: Vec<isize> = x\n                .to_string()\n                .chars()\n                .map(|c| c.to_digit(10).unwrap() as isize)\n                .collect();\n            digits.iter().all(|&d| x % d == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122595,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /tmp/tmp4rja2vsg.rs:10:36\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in startnum..=endnum {\n        let digits: Vec<char> = i.to_string().chars().collect();\n        let divisible = digits.iter().all(|&x| i % (x as isize - '0' as isize) == 0);\n        if divisible {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122595,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /tmp/tmpu8uojoyx.rs:6:48\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in startnum..endnum {\n        let mut divisible = true;\n        for j in i.to_string().chars() {\n            if j == '0' {\n                divisible = false;\n                break;\n            }\n            if i % (j as isize - '0' as isize) != 0 {\n                divisible = false;\n                break;\n            }\n        }\n        if divisible {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122595,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]`,\n right: `[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]`', /tmp/tmpdrt_vzb1.rs:25:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum).filter(|&x| {\n        let digits: Vec<_> = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize).collect();\n        digits.iter().all(|&d| x % d == 0)\n    }).collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122595,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /tmp/tmplzkhfz0g.rs:5:32\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in startnum..=endnum {\n        let digits = i.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize).collect::<Vec<isize>>();\n        if digits.iter().all(|d| i % d == 0) {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122595,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /rustc/e092d0b6b43f2de967af0887873151bb1c0b18d3/library/core/src/ops/arith.rs:609:1\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in startnum..=endnum {\n        let mut is_divisible = true;\n        for digit in i.to_string().chars() {\n            if digit == '0' {\n                is_divisible = false;\n                break;\n            }\n            if i % digit.to_digit(10).unwrap() as isize != 0 {\n                is_divisible = false;\n                break;\n            }\n        }\n        if is_divisible {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122595,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    for i in startnum..endnum {\n        let digits: Vec<isize> = i.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize).collect();\n        if digits.iter().all(|&x| i % x == 0) {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122595,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /tmp/tmp1atqt_nf.rs:6:35\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum)\n        .filter(|x| {\n            let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n            digits.all(|d| x % d == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1665509865,
      "stdout": "",
      "stderr": "error[E0716]: temporary value dropped while borrowed\n --> /tmp/tmpymt8c6eo.rs:5:26\n  |\n5 |             let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                          ^^^^^^^^^^^^^                                                  - temporary value is freed at the end of this statement\n  |                          |\n  |                          creates a temporary which is freed while still in use\n6 |             digits.all(|d| x % d == 0)\n  |             -------------------------- borrow later used here\n  |\n  = note: consider using a `let` binding to create a longer lived value\n\nerror[E0596]: cannot borrow `digits` as mutable, as it is not declared as mutable\n --> /tmp/tmpymt8c6eo.rs:6:13\n  |\n5 |             let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                 ------ help: consider changing this to be mutable: `mut digits`\n6 |             digits.all(|d| x % d == 0)\n  |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0596, E0716.\nFor more information about an error, try `rustc --explain E0596`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum)\n        .filter(|&x| {\n            let mut x = x;\n            while x > 0 {\n                let digit = x % 10;\n                if digit == 0 || x % digit != 0 {\n                    return false;\n                }\n                x /= 10;\n            }\n            true\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122595,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 21]`,\n right: `[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]`', /tmp/tmpbtujddtg.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum)\n        .filter(|&x| {\n            let mut digits = x;\n            while digits > 0 {\n                let digit = digits % 10;\n                if digit == 0 || x % digit != 0 {\n                    return false;\n                }\n                digits /= 10;\n            }\n            true\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1665509865,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]`,\n right: `[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]`', /tmp/tmpqf0y54uf.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum)\n        .filter(|&x| {\n            let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n            digits.all(|d| x % d == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1665509865,
      "stdout": "",
      "stderr": "error[E0716]: temporary value dropped while borrowed\n --> /tmp/tmpghivvlvg.rs:5:26\n  |\n5 |             let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                          ^^^^^^^^^^^^^                                                  - temporary value is freed at the end of this statement\n  |                          |\n  |                          creates a temporary which is freed while still in use\n6 |             digits.all(|d| x % d == 0)\n  |             -------------------------- borrow later used here\n  |\n  = note: consider using a `let` binding to create a longer lived value\n\nerror[E0596]: cannot borrow `digits` as mutable, as it is not declared as mutable\n --> /tmp/tmpghivvlvg.rs:6:13\n  |\n5 |             let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                 ------ help: consider changing this to be mutable: `mut digits`\n6 |             digits.all(|d| x % d == 0)\n  |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0596, E0716.\nFor more information about an error, try `rustc --explain E0596`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum)\n        .filter(|&x| {\n            let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n            digits.all(|d| x % d == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1665509865,
      "stdout": "",
      "stderr": "error[E0716]: temporary value dropped while borrowed\n --> /tmp/tmpghivvlvg.rs:5:26\n  |\n5 |             let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                          ^^^^^^^^^^^^^                                                  - temporary value is freed at the end of this statement\n  |                          |\n  |                          creates a temporary which is freed while still in use\n6 |             digits.all(|d| x % d == 0)\n  |             -------------------------- borrow later used here\n  |\n  = note: consider using a `let` binding to create a longer lived value\n\nerror[E0596]: cannot borrow `digits` as mutable, as it is not declared as mutable\n --> /tmp/tmpghivvlvg.rs:6:13\n  |\n5 |             let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                 ------ help: consider changing this to be mutable: `mut digits`\n6 |             digits.all(|d| x % d == 0)\n  |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0596, E0716.\nFor more information about an error, try `rustc --explain E0596`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum)\n        .filter(|&x| {\n            let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize).collect::<Vec<isize>>();\n            digits.iter().all(|&d| x % d == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122595,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /tmp/tmpobftyc2e.rs:6:36\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in startnum..=endnum {\n        let mut is_divisible = true;\n        let mut num = i;\n        while num > 0 {\n            let digit = num % 10;\n            if digit == 0 || i % digit != 0 {\n                is_divisible = false;\n                break;\n            }\n            num = num / 10;\n        }\n        if is_divisible {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122595,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum)\n        .filter(|x| {\n            let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n            digits.all(|d| x % d == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1665509865,
      "stdout": "",
      "stderr": "error[E0716]: temporary value dropped while borrowed\n --> /tmp/tmpymt8c6eo.rs:5:26\n  |\n5 |             let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                          ^^^^^^^^^^^^^                                                  - temporary value is freed at the end of this statement\n  |                          |\n  |                          creates a temporary which is freed while still in use\n6 |             digits.all(|d| x % d == 0)\n  |             -------------------------- borrow later used here\n  |\n  = note: consider using a `let` binding to create a longer lived value\n\nerror[E0596]: cannot borrow `digits` as mutable, as it is not declared as mutable\n --> /tmp/tmpymt8c6eo.rs:6:13\n  |\n5 |             let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                 ------ help: consider changing this to be mutable: `mut digits`\n6 |             digits.all(|d| x % d == 0)\n  |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0596, E0716.\nFor more information about an error, try `rustc --explain E0596`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for num in startnum..endnum {\n        let mut divisible = true;\n        let mut num_copy = num;\n        while num_copy > 0 {\n            let digit = num_copy % 10;\n            if digit == 0 || num % digit != 0 {\n                divisible = false;\n                break;\n            }\n            num_copy /= 10;\n        }\n        if divisible {\n            result.push(num);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122595,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]`,\n right: `[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]`', /tmp/tmpp_ro6mvl.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in startnum..=endnum {\n        let digits = i.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n        if digits.all(|d| i % d == 0) {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122594,
      "stdout": "",
      "stderr": "error[E0716]: temporary value dropped while borrowed\n --> /tmp/tmp6p0qsh5f.rs:5:22\n  |\n5 |         let digits = i.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                      ^^^^^^^^^^^^^                                                  - temporary value is freed at the end of this statement\n  |                      |\n  |                      creates a temporary which is freed while still in use\n6 |         if digits.all(|d| i % d == 0) {\n  |            -------------------------- borrow later used here\n  |\n  = note: consider using a `let` binding to create a longer lived value\n\nerror[E0596]: cannot borrow `digits` as mutable, as it is not declared as mutable\n --> /tmp/tmp6p0qsh5f.rs:6:12\n  |\n5 |         let digits = i.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |             ------ help: consider changing this to be mutable: `mut digits`\n6 |         if digits.all(|d| i % d == 0) {\n  |            ^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0596, E0716.\nFor more information about an error, try `rustc --explain E0596`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum)\n        .filter(|&x| {\n            let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n            digits.all(|d| x % d == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1665509865,
      "stdout": "",
      "stderr": "error[E0716]: temporary value dropped while borrowed\n --> /tmp/tmpghivvlvg.rs:5:26\n  |\n5 |             let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                          ^^^^^^^^^^^^^                                                  - temporary value is freed at the end of this statement\n  |                          |\n  |                          creates a temporary which is freed while still in use\n6 |             digits.all(|d| x % d == 0)\n  |             -------------------------- borrow later used here\n  |\n  = note: consider using a `let` binding to create a longer lived value\n\nerror[E0596]: cannot borrow `digits` as mutable, as it is not declared as mutable\n --> /tmp/tmpghivvlvg.rs:6:13\n  |\n5 |             let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                 ------ help: consider changing this to be mutable: `mut digits`\n6 |             digits.all(|d| x % d == 0)\n  |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0596, E0716.\nFor more information about an error, try `rustc --explain E0596`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in startnum..endnum {\n        let mut divisible = true;\n        for digit in i.to_string().chars() {\n            if digit == '0' {\n                divisible = false;\n                break;\n            }\n            if i % digit.to_digit(10).unwrap() as isize != 0 {\n                divisible = false;\n                break;\n            }\n        }\n        if divisible {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122595,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]`,\n right: `[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]`', /tmp/tmpt1ynf0k6.rs:25:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for num in startnum..endnum {\n        let digits = num.to_string().chars().map(|d| d.to_digit(10).unwrap() as isize).collect::<Vec<isize>>();\n        if digits.iter().all(|d| num % d == 0) {\n            result.push(num);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122595,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /rustc/e092d0b6b43f2de967af0887873151bb1c0b18d3/library/core/src/ops/arith.rs:609:1\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum + 1)\n        .filter(|x| {\n            let digits = x\n                .to_string()\n                .chars()\n                .map(|x| x.to_digit(10).unwrap() as isize)\n                .collect::<Vec<isize>>();\n            digits.iter().all(|&y| x % y == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122595,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /rustc/e092d0b6b43f2de967af0887873151bb1c0b18d3/library/core/src/ops/arith.rs:609:1\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for num in startnum..endnum {\n        let digits: Vec<isize> = num.to_string().chars().map(|d| d.to_digit(10).unwrap() as isize).collect();\n        if digits.iter().all(|&d| num % d == 0) {\n            result.push(num);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122595,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /tmp/tmpdqbx8iln.rs:6:35\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in startnum..endnum {\n        let digits: Vec<char> = i.to_string().chars().collect();\n        let mut is_divisible = true;\n        for d in digits {\n            let digit = d.to_digit(10).unwrap() as isize;\n            if i % digit != 0 {\n                is_divisible = false;\n                break;\n            }\n        }\n        if is_divisible {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122596,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /tmp/tmpvjyszi07.rs:9:16\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in startnum..=endnum {\n        let digits: Vec<isize> = i.to_string().chars().map(|d| d.to_digit(10).unwrap() as isize).collect();\n        if digits.iter().all(|d| i % d == 0) {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122596,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /rustc/e092d0b6b43f2de967af0887873151bb1c0b18d3/library/core/src/ops/arith.rs:609:1\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in startnum..=endnum {\n        let mut is_divisible = true;\n        for digit in i.to_string().chars() {\n            if digit == '0' {\n                is_divisible = false;\n                break;\n            }\n            if i % digit.to_digit(10).unwrap() as isize != 0 {\n                is_divisible = false;\n                break;\n            }\n        }\n        if is_divisible {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122595,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum)\n        .filter(|&x| {\n            let mut x = x;\n            while x > 0 {\n                let digit = x % 10;\n                if digit == 0 || x % digit != 0 {\n                    return false;\n                }\n                x /= 10;\n            }\n            true\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122595,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 21]`,\n right: `[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]`', /tmp/tmpbtujddtg.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in startnum..=endnum {\n        let digits = i.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize).collect::<Vec<_>>();\n        if digits.iter().all(|&d| i % d == 0) {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122596,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /tmp/tmpvq4kh2ds.rs:6:35\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..=endnum)\n        .filter(|&x| {\n            let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n            digits.all(|d| x % d == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122594,
      "stdout": "",
      "stderr": "error[E0716]: temporary value dropped while borrowed\n --> /tmp/tmprhh8n3ne.rs:5:26\n  |\n5 |             let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                          ^^^^^^^^^^^^^                                                  - temporary value is freed at the end of this statement\n  |                          |\n  |                          creates a temporary which is freed while still in use\n6 |             digits.all(|d| x % d == 0)\n  |             -------------------------- borrow later used here\n  |\n  = note: consider using a `let` binding to create a longer lived value\n\nerror[E0596]: cannot borrow `digits` as mutable, as it is not declared as mutable\n --> /tmp/tmprhh8n3ne.rs:6:13\n  |\n5 |             let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                 ------ help: consider changing this to be mutable: `mut digits`\n6 |             digits.all(|d| x % d == 0)\n  |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0596, E0716.\nFor more information about an error, try `rustc --explain E0596`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..=endnum)\n        .filter(|&n| {\n            let digits = n.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n            digits.all(|d| n % d == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122595,
      "stdout": "",
      "stderr": "error[E0716]: temporary value dropped while borrowed\n --> /tmp/tmp3vqahqjx.rs:5:26\n  |\n5 |             let digits = n.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                          ^^^^^^^^^^^^^                                                  - temporary value is freed at the end of this statement\n  |                          |\n  |                          creates a temporary which is freed while still in use\n6 |             digits.all(|d| n % d == 0)\n  |             -------------------------- borrow later used here\n  |\n  = note: consider using a `let` binding to create a longer lived value\n\nerror[E0596]: cannot borrow `digits` as mutable, as it is not declared as mutable\n --> /tmp/tmp3vqahqjx.rs:6:13\n  |\n5 |             let digits = n.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                 ------ help: consider changing this to be mutable: `mut digits`\n6 |             digits.all(|d| n % d == 0)\n  |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0596, E0716.\nFor more information about an error, try `rustc --explain E0596`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..=endnum)\n        .filter(|x| x.to_string().chars().all(|c| x % c.to_digit(10).unwrap() as isize == 0))\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122596,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /rustc/e092d0b6b43f2de967af0887873151bb1c0b18d3/library/core/src/ops/arith.rs:609:1\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum + 1)\n        .filter(|&x| {\n            let digits = digits(x);\n            digits.iter().all(|&d| x % d == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122595,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `digits` in this scope\n --> /tmp/tmprahmde40.rs:5:26\n  |\n5 |             let digits = digits(x);\n  |                          ^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum)\n        .filter(|&x| {\n            let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n            digits.all(|d| x % d == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1665509865,
      "stdout": "",
      "stderr": "error[E0716]: temporary value dropped while borrowed\n --> /tmp/tmpghivvlvg.rs:5:26\n  |\n5 |             let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                          ^^^^^^^^^^^^^                                                  - temporary value is freed at the end of this statement\n  |                          |\n  |                          creates a temporary which is freed while still in use\n6 |             digits.all(|d| x % d == 0)\n  |             -------------------------- borrow later used here\n  |\n  = note: consider using a `let` binding to create a longer lived value\n\nerror[E0596]: cannot borrow `digits` as mutable, as it is not declared as mutable\n --> /tmp/tmpghivvlvg.rs:6:13\n  |\n5 |             let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                 ------ help: consider changing this to be mutable: `mut digits`\n6 |             digits.all(|d| x % d == 0)\n  |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0596, E0716.\nFor more information about an error, try `rustc --explain E0596`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum)\n        .filter(|&x| {\n            let digits: Vec<char> = x.to_string().chars().collect();\n            digits\n                .iter()\n                .all(|&digit| x % digit.to_digit(10).unwrap() as isize == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122596,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /tmp/tmpo6beius_.rs:8:31\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum)\n        .filter(|&x| {\n            let digits = digits(x);\n            digits.iter().all(|&d| x % d == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122595,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `digits` in this scope\n --> /tmp/tmp_0_84zrj.rs:5:26\n  |\n5 |             let digits = digits(x);\n  |                          ^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..=endnum)\n        .filter(|&x| {\n            let mut x = x;\n            while x > 0 {\n                let digit = x % 10;\n                if digit == 0 || x % digit != 0 {\n                    return false;\n                }\n                x /= 10;\n            }\n            true\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122596,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 21, 22]`,\n right: `[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]`', /tmp/tmppbnmamnc.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in startnum..=endnum {\n        let digits: Vec<isize> = i.to_string().chars().map(|d| d.to_digit(10).unwrap() as isize).collect();\n        let divisible = digits.iter().all(|d| i % d == 0);\n        if divisible {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122596,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /rustc/e092d0b6b43f2de967af0887873151bb1c0b18d3/library/core/src/ops/arith.rs:609:1\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for num in startnum..endnum {\n        let mut divisible = true;\n        let mut num_copy = num;\n        while num_copy > 0 {\n            let digit = num_copy % 10;\n            if digit == 0 || num % digit != 0 {\n                divisible = false;\n                break;\n            }\n            num_copy /= 10;\n        }\n        if divisible {\n            result.push(num);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122595,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]`,\n right: `[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]`', /tmp/tmpp_ro6mvl.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum)\n        .filter(|&x| {\n            let mut digits = x;\n            while digits > 0 {\n                let digit = digits % 10;\n                if digit == 0 || x % digit != 0 {\n                    return false;\n                }\n                digits /= 10;\n            }\n            true\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1665509865,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]`,\n right: `[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]`', /tmp/tmpqf0y54uf.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in startnum..endnum {\n        let mut is_divisible = true;\n        let mut num = i;\n        while num > 0 {\n            let digit = num % 10;\n            if digit == 0 || i % digit != 0 {\n                is_divisible = false;\n                break;\n            }\n            num /= 10;\n        }\n        if is_divisible {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122595,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]`,\n right: `[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]`', /tmp/tmph93ylq_b.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum)\n        .filter(|&x| {\n            let mut digits = x;\n            while digits > 0 {\n                let digit = digits % 10;\n                if digit == 0 || x % digit != 0 {\n                    return false;\n                }\n                digits /= 10;\n            }\n            true\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1665509865,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]`,\n right: `[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]`', /tmp/tmpqf0y54uf.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum)\n        .filter(|&x| {\n            let digits = x.to_string();\n            digits.chars().all(|c| x % c.to_digit(10).unwrap() as isize == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122596,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /tmp/tmp1g4urw_z.rs:6:36\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in startnum..=endnum {\n        let mut divisible = true;\n        for digit in i.to_string().chars() {\n            if digit == '0' {\n                divisible = false;\n                break;\n            }\n            if i % digit.to_digit(10).unwrap() as isize != 0 {\n                divisible = false;\n                break;\n            }\n        }\n        if divisible {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122596,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum + 1)\n        .filter(|&n| {\n            n.to_string()\n                .chars()\n                .all(|c| n % c.to_digit(10).unwrap() as isize == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122596,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /tmp/tmp2ijy_49q.rs:7:26\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum)\n        .filter(|x| {\n            let digits = x.to_string();\n            digits.chars().all(|c| {\n                let digit = c.to_digit(10).unwrap();\n                x % digit == 0\n            })\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122595,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpa_jokd3q.rs:8:21\n  |\n8 |                 x % digit == 0\n  |                     ^^^^^ expected `isize`, found `u32`\n\nerror[E0277]: cannot mod `&isize` by `u32`\n --> /tmp/tmpa_jokd3q.rs:8:19\n  |\n8 |                 x % digit == 0\n  |                   ^ no implementation for `&isize % u32`\n  |\n  = help: the trait `Rem<u32>` is not implemented for `&isize`\n  = help: the following other types implement trait `Rem<Rhs>`:\n            <&'a f32 as Rem<f32>>\n            <&'a f64 as Rem<f64>>\n            <&'a i128 as Rem<i128>>\n            <&'a i16 as Rem<i16>>\n            <&'a i32 as Rem<i32>>\n            <&'a i64 as Rem<i64>>\n            <&'a i8 as Rem<i8>>\n            <&'a isize as Rem<isize>>\n          and 54 others\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum)\n        .filter(|&x| {\n            let digits: Vec<_> = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize).collect();\n            digits.iter().all(|&y| x % y == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122596,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /tmp/tmpqwqwa9lb.rs:6:36\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum)\n        .filter(|&x| {\n            let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize).collect::<Vec<isize>>();\n            digits.iter().all(|&d| x % d == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122595,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /tmp/tmpobftyc2e.rs:6:36\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum)\n        .filter(|&x| {\n            let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n            digits.all(|d| x % d == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1665509865,
      "stdout": "",
      "stderr": "error[E0716]: temporary value dropped while borrowed\n --> /tmp/tmpghivvlvg.rs:5:26\n  |\n5 |             let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                          ^^^^^^^^^^^^^                                                  - temporary value is freed at the end of this statement\n  |                          |\n  |                          creates a temporary which is freed while still in use\n6 |             digits.all(|d| x % d == 0)\n  |             -------------------------- borrow later used here\n  |\n  = note: consider using a `let` binding to create a longer lived value\n\nerror[E0596]: cannot borrow `digits` as mutable, as it is not declared as mutable\n --> /tmp/tmpghivvlvg.rs:6:13\n  |\n5 |             let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                 ------ help: consider changing this to be mutable: `mut digits`\n6 |             digits.all(|d| x % d == 0)\n  |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0596, E0716.\nFor more information about an error, try `rustc --explain E0596`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in startnum..endnum {\n        let mut is_divisible = true;\n        let mut num = i;\n        while num > 0 {\n            let digit = num % 10;\n            if digit == 0 || i % digit != 0 {\n                is_divisible = false;\n                break;\n            }\n            num /= 10;\n        }\n        if is_divisible {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122595,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]`,\n right: `[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]`', /tmp/tmph93ylq_b.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum)\n        .filter(|&x| x.to_string().chars().all(|c| x % (c as isize - '0' as isize) == 0))\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122596,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /tmp/tmps10w2j7b.rs:4:52\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..=endnum)\n        .filter(|n| {\n            n.to_string()\n                .chars()\n                .all(|c| n % c.to_digit(10).unwrap() as isize == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122596,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /rustc/e092d0b6b43f2de967af0887873151bb1c0b18d3/library/core/src/ops/arith.rs:609:1\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in startnum..=endnum {\n        let digits = i.to_string().chars().map(|x| x.to_digit(10).unwrap() as isize).collect::<Vec<isize>>();\n        if digits.iter().all(|x| i % x == 0) {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122596,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /rustc/e092d0b6b43f2de967af0887873151bb1c0b18d3/library/core/src/ops/arith.rs:609:1\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    for i in startnum..endnum {\n        let mut is_divisible = true;\n        for digit in i.to_string().chars() {\n            if digit == '0' {\n                is_divisible = false;\n                break;\n            }\n            if i % digit.to_digit(10).unwrap() as isize != 0 {\n                is_divisible = false;\n                break;\n            }\n        }\n        if is_divisible {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122596,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]`,\n right: `[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]`', /tmp/tmpd6axbbaj.rs:25:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..=endnum)\n        .filter(|x| {\n            let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n            digits.all(|d| x % d == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122594,
      "stdout": "",
      "stderr": "error[E0716]: temporary value dropped while borrowed\n --> /tmp/tmpsb6kgjaa.rs:5:26\n  |\n5 |             let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                          ^^^^^^^^^^^^^                                                  - temporary value is freed at the end of this statement\n  |                          |\n  |                          creates a temporary which is freed while still in use\n6 |             digits.all(|d| x % d == 0)\n  |             -------------------------- borrow later used here\n  |\n  = note: consider using a `let` binding to create a longer lived value\n\nerror[E0596]: cannot borrow `digits` as mutable, as it is not declared as mutable\n --> /tmp/tmpsb6kgjaa.rs:6:13\n  |\n5 |             let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                 ------ help: consider changing this to be mutable: `mut digits`\n6 |             digits.all(|d| x % d == 0)\n  |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0596, E0716.\nFor more information about an error, try `rustc --explain E0596`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum)\n        .filter(|&x| {\n            let mut digits = x;\n            while digits > 0 {\n                let digit = digits % 10;\n                if digit == 0 || x % digit != 0 {\n                    return false;\n                }\n                digits /= 10;\n            }\n            true\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1665509865,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]`,\n right: `[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]`', /tmp/tmpqf0y54uf.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum)\n        .filter(|x| {\n            let mut x = *x;\n            while x > 0 {\n                let digit = x % 10;\n                if digit == 0 || *x % digit != 0 {\n                    return false;\n                }\n                x /= 10;\n            }\n            true\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122595,
      "stdout": "",
      "stderr": "error[E0614]: type `isize` cannot be dereferenced\n --> /tmp/tmpggklakxx.rs:8:34\n  |\n8 |                 if digit == 0 || *x % digit != 0 {\n  |                                  ^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0614`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum + 1)\n        .filter(|&x| {\n            x.to_string()\n                .chars()\n                .all(|c| x % (c as isize - '0' as isize) == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122596,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /tmp/tmp7d8tnub5.rs:7:26\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum)\n        .filter(|&x| {\n            let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n            digits.all(|d| x % d == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1665509865,
      "stdout": "",
      "stderr": "error[E0716]: temporary value dropped while borrowed\n --> /tmp/tmpghivvlvg.rs:5:26\n  |\n5 |             let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                          ^^^^^^^^^^^^^                                                  - temporary value is freed at the end of this statement\n  |                          |\n  |                          creates a temporary which is freed while still in use\n6 |             digits.all(|d| x % d == 0)\n  |             -------------------------- borrow later used here\n  |\n  = note: consider using a `let` binding to create a longer lived value\n\nerror[E0596]: cannot borrow `digits` as mutable, as it is not declared as mutable\n --> /tmp/tmpghivvlvg.rs:6:13\n  |\n5 |             let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                 ------ help: consider changing this to be mutable: `mut digits`\n6 |             digits.all(|d| x % d == 0)\n  |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0596, E0716.\nFor more information about an error, try `rustc --explain E0596`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in startnum..=endnum {\n        let mut is_divisible = true;\n        let mut num = i;\n        while num > 0 {\n            let digit = num % 10;\n            if digit == 0 || i % digit != 0 {\n                is_divisible = false;\n                break;\n            }\n            num /= 10;\n        }\n        if is_divisible {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122596,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in startnum..=endnum {\n        let digits = i.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize).collect::<Vec<isize>>();\n        if digits.iter().all(|&x| i % x == 0) {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122596,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /tmp/tmpwlselj1j.rs:6:35\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum)\n        .filter(|&n| {\n            let mut digits = n.to_string().chars().map(|c| c.to_digit(10).unwrap()).collect::<Vec<_>>();\n            digits.sort();\n            digits.dedup();\n            digits.iter().all(|&d| n % d == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122596,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpfae7dsp_.rs:8:40\n  |\n8 |             digits.iter().all(|&d| n % d == 0)\n  |                                        ^ expected `isize`, found `u32`\n\nerror[E0277]: cannot mod `isize` by `u32`\n --> /tmp/tmpfae7dsp_.rs:8:38\n  |\n8 |             digits.iter().all(|&d| n % d == 0)\n  |                                      ^ no implementation for `isize % u32`\n  |\n  = help: the trait `Rem<u32>` is not implemented for `isize`\n  = help: the following other types implement trait `Rem<Rhs>`:\n            <&'a f32 as Rem<f32>>\n            <&'a f64 as Rem<f64>>\n            <&'a i128 as Rem<i128>>\n            <&'a i16 as Rem<i16>>\n            <&'a i32 as Rem<i32>>\n            <&'a i64 as Rem<i64>>\n            <&'a i8 as Rem<i8>>\n            <&'a isize as Rem<isize>>\n          and 54 others\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum)\n        .filter(|&x| {\n            let mut digits = x;\n            while digits > 0 {\n                let digit = digits % 10;\n                if digit == 0 || x % digit != 0 {\n                    return false;\n                }\n                digits /= 10;\n            }\n            true\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1665509865,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]`,\n right: `[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]`', /tmp/tmpqf0y54uf.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..=endnum)\n        .filter(|&x| {\n            x.to_string()\n                .chars()\n                .all(|c| x % c.to_digit(10).unwrap() as isize == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122596,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /tmp/tmpcaaiudtd.rs:7:26\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum)\n        .filter(|&x| {\n            let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize).collect::<Vec<isize>>();\n            digits.iter().all(|&d| x % d == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122595,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /tmp/tmpobftyc2e.rs:6:36\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in startnum..endnum {\n        let digits = i.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize).collect::<Vec<isize>>();\n        if digits.iter().all(|d| i % d == 0) {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122596,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /rustc/e092d0b6b43f2de967af0887873151bb1c0b18d3/library/core/src/ops/arith.rs:609:1\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in startnum..=endnum {\n        let digits = i.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n        if digits.all(|d| i % d == 0) {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122594,
      "stdout": "",
      "stderr": "error[E0716]: temporary value dropped while borrowed\n --> /tmp/tmp6p0qsh5f.rs:5:22\n  |\n5 |         let digits = i.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                      ^^^^^^^^^^^^^                                                  - temporary value is freed at the end of this statement\n  |                      |\n  |                      creates a temporary which is freed while still in use\n6 |         if digits.all(|d| i % d == 0) {\n  |            -------------------------- borrow later used here\n  |\n  = note: consider using a `let` binding to create a longer lived value\n\nerror[E0596]: cannot borrow `digits` as mutable, as it is not declared as mutable\n --> /tmp/tmp6p0qsh5f.rs:6:12\n  |\n5 |         let digits = i.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |             ------ help: consider changing this to be mutable: `mut digits`\n6 |         if digits.all(|d| i % d == 0) {\n  |            ^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0596, E0716.\nFor more information about an error, try `rustc --explain E0596`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for num in startnum..endnum {\n        let digits: Vec<isize> = num\n            .to_string()\n            .chars()\n            .map(|c| c.to_digit(10).unwrap() as isize)\n            .collect();\n        let is_divisible = digits.iter().all(|&d| num % d == 0);\n        if is_divisible {\n            result.push(num);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122596,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /tmp/tmpdk6sbjvt.rs:10:51\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..=endnum)\n        .filter(|&x| {\n            let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n            digits.all(|d| x % d == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122594,
      "stdout": "",
      "stderr": "error[E0716]: temporary value dropped while borrowed\n --> /tmp/tmprhh8n3ne.rs:5:26\n  |\n5 |             let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                          ^^^^^^^^^^^^^                                                  - temporary value is freed at the end of this statement\n  |                          |\n  |                          creates a temporary which is freed while still in use\n6 |             digits.all(|d| x % d == 0)\n  |             -------------------------- borrow later used here\n  |\n  = note: consider using a `let` binding to create a longer lived value\n\nerror[E0596]: cannot borrow `digits` as mutable, as it is not declared as mutable\n --> /tmp/tmprhh8n3ne.rs:6:13\n  |\n5 |             let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                 ------ help: consider changing this to be mutable: `mut digits`\n6 |             digits.all(|d| x % d == 0)\n  |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0596, E0716.\nFor more information about an error, try `rustc --explain E0596`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum)\n        .filter(|x| {\n            let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n            digits.all(|d| x % d == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1665509865,
      "stdout": "",
      "stderr": "error[E0716]: temporary value dropped while borrowed\n --> /tmp/tmpymt8c6eo.rs:5:26\n  |\n5 |             let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                          ^^^^^^^^^^^^^                                                  - temporary value is freed at the end of this statement\n  |                          |\n  |                          creates a temporary which is freed while still in use\n6 |             digits.all(|d| x % d == 0)\n  |             -------------------------- borrow later used here\n  |\n  = note: consider using a `let` binding to create a longer lived value\n\nerror[E0596]: cannot borrow `digits` as mutable, as it is not declared as mutable\n --> /tmp/tmpymt8c6eo.rs:6:13\n  |\n5 |             let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                 ------ help: consider changing this to be mutable: `mut digits`\n6 |             digits.all(|d| x % d == 0)\n  |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0596, E0716.\nFor more information about an error, try `rustc --explain E0596`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in startnum..=endnum {\n        let digits = i.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize).collect::<Vec<isize>>();\n        if digits.iter().all(|d| i % d == 0) {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122595,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /rustc/e092d0b6b43f2de967af0887873151bb1c0b18d3/library/core/src/ops/arith.rs:609:1\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum)\n        .filter(|&x| {\n            let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n            digits.all(|d| x % d == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1665509865,
      "stdout": "",
      "stderr": "error[E0716]: temporary value dropped while borrowed\n --> /tmp/tmpghivvlvg.rs:5:26\n  |\n5 |             let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                          ^^^^^^^^^^^^^                                                  - temporary value is freed at the end of this statement\n  |                          |\n  |                          creates a temporary which is freed while still in use\n6 |             digits.all(|d| x % d == 0)\n  |             -------------------------- borrow later used here\n  |\n  = note: consider using a `let` binding to create a longer lived value\n\nerror[E0596]: cannot borrow `digits` as mutable, as it is not declared as mutable\n --> /tmp/tmpghivvlvg.rs:6:13\n  |\n5 |             let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                 ------ help: consider changing this to be mutable: `mut digits`\n6 |             digits.all(|d| x % d == 0)\n  |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0596, E0716.\nFor more information about an error, try `rustc --explain E0596`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum)\n        .filter(|&x| {\n            let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n            digits.all(|d| x % d == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1665509865,
      "stdout": "",
      "stderr": "error[E0716]: temporary value dropped while borrowed\n --> /tmp/tmpghivvlvg.rs:5:26\n  |\n5 |             let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                          ^^^^^^^^^^^^^                                                  - temporary value is freed at the end of this statement\n  |                          |\n  |                          creates a temporary which is freed while still in use\n6 |             digits.all(|d| x % d == 0)\n  |             -------------------------- borrow later used here\n  |\n  = note: consider using a `let` binding to create a longer lived value\n\nerror[E0596]: cannot borrow `digits` as mutable, as it is not declared as mutable\n --> /tmp/tmpghivvlvg.rs:6:13\n  |\n5 |             let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                 ------ help: consider changing this to be mutable: `mut digits`\n6 |             digits.all(|d| x % d == 0)\n  |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0596, E0716.\nFor more information about an error, try `rustc --explain E0596`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in startnum..endnum {\n        let mut digits = Vec::new();\n        let mut num = i;\n        while num > 0 {\n            digits.push(num % 10);\n            num /= 10;\n        }\n        if digits.iter().all(|&x| i % x == 0) {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122596,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /tmp/tmp4kzq1apm.rs:11:35\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in startnum..endnum {\n        let mut divisible = true;\n        let mut num = i;\n        while num > 0 {\n            let digit = num % 10;\n            if digit == 0 || i % digit != 0 {\n                divisible = false;\n                break;\n            }\n            num /= 10;\n        }\n        if divisible {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122595,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]`,\n right: `[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]`', /tmp/tmp22pye7m2.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in startnum..=endnum {\n        let digits: Vec<char> = i.to_string().chars().collect();\n        let digits: Vec<isize> = digits.iter().map(|x| x.to_string().parse::<isize>().unwrap()).collect();\n        if digits.iter().all(|x| i % x == 0) {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122596,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /rustc/e092d0b6b43f2de967af0887873151bb1c0b18d3/library/core/src/ops/arith.rs:609:1\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in startnum..=endnum {\n        let mut digits = Vec::new();\n        let mut num = i;\n        while num > 0 {\n            digits.push(num % 10);\n            num /= 10;\n        }\n        if digits.iter().all(|&x| i % x == 0) {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122595,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /tmp/tmpnlf7moz3.rs:11:35\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum)\n        .filter(|x| {\n            let mut digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n            digits.all(|d| x % d == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122596,
      "stdout": "",
      "stderr": "error[E0716]: temporary value dropped while borrowed\n --> /tmp/tmp6k9iieqq.rs:5:30\n  |\n5 |             let mut digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                              ^^^^^^^^^^^^^                                                  - temporary value is freed at the end of this statement\n  |                              |\n  |                              creates a temporary which is freed while still in use\n6 |             digits.all(|d| x % d == 0)\n  |             -------------------------- borrow later used here\n  |\n  = note: consider using a `let` binding to create a longer lived value\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0716`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum)\n        .filter(|&x| {\n            let digits = x.to_string();\n            digits\n                .chars()\n                .all(|c| c.to_digit(10).map_or(false, |d| x % d as isize == 0))\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122596,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /tmp/tmpmd_nrayk.rs:8:59\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum + 1)\n        .filter(|&x| {\n            x.to_string()\n                .chars()\n                .all(|c| x % c.to_digit(10).unwrap() as isize == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122595,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /tmp/tmpk1yt78mg.rs:7:26\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum)\n        .filter(|&x| {\n            let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n            digits.all(|d| x % d == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1665509865,
      "stdout": "",
      "stderr": "error[E0716]: temporary value dropped while borrowed\n --> /tmp/tmpghivvlvg.rs:5:26\n  |\n5 |             let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                          ^^^^^^^^^^^^^                                                  - temporary value is freed at the end of this statement\n  |                          |\n  |                          creates a temporary which is freed while still in use\n6 |             digits.all(|d| x % d == 0)\n  |             -------------------------- borrow later used here\n  |\n  = note: consider using a `let` binding to create a longer lived value\n\nerror[E0596]: cannot borrow `digits` as mutable, as it is not declared as mutable\n --> /tmp/tmpghivvlvg.rs:6:13\n  |\n5 |             let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                 ------ help: consider changing this to be mutable: `mut digits`\n6 |             digits.all(|d| x % d == 0)\n  |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0596, E0716.\nFor more information about an error, try `rustc --explain E0596`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum)\n        .filter(|&x| {\n            let mut digits = Vec::new();\n            let mut x = x;\n            while x > 0 {\n                digits.push(x % 10);\n                x /= 10;\n            }\n            digits.iter().all(|&d| d != 0 && x % d == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122596,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21]`,\n right: `[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]`', /tmp/tmp52sjgall.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum)\n        .filter(|&x| {\n            x.to_string()\n                .chars()\n                .all(|c| x % (c as isize - 48) == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122596,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /tmp/tmp9v3f098p.rs:7:26\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum)\n        .filter(|x| {\n            let mut x = *x;\n            while x > 0 {\n                if *x % (x % 10) != 0 {\n                    return false;\n                }\n                x /= 10;\n            }\n            true\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122596,
      "stdout": "",
      "stderr": "error[E0614]: type `isize` cannot be dereferenced\n --> /tmp/tmpwio_gh0u.rs:7:20\n  |\n7 |                 if *x % (x % 10) != 0 {\n  |                    ^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0614`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for num in startnum..=endnum {\n        let digits: Vec<isize> = num\n            .to_string()\n            .chars()\n            .map(|c| c.to_digit(10).unwrap() as isize)\n            .collect();\n        if digits.iter().all(|&d| num % d == 0) {\n            result.push(num);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122596,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /tmp/tmppx12fkp5.rs:10:35\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in startnum..endnum {\n        let digits = i.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize).collect::<Vec<isize>>();\n        let is_divisible = digits.iter().fold(true, |acc, x| acc && i % x == 0);\n        if is_divisible {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122596,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /rustc/e092d0b6b43f2de967af0887873151bb1c0b18d3/library/core/src/ops/arith.rs:609:1\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum)\n        .filter(|&x| {\n            let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n            digits.all(|d| x % d == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1665509865,
      "stdout": "",
      "stderr": "error[E0716]: temporary value dropped while borrowed\n --> /tmp/tmpghivvlvg.rs:5:26\n  |\n5 |             let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                          ^^^^^^^^^^^^^                                                  - temporary value is freed at the end of this statement\n  |                          |\n  |                          creates a temporary which is freed while still in use\n6 |             digits.all(|d| x % d == 0)\n  |             -------------------------- borrow later used here\n  |\n  = note: consider using a `let` binding to create a longer lived value\n\nerror[E0596]: cannot borrow `digits` as mutable, as it is not declared as mutable\n --> /tmp/tmpghivvlvg.rs:6:13\n  |\n5 |             let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                 ------ help: consider changing this to be mutable: `mut digits`\n6 |             digits.all(|d| x % d == 0)\n  |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0596, E0716.\nFor more information about an error, try `rustc --explain E0596`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum)\n        .filter(|x| {\n            let mut digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n            digits.all(|d| x % d == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122596,
      "stdout": "",
      "stderr": "error[E0716]: temporary value dropped while borrowed\n --> /tmp/tmp6k9iieqq.rs:5:30\n  |\n5 |             let mut digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                              ^^^^^^^^^^^^^                                                  - temporary value is freed at the end of this statement\n  |                              |\n  |                              creates a temporary which is freed while still in use\n6 |             digits.all(|d| x % d == 0)\n  |             -------------------------- borrow later used here\n  |\n  = note: consider using a `let` binding to create a longer lived value\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0716`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for num in startnum..endnum {\n        let digits = num.to_string().chars().map(|d| d.to_digit(10).unwrap() as isize);\n        if digits.all(|d| num % d == 0) {\n            result.push(num);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122596,
      "stdout": "",
      "stderr": "error[E0716]: temporary value dropped while borrowed\n --> /tmp/tmpu_9li4ye.rs:5:22\n  |\n5 |         let digits = num.to_string().chars().map(|d| d.to_digit(10).unwrap() as isize);\n  |                      ^^^^^^^^^^^^^^^                                                  - temporary value is freed at the end of this statement\n  |                      |\n  |                      creates a temporary which is freed while still in use\n6 |         if digits.all(|d| num % d == 0) {\n  |            ---------------------------- borrow later used here\n  |\n  = note: consider using a `let` binding to create a longer lived value\n\nerror[E0596]: cannot borrow `digits` as mutable, as it is not declared as mutable\n --> /tmp/tmpu_9li4ye.rs:6:12\n  |\n5 |         let digits = num.to_string().chars().map(|d| d.to_digit(10).unwrap() as isize);\n  |             ------ help: consider changing this to be mutable: `mut digits`\n6 |         if digits.all(|d| num % d == 0) {\n  |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0596, E0716.\nFor more information about an error, try `rustc --explain E0596`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in startnum..=endnum {\n        let mut digits = Vec::new();\n        let mut num = i;\n        while num > 0 {\n            digits.push(num % 10);\n            num /= 10;\n        }\n        if digits.iter().all(|&x| i % x == 0) {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122595,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /tmp/tmpnlf7moz3.rs:11:35\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result = vec![];\n    for i in startnum..=endnum {\n        let digits = i.to_string().chars().map(|x| x.to_digit(10).unwrap() as isize).collect::<Vec<isize>>();\n        if digits.iter().all(|x| i % x == 0) {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122597,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /rustc/e092d0b6b43f2de967af0887873151bb1c0b18d3/library/core/src/ops/arith.rs:609:1\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum)\n        .filter(|&x| {\n            x.to_string()\n                .chars()\n                .all(|c| x % (c as isize - '0' as isize) == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122597,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /tmp/tmp0fs7js0l.rs:7:26\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for num in startnum..endnum {\n        let mut is_divisible = true;\n        let mut num_copy = num;\n        while num_copy > 0 {\n            let digit = num_copy % 10;\n            if digit == 0 || num % digit != 0 {\n                is_divisible = false;\n                break;\n            }\n            num_copy /= 10;\n        }\n        if is_divisible {\n            result.push(num);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122596,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]`,\n right: `[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]`', /tmp/tmpwgjww088.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum)\n        .filter(|&n| {\n            n.to_string()\n                .chars()\n                .all(|c| n % (c as isize - '0' as isize) == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122597,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /tmp/tmp1q_tu0ky.rs:7:26\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in startnum..=endnum {\n        let digits = digits(i);\n        if digits.iter().all(|d| i % d == 0) {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122596,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `digits` in this scope\n --> /tmp/tmpcyqw7g6p.rs:5:22\n  |\n5 |         let digits = digits(i);\n  |                      ^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum)\n        .filter(|&x| {\n            let digits: Vec<char> = x.to_string().chars().collect();\n            digits.iter().all(|&d| x % (d as isize - '0' as isize) == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122597,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /tmp/tmpjk_gr7mr.rs:6:36\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in startnum..=endnum {\n        let digits: Vec<_> = i.to_string().chars().map(|d| d.to_digit(10).unwrap() as isize).collect();\n        let divisible = digits.iter().all(|d| i % d == 0);\n        if divisible {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122597,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /rustc/e092d0b6b43f2de967af0887873151bb1c0b18d3/library/core/src/ops/arith.rs:609:1\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in startnum..endnum {\n        let digits = i.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize).collect::<Vec<isize>>();\n        if digits.iter().all(|&x| i % x == 0) {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1665509865,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /tmp/tmp5o3qad73.rs:6:35\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum)\n        .filter(|&x| {\n            let digits: Vec<_> = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize).collect();\n            digits.iter().all(|&d| x % d == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122595,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /tmp/tmpnmhv6111.rs:6:36\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in startnum..endnum {\n        let mut is_divisible = true;\n        for c in i.to_string().chars() {\n            if c == '0' {\n                is_divisible = false;\n                break;\n            }\n            if i % (c.to_digit(10).unwrap() as isize) != 0 {\n                is_divisible = false;\n                break;\n            }\n        }\n        if is_divisible {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122597,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]`,\n right: `[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]`', /tmp/tmp1ji7e218.rs:25:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in startnum..=endnum {\n        let mut divisible = true;\n        let mut num = i;\n        while num > 0 {\n            let digit = num % 10;\n            if digit == 0 || i % digit != 0 {\n                divisible = false;\n                break;\n            }\n            num /= 10;\n        }\n        if divisible {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122597,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum)\n        .filter(|&x| {\n            let digits = x.to_string();\n            digits.chars().all(|c| x % (c as isize - '0' as isize) == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122597,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /tmp/tmpikakbmdb.rs:6:36\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..=endnum)\n        .filter(|&x| {\n            let mut digits = x;\n            while digits > 0 {\n                let digit = digits % 10;\n                if digit == 0 || x % digit != 0 {\n                    return false;\n                }\n                digits /= 10;\n            }\n            true\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122597,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in startnum..=endnum {\n        let mut divisible = true;\n        let mut num = i;\n        while num > 0 {\n            let digit = num % 10;\n            if digit == 0 || i % digit != 0 {\n                divisible = false;\n                break;\n            }\n            num /= 10;\n        }\n        if divisible {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122597,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum + 1)\n        .filter(|&x| {\n            let digits = digits(x);\n            digits.iter().all(|&d| x % d == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122595,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `digits` in this scope\n --> /tmp/tmprahmde40.rs:5:26\n  |\n5 |             let digits = digits(x);\n  |                          ^^^^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..=endnum)\n        .filter(|&x| {\n            let digits: Vec<isize> = x\n                .to_string()\n                .chars()\n                .map(|c| c.to_digit(10).unwrap() as isize)\n                .collect();\n            digits.iter().all(|&d| x % d == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122597,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /tmp/tmp1vlpavph.rs:10:36\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum)\n        .filter(|&x| {\n            x.to_string()\n                .chars()\n                .all(|c| x % c.to_digit(10).unwrap() as isize == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122597,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /tmp/tmp4_s97ms_.rs:7:26\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..=endnum)\n        .filter(|x| {\n            let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n            digits.all(|d| d != 0 && x % d == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122596,
      "stdout": "",
      "stderr": "error[E0716]: temporary value dropped while borrowed\n --> /tmp/tmpuucaa4y4.rs:5:26\n  |\n5 |             let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                          ^^^^^^^^^^^^^                                                  - temporary value is freed at the end of this statement\n  |                          |\n  |                          creates a temporary which is freed while still in use\n6 |             digits.all(|d| d != 0 && x % d == 0)\n  |             ------------------------------------ borrow later used here\n  |\n  = note: consider using a `let` binding to create a longer lived value\n\nerror[E0596]: cannot borrow `digits` as mutable, as it is not declared as mutable\n --> /tmp/tmpuucaa4y4.rs:6:13\n  |\n5 |             let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                 ------ help: consider changing this to be mutable: `mut digits`\n6 |             digits.all(|d| d != 0 && x % d == 0)\n  |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0596, E0716.\nFor more information about an error, try `rustc --explain E0596`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in startnum..=endnum {\n        let mut digits = Vec::new();\n        let mut num = i;\n        while num > 0 {\n            digits.push(num % 10);\n            num /= 10;\n        }\n        if digits.iter().all(|x| i % x == 0) {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122597,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /rustc/e092d0b6b43f2de967af0887873151bb1c0b18d3/library/core/src/ops/arith.rs:609:1\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum + 1)\n        .filter(|x| {\n            let mut digits = Vec::new();\n            let mut x = *x;\n            while x > 0 {\n                digits.push(x % 10);\n                x /= 10;\n            }\n            digits.iter().all(|&y| *x % y == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122596,
      "stdout": "",
      "stderr": "error[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmppd7qbg43.rs:11:36\n   |\n11 |             digits.iter().all(|&y| *x % y == 0)\n   |                                    ^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0614`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum)\n        .filter(|&x| {\n            let mut x = x;\n            while x > 0 {\n                let digit = x % 10;\n                if digit == 0 || x % digit != 0 {\n                    return false;\n                }\n                x /= 10;\n            }\n            true\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122595,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 21]`,\n right: `[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]`', /tmp/tmpbtujddtg.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum)\n        .filter(|x| x.to_string().chars().all(|c| x % c.to_digit(10).unwrap() as isize == 0))\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122597,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /rustc/e092d0b6b43f2de967af0887873151bb1c0b18d3/library/core/src/ops/arith.rs:609:1\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum)\n        .filter(|x| {\n            let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize).collect::<Vec<isize>>();\n            digits.iter().all(|d| x % d == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122597,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /rustc/e092d0b6b43f2de967af0887873151bb1c0b18d3/library/core/src/ops/arith.rs:609:1\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum)\n        .filter(|&x| {\n            let mut digits = x;\n            while digits > 0 {\n                let digit = digits % 10;\n                if digit == 0 || x % digit != 0 {\n                    return false;\n                }\n                digits /= 10;\n            }\n            true\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1665509865,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]`,\n right: `[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]`', /tmp/tmpqf0y54uf.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum + 1)\n        .filter(|&x| {\n            let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n            digits.all(|d| x % d == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122594,
      "stdout": "",
      "stderr": "error[E0716]: temporary value dropped while borrowed\n --> /tmp/tmp3bzw1h9w.rs:5:26\n  |\n5 |             let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                          ^^^^^^^^^^^^^                                                  - temporary value is freed at the end of this statement\n  |                          |\n  |                          creates a temporary which is freed while still in use\n6 |             digits.all(|d| x % d == 0)\n  |             -------------------------- borrow later used here\n  |\n  = note: consider using a `let` binding to create a longer lived value\n\nerror[E0596]: cannot borrow `digits` as mutable, as it is not declared as mutable\n --> /tmp/tmp3bzw1h9w.rs:6:13\n  |\n5 |             let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                 ------ help: consider changing this to be mutable: `mut digits`\n6 |             digits.all(|d| x % d == 0)\n  |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0596, E0716.\nFor more information about an error, try `rustc --explain E0596`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result: Vec<isize> = vec![];\n    for i in startnum..endnum {\n        let mut is_divisible = true;\n        for digit in i.to_string().chars() {\n            if i % digit.to_digit(10).unwrap() as isize != 0 {\n                is_divisible = false;\n                break;\n            }\n        }\n        if is_divisible {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122597,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /tmp/tmpbns2cgop.rs:7:16\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum)\n        .filter(|x| {\n            let mut digits = x.to_string().chars().map(|x| x.to_digit(10).unwrap() as isize);\n            digits.all(|x| *x != 0 && x % *x == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122596,
      "stdout": "",
      "stderr": "error[E0614]: type `isize` cannot be dereferenced\n --> /tmp/tmp95n53z8t.rs:6:28\n  |\n6 |             digits.all(|x| *x != 0 && x % *x == 0)\n  |                            ^^\n\nerror[E0614]: type `isize` cannot be dereferenced\n --> /tmp/tmp95n53z8t.rs:6:43\n  |\n6 |             digits.all(|x| *x != 0 && x % *x == 0)\n  |                                           ^^\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0614`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in startnum..=endnum {\n        let mut divisible = true;\n        for digit in i.to_string().chars() {\n            if digit == '0' {\n                divisible = false;\n                break;\n            }\n            if i % digit.to_digit(10).unwrap() as isize != 0 {\n                divisible = false;\n                break;\n            }\n        }\n        if divisible {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122596,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in startnum..endnum {\n        let digits = i.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize).collect::<Vec<isize>>();\n        if digits.iter().all(|d| i % d == 0) {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122596,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /rustc/e092d0b6b43f2de967af0887873151bb1c0b18d3/library/core/src/ops/arith.rs:609:1\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum)\n        .filter(|&n| {\n            let mut n = n;\n            while n > 0 {\n                let digit = n % 10;\n                if digit == 0 || n % digit != 0 {\n                    return false;\n                }\n                n /= 10;\n            }\n            true\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122597,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 21]`,\n right: `[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]`', /tmp/tmpphjnajqc.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum)\n        .filter(|&x| {\n            let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n            digits.all(|d| x % d == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1665509865,
      "stdout": "",
      "stderr": "error[E0716]: temporary value dropped while borrowed\n --> /tmp/tmpghivvlvg.rs:5:26\n  |\n5 |             let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                          ^^^^^^^^^^^^^                                                  - temporary value is freed at the end of this statement\n  |                          |\n  |                          creates a temporary which is freed while still in use\n6 |             digits.all(|d| x % d == 0)\n  |             -------------------------- borrow later used here\n  |\n  = note: consider using a `let` binding to create a longer lived value\n\nerror[E0596]: cannot borrow `digits` as mutable, as it is not declared as mutable\n --> /tmp/tmpghivvlvg.rs:6:13\n  |\n5 |             let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                 ------ help: consider changing this to be mutable: `mut digits`\n6 |             digits.all(|d| x % d == 0)\n  |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0596, E0716.\nFor more information about an error, try `rustc --explain E0596`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum)\n        .filter(|&x| {\n            let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n            digits.all(|d| x % d == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1665509865,
      "stdout": "",
      "stderr": "error[E0716]: temporary value dropped while borrowed\n --> /tmp/tmpghivvlvg.rs:5:26\n  |\n5 |             let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                          ^^^^^^^^^^^^^                                                  - temporary value is freed at the end of this statement\n  |                          |\n  |                          creates a temporary which is freed while still in use\n6 |             digits.all(|d| x % d == 0)\n  |             -------------------------- borrow later used here\n  |\n  = note: consider using a `let` binding to create a longer lived value\n\nerror[E0596]: cannot borrow `digits` as mutable, as it is not declared as mutable\n --> /tmp/tmpghivvlvg.rs:6:13\n  |\n5 |             let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                 ------ help: consider changing this to be mutable: `mut digits`\n6 |             digits.all(|d| x % d == 0)\n  |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0596, E0716.\nFor more information about an error, try `rustc --explain E0596`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum)\n        .filter(|&x| x\n            .to_string()\n            .chars()\n            .all(|c| x % c.to_digit(10).unwrap() as isize == 0))\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122597,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /tmp/tmpwnhf24ai.rs:7:22\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum + 1)\n        .filter(|x| {\n            let digits: Vec<isize> = x\n                .to_string()\n                .chars()\n                .map(|c| c.to_digit(10).unwrap() as isize)\n                .collect();\n            digits.iter().all(|d| x % d == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122597,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /rustc/e092d0b6b43f2de967af0887873151bb1c0b18d3/library/core/src/ops/arith.rs:609:1\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in startnum..=endnum {\n        let digits: Vec<char> = i.to_string().chars().collect();\n        let mut is_divisible = true;\n        for j in digits {\n            if i % (j as isize - 48) != 0 {\n                is_divisible = false;\n                break;\n            }\n        }\n        if is_divisible {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122597,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /tmp/tmprhss7_lg.rs:8:16\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut res = Vec::new();\n    for i in startnum..endnum {\n        let mut digits = Vec::new();\n        let mut num = i;\n        while num > 0 {\n            digits.push(num % 10);\n            num /= 10;\n        }\n        if digits.iter().all(|&x| i % x == 0) {\n            res.push(i);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122597,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /tmp/tmpg6frk3ug.rs:11:35\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum)\n        .filter(|&x| {\n            let digits = x.to_string();\n            digits.chars().all(|c| x % c.to_digit(10).unwrap() as isize == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122596,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /tmp/tmp1g4urw_z.rs:6:36\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..=endnum)\n        .filter(|x| {\n            let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n            digits.all(|d| x % d == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122594,
      "stdout": "",
      "stderr": "error[E0716]: temporary value dropped while borrowed\n --> /tmp/tmpsb6kgjaa.rs:5:26\n  |\n5 |             let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                          ^^^^^^^^^^^^^                                                  - temporary value is freed at the end of this statement\n  |                          |\n  |                          creates a temporary which is freed while still in use\n6 |             digits.all(|d| x % d == 0)\n  |             -------------------------- borrow later used here\n  |\n  = note: consider using a `let` binding to create a longer lived value\n\nerror[E0596]: cannot borrow `digits` as mutable, as it is not declared as mutable\n --> /tmp/tmpsb6kgjaa.rs:6:13\n  |\n5 |             let digits = x.to_string().chars().map(|c| c.to_digit(10).unwrap() as isize);\n  |                 ------ help: consider changing this to be mutable: `mut digits`\n6 |             digits.all(|d| x % d == 0)\n  |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0596, E0716.\nFor more information about an error, try `rustc --explain E0596`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    (startnum..endnum)\n        .filter(|&x| {\n            let digits: Vec<_> = x\n                .to_string()\n                .chars()\n                .map(|c| c.to_digit(10).unwrap() as isize)\n                .collect();\n            digits.iter().all(|&d| x % d == 0)\n        })\n        .collect()\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122597,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to calculate the remainder with a divisor of zero', /tmp/tmpplf13_nt.rs:10:36\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nfn divisible_by_digits(startnum: isize, endnum: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for num in startnum..endnum {\n        let mut divisible = true;\n        let mut num_copy = num;\n        while num_copy > 0 {\n            let digit = num_copy % 10;\n            if digit == 0 || num % digit != 0 {\n                divisible = false;\n                break;\n            }\n            num_copy /= 10;\n        }\n        if divisible {\n            result.push(num);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = divisible_by_digits;\n    assert_eq!(candidate(1, 22), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]);\n    assert_eq!(candidate(1, 15), vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]);\n    assert_eq!(candidate(20, 25), vec![22, 24]);\n}\n",
      "timestamp": 1666122595,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]`,\n right: `[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]`', /tmp/tmpp_ro6mvl.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    }
  ]
}