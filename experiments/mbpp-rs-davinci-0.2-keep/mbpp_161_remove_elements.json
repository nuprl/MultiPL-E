{
  "name": "mbpp_161_remove_elements",
  "language": "rs",
  "prompt": "/// Write a function to remove all elements from a given list present in another list.\nfn remove_elements(list1: Vec<isize>, list2: Vec<isize>) -> Vec<isize> {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_161_remove_elements.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\nfn main() {\n    let candidate = remove_elements;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], vec![2, 4, 6, 8]), vec![1, 3, 5, 7, 9, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], vec![1, 3, 5, 7]), vec![2, 4, 6, 8, 9, 10]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], vec![5, 7]), vec![1, 2, 3, 4, 6, 8, 9, 10]);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    let mut list1 = list1;\n    for i in list2 {\n        list1.retain(|&x| x != i);\n    }\n    list1",
    "    list1.into_iter().filter(|x| !list2.contains(x)).collect()",
    "    let mut result = Vec::new();\n    for i in list1 {\n        if !list2.contains(&i) {\n            result.push(i);\n        }\n    }\n    result",
    "    let mut list1 = list1;\n    for i in list2 {\n        list1.retain(|&x| x != i);\n    }\n    list1",
    "    let mut result = Vec::new();\n    for i in list1 {\n        if !list2.contains(&i) {\n            result.push(i);\n        }\n    }\n    result",
    "    let mut result = Vec::new();\n    for i in list1 {\n        if !list2.contains(&i) {\n            result.push(i);\n        }\n    }\n    result",
    "    let mut result = Vec::new();\n    for i in list1 {\n        if !list2.contains(&i) {\n            result.push(i);\n        }\n    }\n    result",
    "    let mut list1 = list1.clone();\n    for i in list2 {\n        list1.retain(|&x| x != i);\n    }\n    list1",
    "    let mut result = Vec::new();\n    for item in list1 {\n        if !list2.contains(&item) {\n            result.push(item);\n        }\n    }\n    result",
    "    let mut result = Vec::new();\n    for i in list1 {\n        if !list2.contains(&i) {\n            result.push(i);\n        }\n    }\n    result",
    "    let mut list1 = list1;\n    for i in list2 {\n        list1.retain(|&x| x != i);\n    }\n    list1",
    "    let mut list = list1.clone();\n    for i in list2 {\n        list.retain(|&x| x != i);\n    }\n    list",
    "    let mut list1 = list1;\n    for item in list2 {\n        list1.retain(|&x| x != item);\n    }\n    list1",
    "    let mut result = Vec::new();\n    for i in list1 {\n        if !list2.contains(&i) {\n            result.push(i);\n        }\n    }\n    result",
    "    let mut result = Vec::new();\n    for i in list1 {\n        if !list2.contains(&i) {\n            result.push(i);\n        }\n    }\n    result",
    "    let mut result = Vec::new();\n    for item in list1 {\n        if !list2.contains(&item) {\n            result.push(item);\n        }\n    }\n    result",
    "    let mut list1 = list1;\n    for item in list2 {\n        list1.retain(|&x| x != item);\n    }\n    list1",
    "    let mut list1 = list1;\n    for i in list2 {\n        list1.retain(|&x| x != i);\n    }\n    list1",
    "    let mut result = Vec::new();\n    for i in list1 {\n        if !list2.contains(&i) {\n            result.push(i);\n        }\n    }\n    result",
    "    let mut list1 = list1;\n    for i in list2 {\n        list1.retain(|&x| x != i);\n    }\n    list1"
  ]
}