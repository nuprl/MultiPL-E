{
  "name": "mbpp_759_is_decimal",
  "language": "rs",
  "prompt": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_759_is_decimal.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let mut decimal = false;\n    let mut precision = 0;\n    for c in num.chars() {\n        if c == '.' {\n            if decimal {\n                return false;\n            }\n            decimal = true;\n        } else if c.is_digit(10) {\n            if decimal {\n                precision += 1;\n            }\n            if precision > 2 {\n                return false;\n            }\n        } else {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1665510369,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let re = Regex::new(r\"^[0-9]*\\.[0-9]{2}$\").unwrap();\n    re.is_match(&num)\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1665510369,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `Regex`\n --> /tmp/tmpjv6p9o8b.rs:3:14\n  |\n3 |     let re = Regex::new(r\"^[0-9]*\\.[0-9]{2}$\").unwrap();\n  |              ^^^^^ use of undeclared type `Regex`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let re = Regex::new(r\"^\\d+\\.\\d{2}$\").unwrap();\n    re.is_match(&num)\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1665510369,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `Regex`\n --> /tmp/tmpx12sjlz5.rs:3:14\n  |\n3 |     let re = Regex::new(r\"^\\d+\\.\\d{2}$\").unwrap();\n  |              ^^^^^ use of undeclared type `Regex`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let mut dot_count = 0;\n    let mut decimal_count = 0;\n    let mut decimal_started = false;\n    for c in num.chars() {\n        if c == '.' {\n            dot_count += 1;\n            decimal_started = true;\n        } else if decimal_started {\n            decimal_count += 1;\n        }\n    }\n    dot_count == 1 && decimal_count == 2\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1665510369,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmps1oo0mxp.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let mut dot_count = 0;\n    let mut num_count = 0;\n    for c in num.chars() {\n        if c == '.' {\n            dot_count += 1;\n        } else if c.is_digit(10) {\n            num_count += 1;\n        } else {\n            return false;\n        }\n    }\n    if dot_count > 1 {\n        return false;\n    }\n    if dot_count == 0 && num_count > 2 {\n        return false;\n    }\n    if dot_count == 1 && num_count > 4 {\n        return false;\n    }\n    return true;\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1665510369,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmp591v3yxu.rs:28:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let re = Regex::new(r\"^\\d*\\.\\d{2}$\").unwrap();\n    re.is_match(&num)\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1665510369,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `Regex`\n --> /tmp/tmpu4oumkw8.rs:3:14\n  |\n3 |     let re = Regex::new(r\"^\\d*\\.\\d{2}$\").unwrap();\n  |              ^^^^^ use of undeclared type `Regex`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let mut decimal_count = 0;\n    for c in num.chars() {\n        if c == '.' {\n            decimal_count += 1;\n        }\n    }\n    if decimal_count > 1 {\n        return false;\n    }\n    if decimal_count == 0 {\n        return true;\n    }\n    let mut decimal_index = 0;\n    for (i, c) in num.chars().enumerate() {\n        if c == '.' {\n            decimal_index = i;\n            break;\n        }\n    }\n    if decimal_index + 3 < num.len() {\n        return false;\n    }\n    return true;\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1665510369,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp1t292eeu.rs:31:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let mut is_decimal = false;\n    let mut has_decimal = false;\n    let mut decimal_count = 0;\n    for c in num.chars() {\n        if c == '.' {\n            if has_decimal {\n                return false;\n            }\n            has_decimal = true;\n        } else if c.is_digit(10) {\n            if has_decimal {\n                decimal_count += 1;\n            }\n            is_decimal = true;\n        } else {\n            return false;\n        }\n    }\n    if has_decimal && decimal_count != 2 {\n        return false;\n    }\n    is_decimal\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1665510369,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let mut decimal = false;\n    let mut precision = 0;\n    for c in num.chars() {\n        if c == '.' {\n            if decimal {\n                return false;\n            }\n            decimal = true;\n        } else if c.is_digit(10) {\n            if decimal {\n                precision += 1;\n            }\n        } else {\n            return false;\n        }\n    }\n    if decimal && precision == 2 {\n        true\n    } else {\n        false\n    }\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1665510369,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let mut decimal_count = 0;\n    let mut decimal_found = false;\n\n    for c in num.chars() {\n        if c == '.' {\n            decimal_found = true;\n        } else if decimal_found {\n            decimal_count += 1;\n        }\n    }\n\n    decimal_count == 2\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1665510369,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp4uat1eic.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let mut count = 0;\n    let mut has_decimal = false;\n    for c in num.chars() {\n        if c == '.' {\n            if has_decimal {\n                return false;\n            }\n            has_decimal = true;\n        } else if !c.is_digit(10) {\n            return false;\n        } else if has_decimal {\n            count += 1;\n        }\n    }\n    if has_decimal {\n        count == 2\n    } else {\n        true\n    }\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1665510369,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let mut has_decimal = false;\n    let mut decimal_count = 0;\n    for c in num.chars() {\n        if c == '.' {\n            if has_decimal {\n                return false;\n            }\n            has_decimal = true;\n        } else if c.is_digit(10) {\n            if has_decimal {\n                decimal_count += 1;\n            }\n        } else {\n            return false;\n        }\n    }\n    decimal_count <= 2\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1665510369,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let mut decimal_count = 0;\n    let mut decimal_found = false;\n    for c in num.chars() {\n        if c == '.' {\n            if decimal_found {\n                return false;\n            }\n            decimal_found = true;\n        } else if !c.is_digit(10) {\n            return false;\n        } else if decimal_found {\n            decimal_count += 1;\n        }\n    }\n    decimal_count <= 2\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1665510369,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let re = Regex::new(r\"^\\d+\\.\\d{2}$\").unwrap();\n    re.is_match(&num)\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1665510369,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `Regex`\n --> /tmp/tmpx12sjlz5.rs:3:14\n  |\n3 |     let re = Regex::new(r\"^\\d+\\.\\d{2}$\").unwrap();\n  |              ^^^^^ use of undeclared type `Regex`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let mut has_decimal = false;\n    let mut decimal_count = 0;\n    for c in num.chars() {\n        if c == '.' {\n            if has_decimal {\n                return false;\n            }\n            has_decimal = true;\n        } else if !c.is_digit(10) {\n            return false;\n        } else if has_decimal {\n            decimal_count += 1;\n        }\n    }\n    if has_decimal && decimal_count != 2 {\n        return false;\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1665510369,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let re = Regex::new(r\"^[0-9]+(\\.[0-9]{1,2})?$\").unwrap();\n    re.is_match(&num)\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1665510369,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `Regex`\n --> /tmp/tmpf8hke0fw.rs:3:14\n  |\n3 |     let re = Regex::new(r\"^[0-9]+(\\.[0-9]{1,2})?$\").unwrap();\n  |              ^^^^^ use of undeclared type `Regex`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let mut is_decimal = false;\n    let mut decimal_count = 0;\n    for c in num.chars() {\n        if c == '.' {\n            decimal_count += 1;\n        }\n    }\n    if decimal_count == 1 {\n        is_decimal = true;\n    }\n    is_decimal\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1665510369,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpt45qfabr.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let mut decimal_count = 0;\n    for c in num.chars() {\n        if c == '.' {\n            decimal_count += 1;\n        }\n    }\n    if decimal_count > 1 {\n        return false;\n    }\n    let mut decimal_index = 0;\n    for (i, c) in num.chars().enumerate() {\n        if c == '.' {\n            decimal_index = i;\n            break;\n        }\n    }\n    if decimal_index == 0 {\n        return false;\n    }\n    if decimal_index == num.len() - 1 {\n        return false;\n    }\n    if decimal_index == num.len() - 2 {\n        return true;\n    }\n    if decimal_index == num.len() - 3 {\n        return false;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1665510369,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmpdvyh03t5.rs:36:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    num.parse::<f64>().is_ok()\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1665510369,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpqmoierqz.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let mut decimal_count = 0;\n    let mut has_decimal = false;\n    for c in num.chars() {\n        if c == '.' {\n            if has_decimal {\n                return false;\n            }\n            has_decimal = true;\n        } else if !c.is_digit(10) {\n            return false;\n        } else if has_decimal {\n            decimal_count += 1;\n        }\n    }\n    decimal_count <= 2\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1665510369,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let mut decimal = false;\n    let mut precision = 0;\n    for (i, c) in num.chars().enumerate() {\n        if c == '.' {\n            decimal = true;\n            continue;\n        }\n        if decimal {\n            precision += 1;\n        }\n        if !c.is_digit(10) {\n            return false;\n        }\n    }\n    if precision > 2 {\n        return false;\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1666122996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let mut decimal_count = 0;\n    let mut num_count = 0;\n    let mut decimal_found = false;\n    for c in num.chars() {\n        if c == '.' {\n            decimal_found = true;\n            continue;\n        }\n        if decimal_found {\n            decimal_count += 1;\n        }\n        num_count += 1;\n    }\n    if decimal_count == 2 && num_count == 5 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1666122996,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmp08ps7vho.rs:27:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let mut has_decimal = false;\n    let mut decimal_count = 0;\n    for c in num.chars() {\n        if c == '.' {\n            if has_decimal {\n                return false;\n            }\n            has_decimal = true;\n        } else if c.is_digit(10) {\n            if has_decimal {\n                decimal_count += 1;\n            }\n        } else {\n            return false;\n        }\n    }\n    if has_decimal && decimal_count == 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1666122996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let mut count = 0;\n    let mut decimal = false;\n    for c in num.chars() {\n        if c == '.' {\n            if decimal {\n                return false;\n            }\n            decimal = true;\n        } else if !c.is_digit(10) {\n            return false;\n        } else if decimal {\n            count += 1;\n            if count > 2 {\n                return false;\n            }\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1666122996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let mut decimal_count = 0;\n    let mut has_decimal = false;\n    for c in num.chars() {\n        if c == '.' {\n            if has_decimal {\n                return false;\n            }\n            has_decimal = true;\n        } else if !c.is_digit(10) {\n            return false;\n        } else if has_decimal {\n            decimal_count += 1;\n        }\n    }\n    decimal_count <= 2\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1665510369,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let mut decimal_count = 0;\n    for c in num.chars() {\n        if c == '.' {\n            decimal_count += 1;\n        }\n    }\n    if decimal_count > 1 {\n        return false;\n    }\n    let mut decimal_index = 0;\n    let mut decimal_count = 0;\n    for (i, c) in num.chars().enumerate() {\n        if c == '.' {\n            decimal_index = i;\n            decimal_count += 1;\n        }\n    }\n    if decimal_count == 0 {\n        return true;\n    }\n    let decimal_part = &num[decimal_index + 1..];\n    if decimal_part.len() > 2 {\n        return false;\n    }\n    return true;\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1666122996,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp4enfaemf.rs:33:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let mut decimal_count = 0;\n    let mut decimal_flag = false;\n    for c in num.chars() {\n        if c == '.' {\n            if decimal_flag {\n                return false;\n            }\n            decimal_flag = true;\n        } else if c.is_digit(10) {\n            if decimal_flag {\n                decimal_count += 1;\n            }\n        } else {\n            return false;\n        }\n    }\n    decimal_count <= 2\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1666122996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let mut count = 0;\n    let mut has_decimal = false;\n    for c in num.chars() {\n        if c == '.' {\n            if has_decimal {\n                return false;\n            }\n            has_decimal = true;\n        } else if !c.is_digit(10) {\n            return false;\n        } else if has_decimal {\n            count += 1;\n        }\n    }\n    count == 2\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1666122996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let mut dot_count = 0;\n    let mut decimal_count = 0;\n    for c in num.chars() {\n        if c == '.' {\n            dot_count += 1;\n        } else if c.is_digit(10) {\n            decimal_count += 1;\n        } else {\n            return false;\n        }\n    }\n    if dot_count > 1 {\n        return false;\n    }\n    if dot_count == 1 && decimal_count > 2 {\n        return false;\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1666122996,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmp4l216cj2.rs:25:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let mut decimal_count = 0;\n    let mut decimal_found = false;\n    for c in num.chars() {\n        if c == '.' {\n            decimal_found = true;\n        } else if decimal_found {\n            decimal_count += 1;\n        }\n    }\n    decimal_count == 2\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1665510369,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp90xbdmt2.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let mut decimal_count = 0;\n    let mut decimal_found = false;\n    for c in num.chars() {\n        if c == '.' {\n            decimal_found = true;\n        }\n        if decimal_found {\n            decimal_count += 1;\n        }\n    }\n    decimal_count == 3\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1666122995,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpesya222t.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    num.parse::<f64>().is_ok()\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1665510369,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpqmoierqz.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let mut decimal_count = 0;\n    let mut decimal_index = 0;\n    for (i, c) in num.chars().enumerate() {\n        if c == '.' {\n            decimal_count += 1;\n            decimal_index = i;\n        }\n    }\n    if decimal_count > 1 {\n        return false;\n    }\n    if decimal_count == 0 {\n        return true;\n    }\n    let decimal_part = &num[decimal_index + 1..];\n    if decimal_part.len() > 2 {\n        return false;\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1666122996,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpp8pty7mm.rs:27:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let mut decimal_count = 0;\n    let mut decimal_found = false;\n    for c in num.chars() {\n        if c == '.' {\n            if decimal_found {\n                return false;\n            }\n            decimal_found = true;\n        } else if !c.is_digit(10) {\n            return false;\n        } else if decimal_found {\n            decimal_count += 1;\n        }\n    }\n    decimal_count <= 2\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1665510369,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let mut decimal_count = 0;\n    let mut decimal_found = false;\n    for c in num.chars() {\n        if c == '.' {\n            decimal_found = true;\n        } else if !c.is_digit(10) {\n            return false;\n        } else if decimal_found {\n            decimal_count += 1;\n        }\n    }\n    decimal_count == 2\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1666122995,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let mut count = 0;\n    let mut has_decimal = false;\n    for c in num.chars() {\n        if c == '.' {\n            if has_decimal {\n                return false;\n            }\n            has_decimal = true;\n            continue;\n        }\n        if !c.is_digit(10) {\n            return false;\n        }\n        if has_decimal {\n            count += 1;\n        }\n    }\n    if has_decimal && count != 2 {\n        return false;\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1666122996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let mut decimal_count = 0;\n    let mut decimal_found = false;\n    for c in num.chars() {\n        if c == '.' {\n            if decimal_found {\n                return false;\n            }\n            decimal_found = true;\n        } else if c.is_digit(10) {\n            if decimal_found {\n                decimal_count += 1;\n            }\n        } else {\n            return false;\n        }\n    }\n    decimal_count <= 2\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1666122995,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let mut chars = num.chars();\n    let mut decimal = false;\n    let mut precision = 0;\n    while let Some(c) = chars.next() {\n        if c == '.' {\n            if decimal {\n                return false;\n            }\n            decimal = true;\n        } else if c.is_digit(10) {\n            if decimal {\n                precision += 1;\n            }\n        } else {\n            return false;\n        }\n    }\n    precision <= 2\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1666122996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let mut decimal_count = 0;\n    let mut has_decimal = false;\n\n    for c in num.chars() {\n        if c == '.' {\n            if has_decimal {\n                return false;\n            }\n            has_decimal = true;\n        } else if !c.is_digit(10) {\n            return false;\n        } else if has_decimal {\n            decimal_count += 1;\n        }\n    }\n\n    decimal_count <= 2\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1666122996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let mut decimal_count = 0;\n    let mut decimal_found = false;\n    for c in num.chars() {\n        if c == '.' {\n            if decimal_found {\n                return false;\n            }\n            decimal_found = true;\n        } else if c.is_digit(10) {\n            if decimal_found {\n                decimal_count += 1;\n            }\n        } else {\n            return false;\n        }\n    }\n    decimal_count <= 2\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1666122995,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let mut is_decimal = false;\n    let mut decimal_count = 0;\n    for c in num.chars() {\n        if c == '.' {\n            decimal_count += 1;\n        }\n    }\n    if decimal_count == 1 {\n        is_decimal = true;\n    }\n    is_decimal\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1665510369,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpt45qfabr.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let mut decimal_count = 0;\n    let mut decimal_found = false;\n    for c in num.chars() {\n        if c == '.' {\n            if decimal_found {\n                return false;\n            }\n            decimal_found = true;\n        } else if !c.is_digit(10) {\n            return false;\n        } else if decimal_found {\n            decimal_count += 1;\n        }\n    }\n    decimal_count == 2\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1665510369,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let mut decimal = false;\n    let mut precision = 0;\n    for c in num.chars() {\n        if c == '.' {\n            if decimal {\n                return false;\n            }\n            decimal = true;\n        } else if c.is_digit(10) {\n            if decimal {\n                precision += 1;\n            }\n            if precision > 2 {\n                return false;\n            }\n        } else {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1665510369,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let re = Regex::new(r\"^\\d+\\.\\d{2}$\").unwrap();\n    re.is_match(&num)\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1665510369,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `Regex`\n --> /tmp/tmpx12sjlz5.rs:3:14\n  |\n3 |     let re = Regex::new(r\"^\\d+\\.\\d{2}$\").unwrap();\n  |              ^^^^^ use of undeclared type `Regex`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let mut decimal_count = 0;\n    for c in num.chars() {\n        if c == '.' {\n            decimal_count += 1;\n        }\n    }\n    if decimal_count == 1 {\n        let mut decimal_index = 0;\n        for (i, c) in num.chars().enumerate() {\n            if c == '.' {\n                decimal_index = i;\n            }\n        }\n        if num.len() - decimal_index - 1 == 2 {\n            return true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1666122996,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp8y5rk8_c.rs:26:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let mut count = 0;\n    let mut has_decimal = false;\n    for c in num.chars() {\n        if c == '.' {\n            if has_decimal {\n                return false;\n            }\n            has_decimal = true;\n        } else if !c.is_digit(10) {\n            return false;\n        } else if has_decimal {\n            count += 1;\n        }\n    }\n    if has_decimal && count == 2 {\n        true\n    } else {\n        false\n    }\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1666122996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let mut has_decimal = false;\n    let mut decimal_count = 0;\n    for c in num.chars() {\n        if c == '.' {\n            if has_decimal {\n                return false;\n            }\n            has_decimal = true;\n        } else if c.is_digit(10) {\n            if has_decimal {\n                decimal_count += 1;\n            }\n        } else {\n            return false;\n        }\n    }\n    if has_decimal && decimal_count == 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1666122996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let mut decimal_count = 0;\n    let mut decimal_found = false;\n    for c in num.chars() {\n        if c == '.' {\n            decimal_found = true;\n            continue;\n        }\n        if decimal_found {\n            decimal_count += 1;\n        }\n    }\n    decimal_count == 2\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1666122996,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp48fcw7om.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let mut decimal_count = 0;\n    for c in num.chars() {\n        if c == '.' {\n            decimal_count += 1;\n        }\n    }\n    if decimal_count > 1 {\n        return false;\n    }\n    let mut decimal_count = 0;\n    let mut decimal_index = 0;\n    for (i, c) in num.chars().enumerate() {\n        if c == '.' {\n            decimal_count += 1;\n            decimal_index = i;\n        }\n    }\n    if decimal_count == 0 {\n        return true;\n    }\n    if decimal_index + 3 == num.len() {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1666122996,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpmofp2cbk.rs:32:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let re = Regex::new(r\"^\\d+\\.\\d{2}$\").unwrap();\n    re.is_match(&num)\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1665510369,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `Regex`\n --> /tmp/tmpx12sjlz5.rs:3:14\n  |\n3 |     let re = Regex::new(r\"^\\d+\\.\\d{2}$\").unwrap();\n  |              ^^^^^ use of undeclared type `Regex`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let mut is_decimal = false;\n    let mut has_decimal = false;\n    let mut decimal_count = 0;\n    for c in num.chars() {\n        if c == '.' {\n            if has_decimal {\n                return false;\n            }\n            has_decimal = true;\n        } else if c.is_digit(10) {\n            is_decimal = true;\n            if has_decimal {\n                decimal_count += 1;\n            }\n        } else {\n            return false;\n        }\n    }\n    is_decimal && decimal_count <= 2\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1666122996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let mut decimal_count = 0;\n    for c in num.chars() {\n        if c == '.' {\n            decimal_count += 1;\n        }\n    }\n    if decimal_count > 1 {\n        return false;\n    }\n    if decimal_count == 1 {\n        let mut decimal_index = 0;\n        for (i, c) in num.chars().enumerate() {\n            if c == '.' {\n                decimal_index = i;\n                break;\n            }\n        }\n        if num.len() - decimal_index - 1 > 2 {\n            return false;\n        }\n    }\n    let num: f64 = match num.parse() {\n        Ok(n) => n,\n        Err(_) => return false,\n    };\n    true\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1666122996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let mut decimal_count = 0;\n    let mut decimal_found = false;\n    for c in num.chars() {\n        if c == '.' {\n            if decimal_found {\n                return false;\n            }\n            decimal_found = true;\n        } else if !c.is_digit(10) {\n            return false;\n        } else if decimal_found {\n            decimal_count += 1;\n        }\n    }\n    decimal_count <= 2\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1665510369,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let re = Regex::new(r\"^\\d+\\.\\d{2}$\").unwrap();\n    re.is_match(&num)\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1665510369,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `Regex`\n --> /tmp/tmpx12sjlz5.rs:3:14\n  |\n3 |     let re = Regex::new(r\"^\\d+\\.\\d{2}$\").unwrap();\n  |              ^^^^^ use of undeclared type `Regex`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let mut dot_count = 0;\n    let mut num_count = 0;\n    for c in num.chars() {\n        if c == '.' {\n            dot_count += 1;\n        } else if c.is_digit(10) {\n            num_count += 1;\n        } else {\n            return false;\n        }\n    }\n    if dot_count > 1 {\n        return false;\n    }\n    if dot_count == 1 && num_count > 2 {\n        return false;\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1666122996,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmpoc8t8mj2.rs:25:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let mut iter = num.chars();\n    let mut decimal_count = 0;\n    let mut decimal_found = false;\n    while let Some(c) = iter.next() {\n        if c == '.' {\n            if decimal_found {\n                return false;\n            }\n            decimal_found = true;\n        } else if !c.is_digit(10) {\n            return false;\n        } else if decimal_found {\n            decimal_count += 1;\n        }\n    }\n    decimal_count == 2\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1666122996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    num.parse::<f64>().is_ok()\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1665510369,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpqmoierqz.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let mut num_iter = num.chars();\n    let mut decimal_count = 0;\n    let mut digit_count = 0;\n    let mut has_decimal = false;\n    let mut has_digit = false;\n    while let Some(c) = num_iter.next() {\n        if c == '.' {\n            if decimal_count > 0 {\n                return false;\n            }\n            decimal_count += 1;\n            has_decimal = true;\n        } else if c.is_digit(10) {\n            digit_count += 1;\n            has_digit = true;\n        } else {\n            return false;\n        }\n    }\n    if has_decimal && has_digit {\n        digit_count <= 2\n    } else {\n        false\n    }\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1666122996,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmphs05bopm.rs:31:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let re = Regex::new(r\"^[0-9]+(\\.[0-9]{1,2})?$\").unwrap();\n    re.is_match(&num)\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1665510369,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `Regex`\n --> /tmp/tmpf8hke0fw.rs:3:14\n  |\n3 |     let re = Regex::new(r\"^[0-9]+(\\.[0-9]{1,2})?$\").unwrap();\n  |              ^^^^^ use of undeclared type `Regex`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let re = Regex::new(r\"^[0-9]*\\.[0-9]{2}$\").unwrap();\n    re.is_match(&num)\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1665510369,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `Regex`\n --> /tmp/tmpjv6p9o8b.rs:3:14\n  |\n3 |     let re = Regex::new(r\"^[0-9]*\\.[0-9]{2}$\").unwrap();\n  |              ^^^^^ use of undeclared type `Regex`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let mut decimal_count = 0;\n    let mut decimal_found = false;\n    for c in num.chars() {\n        if c == '.' {\n            if decimal_found {\n                return false;\n            }\n            decimal_found = true;\n        } else if !c.is_digit(10) {\n            return false;\n        } else if decimal_found {\n            decimal_count += 1;\n        }\n    }\n    decimal_count <= 2\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1665510369,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let mut count = 0;\n    let mut decimal = false;\n    for c in num.chars() {\n        if c == '.' {\n            if decimal {\n                return false;\n            }\n            decimal = true;\n        } else if !c.is_digit(10) {\n            return false;\n        } else if decimal {\n            count += 1;\n        }\n    }\n    count <= 2\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1666122996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let mut num_chars = num.chars();\n    let mut decimal_found = false;\n    let mut decimal_count = 0;\n    let mut digit_count = 0;\n    while let Some(c) = num_chars.next() {\n        if c == '.' {\n            decimal_found = true;\n            decimal_count += 1;\n            if decimal_count > 1 {\n                return false;\n            }\n        } else if c.is_digit(10) {\n            digit_count += 1;\n            if decimal_found && digit_count > 2 {\n                return false;\n            }\n        } else {\n            return false;\n        }\n    }\n    return true;\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1666122996,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmp64gc_933.rs:28:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let mut decimal_count = 0;\n    let mut decimal_found = false;\n    for c in num.chars() {\n        if c == '.' {\n            if decimal_found {\n                return false;\n            }\n            decimal_found = true;\n        } else if !c.is_digit(10) {\n            return false;\n        } else if decimal_found {\n            decimal_count += 1;\n        }\n    }\n    decimal_count <= 2\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1665510369,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let mut is_decimal = false;\n    let mut decimal_count = 0;\n    let mut decimal_index = 0;\n    let mut is_negative = false;\n    let mut is_positive = false;\n    let mut is_zero = false;\n    let mut is_digit = false;\n    let mut is_valid = false;\n    let mut is_valid_decimal = false;\n    let mut is_valid_precision = false;\n    let mut is_valid_negative = false;\n    let mut is_valid_positive = false;\n    let mut is_valid_zero = false;\n    let mut is_valid_digit = false;\n\n    for (i, c) in num.chars().enumerate() {\n        if c == '.' {\n            decimal_count += 1;\n            decimal_index = i;\n            is_decimal = true;\n        }\n        if c == '-' {\n            is_negative = true;\n        }\n        if c == '+' {\n            is_positive = true;\n        }\n        if c == '0' {\n            is_zero = true;\n        }\n        if c.is_digit(10) {\n            is_digit = true;\n        }\n    }\n\n    if is_decimal {\n        is_valid_decimal = true;\n    }\n\n    if decimal_count == 1 {\n        is_valid_precision = true;\n    }\n\n    if is_negative {\n        is_valid_negative = true;\n    }\n\n    if is_positive {\n        is_valid_positive = true;\n    }\n\n    if is_zero {\n        is_valid_zero = true;\n    }\n\n    if is_digit {\n        is_valid_digit = true;\n    }\n\n    if is_valid_decimal && is_valid_precision && is_valid_negative && is_valid_positive && is_valid_zero && is_valid_digit {\n        is_valid = true;\n    }\n\n    is_valid\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1666122996,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmpuxvsa1xh.rs:71:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let re = Regex::new(r\"^\\d+\\.\\d{2}$\").unwrap();\n    re.is_match(&num)\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1665510369,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `Regex`\n --> /tmp/tmpx12sjlz5.rs:3:14\n  |\n3 |     let re = Regex::new(r\"^\\d+\\.\\d{2}$\").unwrap();\n  |              ^^^^^ use of undeclared type `Regex`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let mut decimal_count = 0;\n    let mut has_decimal = false;\n    for c in num.chars() {\n        if c == '.' {\n            if has_decimal {\n                return false;\n            }\n            has_decimal = true;\n            continue;\n        }\n        if !c.is_digit(10) {\n            return false;\n        }\n        if has_decimal {\n            decimal_count += 1;\n            if decimal_count > 2 {\n                return false;\n            }\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1666122996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let re = Regex::new(r\"^[0-9]+(\\.[0-9]{1,2})?$\").unwrap();\n    re.is_match(&num)\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1665510369,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `Regex`\n --> /tmp/tmpf8hke0fw.rs:3:14\n  |\n3 |     let re = Regex::new(r\"^[0-9]+(\\.[0-9]{1,2})?$\").unwrap();\n  |              ^^^^^ use of undeclared type `Regex`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let mut count = 0;\n    for c in num.chars() {\n        if c == '.' {\n            count += 1;\n        }\n    }\n    if count > 1 {\n        return false;\n    }\n    let mut nums: Vec<&str> = num.split('.').collect();\n    if nums.len() == 1 {\n        return nums[0].parse::<i32>().is_ok();\n    }\n    if nums[1].len() > 2 {\n        return false;\n    }\n    nums[0].parse::<i32>().is_ok() && nums[1].parse::<i32>().is_ok()\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1665510369,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let mut decimal_count = 0;\n    let mut decimal_found = false;\n    for c in num.chars() {\n        if c == '.' {\n            if decimal_found {\n                return false;\n            }\n            decimal_found = true;\n        } else if !c.is_digit(10) {\n            return false;\n        } else if decimal_found {\n            decimal_count += 1;\n        }\n    }\n    decimal_count <= 2\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1665510369,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let re = Regex::new(r\"^\\d+\\.\\d{2}$\").unwrap();\n    re.is_match(&num)\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1665510369,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `Regex`\n --> /tmp/tmpx12sjlz5.rs:3:14\n  |\n3 |     let re = Regex::new(r\"^\\d+\\.\\d{2}$\").unwrap();\n  |              ^^^^^ use of undeclared type `Regex`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let re = Regex::new(r\"^\\d+\\.\\d{2}$\").unwrap();\n    re.is_match(&num)\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1665510369,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `Regex`\n --> /tmp/tmpx12sjlz5.rs:3:14\n  |\n3 |     let re = Regex::new(r\"^\\d+\\.\\d{2}$\").unwrap();\n  |              ^^^^^ use of undeclared type `Regex`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let mut iter = num.chars();\n    let mut decimal = false;\n    let mut count = 0;\n    while let Some(c) = iter.next() {\n        if c == '.' {\n            if decimal {\n                return false;\n            }\n            decimal = true;\n        } else if c.is_digit(10) {\n            if decimal {\n                count += 1;\n            }\n        } else {\n            return false;\n        }\n    }\n    count <= 2\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1666122996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let mut decimal_count = 0;\n    let mut has_decimal = false;\n    for c in num.chars() {\n        if c == '.' {\n            if has_decimal {\n                return false;\n            }\n            has_decimal = true;\n        } else if !c.is_digit(10) {\n            return false;\n        } else if has_decimal {\n            decimal_count += 1;\n        }\n    }\n    decimal_count <= 2\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1665510369,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let mut iter = num.chars();\n    let mut decimal = false;\n    let mut precision = 0;\n    let mut count = 0;\n\n    while let Some(c) = iter.next() {\n        if c == '.' {\n            if decimal {\n                return false;\n            }\n            decimal = true;\n        } else if !c.is_numeric() {\n            return false;\n        } else if decimal {\n            precision += 1;\n        }\n        count += 1;\n    }\n\n    if decimal && precision == 2 {\n        true\n    } else if !decimal && count == 2 {\n        true\n    } else {\n        false\n    }\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1666122996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let mut decimal_count = 0;\n    let mut decimal_found = false;\n    for c in num.chars() {\n        if c == '.' {\n            decimal_found = true;\n        } else if decimal_found {\n            decimal_count += 1;\n        }\n    }\n\n    decimal_count == 2\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1666122996,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpwpt_39n9.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let mut decimal_count = 0;\n    let mut has_decimal = false;\n    for c in num.chars() {\n        if c == '.' {\n            if has_decimal {\n                return false;\n            }\n            has_decimal = true;\n        } else if c.is_digit(10) {\n            if has_decimal {\n                decimal_count += 1;\n            }\n        } else {\n            return false;\n        }\n    }\n    decimal_count <= 2\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1666122994,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let mut decimal_count = 0;\n    let mut has_decimal = false;\n    for c in num.chars() {\n        if c == '.' {\n            if has_decimal {\n                return false;\n            }\n            has_decimal = true;\n        } else if !c.is_digit(10) {\n            return false;\n        } else if has_decimal {\n            decimal_count += 1;\n        }\n    }\n    decimal_count <= 2\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1665510369,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let re = Regex::new(r\"^\\d+\\.\\d{2}$\").unwrap();\n    re.is_match(&num)\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1665510369,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `Regex`\n --> /tmp/tmpx12sjlz5.rs:3:14\n  |\n3 |     let re = Regex::new(r\"^\\d+\\.\\d{2}$\").unwrap();\n  |              ^^^^^ use of undeclared type `Regex`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let mut decimal_count = 0;\n    for c in num.chars() {\n        if c == '.' {\n            decimal_count += 1;\n        }\n    }\n    if decimal_count > 1 {\n        return false;\n    }\n    let num_vec: Vec<&str> = num.split('.').collect();\n    if num_vec.len() == 1 {\n        return num_vec[0].parse::<i32>().is_ok();\n    }\n    if num_vec.len() == 2 {\n        if num_vec[1].len() > 2 {\n            return false;\n        }\n        return num_vec[0].parse::<i32>().is_ok() && num_vec[1].parse::<i32>().is_ok();\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1666122996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let mut decimal_count = 0;\n    for c in num.chars() {\n        if c == '.' {\n            decimal_count += 1;\n        } else if !c.is_digit(10) {\n            return false;\n        }\n    }\n    decimal_count == 1\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1666122996,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpde6ut_gj.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let mut decimal_count = 0;\n    let mut has_decimal = false;\n    for c in num.chars() {\n        if c == '.' {\n            if has_decimal {\n                return false;\n            }\n            has_decimal = true;\n        } else if c.is_digit(10) {\n            if has_decimal {\n                decimal_count += 1;\n            }\n        } else {\n            return false;\n        }\n    }\n    decimal_count <= 2\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1666122994,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let re = Regex::new(r\"^\\d+\\.\\d{2}$\").unwrap();\n    re.is_match(&num)\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1665510369,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `Regex`\n --> /tmp/tmpx12sjlz5.rs:3:14\n  |\n3 |     let re = Regex::new(r\"^\\d+\\.\\d{2}$\").unwrap();\n  |              ^^^^^ use of undeclared type `Regex`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let mut num_chars = num.chars();\n    let mut decimal_count = 0;\n    let mut decimal_found = false;\n    while let Some(c) = num_chars.next() {\n        if c == '.' {\n            decimal_found = true;\n        } else if decimal_found {\n            decimal_count += 1;\n        }\n    }\n    decimal_count == 2\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1666122996,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp4dn8fsdb.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let mut dot_count = 0;\n    let mut num_count = 0;\n    for c in num.chars() {\n        if c == '.' {\n            dot_count += 1;\n        } else if c.is_digit(10) {\n            num_count += 1;\n        } else {\n            return false;\n        }\n    }\n    if dot_count > 1 {\n        return false;\n    }\n    if dot_count == 1 && num_count > 2 {\n        return false;\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1666122996,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmpoc8t8mj2.rs:25:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let mut decimal_count = 0;\n    let mut has_decimal = false;\n    for c in num.chars() {\n        if c == '.' {\n            has_decimal = true;\n            decimal_count += 1;\n        } else if !c.is_digit(10) {\n            return false;\n        }\n    }\n    if has_decimal && decimal_count == 1 {\n        true\n    } else {\n        false\n    }\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1666122996,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpf746ckfy.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let re = Regex::new(r\"^\\d+\\.\\d{2}$\").unwrap();\n    re.is_match(&num)\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1665510369,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `Regex`\n --> /tmp/tmpx12sjlz5.rs:3:14\n  |\n3 |     let re = Regex::new(r\"^\\d+\\.\\d{2}$\").unwrap();\n  |              ^^^^^ use of undeclared type `Regex`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let mut decimal_count = 0;\n    let mut decimal_index = 0;\n    for (i, c) in num.chars().enumerate() {\n        if c == '.' {\n            decimal_count += 1;\n            decimal_index = i;\n        }\n    }\n    if decimal_count > 1 {\n        return false;\n    }\n    if decimal_count == 1 {\n        let decimal_part = &num[decimal_index + 1..];\n        if decimal_part.len() > 2 {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1666122996,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp1x4l8yyh.rs:26:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let re = Regex::new(r\"^[+-]?[0-9]*\\.[0-9]{2}$\").unwrap();\n    re.is_match(&num)\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1666122994,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `Regex`\n --> /tmp/tmpz_r_0lxe.rs:3:14\n  |\n3 |     let re = Regex::new(r\"^[+-]?[0-9]*\\.[0-9]{2}$\").unwrap();\n  |              ^^^^^ use of undeclared type `Regex`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let re = Regex::new(r\"^[+-]?[0-9]*\\.[0-9]{2}$\").unwrap();\n    re.is_match(&num)\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1666122994,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `Regex`\n --> /tmp/tmpz_r_0lxe.rs:3:14\n  |\n3 |     let re = Regex::new(r\"^[+-]?[0-9]*\\.[0-9]{2}$\").unwrap();\n  |              ^^^^^ use of undeclared type `Regex`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let mut decimal = false;\n    let mut precision = 0;\n    for c in num.chars() {\n        if c == '.' {\n            if decimal {\n                return false;\n            }\n            decimal = true;\n        } else if c.is_digit(10) {\n            if decimal {\n                precision += 1;\n            }\n            if precision > 2 {\n                return false;\n            }\n        } else {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1665510369,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let re = Regex::new(r\"^\\d+\\.\\d{2}$\").unwrap();\n    re.is_match(&num)\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1665510369,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `Regex`\n --> /tmp/tmpx12sjlz5.rs:3:14\n  |\n3 |     let re = Regex::new(r\"^\\d+\\.\\d{2}$\").unwrap();\n  |              ^^^^^ use of undeclared type `Regex`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let mut decimal = false;\n    let mut precision = 0;\n    for c in num.chars() {\n        if c == '.' {\n            if decimal {\n                return false;\n            }\n            decimal = true;\n        } else if c.is_digit(10) {\n            if decimal {\n                precision += 1;\n            }\n        } else {\n            return false;\n        }\n    }\n    precision <= 2\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1666122994,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let mut chars = num.chars();\n    let mut decimal_count = 0;\n    let mut dot_count = 0;\n    let mut digit_count = 0;\n    while let Some(c) = chars.next() {\n        match c {\n            '.' => {\n                dot_count += 1;\n                if dot_count > 1 {\n                    return false;\n                }\n            }\n            '0'..='9' => {\n                digit_count += 1;\n                if decimal_count > 2 {\n                    return false;\n                }\n            }\n            _ => return false,\n        }\n        if c == '.' {\n            decimal_count = 0;\n        } else {\n            decimal_count += 1;\n        }\n    }\n    if dot_count == 0 {\n        return false;\n    }\n    if digit_count == 0 {\n        return false;\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1666122996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let re = Regex::new(r\"^\\d+\\.\\d{2}$\").unwrap();\n    re.is_match(&num)\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1665510369,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `Regex`\n --> /tmp/tmpx12sjlz5.rs:3:14\n  |\n3 |     let re = Regex::new(r\"^\\d+\\.\\d{2}$\").unwrap();\n  |              ^^^^^ use of undeclared type `Regex`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let mut decimal_count = 0;\n    let mut decimal_found = false;\n    for c in num.chars() {\n        if c == '.' {\n            if decimal_found {\n                return false;\n            }\n            decimal_found = true;\n        } else if c.is_digit(10) {\n            if decimal_found {\n                decimal_count += 1;\n            }\n        } else {\n            return false;\n        }\n    }\n    decimal_count <= 2\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1666122995,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let mut decimal_count = 0;\n    let mut has_decimal = false;\n    for c in num.chars() {\n        if c == '.' {\n            if has_decimal {\n                return false;\n            }\n            has_decimal = true;\n        } else if c.is_digit(10) {\n            if has_decimal {\n                decimal_count += 1;\n            }\n        } else {\n            return false;\n        }\n    }\n    decimal_count <= 2\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1666122994,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let re = Regex::new(r\"^\\d+\\.\\d{2}$\").unwrap();\n    re.is_match(&num)\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1665510369,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `Regex`\n --> /tmp/tmpx12sjlz5.rs:3:14\n  |\n3 |     let re = Regex::new(r\"^\\d+\\.\\d{2}$\").unwrap();\n  |              ^^^^^ use of undeclared type `Regex`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let mut is_decimal = false;\n    let mut has_decimal = false;\n    let mut decimal_count = 0;\n    let mut has_digit = false;\n\n    for c in num.chars() {\n        if c == '.' {\n            if has_decimal {\n                return false;\n            }\n\n            has_decimal = true;\n        } else if c.is_digit(10) {\n            has_digit = true;\n\n            if has_decimal {\n                decimal_count += 1;\n            }\n        } else {\n            return false;\n        }\n    }\n\n    if has_digit && decimal_count <= 2 {\n        is_decimal = true;\n    }\n\n    is_decimal\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1666122996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let mut is_decimal = false;\n    let mut decimal_count = 0;\n    let mut decimal_index = 0;\n    for (i, c) in num.chars().enumerate() {\n        if c == '.' {\n            decimal_count += 1;\n            decimal_index = i;\n        }\n    }\n    if decimal_count == 1 {\n        let decimal_part = &num[decimal_index + 1..];\n        if decimal_part.len() == 2 {\n            is_decimal = true;\n        }\n    }\n    is_decimal\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1666122996,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp27ieqwrp.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let mut count = 0;\n    for c in num.chars() {\n        if c == '.' {\n            count += 1;\n        }\n    }\n    if count > 1 {\n        return false;\n    }\n    let mut nums = num.split('.');\n    let mut decimal = nums.next().unwrap();\n    let mut dec = nums.next().unwrap_or(\"\");\n    if dec.len() > 2 {\n        return false;\n    }\n    if decimal.len() == 0 {\n        return false;\n    }\n    for c in decimal.chars() {\n        if !c.is_digit(10) {\n            return false;\n        }\n    }\n    for c in dec.chars() {\n        if !c.is_digit(10) {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1666122996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let mut decimal_count = 0;\n    let mut has_decimal = false;\n    for c in num.chars() {\n        if c == '.' {\n            if has_decimal {\n                return false;\n            }\n            has_decimal = true;\n        } else if c.is_digit(10) {\n            if has_decimal {\n                decimal_count += 1;\n            }\n        } else {\n            return false;\n        }\n    }\n    decimal_count <= 2\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1666122994,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let mut decimal_count = 0;\n    for c in num.chars() {\n        if c == '.' {\n            decimal_count += 1;\n        }\n    }\n    if decimal_count > 1 {\n        return false;\n    }\n    let mut decimal_index = 0;\n    let mut decimal_count = 0;\n    for (i, c) in num.chars().enumerate() {\n        if c == '.' {\n            decimal_index = i;\n            decimal_count += 1;\n        }\n    }\n    if decimal_count == 0 {\n        return true;\n    }\n    if decimal_index + 3 == num.len() {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1666122996,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpqij8wj0t.rs:32:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let mut decimal_count = 0;\n    for c in num.chars() {\n        if c == '.' {\n            decimal_count += 1;\n        }\n    }\n    if decimal_count > 1 {\n        return false;\n    }\n    let mut decimal_found = false;\n    for (i, c) in num.chars().enumerate() {\n        if c == '.' {\n            decimal_found = true;\n        } else if !c.is_digit(10) {\n            return false;\n        } else if decimal_found && i > num.len() - 3 {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1666122996,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmp9x1ihynv.rs:27:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let mut dot_count = 0;\n    let mut digit_count = 0;\n    for c in num.chars() {\n        if c == '.' {\n            dot_count += 1;\n        } else if c.is_digit(10) {\n            digit_count += 1;\n        } else {\n            return false;\n        }\n    }\n    if dot_count > 1 {\n        return false;\n    }\n    if dot_count == 0 && digit_count > 0 {\n        return true;\n    }\n    if dot_count == 1 && digit_count > 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1666122996,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmps5trtf33.rs:30:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let re = Regex::new(r\"^[+-]?[0-9]*\\.[0-9]{2}$\").unwrap();\n    re.is_match(&num)\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1666122994,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `Regex`\n --> /tmp/tmpz_r_0lxe.rs:3:14\n  |\n3 |     let re = Regex::new(r\"^[+-]?[0-9]*\\.[0-9]{2}$\").unwrap();\n  |              ^^^^^ use of undeclared type `Regex`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let mut decimal = false;\n    let mut precision = 0;\n    for c in num.chars() {\n        if c == '.' {\n            if decimal {\n                return false;\n            }\n            decimal = true;\n        } else if c.is_digit(10) {\n            if decimal {\n                precision += 1;\n            }\n        } else {\n            return false;\n        }\n    }\n    if decimal {\n        precision == 2\n    } else {\n        true\n    }\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1666122996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let mut decimal_count = 0;\n    let mut decimal_index = 0;\n    for (index, c) in num.chars().enumerate() {\n        if c == '.' {\n            decimal_count += 1;\n            decimal_index = index;\n        }\n    }\n    if decimal_count > 1 {\n        return false;\n    }\n    if decimal_count == 1 {\n        let decimal_part = &num[decimal_index + 1..];\n        if decimal_part.len() > 2 {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1666122996,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpnpyf_0ov.rs:26:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let mut count = 0;\n    for c in num.chars() {\n        if c == '.' {\n            count += 1;\n        }\n    }\n    if count > 1 {\n        return false;\n    }\n    let mut split = num.split('.');\n    let first = split.next().unwrap();\n    let second = split.next().unwrap();\n    if second.len() > 2 {\n        return false;\n    }\n    if first.len() == 0 || second.len() == 0 {\n        return false;\n    }\n    for c in first.chars() {\n        if !c.is_digit(10) {\n            return false;\n        }\n    }\n    for c in second.chars() {\n        if !c.is_digit(10) {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1666122996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let mut decimal_count = 0;\n    let mut decimal_found = false;\n    for c in num.chars() {\n        if c == '.' {\n            if decimal_found {\n                return false;\n            }\n            decimal_found = true;\n        } else if c.is_digit(10) {\n            if decimal_found {\n                decimal_count += 1;\n            }\n        } else {\n            return false;\n        }\n    }\n\n    if decimal_count > 2 {\n        return false;\n    }\n\n    true\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1666122996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let re = Regex::new(r\"^\\d+\\.\\d{2}$\").unwrap();\n    re.is_match(&num)\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1665510369,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `Regex`\n --> /tmp/tmpx12sjlz5.rs:3:14\n  |\n3 |     let re = Regex::new(r\"^\\d+\\.\\d{2}$\").unwrap();\n  |              ^^^^^ use of undeclared type `Regex`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let re = Regex::new(r\"^[-+]?[0-9]*\\.?[0-9]{0,2}$\").unwrap();\n    re.is_match(&num)\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1666122996,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `Regex`\n --> /tmp/tmpi3ml4tr5.rs:3:14\n  |\n3 |     let re = Regex::new(r\"^[-+]?[0-9]*\\.?[0-9]{0,2}$\").unwrap();\n  |              ^^^^^ use of undeclared type `Regex`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let mut decimal_count = 0;\n    let mut decimal_found = false;\n    for c in num.chars() {\n        if c == '.' {\n            if decimal_found {\n                return false;\n            }\n            decimal_found = true;\n        } else if c.is_digit(10) {\n            if decimal_found {\n                decimal_count += 1;\n            }\n        } else {\n            return false;\n        }\n    }\n    decimal_count <= 2\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1666122995,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let mut decimal_count = 0;\n    let mut has_decimal = false;\n    for c in num.chars() {\n        if c == '.' {\n            if has_decimal {\n                return false;\n            }\n            has_decimal = true;\n        } else if !c.is_digit(10) {\n            return false;\n        } else if has_decimal {\n            decimal_count += 1;\n            if decimal_count > 2 {\n                return false;\n            }\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1666122995,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let re = Regex::new(r\"^\\d+\\.\\d{2}$\").unwrap();\n    re.is_match(&num)\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1665510369,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `Regex`\n --> /tmp/tmpx12sjlz5.rs:3:14\n  |\n3 |     let re = Regex::new(r\"^\\d+\\.\\d{2}$\").unwrap();\n  |              ^^^^^ use of undeclared type `Regex`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let re = Regex::new(r\"^\\d*\\.\\d{2}$\").unwrap();\n    re.is_match(&num)\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1665510369,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `Regex`\n --> /tmp/tmpu4oumkw8.rs:3:14\n  |\n3 |     let re = Regex::new(r\"^\\d*\\.\\d{2}$\").unwrap();\n  |              ^^^^^ use of undeclared type `Regex`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let mut decimal_count = 0;\n    for c in num.chars() {\n        if c == '.' {\n            decimal_count += 1;\n        }\n    }\n    if decimal_count > 1 {\n        return false;\n    }\n    let mut decimal_index = 0;\n    for (i, c) in num.chars().enumerate() {\n        if c == '.' {\n            decimal_index = i;\n            break;\n        }\n    }\n    if decimal_index == 0 {\n        return false;\n    }\n    if decimal_index == num.len() - 1 {\n        return false;\n    }\n    if decimal_index == num.len() - 2 {\n        return true;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1666122995,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmpj9ypwpxb.rs:33:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let re = Regex::new(r\"^-?\\d+\\.\\d{2}$\").unwrap();\n    re.is_match(&num)\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1666122995,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `Regex`\n --> /tmp/tmprmyf9q9j.rs:3:14\n  |\n3 |     let re = Regex::new(r\"^-?\\d+\\.\\d{2}$\").unwrap();\n  |              ^^^^^ use of undeclared type `Regex`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let mut has_decimal = false;\n    let mut decimal_count = 0;\n    for c in num.chars() {\n        if c == '.' {\n            if has_decimal {\n                return false;\n            }\n            has_decimal = true;\n        } else if c.is_digit(10) {\n            if has_decimal {\n                decimal_count += 1;\n            }\n        } else {\n            return false;\n        }\n    }\n    decimal_count <= 2\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1665510369,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let mut decimal = false;\n    let mut precision = 0;\n\n    for c in num.chars() {\n        if c == '.' {\n            if decimal {\n                return false;\n            }\n            decimal = true;\n        } else if c.is_digit(10) {\n            if decimal {\n                precision += 1;\n            }\n        } else {\n            return false;\n        }\n    }\n\n    if decimal && precision == 2 {\n        true\n    } else {\n        false\n    }\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1666122996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let mut decimal_count = 0;\n    let mut decimal_found = false;\n    for c in num.chars() {\n        if c == '.' {\n            if decimal_found {\n                return false;\n            }\n            decimal_found = true;\n        } else if !c.is_digit(10) {\n            return false;\n        } else if decimal_found {\n            decimal_count += 1;\n        }\n    }\n    decimal_count <= 2\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1665510369,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let mut num_chars = num.chars();\n    let mut dot_count = 0;\n    let mut digit_count = 0;\n    loop {\n        match num_chars.next() {\n            Some(c) => {\n                if c == '.' {\n                    dot_count += 1;\n                } else if c.is_digit(10) {\n                    digit_count += 1;\n                } else {\n                    return false;\n                }\n            }\n            None => break,\n        }\n    }\n    if dot_count == 1 && digit_count == 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1666122996,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmpcpll13r8.rs:28:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let mut decimal_count = 0;\n    let mut decimal_found = false;\n    for c in num.chars() {\n        if c == '.' {\n            if decimal_found {\n                return false;\n            }\n            decimal_found = true;\n        } else if !c.is_digit(10) {\n            return false;\n        } else if decimal_found {\n            decimal_count += 1;\n        }\n    }\n    decimal_count <= 2\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1665510369,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let mut dot_count = 0;\n    let mut num_count = 0;\n    for c in num.chars() {\n        if c == '.' {\n            dot_count += 1;\n        } else if c.is_numeric() {\n            num_count += 1;\n        }\n    }\n    dot_count == 1 && num_count == num.len() - 1\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1666122997,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp7ch8er3q.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let re = Regex::new(r\"^-?\\d+(\\.\\d{1,2})?$\").unwrap();\n    re.is_match(&num)\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1666122996,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `Regex`\n --> /tmp/tmp16oa32i7.rs:3:14\n  |\n3 |     let re = Regex::new(r\"^-?\\d+(\\.\\d{1,2})?$\").unwrap();\n  |              ^^^^^ use of undeclared type `Regex`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let mut has_dot = false;\n    let mut has_digit = false;\n    let mut has_digit_after_dot = false;\n    for c in num.chars() {\n        if c == '.' {\n            if has_dot {\n                return false;\n            }\n            has_dot = true;\n        } else if c.is_digit(10) {\n            if has_dot {\n                has_digit_after_dot = true;\n            } else {\n                has_digit = true;\n            }\n        } else {\n            return false;\n        }\n    }\n    if has_dot {\n        has_digit && has_digit_after_dot\n    } else {\n        has_digit\n    }\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1666122997,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp60ou3s_c.rs:33:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let mut decimal_count = 0;\n    let mut decimal_found = false;\n    for c in num.chars() {\n        if c == '.' {\n            decimal_found = true;\n            continue;\n        }\n        if !decimal_found {\n            continue;\n        }\n        decimal_count += 1;\n        if decimal_count > 2 {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1665510369,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp9gjvu73a.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let mut count = 0;\n    for c in num.chars() {\n        if c == '.' {\n            count += 1;\n        }\n    }\n    if count > 1 {\n        return false;\n    }\n    let mut split = num.split('.');\n    let first = split.next().unwrap();\n    let second = split.next().unwrap();\n    if second.len() > 2 {\n        return false;\n    }\n    if first.len() == 0 {\n        return false;\n    }\n    for c in first.chars() {\n        if !c.is_digit(10) {\n            return false;\n        }\n    }\n    for c in second.chars() {\n        if !c.is_digit(10) {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1666122997,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let mut decimal_count = 0;\n    let mut has_decimal = false;\n    for c in num.chars() {\n        if c == '.' {\n            if has_decimal {\n                return false;\n            }\n            has_decimal = true;\n        } else if !c.is_digit(10) {\n            return false;\n        } else if has_decimal {\n            decimal_count += 1;\n            if decimal_count > 2 {\n                return false;\n            }\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1666122995,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let mut decimal_count = 0;\n    let mut decimal_found = false;\n    for c in num.chars() {\n        if c == '.' {\n            if decimal_found {\n                return false;\n            }\n            decimal_found = true;\n        } else if c.is_digit(10) {\n            if decimal_found {\n                decimal_count += 1;\n            }\n        } else {\n            return false;\n        }\n    }\n    decimal_count <= 2\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1666122995,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let re = Regex::new(r\"^[0-9]+(\\.[0-9]{1,2})?$\").unwrap();\n    re.is_match(&num)\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1665510369,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `Regex`\n --> /tmp/tmpf8hke0fw.rs:3:14\n  |\n3 |     let re = Regex::new(r\"^[0-9]+(\\.[0-9]{1,2})?$\").unwrap();\n  |              ^^^^^ use of undeclared type `Regex`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let re = Regex::new(r\"^[0-9]+\\.[0-9]{2}$\").unwrap();\n    re.is_match(&num)\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1666122996,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `Regex`\n --> /tmp/tmp9pb995un.rs:3:14\n  |\n3 |     let re = Regex::new(r\"^[0-9]+\\.[0-9]{2}$\").unwrap();\n  |              ^^^^^ use of undeclared type `Regex`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let re = Regex::new(r\"^\\d+\\.\\d{2}$\").unwrap();\n    re.is_match(&num)\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1665510369,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `Regex`\n --> /tmp/tmpx12sjlz5.rs:3:14\n  |\n3 |     let re = Regex::new(r\"^\\d+\\.\\d{2}$\").unwrap();\n  |              ^^^^^ use of undeclared type `Regex`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let mut count = 0;\n    for c in num.chars() {\n        if c == '.' {\n            count += 1;\n        }\n    }\n    if count > 1 {\n        return false;\n    }\n    let mut nums: Vec<&str> = num.split('.').collect();\n    if nums.len() == 1 {\n        return nums[0].parse::<i32>().is_ok();\n    }\n    if nums[1].len() > 2 {\n        return false;\n    }\n    nums[0].parse::<i32>().is_ok() && nums[1].parse::<i32>().is_ok()\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1665510369,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let mut decimal_count = 0;\n    for c in num.chars() {\n        if c == '.' {\n            decimal_count += 1;\n        }\n    }\n    if decimal_count > 1 {\n        return false;\n    }\n    let mut decimal_index = 0;\n    for (i, c) in num.chars().enumerate() {\n        if c == '.' {\n            decimal_index = i;\n        }\n    }\n    if decimal_index == 0 {\n        return false;\n    }\n    if decimal_index == num.len() - 1 {\n        return false;\n    }\n    if decimal_index == num.len() - 3 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1666122997,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpmcr_tiue.rs:33:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let re = Regex::new(r\"^\\d+\\.\\d{2}$\").unwrap();\n    re.is_match(&num)\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1665510369,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `Regex`\n --> /tmp/tmpx12sjlz5.rs:3:14\n  |\n3 |     let re = Regex::new(r\"^\\d+\\.\\d{2}$\").unwrap();\n  |              ^^^^^ use of undeclared type `Regex`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let mut count = 0;\n    let mut is_decimal = false;\n    for c in num.chars() {\n        if c == '.' {\n            is_decimal = true;\n            continue;\n        }\n        if is_decimal {\n            count += 1;\n        }\n    }\n    count == 2\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1666122995,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpmu3y60_e.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let mut decimal_count = 0;\n    let mut decimal_found = false;\n    for c in num.chars() {\n        if c == '.' {\n            decimal_found = true;\n        } else if decimal_found {\n            decimal_count += 1;\n        }\n    }\n    decimal_count == 2\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1665510369,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp90xbdmt2.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let mut decimal_count = 0;\n    let mut has_decimal = false;\n    for c in num.chars() {\n        if c == '.' {\n            if has_decimal {\n                return false;\n            }\n            has_decimal = true;\n        } else if !c.is_digit(10) {\n            return false;\n        } else if has_decimal {\n            decimal_count += 1;\n        }\n    }\n    if has_decimal && decimal_count != 2 {\n        return false;\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1666122997,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let mut has_decimal = false;\n    let mut decimal_count = 0;\n    for c in num.chars() {\n        if c == '.' {\n            if has_decimal {\n                return false;\n            }\n            has_decimal = true;\n        } else if !c.is_digit(10) {\n            return false;\n        } else if has_decimal {\n            decimal_count += 1;\n            if decimal_count > 2 {\n                return false;\n            }\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1666122997,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let mut decimal_count = 0;\n    let mut decimal_found = false;\n\n    for c in num.chars() {\n        if c == '.' {\n            if decimal_found {\n                return false;\n            }\n\n            decimal_found = true;\n        } else if !c.is_digit(10) {\n            return false;\n        } else if decimal_found {\n            decimal_count += 1;\n        }\n    }\n\n    decimal_count <= 2\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1666122997,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let mut decimal_count = 0;\n    let mut decimal_index = 0;\n    let mut is_decimal = false;\n    for (i, c) in num.chars().enumerate() {\n        if c == '.' {\n            decimal_count += 1;\n            decimal_index = i;\n        }\n    }\n    if decimal_count == 1 {\n        let decimal_part = &num[decimal_index + 1..];\n        if decimal_part.len() == 2 {\n            is_decimal = true;\n        }\n    }\n    is_decimal\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1666122997,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp10lb3fy5.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let mut is_decimal = false;\n    let mut decimal_count = 0;\n    let mut decimal_index = 0;\n    let mut is_negative = false;\n    let mut is_positive = false;\n    let mut is_zero = false;\n    let mut is_digit = false;\n\n    for (i, c) in num.chars().enumerate() {\n        if c == '-' {\n            if i == 0 {\n                is_negative = true;\n            } else {\n                return false;\n            }\n        } else if c == '+' {\n            if i == 0 {\n                is_positive = true;\n            } else {\n                return false;\n            }\n        } else if c == '.' {\n            if decimal_count == 0 {\n                decimal_count += 1;\n                decimal_index = i;\n                is_decimal = true;\n            } else {\n                return false;\n            }\n        } else if c == '0' {\n            if i == 0 {\n                is_zero = true;\n            }\n            is_digit = true;\n        } else if c.is_digit(10) {\n            is_digit = true;\n        } else {\n            return false;\n        }\n    }\n\n    if is_digit {\n        if is_decimal {\n            if decimal_index + 3 == num.len() {\n                return true;\n            } else {\n                return false;\n            }\n        } else {\n            return true;\n        }\n    } else {\n        return false;\n    }\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1666122997,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let re = Regex::new(r\"^\\d+\\.\\d{2}$\").unwrap();\n    re.is_match(&num)\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1665510369,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `Regex`\n --> /tmp/tmpx12sjlz5.rs:3:14\n  |\n3 |     let re = Regex::new(r\"^\\d+\\.\\d{2}$\").unwrap();\n  |              ^^^^^ use of undeclared type `Regex`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let mut decimal_count = 0;\n    let mut decimal_found = false;\n    for c in num.chars() {\n        if c == '.' {\n            if decimal_found {\n                return false;\n            }\n            decimal_found = true;\n        } else if c.is_digit(10) {\n            if decimal_found {\n                decimal_count += 1;\n            }\n        } else {\n            return false;\n        }\n    }\n    decimal_count <= 2\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1666122995,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let mut num = num.chars();\n    let mut decimal = false;\n    let mut count = 0;\n    while let Some(c) = num.next() {\n        match c {\n            '0'..='9' => {\n                if decimal {\n                    count += 1;\n                }\n            }\n            '.' => {\n                if decimal {\n                    return false;\n                }\n                decimal = true;\n            }\n            _ => return false,\n        }\n    }\n    if decimal && count == 2 {\n        true\n    } else {\n        false\n    }\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1666122997,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let re = Regex::new(r\"^\\d+\\.\\d{2}$\").unwrap();\n    re.is_match(&num)\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1665510369,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `Regex`\n --> /tmp/tmpx12sjlz5.rs:3:14\n  |\n3 |     let re = Regex::new(r\"^\\d+\\.\\d{2}$\").unwrap();\n  |              ^^^^^ use of undeclared type `Regex`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let re = Regex::new(r\"^[0-9]+(\\.[0-9]{1,2})?$\").unwrap();\n    re.is_match(&num)\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1665510369,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `Regex`\n --> /tmp/tmpf8hke0fw.rs:3:14\n  |\n3 |     let re = Regex::new(r\"^[0-9]+(\\.[0-9]{1,2})?$\").unwrap();\n  |              ^^^^^ use of undeclared type `Regex`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let re = Regex::new(r\"^[0-9]+(\\.[0-9]{1,2})?$\").unwrap();\n    re.is_match(&num)\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1665510369,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `Regex`\n --> /tmp/tmpf8hke0fw.rs:3:14\n  |\n3 |     let re = Regex::new(r\"^[0-9]+(\\.[0-9]{1,2})?$\").unwrap();\n  |              ^^^^^ use of undeclared type `Regex`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let mut chars = num.chars();\n    let mut decimal_count = 0;\n    let mut has_decimal = false;\n    while let Some(c) = chars.next() {\n        if c == '.' {\n            has_decimal = true;\n        } else if c.is_digit(10) {\n            if has_decimal {\n                decimal_count += 1;\n            }\n        } else {\n            return false;\n        }\n    }\n    decimal_count <= 2\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1666122997,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let mut decimal_count = 0;\n    let mut decimal_found = false;\n    for c in num.chars() {\n        if c == '.' {\n            if decimal_found {\n                return false;\n            }\n            decimal_found = true;\n            continue;\n        }\n        if c < '0' || c > '9' {\n            return false;\n        }\n        if decimal_found {\n            decimal_count += 1;\n        }\n    }\n    if decimal_count == 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1666122997,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let mut decimal_count = 0;\n    let mut decimal_found = false;\n    for c in num.chars() {\n        if c == '.' {\n            if decimal_found {\n                return false;\n            }\n            decimal_found = true;\n        } else if !c.is_digit(10) {\n            return false;\n        } else if decimal_found {\n            decimal_count += 1;\n        }\n    }\n    decimal_count <= 2\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1665510369,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let mut count = 0;\n    for c in num.chars() {\n        if c == '.' {\n            count += 1;\n        }\n    }\n    if count > 1 {\n        return false;\n    }\n    let mut split = num.split('.');\n    let first = split.next().unwrap();\n    let second = split.next().unwrap();\n    if second.len() > 2 {\n        return false;\n    }\n    if first.len() == 0 {\n        return false;\n    }\n    for c in first.chars() {\n        if !c.is_digit(10) {\n            return false;\n        }\n    }\n    for c in second.chars() {\n        if !c.is_digit(10) {\n            return false;\n        }\n    }\n    return true;\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1666122997,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let mut decimal_count = 0;\n    let mut decimal_found = false;\n    for c in num.chars() {\n        if c == '.' {\n            if decimal_found {\n                return false;\n            }\n            decimal_found = true;\n        } else if !c.is_digit(10) {\n            return false;\n        } else if decimal_found {\n            decimal_count += 1;\n            if decimal_count > 2 {\n                return false;\n            }\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1666122995,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let mut count = 0;\n    let mut decimal = false;\n    for c in num.chars() {\n        if c == '.' {\n            if decimal {\n                return false;\n            }\n            decimal = true;\n        } else if !c.is_digit(10) {\n            return false;\n        } else if decimal {\n            count += 1;\n        }\n    }\n    count <= 2\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1666122996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let mut decimal_count = 0;\n    let mut decimal_found = false;\n    for c in num.chars() {\n        if c == '.' {\n            if decimal_found {\n                return false;\n            }\n            decimal_found = true;\n        } else if !c.is_digit(10) {\n            return false;\n        } else if decimal_found {\n            decimal_count += 1;\n        }\n    }\n    decimal_count <= 2\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1665510369,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let mut count = 0;\n    for c in num.chars() {\n        if c == '.' {\n            count += 1;\n        }\n    }\n    if count == 1 {\n        let split: Vec<&str> = num.split('.').collect();\n        if split[1].len() == 2 {\n            return true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1666122997,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpm7row_8d.rs:21:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let mut decimal_count = 0;\n    let mut decimal_found = false;\n    for c in num.chars() {\n        if c == '.' {\n            if decimal_found {\n                return false;\n            }\n            decimal_found = true;\n        } else if c.is_ascii_digit() {\n            if decimal_found {\n                decimal_count += 1;\n            }\n        } else {\n            return false;\n        }\n    }\n    decimal_count <= 2\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1666122997,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let mut decimal_count = 0;\n    for c in num.chars() {\n        if c == '.' {\n            decimal_count += 1;\n        }\n    }\n    if decimal_count > 1 {\n        return false;\n    }\n    let mut split = num.split(\".\");\n    let left = split.next().unwrap();\n    let right = split.next().unwrap();\n    if right.len() > 2 {\n        return false;\n    }\n    if left.len() > 1 && left.chars().nth(0).unwrap() == '0' {\n        return false;\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1666122997,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp91rf69hr.rs:27:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let mut decimal = false;\n    let mut precision = 0;\n    for c in num.chars() {\n        if c == '.' {\n            if decimal {\n                return false;\n            }\n            decimal = true;\n        } else if c.is_digit(10) {\n            if decimal {\n                precision += 1;\n            }\n        } else {\n            return false;\n        }\n    }\n    precision <= 2\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1666122994,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let mut decimal = false;\n    let mut precision = 0;\n    for c in num.chars() {\n        if c == '.' {\n            if decimal {\n                return false;\n            }\n            decimal = true;\n        } else if c.is_digit(10) {\n            if decimal {\n                precision += 1;\n            }\n            if precision > 2 {\n                return false;\n            }\n        } else {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1665510369,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let mut count = 0;\n    let mut decimal = false;\n    for c in num.chars() {\n        if c == '.' {\n            if decimal {\n                return false;\n            }\n            decimal = true;\n        } else if c.is_digit(10) {\n            if decimal {\n                count += 1;\n            }\n        } else {\n            return false;\n        }\n    }\n    count <= 2\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1666122997,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let mut decimal_count = 0;\n    let mut decimal_found = false;\n\n    for c in num.chars() {\n        if c == '.' {\n            if decimal_found {\n                return false;\n            }\n            decimal_found = true;\n        } else if !c.is_digit(10) {\n            return false;\n        } else if decimal_found {\n            decimal_count += 1;\n        }\n    }\n\n    decimal_count == 2\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1666122997,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let re = Regex::new(r\"^\\d+\\.\\d{2}$\").unwrap();\n    re.is_match(&num)\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1665510369,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `Regex`\n --> /tmp/tmpx12sjlz5.rs:3:14\n  |\n3 |     let re = Regex::new(r\"^\\d+\\.\\d{2}$\").unwrap();\n  |              ^^^^^ use of undeclared type `Regex`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let mut decimal = false;\n    let mut precision = 0;\n    for c in num.chars() {\n        if c == '.' {\n            if decimal {\n                return false;\n            }\n            decimal = true;\n        } else if c.is_digit(10) {\n            if decimal {\n                precision += 1;\n            }\n            if precision > 2 {\n                return false;\n            }\n        } else {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1665510369,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let mut has_decimal = false;\n    let mut decimal_count = 0;\n    for c in num.chars() {\n        if c == '.' {\n            if has_decimal {\n                return false;\n            }\n            has_decimal = true;\n        } else if !c.is_digit(10) {\n            return false;\n        } else if has_decimal {\n            decimal_count += 1;\n        }\n    }\n    return decimal_count <= 2;\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1666122997,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let mut decimal_count = 0;\n    for c in num.chars() {\n        if c == '.' {\n            decimal_count += 1;\n        }\n    }\n    if decimal_count > 1 {\n        return false;\n    }\n\n    let mut decimal_found = false;\n    let mut decimal_count = 0;\n    for c in num.chars() {\n        if c == '.' {\n            decimal_found = true;\n        } else if !c.is_digit(10) {\n            return false;\n        } else if decimal_found {\n            decimal_count += 1;\n        }\n    }\n    decimal_count <= 2\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1666122997,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let re = Regex::new(r\"^\\d+\\.\\d{2}$\").unwrap();\n    re.is_match(&num)\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1665510369,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `Regex`\n --> /tmp/tmpx12sjlz5.rs:3:14\n  |\n3 |     let re = Regex::new(r\"^\\d+\\.\\d{2}$\").unwrap();\n  |              ^^^^^ use of undeclared type `Regex`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let mut decimal_count = 0;\n    let mut decimal_found = false;\n    for c in num.chars() {\n        if c == '.' {\n            decimal_found = true;\n            continue;\n        }\n        if decimal_found {\n            decimal_count += 1;\n        }\n        if decimal_count > 2 {\n            return false;\n        }\n        if !c.is_digit(10) {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1666122997,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let re = Regex::new(r\"^[+-]?\\d+(\\.\\d{1,2})?$\").unwrap();\n    re.is_match(&num)\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1666122997,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `Regex`\n --> /tmp/tmpl4h67bfl.rs:3:14\n  |\n3 |     let re = Regex::new(r\"^[+-]?\\d+(\\.\\d{1,2})?$\").unwrap();\n  |              ^^^^^ use of undeclared type `Regex`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let re = Regex::new(r\"^\\d+\\.\\d{2}$\").unwrap();\n    re.is_match(&num)\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1665510369,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `Regex`\n --> /tmp/tmpx12sjlz5.rs:3:14\n  |\n3 |     let re = Regex::new(r\"^\\d+\\.\\d{2}$\").unwrap();\n  |              ^^^^^ use of undeclared type `Regex`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let re = Regex::new(r\"^\\d+\\.\\d{2}$\").unwrap();\n    re.is_match(&num)\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1665510369,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `Regex`\n --> /tmp/tmpx12sjlz5.rs:3:14\n  |\n3 |     let re = Regex::new(r\"^\\d+\\.\\d{2}$\").unwrap();\n  |              ^^^^^ use of undeclared type `Regex`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let mut decimal_count = 0;\n    let mut has_decimal = false;\n    for c in num.chars() {\n        if c == '.' {\n            if has_decimal {\n                return false;\n            }\n            has_decimal = true;\n        } else if !c.is_digit(10) {\n            return false;\n        } else if has_decimal {\n            decimal_count += 1;\n        }\n    }\n    decimal_count <= 2\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1665510369,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let re = Regex::new(r\"^-?\\d+\\.\\d{2}$\").unwrap();\n    re.is_match(&num)\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1666122995,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `Regex`\n --> /tmp/tmprmyf9q9j.rs:3:14\n  |\n3 |     let re = Regex::new(r\"^-?\\d+\\.\\d{2}$\").unwrap();\n  |              ^^^^^ use of undeclared type `Regex`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let re = Regex::new(r\"^[0-9]+\\.[0-9]{2}$\").unwrap();\n    re.is_match(&num)\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1666122996,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `Regex`\n --> /tmp/tmp9pb995un.rs:3:14\n  |\n3 |     let re = Regex::new(r\"^[0-9]+\\.[0-9]{2}$\").unwrap();\n  |              ^^^^^ use of undeclared type `Regex`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let mut is_decimal = false;\n    let mut has_decimal = false;\n    let mut decimal_count = 0;\n\n    for c in num.chars() {\n        if c == '.' {\n            if has_decimal {\n                return false;\n            }\n            has_decimal = true;\n        } else if c.is_digit(10) {\n            if has_decimal {\n                decimal_count += 1;\n            }\n            is_decimal = true;\n        } else {\n            return false;\n        }\n    }\n\n    if decimal_count > 2 {\n        return false;\n    }\n\n    is_decimal\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1666122997,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let mut decimal_count = 0;\n    let mut decimal_index = 0;\n    let mut index = 0;\n    for c in num.chars() {\n        if c == '.' {\n            decimal_count += 1;\n            decimal_index = index;\n        }\n        index += 1;\n    }\n    if decimal_count > 1 {\n        return false;\n    }\n    if decimal_count == 0 {\n        return true;\n    }\n    if decimal_index + 3 == num.len() {\n        return true;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1666122997,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpz4si1mur.rs:28:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let mut decimal = false;\n    let mut precision = 0;\n    for c in num.chars() {\n        if c == '.' {\n            decimal = true;\n        } else if !c.is_digit(10) {\n            return false;\n        } else if decimal {\n            precision += 1;\n        }\n    }\n    precision == 2\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1666122997,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let mut count = 0;\n    for c in num.chars() {\n        if c == '.' {\n            count += 1;\n        }\n    }\n    if count > 1 {\n        return false;\n    }\n    let mut nums: Vec<&str> = num.split('.').collect();\n    if nums.len() == 2 {\n        if nums[1].len() > 2 {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1666122997,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpgiaela3h.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let re = Regex::new(r\"^\\d+\\.\\d{2}$\").unwrap();\n    re.is_match(&num)\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1665510369,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `Regex`\n --> /tmp/tmpx12sjlz5.rs:3:14\n  |\n3 |     let re = Regex::new(r\"^\\d+\\.\\d{2}$\").unwrap();\n  |              ^^^^^ use of undeclared type `Regex`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let mut count = 0;\n    let mut decimal = false;\n    for c in num.chars() {\n        if c == '.' {\n            if decimal {\n                return false;\n            }\n            decimal = true;\n        } else if !c.is_digit(10) {\n            return false;\n        } else if decimal {\n            count += 1;\n        }\n    }\n    count <= 2\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1666122996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let mut decimal_count = 0;\n    let mut num_count = 0;\n    for c in num.chars() {\n        if c == '.' {\n            decimal_count += 1;\n        } else if c.is_digit(10) {\n            num_count += 1;\n        } else {\n            return false;\n        }\n    }\n    if decimal_count > 1 {\n        return false;\n    }\n    if decimal_count == 1 && num_count > 2 {\n        return false;\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1666122997,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmpe30m8xdo.rs:25:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let mut iter = num.chars();\n    let mut has_decimal = false;\n    let mut has_digit = false;\n    let mut has_digit_after_decimal = false;\n    while let Some(c) = iter.next() {\n        if c == '.' {\n            if has_decimal {\n                return false;\n            }\n            has_decimal = true;\n        } else if c.is_digit(10) {\n            if has_decimal {\n                has_digit_after_decimal = true;\n            } else {\n                has_digit = true;\n            }\n        } else {\n            return false;\n        }\n    }\n    has_digit && (has_digit_after_decimal || !has_decimal)\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1666122997,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpmal4gsto.rs:30:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let mut dot_count = 0;\n    let mut digit_count = 0;\n    for c in num.chars() {\n        match c {\n            '0'..='9' => digit_count += 1,\n            '.' => dot_count += 1,\n            _ => return false,\n        }\n    }\n    if dot_count > 1 {\n        return false;\n    }\n    if dot_count == 0 {\n        return true;\n    }\n    if digit_count > 2 {\n        return false;\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1666122997,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmpcb2kqqpf.rs:26:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let mut decimal_count = 0;\n    let mut decimal_found = false;\n    for c in num.chars() {\n        match c {\n            '0'..='9' => {\n                if decimal_found {\n                    decimal_count += 1;\n                }\n            }\n            '.' => {\n                if decimal_found {\n                    return false;\n                }\n                decimal_found = true;\n            }\n            _ => return false,\n        }\n    }\n    decimal_count <= 2\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1666122997,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let mut has_decimal = false;\n    let mut decimal_count = 0;\n    for c in num.chars() {\n        if c == '.' {\n            if has_decimal {\n                return false;\n            }\n            has_decimal = true;\n        } else if c.is_digit(10) {\n            if has_decimal {\n                decimal_count += 1;\n            }\n        } else {\n            return false;\n        }\n    }\n    decimal_count <= 2\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1665510369,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let mut count = 0;\n    for c in num.chars() {\n        if c == '.' {\n            count += 1;\n        }\n    }\n    if count > 1 {\n        return false;\n    }\n    let mut num_vec: Vec<&str> = num.split('.').collect();\n    if num_vec.len() == 1 {\n        return true;\n    }\n    if num_vec[1].len() > 2 {\n        return false;\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1666122997,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp29naugh6.rs:25:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let mut decimal_count = 0;\n    for c in num.chars() {\n        if c == '.' {\n            decimal_count += 1;\n        }\n    }\n    if decimal_count > 1 {\n        return false;\n    }\n    let mut decimal_index = 0;\n    let mut decimal_count = 0;\n    for (i, c) in num.chars().enumerate() {\n        if c == '.' {\n            decimal_index = i;\n            decimal_count += 1;\n        }\n    }\n    if decimal_count == 0 {\n        return true;\n    }\n    let decimal_part = &num[decimal_index + 1..];\n    if decimal_part.len() > 2 {\n        return false;\n    }\n    return true;\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1666122996,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp4enfaemf.rs:33:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let mut decimal_count = 0;\n    let mut decimal_found = false;\n    for c in num.chars() {\n        if c == '.' {\n            if decimal_found {\n                return false;\n            }\n            decimal_found = true;\n        } else if c.is_digit(10) {\n            if decimal_found {\n                decimal_count += 1;\n            }\n        } else {\n            return false;\n        }\n    }\n    decimal_count <= 2\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1666122995,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let mut decimal_count = 0;\n    for c in num.chars() {\n        if c == '.' {\n            decimal_count += 1;\n        }\n    }\n    if decimal_count > 1 {\n        return false;\n    }\n    let mut decimal_index = 0;\n    for (i, c) in num.chars().enumerate() {\n        if c == '.' {\n            decimal_index = i;\n            break;\n        }\n    }\n    if decimal_index == 0 {\n        return false;\n    }\n    let mut decimal_count = 0;\n    for c in num.chars().skip(decimal_index + 1) {\n        decimal_count += 1;\n    }\n    if decimal_count > 2 {\n        return false;\n    }\n    true\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1666122997,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpydonu74m.rs:35:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let re = Regex::new(r\"^\\d+\\.\\d{2}$\").unwrap();\n    re.is_match(&num)\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1665510369,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `Regex`\n --> /tmp/tmpx12sjlz5.rs:3:14\n  |\n3 |     let re = Regex::new(r\"^\\d+\\.\\d{2}$\").unwrap();\n  |              ^^^^^ use of undeclared type `Regex`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let mut has_decimal = false;\n    let mut decimal_count = 0;\n    for c in num.chars() {\n        if c == '.' {\n            if has_decimal {\n                return false;\n            }\n            has_decimal = true;\n        } else if c.is_digit(10) {\n            if has_decimal {\n                decimal_count += 1;\n            }\n        } else {\n            return false;\n        }\n    }\n    if has_decimal && decimal_count == 2 {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1666122996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let re = Regex::new(r\"^\\d+\\.\\d{2}$\").unwrap();\n    re.is_match(&num)\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1665510369,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `Regex`\n --> /tmp/tmpx12sjlz5.rs:3:14\n  |\n3 |     let re = Regex::new(r\"^\\d+\\.\\d{2}$\").unwrap();\n  |              ^^^^^ use of undeclared type `Regex`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let re = Regex::new(r\"^\\d+\\.\\d{2}$\").unwrap();\n    re.is_match(&num)\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1665510369,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `Regex`\n --> /tmp/tmpx12sjlz5.rs:3:14\n  |\n3 |     let re = Regex::new(r\"^\\d+\\.\\d{2}$\").unwrap();\n  |              ^^^^^ use of undeclared type `Regex`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let mut count = 0;\n    let mut decimal = false;\n    for c in num.chars() {\n        if c == '.' {\n            if decimal {\n                return false;\n            }\n            decimal = true;\n        } else if !c.is_digit(10) {\n            return false;\n        } else if decimal {\n            count += 1;\n        }\n    }\n    count <= 2\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1666122996,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let mut decimal_count = 0;\n    let mut decimal_found = false;\n    for c in num.chars() {\n        if c == '.' {\n            decimal_found = true;\n            continue;\n        }\n        if decimal_found {\n            decimal_count += 1;\n        }\n    }\n    decimal_count == 2\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1666122996,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp48fcw7om.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let mut decimal_count = 0;\n    let mut decimal_found = false;\n    for c in num.chars() {\n        if c == '.' {\n            decimal_found = true;\n        } else if decimal_found {\n            decimal_count += 1;\n        }\n    }\n    decimal_count == 2\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1665510369,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp90xbdmt2.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let mut decimal_count = 0;\n    let mut decimal_found = false;\n    for c in num.chars() {\n        if c == '.' {\n            if decimal_found {\n                return false;\n            }\n            decimal_found = true;\n        } else if !c.is_digit(10) {\n            return false;\n        } else if decimal_found {\n            decimal_count += 1;\n        }\n    }\n    decimal_count == 2\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1665510369,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let re = Regex::new(r\"^\\d+\\.\\d{2}$\").unwrap();\n    re.is_match(&num)\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1665510369,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `Regex`\n --> /tmp/tmpx12sjlz5.rs:3:14\n  |\n3 |     let re = Regex::new(r\"^\\d+\\.\\d{2}$\").unwrap();\n  |              ^^^^^ use of undeclared type `Regex`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check whether a given string is a decimal number with a precision of 2.\nfn is_decimal(num: String) -> bool {\n    let mut decimal_count = 0;\n    let mut decimal_found = false;\n    for c in num.chars() {\n        if c == '.' {\n            if decimal_found {\n                return false;\n            }\n            decimal_found = true;\n        } else if !c.is_numeric() {\n            return false;\n        } else if decimal_found {\n            decimal_count += 1;\n        }\n    }\n    decimal_count <= 2\n}\n\nfn main() {\n    let candidate = is_decimal;\n    assert_eq!(candidate(String::from(\"123.11\")), true);\n    assert_eq!(candidate(String::from(\"e666.86\")), false);\n    assert_eq!(candidate(String::from(\"3.124587\")), false);\n    assert_eq!(candidate(String::from(\"1.11\")), true);\n    assert_eq!(candidate(String::from(\"1.1.11\")), false);\n}\n",
      "timestamp": 1666122997,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}