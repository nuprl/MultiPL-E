{
  "name": "mbpp_572_two_unique_nums",
  "language": "rs",
  "prompt": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_572_two_unique_nums.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for num in nums {\n        if !result.contains(&num) {\n            result.push(num);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpkc8xk9wr.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    let mut result = Vec::new();\n    let mut i = 0;\n    while i < nums.len() {\n        result.push(nums[i]);\n        i += 2;\n    }\n    result\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 5]`,\n right: `[1, 4, 5]`', /tmp/tmph8ujhcwy.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut unique_nums: Vec<isize> = Vec::new();\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n    unique_nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpmclrntr5.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    let mut result = Vec::new();\n    let mut i = 0;\n    while i < nums.len() {\n        result.push(nums[i]);\n        i += 2;\n    }\n    result\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 5]`,\n right: `[1, 4, 5]`', /tmp/tmph8ujhcwy.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    let mut i = 0;\n    while i < nums.len() - 1 {\n        if nums[i] == nums[i + 1] {\n            nums.remove(i);\n        } else {\n            i += 1;\n        }\n    }\n    nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpfc0xil2k.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    nums.dedup();\n    nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp1acprg_j.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    nums.dedup();\n    nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp1acprg_j.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut unique_nums = Vec::new();\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n    unique_nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp1anmom2j.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut unique_nums = Vec::new();\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n    unique_nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp1anmom2j.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut unique_nums = Vec::new();\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n    unique_nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp1anmom2j.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    nums.dedup();\n    nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp1acprg_j.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut unique_nums: Vec<isize> = Vec::new();\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n    unique_nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpmclrntr5.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    let mut result = Vec::new();\n    let mut last = None;\n    for num in nums {\n        if last.is_none() || last.unwrap() != num {\n            result.push(num);\n            last = Some(num);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpxo_grpt2.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    nums.dedup();\n    nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp1acprg_j.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    let mut unique_nums = Vec::new();\n    let mut last_num = None;\n    for num in nums {\n        if last_num != Some(num) {\n            unique_nums.push(num);\n        }\n        last_num = Some(num);\n    }\n    unique_nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmph7goqlgu.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut unique_nums = HashSet::new();\n    for num in nums {\n        unique_nums.insert(num);\n    }\n    unique_nums.into_iter().collect()\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmptd69vlj7.rs:3:27\n  |\n3 |     let mut unique_nums = HashSet::new();\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums_set = nums.iter().collect::<std::collections::HashSet<_>>();\n    nums_set.drain().collect()\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "error[E0277]: a value of type `Vec<isize>` cannot be built from an iterator over elements of type `&isize`\n    --> /tmp/tmppudg06y_.rs:4:22\n     |\n4    |     nums_set.drain().collect()\n     |                      ^^^^^^^ value of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=&isize>`\n     |\n     = help: the trait `FromIterator<&isize>` is not implemented for `Vec<isize>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    nums.dedup();\n    nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp1acprg_j.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut unique_nums = Vec::new();\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n    unique_nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp1anmom2j.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut unique_nums = Vec::new();\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n    unique_nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp1anmom2j.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums_set: HashSet<isize> = HashSet::new();\n    for num in nums {\n        nums_set.insert(num);\n    }\n    nums_set.into_iter().collect()\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666124171,
      "stdout": "",
      "stderr": "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmphdcw6_u8.rs:3:23\n  |\n3 |     let mut nums_set: HashSet<isize> = HashSet::new();\n  |                       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmphdcw6_u8.rs:3:40\n  |\n3 |     let mut nums_set: HashSet<isize> = HashSet::new();\n  |                                        ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0412, E0433.\nFor more information about an error, try `rustc --explain E0412`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut unique_nums = Vec::new();\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n    unique_nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp1anmom2j.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    let mut result = Vec::new();\n    let mut i = 0;\n    while i < nums.len() {\n        result.push(nums[i]);\n        while i < nums.len() - 1 && nums[i] == nums[i + 1] {\n            i += 1;\n        }\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666124171,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpy8ofd2b2.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut unique_nums: Vec<isize> = Vec::new();\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n    unique_nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpmclrntr5.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums_set = HashSet::new();\n    for num in nums {\n        nums_set.insert(num);\n    }\n    nums_set.into_iter().collect()\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666124171,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmpemod5l6f.rs:3:24\n  |\n3 |     let mut nums_set = HashSet::new();\n  |                        ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut unique_nums: Vec<isize> = Vec::new();\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n    unique_nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpmclrntr5.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut unique_nums = Vec::new();\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n    unique_nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp1anmom2j.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut unique_nums = Vec::new();\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n    unique_nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp1anmom2j.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut unique_nums = Vec::new();\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n    unique_nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp1anmom2j.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    nums.dedup();\n    nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp1acprg_j.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut unique_nums = vec![];\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n    unique_nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666124171,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpkdyxxo04.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    nums.dedup();\n    nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp1acprg_j.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut unique = HashSet::new();\n    let mut result = Vec::new();\n    for num in nums {\n        if !unique.contains(&num) {\n            unique.insert(num);\n            result.push(num);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666124171,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmp1ekn0_7e.rs:3:22\n  |\n3 |     let mut unique = HashSet::new();\n  |                      ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut unique_nums = HashSet::new();\n    for num in nums {\n        unique_nums.insert(num);\n    }\n    unique_nums.into_iter().collect()\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmptd69vlj7.rs:3:27\n  |\n3 |     let mut unique_nums = HashSet::new();\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    for num in nums {\n        if !result.contains(&num) {\n            result.push(num);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666124171,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp022soa3x.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    let mut result = Vec::new();\n    let mut i = 0;\n    while i < nums.len() {\n        result.push(nums[i]);\n        while i < nums.len() - 1 && nums[i] == nums[i + 1] {\n            i += 1;\n        }\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666124171,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpy8ofd2b2.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut unique_nums: Vec<isize> = Vec::new();\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n    unique_nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpmclrntr5.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut unique_nums = Vec::new();\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n    unique_nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp1anmom2j.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    nums.dedup();\n    nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp1acprg_j.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut unique = HashSet::new();\n    let mut result = Vec::new();\n    for num in nums {\n        if !unique.contains(&num) {\n            unique.insert(num);\n            result.push(num);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666124171,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmp1ekn0_7e.rs:3:22\n  |\n3 |     let mut unique = HashSet::new();\n  |                      ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut unique_nums: Vec<isize> = Vec::new();\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n    unique_nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpmclrntr5.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut unique_nums = Vec::new();\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n    unique_nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp1anmom2j.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut unique_nums = vec![];\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n    unique_nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666124171,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpkdyxxo04.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for num in nums {\n        if !result.contains(&num) {\n            result.push(num);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpkc8xk9wr.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut unique_nums = Vec::new();\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n    unique_nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp1anmom2j.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    nums.dedup();\n    nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp1acprg_j.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    nums.dedup();\n    nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp1acprg_j.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut unique_nums = Vec::new();\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n    unique_nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp1anmom2j.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut unique_nums = Vec::new();\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n    unique_nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp1anmom2j.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    let mut result = vec![];\n    let mut i = 0;\n    while i < nums.len() {\n        result.push(nums[i]);\n        while i < nums.len() - 1 && nums[i] == nums[i + 1] {\n            i += 1;\n        }\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666124171,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpxstf0d3q.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut unique_nums = Vec::new();\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n    unique_nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp1anmom2j.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut unique_nums = Vec::new();\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n    unique_nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp1anmom2j.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    nums.dedup();\n    nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp1acprg_j.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    nums.dedup();\n    nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp1acprg_j.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut unique_nums = Vec::new();\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n    unique_nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp1anmom2j.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    let mut result = Vec::new();\n    for i in 0..nums.len() {\n        if i == 0 {\n            result.push(nums[i]);\n        } else if nums[i] != nums[i - 1] {\n            result.push(nums[i]);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666124171,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmph0p4anjl.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    nums.dedup();\n    nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp1acprg_j.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut unique_nums: Vec<isize> = Vec::new();\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n    unique_nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpmclrntr5.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut unique_nums = Vec::new();\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n    unique_nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp1anmom2j.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    nums.dedup();\n    nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp1acprg_j.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut seen = HashSet::new();\n    let mut unique = Vec::new();\n\n    for num in nums {\n        if !seen.contains(&num) {\n            seen.insert(num);\n            unique.push(num);\n        }\n    }\n\n    unique\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666124171,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmpdzxe8yxm.rs:3:20\n  |\n3 |     let mut seen = HashSet::new();\n  |                    ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums_set: HashSet<isize> = HashSet::new();\n    let mut unique_nums: Vec<isize> = Vec::new();\n\n    for num in nums {\n        if !nums_set.contains(&num) {\n            nums_set.insert(num);\n            unique_nums.push(num);\n        }\n    }\n\n    unique_nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666124171,
      "stdout": "",
      "stderr": "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmptb601f4u.rs:3:23\n  |\n3 |     let mut nums_set: HashSet<isize> = HashSet::new();\n  |                       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmptb601f4u.rs:3:40\n  |\n3 |     let mut nums_set: HashSet<isize> = HashSet::new();\n  |                                        ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0412, E0433.\nFor more information about an error, try `rustc --explain E0412`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    let mut result = Vec::new();\n    let mut i = 0;\n    while i < nums.len() {\n        result.push(nums[i]);\n        i += 2;\n    }\n    result\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 5]`,\n right: `[1, 4, 5]`', /tmp/tmph8ujhcwy.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut unique_nums: Vec<isize> = Vec::new();\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n    unique_nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpmclrntr5.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    nums.dedup();\n    nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp1acprg_j.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    let mut result = Vec::new();\n    let mut last_num = nums[0];\n    result.push(last_num);\n    for num in nums {\n        if num != last_num {\n            result.push(num);\n            last_num = num;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666124171,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmph1ynfhc2.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    let mut unique_nums = Vec::new();\n    let mut last_num = None;\n    for num in nums {\n        if last_num.is_none() || last_num.unwrap() != num {\n            unique_nums.push(num);\n            last_num = Some(num);\n        }\n    }\n    unique_nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666124171,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpnp2n7mbc.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums: Vec<isize> = nums.into_iter().collect();\n    nums.sort();\n    nums.dedup();\n    nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666124171,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmplkz438lm.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut unique_nums = Vec::new();\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n    unique_nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp1anmom2j.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut unique_nums = Vec::new();\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n    unique_nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp1anmom2j.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut unique_nums = Vec::new();\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n    unique_nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp1anmom2j.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut unique_nums = Vec::new();\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n    unique_nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp1anmom2j.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut unique_nums: Vec<isize> = Vec::new();\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n    unique_nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpmclrntr5.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut unique_nums = Vec::new();\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n    unique_nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp1anmom2j.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut unique_nums = Vec::new();\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n    unique_nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp1anmom2j.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut unique_nums = Vec::new();\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n    unique_nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp1anmom2j.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut unique_nums = Vec::new();\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n    unique_nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp1anmom2j.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut unique_nums = Vec::new();\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n    unique_nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp1anmom2j.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut unique_nums = Vec::new();\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n    unique_nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp1anmom2j.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut unique_nums: Vec<isize> = Vec::new();\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n    unique_nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpmclrntr5.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    nums.dedup();\n    nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp1acprg_j.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    nums.dedup();\n    nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp1acprg_j.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    let mut result = Vec::new();\n    let mut i = 0;\n    while i < nums.len() {\n        result.push(nums[i]);\n        while i + 1 < nums.len() && nums[i] == nums[i + 1] {\n            i += 1;\n        }\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666124171,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp_44bb5cr.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut unique_nums: Vec<isize> = Vec::new();\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n    unique_nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpmclrntr5.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    let mut result = Vec::new();\n    let mut i = 0;\n    while i < nums.len() {\n        result.push(nums[i]);\n        while i < nums.len() && nums[i] == nums[i + 1] {\n            i += 1;\n        }\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666124171,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 7 but the index is 7', /tmp/tmputrg9nn7.rs:9:44\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut unique_nums: Vec<isize> = Vec::new();\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n    unique_nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpmclrntr5.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    nums.dedup();\n    nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp1acprg_j.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut unique_nums = Vec::new();\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n    unique_nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp1anmom2j.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    let mut result = Vec::new();\n    let mut last = None;\n    for num in nums {\n        if last != Some(num) {\n            result.push(num);\n            last = Some(num);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666124171,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpobo98fpy.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut unique_nums: Vec<isize> = Vec::new();\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n    unique_nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpmclrntr5.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut unique = Vec::new();\n    for num in nums {\n        if !unique.contains(&num) {\n            unique.push(num);\n        }\n    }\n    unique\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666124171,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmppudh13z_.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    nums.dedup();\n    nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp1acprg_j.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut unique_nums = Vec::new();\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n    unique_nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp1anmom2j.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    nums.dedup();\n    nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp1acprg_j.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut unique_nums = Vec::new();\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n    unique_nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp1anmom2j.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    nums.dedup();\n    nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp1acprg_j.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut unique_nums = Vec::new();\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n    unique_nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp1anmom2j.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    nums.dedup();\n    nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp1acprg_j.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    let mut result = vec![];\n    let mut i = 0;\n    while i < nums.len() {\n        result.push(nums[i]);\n        while i < nums.len() - 1 && nums[i] == nums[i + 1] {\n            i += 1;\n        }\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666124171,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpxstf0d3q.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut unique_nums = Vec::new();\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n    unique_nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp1anmom2j.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums_set = HashSet::new();\n    for num in nums {\n        nums_set.insert(num);\n    }\n    nums_set.into_iter().collect()\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666124171,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmpemod5l6f.rs:3:24\n  |\n3 |     let mut nums_set = HashSet::new();\n  |                        ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    nums.dedup();\n    nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp1acprg_j.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut unique_nums: Vec<isize> = Vec::new();\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n    unique_nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpmclrntr5.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    let mut result = Vec::new();\n    let mut i = 0;\n    while i < nums.len() {\n        result.push(nums[i]);\n        i += 2;\n    }\n    result\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 5]`,\n right: `[1, 4, 5]`', /tmp/tmph8ujhcwy.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    nums.dedup();\n    nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp1acprg_j.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut unique_nums = Vec::new();\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n    unique_nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp1anmom2j.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut seen = HashSet::new();\n    for num in nums {\n        if !seen.contains(&num) {\n            result.push(num);\n            seen.insert(num);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666124171,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmpiuidjvpl.rs:4:20\n  |\n4 |     let mut seen = HashSet::new();\n  |                    ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    let mut unique_nums = Vec::new();\n    let mut i = 0;\n    while i < nums.len() {\n        unique_nums.push(nums[i]);\n        i += 2;\n    }\n    unique_nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666124171,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpmn4lkp1q.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    nums.dedup();\n    nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp1acprg_j.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for num in nums {\n        if !result.contains(&num) {\n            result.push(num);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpkc8xk9wr.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut unique_nums = Vec::new();\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n    unique_nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp1anmom2j.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut unique_nums = HashSet::new();\n    for num in nums {\n        unique_nums.insert(num);\n    }\n    unique_nums.into_iter().collect()\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmptd69vlj7.rs:3:27\n  |\n3 |     let mut unique_nums = HashSet::new();\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums_set = HashSet::new();\n    for num in nums {\n        nums_set.insert(num);\n    }\n    nums_set.into_iter().collect()\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666124171,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmpemod5l6f.rs:3:24\n  |\n3 |     let mut nums_set = HashSet::new();\n  |                        ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    let mut result = Vec::new();\n    let mut i = 0;\n    while i < nums.len() {\n        result.push(nums[i]);\n        while i + 1 < nums.len() && nums[i] == nums[i + 1] {\n            i += 1;\n        }\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666124171,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp_44bb5cr.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    nums.dedup();\n    nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp1acprg_j.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut unique_nums = Vec::new();\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n    unique_nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp1anmom2j.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums_set: HashSet<isize> = HashSet::new();\n    let mut result: Vec<isize> = Vec::new();\n    for num in nums {\n        if nums_set.contains(&num) {\n            result.push(num);\n        } else {\n            nums_set.insert(num);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666124171,
      "stdout": "",
      "stderr": "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmpozhhk9n_.rs:3:23\n  |\n3 |     let mut nums_set: HashSet<isize> = HashSet::new();\n  |                       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmpozhhk9n_.rs:3:40\n  |\n3 |     let mut nums_set: HashSet<isize> = HashSet::new();\n  |                                        ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0412, E0433.\nFor more information about an error, try `rustc --explain E0412`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    nums.dedup();\n    nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp1acprg_j.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut unique_nums: Vec<isize> = Vec::new();\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n    unique_nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpmclrntr5.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    nums.dedup();\n    nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp1acprg_j.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut unique_nums = Vec::new();\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n    unique_nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp1anmom2j.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    let mut i = 0;\n    while i < nums.len() - 1 {\n        if nums[i] == nums[i + 1] {\n            nums.remove(i);\n        } else {\n            i += 1;\n        }\n    }\n    nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpfc0xil2k.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut unique_nums = Vec::new();\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n    unique_nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp1anmom2j.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    let mut result = Vec::new();\n    let mut last = nums[0];\n    result.push(last);\n    for i in 1..nums.len() {\n        if nums[i] != last {\n            result.push(nums[i]);\n            last = nums[i];\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666124171,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmperpr34iz.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut unique_nums: Vec<isize> = Vec::new();\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n    unique_nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpmclrntr5.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    nums.dedup();\n    nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp1acprg_j.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums_set = HashSet::new();\n    for num in nums {\n        nums_set.insert(num);\n    }\n    nums_set.into_iter().collect()\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666124171,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmpemod5l6f.rs:3:24\n  |\n3 |     let mut nums_set = HashSet::new();\n  |                        ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut unique = HashSet::new();\n    let mut result = Vec::new();\n    for num in nums {\n        if !unique.contains(&num) {\n            result.push(num);\n            unique.insert(num);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666124171,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmp6_kf5eii.rs:3:22\n  |\n3 |     let mut unique = HashSet::new();\n  |                      ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for num in nums {\n        if !result.contains(&num) {\n            result.push(num);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpkc8xk9wr.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut unique_nums: Vec<isize> = Vec::new();\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n    unique_nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpmclrntr5.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut unique_nums: Vec<isize> = Vec::new();\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n    unique_nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpmclrntr5.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut unique_nums = Vec::new();\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n    unique_nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp1anmom2j.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    nums.dedup();\n    nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp1acprg_j.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut unique_nums = Vec::new();\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n    unique_nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp1anmom2j.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut unique_nums: Vec<isize> = Vec::new();\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n    unique_nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpmclrntr5.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut set = HashSet::new();\n    for num in nums {\n        if !set.contains(&num) {\n            result.push(num);\n            set.insert(num);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666124171,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmpow0__ese.rs:4:19\n  |\n4 |     let mut set = HashSet::new();\n  |                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut unique_nums = Vec::new();\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n    unique_nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp1anmom2j.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut unique_nums: Vec<isize> = vec![];\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n    unique_nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666124171,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp8p5hb3ds.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    nums.dedup();\n    nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp1acprg_j.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut unique_nums: Vec<isize> = Vec::new();\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n    unique_nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpmclrntr5.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    nums.dedup();\n    nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp1acprg_j.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut unique_nums = Vec::new();\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n    unique_nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp1anmom2j.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut unique_nums = Vec::new();\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n    unique_nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp1anmom2j.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut unique_nums = Vec::new();\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n    unique_nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp1anmom2j.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut unique_nums = Vec::new();\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n    unique_nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp1anmom2j.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut unique_nums = Vec::new();\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n    unique_nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp1anmom2j.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut unique_nums = Vec::new();\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n    unique_nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp1anmom2j.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut unique_nums = Vec::new();\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n    unique_nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp1anmom2j.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    for num in nums {\n        if !result.contains(&num) {\n            result.push(num);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666124171,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp022soa3x.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    let mut i = 0;\n    while i < nums.len() - 1 {\n        if nums[i] == nums[i + 1] {\n            nums.remove(i);\n        } else {\n            i += 1;\n        }\n    }\n    nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpfc0xil2k.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut unique_nums = Vec::new();\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n    unique_nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp1anmom2j.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut unique_nums = Vec::new();\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n    unique_nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp1anmom2j.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    let mut i = 0;\n    let mut j = 1;\n    while j < nums.len() {\n        if nums[i] != nums[j] {\n            i += 1;\n            nums[i] = nums[j];\n        }\n        j += 1;\n    }\n    nums.truncate(i + 1);\n    nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666124171,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpura8ckkp.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut unique_nums = Vec::new();\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n    unique_nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp1anmom2j.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut unique_nums = Vec::new();\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n    unique_nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp1anmom2j.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut unique = vec![];\n    for num in nums {\n        if !unique.contains(&num) {\n            unique.push(num);\n        }\n    }\n    unique\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666124171,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp1eodnh4k.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut unique_nums = Vec::new();\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n    unique_nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp1anmom2j.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    nums.dedup();\n    nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp1acprg_j.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut unique_nums: Vec<isize> = Vec::new();\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n    unique_nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpmclrntr5.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums_set = HashSet::new();\n    for num in nums {\n        nums_set.insert(num);\n    }\n    nums_set.into_iter().collect()\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666124171,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmpemod5l6f.rs:3:24\n  |\n3 |     let mut nums_set = HashSet::new();\n  |                        ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut unique_nums = Vec::new();\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n    unique_nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp1anmom2j.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    let mut i = 0;\n    while i < nums.len() - 1 {\n        if nums[i] == nums[i + 1] {\n            nums.remove(i);\n        } else {\n            i += 1;\n        }\n    }\n    nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpfc0xil2k.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    nums.dedup();\n    nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp1acprg_j.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut unique_nums = Vec::new();\n    let mut nums_set = HashSet::new();\n    for num in nums {\n        if !nums_set.contains(&num) {\n            unique_nums.push(num);\n            nums_set.insert(num);\n        }\n    }\n    unique_nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666124171,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmptoq_mdmh.rs:4:24\n  |\n4 |     let mut nums_set = HashSet::new();\n  |                        ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    let mut result = Vec::new();\n    let mut i = 0;\n    while i < nums.len() {\n        result.push(nums[i]);\n        i += 2;\n    }\n    result\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 5]`,\n right: `[1, 4, 5]`', /tmp/tmph8ujhcwy.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut unique_nums = Vec::new();\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n    unique_nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp1anmom2j.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut unique_nums = Vec::new();\n\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n\n    unique_nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666124171,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpbxlw2my8.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut unique_nums: Vec<isize> = Vec::new();\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n    unique_nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpmclrntr5.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    let mut result = Vec::new();\n    let mut i = 0;\n    while i < nums.len() {\n        result.push(nums[i]);\n        i += 2;\n    }\n    result\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 5]`,\n right: `[1, 4, 5]`', /tmp/tmph8ujhcwy.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums_set: HashSet<isize> = HashSet::new();\n    let mut result: Vec<isize> = Vec::new();\n    for num in nums {\n        if nums_set.contains(&num) {\n            result.push(num);\n        } else {\n            nums_set.insert(num);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666124171,
      "stdout": "",
      "stderr": "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmpozhhk9n_.rs:3:23\n  |\n3 |     let mut nums_set: HashSet<isize> = HashSet::new();\n  |                       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmpozhhk9n_.rs:3:40\n  |\n3 |     let mut nums_set: HashSet<isize> = HashSet::new();\n  |                                        ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0412, E0433.\nFor more information about an error, try `rustc --explain E0412`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut unique_nums: Vec<isize> = Vec::new();\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n    unique_nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpmclrntr5.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut unique_nums = Vec::new();\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n    unique_nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp1anmom2j.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    nums.dedup();\n    nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp1acprg_j.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    nums.dedup();\n    nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp1acprg_j.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut unique_nums = Vec::new();\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n    unique_nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp1anmom2j.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut unique_nums: Vec<isize> = Vec::new();\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n    unique_nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpmclrntr5.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut unique_nums = vec![];\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n    unique_nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666124171,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpkdyxxo04.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut seen = HashSet::new();\n\n    for num in nums {\n        if !seen.contains(&num) {\n            result.push(num);\n            seen.insert(num);\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666124171,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmp9h4vgw1b.rs:4:20\n  |\n4 |     let mut seen = HashSet::new();\n  |                    ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut unique_nums = Vec::new();\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n    unique_nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp1anmom2j.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut unique_nums = Vec::new();\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n    unique_nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp1anmom2j.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    let mut unique = vec![];\n    for num in nums {\n        if unique.is_empty() || unique.last().unwrap() != &num {\n            unique.push(num);\n        }\n    }\n    unique\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666124171,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpxcthng4o.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut unique_nums = Vec::new();\n\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n\n    unique_nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666124171,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpbxlw2my8.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut unique_nums = Vec::new();\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n    unique_nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp1anmom2j.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut unique_nums = Vec::new();\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n    unique_nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp1anmom2j.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut unique_nums = Vec::new();\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n    unique_nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp1anmom2j.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut unique_nums = Vec::new();\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n    unique_nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp1anmom2j.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut unique_nums = Vec::new();\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n    unique_nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp1anmom2j.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut unique_nums = Vec::new();\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n    unique_nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp1anmom2j.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut seen = HashSet::new();\n    let mut unique = Vec::new();\n    for num in nums {\n        if !seen.contains(&num) {\n            seen.insert(num);\n            unique.push(num);\n        }\n    }\n    unique\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666124171,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmpej19uqzj.rs:3:20\n  |\n3 |     let mut seen = HashSet::new();\n  |                    ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    nums.dedup();\n    nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp1acprg_j.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    nums.dedup();\n    nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp1acprg_j.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    let mut result = Vec::new();\n    let mut i = 0;\n    while i < nums.len() {\n        if i == nums.len() - 1 {\n            result.push(nums[i]);\n            break;\n        }\n        if nums[i] != nums[i + 1] {\n            result.push(nums[i]);\n        }\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666124171,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp6yckmzz9.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut unique_nums = Vec::new();\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n    unique_nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp1anmom2j.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    nums.dedup();\n    nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp1acprg_j.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    let mut i = 0;\n    while i < nums.len() - 1 {\n        if nums[i] == nums[i + 1] {\n            nums.remove(i);\n        } else {\n            i += 1;\n        }\n    }\n    nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmpfc0xil2k.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut unique_nums = Vec::new();\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n    unique_nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp1anmom2j.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut unique_nums = Vec::new();\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n    unique_nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp1anmom2j.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    nums.dedup();\n    nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp1acprg_j.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut nums = nums;\n    nums.sort();\n    nums.dedup();\n    nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp1acprg_j.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to remove duplicate numbers from a given number of lists.\nfn two_unique_nums(nums: Vec<isize>) -> Vec<isize> {\n    let mut unique_nums = Vec::new();\n    for num in nums {\n        if !unique_nums.contains(&num) {\n            unique_nums.push(num);\n        }\n    }\n    unique_nums\n}\n\nfn main() {\n    let candidate = two_unique_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 2, 3, 4, 5]), vec![1, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 2, 4, 5]), vec![1, 3, 4, 5]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665509736,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5]`,\n right: `[1, 4, 5]`', /tmp/tmp1anmom2j.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    }
  ]
}