{
  "name": "mbpp_461_upper_ctr",
  "language": "rs",
  "prompt": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_461_upper_ctr.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpi4waz50f.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr: isize = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmphfnvy3tr.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr: isize = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmphfnvy3tr.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    str.chars().filter(|c| c.is_uppercase()).count() as isize\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmprro5if_l.rs:8:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    str.chars().filter(|c| c.is_uppercase()).count() as isize\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmprro5if_l.rs:8:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpi4waz50f.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpi4waz50f.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpi4waz50f.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    str.chars().filter(|c| c.is_uppercase()).count() as isize\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmprro5if_l.rs:8:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpi4waz50f.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpi4waz50f.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for ch in str.chars() {\n        if ch.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmplkkih79n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr: isize = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmphfnvy3tr.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    str.chars().filter(|c| c.is_uppercase()).count() as isize\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmprro5if_l.rs:8:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpi4waz50f.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpi4waz50f.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpi4waz50f.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpi4waz50f.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpi4waz50f.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpi4waz50f.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpi4waz50f.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    str.chars().filter(|&c| c.is_uppercase()).count() as isize\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1666123481,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpbz89xsqy.rs:8:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    str.chars().filter(|c| c.is_uppercase()).count() as isize\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmprro5if_l.rs:8:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpi4waz50f.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpi4waz50f.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpi4waz50f.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpi4waz50f.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr: isize = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmphfnvy3tr.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpi4waz50f.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr: isize = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmphfnvy3tr.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpi4waz50f.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    str.chars().filter(|c| c.is_uppercase()).count() as isize\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmprro5if_l.rs:8:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpi4waz50f.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpi4waz50f.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpi4waz50f.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    return ctr;\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1666123481,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp3e9dff20.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpi4waz50f.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpi4waz50f.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    str.chars().filter(|c| c.is_uppercase()).count() as isize\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmprro5if_l.rs:8:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    str.chars().filter(|c| c.is_uppercase()).count() as isize\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmprro5if_l.rs:8:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpi4waz50f.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpi4waz50f.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpi4waz50f.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for ch in str.chars() {\n        if ch.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmplkkih79n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpi4waz50f.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for ch in str.chars() {\n        if ch.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmplkkih79n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpi4waz50f.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpi4waz50f.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpi4waz50f.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr: isize = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmphfnvy3tr.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpi4waz50f.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpi4waz50f.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpi4waz50f.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpi4waz50f.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpi4waz50f.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpi4waz50f.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpi4waz50f.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpi4waz50f.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpi4waz50f.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr: isize = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmphfnvy3tr.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpi4waz50f.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpi4waz50f.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpi4waz50f.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpi4waz50f.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpi4waz50f.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    str.chars().filter(|c| c.is_uppercase()).count() as isize\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmprro5if_l.rs:8:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpi4waz50f.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    str.chars().filter(|c| c.is_uppercase()).count() as isize\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmprro5if_l.rs:8:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpi4waz50f.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpi4waz50f.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpi4waz50f.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpi4waz50f.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    str.chars().filter(|c| c.is_uppercase()).count() as isize\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmprro5if_l.rs:8:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for ch in str.chars() {\n        if ch.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmplkkih79n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpi4waz50f.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpi4waz50f.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpi4waz50f.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    str.chars().filter(|x| x.is_uppercase()).count() as isize\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1666123481,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpfp8xmj_w.rs:8:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpi4waz50f.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut count = 0;\n    for ch in str.chars() {\n        if ch.is_uppercase() {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1666123481,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp4wavipvz.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpi4waz50f.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpi4waz50f.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpi4waz50f.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr: isize = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmphfnvy3tr.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpi4waz50f.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpi4waz50f.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpi4waz50f.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpi4waz50f.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpi4waz50f.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr: isize = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmphfnvy3tr.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    str.chars().filter(|c| c.is_uppercase()).count() as isize\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmprro5if_l.rs:8:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpi4waz50f.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for ch in str.chars() {\n        if ch.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmplkkih79n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpi4waz50f.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpi4waz50f.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    str.chars().filter(|c| c.is_uppercase()).count() as isize\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmprro5if_l.rs:8:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpi4waz50f.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpi4waz50f.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpi4waz50f.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpi4waz50f.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpi4waz50f.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpi4waz50f.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpi4waz50f.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpi4waz50f.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpi4waz50f.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpi4waz50f.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpi4waz50f.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpi4waz50f.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpi4waz50f.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr: isize = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmphfnvy3tr.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpi4waz50f.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    str.chars().filter(|c| c.is_uppercase()).count() as isize\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmprro5if_l.rs:8:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpi4waz50f.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    str.chars().filter(|c| c.is_uppercase()).count() as isize\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmprro5if_l.rs:8:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpi4waz50f.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    str.chars().filter(|c| c.is_uppercase()).count() as isize\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmprro5if_l.rs:8:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpi4waz50f.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpi4waz50f.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpi4waz50f.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpi4waz50f.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpi4waz50f.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpi4waz50f.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpi4waz50f.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpi4waz50f.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr: isize = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmphfnvy3tr.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpi4waz50f.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpi4waz50f.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr: isize = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmphfnvy3tr.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut count = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1666123481,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp5_wfy83n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr: isize = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmphfnvy3tr.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr: isize = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmphfnvy3tr.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpi4waz50f.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpi4waz50f.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpi4waz50f.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpi4waz50f.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpi4waz50f.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    str.chars().filter(|c| c.is_uppercase()).count() as isize\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmprro5if_l.rs:8:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    return ctr;\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1666123481,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp3e9dff20.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpi4waz50f.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpi4waz50f.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpi4waz50f.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpi4waz50f.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpi4waz50f.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut count = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1666123481,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp5_wfy83n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for ch in str.chars() {\n        if ch.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmplkkih79n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpi4waz50f.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr: isize = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmphfnvy3tr.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    str.chars().filter(|c| c.is_uppercase()).count() as isize\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmprro5if_l.rs:8:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpi4waz50f.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpi4waz50f.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr: isize = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmphfnvy3tr.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpi4waz50f.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpi4waz50f.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpi4waz50f.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpi4waz50f.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpi4waz50f.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpi4waz50f.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr: isize = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmphfnvy3tr.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpi4waz50f.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpi4waz50f.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpi4waz50f.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpi4waz50f.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpi4waz50f.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpi4waz50f.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpi4waz50f.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpi4waz50f.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpi4waz50f.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut count = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1666123481,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp5_wfy83n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpi4waz50f.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr: isize = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmphfnvy3tr.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpi4waz50f.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut count = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1666123481,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp5_wfy83n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpi4waz50f.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr: isize = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmphfnvy3tr.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpi4waz50f.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpi4waz50f.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpi4waz50f.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpi4waz50f.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr: isize = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmphfnvy3tr.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpi4waz50f.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpi4waz50f.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr: isize = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmphfnvy3tr.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpi4waz50f.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpi4waz50f.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut count = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1666123481,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmp5_wfy83n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpi4waz50f.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    str.chars().filter(|&c| c.is_uppercase()).count() as isize\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1666123481,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpbz89xsqy.rs:8:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    str.chars().filter(|c| c.is_uppercase()).count() as isize\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmprro5if_l.rs:8:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpi4waz50f.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpi4waz50f.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr: isize = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmphfnvy3tr.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpi4waz50f.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpi4waz50f.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpi4waz50f.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpi4waz50f.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpi4waz50f.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpi4waz50f.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for c in str.chars() {\n        if c.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmpi4waz50f.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    str.chars().filter(|c| c.is_uppercase()).count() as isize\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510490,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmprro5if_l.rs:8:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to count the upper case characters in a given string.\nfn upper_ctr(str: String) -> isize {\n    let mut ctr = 0;\n    for ch in str.chars() {\n        if ch.is_uppercase() {\n            ctr += 1;\n        }\n    }\n    ctr\n}\n\nfn main() {\n    let candidate = upper_ctr;\n    assert_eq!(candidate(String::from(\"PYthon\")), 1);\n    assert_eq!(candidate(String::from(\"BigData\")), 1);\n    assert_eq!(candidate(String::from(\"program\")), 0);\n}\n",
      "timestamp": 1665510489,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `1`', /tmp/tmplkkih79n.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    }
  ]
}