{
  "name": "mbpp_16_text_lowercase_underscore",
  "language": "rs",
  "prompt": "/// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nfn text_lowercase_underscore(text: String) -> bool {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_16_text_lowercase_underscore.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\nfn main() {\n    let candidate = text_lowercase_underscore;\n    assert_eq!(candidate(String::from(\"aab_cbbbc\")), true);\n    assert_eq!(candidate(String::from(\"aab_Abbbc\")), false);\n    assert_eq!(candidate(String::from(\"Aaab_abbbc\")), false);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    let mut last_char = '_';\n    for c in text.chars() {\n        if c.is_lowercase() && last_char == '_' {\n            last_char = c;\n        } else if !c.is_lowercase() && last_char != '_' {\n            return false;\n        }\n    }\n    return true;",
    "    let mut result = false;\n    let mut last_char = '_';\n    for c in text.chars() {\n        if c.is_lowercase() && last_char == '_' {\n            result = true;\n        } else if c.is_lowercase() && last_char.is_lowercase() {\n            result = true;\n        } else if c == '_' && last_char.is_lowercase() {\n            result = true;\n        } else {\n            result = false;\n            break;\n        }\n        last_char = c;\n    }\n    result",
    "    let re = Regex::new(r\"^[a-z_]+$\").unwrap();\n    re.is_match(&text)",
    "    let mut result = false;\n    let mut text_vec: Vec<char> = text.chars().collect();\n    let mut underscore_count = 0;\n    let mut lowercase_count = 0;\n    for i in 0..text_vec.len() {\n        if text_vec[i] == '_' {\n            underscore_count += 1;\n        }\n        if text_vec[i].is_lowercase() {\n            lowercase_count += 1;\n        }\n    }\n    if underscore_count == lowercase_count - 1 {\n        result = true;\n    }\n    result",
    "    let re = Regex::new(r\"[a-z]+_[a-z]+\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"[a-z]+_[a-z]+\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"[a-z]+_[a-z]+\").unwrap();\n    re.is_match(&text)",
    "    let mut is_lowercase = false;\n    let mut is_underscore = false;\n    for c in text.chars() {\n        if c.is_lowercase() {\n            is_lowercase = true;\n        } else if c == '_' {\n            is_underscore = true;\n        } else {\n            return false;\n        }\n    }\n    is_lowercase && is_underscore",
    "    let mut result = false;\n    let mut last_char = '_';\n    for c in text.chars() {\n        if c.is_lowercase() && last_char == '_' {\n            result = true;\n        } else if !c.is_lowercase() && last_char == '_' {\n            result = false;\n        }\n        last_char = c;\n    }\n    result",
    "    let mut result = false;\n    for c in text.chars() {\n        if c.is_lowercase() || c == '_' {\n            result = true;\n        } else {\n            result = false;\n            break;\n        }\n    }\n    result",
    "    let re = Regex::new(r\"^[a-z]+(_[a-z]+)*$\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"[a-z]+_[a-z]+\").unwrap();\n    re.is_match(&text)",
    "    let re = Regex::new(r\"[a-z]+_[a-z]+\").unwrap();\n    re.is_match(&text)",
    "    let mut result = false;\n    let mut last_char = '_';\n    for c in text.chars() {\n        if (c.is_lowercase() || c == '_') && last_char.is_lowercase() {\n            result = true;\n            break;\n        }\n        last_char = c;\n    }\n    result",
    "    let re = Regex::new(r\"[a-z]+_[a-z]+\").unwrap();\n    re.is_match(&text)",
    "    let mut result = false;\n    let mut last_char = '_';\n    for c in text.chars() {\n        if c.is_lowercase() && last_char == '_' {\n            result = true;\n            break;\n        }\n        last_char = c;\n    }\n    result",
    "    let mut result = false;\n    let mut text_iter = text.chars();\n    let mut prev_char = text_iter.next();\n    for c in text_iter {\n        if c == '_' {\n            if prev_char.unwrap().is_lowercase() {\n                result = true;\n            } else {\n                result = false;\n                break;\n            }\n        }\n        prev_char = Some(c);\n    }\n    result",
    "    let mut result = false;\n    let mut prev_char = '_';\n    for c in text.chars() {\n        if c.is_lowercase() && prev_char == '_' {\n            result = true;\n        } else if !c.is_lowercase() && prev_char != '_' {\n            result = false;\n        }\n        prev_char = c;\n    }\n    result",
    "    let mut result = false;\n    let mut prev_char = '_';\n    for c in text.chars() {\n        if c.is_lowercase() && prev_char == '_' {\n            result = true;\n        } else if c.is_lowercase() && prev_char != '_' {\n            result = false;\n        }\n        prev_char = c;\n    }\n    result",
    "    let mut previous_char = ' ';\n    for c in text.chars() {\n        if c.is_lowercase() {\n            if previous_char == '_' {\n                return true;\n            }\n        }\n        previous_char = c;\n    }\n    false"
  ]
}