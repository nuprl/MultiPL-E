{
  "name": "mbpp_18_remove_dirty_chars",
  "language": "rs",
  "prompt": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_18_remove_dirty_chars.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    for c in string.chars() {\n        if !second_string.contains(c) {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1665510620,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    let mut dirty_chars = HashSet::new();\n    for c in second_string.chars() {\n        dirty_chars.insert(c);\n    }\n    for c in string.chars() {\n        if !dirty_chars.contains(&c) {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1665510620,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmp8pw8drj3.rs:4:27\n  |\n4 |     let mut dirty_chars = HashSet::new();\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    for c in string.chars() {\n        if !second_string.contains(c) {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1665510620,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    let mut dirty_chars = HashSet::new();\n    for c in second_string.chars() {\n        dirty_chars.insert(c);\n    }\n    for c in string.chars() {\n        if !dirty_chars.contains(&c) {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1665510620,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmp8pw8drj3.rs:4:27\n  |\n4 |     let mut dirty_chars = HashSet::new();\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    let mut second_string = second_string.chars().collect::<Vec<char>>();\n    for c in string.chars() {\n        if !second_string.contains(&c) {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1665510621,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    let mut dirty_chars = HashSet::new();\n\n    for c in second_string.chars() {\n        dirty_chars.insert(c);\n    }\n\n    for c in string.chars() {\n        if !dirty_chars.contains(&c) {\n            result.push(c);\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1665510620,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmp9syf_kwh.rs:4:27\n  |\n4 |     let mut dirty_chars = HashSet::new();\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    let mut dirty_chars = HashSet::new();\n    for c in second_string.chars() {\n        dirty_chars.insert(c);\n    }\n    for c in string.chars() {\n        if !dirty_chars.contains(&c) {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1665510620,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmp8pw8drj3.rs:4:27\n  |\n4 |     let mut dirty_chars = HashSet::new();\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    let mut dirty_chars = HashSet::new();\n\n    for c in second_string.chars() {\n        dirty_chars.insert(c);\n    }\n\n    for c in string.chars() {\n        if !dirty_chars.contains(&c) {\n            result.push(c);\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1665510620,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmp9syf_kwh.rs:4:27\n  |\n4 |     let mut dirty_chars = HashSet::new();\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    let mut dirty_chars = HashSet::new();\n    for c in second_string.chars() {\n        dirty_chars.insert(c);\n    }\n    for c in string.chars() {\n        if !dirty_chars.contains(&c) {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1665510620,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmp8pw8drj3.rs:4:27\n  |\n4 |     let mut dirty_chars = HashSet::new();\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    let mut dirty_chars = HashSet::new();\n    for c in second_string.chars() {\n        dirty_chars.insert(c);\n    }\n    for c in string.chars() {\n        if !dirty_chars.contains(&c) {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1665510620,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmp8pw8drj3.rs:4:27\n  |\n4 |     let mut dirty_chars = HashSet::new();\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    let mut dirty_chars = HashSet::new();\n    for c in second_string.chars() {\n        dirty_chars.insert(c);\n    }\n\n    for c in string.chars() {\n        if !dirty_chars.contains(&c) {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1665510620,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmpnxiw9xcx.rs:4:27\n  |\n4 |     let mut dirty_chars = HashSet::new();\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    let mut second_string_chars = second_string.chars();\n    let mut second_string_chars_set = HashSet::new();\n    while let Some(c) = second_string_chars.next() {\n        second_string_chars_set.insert(c);\n    }\n    let mut string_chars = string.chars();\n    while let Some(c) = string_chars.next() {\n        if !second_string_chars_set.contains(&c) {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1665510620,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmpzqyyuhsy.rs:5:39\n  |\n5 |     let mut second_string_chars_set = HashSet::new();\n  |                                       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    let mut dirty_chars = HashSet::new();\n    for c in second_string.chars() {\n        dirty_chars.insert(c);\n    }\n    for c in string.chars() {\n        if !dirty_chars.contains(&c) {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1665510620,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmp8pw8drj3.rs:4:27\n  |\n4 |     let mut dirty_chars = HashSet::new();\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut clean_string = String::new();\n    let mut dirty_chars = HashSet::new();\n    for char in second_string.chars() {\n        dirty_chars.insert(char);\n    }\n    for char in string.chars() {\n        if !dirty_chars.contains(&char) {\n            clean_string.push(char);\n        }\n    }\n    clean_string\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1665510620,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmptak0jik7.rs:4:27\n  |\n4 |     let mut dirty_chars = HashSet::new();\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    let mut dirty_chars = HashSet::new();\n    for c in second_string.chars() {\n        dirty_chars.insert(c);\n    }\n    for c in string.chars() {\n        if !dirty_chars.contains(&c) {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1665510620,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmp8pw8drj3.rs:4:27\n  |\n4 |     let mut dirty_chars = HashSet::new();\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    let mut dirty_chars = HashSet::new();\n    for c in second_string.chars() {\n        dirty_chars.insert(c);\n    }\n    for c in string.chars() {\n        if !dirty_chars.contains(&c) {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1665510620,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmp8pw8drj3.rs:4:27\n  |\n4 |     let mut dirty_chars = HashSet::new();\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    for c in string.chars() {\n        if !second_string.contains(c) {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1665510620,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    let mut dirty_chars = HashSet::new();\n    for c in second_string.chars() {\n        dirty_chars.insert(c);\n    }\n    for c in string.chars() {\n        if !dirty_chars.contains(&c) {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1665510620,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmp8pw8drj3.rs:4:27\n  |\n4 |     let mut dirty_chars = HashSet::new();\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    let mut dirty_chars = HashSet::new();\n    for c in second_string.chars() {\n        dirty_chars.insert(c);\n    }\n    for c in string.chars() {\n        if !dirty_chars.contains(&c) {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1665510620,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmp8pw8drj3.rs:4:27\n  |\n4 |     let mut dirty_chars = HashSet::new();\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    let mut dirty_chars = HashSet::new();\n    for c in second_string.chars() {\n        dirty_chars.insert(c);\n    }\n    for c in string.chars() {\n        if !dirty_chars.contains(&c) {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1665510620,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmp8pw8drj3.rs:4:27\n  |\n4 |     let mut dirty_chars = HashSet::new();\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut new_string = String::new();\n    let mut second_string_chars = second_string.chars();\n    let mut second_string_chars_set = HashSet::new();\n    for c in second_string_chars {\n        second_string_chars_set.insert(c);\n    }\n    for c in string.chars() {\n        if !second_string_chars_set.contains(&c) {\n            new_string.push(c);\n        }\n    }\n    new_string\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmpj_0h94dt.rs:5:39\n  |\n5 |     let mut second_string_chars_set = HashSet::new();\n  |                                       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    let mut dirty_chars = HashSet::new();\n\n    for c in second_string.chars() {\n        dirty_chars.insert(c);\n    }\n\n    for c in string.chars() {\n        if !dirty_chars.contains(&c) {\n            result.push(c);\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1665510620,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmp9syf_kwh.rs:4:27\n  |\n4 |     let mut dirty_chars = HashSet::new();\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    let mut second_string_chars = second_string.chars();\n    let mut dirty_chars = HashSet::new();\n    for c in second_string_chars {\n        dirty_chars.insert(c);\n    }\n    for c in string.chars() {\n        if !dirty_chars.contains(&c) {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmpnu_imu3_.rs:5:27\n  |\n5 |     let mut dirty_chars = HashSet::new();\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    let mut second_string_chars = second_string.chars();\n    let mut second_string_chars_set = HashSet::new();\n    for c in second_string_chars {\n        second_string_chars_set.insert(c);\n    }\n    for c in string.chars() {\n        if !second_string_chars_set.contains(&c) {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1666124128,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmp60rvo6t0.rs:5:39\n  |\n5 |     let mut second_string_chars_set = HashSet::new();\n  |                                       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    let mut chars_to_remove = HashSet::new();\n\n    for c in second_string.chars() {\n        chars_to_remove.insert(c);\n    }\n\n    for c in string.chars() {\n        if !chars_to_remove.contains(&c) {\n            result.push(c);\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1665510620,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmpvexgt20e.rs:4:31\n  |\n4 |     let mut chars_to_remove = HashSet::new();\n  |                               ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    let mut dirty_chars = HashSet::new();\n\n    for c in second_string.chars() {\n        dirty_chars.insert(c);\n    }\n\n    for c in string.chars() {\n        if !dirty_chars.contains(&c) {\n            result.push(c);\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1665510620,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmp9syf_kwh.rs:4:27\n  |\n4 |     let mut dirty_chars = HashSet::new();\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    let mut second_string_chars = second_string.chars();\n    let mut second_string_chars_set = HashSet::new();\n\n    for c in second_string_chars {\n        second_string_chars_set.insert(c);\n    }\n\n    for c in string.chars() {\n        if !second_string_chars_set.contains(&c) {\n            result.push(c);\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmp88m0efi2.rs:5:39\n  |\n5 |     let mut second_string_chars_set = HashSet::new();\n  |                                       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    let mut dirty_chars = HashSet::new();\n    for c in second_string.chars() {\n        dirty_chars.insert(c);\n    }\n    for c in string.chars() {\n        if !dirty_chars.contains(&c) {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1665510620,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmp8pw8drj3.rs:4:27\n  |\n4 |     let mut dirty_chars = HashSet::new();\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    let mut dirty_chars: Vec<char> = second_string.chars().collect();\n    for c in string.chars() {\n        if !dirty_chars.contains(&c) {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1666124128,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut clean_string = String::new();\n    let mut dirty_chars = HashSet::new();\n\n    for c in second_string.chars() {\n        dirty_chars.insert(c);\n    }\n\n    for c in string.chars() {\n        if !dirty_chars.contains(&c) {\n            clean_string.push(c);\n        }\n    }\n\n    clean_string\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmpj4qk590k.rs:4:27\n  |\n4 |     let mut dirty_chars = HashSet::new();\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    let mut second_string = second_string.chars().collect::<Vec<char>>();\n    for c in string.chars() {\n        if !second_string.contains(&c) {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1665510621,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    let mut dirty_chars: HashSet<char> = HashSet::new();\n    for c in second_string.chars() {\n        dirty_chars.insert(c);\n    }\n    for c in string.chars() {\n        if !dirty_chars.contains(&c) {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1666124128,
      "stdout": "",
      "stderr": "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmp2izjlv5k.rs:4:26\n  |\n4 |     let mut dirty_chars: HashSet<char> = HashSet::new();\n  |                          ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmp2izjlv5k.rs:4:42\n  |\n4 |     let mut dirty_chars: HashSet<char> = HashSet::new();\n  |                                          ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0412, E0433.\nFor more information about an error, try `rustc --explain E0412`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    for c in string.chars() {\n        if !second_string.contains(c) {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1665510620,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n\n    for c in string.chars() {\n        if !second_string.contains(c) {\n            result.push(c);\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1666124128,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    for c in string.chars() {\n        if !second_string.contains(c) {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1665510620,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    let mut second_string_chars: Vec<char> = second_string.chars().collect();\n    for c in string.chars() {\n        if !second_string_chars.contains(&c) {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1666124130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    let mut dirty_chars = HashSet::new();\n    for c in second_string.chars() {\n        dirty_chars.insert(c);\n    }\n    for c in string.chars() {\n        if !dirty_chars.contains(&c) {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1665510620,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmp8pw8drj3.rs:4:27\n  |\n4 |     let mut dirty_chars = HashSet::new();\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    for c in string.chars() {\n        if !second_string.contains(c) {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1665510620,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    let mut dirty_chars = HashSet::new();\n    for c in second_string.chars() {\n        dirty_chars.insert(c);\n    }\n    for c in string.chars() {\n        if !dirty_chars.contains(&c) {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1665510620,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmp8pw8drj3.rs:4:27\n  |\n4 |     let mut dirty_chars = HashSet::new();\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    let mut dirty_chars = HashSet::new();\n    for c in second_string.chars() {\n        dirty_chars.insert(c);\n    }\n    for c in string.chars() {\n        if !dirty_chars.contains(&c) {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1665510620,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmp8pw8drj3.rs:4:27\n  |\n4 |     let mut dirty_chars = HashSet::new();\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    let mut dirty_chars = HashSet::new();\n    for c in second_string.chars() {\n        dirty_chars.insert(c);\n    }\n    for c in string.chars() {\n        if !dirty_chars.contains(&c) {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1665510620,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmp8pw8drj3.rs:4:27\n  |\n4 |     let mut dirty_chars = HashSet::new();\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n\n    for c in string.chars() {\n        if !second_string.contains(c) {\n            result.push(c);\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1666124128,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    let mut dirty_chars = HashSet::new();\n    for c in second_string.chars() {\n        dirty_chars.insert(c);\n    }\n    for c in string.chars() {\n        if !dirty_chars.contains(&c) {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1665510620,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmp8pw8drj3.rs:4:27\n  |\n4 |     let mut dirty_chars = HashSet::new();\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    let mut dirty_chars = HashSet::new();\n    for c in second_string.chars() {\n        dirty_chars.insert(c);\n    }\n    for c in string.chars() {\n        if !dirty_chars.contains(&c) {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1665510620,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmp8pw8drj3.rs:4:27\n  |\n4 |     let mut dirty_chars = HashSet::new();\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    let mut dirty_chars = HashSet::new();\n    for c in second_string.chars() {\n        dirty_chars.insert(c);\n    }\n    for c in string.chars() {\n        if !dirty_chars.contains(&c) {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1665510620,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmp8pw8drj3.rs:4:27\n  |\n4 |     let mut dirty_chars = HashSet::new();\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    let mut dirty_chars = HashSet::new();\n    for c in second_string.chars() {\n        dirty_chars.insert(c);\n    }\n    for c in string.chars() {\n        if !dirty_chars.contains(&c) {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1665510620,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmp8pw8drj3.rs:4:27\n  |\n4 |     let mut dirty_chars = HashSet::new();\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    let mut dirty_chars = HashSet::new();\n    for c in second_string.chars() {\n        dirty_chars.insert(c);\n    }\n    for c in string.chars() {\n        if !dirty_chars.contains(&c) {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1665510620,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmp8pw8drj3.rs:4:27\n  |\n4 |     let mut dirty_chars = HashSet::new();\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    let mut dirty_chars = HashSet::new();\n    for c in second_string.chars() {\n        dirty_chars.insert(c);\n    }\n    for c in string.chars() {\n        if !dirty_chars.contains(&c) {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1665510620,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmp8pw8drj3.rs:4:27\n  |\n4 |     let mut dirty_chars = HashSet::new();\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut new_string = String::new();\n    for c in string.chars() {\n        if !second_string.contains(c) {\n            new_string.push(c);\n        }\n    }\n    new_string\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1666124128,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    let mut dirty_chars = HashSet::new();\n    for c in second_string.chars() {\n        dirty_chars.insert(c);\n    }\n\n    for c in string.chars() {\n        if !dirty_chars.contains(&c) {\n            result.push(c);\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1666124128,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmpra8lkqn3.rs:4:27\n  |\n4 |     let mut dirty_chars = HashSet::new();\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    for c in string.chars() {\n        if !second_string.contains(c) {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1665510620,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    let mut second_string_chars = second_string.chars().collect::<Vec<char>>();\n    for c in string.chars() {\n        if !second_string_chars.contains(&c) {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1665510620,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut new_string = String::new();\n    for c in string.chars() {\n        if !second_string.contains(c) {\n            new_string.push(c);\n        }\n    }\n    new_string\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1666124128,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    let mut second_string_chars = second_string.chars().collect::<Vec<char>>();\n    for c in string.chars() {\n        if !second_string_chars.contains(&c) {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1665510620,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    let mut dirty_chars = HashSet::new();\n\n    for c in second_string.chars() {\n        dirty_chars.insert(c);\n    }\n\n    for c in string.chars() {\n        if !dirty_chars.contains(&c) {\n            result.push(c);\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1665510620,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmp9syf_kwh.rs:4:27\n  |\n4 |     let mut dirty_chars = HashSet::new();\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    let mut dirty_chars = HashSet::new();\n    for c in second_string.chars() {\n        dirty_chars.insert(c);\n    }\n    for c in string.chars() {\n        if !dirty_chars.contains(&c) {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1665510620,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmp8pw8drj3.rs:4:27\n  |\n4 |     let mut dirty_chars = HashSet::new();\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    for c in string.chars() {\n        if !second_string.contains(c) {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1665510620,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    let mut dirty_chars = HashSet::new();\n    for c in second_string.chars() {\n        dirty_chars.insert(c);\n    }\n    for c in string.chars() {\n        if !dirty_chars.contains(&c) {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1665510620,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmp8pw8drj3.rs:4:27\n  |\n4 |     let mut dirty_chars = HashSet::new();\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    let mut dirty_chars = HashSet::new();\n    for c in second_string.chars() {\n        dirty_chars.insert(c);\n    }\n    for c in string.chars() {\n        if !dirty_chars.contains(&c) {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1665510620,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmp8pw8drj3.rs:4:27\n  |\n4 |     let mut dirty_chars = HashSet::new();\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    let mut dirty_chars = HashSet::new();\n    for c in second_string.chars() {\n        dirty_chars.insert(c);\n    }\n    for c in string.chars() {\n        if !dirty_chars.contains(&c) {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1665510620,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmp8pw8drj3.rs:4:27\n  |\n4 |     let mut dirty_chars = HashSet::new();\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    let mut chars = second_string.chars();\n    let mut dirty_chars: HashSet<char> = HashSet::new();\n    while let Some(c) = chars.next() {\n        dirty_chars.insert(c);\n    }\n    let mut chars = string.chars();\n    while let Some(c) = chars.next() {\n        if !dirty_chars.contains(&c) {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmp5wd0utkd.rs:5:26\n  |\n5 |     let mut dirty_chars: HashSet<char> = HashSet::new();\n  |                          ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmp5wd0utkd.rs:5:42\n  |\n5 |     let mut dirty_chars: HashSet<char> = HashSet::new();\n  |                                          ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0412, E0433.\nFor more information about an error, try `rustc --explain E0412`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    let mut second_string_chars = second_string.chars().collect::<Vec<char>>();\n    for c in string.chars() {\n        if !second_string_chars.contains(&c) {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1665510620,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    let mut dirty_chars = HashSet::new();\n    for c in second_string.chars() {\n        dirty_chars.insert(c);\n    }\n    for c in string.chars() {\n        if !dirty_chars.contains(&c) {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1665510620,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmp8pw8drj3.rs:4:27\n  |\n4 |     let mut dirty_chars = HashSet::new();\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    let mut dirty_chars = HashSet::new();\n    for char in second_string.chars() {\n        dirty_chars.insert(char);\n    }\n    for char in string.chars() {\n        if !dirty_chars.contains(&char) {\n            result.push(char);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1666124128,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmplr0wb4pd.rs:4:27\n  |\n4 |     let mut dirty_chars = HashSet::new();\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    let mut dirty_chars = HashSet::new();\n\n    for c in second_string.chars() {\n        dirty_chars.insert(c);\n    }\n\n    for c in string.chars() {\n        if !dirty_chars.contains(&c) {\n            result.push(c);\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1665510620,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmp9syf_kwh.rs:4:27\n  |\n4 |     let mut dirty_chars = HashSet::new();\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    let mut dirty_chars = HashSet::new();\n    for c in second_string.chars() {\n        dirty_chars.insert(c);\n    }\n\n    for c in string.chars() {\n        if !dirty_chars.contains(&c) {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1665510620,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmpnxiw9xcx.rs:4:27\n  |\n4 |     let mut dirty_chars = HashSet::new();\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut clean_string = String::new();\n    for c in string.chars() {\n        if !second_string.contains(c) {\n            clean_string.push(c);\n        }\n    }\n    clean_string\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1666124130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut clean_string = String::new();\n    let mut dirty_chars = HashSet::new();\n    for c in second_string.chars() {\n        dirty_chars.insert(c);\n    }\n    for c in string.chars() {\n        if !dirty_chars.contains(&c) {\n            clean_string.push(c);\n        }\n    }\n    clean_string\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1665510620,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmp1smize_l.rs:4:27\n  |\n4 |     let mut dirty_chars = HashSet::new();\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    let mut dirty_chars = HashSet::new();\n    for c in second_string.chars() {\n        dirty_chars.insert(c);\n    }\n    for c in string.chars() {\n        if !dirty_chars.contains(&c) {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1665510620,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmp8pw8drj3.rs:4:27\n  |\n4 |     let mut dirty_chars = HashSet::new();\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    let mut dirty_chars = HashSet::new();\n    for c in second_string.chars() {\n        dirty_chars.insert(c);\n    }\n    for c in string.chars() {\n        if !dirty_chars.contains(&c) {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1665510620,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmp8pw8drj3.rs:4:27\n  |\n4 |     let mut dirty_chars = HashSet::new();\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    let mut dirty_chars = HashSet::new();\n    for c in second_string.chars() {\n        dirty_chars.insert(c);\n    }\n    for c in string.chars() {\n        if !dirty_chars.contains(&c) {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1665510620,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmp8pw8drj3.rs:4:27\n  |\n4 |     let mut dirty_chars = HashSet::new();\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    for c in string.chars() {\n        if !second_string.contains(c) {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1665510620,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut clean_string = String::new();\n    let mut dirty_chars = HashSet::new();\n    for c in second_string.chars() {\n        dirty_chars.insert(c);\n    }\n    for c in string.chars() {\n        if !dirty_chars.contains(&c) {\n            clean_string.push(c);\n        }\n    }\n    clean_string\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1665510620,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmp1smize_l.rs:4:27\n  |\n4 |     let mut dirty_chars = HashSet::new();\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    let mut dirty_chars = HashSet::new();\n    for c in second_string.chars() {\n        dirty_chars.insert(c);\n    }\n\n    for c in string.chars() {\n        if !dirty_chars.contains(&c) {\n            result.push(c);\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1666124128,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmpra8lkqn3.rs:4:27\n  |\n4 |     let mut dirty_chars = HashSet::new();\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    let mut dirty_chars = HashSet::new();\n    for c in second_string.chars() {\n        dirty_chars.insert(c);\n    }\n    for c in string.chars() {\n        if !dirty_chars.contains(&c) {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1665510620,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmp8pw8drj3.rs:4:27\n  |\n4 |     let mut dirty_chars = HashSet::new();\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    let mut dirty_chars = HashSet::new();\n    for c in second_string.chars() {\n        dirty_chars.insert(c);\n    }\n    for c in string.chars() {\n        if !dirty_chars.contains(&c) {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1665510620,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmp8pw8drj3.rs:4:27\n  |\n4 |     let mut dirty_chars = HashSet::new();\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    let mut dirty_chars = HashSet::new();\n\n    for c in second_string.chars() {\n        dirty_chars.insert(c);\n    }\n\n    for c in string.chars() {\n        if !dirty_chars.contains(&c) {\n            result.push(c);\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1665510620,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmp9syf_kwh.rs:4:27\n  |\n4 |     let mut dirty_chars = HashSet::new();\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    let mut dirty_chars = HashSet::new();\n\n    for c in second_string.chars() {\n        dirty_chars.insert(c);\n    }\n\n    for c in string.chars() {\n        if !dirty_chars.contains(&c) {\n            result.push(c);\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1665510620,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmp9syf_kwh.rs:4:27\n  |\n4 |     let mut dirty_chars = HashSet::new();\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    let mut dirty_chars = HashSet::new();\n\n    for c in second_string.chars() {\n        dirty_chars.insert(c);\n    }\n\n    for c in string.chars() {\n        if !dirty_chars.contains(&c) {\n            result.push(c);\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1665510620,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmp9syf_kwh.rs:4:27\n  |\n4 |     let mut dirty_chars = HashSet::new();\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    let mut dirty_chars = HashSet::new();\n    for c in second_string.chars() {\n        dirty_chars.insert(c);\n    }\n    for c in string.chars() {\n        if !dirty_chars.contains(&c) {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1665510620,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmp8pw8drj3.rs:4:27\n  |\n4 |     let mut dirty_chars = HashSet::new();\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    let mut dirty_chars = HashSet::new();\n\n    for c in second_string.chars() {\n        dirty_chars.insert(c);\n    }\n\n    for c in string.chars() {\n        if !dirty_chars.contains(&c) {\n            result.push(c);\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1665510620,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmp9syf_kwh.rs:4:27\n  |\n4 |     let mut dirty_chars = HashSet::new();\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut clean_string = String::new();\n    let mut dirty_chars = HashSet::new();\n\n    for c in second_string.chars() {\n        dirty_chars.insert(c);\n    }\n\n    for c in string.chars() {\n        if !dirty_chars.contains(&c) {\n            clean_string.push(c);\n        }\n    }\n\n    clean_string\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmpj4qk590k.rs:4:27\n  |\n4 |     let mut dirty_chars = HashSet::new();\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    let mut second_string_chars: Vec<char> = second_string.chars().collect();\n    for c in string.chars() {\n        if !second_string_chars.contains(&c) {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1666124130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    let mut dirty_chars = HashSet::new();\n    for c in second_string.chars() {\n        dirty_chars.insert(c);\n    }\n    for c in string.chars() {\n        if !dirty_chars.contains(&c) {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1665510620,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmp8pw8drj3.rs:4:27\n  |\n4 |     let mut dirty_chars = HashSet::new();\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut new_string = String::new();\n    let mut dirty_chars = HashSet::new();\n    for c in second_string.chars() {\n        dirty_chars.insert(c);\n    }\n    for c in string.chars() {\n        if !dirty_chars.contains(&c) {\n            new_string.push(c);\n        }\n    }\n    new_string\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1666124128,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmpnkcqrn0c.rs:4:27\n  |\n4 |     let mut dirty_chars = HashSet::new();\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    let mut dirty_chars = HashSet::new();\n    for c in second_string.chars() {\n        dirty_chars.insert(c);\n    }\n    for c in string.chars() {\n        if !dirty_chars.contains(&c) {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1665510620,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmp8pw8drj3.rs:4:27\n  |\n4 |     let mut dirty_chars = HashSet::new();\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    let mut dirty_chars = HashSet::new();\n    for c in second_string.chars() {\n        dirty_chars.insert(c);\n    }\n    for c in string.chars() {\n        if !dirty_chars.contains(&c) {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1665510620,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmp8pw8drj3.rs:4:27\n  |\n4 |     let mut dirty_chars = HashSet::new();\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    let mut dirty_chars = HashSet::new();\n\n    for c in second_string.chars() {\n        dirty_chars.insert(c);\n    }\n\n    for c in string.chars() {\n        if !dirty_chars.contains(&c) {\n            result.push(c);\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1665510620,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmp9syf_kwh.rs:4:27\n  |\n4 |     let mut dirty_chars = HashSet::new();\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result: String = String::new();\n    let mut dirty_chars: Vec<char> = second_string.chars().collect();\n    for c in string.chars() {\n        if !dirty_chars.contains(&c) {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1666124130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    let mut second_string_chars = second_string.chars();\n    let mut second_string_chars_set = HashSet::new();\n    for c in second_string_chars {\n        second_string_chars_set.insert(c);\n    }\n    for c in string.chars() {\n        if !second_string_chars_set.contains(&c) {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1666124128,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmp60rvo6t0.rs:5:39\n  |\n5 |     let mut second_string_chars_set = HashSet::new();\n  |                                       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut new_string = String::new();\n    let mut dirty_chars = HashSet::new();\n    for c in second_string.chars() {\n        dirty_chars.insert(c);\n    }\n    for c in string.chars() {\n        if !dirty_chars.contains(&c) {\n            new_string.push(c);\n        }\n    }\n    new_string\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1666124128,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmpnkcqrn0c.rs:4:27\n  |\n4 |     let mut dirty_chars = HashSet::new();\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    let mut dirty_chars = HashSet::new();\n    for c in second_string.chars() {\n        dirty_chars.insert(c);\n    }\n    for c in string.chars() {\n        if !dirty_chars.contains(&c) {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1665510620,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmp8pw8drj3.rs:4:27\n  |\n4 |     let mut dirty_chars = HashSet::new();\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    let mut dirty_chars = HashSet::new();\n    for c in second_string.chars() {\n        dirty_chars.insert(c);\n    }\n    for c in string.chars() {\n        if !dirty_chars.contains(&c) {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1665510620,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmp8pw8drj3.rs:4:27\n  |\n4 |     let mut dirty_chars = HashSet::new();\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    let mut dirty_chars = HashSet::new();\n\n    for c in second_string.chars() {\n        dirty_chars.insert(c);\n    }\n\n    for c in string.chars() {\n        if !dirty_chars.contains(&c) {\n            result.push(c);\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1665510620,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmp9syf_kwh.rs:4:27\n  |\n4 |     let mut dirty_chars = HashSet::new();\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    let mut dirty_chars = HashSet::new();\n    for c in second_string.chars() {\n        dirty_chars.insert(c);\n    }\n    for c in string.chars() {\n        if !dirty_chars.contains(&c) {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1665510620,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmp8pw8drj3.rs:4:27\n  |\n4 |     let mut dirty_chars = HashSet::new();\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    let mut dirty_chars = HashSet::new();\n    for c in second_string.chars() {\n        dirty_chars.insert(c);\n    }\n    for c in string.chars() {\n        if !dirty_chars.contains(&c) {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1665510620,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmp8pw8drj3.rs:4:27\n  |\n4 |     let mut dirty_chars = HashSet::new();\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    let mut dirty_chars = HashSet::new();\n\n    for c in second_string.chars() {\n        dirty_chars.insert(c);\n    }\n\n    for c in string.chars() {\n        if !dirty_chars.contains(&c) {\n            result.push(c);\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1665510620,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmp9syf_kwh.rs:4:27\n  |\n4 |     let mut dirty_chars = HashSet::new();\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    let mut dirty_chars = HashSet::new();\n\n    for c in second_string.chars() {\n        dirty_chars.insert(c);\n    }\n\n    for c in string.chars() {\n        if !dirty_chars.contains(&c) {\n            result.push(c);\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1665510620,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmp9syf_kwh.rs:4:27\n  |\n4 |     let mut dirty_chars = HashSet::new();\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    let mut second_string_chars = second_string.chars();\n    let mut second_string_chars_set = HashSet::new();\n    while let Some(c) = second_string_chars.next() {\n        second_string_chars_set.insert(c);\n    }\n\n    for c in string.chars() {\n        if !second_string_chars_set.contains(&c) {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmpnnpcuavh.rs:5:39\n  |\n5 |     let mut second_string_chars_set = HashSet::new();\n  |                                       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    for c in string.chars() {\n        if !second_string.contains(c) {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1665510620,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    let mut dirty_chars = HashSet::new();\n    for c in second_string.chars() {\n        dirty_chars.insert(c);\n    }\n    for c in string.chars() {\n        if !dirty_chars.contains(&c) {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1665510620,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmp8pw8drj3.rs:4:27\n  |\n4 |     let mut dirty_chars = HashSet::new();\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    let mut dirty_chars = HashSet::new();\n    for c in second_string.chars() {\n        dirty_chars.insert(c);\n    }\n    for c in string.chars() {\n        if !dirty_chars.contains(&c) {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1665510620,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmp8pw8drj3.rs:4:27\n  |\n4 |     let mut dirty_chars = HashSet::new();\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    let mut dirty_chars = HashSet::new();\n\n    for c in second_string.chars() {\n        dirty_chars.insert(c);\n    }\n\n    for c in string.chars() {\n        if !dirty_chars.contains(&c) {\n            result.push(c);\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1665510620,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmp9syf_kwh.rs:4:27\n  |\n4 |     let mut dirty_chars = HashSet::new();\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    let mut dirty_chars = HashSet::new();\n    for c in second_string.chars() {\n        dirty_chars.insert(c);\n    }\n    for c in string.chars() {\n        if !dirty_chars.contains(&c) {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1665510620,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmp8pw8drj3.rs:4:27\n  |\n4 |     let mut dirty_chars = HashSet::new();\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    let mut chars_to_remove: Vec<char> = Vec::new();\n\n    for c in second_string.chars() {\n        chars_to_remove.push(c);\n    }\n\n    for c in string.chars() {\n        if !chars_to_remove.contains(&c) {\n            result.push(c);\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1666124128,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    for c in string.chars() {\n        if !second_string.contains(c) {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1665510620,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    let mut dirty_chars = HashSet::new();\n    for c in second_string.chars() {\n        dirty_chars.insert(c);\n    }\n    for c in string.chars() {\n        if !dirty_chars.contains(&c) {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1665510620,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmp8pw8drj3.rs:4:27\n  |\n4 |     let mut dirty_chars = HashSet::new();\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    let mut dirty_chars = HashSet::new();\n\n    for c in second_string.chars() {\n        dirty_chars.insert(c);\n    }\n\n    for c in string.chars() {\n        if !dirty_chars.contains(&c) {\n            result.push(c);\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1665510620,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmp9syf_kwh.rs:4:27\n  |\n4 |     let mut dirty_chars = HashSet::new();\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    let mut dirty_chars = HashSet::new();\n    for c in second_string.chars() {\n        dirty_chars.insert(c);\n    }\n    for c in string.chars() {\n        if !dirty_chars.contains(&c) {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1665510620,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmp8pw8drj3.rs:4:27\n  |\n4 |     let mut dirty_chars = HashSet::new();\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    for c in string.chars() {\n        if !second_string.contains(c) {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1665510620,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    let mut dirty_chars = HashSet::new();\n\n    for c in second_string.chars() {\n        dirty_chars.insert(c);\n    }\n\n    for c in string.chars() {\n        if !dirty_chars.contains(&c) {\n            result.push(c);\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1665510620,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmp9syf_kwh.rs:4:27\n  |\n4 |     let mut dirty_chars = HashSet::new();\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    let mut dirty_chars = HashSet::new();\n    for c in second_string.chars() {\n        dirty_chars.insert(c);\n    }\n    for c in string.chars() {\n        if !dirty_chars.contains(&c) {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1665510620,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmp8pw8drj3.rs:4:27\n  |\n4 |     let mut dirty_chars = HashSet::new();\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    for c in string.chars() {\n        if !second_string.contains(c) {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1665510620,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    let mut dirty_chars: Vec<char> = second_string.chars().collect();\n    for c in string.chars() {\n        if !dirty_chars.contains(&c) {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1666124128,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    let mut dirty_chars = HashSet::new();\n    for c in second_string.chars() {\n        dirty_chars.insert(c);\n    }\n    for c in string.chars() {\n        if !dirty_chars.contains(&c) {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1665510620,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmp8pw8drj3.rs:4:27\n  |\n4 |     let mut dirty_chars = HashSet::new();\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    let mut second_string = second_string.chars().collect::<Vec<char>>();\n    for c in string.chars() {\n        if !second_string.contains(&c) {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1665510621,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    let mut second_string_chars = second_string.chars();\n    let mut second_string_chars_set = HashSet::new();\n    while let Some(c) = second_string_chars.next() {\n        second_string_chars_set.insert(c);\n    }\n\n    for c in string.chars() {\n        if !second_string_chars_set.contains(&c) {\n            result.push(c);\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmpspmo3bd_.rs:5:39\n  |\n5 |     let mut second_string_chars_set = HashSet::new();\n  |                                       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut clean_string = String::new();\n    for c in string.chars() {\n        if !second_string.contains(c) {\n            clean_string.push(c);\n        }\n    }\n    clean_string\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1666124130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    let mut dirty_chars = HashSet::new();\n    for c in second_string.chars() {\n        dirty_chars.insert(c);\n    }\n    for c in string.chars() {\n        if !dirty_chars.contains(&c) {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1665510620,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmp8pw8drj3.rs:4:27\n  |\n4 |     let mut dirty_chars = HashSet::new();\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    let mut dirty_chars = HashSet::new();\n    for c in second_string.chars() {\n        dirty_chars.insert(c);\n    }\n    for c in string.chars() {\n        if !dirty_chars.contains(&c) {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1665510620,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmp8pw8drj3.rs:4:27\n  |\n4 |     let mut dirty_chars = HashSet::new();\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut string_chars: Vec<char> = string.chars().collect();\n    let second_string_chars: Vec<char> = second_string.chars().collect();\n\n    for i in 0..string_chars.len() {\n        for j in 0..second_string_chars.len() {\n            if string_chars[i] == second_string_chars[j] {\n                string_chars[i] = ' ';\n            }\n        }\n    }\n\n    let mut result = String::new();\n    for i in 0..string_chars.len() {\n        if string_chars[i] != ' ' {\n            result.push(string_chars[i]);\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1666124130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    for c in string.chars() {\n        if !second_string.contains(c) {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1665510620,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    let mut dirty_chars = HashSet::new();\n\n    for c in second_string.chars() {\n        dirty_chars.insert(c);\n    }\n\n    for c in string.chars() {\n        if !dirty_chars.contains(&c) {\n            result.push(c);\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1665510620,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmp9syf_kwh.rs:4:27\n  |\n4 |     let mut dirty_chars = HashSet::new();\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    let mut dirty_chars = HashSet::new();\n    for c in second_string.chars() {\n        dirty_chars.insert(c);\n    }\n    for c in string.chars() {\n        if !dirty_chars.contains(&c) {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1665510620,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmp8pw8drj3.rs:4:27\n  |\n4 |     let mut dirty_chars = HashSet::new();\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    let mut dirty_chars = HashSet::new();\n    for c in second_string.chars() {\n        dirty_chars.insert(c);\n    }\n    for c in string.chars() {\n        if !dirty_chars.contains(&c) {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1665510620,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmp8pw8drj3.rs:4:27\n  |\n4 |     let mut dirty_chars = HashSet::new();\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    let mut second_string_chars = second_string.chars();\n    let mut second_string_chars_set = HashSet::new();\n    while let Some(c) = second_string_chars.next() {\n        second_string_chars_set.insert(c);\n    }\n    for c in string.chars() {\n        if !second_string_chars_set.contains(&c) {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1666124128,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmp96hyiul4.rs:5:39\n  |\n5 |     let mut second_string_chars_set = HashSet::new();\n  |                                       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    let mut dirty_chars = HashSet::new();\n    for c in second_string.chars() {\n        dirty_chars.insert(c);\n    }\n\n    for c in string.chars() {\n        if !dirty_chars.contains(&c) {\n            result.push(c);\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1666124128,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmpra8lkqn3.rs:4:27\n  |\n4 |     let mut dirty_chars = HashSet::new();\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    let mut second_string_chars = second_string.chars().collect::<Vec<char>>();\n    for c in string.chars() {\n        if !second_string_chars.contains(&c) {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1665510620,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut clean_string = String::new();\n    let mut dirty_chars = HashSet::new();\n    for c in second_string.chars() {\n        dirty_chars.insert(c);\n    }\n    for c in string.chars() {\n        if !dirty_chars.contains(&c) {\n            clean_string.push(c);\n        }\n    }\n    clean_string\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1665510620,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmp1smize_l.rs:4:27\n  |\n4 |     let mut dirty_chars = HashSet::new();\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    let mut dirty_chars = HashSet::new();\n    for c in second_string.chars() {\n        dirty_chars.insert(c);\n    }\n    for c in string.chars() {\n        if !dirty_chars.contains(&c) {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1665510620,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmp8pw8drj3.rs:4:27\n  |\n4 |     let mut dirty_chars = HashSet::new();\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    let mut dirty_chars = HashSet::new();\n    for c in second_string.chars() {\n        dirty_chars.insert(c);\n    }\n    for c in string.chars() {\n        if !dirty_chars.contains(&c) {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1665510620,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmp8pw8drj3.rs:4:27\n  |\n4 |     let mut dirty_chars = HashSet::new();\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    let mut dirty_chars = HashSet::new();\n    for c in second_string.chars() {\n        dirty_chars.insert(c);\n    }\n\n    for c in string.chars() {\n        if !dirty_chars.contains(&c) {\n            result.push(c);\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1666124128,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmpra8lkqn3.rs:4:27\n  |\n4 |     let mut dirty_chars = HashSet::new();\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    let mut dirty_chars: Vec<char> = second_string.chars().collect();\n    for c in string.chars() {\n        if !dirty_chars.contains(&c) {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1666124128,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    let mut dirty_chars = HashSet::new();\n    for ch in second_string.chars() {\n        dirty_chars.insert(ch);\n    }\n    for ch in string.chars() {\n        if !dirty_chars.contains(&ch) {\n            result.push(ch);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1666124128,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmpuile3nnm.rs:4:27\n  |\n4 |     let mut dirty_chars = HashSet::new();\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    let mut dirty_chars = HashSet::new();\n    for c in second_string.chars() {\n        dirty_chars.insert(c);\n    }\n    for c in string.chars() {\n        if !dirty_chars.contains(&c) {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1665510620,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmp8pw8drj3.rs:4:27\n  |\n4 |     let mut dirty_chars = HashSet::new();\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    let mut dirty_chars = HashSet::new();\n    for c in second_string.chars() {\n        dirty_chars.insert(c);\n    }\n    for c in string.chars() {\n        if !dirty_chars.contains(&c) {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1665510620,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmp8pw8drj3.rs:4:27\n  |\n4 |     let mut dirty_chars = HashSet::new();\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    let mut dirty_chars = HashSet::new();\n    for c in second_string.chars() {\n        dirty_chars.insert(c);\n    }\n    for c in string.chars() {\n        if !dirty_chars.contains(&c) {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1665510620,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmp8pw8drj3.rs:4:27\n  |\n4 |     let mut dirty_chars = HashSet::new();\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    let mut dirty_chars = HashSet::new();\n    for c in second_string.chars() {\n        dirty_chars.insert(c);\n    }\n    for c in string.chars() {\n        if !dirty_chars.contains(&c) {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1665510620,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmp8pw8drj3.rs:4:27\n  |\n4 |     let mut dirty_chars = HashSet::new();\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    let mut dirty_chars = HashSet::new();\n    for c in second_string.chars() {\n        dirty_chars.insert(c);\n    }\n    for c in string.chars() {\n        if !dirty_chars.contains(&c) {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1665510620,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmp8pw8drj3.rs:4:27\n  |\n4 |     let mut dirty_chars = HashSet::new();\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    let mut dirty_chars = HashSet::new();\n    for c in second_string.chars() {\n        dirty_chars.insert(c);\n    }\n    for c in string.chars() {\n        if !dirty_chars.contains(&c) {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1665510620,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmp8pw8drj3.rs:4:27\n  |\n4 |     let mut dirty_chars = HashSet::new();\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n\n    for c in string.chars() {\n        if !second_string.contains(c) {\n            result.push(c);\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1666124128,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut new_string = String::new();\n    let mut dirty_chars = HashSet::new();\n    for c in second_string.chars() {\n        dirty_chars.insert(c);\n    }\n    for c in string.chars() {\n        if !dirty_chars.contains(&c) {\n            new_string.push(c);\n        }\n    }\n    new_string\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1666124128,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmpnkcqrn0c.rs:4:27\n  |\n4 |     let mut dirty_chars = HashSet::new();\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    let mut dirty_chars = HashSet::new();\n    for c in second_string.chars() {\n        dirty_chars.insert(c);\n    }\n    for c in string.chars() {\n        if !dirty_chars.contains(&c) {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1665510620,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmp8pw8drj3.rs:4:27\n  |\n4 |     let mut dirty_chars = HashSet::new();\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    let mut dirty_chars = HashSet::new();\n\n    for c in second_string.chars() {\n        dirty_chars.insert(c);\n    }\n\n    for c in string.chars() {\n        if !dirty_chars.contains(&c) {\n            result.push(c);\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1665510620,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmp9syf_kwh.rs:4:27\n  |\n4 |     let mut dirty_chars = HashSet::new();\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    let mut dirty_chars = HashSet::new();\n    for c in second_string.chars() {\n        dirty_chars.insert(c);\n    }\n    for c in string.chars() {\n        if !dirty_chars.contains(&c) {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1665510620,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmp8pw8drj3.rs:4:27\n  |\n4 |     let mut dirty_chars = HashSet::new();\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    let mut dirty_chars = HashSet::new();\n    for c in second_string.chars() {\n        dirty_chars.insert(c);\n    }\n    for c in string.chars() {\n        if !dirty_chars.contains(&c) {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1665510620,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmp8pw8drj3.rs:4:27\n  |\n4 |     let mut dirty_chars = HashSet::new();\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut new_string = String::new();\n    for c in string.chars() {\n        if !second_string.contains(c) {\n            new_string.push(c);\n        }\n    }\n    new_string\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1666124128,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    let mut dirty_chars = HashSet::new();\n    for c in second_string.chars() {\n        dirty_chars.insert(c);\n    }\n    for c in string.chars() {\n        if !dirty_chars.contains(&c) {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1665510620,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmp8pw8drj3.rs:4:27\n  |\n4 |     let mut dirty_chars = HashSet::new();\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    let mut dirty_chars = HashSet::new();\n    for c in second_string.chars() {\n        dirty_chars.insert(c);\n    }\n    for c in string.chars() {\n        if !dirty_chars.contains(&c) {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1665510620,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmp8pw8drj3.rs:4:27\n  |\n4 |     let mut dirty_chars = HashSet::new();\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    let mut dirty_chars = HashSet::new();\n\n    for c in second_string.chars() {\n        dirty_chars.insert(c);\n    }\n\n    for c in string.chars() {\n        if !dirty_chars.contains(&c) {\n            result.push(c);\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1665510620,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmp9syf_kwh.rs:4:27\n  |\n4 |     let mut dirty_chars = HashSet::new();\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    let mut dirty_chars = HashSet::new();\n    for c in second_string.chars() {\n        dirty_chars.insert(c);\n    }\n    for c in string.chars() {\n        if !dirty_chars.contains(&c) {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1665510620,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmp8pw8drj3.rs:4:27\n  |\n4 |     let mut dirty_chars = HashSet::new();\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    for c in string.chars() {\n        if !second_string.contains(c) {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1665510620,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    let mut second_string_chars: Vec<char> = second_string.chars().collect();\n    for c in string.chars() {\n        if !second_string_chars.contains(&c) {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1666124130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    for c in string.chars() {\n        if !second_string.contains(c) {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1665510620,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut new_string = String::new();\n    let mut second_string_chars = second_string.chars();\n    let mut second_string_chars_set: HashSet<char> = HashSet::new();\n\n    for char in second_string_chars {\n        second_string_chars_set.insert(char);\n    }\n\n    for char in string.chars() {\n        if !second_string_chars_set.contains(&char) {\n            new_string.push(char);\n        }\n    }\n\n    new_string\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmpr_l8tc4h.rs:5:38\n  |\n5 |     let mut second_string_chars_set: HashSet<char> = HashSet::new();\n  |                                      ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmpr_l8tc4h.rs:5:54\n  |\n5 |     let mut second_string_chars_set: HashSet<char> = HashSet::new();\n  |                                                      ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0412, E0433.\nFor more information about an error, try `rustc --explain E0412`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    let mut dirty_chars = HashSet::new();\n\n    for c in second_string.chars() {\n        dirty_chars.insert(c);\n    }\n\n    for c in string.chars() {\n        if !dirty_chars.contains(&c) {\n            result.push(c);\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1665510620,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmp9syf_kwh.rs:4:27\n  |\n4 |     let mut dirty_chars = HashSet::new();\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut new_string = String::new();\n    let mut second_string_chars: Vec<char> = second_string.chars().collect();\n    for c in string.chars() {\n        if !second_string_chars.contains(&c) {\n            new_string.push(c);\n        }\n    }\n    new_string\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1666124130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    let mut dirty_chars = second_string.chars().collect::<HashSet<char>>();\n    for c in string.chars() {\n        if !dirty_chars.contains(&c) {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmplbidtcn8.rs:4:59\n  |\n4 |     let mut dirty_chars = second_string.chars().collect::<HashSet<char>>();\n  |                                                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0412`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut clean_string = String::new();\n    let mut dirty_chars = HashSet::new();\n    for c in second_string.chars() {\n        dirty_chars.insert(c);\n    }\n    for c in string.chars() {\n        if !dirty_chars.contains(&c) {\n            clean_string.push(c);\n        }\n    }\n    clean_string\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1665510620,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmp1smize_l.rs:4:27\n  |\n4 |     let mut dirty_chars = HashSet::new();\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    let mut dirty_chars = HashSet::new();\n    for c in second_string.chars() {\n        dirty_chars.insert(c);\n    }\n    for c in string.chars() {\n        if !dirty_chars.contains(&c) {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1665510620,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmp8pw8drj3.rs:4:27\n  |\n4 |     let mut dirty_chars = HashSet::new();\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut clean_string = String::new();\n    let mut dirty_chars = HashSet::new();\n    for ch in second_string.chars() {\n        dirty_chars.insert(ch);\n    }\n    for ch in string.chars() {\n        if !dirty_chars.contains(&ch) {\n            clean_string.push(ch);\n        }\n    }\n    clean_string\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmpz5yxsy8z.rs:4:27\n  |\n4 |     let mut dirty_chars = HashSet::new();\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    let mut second_string_chars = second_string.chars().collect::<Vec<char>>();\n    for c in string.chars() {\n        if !second_string_chars.contains(&c) {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1665510620,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    for c in string.chars() {\n        if !second_string.contains(c) {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1665510620,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    let mut dirty_chars = HashSet::new();\n\n    for c in second_string.chars() {\n        dirty_chars.insert(c);\n    }\n\n    for c in string.chars() {\n        if !dirty_chars.contains(&c) {\n            result.push(c);\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1665510620,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmp9syf_kwh.rs:4:27\n  |\n4 |     let mut dirty_chars = HashSet::new();\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    let mut dirty_chars = HashSet::new();\n    for c in second_string.chars() {\n        dirty_chars.insert(c);\n    }\n    for c in string.chars() {\n        if !dirty_chars.contains(&c) {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1665510620,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmp8pw8drj3.rs:4:27\n  |\n4 |     let mut dirty_chars = HashSet::new();\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    let mut dirty_chars = HashSet::new();\n    for c in second_string.chars() {\n        dirty_chars.insert(c);\n    }\n    for c in string.chars() {\n        if !dirty_chars.contains(&c) {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1665510620,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmp8pw8drj3.rs:4:27\n  |\n4 |     let mut dirty_chars = HashSet::new();\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    let mut dirty_chars = HashSet::new();\n    for c in second_string.chars() {\n        dirty_chars.insert(c);\n    }\n    for c in string.chars() {\n        if !dirty_chars.contains(&c) {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1665510620,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmp8pw8drj3.rs:4:27\n  |\n4 |     let mut dirty_chars = HashSet::new();\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    let mut dirty_chars = HashSet::new();\n    for c in second_string.chars() {\n        dirty_chars.insert(c);\n    }\n    for c in string.chars() {\n        if !dirty_chars.contains(&c) {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1665510620,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmp8pw8drj3.rs:4:27\n  |\n4 |     let mut dirty_chars = HashSet::new();\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    let mut dirty_chars = HashSet::new();\n    for c in second_string.chars() {\n        dirty_chars.insert(c);\n    }\n    for c in string.chars() {\n        if !dirty_chars.contains(&c) {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1665510620,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmp8pw8drj3.rs:4:27\n  |\n4 |     let mut dirty_chars = HashSet::new();\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    let mut dirty_chars = HashSet::new();\n    for char in second_string.chars() {\n        dirty_chars.insert(char);\n    }\n    for char in string.chars() {\n        if !dirty_chars.contains(&char) {\n            result.push(char);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1666124128,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmplr0wb4pd.rs:4:27\n  |\n4 |     let mut dirty_chars = HashSet::new();\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    let mut dirty_chars = HashSet::new();\n\n    for c in second_string.chars() {\n        dirty_chars.insert(c);\n    }\n\n    for c in string.chars() {\n        if !dirty_chars.contains(&c) {\n            result.push(c);\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1665510620,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmp9syf_kwh.rs:4:27\n  |\n4 |     let mut dirty_chars = HashSet::new();\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    let mut second_string_chars = second_string.chars().collect::<Vec<char>>();\n    for c in string.chars() {\n        if !second_string_chars.contains(&c) {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1665510620,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    let mut dirty_chars = HashSet::new();\n    for c in second_string.chars() {\n        dirty_chars.insert(c);\n    }\n    for c in string.chars() {\n        if !dirty_chars.contains(&c) {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1665510620,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmp8pw8drj3.rs:4:27\n  |\n4 |     let mut dirty_chars = HashSet::new();\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    let mut dirty_chars = HashSet::new();\n    for c in second_string.chars() {\n        dirty_chars.insert(c);\n    }\n    for c in string.chars() {\n        if !dirty_chars.contains(&c) {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1665510620,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmp8pw8drj3.rs:4:27\n  |\n4 |     let mut dirty_chars = HashSet::new();\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    let mut dirty_chars = HashSet::new();\n    for c in second_string.chars() {\n        dirty_chars.insert(c);\n    }\n    for c in string.chars() {\n        if !dirty_chars.contains(&c) {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1665510620,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmp8pw8drj3.rs:4:27\n  |\n4 |     let mut dirty_chars = HashSet::new();\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    let mut dirty_chars = HashSet::new();\n\n    for c in second_string.chars() {\n        dirty_chars.insert(c);\n    }\n\n    for c in string.chars() {\n        if !dirty_chars.contains(&c) {\n            result.push(c);\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1665510620,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmp9syf_kwh.rs:4:27\n  |\n4 |     let mut dirty_chars = HashSet::new();\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    let mut dirty_chars: Vec<char> = second_string.chars().collect();\n\n    for c in string.chars() {\n        if !dirty_chars.contains(&c) {\n            result.push(c);\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1666124130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    let mut dirty_chars = HashSet::new();\n    for c in second_string.chars() {\n        dirty_chars.insert(c);\n    }\n\n    for c in string.chars() {\n        if !dirty_chars.contains(&c) {\n            result.push(c);\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1666124128,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmpra8lkqn3.rs:4:27\n  |\n4 |     let mut dirty_chars = HashSet::new();\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    let mut chars_to_remove = HashSet::new();\n    for c in second_string.chars() {\n        chars_to_remove.insert(c);\n    }\n\n    for c in string.chars() {\n        if !chars_to_remove.contains(&c) {\n            result.push(c);\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1666124128,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmpiamz8x0k.rs:4:31\n  |\n4 |     let mut chars_to_remove = HashSet::new();\n  |                               ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    let mut second_string_chars: Vec<char> = second_string.chars().collect();\n    for c in string.chars() {\n        if !second_string_chars.contains(&c) {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1666124130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    let mut second_string_chars = second_string.chars();\n    let mut second_string_chars_set = HashSet::new();\n    while let Some(c) = second_string_chars.next() {\n        second_string_chars_set.insert(c);\n    }\n\n    for c in string.chars() {\n        if !second_string_chars_set.contains(&c) {\n            result.push(c);\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmpspmo3bd_.rs:5:39\n  |\n5 |     let mut second_string_chars_set = HashSet::new();\n  |                                       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    let mut dirty_chars = HashSet::new();\n    for c in second_string.chars() {\n        dirty_chars.insert(c);\n    }\n\n    for c in string.chars() {\n        if !dirty_chars.contains(&c) {\n            result.push(c);\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1666124128,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmpra8lkqn3.rs:4:27\n  |\n4 |     let mut dirty_chars = HashSet::new();\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut clean_string = String::new();\n    for c in string.chars() {\n        if !second_string.contains(c) {\n            clean_string.push(c);\n        }\n    }\n    clean_string\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1666124130,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    for c in string.chars() {\n        if !second_string.contains(c) {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1665510620,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    let mut dirty_chars = HashSet::new();\n    for c in second_string.chars() {\n        dirty_chars.insert(c);\n    }\n    for c in string.chars() {\n        if !dirty_chars.contains(&c) {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1665510620,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmp8pw8drj3.rs:4:27\n  |\n4 |     let mut dirty_chars = HashSet::new();\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    let mut dirty_chars = HashSet::new();\n    for c in second_string.chars() {\n        dirty_chars.insert(c);\n    }\n    for c in string.chars() {\n        if !dirty_chars.contains(&c) {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1665510620,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmp8pw8drj3.rs:4:27\n  |\n4 |     let mut dirty_chars = HashSet::new();\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    let mut second_string_chars = second_string.chars();\n    let mut second_string_chars_set = HashSet::new();\n    while let Some(c) = second_string_chars.next() {\n        second_string_chars_set.insert(c);\n    }\n    for c in string.chars() {\n        if !second_string_chars_set.contains(&c) {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1666124128,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmp96hyiul4.rs:5:39\n  |\n5 |     let mut second_string_chars_set = HashSet::new();\n  |                                       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    let mut dirty_chars = second_string.chars().collect::<HashSet<char>>();\n    for c in string.chars() {\n        if !dirty_chars.contains(&c) {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmplbidtcn8.rs:4:59\n  |\n4 |     let mut dirty_chars = second_string.chars().collect::<HashSet<char>>();\n  |                                                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0412`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    let mut dirty_chars = HashSet::new();\n    for c in second_string.chars() {\n        dirty_chars.insert(c);\n    }\n    for c in string.chars() {\n        if !dirty_chars.contains(&c) {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1665510620,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmp8pw8drj3.rs:4:27\n  |\n4 |     let mut dirty_chars = HashSet::new();\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    let mut dirty_chars = HashSet::new();\n    for c in second_string.chars() {\n        dirty_chars.insert(c);\n    }\n\n    for c in string.chars() {\n        if !dirty_chars.contains(&c) {\n            result.push(c);\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1666124128,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmpra8lkqn3.rs:4:27\n  |\n4 |     let mut dirty_chars = HashSet::new();\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut clean_string = String::new();\n    let mut dirty_chars = HashSet::new();\n    for c in second_string.chars() {\n        dirty_chars.insert(c);\n    }\n    for c in string.chars() {\n        if !dirty_chars.contains(&c) {\n            clean_string.push(c);\n        }\n    }\n    clean_string\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1665510620,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmp1smize_l.rs:4:27\n  |\n4 |     let mut dirty_chars = HashSet::new();\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    let mut dirty_chars = HashSet::new();\n    for c in second_string.chars() {\n        dirty_chars.insert(c);\n    }\n    for c in string.chars() {\n        if !dirty_chars.contains(&c) {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1665510620,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmp8pw8drj3.rs:4:27\n  |\n4 |     let mut dirty_chars = HashSet::new();\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    let mut dirty_chars = HashSet::new();\n    for ch in second_string.chars() {\n        dirty_chars.insert(ch);\n    }\n    for ch in string.chars() {\n        if !dirty_chars.contains(&ch) {\n            result.push(ch);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1666124128,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmpuile3nnm.rs:4:27\n  |\n4 |     let mut dirty_chars = HashSet::new();\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    let mut dirty_chars = HashSet::new();\n    for c in second_string.chars() {\n        dirty_chars.insert(c);\n    }\n    for c in string.chars() {\n        if !dirty_chars.contains(&c) {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1665510620,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmp8pw8drj3.rs:4:27\n  |\n4 |     let mut dirty_chars = HashSet::new();\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut clean_string = String::new();\n    let mut dirty_chars = HashSet::new();\n    for c in second_string.chars() {\n        dirty_chars.insert(c);\n    }\n    for c in string.chars() {\n        if !dirty_chars.contains(&c) {\n            clean_string.push(c);\n        }\n    }\n    clean_string\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1665510620,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmp1smize_l.rs:4:27\n  |\n4 |     let mut dirty_chars = HashSet::new();\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    let mut dirty_chars = HashSet::new();\n    for c in second_string.chars() {\n        dirty_chars.insert(c);\n    }\n    for c in string.chars() {\n        if !dirty_chars.contains(&c) {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1665510620,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmp8pw8drj3.rs:4:27\n  |\n4 |     let mut dirty_chars = HashSet::new();\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    let mut dirty_chars = HashSet::new();\n    for c in second_string.chars() {\n        dirty_chars.insert(c);\n    }\n    for c in string.chars() {\n        if !dirty_chars.contains(&c) {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1665510620,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmp8pw8drj3.rs:4:27\n  |\n4 |     let mut dirty_chars = HashSet::new();\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    let mut dirty_chars: HashSet<char> = HashSet::new();\n    for c in second_string.chars() {\n        dirty_chars.insert(c);\n    }\n    for c in string.chars() {\n        if !dirty_chars.contains(&c) {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1666124128,
      "stdout": "",
      "stderr": "error[E0412]: cannot find type `HashSet` in this scope\n --> /tmp/tmp2izjlv5k.rs:4:26\n  |\n4 |     let mut dirty_chars: HashSet<char> = HashSet::new();\n  |                          ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmp2izjlv5k.rs:4:42\n  |\n4 |     let mut dirty_chars: HashSet<char> = HashSet::new();\n  |                                          ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0412, E0433.\nFor more information about an error, try `rustc --explain E0412`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    let mut dirty_chars = HashSet::new();\n\n    for c in second_string.chars() {\n        dirty_chars.insert(c);\n    }\n\n    for c in string.chars() {\n        if !dirty_chars.contains(&c) {\n            result.push(c);\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1665510620,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmp9syf_kwh.rs:4:27\n  |\n4 |     let mut dirty_chars = HashSet::new();\n  |                           ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to remove characters from the first string which are present in the second string.\nfn remove_dirty_chars(string: String, second_string: String) -> String {\n    let mut result = String::new();\n    let mut second_string_chars = second_string.chars().collect::<Vec<char>>();\n    for c in string.chars() {\n        if !second_string_chars.contains(&c) {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_dirty_chars;\n    assert_eq!(candidate(String::from(\"probasscurve\"), String::from(\"pros\")), String::from(\"bacuve\"));\n    assert_eq!(candidate(String::from(\"digitalindia\"), String::from(\"talent\")), String::from(\"digiidi\"));\n    assert_eq!(candidate(String::from(\"exoticmiles\"), String::from(\"toxic\")), String::from(\"emles\"));\n}\n",
      "timestamp": 1665510620,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}