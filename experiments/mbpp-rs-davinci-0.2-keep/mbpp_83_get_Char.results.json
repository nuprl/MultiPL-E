{
  "name": "mbpp_83_get_Char",
  "language": "rs",
  "prompt": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_83_get_Char.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let mut ch = (sum % 26) as u8;\n    if ch == 0 {\n        ch = 26;\n    }\n    let ch = (ch + 64) as char;\n    ch.to_string()\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmp5d9t9soh.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let res = sum % 26;\n    let res = res as u8;\n    let res = res + 65;\n    let res = res as char;\n    let res = res.to_string();\n    res\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmpjs651r5g.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u32;\n    }\n    let res = sum % 26;\n    let mut result = String::new();\n    result.push((res + 97) as u8 as char);\n    result\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"i\"`,\n right: `\"f\"`', /tmp/tmpdw1ebwch.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let mut ch = (sum % 26) as u8;\n    if ch == 0 {\n        ch = 122;\n    } else {\n        ch += 96;\n    }\n    let mut s = String::new();\n    s.push(ch as char);\n    s\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmp9mjaqv9b.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let mut ch = (sum % 26) as u8 + 65;\n    if ch > 90 {\n        ch = ch - 26;\n    }\n    let s = ch as char;\n    s.to_string()\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmpanyaz3h7.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u32;\n    }\n    let sum = sum % 26;\n    let mut result = String::new();\n    result.push((sum + 97) as u8 as char);\n    result\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"i\"`,\n right: `\"f\"`', /tmp/tmpz818w96g.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let mut sum = sum % 26;\n    let mut res = String::new();\n    res.push((sum + 97) as char);\n    res\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmpskr4ftga.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let res = sum % 26;\n    let ch = (res + 97) as u8;\n    let ch = ch as char;\n    ch.to_string()\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmpl2ap_rsy.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u32;\n    }\n    let res = sum % 26;\n    let ch = (res + 97) as u8;\n    let ch = ch as char;\n    format!(\"{}\", ch)\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"i\"`,\n right: `\"f\"`', /tmp/tmpe0wv8hr2.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let res = (sum % 26) as u8;\n    let res_char = res as char;\n    let res_str = res_char.to_string();\n    res_str\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmpfsuql6i7.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u32;\n    }\n    let res = (sum % 26) as u8;\n    let res = res + 65;\n    let res = res as char;\n    res.to_string()\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"I\"`,\n right: `\"f\"`', /tmp/tmpmt4cv045.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let res = sum % 26;\n    let res = res + 65;\n    let res = res as u8 as char;\n    format!(\"{}\", res)\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmp2lq2nzjf.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u32;\n    }\n    let mut res = (sum % 26) as u8;\n    res += 65;\n    return res.to_string();\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"73\"`,\n right: `\"f\"`', /tmp/tmpqdzcfykc.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let ch = (sum % 26) as u8 + 97;\n    let ch = ch as char;\n    ch.to_string()\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmppj0e9cdt.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let mut ch = (sum % 26) as u8;\n    if ch == 0 {\n        ch = 122;\n    } else {\n        ch += 96;\n    }\n    let mut s = String::new();\n    s.push(ch as char);\n    s\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmp9mjaqv9b.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u32;\n    }\n    let mut result = (sum % 26) as u8;\n    result += 65;\n    let mut res = String::new();\n    res.push(result as char);\n    res\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"I\"`,\n right: `\"f\"`', /tmp/tmpfrinw36e.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let res = sum % 26;\n    let result = (res + 65) as char;\n    return result.to_string();\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmpy_066ugl.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let res = sum % 26;\n    let res = res as u8;\n    let res = res + 65;\n    let res = res as char;\n    let res = res.to_string();\n    res\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmpjs651r5g.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u32;\n    }\n    let res = (sum % 26) as u8;\n    let res = res + 65;\n    let res = res as char;\n    let res = res.to_string();\n    res\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"I\"`,\n right: `\"f\"`', /tmp/tmp37jzrwy8.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u32;\n    }\n    let res = sum % 26;\n    let mut res_char = 'a';\n    for i in 0..26 {\n        if i == res {\n            res_char = (i + 97) as u8 as char;\n        }\n    }\n    res_char.to_string()\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"i\"`,\n right: `\"f\"`', /tmp/tmpw4m19s6a.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    let mut res = String::new();\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    res.push((sum % 26 + 97) as char);\n    res\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123799,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmppwy4kxbl.rs:6:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let mut res = (sum % 26) as u8;\n    if res == 0 {\n        res = 26;\n    }\n    let mut result = String::new();\n    result.push((res + 64) as char);\n    result\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123799,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmprtwc6kyj.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u32;\n    }\n    let res = (sum % 26) as u8 + 65;\n    format!(\"{}\", res as char)\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123799,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"I\"`,\n right: `\"f\"`', /tmp/tmp6ayte42a.rs:13:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let res = (sum % 26) as u8;\n    let res = res + 65;\n    let res = res as char;\n    let res = res.to_string();\n    res\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123799,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmp9g2ersox.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u32;\n    }\n    let res = (sum % 26) as u8 + 65;\n    return res.to_string();\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123799,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"73\"`,\n right: `\"f\"`', /tmp/tmpkauvgtll.rs:13:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let mut ch = (sum % 26) as u8;\n    ch += 65;\n    let ch = ch as char;\n    let mut s = String::new();\n    s.push(ch);\n    s\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123799,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmpcqdsmzda.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let res = (sum % 26) as u8;\n    let res = res + 65;\n    let res = res as char;\n    let res = res.to_string();\n    res\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123799,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmp9g2ersox.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let sum = sum % 26;\n    let c = (sum + 97) as u8;\n    let c = c as char;\n    c.to_string()\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123799,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmpvb59hpxh.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let sum = sum % 26;\n    let mut ch = 'a' as u8;\n    ch += sum;\n    let ch = ch as char;\n    ch.to_string()\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123799,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmpkdagwtta.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for c in strr.chars() {\n        sum += c as u8;\n    }\n    let c = (sum % 26) as u8 + 65;\n    return c.to_string();\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123799,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmpjgkn5d8b.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u32;\n    }\n    let mut res = (sum % 26) as u8 + 65;\n    let mut result = String::new();\n    result.push(res as char);\n    result\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123799,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"I\"`,\n right: `\"f\"`', /tmp/tmpusxbkh69.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let mut res = (sum % 26) as u8;\n    if res == 0 {\n        res = 26;\n    }\n    let mut result = String::new();\n    result.push((res + 96) as char);\n    result\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123799,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmpngf9d_15.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let ch = (sum % 26 + 65) as u8;\n    let ch = ch as char;\n    ch.to_string()\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123799,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmptat5e6e9.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u32;\n    }\n    let res = (sum % 26) as u8;\n    let res = res + 65;\n    let res = res as char;\n    res.to_string()\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"I\"`,\n right: `\"f\"`', /tmp/tmpmt4cv045.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let result = sum % 26;\n    let result = result as u8;\n    let result = result + 65;\n    let result = result as char;\n    let result = result.to_string();\n    result\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123799,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmp98yd6y_o.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for ch in strr.chars() {\n        sum += ch as u8;\n    }\n    let res = (sum % 26) as u8;\n    let ch = res + 65;\n    let ch = ch as char;\n    ch.to_string()\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123799,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmpq0h6s4v7.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as i32;\n    }\n    let mut ch = (sum % 26) as u8;\n    ch += 65;\n    let mut s = String::new();\n    s.push(ch as char);\n    s\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123799,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"I\"`,\n right: `\"f\"`', /tmp/tmpxrn4ri4e.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let modulo = sum % 26;\n    let c = (modulo + 97) as u8;\n    let ch = c as char;\n    ch.to_string()\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123799,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmp51xb0txc.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u32;\n    }\n    let res = (sum % 26) as u8 + 65;\n    return String::from_utf8(vec![res]).unwrap();\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123799,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"I\"`,\n right: `\"f\"`', /tmp/tmpk5th0dgi.rs:13:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let sum = sum % 26;\n    let sum = sum + 97;\n    let sum = sum as u8 as char;\n    let sum = sum.to_string();\n    sum\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123799,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmptkettoh6.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let result = sum % 26;\n    let result = result as u8;\n    let result = result + 97;\n    let result = result as char;\n    let result = result.to_string();\n    result\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123799,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmpjhnekbpd.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u32;\n    }\n    let mut res = (sum % 26) as u8;\n    res += 65;\n    let res = res as char;\n    res.to_string()\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123799,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"I\"`,\n right: `\"f\"`', /tmp/tmp5swqfseh.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut char_list: Vec<char> = strr.chars().collect();\n    let mut sum: u32 = 0;\n    for i in char_list {\n        sum += i as u32;\n    }\n    let mut res: u32 = sum % 26;\n    let mut result: char = (res + 97) as u8 as char;\n    return result.to_string();\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123799,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"i\"`,\n right: `\"f\"`', /tmp/tmpofx4bjtr.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u32;\n    }\n    let mut char_str = String::new();\n    char_str.push((sum % 26 + 97) as u8 as char);\n    char_str\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123799,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"i\"`,\n right: `\"f\"`', /tmp/tmpojb8nq64.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let sum = sum % 26;\n    let mut ch = 'a' as u8;\n    for _i in 0..sum {\n        ch += 1;\n    }\n    let ch = ch as char;\n    return ch.to_string();\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123799,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmplggteru7.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let res = sum % 26;\n    let res = res as u8;\n    let res = res + 65;\n    let res = res as char;\n    let res = res.to_string();\n    res\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmpjs651r5g.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u32;\n    }\n    let res = (sum % 26) as u8;\n    let res = (res + 65) as char;\n    res.to_string()\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123799,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"I\"`,\n right: `\"f\"`', /tmp/tmpthqmw_m6.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let sum = sum % 26;\n    let c = (sum + 97) as u8;\n    let c = c as char;\n    c.to_string()\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123799,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmpvb59hpxh.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let mut result = sum % 26;\n    if result == 0 {\n        result = 26;\n    }\n    let mut result_char = (result + 96) as char;\n    result_char.to_string()\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123799,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmp4dgrmgkf.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let ch = (sum % 26) as u8 + 65;\n    return ch.to_string();\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123799,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmpxz0o7nn9.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u32;\n    }\n    let sum = sum % 26;\n    let mut c = 'a';\n    for _ in 0..sum {\n        c = c.next().unwrap();\n    }\n    c.to_string()\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123799,
      "stdout": "",
      "stderr": "error[E0599]: no method named `next` found for type `char` in the current scope\n  --> /tmp/tmpncuelhfx.rs:10:15\n   |\n10 |         c = c.next().unwrap();\n   |               ^^^^ method not found in `char`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0599`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u32;\n    }\n    let res = sum % 26;\n    let res = res as u8 + 65;\n    let res = res as char;\n    res.to_string()\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123799,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"I\"`,\n right: `\"f\"`', /tmp/tmpr8xiqgwf.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u32;\n    }\n    let res = sum % 26;\n    let ch = (res + 97) as u8;\n    let ch = ch as char;\n    ch.to_string()\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123799,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"i\"`,\n right: `\"f\"`', /tmp/tmp_gd92n_m.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let ch = (sum % 26) as u8 + 65;\n    let chr = ch as char;\n    chr.to_string()\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123799,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmpcx283jv_.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let mut result = sum % 26;\n    if result == 0 {\n        result = 26;\n    }\n    let result = (result + 64) as u8;\n    let result = result as char;\n    result.to_string()\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123799,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmpev4h3a0d.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let ch = (sum % 26 + 97) as u8;\n    let ch = ch as char;\n    ch.to_string()\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123799,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmp_1_jql9o.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let mut res = sum % 26;\n    res += 65;\n    let res = res as u8 as char;\n    res.to_string()\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123799,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmpk9ckxl18.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let mut res = sum % 26;\n    if res == 0 {\n        res = 26;\n    }\n    let mut s = String::new();\n    s.push((res + 64) as char);\n    s\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123799,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmpgc859ehz.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u32;\n    }\n    let res = (sum % 26) as u8 + 65;\n    return res.to_string();\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123799,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"73\"`,\n right: `\"f\"`', /tmp/tmpkauvgtll.rs:13:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let mut modulo = sum % 26;\n    if modulo == 0 {\n        modulo = 26;\n    }\n    let mut res = (modulo + 96) as char;\n    res.to_string()\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123799,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmpv7_c9zb0.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let res = sum % 26;\n    let c = (res + 65) as u8 as char;\n    c.to_string()\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123799,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmpk36tpuse.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let ch = (sum % 26) as u8 + 97;\n    let ch = ch as char;\n    let mut s = String::new();\n    s.push(ch);\n    s\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123799,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmpc3v3uzgh.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u32;\n    }\n    let mut result = (sum % 26) as u8;\n    result += 65;\n    let result = result as char;\n    result.to_string()\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123799,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"I\"`,\n right: `\"f\"`', /tmp/tmpwzzs6gr8.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let sum = sum % 26;\n    let ch = (sum + 97) as u8;\n    let ch = ch as char;\n    let mut s = String::new();\n    s.push(ch);\n    s\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123799,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmpxjzw9etu.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u32;\n    }\n    let mut res = (sum % 26) as u8;\n    res += 65;\n    let mut result = String::new();\n    result.push(res as char);\n    result\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123799,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"I\"`,\n right: `\"f\"`', /tmp/tmp9wuzarzd.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u32;\n    }\n    let c = (sum % 26 + 97) as u8;\n    let s = String::from_utf8(vec![c]).unwrap();\n    s\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123799,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"i\"`,\n right: `\"f\"`', /tmp/tmp_eagfwyr.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let mut res = sum % 26;\n    res += 65;\n    let res = res as u8 as char;\n    let mut res = res.to_string();\n    res\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123799,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmpk5qxlbn_.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    let mut result = String::new();\n    for i in strr.chars() {\n        sum += i as u32;\n    }\n    let sum = sum % 26;\n    result.push((sum + 97) as u8 as char);\n    result\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123799,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"i\"`,\n right: `\"f\"`', /tmp/tmpwi181y0r.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let mut res = sum % 26;\n    res += 65;\n    let res = res as u8 as char;\n    res.to_string()\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123799,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmpk9ckxl18.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let ch = (sum % 26) as u8 + 65;\n    return ch.to_string();\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123799,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmpxz0o7nn9.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let sum = sum % 26;\n    let c = (sum + 65) as u8;\n    let c = c as char;\n    c.to_string()\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123799,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmp9jelkrot.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u32;\n    }\n    let mut res = (sum % 26) as u8;\n    res += 65;\n    let mut s = String::new();\n    s.push(res as char);\n    s\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123799,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"I\"`,\n right: `\"f\"`', /tmp/tmpyar8xy7k.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let char_code = sum % 26;\n    let ch = (char_code + 97) as u8;\n    let ch = ch as char;\n    ch.to_string()\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123799,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmp32o6syde.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let res = sum % 26;\n    let res = res as u8 + 65;\n    let res = res as char;\n    res.to_string()\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123799,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmp_700wugs.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let sum = sum % 26;\n    let mut result = String::new();\n    result.push((sum + 65) as char);\n    result\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123799,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmps3dk9a2j.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u32;\n    }\n    let res = (sum % 26) as u8 + 65;\n    return res.to_string();\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123799,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"73\"`,\n right: `\"f\"`', /tmp/tmpkauvgtll.rs:13:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u32;\n    }\n    let res = (sum % 26) as u8 + 65;\n    return res.to_string();\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123799,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"73\"`,\n right: `\"f\"`', /tmp/tmpkauvgtll.rs:13:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u32;\n    }\n    let res = sum % 26;\n    let res = res + 97;\n    let res = res as u8 as char;\n    res.to_string()\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123799,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"i\"`,\n right: `\"f\"`', /tmp/tmpn3ou1l4p.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for c in strr.chars() {\n        sum += c as u8;\n    }\n    let modulo = sum % 26;\n    let result = (modulo + 97) as char;\n    return result.to_string();\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123799,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmp5o0aepwc.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let mut res = (sum % 26) as u8;\n    res += 65;\n    let res = res as char;\n    res.to_string()\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123799,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmp52twauoo.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u32;\n    }\n    let sum = sum % 26;\n    let mut result = String::new();\n    result.push((sum + 65) as u8 as char);\n    result\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123800,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"I\"`,\n right: `\"f\"`', /tmp/tmpdv0ovseq.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let sum = sum % 26;\n    let c = (sum + 65) as u8;\n    let c = c as char;\n    return c.to_string();\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123800,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmp3se0p86y.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let res = (sum % 26) as u8 + 65;\n    let res = res as char;\n    res.to_string()\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123800,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmp3vn_bds1.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u32;\n    }\n    let sum = sum % 26;\n    let mut result = String::new();\n    result.push((sum + 97) as u8 as char);\n    result\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"i\"`,\n right: `\"f\"`', /tmp/tmpz818w96g.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u32;\n    }\n    let mut result = (sum % 26) as u8;\n    result += 65;\n    let result_char = result as char;\n    format!(\"{}\", result_char)\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123800,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"I\"`,\n right: `\"f\"`', /tmp/tmptbdu5pjm.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let res = sum % 26;\n    let res = res as u8 + 65;\n    let res = res as char;\n    res.to_string()\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123799,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmp_700wugs.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let sum = sum % 26;\n    let sum = sum as u8 + 65;\n    let sum = sum as char;\n    let mut s = String::new();\n    s.push(sum);\n    s\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123800,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmp4lhrit_7.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let sum = sum % 26;\n    let c = (sum + 65) as u8;\n    return c.to_string();\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123800,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmpgk0wkiua.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u32;\n    }\n    let result = sum % 26;\n    let result = (result + 97) as u8;\n    let result = result as char;\n    result.to_string()\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123800,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"i\"`,\n right: `\"f\"`', /tmp/tmp6b4_h6de.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let ch = (sum % 26 + 97) as u8;\n    let chr = ch as char;\n    chr.to_string()\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123800,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmpq3rmzuh_.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u32;\n    }\n    let mut strr = String::new();\n    strr.push(((sum % 26) + 97) as u8 as char);\n    strr\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123800,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"i\"`,\n right: `\"f\"`', /tmp/tmp9jwqv0iw.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let res = sum % 26;\n    let res = res + 65;\n    let res = res as u8 as char;\n    let res = res.to_string();\n    res\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123800,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmpkfu2tvhh.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u32;\n    }\n    let ch = (sum % 26 + 97) as u8;\n    let ch = ch as char;\n    ch.to_string()\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123800,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"i\"`,\n right: `\"f\"`', /tmp/tmppjv2us1u.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u32;\n    }\n    let res = sum % 26;\n    let res = res as u8;\n    let res = res as char;\n    let mut res = res.to_string();\n    res.push_str(\"\\n\");\n    res\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123800,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"\\u{8}\\n\"`,\n right: `\"f\"`', /tmp/tmpetfqbp7c.rs:17:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let mut sum = sum % 26;\n    let mut ch = 'a' as u8;\n    ch += sum;\n    let ch = ch as char;\n    ch.to_string()\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123800,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmpdepctrki.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let sum = sum % 26;\n    let mut s = String::new();\n    s.push((sum + 97) as char);\n    s\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123800,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmprgfg7h0h.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u32;\n    }\n    let res = sum % 26;\n    let res = res as u8 + 65;\n    let res = res as char;\n    let res = res.to_string();\n    res\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123800,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"I\"`,\n right: `\"f\"`', /tmp/tmphmd14ia3.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for c in strr.chars() {\n        sum += c as u8;\n    }\n    let mut res = (sum % 26) as u8;\n    res += 65;\n    let res = res as char;\n    res.to_string()\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123800,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmpbajsp0ao.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let ch = (sum % 26 + 97) as u8;\n    return format!(\"{}\", ch as char);\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123800,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmpmjd3qkf5.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let res = (sum % 26) as u8;\n    let res = res + 97;\n    let res = res as char;\n    res.to_string()\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123800,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmptrt3v9j2.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let res = (sum % 26) as u8;\n    let res = res + 65;\n    let res = res as char;\n    format!(\"{}\", res)\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123800,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmpba_pxf4t.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let mut ch = (sum % 26) as u8;\n    ch += 65;\n    let ch = ch as char;\n    let mut s = String::new();\n    s.push(ch);\n    s\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123799,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmpcqdsmzda.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let mut res = (sum % 26) as u8;\n    if res == 0 {\n        res = 26;\n    }\n    let mut res_str = String::new();\n    res_str.push((res + 64) as char);\n    res_str\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123800,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmpn4alkeac.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let res = sum % 26;\n    let res = res as u8;\n    let res = res + 65;\n    let res = res as char;\n    let res = res.to_string();\n    res\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmpjs651r5g.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u32;\n    }\n    let res = (sum % 26) as u8;\n    let res = res + 65;\n    let res = res as char;\n    let res = res.to_string();\n    res\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"I\"`,\n right: `\"f\"`', /tmp/tmp37jzrwy8.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let modulo = sum % 26;\n    let ch = (modulo + 97) as u8;\n    let chr = ch as char;\n    chr.to_string()\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123800,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmp53sqqdp4.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u32;\n    }\n    let res = sum % 26;\n    let mut res_str = String::new();\n    res_str.push((res + 65) as u8 as char);\n    res_str\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123800,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"I\"`,\n right: `\"f\"`', /tmp/tmpb1p2vls0.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let res = (sum % 26) as u8;\n    let res = res + 65;\n    let res = res as char;\n    res.to_string()\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123800,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmpq8wjo24z.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let mut sum = sum % 26;\n    let mut ch = (sum + 65) as u8;\n    let mut ch = ch as char;\n    let mut s = ch.to_string();\n    return s;\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123800,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmpb1gd_w1n.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let s = (sum % 26) as u8;\n    let c = s + 65;\n    let s = c as char;\n    s.to_string()\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123800,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmpe93s1iy_.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u32;\n    }\n    let sum = sum % 26;\n    let ch = (sum + 65) as u8 as char;\n    ch.to_string()\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123800,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"I\"`,\n right: `\"f\"`', /tmp/tmpxi95m_q0.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let res = (sum % 26) as u8 + 65;\n    let res = res as char;\n    res.to_string()\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123800,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmp3vn_bds1.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let mut result = (sum % 26) as u8;\n    if result == 0 {\n        result = 26;\n    }\n    let mut result_char = (result + 64) as char;\n    result_char.to_string()\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123800,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmpns4z_ceh.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let res = (sum % 26) as u8;\n    let ch = res as char;\n    ch.to_string()\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123800,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmp_fdyyc6d.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let res = (sum % 26) as u8 + 65;\n    let res = res as char;\n    res.to_string()\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123800,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmp3vn_bds1.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let ch = (sum % 26) as u8 + 65;\n    let ch = ch as char;\n    ch.to_string()\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123800,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmpvd_ljp8q.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u32;\n    }\n    let res = sum % 26;\n    let ch = (res + 97) as u8;\n    let ch = ch as char;\n    ch.to_string()\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123799,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"i\"`,\n right: `\"f\"`', /tmp/tmp_gd92n_m.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u32;\n    }\n    let res = sum % 26;\n    let res = res as u8 + 65;\n    let res = res as char;\n    res.to_string()\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123799,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"I\"`,\n right: `\"f\"`', /tmp/tmpr8xiqgwf.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let res = sum % 26;\n    let res = res as u8 + 65;\n    let res = res as char;\n    let res = res.to_string();\n    res\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123800,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmpqp6fwz7u.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let ch = (sum % 26 + 97) as u8;\n    let ch = ch as char;\n    let mut s = String::new();\n    s.push(ch);\n    s\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123800,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmp61n0xdnq.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let mut res = (sum % 26) as u8;\n    res += 65;\n    let res = res as char;\n    res.to_string()\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123799,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmp52twauoo.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let res = sum % 26;\n    let ch = (res + 65) as u8 as char;\n    ch.to_string()\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123800,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmptywmq31j.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let sum = sum % 26;\n    let sum = sum as u8;\n    let sum = sum + 65;\n    let sum = sum as char;\n    let sum = sum.to_string();\n    sum\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123800,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmp2g1x3fie.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let sum = sum % 26;\n    let c = (sum + 65) as u8;\n    let c = c as char;\n    c.to_string()\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123799,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmp9jelkrot.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let res = (sum % 26) as u8;\n    let res = res + 65;\n    let res = res as char;\n    res.to_string()\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123800,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmpq8wjo24z.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let mut res = (sum % 26) as u8;\n    res += 65;\n    let mut s = String::new();\n    s.push(res as char);\n    s\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123800,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmpy6y2kk9o.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let mut result = (sum % 26) as u8;\n    result += 65;\n    let result = result as char;\n    result.to_string()\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123800,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmpnobnzo0z.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as i32;\n    }\n    let res = (sum % 26) as u8;\n    let res = res + 97;\n    let res = res as char;\n    res.to_string()\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123800,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"i\"`,\n right: `\"f\"`', /tmp/tmpbn0ndi32.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let mut result = sum % 26;\n    if result == 0 {\n        result = 26;\n    }\n    let result = (result + 96) as u8 as char;\n    result.to_string()\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123800,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmpo_56p3iv.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let sum = sum % 26;\n    let mut ch = 'a' as u8;\n    for i in 0..sum {\n        ch += 1;\n    }\n    return ch.to_string();\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123800,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmpg0ovcazz.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u32;\n    }\n    let res = (sum % 26) as u8 + 65;\n    let res = res as char;\n    res.to_string()\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123800,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"I\"`,\n right: `\"f\"`', /tmp/tmpzuo5m6t3.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u32;\n    }\n    let res = sum % 26;\n    let res = res as u8 + 65;\n    let res = res as char;\n    res.to_string()\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123799,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"I\"`,\n right: `\"f\"`', /tmp/tmpr8xiqgwf.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u32;\n    }\n    let res = sum % 26;\n    let mut ch = 'a';\n    for _ in 0..res {\n        ch = (ch as u8 + 1) as char;\n    }\n    ch.to_string()\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123800,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"i\"`,\n right: `\"f\"`', /tmp/tmp9hwm77v4.rs:17:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u32;\n    }\n    let res = (sum % 26) as u8 + 65;\n    return res.to_string();\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123799,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"73\"`,\n right: `\"f\"`', /tmp/tmpkauvgtll.rs:13:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u32;\n    }\n    let mut res = (sum % 26) as u8;\n    res += 65;\n    let mut res_str = String::new();\n    res_str.push(res as char);\n    res_str\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123800,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"I\"`,\n right: `\"f\"`', /tmp/tmpzdq8a09b.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let ch = (sum % 26) as u8 + 97;\n    return format!(\"{}\", ch as char);\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123800,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmp2whjx2du.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let mut res = (sum % 26) as u8;\n    res += 65;\n    let res = res as char;\n    res.to_string()\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123799,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmp52twauoo.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum: u32 = 0;\n    for i in strr.chars() {\n        sum += i as u32;\n    }\n    let res = sum % 26;\n    let res = res + 97;\n    let res = res as u8 as char;\n    let res = res.to_string();\n    res\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123800,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"i\"`,\n right: `\"f\"`', /tmp/tmpu8vtf9ui.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u32;\n    }\n    let res = sum % 26;\n    let res = res as u8;\n    let res = res as char;\n    let res = res.to_string();\n    res\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123800,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"\\u{8}\"`,\n right: `\"f\"`', /tmp/tmpqu5yf1v9.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let mut res = (sum % 26) as u8;\n    let mut result = String::new();\n    result.push(res as char);\n    result\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123800,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmpw5m_6yem.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut res = 0;\n    for i in strr.chars() {\n        res += i as u8;\n    }\n    res = res % 26;\n    let mut res_str = String::new();\n    res_str.push((res + 97) as char);\n    res_str\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123800,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmp7btlnz62.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let mut ch = (sum % 26) as u8;\n    ch += 65;\n    let ch = ch as char;\n    let mut strr = String::new();\n    strr.push(ch);\n    strr\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123800,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmpf2qkdsaz.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let sum = sum % 26;\n    let sum = sum + 65;\n    let sum = sum as u8;\n    let sum = sum as char;\n    let sum = sum.to_string();\n    sum\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123800,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmpqh8585p_.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let res = (sum % 26) as u8;\n    let res = res + 97;\n    let res = res as char;\n    let res = res.to_string();\n    res\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123800,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmp1wi5md_q.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u32;\n    }\n    let mut res = (sum % 26) as u8;\n    res += 65;\n    let res = res as char;\n    res.to_string()\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123799,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"I\"`,\n right: `\"f\"`', /tmp/tmp5swqfseh.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let res = (sum % 26) as u8 + 65;\n    let res = res as char;\n    res.to_string()\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123800,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmp3vn_bds1.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    let mut res = String::new();\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    sum = sum % 26;\n    res.push((sum + 97) as char);\n    res\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123800,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmptnfwm5aa.rs:6:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum: i32 = 0;\n    for i in strr.chars() {\n        sum += i as i32;\n    }\n    let mut sum = sum % 26;\n    let mut ch = 'a' as u8;\n    ch += sum as u8;\n    ch.to_string()\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123800,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"105\"`,\n right: `\"f\"`', /tmp/tmpua75ipu0.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u32;\n    }\n    let mut res = (sum % 26) as u8;\n    res += 65;\n    let res = res as char;\n    res.to_string()\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123799,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"I\"`,\n right: `\"f\"`', /tmp/tmp5swqfseh.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let res = sum % 26;\n    let res = res as u8;\n    let res = res + 65;\n    let res = res as char;\n    let res = res.to_string();\n    res\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmpjs651r5g.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let res = (sum % 26) as u8;\n    let res = res + 65;\n    let res = res as char;\n    let res = res.to_string();\n    res\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123799,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmp9g2ersox.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let sum = sum % 26;\n    let result = (sum + 97) as u8;\n    let result = result as char;\n    result.to_string()\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123800,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmp3qgeg8va.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let sum = sum % 26;\n    let ch = (sum + 97) as u8;\n    let ch = ch as char;\n    ch.to_string()\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123800,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmp7uyt8j1u.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let mut res = (sum % 26) as u8;\n    let mut s = String::new();\n    s.push((res + 65) as char);\n    s\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123800,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmp09cwgn88.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u32;\n    }\n    let res = sum % 26;\n    let res = res as u8 + 65;\n    let res = res as char;\n    res.to_string()\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123799,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"I\"`,\n right: `\"f\"`', /tmp/tmpr8xiqgwf.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let mut res = sum % 26;\n    res += 65;\n    let mut res_str = String::new();\n    res_str.push(res as char);\n    res_str\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123800,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmpe980laey.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let result = (sum % 26) as u8;\n    let result = result + 65;\n    let result = result as char;\n    let result = result.to_string();\n    result\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123800,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmp9_sa1kc7.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for c in strr.chars() {\n        sum += c as u8;\n    }\n    let res = sum % 26;\n    let res_char = (res + 65) as char;\n    return res_char.to_string();\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123800,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmpat_d5i5x.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let mut res = sum % 26;\n    res += 65;\n    let mut s = String::new();\n    s.push(res as char);\n    s\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123800,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmpyjfqdlz1.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u32;\n    }\n    let res = (sum % 26) as u8;\n    let res = res + 65;\n    let res = res as char;\n    format!(\"{}\", res)\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123800,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"I\"`,\n right: `\"f\"`', /tmp/tmpchwbvpq1.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for ch in strr.chars() {\n        sum += ch as u8;\n    }\n    let res = sum % 26;\n    let ch = (res + 65) as u8;\n    let ch = ch as char;\n    let res = ch.to_string();\n    res\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123800,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmp1n14x9p1.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let res = sum % 26;\n    let res = res as u8 + 65;\n    let res = res as char;\n    let res = res.to_string();\n    res\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123800,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmpqp6fwz7u.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u32;\n    }\n    let mut ch = (sum % 26) as u8;\n    ch += 65;\n    let ch = ch as char;\n    ch.to_string()\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123800,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"I\"`,\n right: `\"f\"`', /tmp/tmpvl_43eio.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u32;\n    }\n    let res = sum % 26;\n    let ch = (res + 97) as u8 as char;\n    return ch.to_string();\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123800,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"i\"`,\n right: `\"f\"`', /tmp/tmps3tgcd2z.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let sum = sum % 26;\n    let ch = (sum + 65) as u8;\n    let ch = ch as char;\n    let mut strr = String::new();\n    strr.push(ch);\n    strr\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123800,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmpatjarseb.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u32;\n    }\n    let res = (sum % 26 + 65) as u8 as char;\n    res.to_string()\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123800,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"I\"`,\n right: `\"f\"`', /tmp/tmp0lhaav_z.rs:13:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u32;\n    }\n    let res = sum % 26;\n    let ch = (res + 97) as u8 as char;\n    ch.to_string()\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123800,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"i\"`,\n right: `\"f\"`', /tmp/tmpifshxa5o.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u32;\n    }\n    let sum = sum % 26;\n    let mut result = String::new();\n    result.push((sum + 97) as u8 as char);\n    result\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"i\"`,\n right: `\"f\"`', /tmp/tmpz818w96g.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u32;\n    }\n    let mut res = (sum % 26) as u8;\n    res += 65;\n    let mut s = String::new();\n    s.push(res as char);\n    s\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123799,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"I\"`,\n right: `\"f\"`', /tmp/tmpyar8xy7k.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u32;\n    }\n    let res = sum % 26;\n    let res = res + 97;\n    let res = res as u8 as char;\n    res.to_string()\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123799,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"i\"`,\n right: `\"f\"`', /tmp/tmpn3ou1l4p.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let sum = sum % 26;\n    let ch = (sum + 97) as u8;\n    let ch = ch as char;\n    ch.to_string()\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123800,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmp7uyt8j1u.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let mut res = sum % 26;\n    res += 65;\n    let res = res as char;\n    res.to_string()\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123800,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmp9fgqq5nw.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u32;\n    }\n    let mut res = sum % 26;\n    let mut res_char = (res + 97) as u8;\n    let res_str = res_char as char;\n    let mut res_str = res_str.to_string();\n    res_str\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123800,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"i\"`,\n right: `\"f\"`', /tmp/tmp5k1atrs7.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let res = (sum % 26) as u8;\n    let res_char = (res + 65) as char;\n    let res_str = res_char.to_string();\n    res_str\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123800,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmptclfxzoi.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let res = sum % 26;\n    let res = res as u8 + 65;\n    let res = res as char;\n    res.to_string()\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123799,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmp_700wugs.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    let mut res = String::new();\n    for c in strr.chars() {\n        sum += c as i32;\n    }\n    let mut sum = sum % 26;\n    res.push((sum + 97) as u8 as char);\n    res\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123800,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"i\"`,\n right: `\"f\"`', /tmp/tmpdmsyysdr.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let sum = sum % 26;\n    let ch = (sum + 65) as u8;\n    let ch = ch as char;\n    ch.to_string()\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123800,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmpqd_gqfom.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let res = sum % 26;\n    let mut res_str = String::new();\n    res_str.push(res as char);\n    res_str\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123800,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmpgnq4sjkc.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let res = sum % 26;\n    let res = res as u8 + 65;\n    let res = res as char;\n    let res = res.to_string();\n    res\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123800,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmpqp6fwz7u.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum: i32 = 0;\n    for i in strr.chars() {\n        sum += i as i32;\n    }\n    let res = sum % 26;\n    let res = res as u8;\n    let res = res as char;\n    let res = res.to_string();\n    res\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123800,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"\\u{8}\"`,\n right: `\"f\"`', /tmp/tmprmjlqak5.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum: i32 = 0;\n    for i in strr.chars() {\n        sum += i as i32;\n    }\n    let mut ch = (sum % 26) as u8;\n    ch += 65;\n    let ch = ch as char;\n    ch.to_string()\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123800,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"I\"`,\n right: `\"f\"`', /tmp/tmp_306vkyj.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u32;\n    }\n    let mut ch = (sum % 26) as u8;\n    ch += 65;\n    let c = ch as char;\n    c.to_string()\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123801,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"I\"`,\n right: `\"f\"`', /tmp/tmph_d4x_k0.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let ch = (sum % 26) as u8 + 65;\n    return ch.to_string();\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123799,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmpxz0o7nn9.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let sum = sum % 26;\n    let sum = sum + 65;\n    let sum = sum as u8;\n    let sum = sum as char;\n    let sum = sum.to_string();\n    sum\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123800,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmpqh8585p_.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let mut res = (sum % 26) as u8 + 65;\n    let mut result = String::new();\n    result.push(res as char);\n    result\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123800,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmpg30yhnxc.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let mut res = (sum % 26) as u8;\n    if res == 0 {\n        res = 26;\n    }\n    let mut result = String::new();\n    result.push((res + 96) as char);\n    result\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123799,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmpngf9d_15.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let res = sum % 26;\n    let ch = (res + 65) as u8 as char;\n    ch.to_string()\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123800,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmptywmq31j.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let mut res = sum % 26;\n    let mut ch = (res + 65) as u8;\n    let mut s = String::new();\n    s.push(ch as char);\n    s\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123801,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmpl3wth626.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u32;\n    }\n    let sum = sum % 26;\n    let sum = sum + 65;\n    let sum = sum as u8 as char;\n    let sum = sum.to_string();\n    sum\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123801,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"I\"`,\n right: `\"f\"`', /tmp/tmpreptwv7n.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let res = (sum % 26) as u8;\n    let res_char = (res + 65) as char;\n    res_char.to_string()\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123801,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmp8df_u3lp.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let res = sum % 26;\n    let res = res as u8;\n    let res = res as char;\n    let res = res.to_string();\n    res\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123801,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmpp2e3ygap.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let mut res = (sum % 26) as u8;\n    if res == 0 {\n        res = 26;\n    }\n    let mut result = String::new();\n    result.push((res + 96) as char);\n    result\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123799,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmpngf9d_15.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    let mut result = String::new();\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let sum = sum % 26;\n    result.push(sum as char);\n    result\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123801,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmp3196wlfq.rs:6:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let res = sum % 26;\n    let res = res as u8 + 97;\n    let res = res as char;\n    res.to_string()\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123801,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmpqrfgbstr.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u32;\n    }\n    let sum = sum % 26;\n    let ch = (sum + 97) as u8 as char;\n    format!(\"{}\", ch)\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123801,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"i\"`,\n right: `\"f\"`', /tmp/tmpss1z5shm.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let res = (sum % 26) as u8;\n    let res = res + 97;\n    let res = res as char;\n    res.to_string()\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123800,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmptrt3v9j2.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let res = (sum % 26) as u8;\n    let ch = res as char;\n    return ch.to_string();\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123801,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmp6g_18p3_.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u32;\n    }\n    let res = (sum % 26) as u8;\n    let res = res + 65;\n    let res = res as char;\n    res.to_string()\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1665509675,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"I\"`,\n right: `\"f\"`', /tmp/tmpmt4cv045.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let sum = sum % 26;\n    let sum = sum as u8;\n    let sum = sum + 65;\n    let sum = sum as char;\n    let sum = sum.to_string();\n    sum\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123800,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmp2g1x3fie.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfn get_Char(strr: String) -> String {\n    let mut sum = 0;\n    for i in strr.chars() {\n        sum += i as u8;\n    }\n    let mut res = (sum % 26) as u8;\n    let mut res_str = String::new();\n    res_str.push(res as char);\n    res_str\n}\n\nfn main() {\n    let candidate = get_Char;\n    assert_eq!(candidate(String::from(\"abc\")), String::from(\"f\"));\n    assert_eq!(candidate(String::from(\"gfg\")), String::from(\"t\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"c\"));\n}\n",
      "timestamp": 1666123801,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to add with overflow', /tmp/tmpb2zbsw14.rs:5:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    }
  ]
}