{
  "name": "mbpp_578_interleave_lists",
  "language": "rs",
  "prompt": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_578_interleave_lists.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut iter1 = list1.iter();\n    let mut iter2 = list2.iter();\n    let mut iter3 = list3.iter();\n    loop {\n        match (iter1.next(), iter2.next(), iter3.next()) {\n            (Some(x), Some(y), Some(z)) => {\n                result.push(*x);\n                result.push(*y);\n                result.push(*z);\n            }\n            _ => break,\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1665510562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..list1.len() {\n        result.push(list1[i]);\n        result.push(list2[i]);\n        result.push(list3[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1665510562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut i = 0;\n    while i < list1.len() {\n        result.push(list1[i]);\n        result.push(list2[i]);\n        result.push(list3[i]);\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1665510562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..list1.len() {\n        result.push(list1[i]);\n        result.push(list2[i]);\n        result.push(list3[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1665510562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut iter1 = list1.iter();\n    let mut iter2 = list2.iter();\n    let mut iter3 = list3.iter();\n    loop {\n        match (iter1.next(), iter2.next(), iter3.next()) {\n            (Some(x), Some(y), Some(z)) => {\n                result.push(*x);\n                result.push(*y);\n                result.push(*z);\n            }\n            _ => break,\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1665510562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    let mut i = 0;\n    while i < list1.len() {\n        result.push(list1[i]);\n        result.push(list2[i]);\n        result.push(list3[i]);\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1665510562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..list1.len() {\n        result.push(list1[i]);\n        result.push(list2[i]);\n        result.push(list3[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1665510562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..list1.len() {\n        result.push(list1[i]);\n        result.push(list2[i]);\n        result.push(list3[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1665510562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for (a, b, c) in list1.iter().zip(list2.iter()).zip(list3.iter()) {\n        result.push(a.0);\n        result.push(a.1);\n        result.push(*b);\n        result.push(*c);\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1665510562,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpfm4tle3b.rs:4:9\n  |\n4 |     for (a, b, c) in list1.iter().zip(list2.iter()).zip(list3.iter()) {\n  |         ^^^^^^^^^    ------------------------------------------------ this expression has type `Option<((&isize, &isize), &isize)>`\n  |         |\n  |         expected a tuple with 2 elements, found one with 3 elements\n  |\n  = note: expected tuple `((&isize, &isize), &isize)`\n             found tuple `(_, _, _)`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut iter1 = list1.iter();\n    let mut iter2 = list2.iter();\n    let mut iter3 = list3.iter();\n    loop {\n        match (iter1.next(), iter2.next(), iter3.next()) {\n            (Some(x), Some(y), Some(z)) => {\n                result.push(*x);\n                result.push(*y);\n                result.push(*z);\n            }\n            _ => break,\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1665510562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut iter1 = list1.iter();\n    let mut iter2 = list2.iter();\n    let mut iter3 = list3.iter();\n\n    loop {\n        match (iter1.next(), iter2.next(), iter3.next()) {\n            (Some(x), Some(y), Some(z)) => {\n                result.push(*x);\n                result.push(*y);\n                result.push(*z);\n            }\n            _ => break,\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1665510562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    for i in 0..list1.len() {\n        result.push(list1[i]);\n        result.push(list2[i]);\n        result.push(list3[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1665510562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..list1.len() {\n        result.push(list1[i]);\n        result.push(list2[i]);\n        result.push(list3[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1665510562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..list1.len() {\n        result.push(list1[i]);\n        result.push(list2[i]);\n        result.push(list3[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1665510562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..list1.len() {\n        result.push(list1[i]);\n        result.push(list2[i]);\n        result.push(list3[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1665510562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..list1.len() {\n        result.push(list1[i]);\n        result.push(list2[i]);\n        result.push(list3[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1665510562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut iter1 = list1.iter();\n    let mut iter2 = list2.iter();\n    let mut iter3 = list3.iter();\n    loop {\n        match (iter1.next(), iter2.next(), iter3.next()) {\n            (Some(x), Some(y), Some(z)) => {\n                result.push(*x);\n                result.push(*y);\n                result.push(*z);\n            }\n            _ => break,\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1665510562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..list1.len() {\n        result.push(list1[i]);\n        result.push(list2[i]);\n        result.push(list3[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1665510562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..list1.len() {\n        result.push(list1[i]);\n        result.push(list2[i]);\n        result.push(list3[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1665510562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = vec![];\n    let mut iter1 = list1.iter();\n    let mut iter2 = list2.iter();\n    let mut iter3 = list3.iter();\n\n    loop {\n        match (iter1.next(), iter2.next(), iter3.next()) {\n            (Some(x), Some(y), Some(z)) => {\n                result.push(*x);\n                result.push(*y);\n                result.push(*z);\n            }\n            _ => break,\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1665510562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..list1.len() {\n        result.push(list1[i]);\n        result.push(list2[i]);\n        result.push(list3[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1665510562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..list1.len() {\n        result.push(list1[i]);\n        result.push(list2[i]);\n        result.push(list3[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1665510562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..list1.len() {\n        result.push(list1[i]);\n        result.push(list2[i]);\n        result.push(list3[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1665510562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut iter1 = list1.iter();\n    let mut iter2 = list2.iter();\n    let mut iter3 = list3.iter();\n    while let (Some(x), Some(y), Some(z)) = (iter1.next(), iter2.next(), iter3.next()) {\n        result.push(*x);\n        result.push(*y);\n        result.push(*z);\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1666123541,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..list1.len() {\n        result.push(list1[i]);\n        result.push(list2[i]);\n        result.push(list3[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1665510562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut iter1 = list1.iter();\n    let mut iter2 = list2.iter();\n    let mut iter3 = list3.iter();\n    loop {\n        match (iter1.next(), iter2.next(), iter3.next()) {\n            (Some(x), Some(y), Some(z)) => {\n                result.push(*x);\n                result.push(*y);\n                result.push(*z);\n            }\n            (None, None, None) => break,\n            _ => panic!(\"Lists are not the same length\"),\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1666123541,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for (a, b, c) in list1.iter().zip(list2.iter()).zip(list3.iter()) {\n        result.push(a.0);\n        result.push(a.1);\n        result.push(*b);\n        result.push(*c);\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1665510562,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpfm4tle3b.rs:4:9\n  |\n4 |     for (a, b, c) in list1.iter().zip(list2.iter()).zip(list3.iter()) {\n  |         ^^^^^^^^^    ------------------------------------------------ this expression has type `Option<((&isize, &isize), &isize)>`\n  |         |\n  |         expected a tuple with 2 elements, found one with 3 elements\n  |\n  = note: expected tuple `((&isize, &isize), &isize)`\n             found tuple `(_, _, _)`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..list1.len() {\n        result.push(list1[i]);\n        result.push(list2[i]);\n        result.push(list3[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1665510562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..list1.len() {\n        result.push(list1[i]);\n        result.push(list2[i]);\n        result.push(list3[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1665510562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..list1.len() {\n        result.push(list1[i]);\n        result.push(list2[i]);\n        result.push(list3[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1665510562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..list1.len() {\n        result.push(list1[i]);\n        result.push(list2[i]);\n        result.push(list3[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1665510562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..list1.len() {\n        result.push(list1[i]);\n        result.push(list2[i]);\n        result.push(list3[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1665510562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut iter1 = list1.iter();\n    let mut iter2 = list2.iter();\n    let mut iter3 = list3.iter();\n    loop {\n        match (iter1.next(), iter2.next(), iter3.next()) {\n            (Some(x), Some(y), Some(z)) => {\n                result.push(*x);\n                result.push(*y);\n                result.push(*z);\n            }\n            _ => break,\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1665510562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut iter1 = list1.iter();\n    let mut iter2 = list2.iter();\n    let mut iter3 = list3.iter();\n    loop {\n        match (iter1.next(), iter2.next(), iter3.next()) {\n            (Some(x), Some(y), Some(z)) => {\n                result.push(*x);\n                result.push(*y);\n                result.push(*z);\n            }\n            _ => break,\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1665510562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..list1.len() {\n        result.push(list1[i]);\n        result.push(list2[i]);\n        result.push(list3[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1665510562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..list1.len() {\n        result.push(list1[i]);\n        result.push(list2[i]);\n        result.push(list3[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1665510562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\n    for i in 0..list1.len() {\n        result.push(list1[i]);\n        result.push(list2[i]);\n        result.push(list3[i]);\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1666123541,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..list1.len() {\n        result.push(list1[i]);\n        result.push(list2[i]);\n        result.push(list3[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1665510562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    let mut i = 0;\n    while i < list1.len() {\n        result.push(list1[i]);\n        result.push(list2[i]);\n        result.push(list3[i]);\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1665510562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1666123541,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'not implemented', /tmp/tmp8goccvk5.rs:3:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..list1.len() {\n        result.push(list1[i]);\n        result.push(list2[i]);\n        result.push(list3[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1665510562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut iter1 = list1.iter();\n    let mut iter2 = list2.iter();\n    let mut iter3 = list3.iter();\n\n    loop {\n        match (iter1.next(), iter2.next(), iter3.next()) {\n            (Some(x), Some(y), Some(z)) => {\n                result.push(*x);\n                result.push(*y);\n                result.push(*z);\n            }\n            _ => break,\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1665510562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..list1.len() {\n        result.push(list1[i]);\n        result.push(list2[i]);\n        result.push(list3[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1665510562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..list1.len() {\n        result.push(list1[i]);\n        result.push(list2[i]);\n        result.push(list3[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1665510562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut iter1 = list1.iter();\n    let mut iter2 = list2.iter();\n    let mut iter3 = list3.iter();\n    loop {\n        match (iter1.next(), iter2.next(), iter3.next()) {\n            (Some(x), Some(y), Some(z)) => {\n                result.push(*x);\n                result.push(*y);\n                result.push(*z);\n            }\n            _ => break,\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1665510562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut interleaved: Vec<isize> = Vec::new();\n    for i in 0..list1.len() {\n        interleaved.push(list1[i]);\n        interleaved.push(list2[i]);\n        interleaved.push(list3[i]);\n    }\n    interleaved\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1666123541,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..list1.len() {\n        result.push(list1[i]);\n        result.push(list2[i]);\n        result.push(list3[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1665510562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    let mut iter1 = list1.into_iter();\n    let mut iter2 = list2.into_iter();\n    let mut iter3 = list3.into_iter();\n    loop {\n        match (iter1.next(), iter2.next(), iter3.next()) {\n            (Some(x), Some(y), Some(z)) => {\n                result.push(x);\n                result.push(y);\n                result.push(z);\n            }\n            _ => break,\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1666123541,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..list1.len() {\n        result.push(list1[i]);\n        result.push(list2[i]);\n        result.push(list3[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1665510562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..list1.len() {\n        result.push(list1[i]);\n        result.push(list2[i]);\n        result.push(list3[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1665510562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..list1.len() {\n        result.push(list1[i]);\n        result.push(list2[i]);\n        result.push(list3[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1665510562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut list = Vec::new();\n    for i in 0..list1.len() {\n        list.push(list1[i]);\n        list.push(list2[i]);\n        list.push(list3[i]);\n    }\n    list\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1666123541,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut iter1 = list1.iter();\n    let mut iter2 = list2.iter();\n    let mut iter3 = list3.iter();\n    loop {\n        match (iter1.next(), iter2.next(), iter3.next()) {\n            (Some(x), Some(y), Some(z)) => {\n                result.push(*x);\n                result.push(*y);\n                result.push(*z);\n            }\n            _ => break,\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1665510562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1666123541,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'not implemented', /tmp/tmp8goccvk5.rs:3:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..list1.len() {\n        result.push(list1[i]);\n        result.push(list2[i]);\n        result.push(list3[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1665510562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1666123541,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'not implemented', /tmp/tmp8goccvk5.rs:3:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..list1.len() {\n        result.push(list1[i]);\n        result.push(list2[i]);\n        result.push(list3[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1665510562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    for i in 0..list1.len() {\n        result.push(list1[i]);\n        result.push(list2[i]);\n        result.push(list3[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1665510562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..list1.len() {\n        result.push(list1[i]);\n        result.push(list2[i]);\n        result.push(list3[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1665510562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..list1.len() {\n        result.push(list1[i]);\n        result.push(list2[i]);\n        result.push(list3[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1665510562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..list1.len() {\n        result.push(list1[i]);\n        result.push(list2[i]);\n        result.push(list3[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1665510562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1666123541,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'not implemented', /tmp/tmp8goccvk5.rs:3:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..list1.len() {\n        result.push(list1[i]);\n        result.push(list2[i]);\n        result.push(list3[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1665510562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut iter1 = list1.iter();\n    let mut iter2 = list2.iter();\n    let mut iter3 = list3.iter();\n    loop {\n        match (iter1.next(), iter2.next(), iter3.next()) {\n            (Some(x), Some(y), Some(z)) => {\n                result.push(*x);\n                result.push(*y);\n                result.push(*z);\n            }\n            _ => break,\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1665510562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = vec![];\n    for (x, y, z) in list1.iter().zip(list2.iter()).zip(list3.iter()) {\n        result.push(x.0);\n        result.push(x.1);\n        result.push(*y);\n        result.push(*z);\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1666123541,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpz4771_f2.rs:4:9\n  |\n4 |     for (x, y, z) in list1.iter().zip(list2.iter()).zip(list3.iter()) {\n  |         ^^^^^^^^^    ------------------------------------------------ this expression has type `Option<((&isize, &isize), &isize)>`\n  |         |\n  |         expected a tuple with 2 elements, found one with 3 elements\n  |\n  = note: expected tuple `((&isize, &isize), &isize)`\n             found tuple `(_, _, _)`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    for i in 0..list1.len() {\n        result.push(list1[i]);\n        result.push(list2[i]);\n        result.push(list3[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1665510562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    let mut iter1 = list1.iter();\n    let mut iter2 = list2.iter();\n    let mut iter3 = list3.iter();\n\n    loop {\n        match (iter1.next(), iter2.next(), iter3.next()) {\n            (Some(x), Some(y), Some(z)) => {\n                result.push(*x);\n                result.push(*y);\n                result.push(*z);\n            }\n            _ => break,\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1666123541,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..list1.len() {\n        result.push(list1[i]);\n        result.push(list2[i]);\n        result.push(list3[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1665510562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..list1.len() {\n        result.push(list1[i]);\n        result.push(list2[i]);\n        result.push(list3[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1665510562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for (a, b, c) in list1.into_iter().zip(list2).zip(list3) {\n        result.push(a.0);\n        result.push(a.1);\n        result.push(b);\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1666123541,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpdembntiu.rs:4:9\n  |\n4 |     for (a, b, c) in list1.into_iter().zip(list2).zip(list3) {\n  |         ^^^^^^^^^    --------------------------------------- this expression has type `Option<((isize, isize), isize)>`\n  |         |\n  |         expected a tuple with 2 elements, found one with 3 elements\n  |\n  = note: expected tuple `((isize, isize), isize)`\n             found tuple `(_, _, _)`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut iter1 = list1.iter();\n    let mut iter2 = list2.iter();\n    let mut iter3 = list3.iter();\n    loop {\n        match (iter1.next(), iter2.next(), iter3.next()) {\n            (Some(x), Some(y), Some(z)) => {\n                result.push(*x);\n                result.push(*y);\n                result.push(*z);\n            }\n            (None, None, None) => break,\n            _ => panic!(\"Lists are not the same length\"),\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1666123541,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..list1.len() {\n        result.push(list1[i]);\n        result.push(list2[i]);\n        result.push(list3[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1665510562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..list1.len() {\n        result.push(list1[i]);\n        result.push(list2[i]);\n        result.push(list3[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1665510562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..list1.len() {\n        result.push(list1[i]);\n        result.push(list2[i]);\n        result.push(list3[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1665510562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..list1.len() {\n        result.push(list1[i]);\n        result.push(list2[i]);\n        result.push(list3[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1665510562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..list1.len() {\n        result.push(list1[i]);\n        result.push(list2[i]);\n        result.push(list3[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1665510562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut iter1 = list1.into_iter();\n    let mut iter2 = list2.into_iter();\n    let mut iter3 = list3.into_iter();\n\n    loop {\n        match (iter1.next(), iter2.next(), iter3.next()) {\n            (Some(a), Some(b), Some(c)) => {\n                result.push(a);\n                result.push(b);\n                result.push(c);\n            }\n            _ => break,\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1666123541,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..list1.len() {\n        result.push(list1[i]);\n        result.push(list2[i]);\n        result.push(list3[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1665510562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut iter1 = list1.iter();\n    let mut iter2 = list2.iter();\n    let mut iter3 = list3.iter();\n\n    loop {\n        match (iter1.next(), iter2.next(), iter3.next()) {\n            (Some(x), Some(y), Some(z)) => {\n                result.push(*x);\n                result.push(*y);\n                result.push(*z);\n            }\n            _ => break,\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1665510562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..list1.len() {\n        result.push(list1[i]);\n        result.push(list2[i]);\n        result.push(list3[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1665510562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..list1.len() {\n        result.push(list1[i]);\n        result.push(list2[i]);\n        result.push(list3[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1665510562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..list1.len() {\n        result.push(list1[i]);\n        result.push(list2[i]);\n        result.push(list3[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1665510562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    for i in 0..list1.len() {\n        result.push(list1[i]);\n        result.push(list2[i]);\n        result.push(list3[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1665510562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut iter1 = list1.iter();\n    let mut iter2 = list2.iter();\n    let mut iter3 = list3.iter();\n    loop {\n        match (iter1.next(), iter2.next(), iter3.next()) {\n            (Some(x), Some(y), Some(z)) => {\n                result.push(*x);\n                result.push(*y);\n                result.push(*z);\n            }\n            (Some(x), Some(y), None) => {\n                result.push(*x);\n                result.push(*y);\n            }\n            (Some(x), None, Some(z)) => {\n                result.push(*x);\n                result.push(*z);\n            }\n            (None, Some(y), Some(z)) => {\n                result.push(*y);\n                result.push(*z);\n            }\n            (Some(x), None, None) => {\n                result.push(*x);\n            }\n            (None, Some(y), None) => {\n                result.push(*y);\n            }\n            (None, None, Some(z)) => {\n                result.push(*z);\n            }\n            (None, None, None) => break,\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1666123541,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..list1.len() {\n        result.push(list1[i]);\n        result.push(list2[i]);\n        result.push(list3[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1665510562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..list1.len() {\n        result.push(list1[i]);\n        result.push(list2[i]);\n        result.push(list3[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1665510562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut iter1 = list1.into_iter();\n    let mut iter2 = list2.into_iter();\n    let mut iter3 = list3.into_iter();\n    loop {\n        match (iter1.next(), iter2.next(), iter3.next()) {\n            (Some(x), Some(y), Some(z)) => {\n                result.push(x);\n                result.push(y);\n                result.push(z);\n            }\n            (None, None, None) => break,\n            _ => panic!(\"lists must be the same length\"),\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1666123541,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut iter1 = list1.iter();\n    let mut iter2 = list2.iter();\n    let mut iter3 = list3.iter();\n    loop {\n        match (iter1.next(), iter2.next(), iter3.next()) {\n            (Some(x), Some(y), Some(z)) => {\n                result.push(*x);\n                result.push(*y);\n                result.push(*z);\n            }\n            _ => break,\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1665510562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    for i in 0..list1.len() {\n        result.push(list1[i]);\n        result.push(list2[i]);\n        result.push(list3[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1665510562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..list1.len() {\n        result.push(list1[i]);\n        result.push(list2[i]);\n        result.push(list3[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1665510562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    for i in 0..list1.len() {\n        result.push(list1[i]);\n        result.push(list2[i]);\n        result.push(list3[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1665510562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..list1.len() {\n        result.push(list1[i]);\n        result.push(list2[i]);\n        result.push(list3[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1665510562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..list1.len() {\n        result.push(list1[i]);\n        result.push(list2[i]);\n        result.push(list3[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1665510562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..list1.len() {\n        result.push(list1[i]);\n        result.push(list2[i]);\n        result.push(list3[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1665510562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    list1.iter().zip(list2.iter()).zip(list3.iter()).map(|((&a, &b), &c)| vec![a, b, c]).flatten().collect()\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1666123541,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..list1.len() {\n        result.push(list1[i]);\n        result.push(list2[i]);\n        result.push(list3[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1665510562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    for i in 0..list1.len() {\n        result.push(list1[i]);\n        result.push(list2[i]);\n        result.push(list3[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1665510562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..list1.len() {\n        result.push(list1[i]);\n        result.push(list2[i]);\n        result.push(list3[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1665510562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..list1.len() {\n        result.push(list1[i]);\n        result.push(list2[i]);\n        result.push(list3[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1665510562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for (a, b, c) in list1.iter().zip(list2.iter()).zip(list3.iter()) {\n        result.push(a.0);\n        result.push(a.1);\n        result.push(*b);\n        result.push(*c);\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1665510562,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpfm4tle3b.rs:4:9\n  |\n4 |     for (a, b, c) in list1.iter().zip(list2.iter()).zip(list3.iter()) {\n  |         ^^^^^^^^^    ------------------------------------------------ this expression has type `Option<((&isize, &isize), &isize)>`\n  |         |\n  |         expected a tuple with 2 elements, found one with 3 elements\n  |\n  = note: expected tuple `((&isize, &isize), &isize)`\n             found tuple `(_, _, _)`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1666123541,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'not implemented', /tmp/tmp8goccvk5.rs:3:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1666123541,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'not implemented', /tmp/tmp8goccvk5.rs:3:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..list1.len() {\n        result.push(list1[i]);\n        result.push(list2[i]);\n        result.push(list3[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1665510562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut iter1 = list1.into_iter();\n    let mut iter2 = list2.into_iter();\n    let mut iter3 = list3.into_iter();\n    loop {\n        match (iter1.next(), iter2.next(), iter3.next()) {\n            (Some(x), Some(y), Some(z)) => {\n                result.push(x);\n                result.push(y);\n                result.push(z);\n            }\n            _ => break,\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1666123541,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1666123541,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'not implemented', /tmp/tmp8goccvk5.rs:3:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..list1.len() {\n        result.push(list1[i]);\n        result.push(list2[i]);\n        result.push(list3[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1665510562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut iter1 = list1.iter();\n    let mut iter2 = list2.iter();\n    let mut iter3 = list3.iter();\n    loop {\n        match (iter1.next(), iter2.next(), iter3.next()) {\n            (Some(x), Some(y), Some(z)) => {\n                result.push(*x);\n                result.push(*y);\n                result.push(*z);\n            }\n            _ => break,\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1665510562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..list1.len() {\n        result.push(list1[i]);\n        result.push(list2[i]);\n        result.push(list3[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1665510562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..list1.len() {\n        result.push(list1[i]);\n        result.push(list2[i]);\n        result.push(list3[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1665510562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..list1.len() {\n        result.push(list1[i]);\n        result.push(list2[i]);\n        result.push(list3[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1665510562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    for i in 0..list1.len() {\n        result.push(list1[i]);\n        result.push(list2[i]);\n        result.push(list3[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1665510562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..list1.len() {\n        result.push(list1[i]);\n        result.push(list2[i]);\n        result.push(list3[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1665510562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..list1.len() {\n        result.push(list1[i]);\n        result.push(list2[i]);\n        result.push(list3[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1665510562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut interleaved = Vec::new();\n    for i in 0..list1.len() {\n        interleaved.push(list1[i]);\n        interleaved.push(list2[i]);\n        interleaved.push(list3[i]);\n    }\n    interleaved\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1666123541,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..list1.len() {\n        result.push(list1[i]);\n        result.push(list2[i]);\n        result.push(list3[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1665510562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..list1.len() {\n        result.push(list1[i]);\n        result.push(list2[i]);\n        result.push(list3[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1665510562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..list1.len() {\n        result.push(list1[i]);\n        result.push(list2[i]);\n        result.push(list3[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1665510562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    let mut iter1 = list1.iter();\n    let mut iter2 = list2.iter();\n    let mut iter3 = list3.iter();\n    loop {\n        match (iter1.next(), iter2.next(), iter3.next()) {\n            (Some(x), Some(y), Some(z)) => {\n                result.push(*x);\n                result.push(*y);\n                result.push(*z);\n            }\n            _ => break,\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1666123541,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..list1.len() {\n        result.push(list1[i]);\n        result.push(list2[i]);\n        result.push(list3[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1665510562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..list1.len() {\n        result.push(list1[i]);\n        result.push(list2[i]);\n        result.push(list3[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1665510562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    let mut i = 0;\n    while i < list1.len() {\n        result.push(list1[i]);\n        result.push(list2[i]);\n        result.push(list3[i]);\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1665510562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1666123541,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'not implemented', /tmp/tmp8goccvk5.rs:3:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut iter1 = list1.into_iter();\n    let mut iter2 = list2.into_iter();\n    let mut iter3 = list3.into_iter();\n    loop {\n        match (iter1.next(), iter2.next(), iter3.next()) {\n            (Some(x), Some(y), Some(z)) => {\n                result.push(x);\n                result.push(y);\n                result.push(z);\n            },\n            _ => break,\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1666123541,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1666123541,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'not implemented', /tmp/tmp8goccvk5.rs:3:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::with_capacity(list1.len() + list2.len() + list3.len());\n    for (a, b, c) in list1.into_iter().zip(list2.into_iter()).zip(list3.into_iter()) {\n        result.push(a.0);\n        result.push(a.1);\n        result.push(c);\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1666123541,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp6sfex6v9.rs:4:9\n  |\n4 |     for (a, b, c) in list1.into_iter().zip(list2.into_iter()).zip(list3.into_iter()) {\n  |         ^^^^^^^^^    --------------------------------------------------------------- this expression has type `Option<((isize, isize), isize)>`\n  |         |\n  |         expected a tuple with 2 elements, found one with 3 elements\n  |\n  = note: expected tuple `((isize, isize), isize)`\n             found tuple `(_, _, _)`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut iter1 = list1.iter();\n    let mut iter2 = list2.iter();\n    let mut iter3 = list3.iter();\n    loop {\n        match (iter1.next(), iter2.next(), iter3.next()) {\n            (Some(x), Some(y), Some(z)) => {\n                result.push(*x);\n                result.push(*y);\n                result.push(*z);\n            },\n            _ => break\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1666123541,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut interleaved = Vec::new();\n    for i in 0..list1.len() {\n        interleaved.push(list1[i]);\n        interleaved.push(list2[i]);\n        interleaved.push(list3[i]);\n    }\n    interleaved\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1666123541,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..list1.len() {\n        result.push(list1[i]);\n        result.push(list2[i]);\n        result.push(list3[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1665510562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..list1.len() {\n        result.push(list1[i]);\n        result.push(list2[i]);\n        result.push(list3[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1665510562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..list1.len() {\n        result.push(list1[i]);\n        result.push(list2[i]);\n        result.push(list3[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1665510562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut i = 0;\n    while i < list1.len() {\n        result.push(list1[i]);\n        result.push(list2[i]);\n        result.push(list3[i]);\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1665510562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..list1.len() {\n        result.push(list1[i]);\n        result.push(list2[i]);\n        result.push(list3[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1665510562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for (i, _) in list1.iter().enumerate() {\n        result.push(list1[i]);\n        result.push(list2[i]);\n        result.push(list3[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1666123541,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    let mut i = 0;\n    while i < list1.len() {\n        result.push(list1[i]);\n        result.push(list2[i]);\n        result.push(list3[i]);\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1665510562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..list1.len() {\n        result.push(list1[i]);\n        result.push(list2[i]);\n        result.push(list3[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1665510562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut iter1 = list1.iter();\n    let mut iter2 = list2.iter();\n    let mut iter3 = list3.iter();\n    loop {\n        match (iter1.next(), iter2.next(), iter3.next()) {\n            (Some(x), Some(y), Some(z)) => {\n                result.push(*x);\n                result.push(*y);\n                result.push(*z);\n            },\n            _ => break\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1666123541,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut iter1 = list1.iter();\n    let mut iter2 = list2.iter();\n    let mut iter3 = list3.iter();\n    loop {\n        match (iter1.next(), iter2.next(), iter3.next()) {\n            (Some(x), Some(y), Some(z)) => {\n                result.push(*x);\n                result.push(*y);\n                result.push(*z);\n            }\n            (None, None, None) => break,\n            _ => panic!(\"lists must be of equal length\"),\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1666123541,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut iter1 = list1.iter();\n    let mut iter2 = list2.iter();\n    let mut iter3 = list3.iter();\n    loop {\n        match (iter1.next(), iter2.next(), iter3.next()) {\n            (Some(x), Some(y), Some(z)) => {\n                result.push(*x);\n                result.push(*y);\n                result.push(*z);\n            }\n            _ => break,\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1665510562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..list1.len() {\n        result.push(list1[i]);\n        result.push(list2[i]);\n        result.push(list3[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1665510562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..list1.len() {\n        result.push(list1[i]);\n        result.push(list2[i]);\n        result.push(list3[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1665510562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for (x, y, z) in list1.iter().zip(list2.iter()).zip(list3.iter()) {\n        result.push(x.0);\n        result.push(x.1);\n        result.push(*y);\n        result.push(*z);\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1666123541,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmps2_rhcn8.rs:4:9\n  |\n4 |     for (x, y, z) in list1.iter().zip(list2.iter()).zip(list3.iter()) {\n  |         ^^^^^^^^^    ------------------------------------------------ this expression has type `Option<((&isize, &isize), &isize)>`\n  |         |\n  |         expected a tuple with 2 elements, found one with 3 elements\n  |\n  = note: expected tuple `((&isize, &isize), &isize)`\n             found tuple `(_, _, _)`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for (x, y, z) in list1.into_iter().zip(list2.into_iter()).zip(list3.into_iter()) {\n        result.push(x.0);\n        result.push(x.1);\n        result.push(y);\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1666123541,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpl8szp9ez.rs:4:9\n  |\n4 |     for (x, y, z) in list1.into_iter().zip(list2.into_iter()).zip(list3.into_iter()) {\n  |         ^^^^^^^^^    --------------------------------------------------------------- this expression has type `Option<((isize, isize), isize)>`\n  |         |\n  |         expected a tuple with 2 elements, found one with 3 elements\n  |\n  = note: expected tuple `((isize, isize), isize)`\n             found tuple `(_, _, _)`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..list1.len() {\n        result.push(list1[i]);\n        result.push(list2[i]);\n        result.push(list3[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1665510562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..list1.len() {\n        result.push(list1[i]);\n        result.push(list2[i]);\n        result.push(list3[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1665510562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    let mut i = 0;\n    let len = list1.len();\n    while i < len {\n        result.push(list1[i]);\n        result.push(list2[i]);\n        result.push(list3[i]);\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1666123541,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    let mut i = 0;\n    while i < list1.len() {\n        result.push(list1[i]);\n        result.push(list2[i]);\n        result.push(list3[i]);\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1665510562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    let mut iter1 = list1.iter();\n    let mut iter2 = list2.iter();\n    let mut iter3 = list3.iter();\n    loop {\n        match (iter1.next(), iter2.next(), iter3.next()) {\n            (Some(x), Some(y), Some(z)) => {\n                result.push(*x);\n                result.push(*y);\n                result.push(*z);\n            }\n            _ => break,\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1666123541,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..list1.len() {\n        result.push(list1[i]);\n        result.push(list2[i]);\n        result.push(list3[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1665510562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut iter1 = list1.iter();\n    let mut iter2 = list2.iter();\n    let mut iter3 = list3.iter();\n\n    loop {\n        match (iter1.next(), iter2.next(), iter3.next()) {\n            (Some(a), Some(b), Some(c)) => {\n                result.push(*a);\n                result.push(*b);\n                result.push(*c);\n            }\n            _ => break,\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1666123541,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..list1.len() {\n        result.push(list1[i]);\n        result.push(list2[i]);\n        result.push(list3[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1665510562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..list1.len() {\n        result.push(list1[i]);\n        result.push(list2[i]);\n        result.push(list3[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1665510562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..list1.len() {\n        result.push(list1[i]);\n        result.push(list2[i]);\n        result.push(list3[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1665510562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..list1.len() {\n        result.push(list1[i]);\n        result.push(list2[i]);\n        result.push(list3[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1665510562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for (a, b, c) in list1.iter().zip(list2.iter()).zip(list3.iter()) {\n        result.push(a.0);\n        result.push(a.1);\n        result.push(*b);\n        result.push(*c);\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1665510562,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpfm4tle3b.rs:4:9\n  |\n4 |     for (a, b, c) in list1.iter().zip(list2.iter()).zip(list3.iter()) {\n  |         ^^^^^^^^^    ------------------------------------------------ this expression has type `Option<((&isize, &isize), &isize)>`\n  |         |\n  |         expected a tuple with 2 elements, found one with 3 elements\n  |\n  = note: expected tuple `((&isize, &isize), &isize)`\n             found tuple `(_, _, _)`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut iter1 = list1.iter();\n    let mut iter2 = list2.iter();\n    let mut iter3 = list3.iter();\n    loop {\n        match (iter1.next(), iter2.next(), iter3.next()) {\n            (Some(a), Some(b), Some(c)) => {\n                result.push(*a);\n                result.push(*b);\n                result.push(*c);\n            }\n            _ => break,\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1666123541,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1666123541,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'not implemented', /tmp/tmp8goccvk5.rs:3:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..list1.len() {\n        result.push(list1[i]);\n        result.push(list2[i]);\n        result.push(list3[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1665510562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..list1.len() {\n        result.push(list1[i]);\n        result.push(list2[i]);\n        result.push(list3[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1665510562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1666123541,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'not implemented', /tmp/tmp8goccvk5.rs:3:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..list1.len() {\n        result.push(list1[i]);\n        result.push(list2[i]);\n        result.push(list3[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1665510562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..list1.len() {\n        result.push(list1[i]);\n        result.push(list2[i]);\n        result.push(list3[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1665510562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..list1.len() {\n        result.push(list1[i]);\n        result.push(list2[i]);\n        result.push(list3[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1665510562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..list1.len() {\n        result.push(list1[i]);\n        result.push(list2[i]);\n        result.push(list3[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1665510562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..list1.len() {\n        result.push(list1[i]);\n        result.push(list2[i]);\n        result.push(list3[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1665510562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..list1.len() {\n        result.push(list1[i]);\n        result.push(list2[i]);\n        result.push(list3[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1665510562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..list1.len() {\n        result.push(list1[i]);\n        result.push(list2[i]);\n        result.push(list3[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1665510562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n\n    for i in 0..list1.len() {\n        result.push(list1[i]);\n        result.push(list2[i]);\n        result.push(list3[i]);\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1666123541,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..list1.len() {\n        result.push(list1[i]);\n        result.push(list2[i]);\n        result.push(list3[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1665510562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut iter1 = list1.iter();\n    let mut iter2 = list2.iter();\n    let mut iter3 = list3.iter();\n    loop {\n        match (iter1.next(), iter2.next(), iter3.next()) {\n            (Some(x), Some(y), Some(z)) => {\n                result.push(*x);\n                result.push(*y);\n                result.push(*z);\n            }\n            _ => break,\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1665510562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut iter1 = list1.iter();\n    let mut iter2 = list2.iter();\n    let mut iter3 = list3.iter();\n    loop {\n        match (iter1.next(), iter2.next(), iter3.next()) {\n            (Some(x), Some(y), Some(z)) => {\n                result.push(*x);\n                result.push(*y);\n                result.push(*z);\n            }\n            (None, None, None) => break,\n            _ => panic!(\"Lists are not the same length!\"),\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1666123541,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut iter1 = list1.iter();\n    let mut iter2 = list2.iter();\n    let mut iter3 = list3.iter();\n\n    loop {\n        match (iter1.next(), iter2.next(), iter3.next()) {\n            (Some(x), Some(y), Some(z)) => {\n                result.push(*x);\n                result.push(*y);\n                result.push(*z);\n            }\n            _ => break,\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1665510562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..list1.len() {\n        result.push(list1[i]);\n        result.push(list2[i]);\n        result.push(list3[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1665510562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut index = 0;\n    while index < list1.len() {\n        result.push(list1[index]);\n        result.push(list2[index]);\n        result.push(list3[index]);\n        index += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1666123541,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..list1.len() {\n        result.push(list1[i]);\n        result.push(list2[i]);\n        result.push(list3[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1665510562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..list1.len() {\n        result.push(list1[i]);\n        result.push(list2[i]);\n        result.push(list3[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1665510562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..list1.len() {\n        result.push(list1[i]);\n        result.push(list2[i]);\n        result.push(list3[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1665510562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut iter1 = list1.iter();\n    let mut iter2 = list2.iter();\n    let mut iter3 = list3.iter();\n\n    loop {\n        match (iter1.next(), iter2.next(), iter3.next()) {\n            (Some(x), Some(y), Some(z)) => {\n                result.push(*x);\n                result.push(*y);\n                result.push(*z);\n            }\n            _ => break,\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1665510562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    unimplemented!();\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1666123541,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'not implemented', /tmp/tmp3nk95_3q.rs:3:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut iter1 = list1.iter();\n    let mut iter2 = list2.iter();\n    let mut iter3 = list3.iter();\n    loop {\n        match (iter1.next(), iter2.next(), iter3.next()) {\n            (Some(x), Some(y), Some(z)) => {\n                result.push(*x);\n                result.push(*y);\n                result.push(*z);\n            }\n            _ => break,\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1665510562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..list1.len() {\n        result.push(list1[i]);\n        result.push(list2[i]);\n        result.push(list3[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1665510562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..list1.len() {\n        result.push(list1[i]);\n        result.push(list2[i]);\n        result.push(list3[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1665510562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    let mut iter1 = list1.iter();\n    let mut iter2 = list2.iter();\n    let mut iter3 = list3.iter();\n    loop {\n        match (iter1.next(), iter2.next(), iter3.next()) {\n            (Some(x), Some(y), Some(z)) => {\n                result.push(*x);\n                result.push(*y);\n                result.push(*z);\n            }\n            _ => break,\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1666123541,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..list1.len() {\n        result.push(list1[i]);\n        result.push(list2[i]);\n        result.push(list3[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1665510562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut iter1 = list1.iter();\n    let mut iter2 = list2.iter();\n    let mut iter3 = list3.iter();\n    loop {\n        match (iter1.next(), iter2.next(), iter3.next()) {\n            (Some(x), Some(y), Some(z)) => {\n                result.push(*x);\n                result.push(*y);\n                result.push(*z);\n            }\n            _ => break,\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1665510562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    let mut iter1 = list1.iter();\n    let mut iter2 = list2.iter();\n    let mut iter3 = list3.iter();\n    loop {\n        match (iter1.next(), iter2.next(), iter3.next()) {\n            (Some(x), Some(y), Some(z)) => {\n                result.push(*x);\n                result.push(*y);\n                result.push(*z);\n            }\n            _ => break,\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1666123541,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    let mut i = 0;\n    while i < list1.len() {\n        result.push(list1[i]);\n        result.push(list2[i]);\n        result.push(list3[i]);\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1665510562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut iter1 = list1.iter();\n    let mut iter2 = list2.iter();\n    let mut iter3 = list3.iter();\n    loop {\n        match (iter1.next(), iter2.next(), iter3.next()) {\n            (Some(x), Some(y), Some(z)) => {\n                result.push(*x);\n                result.push(*y);\n                result.push(*z);\n            }\n            _ => break,\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1665510562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1666123541,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'not implemented', /tmp/tmp8goccvk5.rs:3:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..list1.len() {\n        result.push(list1[i]);\n        result.push(list2[i]);\n        result.push(list3[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1665510562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..list1.len() {\n        result.push(list1[i]);\n        result.push(list2[i]);\n        result.push(list3[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1665510562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    let mut i = 0;\n    while i < list1.len() {\n        result.push(list1[i]);\n        result.push(list2[i]);\n        result.push(list3[i]);\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1665510562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..list1.len() {\n        result.push(list1[i]);\n        result.push(list2[i]);\n        result.push(list3[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1665510562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1666123541,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'not implemented', /tmp/tmp8goccvk5.rs:3:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut iter1 = list1.iter();\n    let mut iter2 = list2.iter();\n    let mut iter3 = list3.iter();\n\n    loop {\n        match (iter1.next(), iter2.next(), iter3.next()) {\n            (Some(x), Some(y), Some(z)) => {\n                result.push(*x);\n                result.push(*y);\n                result.push(*z);\n            }\n            _ => break,\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1665510562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..list1.len() {\n        result.push(list1[i]);\n        result.push(list2[i]);\n        result.push(list3[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1665510562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    let mut iter1 = list1.iter();\n    let mut iter2 = list2.iter();\n    let mut iter3 = list3.iter();\n    loop {\n        match (iter1.next(), iter2.next(), iter3.next()) {\n            (Some(x), Some(y), Some(z)) => {\n                result.push(*x);\n                result.push(*y);\n                result.push(*z);\n            }\n            _ => break,\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1666123541,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    unimplemented!()\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1666123541,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'not implemented', /tmp/tmp8goccvk5.rs:3:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut iter1 = list1.iter();\n    let mut iter2 = list2.iter();\n    let mut iter3 = list3.iter();\n    loop {\n        match (iter1.next(), iter2.next(), iter3.next()) {\n            (Some(i1), Some(i2), Some(i3)) => {\n                result.push(*i1);\n                result.push(*i2);\n                result.push(*i3);\n            }\n            _ => break,\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1666123542,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut iter1 = list1.into_iter();\n    let mut iter2 = list2.into_iter();\n    let mut iter3 = list3.into_iter();\n    loop {\n        match (iter1.next(), iter2.next(), iter3.next()) {\n            (Some(x), Some(y), Some(z)) => {\n                result.push(x);\n                result.push(y);\n                result.push(z);\n            }\n            _ => break,\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1666123541,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to interleave 3 lists of the same length into a single flat list.\nfn interleave_lists(list1: Vec<isize>, list2: Vec<isize>, list3: Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..list1.len() {\n        result.push(list1[i]);\n        result.push(list2[i]);\n        result.push(list3[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = interleave_lists;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7], vec![10, 20, 30, 40, 50, 60, 70], vec![100, 200, 300, 400, 500, 600, 700]), vec![1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]);\n    assert_eq!(candidate(vec![10, 20], vec![15, 2], vec![5, 10]), vec![10, 15, 5, 20, 2, 10]);\n    assert_eq!(candidate(vec![11, 44], vec![10, 15], vec![20, 5]), vec![11, 10, 20, 44, 15, 5]);\n}\n",
      "timestamp": 1665510562,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}