{
  "name": "mbpp_468_max_product",
  "language": "rs",
  "prompt": "/// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfn max_product(arr: Vec<isize>) -> isize {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_468_max_product.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\nfn main() {\n    let candidate = max_product;\n    assert_eq!(candidate(vec![3, 100, 4, 5, 150, 6]), 3000);\n    assert_eq!(candidate(vec![4, 42, 55, 68, 80]), 50265600);\n    assert_eq!(candidate(vec![10, 22, 9, 33, 21, 50, 41, 60]), 2460);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    let mut max_product = 0;\n    let mut max_product_so_far = 1;\n    let mut min_product_so_far = 1;\n\n    for i in 0..arr.len() {\n        if arr[i] > 0 {\n            max_product_so_far = max_product_so_far * arr[i];\n            min_product_so_far = min(min_product_so_far * arr[i], 1);\n        } else if arr[i] == 0 {\n            max_product_so_far = 1;\n            min_product_so_far = 1;\n        } else {\n            let temp = max_product_so_far;\n            max_product_so_far = max(min_product_so_far * arr[i], 1);\n            min_product_so_far = temp * arr[i];\n        }\n\n        if max_product_so_far > max_product {\n            max_product = max_product_so_far;\n        }\n    }\n\n    max_product",
    "    let mut max_product = 1;\n    let mut product = 1;\n    let mut last_max = 1;\n    for i in arr {\n        if i > last_max {\n            product *= i;\n            last_max = i;\n        } else {\n            max_product = max(max_product, product);\n            product = 1;\n            last_max = 1;\n        }\n    }\n    max(max_product, product)",
    "    let mut max_product = 0;\n    let mut curr_product = 1;\n    let mut curr_max = 0;\n    for i in 0..arr.len() {\n        if arr[i] > curr_max {\n            curr_max = arr[i];\n            curr_product *= arr[i];\n        } else {\n            curr_product /= curr_max;\n            curr_max = arr[i];\n            curr_product *= arr[i];\n        }\n        if curr_product > max_product {\n            max_product = curr_product;\n        }\n    }\n    max_product",
    "    let mut max_product = 0;\n    let mut product = 1;\n    let mut last_max = 0;\n    for i in 0..arr.len() {\n        if arr[i] > last_max {\n            product *= arr[i];\n            last_max = arr[i];\n        } else {\n            product = 1;\n            last_max = 0;\n        }\n        max_product = std::cmp::max(max_product, product);\n    }\n    max_product",
    "    let mut max_product = 0;\n    let mut current_product = 1;\n    let mut current_max = 0;\n    for i in 0..arr.len() {\n        if arr[i] > current_max {\n            current_max = arr[i];\n            current_product *= arr[i];\n            if current_product > max_product {\n                max_product = current_product;\n            }\n        } else {\n            current_product = 1;\n        }\n    }\n    max_product",
    "    let mut max_product = 1;\n    let mut curr_product = 1;\n    let mut prev = arr[0];\n    for i in 1..arr.len() {\n        if arr[i] > prev {\n            curr_product *= arr[i];\n            if curr_product > max_product {\n                max_product = curr_product;\n            }\n        } else {\n            curr_product = 1;\n        }\n        prev = arr[i];\n    }\n    max_product",
    "    let mut max_product = isize::min_value();\n    let mut max_product_so_far = isize::min_value();\n    let mut min_product_so_far = isize::max_value();\n\n    for i in 0..arr.len() {\n        if arr[i] < 0 {\n            let temp = max_product_so_far;\n            max_product_so_far = min_product_so_far;\n            min_product_so_far = temp;\n        }\n\n        max_product_so_far = max(arr[i], max_product_so_far * arr[i]);\n        min_product_so_far = min(arr[i], min_product_so_far * arr[i]);\n        max_product = max(max_product, max_product_so_far);\n    }\n\n    max_product",
    "    let mut max_product = 1;\n    let mut product = 1;\n    let mut last_max = arr[0];\n    for i in 1..arr.len() {\n        if arr[i] > last_max {\n            product *= arr[i];\n            last_max = arr[i];\n        } else {\n            max_product = max(max_product, product);\n            product = 1;\n            last_max = arr[i];\n        }\n    }\n    max(max_product, product)",
    "    let mut max_product = 0;\n    let mut product = 1;\n    let mut start = 0;\n    let mut end = 0;\n    while end < arr.len() {\n        product *= arr[end];\n        if product > max_product {\n            max_product = product;\n        }\n        if product < 0 {\n            product = 1;\n            start = end + 1;\n        }\n        end += 1;\n    }\n    max_product",
    "    let mut max = 0;\n    let mut max_product = 0;\n    let mut product = 1;\n    for i in 0..arr.len() {\n        if arr[i] > max {\n            max = arr[i];\n            product *= arr[i];\n        } else {\n            product /= max;\n            product *= arr[i];\n        }\n        if product > max_product {\n            max_product = product;\n        }\n    }\n    max_product",
    "    let mut max_product = 1;\n    let mut current_product = 1;\n    let mut current_max = arr[0];\n    for i in 1..arr.len() {\n        if arr[i] > current_max {\n            current_max = arr[i];\n            current_product = current_product * arr[i];\n        } else {\n            current_product = current_product * arr[i];\n            max_product = max_product.max(current_product);\n        }\n    }\n    max_product",
    "    let mut max_product = 0;\n    let mut max_product_so_far = 0;\n    let mut max_product_ending_here = 1;\n    let mut min_product_ending_here = 1;\n    for i in 0..arr.len() {\n        if arr[i] > 0 {\n            max_product_ending_here = max_product_ending_here * arr[i];\n            min_product_ending_here = min(min_product_ending_here * arr[i], 1);\n        } else if arr[i] == 0 {\n            max_product_ending_here = 1;\n            min_product_ending_here = 1;\n        } else {\n            let temp = max_product_ending_here;\n            max_product_ending_here = max(min_product_ending_here * arr[i], 1);\n            min_product_ending_here = temp * arr[i];\n        }\n        if max_product_so_far < max_product_ending_here {\n            max_product_so_far = max_product_ending_here;\n        }\n    }\n    max_product_so_far",
    "    let mut max_product = 0;\n    let mut max_so_far = 0;\n    let mut min_so_far = 0;\n\n    for i in 0..arr.len() {\n        if arr[i] > 0 {\n            max_so_far = max_so_far.max(max_so_far * arr[i]);\n            min_so_far = min_so_far.min(min_so_far * arr[i]);\n        } else if arr[i] == 0 {\n            max_so_far = 0;\n            min_so_far = 0;\n        } else {\n            let temp = max_so_far;\n            max_so_far = min_so_far.min(min_so_far * arr[i]);\n            min_so_far = temp.max(temp * arr[i]);\n        }\n        max_product = max_product.max(max_so_far);\n    }\n    max_product",
    "    let mut max_product = 0;\n    let mut max_so_far = 0;\n    let mut min_so_far = 0;\n    for i in 0..arr.len() {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i];\n            min_so_far = min(min_so_far * arr[i], 1);\n        } else if arr[i] == 0 {\n            max_so_far = 0;\n            min_so_far = 0;\n        } else {\n            let temp = max_so_far;\n            max_so_far = max(min_so_far * arr[i], 1);\n            min_so_far = temp * arr[i];\n        }\n        if max_so_far > max_product {\n            max_product = max_so_far;\n        }\n    }\n    max_product",
    "    let mut max_product = 0;\n    let mut max_so_far = 0;\n    for i in 0..arr.len() {\n        if arr[i] > max_so_far {\n            max_so_far = arr[i];\n            max_product = max_product.max(max_so_far);\n        }\n    }\n    max_product",
    "    let mut max_product = 0;\n    let mut max_product_so_far = 0;\n    let mut min_product_so_far = 0;\n    for i in 0..arr.len() {\n        if arr[i] > 0 {\n            max_product_so_far = max_product_so_far * arr[i];\n            min_product_so_far = min(1, min_product_so_far * arr[i]);\n        } else if arr[i] == 0 {\n            max_product_so_far = 0;\n            min_product_so_far = 1;\n        } else {\n            let temp = max_product_so_far;\n            max_product_so_far = max(1, min_product_so_far * arr[i]);\n            min_product_so_far = temp * arr[i];\n        }\n        if max_product_so_far > max_product {\n            max_product = max_product_so_far;\n        }\n    }\n    max_product",
    "    let mut max_product = 0;\n    let mut max_so_far = 0;\n    let mut min_so_far = 0;\n\n    for i in 0..arr.len() {\n        if arr[i] > 0 {\n            max_so_far = max_so_far * arr[i];\n            min_so_far = min(min_so_far * arr[i], 1);\n        } else if arr[i] == 0 {\n            max_so_far = 0;\n            min_so_far = 0;\n        } else {\n            let temp = max_so_far;\n            max_so_far = max(min_so_far * arr[i], 1);\n            min_so_far = temp * arr[i];\n        }\n\n        if max_so_far > max_product {\n            max_product = max_so_far;\n        }\n    }\n\n    max_product",
    "    let mut max_product = 0;\n    let mut max_so_far = 0;\n    let mut min_so_far = 0;\n    for i in arr {\n        if i > 0 {\n            max_so_far = max_so_far * i;\n            min_so_far = min(min_so_far * i, 1);\n        } else if i == 0 {\n            max_so_far = 0;\n            min_so_far = 0;\n        } else {\n            let temp = max_so_far;\n            max_so_far = max(min_so_far * i, 1);\n            min_so_far = temp * i;\n        }\n        if max_so_far > max_product {\n            max_product = max_so_far;\n        }\n    }\n    max_product",
    "    let mut max_product = 1;\n    let mut product = 1;\n    let mut max_so_far = arr[0];\n    let mut min_so_far = arr[0];\n    for i in 1..arr.len() {\n        if arr[i] < 0 {\n            let temp = max_so_far;\n            max_so_far = min_so_far;\n            min_so_far = temp;\n        }\n        max_so_far = max(arr[i], max_so_far * arr[i]);\n        min_so_far = min(arr[i], min_so_far * arr[i]);\n        max_product = max(max_product, max_so_far);\n    }\n    max_product",
    "    let mut max_product = 0;\n    let mut product = 1;\n    let mut max_so_far = arr[0];\n    let mut min_so_far = arr[0];\n\n    for i in 1..arr.len() {\n        let mut tmp_max = max_so_far;\n        max_so_far = max(max(max_so_far * arr[i], min_so_far * arr[i]), arr[i]);\n        min_so_far = min(min(tmp_max * arr[i], min_so_far * arr[i]), arr[i]);\n        max_product = max(max_product, max_so_far);\n    }\n\n    max_product"
  ]
}