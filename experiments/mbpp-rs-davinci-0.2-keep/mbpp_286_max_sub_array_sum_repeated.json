{
  "name": "mbpp_286_max_sub_array_sum_repeated",
  "language": "rs",
  "prompt": "/// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nfn max_sub_array_sum_repeated(a: Vec<isize>, n: isize, k: isize) -> isize {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_286_max_sub_array_sum_repeated.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\nfn main() {\n    let candidate = max_sub_array_sum_repeated;\n    assert_eq!(candidate(vec![10, 20, -30, -1], 4, 3), 30);\n    assert_eq!(candidate(vec![-1, 10, 20], 3, 2), 59);\n    assert_eq!(candidate(vec![-1, -2, -3], 3, 3), -1);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    let mut max_sum = 0;\n    let mut curr_sum = 0;\n    let mut max_elem = 0;\n    let mut min_elem = 0;\n    let mut max_elem_index = 0;\n    let mut min_elem_index = 0;\n    for i in 0..n {\n        curr_sum += a[i as usize];\n        if a[i as usize] > max_elem {\n            max_elem = a[i as usize];\n            max_elem_index = i;\n        }\n        if a[i as usize] < min_elem {\n            min_elem = a[i as usize];\n            min_elem_index = i;\n        }\n    }\n    if k == 1 {\n        return curr_sum;\n    }\n    let mut sum_of_all_elements = curr_sum;\n    curr_sum = curr_sum - min_elem;\n    curr_sum = curr_sum - max_elem;\n    max_sum = curr_sum;\n    for _ in 1..k {\n        if max_elem_index > min_elem_index {\n            curr_sum = curr_sum + sum_of_all_elements - min_elem;\n        } else {\n            curr_sum = curr_sum + sum_of_all_elements - max_elem;\n        }\n        if curr_sum > max_sum {\n            max_sum = curr_sum;\n        }\n    }\n    max_sum",
    "    let mut max_sum = 0;\n    let mut curr_sum = 0;\n    let mut max_elem = a[0];\n    for i in 0..n {\n        if a[i as usize] > max_elem {\n            max_elem = a[i as usize];\n        }\n        curr_sum += a[i as usize];\n        if curr_sum < 0 {\n            curr_sum = 0;\n        }\n        if curr_sum > max_sum {\n            max_sum = curr_sum;\n        }\n    }\n    if max_sum == 0 {\n        return max_elem;\n    }\n    let mut max_wrap = 0;\n    for i in 0..n {\n        max_wrap += a[i as usize];\n        a[i as usize] = -a[i as usize];\n    }\n    let mut curr_wrap = 0;\n    for i in 0..n {\n        curr_wrap += a[i as usize];\n        if curr_wrap < 0 {\n            curr_wrap = 0;\n        }\n        if curr_wrap > max_wrap {\n            max_wrap = curr_wrap;\n        }\n    }\n    max_sum.max(max_wrap + max_sum * (k - 2))",
    "    let mut max_sum = 0;\n    let mut curr_sum = 0;\n    let mut max_element = std::isize::MIN;\n    let mut curr_element = 0;\n\n    for i in 0..n {\n        curr_sum += a[i as usize];\n        curr_element += a[i as usize];\n        if curr_sum > max_sum {\n            max_sum = curr_sum;\n        }\n        if curr_element > max_element {\n            max_element = curr_element;\n        }\n        if curr_sum < 0 {\n            curr_sum = 0;\n        }\n    }\n\n    let mut total_sum = curr_element * k;\n    if total_sum < 0 {\n        return max_element;\n    }\n\n    let mut remaining_sum = max_sum * (k - 2);\n    let mut prefix_sum = 0;\n    let mut suffix_sum = 0;\n\n    for i in 0..n {\n        prefix_sum += a[i as usize];\n        if prefix_sum > max_sum {\n            max_sum = prefix_sum;\n        }\n    }\n\n    for i in (0..n).rev() {\n        suffix_sum += a[i as usize];\n        if suffix_sum > max_sum {\n            max_sum = suffix_sum;\n        }\n    }\n\n    total_sum = total_sum + remaining_sum + max_sum;\n    total_sum",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n    for i in 0..n * k {\n        max_ending_here += a[i as usize % n];\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n    println!(\"{} {}\", start, end);\n    max_so_far",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n * k {\n        max_ending_here += a[i as usize % n];\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n\n    println!(\"{} {}\", start, end);\n    max_so_far",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n    let mut i = 0;\n    while i < n * k {\n        max_ending_here += a[i as usize];\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n        i += 1;\n    }\n    println!(\"{} {}\", start, end);\n    max_so_far",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n    for i in 0..n * k {\n        max_ending_here += a[i as usize % n];\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n    println!(\"{} {}\", start, end);\n    max_so_far",
    "    let mut max_so_far: isize = std::isize::MIN;\n    let mut max_ending_here: isize = 0;\n    let mut start: usize = 0;\n    let mut end: usize = 0;\n    let mut s: usize = 0;\n\n    for i in 0..n {\n        max_ending_here += a[i as usize];\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i as usize;\n        }\n\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i as usize + 1;\n        }\n    }\n\n    let mut sum: isize = 0;\n    for i in 0..n {\n        sum += a[i as usize];\n    }\n\n    if sum > 0 {\n        max_so_far = std::cmp::max(max_so_far, sum * k);\n    }\n\n    let mut curr_sum: isize = 0;\n    for i in 0..start {\n        curr_sum += a[i];\n    }\n\n    let mut left_sum: isize = curr_sum;\n    for i in start..n {\n        curr_sum += a[i];\n        curr_sum -= a[i - start];\n        left_sum = std::cmp::max(left_sum, curr_sum);\n    }\n\n    curr_sum = 0;\n    for i in end + 1..n {\n        curr_sum += a[i];\n    }\n\n    let mut right_sum: isize = curr_sum;\n    for i in 0..n - end - 1 {\n        curr_sum += a[i];\n        curr_sum -= a[i + end + 1];\n        right_sum = std::cmp::max(right_sum, curr_sum);\n    }\n\n    std::cmp::max(\n        max_so_far,\n        std::cmp::max(left_sum + right_sum, left_sum + right_sum + sum * (k",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..k {\n        for j in 0..n {\n            max_ending_here += a[j as usize];\n\n            if max_so_far < max_ending_here {\n                max_so_far = max_ending_here;\n                start = s;\n                end = j;\n            }\n\n            if max_ending_here < 0 {\n                max_ending_here = 0;\n                s = j + 1;\n            }\n        }\n    }\n    println!(\"{} {}\", start, end);\n    max_so_far",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n    for i in 0..n * k {\n        max_ending_here += a[(i % n) as usize];\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n    println!(\"{} {}\", start, end);\n    max_so_far",
    "    let mut max_sum = 0;\n    let mut curr_sum = 0;\n    for i in 0..n {\n        curr_sum += a[i as usize];\n    }\n    max_sum = curr_sum;\n    let mut max_elem = a[0];\n    for i in 1..n {\n        if a[i as usize] > max_elem {\n            max_elem = a[i as usize];\n        }\n    }\n    let mut curr_val = curr_sum;\n    for i in 0..n {\n        curr_val = curr_val - max_elem + a[i as usize];\n        if curr_val > max_sum {\n            max_sum = curr_val;\n        }\n    }\n    max_sum * k",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n * k {\n        max_ending_here += a[i as usize % n];\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n\n    println!(\"{} {}\", start, end);\n    max_so_far",
    "    let mut max_so_far = 0;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n    let mut max_sum = 0;\n\n    for i in 0..n {\n        max_ending_here += a[i as usize];\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n\n    let mut min_sum = 0;\n    let mut min_so_far = 0;\n    let mut min_ending_here = 0;\n    let mut t = 0;\n    for i in 0..n {\n        min_ending_here += a[i as usize];\n        if min_so_far > min_ending_here {\n            min_so_far = min_ending_here;\n            t = i;\n        }\n        if min_ending_here > 0 {\n            min_ending_here = 0;\n        }\n    }\n\n    let mut sum = 0;\n    for i in 0..n {\n        sum += a[i as usize];\n    }\n\n    if sum > 0 {\n        max_sum = max_so_far;\n    } else {\n        max_sum = max_so_far;\n        for i in 0..k - 1 {\n            max_sum += sum;\n        }\n    }\n\n    max_sum",
    "    let mut max_sum = 0;\n    let mut curr_sum = 0;\n    let mut max_elem = a[0];\n    for i in 0..n {\n        if a[i as usize] > max_elem {\n            max_elem = a[i as usize];\n        }\n        curr_sum += a[i as usize];\n        if curr_sum < 0 {\n            curr_sum = 0;\n        }\n        if curr_sum > max_sum {\n            max_sum = curr_sum;\n        }\n    }\n    if max_sum == 0 {\n        return max_elem;\n    }\n    let mut max_wrap = 0;\n    for i in 0..n {\n        max_wrap += a[i as usize];\n        a[i as usize] = -a[i as usize];\n    }\n    let mut curr_wrap = 0;\n    for i in 0..n {\n        curr_wrap += a[i as usize];\n        if curr_wrap < 0 {\n            curr_wrap = 0;\n        }\n        if curr_wrap > max_wrap {\n            max_wrap = curr_wrap;\n        }\n    }\n    max_sum + max_wrap * (k - 2)",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n {\n        max_ending_here += a[i as usize];\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n\n    let mut max_wrap = 0;\n    let mut temp = 0;\n    for i in 0..n {\n        temp += a[i as usize];\n        if temp < 0 {\n            temp = 0;\n        }\n        max_wrap = std::cmp::max(temp, max_wrap);\n    }\n\n    if max_wrap > 0 {\n        max_wrap *= k;\n        max_wrap = std::cmp::max(max_wrap, max_so_far);\n    } else {\n        max_wrap = max_so_far;\n    }\n\n    max_wrap",
    "    let mut max_sum = 0;\n    let mut curr_sum = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for _ in 0..k {\n        for i in 0..n {\n            curr_sum += a[i as usize];\n\n            if curr_sum < 0 {\n                curr_sum = 0;\n                s = i + 1;\n            } else if curr_sum > max_sum {\n                max_sum = curr_sum;\n                start = s;\n                end = i;\n            }\n        }\n    }\n\n    max_sum",
    "    let mut max_sum = 0;\n    let mut max_sum_so_far = 0;\n    let mut max_element = a[0];\n    let mut min_element = a[0];\n    let mut min_sum_so_far = 0;\n    let mut sum = 0;\n    for i in 0..n {\n        sum += a[i as usize];\n        max_element = max(max_element, a[i as usize]);\n        min_element = min(min_element, a[i as usize]);\n        max_sum_so_far = max(max_sum_so_far + a[i as usize], a[i as usize]);\n        max_sum = max(max_sum, max_sum_so_far);\n        min_sum_so_far = min(min_sum_so_far + a[i as usize], a[i as usize]);\n    }\n    if k == 1 {\n        return max_sum;\n    }\n    if max_element <= 0 {\n        return max_element * k;\n    }\n    if min_element >= 0 {\n        return sum * k;\n    }\n    let mut max_prefix_sum = 0;\n    let mut max_suffix_sum = 0;\n    let mut prefix_sum = 0;\n    let mut suffix_sum = 0;\n    for i in 0..n {\n        prefix_sum += a[i as usize];\n        max_prefix_sum = max(max_prefix_sum, prefix_sum);\n    }\n    for i in (0..n).rev() {\n        suffix_sum += a[i as usize];\n        max_suffix_sum = max(max_suffix_sum, suffix_sum);\n    }\n    max(\n        max(max_sum, max_prefix_sum + max_suffix_sum + (k - 2) * sum),\n        max_prefix_sum + max_suffix_sum + (k - 2) * sum - min_sum_so_far,\n    )",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n * k {\n        max_ending_here += a[i as usize % n];\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n\n    println!(\"{} {}\", start, end);\n    max_so_far",
    "    let mut max_sum = std::isize::MIN;\n    let mut curr_sum = 0;\n    for i in 0..n {\n        curr_sum += a[i as usize];\n    }\n    max_sum = std::cmp::max(max_sum, curr_sum);\n    let mut max_elem = *a.iter().max().unwrap();\n    let mut min_elem = *a.iter().min().unwrap();\n    let mut max_prefix = 0;\n    let mut min_prefix = 0;\n    let mut max_suffix = 0;\n    let mut min_suffix = 0;\n    for i in 0..n {\n        max_prefix += a[i as usize];\n        max_suffix += a[(n - 1 - i) as usize];\n        if max_elem < 0 {\n            max_elem = a[i as usize];\n        } else {\n            max_elem = std::cmp::max(max_elem, max_prefix);\n        }\n        if min_elem > 0 {\n            min_elem = a[i as usize];\n        } else {\n            min_elem = std::cmp::min(min_elem, min_prefix);\n        }\n        max_sum = std::cmp::max(max_sum, max_prefix);\n        max_sum = std::cmp::max(max_sum, max_suffix);\n        max_sum = std::cmp::max(max_sum, max_elem + (k - 2) * max_prefix + min_suffix);\n        max_sum = std::cmp::max(max_sum, min_elem + (k - 2) * min_prefix + max_suffix);\n    }\n    max_sum",
    "    let mut max_so_far = isize::min_value();\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n * k {\n        max_ending_here += a[i as usize % n];\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n    println!(\"{} {}\", start, end);\n    max_so_far"
  ]
}