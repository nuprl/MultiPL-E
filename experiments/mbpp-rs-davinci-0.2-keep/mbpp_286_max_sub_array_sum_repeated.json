{
  "name": "mbpp_286_max_sub_array_sum_repeated",
  "language": "rs",
  "prompt": "/// Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nfn max_sub_array_sum_repeated(a: Vec<isize>, n: isize, k: isize) -> isize {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_286_max_sub_array_sum_repeated.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\nfn main() {\n    let candidate = max_sub_array_sum_repeated;\n    assert_eq!(candidate(vec![10, 20, -30, -1], 4, 3), 30);\n    assert_eq!(candidate(vec![-1, 10, 20], 3, 2), 59);\n    assert_eq!(candidate(vec![-1, -2, -3], 3, 3), -1);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    let mut max_sum = 0;\n    let mut curr_sum = 0;\n    let mut max_elem = 0;\n    let mut min_elem = 0;\n    let mut max_elem_index = 0;\n    let mut min_elem_index = 0;\n    for i in 0..n {\n        curr_sum += a[i as usize];\n        if a[i as usize] > max_elem {\n            max_elem = a[i as usize];\n            max_elem_index = i;\n        }\n        if a[i as usize] < min_elem {\n            min_elem = a[i as usize];\n            min_elem_index = i;\n        }\n    }\n    if k == 1 {\n        return curr_sum;\n    }\n    let mut sum_of_all_elements = curr_sum;\n    curr_sum = curr_sum - min_elem;\n    curr_sum = curr_sum - max_elem;\n    max_sum = curr_sum;\n    for _ in 1..k {\n        if max_elem_index > min_elem_index {\n            curr_sum = curr_sum + sum_of_all_elements - min_elem;\n        } else {\n            curr_sum = curr_sum + sum_of_all_elements - max_elem;\n        }\n        if curr_sum > max_sum {\n            max_sum = curr_sum;\n        }\n    }\n    max_sum",
    "    let mut max_sum = 0;\n    let mut curr_sum = 0;\n    let mut max_elem = a[0];\n    for i in 0..n {\n        if a[i as usize] > max_elem {\n            max_elem = a[i as usize];\n        }\n        curr_sum += a[i as usize];\n        if curr_sum < 0 {\n            curr_sum = 0;\n        }\n        if curr_sum > max_sum {\n            max_sum = curr_sum;\n        }\n    }\n    if max_sum == 0 {\n        return max_elem;\n    }\n    let mut max_wrap = 0;\n    for i in 0..n {\n        max_wrap += a[i as usize];\n        a[i as usize] = -a[i as usize];\n    }\n    let mut curr_wrap = 0;\n    for i in 0..n {\n        curr_wrap += a[i as usize];\n        if curr_wrap < 0 {\n            curr_wrap = 0;\n        }\n        if curr_wrap > max_wrap {\n            max_wrap = curr_wrap;\n        }\n    }\n    max_sum.max(max_wrap + max_sum * (k - 2))",
    "    let mut max_sum = 0;\n    let mut curr_sum = 0;\n    let mut max_element = std::isize::MIN;\n    let mut curr_element = 0;\n\n    for i in 0..n {\n        curr_sum += a[i as usize];\n        curr_element += a[i as usize];\n        if curr_sum > max_sum {\n            max_sum = curr_sum;\n        }\n        if curr_element > max_element {\n            max_element = curr_element;\n        }\n        if curr_sum < 0 {\n            curr_sum = 0;\n        }\n    }\n\n    let mut total_sum = curr_element * k;\n    if total_sum < 0 {\n        return max_element;\n    }\n\n    let mut remaining_sum = max_sum * (k - 2);\n    let mut prefix_sum = 0;\n    let mut suffix_sum = 0;\n\n    for i in 0..n {\n        prefix_sum += a[i as usize];\n        if prefix_sum > max_sum {\n            max_sum = prefix_sum;\n        }\n    }\n\n    for i in (0..n).rev() {\n        suffix_sum += a[i as usize];\n        if suffix_sum > max_sum {\n            max_sum = suffix_sum;\n        }\n    }\n\n    total_sum = total_sum + remaining_sum + max_sum;\n    total_sum",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n    for i in 0..n * k {\n        max_ending_here += a[i as usize % n];\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n    println!(\"{} {}\", start, end);\n    max_so_far",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n * k {\n        max_ending_here += a[i as usize % n];\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n\n    println!(\"{} {}\", start, end);\n    max_so_far",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n    let mut i = 0;\n    while i < n * k {\n        max_ending_here += a[i as usize];\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n        i += 1;\n    }\n    println!(\"{} {}\", start, end);\n    max_so_far",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n    for i in 0..n * k {\n        max_ending_here += a[i as usize % n];\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n    println!(\"{} {}\", start, end);\n    max_so_far",
    "    let mut max_so_far: isize = std::isize::MIN;\n    let mut max_ending_here: isize = 0;\n    let mut start: usize = 0;\n    let mut end: usize = 0;\n    let mut s: usize = 0;\n\n    for i in 0..n {\n        max_ending_here += a[i as usize];\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i as usize;\n        }\n\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i as usize + 1;\n        }\n    }\n\n    let mut sum: isize = 0;\n    for i in 0..n {\n        sum += a[i as usize];\n    }\n\n    if sum > 0 {\n        max_so_far = std::cmp::max(max_so_far, sum * k);\n    }\n\n    let mut curr_sum: isize = 0;\n    for i in 0..start {\n        curr_sum += a[i];\n    }\n\n    let mut left_sum: isize = curr_sum;\n    for i in start..n {\n        curr_sum += a[i];\n        curr_sum -= a[i - start];\n        left_sum = std::cmp::max(left_sum, curr_sum);\n    }\n\n    curr_sum = 0;\n    for i in end + 1..n {\n        curr_sum += a[i];\n    }\n\n    let mut right_sum: isize = curr_sum;\n    for i in 0..n - end - 1 {\n        curr_sum += a[i];\n        curr_sum -= a[i + end + 1];\n        right_sum = std::cmp::max(right_sum, curr_sum);\n    }\n\n    std::cmp::max(\n        max_so_far,\n        std::cmp::max(left_sum + right_sum, left_sum + right_sum + sum * (k",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..k {\n        for j in 0..n {\n            max_ending_here += a[j as usize];\n\n            if max_so_far < max_ending_here {\n                max_so_far = max_ending_here;\n                start = s;\n                end = j;\n            }\n\n            if max_ending_here < 0 {\n                max_ending_here = 0;\n                s = j + 1;\n            }\n        }\n    }\n    println!(\"{} {}\", start, end);\n    max_so_far",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n    for i in 0..n * k {\n        max_ending_here += a[(i % n) as usize];\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n    println!(\"{} {}\", start, end);\n    max_so_far",
    "    let mut max_sum = 0;\n    let mut curr_sum = 0;\n    for i in 0..n {\n        curr_sum += a[i as usize];\n    }\n    max_sum = curr_sum;\n    let mut max_elem = a[0];\n    for i in 1..n {\n        if a[i as usize] > max_elem {\n            max_elem = a[i as usize];\n        }\n    }\n    let mut curr_val = curr_sum;\n    for i in 0..n {\n        curr_val = curr_val - max_elem + a[i as usize];\n        if curr_val > max_sum {\n            max_sum = curr_val;\n        }\n    }\n    max_sum * k",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n * k {\n        max_ending_here += a[i as usize % n];\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n\n    println!(\"{} {}\", start, end);\n    max_so_far",
    "    let mut max_so_far = 0;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n    let mut max_sum = 0;\n\n    for i in 0..n {\n        max_ending_here += a[i as usize];\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n\n    let mut min_sum = 0;\n    let mut min_so_far = 0;\n    let mut min_ending_here = 0;\n    let mut t = 0;\n    for i in 0..n {\n        min_ending_here += a[i as usize];\n        if min_so_far > min_ending_here {\n            min_so_far = min_ending_here;\n            t = i;\n        }\n        if min_ending_here > 0 {\n            min_ending_here = 0;\n        }\n    }\n\n    let mut sum = 0;\n    for i in 0..n {\n        sum += a[i as usize];\n    }\n\n    if sum > 0 {\n        max_sum = max_so_far;\n    } else {\n        max_sum = max_so_far;\n        for i in 0..k - 1 {\n            max_sum += sum;\n        }\n    }\n\n    max_sum",
    "    let mut max_sum = 0;\n    let mut curr_sum = 0;\n    let mut max_elem = a[0];\n    for i in 0..n {\n        if a[i as usize] > max_elem {\n            max_elem = a[i as usize];\n        }\n        curr_sum += a[i as usize];\n        if curr_sum < 0 {\n            curr_sum = 0;\n        }\n        if curr_sum > max_sum {\n            max_sum = curr_sum;\n        }\n    }\n    if max_sum == 0 {\n        return max_elem;\n    }\n    let mut max_wrap = 0;\n    for i in 0..n {\n        max_wrap += a[i as usize];\n        a[i as usize] = -a[i as usize];\n    }\n    let mut curr_wrap = 0;\n    for i in 0..n {\n        curr_wrap += a[i as usize];\n        if curr_wrap < 0 {\n            curr_wrap = 0;\n        }\n        if curr_wrap > max_wrap {\n            max_wrap = curr_wrap;\n        }\n    }\n    max_sum + max_wrap * (k - 2)",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n {\n        max_ending_here += a[i as usize];\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n\n    let mut max_wrap = 0;\n    let mut temp = 0;\n    for i in 0..n {\n        temp += a[i as usize];\n        if temp < 0 {\n            temp = 0;\n        }\n        max_wrap = std::cmp::max(temp, max_wrap);\n    }\n\n    if max_wrap > 0 {\n        max_wrap *= k;\n        max_wrap = std::cmp::max(max_wrap, max_so_far);\n    } else {\n        max_wrap = max_so_far;\n    }\n\n    max_wrap",
    "    let mut max_sum = 0;\n    let mut curr_sum = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for _ in 0..k {\n        for i in 0..n {\n            curr_sum += a[i as usize];\n\n            if curr_sum < 0 {\n                curr_sum = 0;\n                s = i + 1;\n            } else if curr_sum > max_sum {\n                max_sum = curr_sum;\n                start = s;\n                end = i;\n            }\n        }\n    }\n\n    max_sum",
    "    let mut max_sum = 0;\n    let mut max_sum_so_far = 0;\n    let mut max_element = a[0];\n    let mut min_element = a[0];\n    let mut min_sum_so_far = 0;\n    let mut sum = 0;\n    for i in 0..n {\n        sum += a[i as usize];\n        max_element = max(max_element, a[i as usize]);\n        min_element = min(min_element, a[i as usize]);\n        max_sum_so_far = max(max_sum_so_far + a[i as usize], a[i as usize]);\n        max_sum = max(max_sum, max_sum_so_far);\n        min_sum_so_far = min(min_sum_so_far + a[i as usize], a[i as usize]);\n    }\n    if k == 1 {\n        return max_sum;\n    }\n    if max_element <= 0 {\n        return max_element * k;\n    }\n    if min_element >= 0 {\n        return sum * k;\n    }\n    let mut max_prefix_sum = 0;\n    let mut max_suffix_sum = 0;\n    let mut prefix_sum = 0;\n    let mut suffix_sum = 0;\n    for i in 0..n {\n        prefix_sum += a[i as usize];\n        max_prefix_sum = max(max_prefix_sum, prefix_sum);\n    }\n    for i in (0..n).rev() {\n        suffix_sum += a[i as usize];\n        max_suffix_sum = max(max_suffix_sum, suffix_sum);\n    }\n    max(\n        max(max_sum, max_prefix_sum + max_suffix_sum + (k - 2) * sum),\n        max_prefix_sum + max_suffix_sum + (k - 2) * sum - min_sum_so_far,\n    )",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n * k {\n        max_ending_here += a[i as usize % n];\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n\n    println!(\"{} {}\", start, end);\n    max_so_far",
    "    let mut max_sum = std::isize::MIN;\n    let mut curr_sum = 0;\n    for i in 0..n {\n        curr_sum += a[i as usize];\n    }\n    max_sum = std::cmp::max(max_sum, curr_sum);\n    let mut max_elem = *a.iter().max().unwrap();\n    let mut min_elem = *a.iter().min().unwrap();\n    let mut max_prefix = 0;\n    let mut min_prefix = 0;\n    let mut max_suffix = 0;\n    let mut min_suffix = 0;\n    for i in 0..n {\n        max_prefix += a[i as usize];\n        max_suffix += a[(n - 1 - i) as usize];\n        if max_elem < 0 {\n            max_elem = a[i as usize];\n        } else {\n            max_elem = std::cmp::max(max_elem, max_prefix);\n        }\n        if min_elem > 0 {\n            min_elem = a[i as usize];\n        } else {\n            min_elem = std::cmp::min(min_elem, min_prefix);\n        }\n        max_sum = std::cmp::max(max_sum, max_prefix);\n        max_sum = std::cmp::max(max_sum, max_suffix);\n        max_sum = std::cmp::max(max_sum, max_elem + (k - 2) * max_prefix + min_suffix);\n        max_sum = std::cmp::max(max_sum, min_elem + (k - 2) * min_prefix + max_suffix);\n    }\n    max_sum",
    "    let mut max_so_far = isize::min_value();\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n * k {\n        max_ending_here += a[i as usize % n];\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n    println!(\"{} {}\", start, end);\n    max_so_far",
    "    let mut max_sum = 0;\n    let mut curr_sum = 0;\n    let mut max_sum_so_far = 0;\n    let mut curr_sum_so_far = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n    let mut e = 0;\n    let mut max_start = 0;\n    let mut max_end = 0;\n    for i in 0..n {\n        curr_sum += a[i as usize];\n        if curr_sum < 0 {\n            curr_sum = 0;\n            s = i + 1;\n        }\n        if curr_sum > max_sum {\n            max_sum = curr_sum;\n            start = s;\n            end = i;\n        }\n    }\n    for i in 0..n {\n        curr_sum_so_far += a[i as usize];\n        if curr_sum_so_far < 0 {\n            curr_sum_so_far = 0;\n            e = i + 1;\n        }\n        if curr_sum_so_far > max_sum_so_far {\n            max_sum_so_far = curr_sum_so_far;\n            max_start = e;\n            max_end = i;\n        }\n    }\n    if max_sum_so_far < 0 {\n        return max_sum_so_far;\n    }\n    let min_sum = min_sub_array_sum(a.clone(), n);\n    let mut min_sum_so_far = 0;\n    let mut curr_min_sum_so_far = 0;\n    for i in 0..n {\n        curr_min_sum_so_far += a[i as usize];\n        if curr_min_sum_so_far > 0 {\n            curr_min_sum_so_far = 0;\n        }\n        if curr_min_sum_so_far < min_sum_so_far {\n            min_sum_so_far = curr_min_sum_so_far;\n        }\n   ",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n * k {\n        max_ending_here += a[i as usize % n];\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n\n    println!(\"{} {}\", start, end);\n    max_so_far",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n    for i in 0..n {\n        max_ending_here += a[i as usize];\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n    let mut min_so_far = std::isize::MAX;\n    let mut min_ending_here = 0;\n    let mut start_min = 0;\n    let mut end_min = 0;\n    let mut s_min = 0;\n    for i in 0..n {\n        min_ending_here += a[i as usize];\n        if min_so_far > min_ending_here {\n            min_so_far = min_ending_here;\n            start_min = s_min;\n            end_min = i;\n        }\n        if min_ending_here > 0 {\n            min_ending_here = 0;\n            s_min = i + 1;\n        }\n    }\n    let mut max_wrap = 0;\n    for i in 0..n {\n        max_wrap += a[i as usize];\n    }\n    max_wrap = max_wrap - min_so_far;\n    if k == 1 {\n        return max_so_far;\n    }\n    return std::cmp::max(\n        std::cmp::max(max_so_far, max_wrap),\n        max_so_far + (k - 2) * max_wrap + min_so_far,\n    );",
    "    let mut max_sum = -1;\n    let mut curr_sum = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n    let mut i = 0;\n    while i < k {\n        let mut j = 0;\n        while j < n {\n            curr_sum += a[j as usize];\n            if curr_sum < 0 {\n                curr_sum = 0;\n                s = j + 1;\n            } else if curr_sum > max_sum {\n                max_sum = curr_sum;\n                start = s;\n                end = j;\n            }\n            j += 1;\n        }\n        if max_sum == -1 {\n            max_sum = 0;\n            for j in 0..n {\n                max_sum += a[j as usize];\n            }\n        }\n        i += 1;\n    }\n    println!(\"{} {}\", start, end);\n    max_sum",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n    for i in 0..n * k {\n        max_ending_here += a[i as usize % n];\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n    println!(\"{} {}\", start, end);\n    max_so_far",
    "    let mut max_sum = 0;\n    let mut curr_sum = 0;\n    for i in 0..n {\n        curr_sum += a[i as usize];\n    }\n    max_sum = curr_sum;\n    for i in 0..n {\n        curr_sum += (k - 1) * a[i as usize];\n        max_sum = max(max_sum, curr_sum);\n    }\n    max_sum",
    "    let mut max_sum = 0;\n    let mut sum = 0;\n    let mut max_sum_so_far = 0;\n    let mut sum_so_far = 0;\n    let mut i = 0;\n    let mut j = 0;\n    while i < n {\n        sum += a[i as usize];\n        if sum > max_sum {\n            max_sum = sum;\n        }\n        i += 1;\n    }\n    sum_so_far = max_sum;\n    i = 0;\n    while i < n {\n        sum_so_far += a[i as usize];\n        if sum_so_far > max_sum_so_far {\n            max_sum_so_far = sum_so_far;\n        }\n        i += 1;\n    }\n    let mut max_sum_k = max_sum_so_far;\n    if k > 1 {\n        max_sum_k = max_sum_so_far + (k - 2) * sum;\n    }\n    max_sum_k",
    "    let mut max_sum = 0;\n    let mut curr_sum = 0;\n    for i in 0..n {\n        curr_sum += a[i as usize];\n    }\n    max_sum = curr_sum;\n    for i in 0..n {\n        curr_sum += (k - 1) * a[i as usize];\n        max_sum = std::cmp::max(max_sum, curr_sum);\n    }\n    max_sum",
    "    let mut max_sum = 0;\n    let mut curr_sum = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n    for i in 0..n {\n        curr_sum += a[i as usize];\n        if curr_sum < 0 {\n            curr_sum = 0;\n            s = i + 1;\n        }\n        if max_sum < curr_sum {\n            max_sum = curr_sum;\n            start = s;\n            end = i;\n        }\n    }\n    let mut min_sum = 0;\n    let mut curr_sum = 0;\n    for i in 0..n {\n        curr_sum += a[i as usize];\n        if curr_sum > 0 {\n            curr_sum = 0;\n        }\n        if min_sum > curr_sum {\n            min_sum = curr_sum;\n        }\n    }\n    let mut circular_sum = 0;\n    for i in 0..n {\n        circular_sum += a[i as usize];\n    }\n    let mut max_circular_sum = circular_sum - min_sum;\n    if max_circular_sum > max_sum {\n        max_sum = max_circular_sum;\n    }\n    if k == 1 {\n        return max_sum;\n    }\n    let mut max_wrap = 0;\n    for i in 0..n {\n        max_wrap += a[i as usize];\n        if max_wrap > max_sum {\n            max_sum = max_wrap;\n        }\n    }\n    let mut min_wrap = 0;\n    for i in 0..n {\n        min_wrap += a[i as usize];\n        if min_wrap < max_circular_sum {\n            max_circular_sum = min_wrap;\n        }\n    }\n    let mut final_sum = (k - 2) * circular_sum + max_sum;\n    if final_sum < max_circular_sum {\n        final_sum = max_circular_sum;\n    }\n",
    "    let mut max_so_far = 0;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n    for i in 0..n {\n        max_ending_here += a[i as usize];\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n    let mut max_wrap = 0;\n    let mut temp = 0;\n    for i in 0..n {\n        temp += a[i as usize];\n        if temp < 0 {\n            temp = 0;\n        }\n        max_wrap = max(max_wrap, temp);\n    }\n    if max_wrap > 0 {\n        return max(max_so_far, max_wrap * k);\n    }\n    let mut min_wrap = 0;\n    let mut temp = 0;\n    for i in 0..n {\n        temp += a[i as usize];\n        if temp > 0 {\n            temp = 0;\n        }\n        min_wrap = min(min_wrap, temp);\n    }\n    max_so_far - min_wrap",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n    for i in 0..n * k {\n        max_ending_here += a[i as usize % n];\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n    println!(\"{} {}\", start, end);\n    max_so_far",
    "    let mut max_sum = std::isize::MIN;\n    let mut curr_sum = 0;\n    for i in 0..n {\n        curr_sum += a[i as usize];\n    }\n    max_sum = std::cmp::max(max_sum, curr_sum);\n    let mut max_ele = a.iter().max().unwrap();\n    let mut min_ele = a.iter().min().unwrap();\n    let mut max_ele_index = a.iter().position(|&x| x == *max_ele).unwrap();\n    let mut min_ele_index = a.iter().position(|&x| x == *min_ele).unwrap();\n    for i in 1..k {\n        if max_ele_index > min_ele_index {\n            curr_sum = curr_sum - (*max_ele * n) + (*min_ele * n);\n        } else {\n            curr_sum = curr_sum - (*min_ele * n) + (*max_ele * n);\n        }\n        max_sum = std::cmp::max(max_sum, curr_sum);\n    }\n    max_sum",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n    let mut t = 0;\n\n    for i in 0..n {\n        max_ending_here += a[i as usize];\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n\n    let mut max_wrap = 0;\n    for i in 0..start {\n        max_wrap += a[i as usize];\n    }\n\n    let mut min_wrap = 0;\n    for i in end + 1..n {\n        min_wrap += a[i as usize];\n    }\n\n    let mut wrap = max_wrap + min_wrap;\n\n    if wrap < 0 {\n        wrap = 0;\n    }\n\n    let mut max_kadane = max_so_far;\n\n    for i in 1..k {\n        max_kadane = max_kadane + wrap;\n        if max_so_far < max_kadane {\n            max_so_far = max_kadane;\n        }\n    }\n\n    max_so_far",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n * k {\n        max_ending_here += a[i as usize % n];\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n\n    println!(\"{} {}\", start, end);\n\n    max_so_far",
    "    let mut max_sum = 0;\n    let mut curr_sum = 0;\n    for i in 0..n {\n        curr_sum += a[i as usize];\n    }\n    max_sum = curr_sum;\n    let mut max_elem = a.iter().max().unwrap();\n    let mut min_elem = a.iter().min().unwrap();\n    let mut sum = curr_sum;\n    for i in 0..n {\n        sum -= a[i as usize];\n        curr_sum = sum + (n * a[i as usize]);\n        if curr_sum > max_sum {\n            max_sum = curr_sum;\n        }\n    }\n    if k == 1 {\n        return max_sum;\n    }\n    let mut curr_prefix = 0;\n    let mut curr_suffix = 0;\n    for i in 0..n {\n        curr_prefix += a[i as usize];\n        if curr_prefix > max_elem {\n            max_elem = curr_prefix;\n        }\n    }\n    for i in (0..n).rev() {\n        curr_suffix += a[i as usize];\n        if curr_suffix > max_elem {\n            max_elem = curr_suffix;\n        }\n    }\n    let mut total_sum = sum * (k - 2);\n    total_sum += curr_prefix;\n    total_sum += curr_suffix;\n    if total_sum > max_sum {\n        max_sum = total_sum;\n    }\n    if max_elem > 0 {\n        return max_sum;\n    }\n    max_elem",
    "    let mut max_sum = std::isize::MIN;\n    let mut curr_sum = 0;\n    let mut max_sum_so_far = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n {\n        curr_sum += a[i as usize];\n        if curr_sum < 0 {\n            curr_sum = 0;\n            s = i + 1;\n        }\n        if curr_sum > max_sum_so_far {\n            max_sum_so_far = curr_sum;\n            start = s;\n            end = i;\n        }\n    }\n\n    let mut min_sum = std::isize::MAX;\n    curr_sum = 0;\n    let mut min_sum_so_far = 0;\n    let mut start_ = 0;\n    let mut end_ = 0;\n    s = 0;\n\n    for i in 0..n {\n        curr_sum += a[i as usize];\n        if curr_sum > 0 {\n            curr_sum = 0;\n            s = i + 1;\n        }\n        if curr_sum < min_sum_so_far {\n            min_sum_so_far = curr_sum;\n            start_ = s;\n            end_ = i;\n        }\n    }\n\n    let total_sum = a.iter().sum::<isize>();\n\n    if start <= end_ || end >= start_ {\n        max_sum = std::cmp::max(\n            max_sum_so_far,\n            total_sum * k - min_sum_so_far,\n        );\n    } else {\n        max_sum = std::cmp::max(\n            max_sum_so_far + total_sum * (k - 2) + min_sum_so_far,\n            total_sum * k - min_sum_so_far,\n        );\n    }\n\n    max_sum",
    "    let mut max_sum = 0;\n    let mut sum = 0;\n    let mut max_sum_so_far = 0;\n    let mut sum_so_far = 0;\n    for i in 0..n {\n        sum_so_far += a[i as usize];\n        if sum_so_far < 0 {\n            sum_so_far = 0;\n        }\n        if max_sum_so_far < sum_so_far {\n            max_sum_so_far = sum_so_far;\n        }\n        sum += a[i as usize];\n    }\n    if sum < 0 {\n        max_sum = max_sum_so_far;\n    } else {\n        max_sum = sum * k + max_sum_so_far;\n    }\n    max_sum",
    "    let mut max_sum = 0;\n    let mut curr_sum = 0;\n    let mut max_so_far = std::isize::MIN;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n {\n        max_so_far = std::cmp::max(a[i as usize], max_so_far);\n    }\n\n    if max_so_far <= 0 {\n        return max_so_far;\n    }\n\n    for i in 0..n * k {\n        curr_sum += a[i as usize % n as usize];\n        if curr_sum < 0 {\n            curr_sum = 0;\n            s = i + 1;\n        } else if curr_sum > max_sum {\n            max_sum = curr_sum;\n            start = s;\n            end = i;\n        }\n    }\n\n    max_sum",
    "    let mut max_sum = 0;\n    let mut curr_sum = 0;\n    for i in 0..n {\n        curr_sum += a[i as usize];\n    }\n    max_sum = curr_sum;\n    let mut max_elem = a.iter().max().unwrap();\n    let mut min_elem = a.iter().min().unwrap();\n    let mut prev_sum = curr_sum;\n    for i in 1..k {\n        curr_sum = prev_sum + (*max_elem * (k - i)) + (*min_elem * (i - 1));\n        max_sum = std::cmp::max(max_sum, curr_sum);\n        prev_sum = curr_sum;\n    }\n    max_sum",
    "    let mut max_sum = 0;\n    let mut curr_sum = 0;\n    let mut max_so_far = std::isize::MIN;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n {\n        max_so_far = std::cmp::max(a[i as usize], max_so_far);\n    }\n\n    if max_so_far <= 0 {\n        return max_so_far;\n    }\n\n    for i in 0..n {\n        curr_sum += a[i as usize];\n        if curr_sum < 0 {\n            curr_sum = 0;\n            s = i + 1;\n        }\n        if curr_sum > max_sum {\n            max_sum = curr_sum;\n            start = s;\n            end = i;\n        }\n    }\n\n    for i in 0..k - 1 {\n        for j in start..end + 1 {\n            curr_sum += a[j as usize];\n            max_sum = std::cmp::max(max_sum, curr_sum);\n        }\n    }\n\n    max_sum",
    "    let mut max_sum = 0;\n    let mut curr_sum = 0;\n\n    for i in 0..n {\n        curr_sum += a[i as usize];\n    }\n\n    max_sum = curr_sum;\n\n    for i in 0..n {\n        curr_sum += (k - 1) * a[i as usize];\n        max_sum = max(max_sum, curr_sum);\n    }\n\n    max_sum",
    "    let mut max_sum = std::isize::MIN;\n    let mut curr_sum = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n    let mut e = 0;\n    let mut i = 0;\n    while i < n * k {\n        curr_sum += a[i as usize];\n        end = i;\n        if curr_sum > max_sum {\n            max_sum = curr_sum;\n            s = start;\n            e = end;\n        }\n        if curr_sum < 0 {\n            curr_sum = 0;\n            start = i + 1;\n        }\n        i += 1;\n    }\n    println!(\"{} {}\", s, e);\n    max_sum",
    "    let mut max_so_far = 0;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n {\n        max_ending_here += a[i as usize];\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n\n    let mut max_wrap = 0;\n    let mut temp = 0;\n    for i in 0..n {\n        temp += a[i as usize];\n        if temp < 0 {\n            temp = 0;\n        }\n        max_wrap = max(temp, max_wrap);\n    }\n\n    if max_wrap > 0 {\n        return max(max_so_far, max_wrap * k);\n    } else {\n        return max_so_far;\n    }",
    "    let mut max_sum = 0;\n    let mut curr_sum = 0;\n    let mut max_element = 0;\n    for i in 0..n {\n        max_element = max(max_element, a[i as usize]);\n        curr_sum += a[i as usize];\n        if curr_sum < 0 {\n            curr_sum = 0;\n        }\n        max_sum = max(max_sum, curr_sum);\n    }\n    if max_sum == 0 {\n        return max_element;\n    }\n    let mut sum = 0;\n    for i in 0..n {\n        sum += a[i as usize];\n    }\n    let mut ans = max_sum;\n    for i in 1..k {\n        let mut curr_sum = max_sum;\n        let mut curr_prefix = 0;\n        let mut curr_suffix = 0;\n        for j in 0..n {\n            curr_prefix += a[j as usize];\n            curr_prefix = max(curr_prefix, 0);\n            curr_sum = max(curr_sum, curr_prefix);\n        }\n        for j in (0..n).rev() {\n            curr_suffix += a[j as usize];\n            curr_suffix = max(curr_suffix, 0);\n            curr_sum = max(curr_sum, curr_suffix);\n        }\n        curr_sum += sum * (k - i - 1);\n        ans = max(ans, curr_sum);\n    }\n    ans",
    "    let mut max_sum = 0;\n    let mut curr_sum = 0;\n    let mut max_elem = a[0];\n    for i in 0..n {\n        max_elem = max(max_elem, a[i as usize]);\n        curr_sum += a[i as usize];\n        if curr_sum < 0 {\n            curr_sum = 0;\n        }\n        max_sum = max(max_sum, curr_sum);\n    }\n    if max_sum == 0 {\n        return max_elem;\n    }\n    let mut max_wrap = 0;\n    let mut min_wrap = 0;\n    for i in 0..n {\n        max_wrap += a[i as usize];\n        min_wrap += a[i as usize];\n    }\n    max_wrap = max(max_wrap, 0);\n    min_wrap = min(min_wrap, 0);\n    return max(max_sum, max_wrap + min_wrap * (k - 2));",
    "    let mut max_sum = 0;\n    let mut curr_sum = 0;\n    let mut max_sum_so_far = 0;\n    let mut curr_sum_so_far = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut max_sum_start = 0;\n    let mut max_sum_end = 0;\n    let mut max_sum_start_so_far = 0;\n    let mut max_sum_end_so_far = 0;\n    let mut max_sum_start_temp = 0;\n    let mut max_sum_end_temp = 0;\n    let mut max_sum_temp = 0;\n    let mut curr_sum_temp = 0;\n    let mut max_sum_so_far_temp = 0;\n    let mut curr_sum_so_far_temp = 0;\n    let mut start_temp = 0;\n    let mut end_temp = 0;\n    let mut s_temp = 0;\n    let mut i_temp = 0;\n    let mut j_temp = 0;\n    let mut max_sum_start_so_far_temp = 0;\n    let mut max_sum_end_so_far_temp = 0;\n    let mut max_sum_start_temp_temp = 0;\n    let mut max_sum_end_temp_temp = 0;\n    let mut max_sum_temp_temp = 0;\n    let mut curr_sum_temp_temp = 0;\n    let mut max_sum_so_far_temp_temp = 0;\n    let mut curr_sum_so_far_temp_temp = 0;\n    let mut start_temp_temp = 0;\n    let mut end_temp_temp = 0;\n    let mut s_temp_temp = 0;\n    let mut i_temp_temp = 0;\n    let mut j_temp_temp = 0;\n    let mut max_sum_start_so_far_temp_temp = 0;\n    let mut max_sum_end_so_far_temp_",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n {\n        max_ending_here += a[i as usize];\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n\n    let mut max_wrap = 0;\n    for i in 0..start {\n        max_wrap += a[i as usize];\n    }\n\n    for i in end + 1..n {\n        max_wrap += a[i as usize];\n    }\n\n    let mut max_wrap_all = 0;\n    for i in 0..n {\n        max_wrap_all += a[i as usize];\n    }\n\n    max_wrap_all = max_wrap_all * k;\n\n    max(max(max_so_far, max_wrap), max_wrap_all)",
    "    let mut max_sum = 0;\n    let mut curr_sum = 0;\n    let mut max_arr = vec![];\n    let mut curr_arr = vec![];\n    for i in 0..n {\n        curr_sum += a[i as usize];\n        curr_arr.push(a[i as usize]);\n        if curr_sum > max_sum {\n            max_sum = curr_sum;\n            max_arr = curr_arr.clone();\n        }\n        if curr_sum < 0 {\n            curr_sum = 0;\n            curr_arr = vec![];\n        }\n    }\n    let mut min_sum = 0;\n    let mut curr_sum = 0;\n    let mut min_arr = vec![];\n    let mut curr_arr = vec![];\n    for i in 0..n {\n        curr_sum += a[i as usize];\n        curr_arr.push(a[i as usize]);\n        if curr_sum < min_sum {\n            min_sum = curr_sum;\n            min_arr = curr_arr.clone();\n        }\n        if curr_sum > 0 {\n            curr_sum = 0;\n            curr_arr = vec![];\n        }\n    }\n    let sum_of_array = a.iter().sum::<isize>();\n    let mut max_wrap = sum_of_array * k;\n    if max_wrap > 0 {\n        max_wrap -= min_sum;\n    }\n    let mut max_non_wrap = max_sum;\n    if k > 1 {\n        max_non_wrap = max_non_wrap + sum_of_array * (k - 2);\n    }\n    if max_non_wrap > max_wrap {\n        max_non_wrap\n    } else {\n        max_wrap\n    }",
    "    let mut sum = 0;\n    let mut max_sum = std::isize::MIN;\n    let mut sum_arr = vec![0; n as usize];\n    for i in 0..n {\n        sum += a[i as usize];\n        sum_arr[i as usize] = sum;\n    }\n    for i in 0..n {\n        max_sum = max(max_sum, sum_arr[i as usize]);\n    }\n    let mut max_wrap = 0;\n    for i in 0..n {\n        max_wrap += a[i as usize];\n    }\n    max_wrap = max_wrap * k;\n    for i in 0..n {\n        max_sum = max(max_wrap, max_sum);\n        max_wrap -= a[i as usize];\n    }\n    max_sum",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n * k {\n        max_ending_here += a[i as usize % n];\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n    println!(\"{} {}\", start, end);\n    max_so_far",
    "    let mut max_so_far = 0;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n    let mut max_sum = 0;\n    for i in 0..n {\n        max_ending_here += a[i as usize];\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n    let mut min_sum = 0;\n    let mut min_so_far = 0;\n    let mut min_ending_here = 0;\n    let mut s = 0;\n    for i in 0..n {\n        min_ending_here += a[i as usize];\n        if min_so_far > min_ending_here {\n            min_so_far = min_ending_here;\n            s = i + 1;\n        }\n        if min_ending_here > 0 {\n            min_ending_here = 0;\n        }\n    }\n    let mut sum = 0;\n    for i in 0..n {\n        sum += a[i as usize];\n    }\n    if k == 1 {\n        return max_so_far;\n    }\n    max_sum = max_so_far;\n    for i in 2..k + 1 {\n        if max_sum < 0 {\n            max_sum = max_sum + sum;\n        } else {\n            max_sum = max_sum + sum - min_so_far;\n        }\n        if max_so_far < max_sum {\n            max_so_far = max_sum;\n        }\n    }\n    max_so_far",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..(n * k) {\n        max_ending_here += a[i as usize % n];\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n\n    println!(\"{} {}\", start, end);\n\n    max_so_far",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n    for i in 0..n * k {\n        max_ending_here += a[i as usize];\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n    println!(\"{} {}\", start, end);\n    max_so_far",
    "    let mut max_sum = 0;\n    let mut curr_sum = 0;\n    let mut max_elem = 0;\n    let mut min_elem = 0;\n\n    for i in 0..n {\n        curr_sum += a[i as usize];\n        max_elem = max(max_elem, a[i as usize]);\n        min_elem = min(min_elem, a[i as usize]);\n    }\n\n    if k == 1 {\n        return curr_sum;\n    }\n\n    if max_elem <= 0 {\n        return max_elem;\n    }\n\n    let mut max_wrap = 0;\n    for i in 0..n {\n        curr_sum -= a[i as usize];\n        max_wrap += a[i as usize];\n    }\n\n    max_sum = max(curr_sum, max_wrap);\n\n    for i in 1..k {\n        max_sum = max(max_sum, max_wrap + curr_sum * (i as isize));\n    }\n\n    max_sum",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n * k {\n        max_ending_here += a[i as usize % n];\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n    println!(\"{} {}\", start, end);\n    max_so_far",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n * k {\n        max_ending_here += a[i as usize % n];\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n\n    println!(\"{} {}\", start, end);\n    max_so_far",
    "    let mut max_sum = 0;\n    let mut curr_sum = 0;\n    let mut max_elem = 0;\n    let mut min_elem = 0;\n    let mut min_sum = 0;\n\n    for i in 0..n {\n        curr_sum += a[i as usize];\n        max_elem = max(max_elem, a[i as usize]);\n        min_elem = min(min_elem, a[i as usize]);\n        max_sum = max(max_sum, curr_sum);\n        if curr_sum < 0 {\n            curr_sum = 0;\n        }\n    }\n\n    if k == 1 {\n        return max_sum;\n    }\n\n    let mut total_sum = curr_sum;\n    for i in 0..n {\n        total_sum += a[i as usize];\n        min_sum += a[i as usize];\n    }\n\n    if total_sum > 0 {\n        return max(max_sum, total_sum * (k - 2) + curr_sum);\n    } else if total_sum == 0 {\n        return max(max_sum, max_elem);\n    } else {\n        return max(max_sum, min_sum + curr_sum);\n    }",
    "    let mut max_sum = 0;\n    let mut curr_sum = 0;\n\n    for i in 0..n {\n        curr_sum += a[i as usize];\n    }\n\n    max_sum = curr_sum;\n\n    for i in 0..n {\n        curr_sum += (k - 1) * a[i as usize];\n        max_sum = max(max_sum, curr_sum);\n    }\n\n    max_sum",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n * k {\n        max_ending_here += a[(i % n) as usize];\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n    println!(\"{} {}\", start, end);\n    max_so_far",
    "    let mut max_sum = 0;\n    let mut max_sum_so_far = 0;\n    let mut min_sum_so_far = 0;\n    let mut sum = 0;\n    for i in 0..n {\n        sum += a[i as usize];\n        max_sum_so_far = max(max_sum_so_far + a[i as usize], sum - min_sum_so_far);\n        min_sum_so_far = min(min_sum_so_far, sum);\n        max_sum = max(max_sum, max_sum_so_far);\n    }\n    max_sum * k - min_sum_so_far * (k - 1)",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n * k {\n        max_ending_here += a[i as usize % n];\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n\n    println!(\"{} {}\", start, end);\n\n    max_so_far",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n * k {\n        max_ending_here += a[i as usize % n];\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n\n    println!(\"{} {}\", start, end);\n    max_so_far",
    "    let mut max_sum = 0;\n    let mut curr_sum = 0;\n    let mut max_elem = a[0];\n    let mut min_elem = a[0];\n    let mut max_elem_index = 0;\n    let mut min_elem_index = 0;\n    let mut max_elem_sum = 0;\n    let mut min_elem_sum = 0;\n    let mut i = 0;\n    while i < n {\n        if a[i as usize] > max_elem {\n            max_elem = a[i as usize];\n            max_elem_index = i;\n        }\n        if a[i as usize] < min_elem {\n            min_elem = a[i as usize];\n            min_elem_index = i;\n        }\n        curr_sum += a[i as usize];\n        if curr_sum > max_sum {\n            max_sum = curr_sum;\n        }\n        if curr_sum < 0 {\n            curr_sum = 0;\n        }\n        i += 1;\n    }\n    max_elem_sum = max_elem * (k - 2);\n    if max_elem_index > min_elem_index {\n        max_elem_sum += max_elem * 2;\n        min_elem_sum = min_elem * 2;\n    } else {\n        max_elem_sum += max_elem;\n        min_elem_sum = min_elem;\n    }\n    max_sum = max(max_sum, max_elem_sum);\n    max_sum = max(max_sum, min_elem_sum);\n    max_sum",
    "    let mut max_sum = 0;\n    let mut curr_sum = 0;\n    for i in 0..n {\n        curr_sum += a[i as usize];\n    }\n    max_sum = curr_sum;\n    let mut max_elem = a.iter().max().unwrap();\n    let mut min_elem = a.iter().min().unwrap();\n    for i in 0..n {\n        let temp = curr_sum - (n * a[i as usize]);\n        curr_sum = temp + (k - 1) * a[i as usize];\n        if curr_sum > max_sum {\n            max_sum = curr_sum;\n        }\n    }\n    if k > 2 {\n        max_sum = max_sum + (k - 2) * (*max_elem - *min_elem);\n    }\n    max_sum",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n * k {\n        max_ending_here += a[i as usize % n];\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n\n    println!(\"{} {}\", start, end);\n    max_so_far",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n {\n        max_ending_here += a[i as usize];\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n\n    let mut max_wrap = 0;\n    for i in 0..n {\n        max_wrap += a[i as usize];\n        a[i as usize] = -a[i as usize];\n    }\n\n    let mut min_ending_here = 0;\n    for i in 0..n {\n        min_ending_here += a[i as usize];\n        if min_ending_here > max_wrap {\n            max_wrap = min_ending_here;\n        }\n        if min_ending_here < 0 {\n            min_ending_here = 0;\n        }\n    }\n\n    if k == 1 {\n        return max_so_far;\n    }\n\n    max_wrap = max_wrap.max(0);\n    return max_so_far.max(max_wrap * (k - 2) + max_so_far);",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n {\n        max_ending_here += a[i as usize];\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n\n    let mut min_so_far = std::isize::MAX;\n    let mut min_ending_here = 0;\n    let mut start_min = 0;\n    let mut end_min = 0;\n    let mut s_min = 0;\n\n    for i in 0..n {\n        min_ending_here += a[i as usize];\n\n        if min_so_far > min_ending_here {\n            min_so_far = min_ending_here;\n            start_min = s_min;\n            end_min = i;\n        }\n\n        if min_ending_here > 0 {\n            min_ending_here = 0;\n            s_min = i + 1;\n        }\n    }\n\n    let mut max_wrap = 0;\n    let mut min_wrap = 0;\n\n    for i in 0..n {\n        max_wrap += a[i as usize];\n        min_wrap += a[i as usize];\n    }\n\n    min_wrap = min_wrap.min(0);\n\n    if k == 1 {\n        max_so_far\n    } else {\n        max_so_far.max(max_wrap + min_wrap * (k - 2))\n    }",
    "    let mut max_so_far = isize::min_value();\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n {\n        max_ending_here += a[i as usize];\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n\n    let mut min_so_far = isize::max_value();\n    let mut min_ending_here = 0;\n    let mut start_ = 0;\n    let mut end_ = 0;\n    let mut s_ = 0;\n\n    for i in 0..n {\n        min_ending_here += a[i as usize];\n        if min_so_far > min_ending_here {\n            min_so_far = min_ending_here;\n            start_ = s_;\n            end_ = i;\n        }\n        if min_ending_here > 0 {\n            min_ending_here = 0;\n            s_ = i + 1;\n        }\n    }\n\n    let mut max_wrap = 0;\n    for i in 0..n {\n        max_wrap += a[i as usize];\n    }\n\n    let mut min_wrap = 0;\n    for i in 0..n {\n        min_wrap += a[i as usize];\n    }\n\n    if k == 1 {\n        return max_so_far;\n    }\n\n    let mut max_wrap_sum = max_wrap + (k - 2) * min_wrap;\n    let mut min_wrap_sum = min_wrap + (k - 2) * max_wrap;\n\n    if start > end_ {\n        max_wrap_sum += min_so_far;\n    }\n    if start_ > end {\n        min_wrap_sum += max_so_far;\n    }\n\n    max(max_",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n    for i in 0..n * k {\n        max_ending_here += a[i as usize % n];\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n    println!(\"{} {}\", start, end);\n    max_so_far",
    "    let mut max_sum = std::isize::MIN;\n    let mut curr_sum = 0;\n    for i in 0..n {\n        curr_sum += a[i as usize];\n        if curr_sum > max_sum {\n            max_sum = curr_sum;\n        }\n        if curr_sum < 0 {\n            curr_sum = 0;\n        }\n    }\n    let max_sum_all = curr_sum;\n    let mut min_sum = std::isize::MAX;\n    curr_sum = 0;\n    for i in 0..n {\n        curr_sum += a[i as usize];\n        if curr_sum < min_sum {\n            min_sum = curr_sum;\n        }\n        if curr_sum > 0 {\n            curr_sum = 0;\n        }\n    }\n    let min_sum_all = curr_sum;\n    let mut ans = max_sum;\n    for i in 1..k {\n        let max_val = max_sum_all * i + min_sum * (k - i);\n        let min_val = min_sum_all * i + max_sum * (k - i);\n        ans = std::cmp::max(ans, std::cmp::max(max_val, min_val));\n    }\n    ans",
    "    let mut max_sum = 0;\n    let mut curr_sum = 0;\n    let mut max_elem = 0;\n    let mut min_elem = 0;\n    let mut min_sum = 0;\n\n    for i in 0..n {\n        curr_sum += a[i as usize];\n        max_elem = max(max_elem, a[i as usize]);\n        min_elem = min(min_elem, a[i as usize]);\n        max_sum = max(max_sum, curr_sum);\n        if curr_sum < 0 {\n            curr_sum = 0;\n        }\n    }\n\n    if k == 1 {\n        return max_sum;\n    }\n\n    let mut total_sum = curr_sum;\n    for i in 0..n {\n        total_sum += a[i as usize];\n        min_sum += a[i as usize];\n    }\n\n    if total_sum > 0 {\n        return max(max_sum, (total_sum * (k - 2)) + curr_sum);\n    } else if total_sum == 0 {\n        return max(max_sum, max_elem);\n    } else {\n        return max(max_sum, min_sum + curr_sum);\n    }",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n {\n        max_ending_here += a[i as usize];\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n\n    let mut max_wrap = 0;\n    for i in 0..n {\n        max_wrap += a[i as usize];\n        a[i as usize] = -a[i as usize];\n    }\n\n    let mut min_so_far = std::isize::MAX;\n    let mut min_ending_here = 0;\n    for i in 0..n {\n        min_ending_here += a[i as usize];\n        if min_so_far > min_ending_here {\n            min_so_far = min_ending_here;\n        }\n        if min_ending_here > 0 {\n            min_ending_here = 0;\n        }\n    }\n\n    let mut max_wrap_sum = max_wrap + min_ending_here;\n\n    if k == 1 {\n        return max_so_far;\n    }\n\n    if max_wrap_sum > max_so_far {\n        max_so_far = max_wrap_sum;\n    }\n\n    if max_wrap_sum < 0 {\n        max_so_far = max_so_far;\n    } else {\n        max_so_far = max_so_far + (k - 2) * max_wrap_sum;\n    }\n\n    max_so_far",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n * k {\n        max_ending_here += a[i as usize % n];\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n\n    println!(\"{} {}\", start, end);\n    max_so_far",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n {\n        max_ending_here += a[i as usize];\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n\n    let mut min_so_far = std::isize::MAX;\n    let mut min_ending_here = 0;\n    let mut start_min = 0;\n    let mut end_min = 0;\n    let mut s_min = 0;\n\n    for i in 0..n {\n        min_ending_here += a[i as usize];\n\n        if min_so_far > min_ending_here {\n            min_so_far = min_ending_here;\n            start_min = s_min;\n            end_min = i;\n        }\n\n        if min_ending_here > 0 {\n            min_ending_here = 0;\n            s_min = i + 1;\n        }\n    }\n\n    let mut total_sum = 0;\n    for i in 0..n {\n        total_sum += a[i as usize];\n    }\n\n    let mut max_wrap = 0;\n    if start > end_min {\n        max_wrap = total_sum - min_so_far;\n    }\n\n    let mut max_kadane = max_so_far;\n    if k > 1 {\n        max_kadane = max_so_far + (k - 2) * total_sum;\n    }\n\n    std::cmp::max(max_kadane, max_wrap)",
    "    let mut max_sum = std::isize::MIN;\n    let mut curr_sum = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n {\n        curr_sum += a[i as usize];\n        if curr_sum > max_sum {\n            max_sum = curr_sum;\n            start = s;\n            end = i;\n        }\n        if curr_sum < 0 {\n            curr_sum = 0;\n            s = i + 1;\n        }\n    }\n\n    let mut curr_sum = max_sum;\n    for i in 0..start {\n        curr_sum += a[i as usize];\n        max_sum = std::cmp::max(max_sum, curr_sum);\n    }\n\n    curr_sum = max_sum;\n    for i in (end + 1)..n {\n        curr_sum += a[i as usize];\n        max_sum = std::cmp::max(max_sum, curr_sum);\n    }\n\n    max_sum * k - (sum_of_array(a.clone(), n) - max_sum)",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n    for i in 0..n * k {\n        max_ending_here += a[i as usize % n];\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n    println!(\"{} {}\", start, end);\n    max_so_far",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n * k {\n        max_ending_here += a[i as usize % n];\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n\n    println!(\"{} {}\", start, end);\n    max_so_far",
    "    let mut max_sum = std::isize::MIN;\n    let mut curr_sum = 0;\n    for i in 0..n {\n        curr_sum += a[i as usize];\n    }\n    max_sum = std::cmp::max(max_sum, curr_sum);\n    let mut max_elem = std::isize::MIN;\n    let mut min_elem = std::isize::MAX;\n    let mut max_index = 0;\n    let mut min_index = 0;\n    for i in 0..n {\n        if a[i as usize] > max_elem {\n            max_elem = a[i as usize];\n            max_index = i;\n        }\n        if a[i as usize] < min_elem {\n            min_elem = a[i as usize];\n            min_index = i;\n        }\n    }\n    if k == 1 {\n        return max_sum;\n    }\n    if k == 2 {\n        return std::cmp::max(\n            max_sum,\n            curr_sum - min_elem + max_elem,\n        );\n    }\n    let mut sum = 0;\n    for i in 0..n {\n        sum += a[i as usize];\n    }\n    let mut sum_without_max = sum - max_elem;\n    let mut sum_without_min = sum - min_elem;\n    let mut max_sum_without_max = std::isize::MIN;\n    let mut max_sum_without_min = std::isize::MIN;\n    for i in 0..n {\n        if i != max_index {\n            max_sum_without_max = std::cmp::max(\n                max_sum_without_max,\n                sum_without_max - a[i as usize],\n            );\n        }\n        if i != min_index {\n            max_sum_without_min = std::cmp::max(\n                max_sum_without_min,\n                sum_without_min - a[i as usize],\n            );\n        }\n    }\n    return std",
    "    let mut max_sum = 0;\n    let mut curr_sum = 0;\n    let mut max_sum_so_far = 0;\n    let mut curr_sum_so_far = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut max_sum_so_far_index = 0;\n    let mut curr_sum_so_far_index = 0;\n    let mut max_sum_index = 0;\n    let mut curr_sum_index = 0;\n    while i < n {\n        curr_sum_so_far += a[i as usize];\n        if curr_sum_so_far < 0 {\n            curr_sum_so_far = 0;\n            curr_sum_so_far_index = i + 1;\n        } else if curr_sum_so_far > max_sum_so_far {\n            max_sum_so_far = curr_sum_so_far;\n            max_sum_so_far_index = curr_sum_so_far_index;\n        }\n        i += 1;\n    }\n    while j < k {\n        curr_sum += a[j as usize];\n        if curr_sum < 0 {\n            curr_sum = 0;\n            curr_sum_index = j + 1;\n        } else if curr_sum > max_sum {\n            max_sum = curr_sum;\n            max_sum_index = curr_sum_index;\n        }\n        j += 1;\n    }\n    if max_sum_so_far > max_sum {\n        max_sum_so_far\n    } else {\n        max_sum + max_sum_so_far * (k - 2)\n    }",
    "    let mut max_sum = 0;\n    let mut curr_sum = 0;\n    let mut max_sum_so_far = 0;\n    let mut curr_sum_so_far = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n    for i in 0..n {\n        curr_sum += a[i as usize];\n        if curr_sum > max_sum {\n            max_sum = curr_sum;\n            start = s;\n            end = i;\n        }\n        if curr_sum < 0 {\n            curr_sum = 0;\n            s = i + 1;\n        }\n    }\n    let mut min_sum = 0;\n    let mut curr_sum = 0;\n    let mut min_sum_so_far = 0;\n    let mut curr_sum_so_far = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n    for i in 0..n {\n        curr_sum += a[i as usize];\n        if curr_sum < min_sum {\n            min_sum = curr_sum;\n            start = s;\n            end = i;\n        }\n        if curr_sum > 0 {\n            curr_sum = 0;\n            s = i + 1;\n        }\n    }\n    for i in 0..n {\n        curr_sum_so_far += a[i as usize];\n        if curr_sum_so_far > max_sum_so_far {\n            max_sum_so_far = curr_sum_so_far;\n        }\n        if curr_sum_so_far < 0 {\n            curr_sum_so_far = 0;\n        }\n    }\n    for i in 0..n {\n        curr_sum_so_far += a[i as usize];\n        if curr_sum_so_far < min_sum_so_far {\n            min_sum_so_far = curr_sum_so_far;\n        }\n        if curr",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n * k {\n        max_ending_here += a[i as usize % n];\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n\n    println!(\"{} {}\", start, end);\n\n    max_so_far",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..k {\n        for j in 0..n {\n            max_ending_here += a[j as usize];\n\n            if max_so_far < max_ending_here {\n                max_so_far = max_ending_here;\n                start = s;\n                end = j;\n            }\n\n            if max_ending_here < 0 {\n                max_ending_here = 0;\n                s = j + 1;\n            }\n        }\n    }\n    println!(\"{} {}\", start, end);\n    max_so_far",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n    for i in 0..n * k {\n        max_ending_here += a[i as usize % n];\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n    println!(\"{} {}\", start, end);\n    max_so_far",
    "    let mut sum = 0;\n    let mut max_sum = 0;\n    let mut max_ending_here = 0;\n    let mut min_ending_here = 0;\n    let mut min_sum = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n    for i in 0..n {\n        sum += a[i as usize];\n        max_ending_here += a[i as usize];\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n        if max_sum < max_ending_here {\n            max_sum = max_ending_here;\n            start = s;\n            end = i;\n        }\n        min_ending_here += a[i as usize];\n        if min_ending_here > 0 {\n            min_ending_here = 0;\n            s = i + 1;\n        }\n        if min_sum > min_ending_here {\n            min_sum = min_ending_here;\n        }\n    }\n    if k == 1 {\n        return max_sum;\n    }\n    let mut circular_sum = sum * k;\n    let mut max_circular_sum = circular_sum - min_sum;\n    if max_circular_sum > max_sum {\n        return max_circular_sum;\n    }\n    return max_sum;",
    "    let mut max_so_far = 0;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n {\n        max_ending_here += a[i as usize];\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n\n    let mut min_so_far = 0;\n    let mut min_ending_here = 0;\n    let mut start1 = 0;\n    let mut end1 = 0;\n    let mut s1 = 0;\n\n    for i in 0..n {\n        min_ending_here += a[i as usize];\n        if min_so_far > min_ending_here {\n            min_so_far = min_ending_here;\n            start1 = s1;\n            end1 = i;\n        }\n        if min_ending_here > 0 {\n            min_ending_here = 0;\n            s1 = i + 1;\n        }\n    }\n\n    let mut max_wrap = 0;\n    for i in 0..n {\n        max_wrap += a[i as usize];\n    }\n    max_wrap = max_wrap - min_so_far;\n\n    if k == 1 {\n        return max_so_far;\n    }\n\n    if max_wrap > max_so_far {\n        return max_wrap;\n    } else {\n        return max_so_far;\n    }",
    "    let mut max_sum = 0;\n    let mut max_sum_so_far = 0;\n    let mut max_sum_ending_here = 0;\n    let mut min_sum_ending_here = 0;\n    let mut min_sum_so_far = 0;\n    let mut sum = 0;\n    for i in 0..n {\n        sum += a[i as usize];\n        max_sum_ending_here += a[i as usize];\n        if max_sum_ending_here < 0 {\n            max_sum_ending_here = 0;\n        }\n        if max_sum_so_far < max_sum_ending_here {\n            max_sum_so_far = max_sum_ending_here;\n        }\n        min_sum_ending_here += a[i as usize];\n        if min_sum_ending_here > 0 {\n            min_sum_ending_here = 0;\n        }\n        if min_sum_so_far > min_sum_ending_here {\n            min_sum_so_far = min_sum_ending_here;\n        }\n    }\n    if k == 1 {\n        return max_sum_so_far;\n    }\n    let mut max_wrap = sum - min_sum_so_far;\n    if max_wrap < 0 {\n        max_wrap = 0;\n    }\n    max_sum = max_sum_so_far + (k - 2) * sum + max_wrap;\n    return max_sum;",
    "    let mut max_sum = 0;\n    let mut curr_sum = 0;\n    for i in 0..n {\n        curr_sum += a[i as usize];\n    }\n    max_sum = curr_sum;\n    let mut max_elem = a[0];\n    let mut min_elem = a[0];\n    for i in 0..n {\n        if a[i as usize] > max_elem {\n            max_elem = a[i as usize];\n        }\n        if a[i as usize] < min_elem {\n            min_elem = a[i as usize];\n        }\n    }\n    if k == 1 {\n        return max_sum;\n    }\n    let mut max_wrap = curr_sum - min_elem;\n    let mut min_wrap = curr_sum - max_elem;\n    for i in 1..k {\n        if curr_sum > max_wrap {\n            max_wrap = curr_sum;\n        }\n        if curr_sum < min_wrap {\n            min_wrap = curr_sum;\n        }\n        curr_sum = curr_sum - min_elem + max_elem;\n    }\n    if max_wrap > max_sum {\n        max_sum = max_wrap;\n    }\n    if min_wrap > max_sum {\n        max_sum = min_wrap;\n    }\n    max_sum",
    "    let mut max_sum = 0;\n    let mut curr_sum = 0;\n    let mut max_sum_so_far = 0;\n    for i in 0..n {\n        max_sum += a[i as usize];\n    }\n    max_sum_so_far = max_sum;\n    for i in 0..n {\n        curr_sum += a[i as usize];\n    }\n    for i in 0..n {\n        curr_sum = curr_sum + max_sum * (k - 1) - n * a[i as usize];\n        max_sum_so_far = max(max_sum_so_far, curr_sum);\n    }\n    max_sum_so_far",
    "    let mut max_sum = std::isize::MIN;\n    let mut curr_sum = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n    for i in 0..n {\n        curr_sum += a[i as usize];\n        if curr_sum > max_sum {\n            max_sum = curr_sum;\n            start = s;\n            end = i;\n        }\n        if curr_sum < 0 {\n            curr_sum = 0;\n            s = i + 1;\n        }\n    }\n    let max_wrap = (curr_sum * k) - (sum_sub_array(a.clone(), n, start, end) * (k - 1));\n    if max_wrap > max_sum {\n        max_wrap\n    } else {\n        max_sum\n    }",
    "    let mut max_sum = 0;\n    let mut curr_sum = 0;\n    let mut max_sum_so_far = 0;\n    let mut curr_sum_so_far = 0;\n    for i in 0..n {\n        curr_sum += a[i as usize];\n        max_sum = max(max_sum, curr_sum);\n        if curr_sum < 0 {\n            curr_sum = 0;\n        }\n        curr_sum_so_far += a[i as usize];\n        max_sum_so_far = max(max_sum_so_far, curr_sum_so_far);\n        if curr_sum_so_far < 0 {\n            curr_sum_so_far = 0;\n        }\n    }\n    if k == 1 {\n        return max_sum;\n    }\n    let mut min_sum = 0;\n    let mut curr_min_sum = 0;\n    let mut min_sum_so_far = 0;\n    let mut curr_min_sum_so_far = 0;\n    for i in 0..n {\n        curr_min_sum += a[i as usize];\n        min_sum = min(min_sum, curr_min_sum);\n        if curr_min_sum > 0 {\n            curr_min_sum = 0;\n        }\n        curr_min_sum_so_far += a[i as usize];\n        min_sum_so_far = min(min_sum_so_far, curr_min_sum_so_far);\n        if curr_min_sum_so_far > 0 {\n            curr_min_sum_so_far = 0;\n        }\n    }\n    let mut total_sum = 0;\n    for i in 0..n {\n        total_sum += a[i as usize];\n    }\n    let mut max_wrap = total_sum - min_sum;\n    if k == 2 {\n        return max(max_wrap, max_sum);\n    }\n    let mut max_wrap_so_far = total_sum - min",
    "    let mut max_sum = 0;\n    let mut curr_sum = 0;\n    let mut curr_start = 0;\n    let mut max_start = 0;\n    let mut max_end = 0;\n    let mut curr_end = 0;\n    let mut i = 0;\n    while i < n * k {\n        curr_sum += a[i as usize];\n        curr_end = i;\n        if curr_sum > max_sum {\n            max_sum = curr_sum;\n            max_start = curr_start;\n            max_end = curr_end;\n        }\n        if curr_sum < 0 {\n            curr_sum = 0;\n            curr_start = i + 1;\n        }\n        i += 1;\n    }\n    max_sum",
    "    let mut max_sum = 0;\n    let mut curr_sum = 0;\n\n    for i in 0..n {\n        curr_sum += a[i as usize];\n    }\n\n    max_sum = curr_sum;\n\n    for i in 0..n {\n        curr_sum += (k - 1) * a[i as usize];\n        max_sum = max(max_sum, curr_sum);\n    }\n\n    max_sum",
    "    let mut max_so_far = 0;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n * k {\n        max_ending_here += a[i as usize % n];\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n    println!(\"{} {}\", start, end);\n    max_so_far",
    "    let mut max_sum = 0;\n    let mut curr_sum = 0;\n    for i in 0..n {\n        curr_sum += a[i as usize];\n        if curr_sum < 0 {\n            curr_sum = 0;\n        }\n        max_sum = std::cmp::max(max_sum, curr_sum);\n    }\n    let max_sum_all = curr_sum;\n    let mut min_sum = 0;\n    curr_sum = 0;\n    for i in 0..n {\n        curr_sum += a[i as usize];\n        if curr_sum > 0 {\n            curr_sum = 0;\n        }\n        min_sum = std::cmp::min(min_sum, curr_sum);\n    }\n    let min_sum_all = curr_sum;\n    if k == 1 {\n        return max_sum;\n    }\n    let mut ans = max_sum + (k - 2) * max_sum_all + min_sum_all;\n    ans = std::cmp::max(ans, max_sum_all);\n    ans",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n * k {\n        max_ending_here += a[i as usize % n];\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n\n    println!(\"{} {}\", start, end);\n    max_so_far",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n    for i in 0..n * k {\n        max_ending_here += a[i as usize % n];\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n    println!(\"{} {}\", start, end);\n    max_so_far",
    "    let mut max_sum = 0;\n    let mut curr_sum = 0;\n    let mut max_val = 0;\n    for i in 0..n {\n        max_val = max_val.max(a[i as usize]);\n        curr_sum += a[i as usize];\n        if curr_sum < 0 {\n            curr_sum = 0;\n        }\n        max_sum = max_sum.max(curr_sum);\n    }\n    if max_sum == 0 {\n        return max_val;\n    }\n    let mut sum = 0;\n    for i in 0..n {\n        sum += a[i as usize];\n    }\n    let mut ans = max_sum;\n    for i in 1..k {\n        let temp = max_sum + sum * (k - i);\n        ans = ans.max(temp);\n        max_sum = max_sum.max(temp);\n    }\n    ans",
    "    let mut max_sum = 0;\n    let mut curr_sum = 0;\n    let mut max_elem = 0;\n    let mut min_elem = 0;\n    let mut min_sum = 0;\n    for i in 0..n {\n        curr_sum += a[i as usize];\n        max_elem = max(max_elem, a[i as usize]);\n        min_elem = min(min_elem, a[i as usize]);\n    }\n    if k == 1 {\n        return curr_sum;\n    }\n    max_sum = curr_sum;\n    min_sum = curr_sum;\n    for i in 1..k {\n        if curr_sum > 0 {\n            curr_sum = curr_sum + curr_sum;\n        } else {\n            curr_sum = curr_sum * 2;\n        }\n        max_sum = max(max_sum, curr_sum);\n        min_sum = min(min_sum, curr_sum);\n    }\n    if max_elem <= 0 {\n        return max_elem;\n    }\n    if min_elem >= 0 {\n        return max_sum;\n    }\n    return max(max_sum, min_sum + max_elem * (k - 2));",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n    let mut i = 0;\n    while i < k * n {\n        max_ending_here += a[i as usize];\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n        i += 1;\n    }\n    println!(\"{} {}\", start, end);\n    max_so_far",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n {\n        max_ending_here += a[i as usize];\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n\n    let mut min_so_far = std::isize::MAX;\n    let mut min_ending_here = 0;\n    let mut start_ = 0;\n    let mut end_ = 0;\n    let mut s_ = 0;\n\n    for i in 0..n {\n        min_ending_here += a[i as usize];\n        if min_so_far > min_ending_here {\n            min_so_far = min_ending_here;\n            start_ = s_;\n            end_ = i;\n        }\n        if min_ending_here > 0 {\n            min_ending_here = 0;\n            s_ = i + 1;\n        }\n    }\n\n    let mut total = 0;\n    for i in 0..n {\n        total += a[i as usize];\n    }\n\n    let mut max_wrap = 0;\n    if start > end_ || (end_ == n - 1 && start == 0) {\n        max_wrap = total - min_so_far;\n    }\n\n    let mut max_non_wrap = max_so_far;\n    if k > 1 {\n        max_non_wrap = max_so_far / k;\n    }\n\n    std::cmp::max(max_non_wrap, max_wrap)",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n * k {\n        max_ending_here += a[i as usize % n];\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n\n    println!(\"{} {}\", start, end);\n    max_so_far",
    "    let mut max_sum = 0;\n    let mut sum = 0;\n    for i in 0..n {\n        sum += a[i as usize];\n        if sum < 0 {\n            sum = 0;\n        }\n        max_sum = max(max_sum, sum);\n    }\n    let mut max_wrap = 0;\n    let mut sum = 0;\n    for i in 0..n {\n        sum += a[i as usize];\n        if sum < 0 {\n            sum = 0;\n        }\n        max_wrap = max(max_wrap, sum);\n    }\n    if max_wrap > 0 {\n        max(max_sum, max_wrap * k)\n    } else {\n        max_sum\n    }",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n * k {\n        max_ending_here += a[i as usize % n];\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n    println!(\"{} {}\", start, end);\n    max_so_far",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n*k {\n        max_ending_here += a[i as usize % n];\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n\n    println!(\"{:?}\", &a[start as usize..end as usize + 1]);\n    max_so_far",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n    for i in 0..n {\n        max_ending_here += a[i as usize];\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n    let mut min_so_far = std::isize::MAX;\n    let mut min_ending_here = 0;\n    let mut start_ = 0;\n    let mut end_ = 0;\n    let mut s_ = 0;\n    for i in 0..n {\n        min_ending_here += a[i as usize];\n        if min_so_far > min_ending_here {\n            min_so_far = min_ending_here;\n            start_ = s_;\n            end_ = i;\n        }\n        if min_ending_here > 0 {\n            min_ending_here = 0;\n            s_ = i + 1;\n        }\n    }\n    let mut max_wrap = 0;\n    for i in 0..n {\n        max_wrap += a[i as usize];\n    }\n    max_wrap = max_wrap - min_so_far;\n    if k == 1 {\n        return max_so_far;\n    }\n    return std::cmp::max(max_so_far, max_wrap + (k - 2) * max_wrap);",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n * k {\n        max_ending_here += a[i as usize % n];\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n    println!(\"{} {}\", start, end);\n    max_so_far",
    "    let mut max_sum = isize::min_value();\n    let mut curr_sum = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n {\n        curr_sum += a[i as usize];\n        if curr_sum > max_sum {\n            max_sum = curr_sum;\n            start = s;\n            end = i;\n        }\n        if curr_sum < 0 {\n            curr_sum = 0;\n            s = i + 1;\n        }\n    }\n\n    let mut curr_val = max_sum;\n    for i in 0..start {\n        curr_val += a[i as usize];\n        max_sum = max(max_sum, curr_val);\n    }\n    curr_val = max_sum;\n    for i in (end + 1)..n {\n        curr_val += a[i as usize];\n        max_sum = max(max_sum, curr_val);\n    }\n\n    let mut prefix_sum = vec![0; n as usize];\n    let mut suffix_sum = vec![0; n as usize];\n    prefix_sum[0] = a[0];\n    suffix_sum[n as usize - 1] = a[n as usize - 1];\n    for i in 1..n {\n        prefix_sum[i as usize] = prefix_sum[(i - 1) as usize] + a[i as usize];\n        suffix_sum[(n - i - 1) as usize] = suffix_sum[(n - i) as usize] + a[(n - i - 1) as usize];\n    }\n\n    let mut total_sum = prefix_sum[(n - 1) as usize];\n    for i in 0..n {\n        max_sum = max(max_sum, prefix_sum[i as usize] + (suffix_sum[i as usize] * (k - 2)));\n        max_sum = max(max_sum, (prefix_sum[i as usize]",
    "    let mut max_so_far = 0;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n {\n        max_ending_here += a[i as usize];\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n\n    let mut min_so_far = 0;\n    let mut min_ending_here = 0;\n    let mut start_ = 0;\n    let mut end_ = 0;\n    let mut s_ = 0;\n\n    for i in 0..n {\n        min_ending_here += a[i as usize];\n        if min_so_far > min_ending_here {\n            min_so_far = min_ending_here;\n            start_ = s_;\n            end_ = i;\n        }\n        if min_ending_here > 0 {\n            min_ending_here = 0;\n            s_ = i + 1;\n        }\n    }\n\n    let mut max_wrap = 0;\n    for i in 0..n {\n        max_wrap += a[i as usize];\n    }\n\n    let mut min_wrap = 0;\n    for i in 0..n {\n        min_wrap += a[i as usize];\n    }\n\n    if k == 1 {\n        return max_so_far;\n    }\n\n    if max_wrap < 0 {\n        return max_so_far;\n    }\n\n    max_so_far = max(max_so_far, max_wrap * (k - 2) + max_sub_array_sum_repeated(a.clone(), n, 1));\n    max_so_far = max(max_so_far, min_wrap * (k - 2) + max_sub_array_sum_repeated(a.clone(), n, 1));\n\n    return",
    "    let mut max_sum = 0;\n    let mut curr_sum = 0;\n    let mut max_so_far = std::isize::MIN;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n {\n        max_so_far = std::cmp::max(a[i as usize], max_so_far);\n    }\n\n    if max_so_far < 0 {\n        return max_so_far;\n    }\n\n    for i in 0..n {\n        curr_sum += a[i as usize];\n\n        if curr_sum < 0 {\n            curr_sum = 0;\n            s = i + 1;\n        }\n\n        if curr_sum > max_sum {\n            max_sum = curr_sum;\n            start = s;\n            end = i;\n        }\n    }\n\n    for i in 0..k - 1 {\n        for j in start..end + 1 {\n            curr_sum += a[j as usize];\n            max_sum = std::cmp::max(max_sum, curr_sum);\n        }\n    }\n\n    max_sum",
    "    let mut max_so_far = 0;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n {\n        max_ending_here += a[i as usize];\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n\n    let mut min_so_far = 0;\n    let mut min_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n {\n        min_ending_here += a[i as usize];\n        if min_so_far > min_ending_here {\n            min_so_far = min_ending_here;\n            start = s;\n            end = i;\n        }\n        if min_ending_here > 0 {\n            min_ending_here = 0;\n            s = i + 1;\n        }\n    }\n\n    let mut max_wrap = 0;\n    for i in 0..n {\n        max_wrap += a[i as usize];\n    }\n    max_wrap = max_wrap - min_so_far;\n\n    if k == 1 {\n        return max_so_far;\n    }\n\n    return max(max_so_far, max_wrap);",
    "    let mut max_sum = 0;\n    let mut sum = 0;\n    let mut max_element = std::isize::MIN;\n    for i in 0..n {\n        sum += a[i as usize];\n        max_element = max(max_element, a[i as usize]);\n    }\n    if max_element < 0 {\n        return max_element;\n    }\n    max_sum = sum;\n    for i in 1..k {\n        sum = sum + sum;\n        max_sum = max(max_sum, sum);\n    }\n    max_sum",
    "    let mut max_sum = std::isize::MIN;\n    let mut curr_sum = 0;\n    for i in 0..n {\n        curr_sum += a[i as usize];\n    }\n    max_sum = std::cmp::max(max_sum, curr_sum);\n    let mut max_elem = std::isize::MIN;\n    let mut min_elem = std::isize::MAX;\n    let mut max_index = 0;\n    let mut min_index = 0;\n    for i in 0..n {\n        if a[i as usize] > max_elem {\n            max_elem = a[i as usize];\n            max_index = i;\n        }\n        if a[i as usize] < min_elem {\n            min_elem = a[i as usize];\n            min_index = i;\n        }\n    }\n    let mut curr_sum = 0;\n    for i in 0..n {\n        curr_sum += a[i as usize];\n    }\n    curr_sum -= (n - max_index - 1) * max_elem;\n    curr_sum -= min_index * min_elem;\n    max_sum = std::cmp::max(max_sum, curr_sum);\n    max_sum",
    "    let mut max_sum = 0;\n    let mut max_ending_here = 0;\n    let mut min_ending_here = 0;\n    let mut sum = 0;\n    for i in 0..n {\n        sum += a[i as usize];\n        max_ending_here += a[i as usize];\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n        }\n        if max_sum < max_ending_here {\n            max_sum = max_ending_here;\n        }\n        min_ending_here += a[i as usize];\n        if min_ending_here > 0 {\n            min_ending_here = 0;\n        }\n    }\n    if k == 1 {\n        return max_sum;\n    }\n    let mut max_wrap = 0;\n    if sum > 0 {\n        max_wrap = (sum * k) - min_ending_here;\n    } else {\n        max_wrap = max_sum;\n    }\n    max(max_wrap, max_sum)",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n    for i in 0..n * k {\n        max_ending_here += a[i as usize % n];\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n    println!(\"{} {}\", start, end);\n    max_so_far",
    "    let mut max_sum = 0;\n    let mut curr_sum = 0;\n    let mut max_sum_so_far = 0;\n    let mut curr_sum_so_far = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n    let mut e = 0;\n    for i in 0..n {\n        curr_sum += a[i as usize];\n        if curr_sum > max_sum {\n            max_sum = curr_sum;\n            start = s;\n            end = i;\n        }\n        if curr_sum < 0 {\n            curr_sum = 0;\n            s = i + 1;\n        }\n    }\n    for i in 0..n {\n        curr_sum_so_far += a[i as usize];\n        if curr_sum_so_far > max_sum_so_far {\n            max_sum_so_far = curr_sum_so_far;\n            e = i;\n        }\n    }\n    let mut min_sum = 0;\n    let mut curr_sum = 0;\n    let mut min_sum_so_far = 0;\n    let mut curr_sum_so_far = 0;\n    let mut s = 0;\n    for i in 0..n {\n        curr_sum += a[i as usize];\n        if curr_sum < min_sum {\n            min_sum = curr_sum;\n            s = i;\n        }\n        if curr_sum > 0 {\n            curr_sum = 0;\n        }\n    }\n    for i in 0..n {\n        curr_sum_so_far += a[i as usize];\n        if curr_sum_so_far < min_sum_so_far {\n            min_sum_so_far = curr_sum_so_far;\n        }\n    }\n    let mut sum = 0;\n    for i in 0..n {\n        sum += a[i as usize];\n    }\n    if k == 1 {\n        return max_sum_so_far",
    "    let mut max_so_far = 0;\n    let mut max_ending_here = 0;\n    let mut min_ending_here = 0;\n    let mut min_so_far = 0;\n    let mut sum = 0;\n    for i in 0..n {\n        sum += a[i as usize];\n        max_ending_here += a[i as usize];\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n        }\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n        }\n        min_ending_here += a[i as usize];\n        if min_ending_here > 0 {\n            min_ending_here = 0;\n        }\n        if min_so_far > min_ending_here {\n            min_so_far = min_ending_here;\n        }\n    }\n    if k == 1 {\n        return max_so_far;\n    }\n    let mut max_wrap = sum - min_so_far;\n    if max_wrap < 0 {\n        max_wrap = 0;\n    }\n    let mut max_sum = max_wrap + max_so_far;\n    if max_sum < max_so_far {\n        max_sum = max_so_far;\n    }\n    max_sum",
    "    let mut max_sum = 0;\n    let mut curr_sum = 0;\n    for i in 0..n {\n        curr_sum += a[i as usize];\n    }\n    max_sum = curr_sum;\n    let mut curr_val = curr_sum;\n    for i in 1..n {\n        curr_val = curr_val - a[i as usize - 1] + a[(n - i) as usize];\n        if curr_val > max_sum {\n            max_sum = curr_val;\n        }\n    }\n    max_sum * k",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n * k {\n        max_ending_here += a[i as usize % n];\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n    println!(\"{} {}\", start, end);\n    max_so_far",
    "    let mut max_sum = 0;\n    let mut curr_sum = 0;\n    let mut max_val = a[0];\n    for i in 0..n {\n        curr_sum += a[i as usize];\n        if max_val < a[i as usize] {\n            max_val = a[i as usize];\n        }\n        if curr_sum < 0 {\n            curr_sum = 0;\n        }\n        if max_sum < curr_sum {\n            max_sum = curr_sum;\n        }\n    }\n    if max_sum == 0 {\n        return max_val;\n    }\n    let mut max_wrap = 0;\n    for i in 0..n {\n        max_wrap += a[i as usize];\n        a[i as usize] = -a[i as usize];\n    }\n    let mut curr_wrap = 0;\n    for i in 0..n {\n        curr_wrap += a[i as usize];\n        if curr_wrap < 0 {\n            curr_wrap = 0;\n        }\n        if max_wrap < curr_wrap {\n            max_wrap = curr_wrap;\n        }\n    }\n    max_wrap = max_wrap + max_wrap;\n    if max_wrap > max_sum {\n        max_wrap\n    } else {\n        max_sum\n    }",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n * k {\n        max_ending_here += a[i as usize % n];\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n\n    println!(\"{} {}\", start, end);\n    max_so_far",
    "    let mut max_sum = 0;\n    let mut curr_sum = 0;\n    let mut max_element = std::isize::MIN;\n    for i in 0..n {\n        max_element = std::cmp::max(max_element, a[i as usize]);\n        curr_sum += a[i as usize];\n        if curr_sum < 0 {\n            curr_sum = 0;\n        }\n        max_sum = std::cmp::max(max_sum, curr_sum);\n    }\n    if max_sum == 0 {\n        return max_element;\n    }\n    let mut sum = 0;\n    for i in 0..n {\n        sum += a[i as usize];\n    }\n    let mut ans = max_sum;\n    for i in 1..k {\n        let temp = max_sum + sum * i;\n        ans = std::cmp::max(ans, temp);\n    }\n    ans",
    "    let mut max_sum = 0;\n    let mut curr_sum = 0;\n    let mut max_sum_so_far = 0;\n    let mut curr_sum_so_far = 0;\n\n    for i in 0..n {\n        curr_sum += a[i as usize];\n        max_sum = max(max_sum, curr_sum);\n        if curr_sum < 0 {\n            curr_sum = 0;\n        }\n    }\n\n    for i in 0..n {\n        curr_sum_so_far += a[i as usize];\n        if curr_sum_so_far < 0 {\n            curr_sum_so_far = 0;\n        }\n        max_sum_so_far = max(max_sum_so_far, curr_sum_so_far);\n    }\n\n    if max_sum_so_far == 0 {\n        return max_sum;\n    }\n\n    let mut sum = 0;\n    for i in 0..n {\n        sum += a[i as usize];\n    }\n\n    let mut ans = max_sum_so_far * k;\n    ans = max(ans, sum * (k - 2) + max_sum);\n    ans",
    "    let mut max_sum = 0;\n    let mut curr_sum = 0;\n    for i in 0..n {\n        curr_sum += a[i as usize];\n    }\n    max_sum = curr_sum;\n    let mut prev_sum = curr_sum;\n    for i in 1..n {\n        curr_sum = prev_sum - a[i as usize - 1] + a[(i + n - 1) as usize];\n        max_sum = max(max_sum, curr_sum);\n        prev_sum = curr_sum;\n    }\n    max_sum * k - (k - 1) * k / 2 * a.iter().sum::<isize>()",
    "    let mut max_sum = 0;\n    let mut max_sum_so_far = 0;\n    let mut max_sum_ending_here = 0;\n    let mut min_sum_ending_here = 0;\n    let mut min_sum_so_far = 0;\n    let mut sum = 0;\n    for i in 0..n {\n        sum += a[i as usize];\n        max_sum_ending_here += a[i as usize];\n        if max_sum_ending_here < 0 {\n            max_sum_ending_here = 0;\n        }\n        if max_sum_so_far < max_sum_ending_here {\n            max_sum_so_far = max_sum_ending_here;\n        }\n        min_sum_ending_here += a[i as usize];\n        if min_sum_ending_here > 0 {\n            min_sum_ending_here = 0;\n        }\n        if min_sum_so_far > min_sum_ending_here {\n            min_sum_so_far = min_sum_ending_here;\n        }\n    }\n    if k == 1 {\n        return max_sum_so_far;\n    }\n    let mut max_wrap = sum - min_sum_so_far;\n    if max_wrap < 0 {\n        max_wrap = 0;\n    }\n    max_sum = max_wrap + max_sum_so_far * (k - 2);\n    if max_sum < max_sum_so_far {\n        max_sum = max_sum_so_far;\n    }\n    max_sum",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n {\n        max_ending_here += a[i as usize];\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n\n    let mut min_so_far = std::isize::MAX;\n    let mut min_ending_here = 0;\n    let mut start_ = 0;\n    let mut end_ = 0;\n    let mut s_ = 0;\n\n    for i in 0..n {\n        min_ending_here += a[i as usize];\n\n        if min_so_far > min_ending_here {\n            min_so_far = min_ending_here;\n            start_ = s_;\n            end_ = i;\n        }\n\n        if min_ending_here > 0 {\n            min_ending_here = 0;\n            s_ = i + 1;\n        }\n    }\n\n    let mut sum = 0;\n    for i in 0..n {\n        sum += a[i as usize];\n    }\n\n    let mut max_wrap = std::isize::MIN;\n    if sum > 0 {\n        max_wrap = sum * k - min_so_far;\n    }\n\n    let mut max_non_wrap = max_so_far;\n    if start > 0 {\n        max_non_wrap = max_so_far / (end - start + 1) * k;\n    }\n\n    std::cmp::max(max_non_wrap, max_wrap)",
    "    let mut max_so_far = 0;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n {\n        max_ending_here += a[i as usize];\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n\n    let mut max_wrap = 0;\n    let mut temp = 0;\n\n    for i in 0..n {\n        temp += a[i as usize];\n        if temp < 0 {\n            temp = 0;\n        }\n        max_wrap = max(max_wrap, temp);\n    }\n\n    let mut max_k_ad_sum = max_wrap * k;\n    max_k_ad_sum = max(max_k_ad_sum, max_so_far);\n\n    let mut total_sum = 0;\n    for i in 0..n {\n        total_sum += a[i as usize];\n    }\n\n    let mut min_wrap = 0;\n    let mut temp = 0;\n\n    for i in 0..n {\n        temp += a[i as usize];\n        if temp > min_wrap {\n            min_wrap = temp;\n        }\n    }\n\n    let mut min_k_ad_sum = min_wrap * k;\n    min_k_ad_sum = min(min_k_ad_sum, total_sum);\n\n    if start > end {\n        max_k_ad_sum = max(max_k_ad_sum, min_k_ad_sum);\n    }\n\n    max_k_ad_sum",
    "    let mut max_sum = 0;\n    let mut curr_sum = 0;\n    let mut max_sum_so_far = 0;\n    let mut curr_sum_so_far = 0;\n\n    for i in 0..n {\n        curr_sum += a[i as usize];\n        if curr_sum < 0 {\n            curr_sum = 0;\n        }\n        if max_sum < curr_sum {\n            max_sum = curr_sum;\n        }\n    }\n\n    for i in 0..n {\n        curr_sum_so_far += a[i as usize];\n        if curr_sum_so_far < 0 {\n            curr_sum_so_far = 0;\n        }\n        if max_sum_so_far < curr_sum_so_far {\n            max_sum_so_far = curr_sum_so_far;\n        }\n    }\n\n    if max_sum_so_far == 0 {\n        return max_sum_so_far;\n    }\n\n    let mut total_sum = 0;\n    for i in 0..n {\n        total_sum += a[i as usize];\n    }\n\n    let mut max_wrap = total_sum * (k - 2);\n    max_wrap += max_sum;\n    max_sum_so_far = max(max_sum_so_far, max_wrap);\n    max_sum_so_far",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n*k {\n        max_ending_here += a[i as usize];\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i+1;\n        }\n    }\n\n    println!(\"{} {} {}\", max_so_far, start, end);\n    max_so_far",
    "    let mut max_sum = 0;\n    let mut curr_sum = 0;\n    let mut sum_arr = vec![0; n as usize];\n    let mut sum = 0;\n    for i in 0..n {\n        sum += a[i as usize];\n        sum_arr[i as usize] = sum;\n    }\n    for i in 0..n {\n        curr_sum += a[i as usize];\n        if curr_sum < 0 {\n            curr_sum = 0;\n        }\n        max_sum = max(max_sum, curr_sum);\n    }\n    if k == 1 {\n        return max_sum;\n    }\n    let mut max_wrap = 0;\n    for i in 0..n {\n        max_wrap += a[i as usize];\n    }\n    max_wrap = max_wrap * k;\n    let mut max_wrap_sum = 0;\n    for i in 0..n {\n        max_wrap_sum += sum_arr[i as usize];\n    }\n    max_wrap += max_wrap_sum;\n    max(max_wrap, max_sum)",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n    for i in 0..n {\n        max_ending_here += a[i as usize];\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n    let mut min_so_far = std::isize::MAX;\n    let mut min_ending_here = 0;\n    let mut s = 0;\n    for i in 0..n {\n        min_ending_here += a[i as usize];\n        if min_so_far > min_ending_here {\n            min_so_far = min_ending_here;\n            s = i;\n        }\n        if min_ending_here > 0 {\n            min_ending_here = 0;\n        }\n    }\n    let mut max_wrap = 0;\n    let mut i = 0;\n    while i < s {\n        max_wrap += a[i as usize];\n        i += 1;\n    }\n    let mut min_wrap = 0;\n    i = end + 1;\n    while i < n {\n        min_wrap += a[i as usize];\n        i += 1;\n    }\n    let mut max_wrap_sum = max_wrap + min_wrap;\n    if k == 1 {\n        return max_so_far;\n    }\n    let mut max_wrap_sum_all = max_wrap_sum;\n    let mut i = 0;\n    while i < n {\n        max_wrap_sum_all += a[i as usize];\n        i += 1;\n    }\n    max_so_far = std::cmp::max(max_so_far, max_wrap_sum);\n    if max_wrap_sum < 0 {\n        max",
    "    let mut max_sum = 0;\n    let mut curr_sum = 0;\n    let mut max_elem = a[0];\n    for i in 0..n {\n        if a[i as usize] > max_elem {\n            max_elem = a[i as usize];\n        }\n        curr_sum += a[i as usize];\n        if curr_sum < 0 {\n            curr_sum = 0;\n        }\n        if curr_sum > max_sum {\n            max_sum = curr_sum;\n        }\n    }\n    if max_sum == 0 {\n        return max_elem;\n    }\n    let mut max_wrap = 0;\n    for i in 0..n {\n        max_wrap += a[i as usize];\n        a[i as usize] = -a[i as usize];\n    }\n    let mut curr_wrap = 0;\n    for i in 0..n {\n        curr_wrap += a[i as usize];\n        if curr_wrap < 0 {\n            curr_wrap = 0;\n        }\n        if curr_wrap > max_wrap {\n            max_wrap = curr_wrap;\n        }\n    }\n    max_sum.max(max_wrap * (k - 2) + max_sum)",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n * k {\n        max_ending_here += a[i as usize % n];\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n\n    println!(\"{} {}\", start, end);\n    max_so_far",
    "    let mut max_sum = isize::min_value();\n    let mut curr_sum = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n    for i in 0..n {\n        curr_sum += a[i as usize];\n        if curr_sum > max_sum {\n            max_sum = curr_sum;\n            start = s;\n            end = i;\n        }\n        if curr_sum < 0 {\n            curr_sum = 0;\n            s = i + 1;\n        }\n    }\n    let max_wrap = (curr_sum * k) - (sum_sub_array(a.clone(), n, start, end) * (k - 1));\n    max(max_sum, max_wrap)",
    "    let mut max_sum = 0;\n    let mut curr_sum = 0;\n    for i in 0..n {\n        curr_sum += a[i as usize];\n    }\n    max_sum = curr_sum;\n    let mut max_elem = a[0];\n    for i in 1..n {\n        if a[i as usize] > max_elem {\n            max_elem = a[i as usize];\n        }\n    }\n    let mut curr_val = curr_sum;\n    for i in 0..n {\n        curr_val = curr_val - max_elem + a[i as usize];\n        if curr_val > max_sum {\n            max_sum = curr_val;\n        }\n    }\n    max_sum * k",
    "    let mut max_sum = 0;\n    let mut curr_sum = 0;\n    let mut max_sum_so_far = 0;\n    let mut curr_sum_so_far = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n    let mut e = 0;\n    for i in 0..n {\n        max_sum_so_far += a[i as usize];\n    }\n    max_sum = max_sum_so_far * k;\n    for i in 0..n {\n        curr_sum_so_far += a[i as usize];\n        if curr_sum_so_far < 0 {\n            curr_sum_so_far = 0;\n            s = i + 1;\n        }\n        if max_sum_so_far < curr_sum_so_far {\n            max_sum_so_far = curr_sum_so_far;\n            start = s;\n            end = i;\n        }\n    }\n    for i in 0..k {\n        curr_sum = 0;\n        for j in 0..n {\n            curr_sum += a[j as usize];\n            if curr_sum < 0 {\n                curr_sum = 0;\n                s = j + 1;\n            }\n            if max_sum < curr_sum {\n                max_sum = curr_sum;\n                e = j;\n            }\n        }\n        if i == 0 {\n            max_sum = max_sum + max_sum_so_far * (k - 1);\n        } else if i == k - 1 {\n            max_sum = max_sum + max_sum_so_far * (k - 2);\n        } else {\n            max_sum = max_sum + max_sum_so_far * (k - 2);\n        }\n        if start > end {\n            max_sum -= a[end as usize];\n        } else {\n            if e < start || e > end {\n                max_sum -= a[end as usize];\n            } else {\n                max_sum -= a[",
    "    let mut max_sum = 0;\n    let mut curr_sum = 0;\n    let mut max_element = std::isize::MIN;\n    for i in 0..n {\n        if a[i as usize] > max_element {\n            max_element = a[i as usize];\n        }\n        curr_sum += a[i as usize];\n        if curr_sum < 0 {\n            curr_sum = 0;\n        }\n        if curr_sum > max_sum {\n            max_sum = curr_sum;\n        }\n    }\n    if max_sum == 0 {\n        return max_element;\n    }\n    let mut max_wrap = 0;\n    let mut curr_wrap = 0;\n    for i in 0..n {\n        curr_wrap += a[i as usize];\n        if curr_wrap < 0 {\n            curr_wrap = 0;\n        }\n    }\n    max_wrap = curr_wrap;\n    let mut ans = max_sum + (k - 2) * max_wrap;\n    if ans < max_sum {\n        ans = max_sum;\n    }\n    ans",
    "    let mut max_so_far = isize::min_value();\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n {\n        max_ending_here += a[i as usize];\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n\n    let mut max_wrap = 0;\n    for i in 0..n {\n        max_wrap += a[i as usize];\n    }\n\n    if max_wrap > 0 {\n        max_wrap *= k;\n        let mut temp_max = 0;\n        let mut t = 0;\n        for i in 0..n {\n            temp_max += a[i as usize];\n            if temp_max > max_wrap {\n                max_wrap = temp_max;\n                t = i;\n            }\n        }\n\n        let mut temp_max = 0;\n        for i in 0..n {\n            temp_max += a[i as usize];\n            if temp_max > max_wrap {\n                max_wrap = temp_max;\n                t = i;\n            }\n        }\n\n        if max_wrap > max_so_far {\n            max_so_far = max_wrap;\n            start = t;\n            end = t;\n        }\n    }\n\n    max_so_far",
    "    let mut max_so_far = 0;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n    let mut i = 0;\n    let mut max_sum = 0;\n\n    for _ in 0..k {\n        for i in 0..n {\n            max_ending_here += a[i as usize];\n\n            if max_so_far < max_ending_here {\n                max_so_far = max_ending_here;\n                start = s;\n                end = i;\n            }\n\n            if max_ending_here < 0 {\n                max_ending_here = 0;\n                s = i + 1;\n            }\n        }\n        max_sum += max_so_far;\n        max_so_far = 0;\n        max_ending_here = 0;\n        s = 0;\n    }\n\n    max_sum",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    for i in 0..n {\n        max_ending_here += a[i as usize];\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n        }\n    }\n    let mut min_so_far = std::isize::MAX;\n    let mut min_ending_here = 0;\n    for i in 0..n {\n        min_ending_here += a[i as usize];\n        if min_so_far > min_ending_here {\n            min_so_far = min_ending_here;\n        }\n        if min_ending_here > 0 {\n            min_ending_here = 0;\n        }\n    }\n    let mut max_wrap = 0;\n    for i in 0..n {\n        max_wrap += a[i as usize];\n    }\n    max_wrap = max_wrap.max(max_wrap + min_so_far);\n    if k == 1 {\n        return max_so_far;\n    }\n    if max_wrap > 0 {\n        return (max_wrap * (k - 2) + max_so_far).max(max_wrap);\n    } else {\n        return max_so_far;\n    }",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n {\n        max_ending_here += a[i as usize];\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n\n    let mut min_so_far = std::isize::MAX;\n    let mut min_ending_here = 0;\n    let mut start_ = 0;\n    let mut end_ = 0;\n    let mut s_ = 0;\n\n    for i in 0..n {\n        min_ending_here += a[i as usize];\n\n        if min_so_far > min_ending_here {\n            min_so_far = min_ending_here;\n            start_ = s_;\n            end_ = i;\n        }\n\n        if min_ending_here > 0 {\n            min_ending_here = 0;\n            s_ = i + 1;\n        }\n    }\n\n    let mut max_wrap = 0;\n\n    for i in 0..n {\n        max_wrap += a[i as usize];\n    }\n\n    max_wrap = max_wrap - min_so_far;\n\n    if k == 1 {\n        return max_so_far;\n    }\n\n    let mut max_k_adjacents = max_so_far + (k - 2) * max_wrap;\n\n    if max_k_adjacents < max_so_far {\n        max_k_adjacents = max_so_far;\n    }\n\n    max_k_adjacents",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n * k {\n        max_ending_here += a[i as usize % n];\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n\n    println!(\"{} {}\", start, end);\n    max_so_far",
    "    let mut max_sum = 0;\n    let mut curr_sum = 0;\n    for i in 0..n {\n        curr_sum += a[i as usize];\n    }\n    max_sum = curr_sum;\n    for i in 0..n {\n        curr_sum += (k - 1) * a[i as usize];\n        max_sum = max(max_sum, curr_sum);\n    }\n    max_sum",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n    let mut i = 0;\n    while i < n * k {\n        max_ending_here += a[i as usize];\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n        i += 1;\n    }\n    println!(\"{} {}\", start, end);\n    max_so_far",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut max_element = std::isize::MIN;\n    let mut min_element = std::isize::MAX;\n    let mut min_ending_here = 0;\n    let mut min_so_far = std::isize::MAX;\n    for i in 0..n {\n        max_ending_here = max_ending_here + a[i as usize];\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n        }\n        min_ending_here = min_ending_here + a[i as usize];\n        if min_so_far > min_ending_here {\n            min_so_far = min_ending_here;\n        }\n        if min_ending_here > 0 {\n            min_ending_here = 0;\n        }\n        if a[i as usize] > max_element {\n            max_element = a[i as usize];\n        }\n        if a[i as usize] < min_element {\n            min_element = a[i as usize];\n        }\n    }\n    if k == 1 {\n        return max_so_far;\n    }\n    let mut max_wrap = 0;\n    for i in 0..n {\n        max_wrap += a[i as usize];\n        min_wrap += a[i as usize];\n    }\n    if max_wrap < 0 {\n        return max_so_far;\n    }\n    max_wrap = max_wrap * (k - 2) + max_so_far;\n    min_wrap = min_wrap * (k - 2) + min_so_far;\n    return std::cmp::max(max_wrap, max_so_far);",
    "    let mut max_so_far = 0;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n {\n        max_ending_here += a[i as usize];\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n\n    let mut max_wrap = 0;\n    let mut temp = 0;\n\n    for i in 0..n {\n        temp += a[i as usize];\n        if temp < 0 {\n            temp = 0;\n        }\n        max_wrap = max(max_wrap, temp);\n    }\n\n    let mut max_k_ad_sum = max_wrap * k;\n    max_k_ad_sum = max(max_k_ad_sum, max_so_far);\n\n    let mut min_wrap = 0;\n    let mut temp = 0;\n\n    for i in 0..n {\n        temp += a[i as usize];\n        if temp > 0 {\n            temp = 0;\n        }\n        min_wrap = min(min_wrap, temp);\n    }\n\n    let mut min_k_ad_sum = min_wrap * k;\n    min_k_ad_sum = min(min_k_ad_sum, max_so_far);\n\n    max(max_k_ad_sum, min_k_ad_sum)",
    "    let mut max_sum = 0;\n    let mut curr_sum = 0;\n    for i in 0..n {\n        curr_sum += a[i as usize];\n    }\n    max_sum = curr_sum;\n    let mut curr_val = curr_sum;\n    for i in 0..n {\n        curr_val = curr_val - a[i as usize] + a[i as usize] * k;\n        if curr_val > max_sum {\n            max_sum = curr_val;\n        }\n    }\n    max_sum",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n * k {\n        max_ending_here += a[i as usize % n];\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n\n    println!(\"{} {}\", start, end);\n    max_so_far",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n    for i in 0..n {\n        max_ending_here += a[i as usize];\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n    let mut min_so_far = std::isize::MAX;\n    let mut min_ending_here = 0;\n    let mut start2 = 0;\n    let mut end2 = 0;\n    let mut s2 = 0;\n    for i in 0..n {\n        min_ending_here += a[i as usize];\n        if min_so_far > min_ending_here {\n            min_so_far = min_ending_here;\n            start2 = s2;\n            end2 = i;\n        }\n        if min_ending_here > 0 {\n            min_ending_here = 0;\n            s2 = i + 1;\n        }\n    }\n    let mut max_wrap = 0;\n    if start > end2 || end < start2 {\n        max_wrap = 0;\n    } else {\n        let mut i = 0;\n        let mut j = 0;\n        let mut wrap_sum = 0;\n        while i != start {\n            wrap_sum += a[i as usize];\n            i += 1;\n        }\n        while j != end2 + 1 {\n            wrap_sum += a[j as usize];\n            j += 1;\n        }\n        max_wrap = wrap_sum;\n    }\n    let mut max_non_wrap = max_so_far;\n    let mut i = start;\n    while i <= end {\n        max_non_wrap += a[i as usize];\n        i += 1;\n    }\n   ",
    "    let mut max_sum = 0;\n    let mut curr_sum = 0;\n    for i in 0..n {\n        curr_sum += a[i as usize];\n    }\n    max_sum = curr_sum;\n    let mut max_elem = a.iter().max().unwrap();\n    let mut min_elem = a.iter().min().unwrap();\n    let mut prev_sum = curr_sum;\n    for i in 1..k {\n        curr_sum = prev_sum + (*max_elem * (k - i)) + (*min_elem * (i - 1));\n        if curr_sum > max_sum {\n            max_sum = curr_sum;\n        }\n        prev_sum = curr_sum;\n    }\n    max_sum",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n * k {\n        max_ending_here += a[i as usize % n];\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n    println!(\"{} {}\", start, end);\n    max_so_far",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n * k {\n        max_ending_here += a[i as usize % n];\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n\n    println!(\"{} {}\", start, end);\n    max_so_far",
    "    let mut max_sum = a.iter().sum();\n    let mut curr_sum = max_sum;\n    for i in 0..n {\n        curr_sum = curr_sum - a[i as usize] + a[i as usize] * k;\n        max_sum = max(max_sum, curr_sum);\n    }\n    max_sum",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n * k {\n        max_ending_here += a[i as usize % n];\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n\n    println!(\"{} {}\", start, end);\n    max_so_far",
    "    let mut max_sum = 0;\n    let mut curr_sum = 0;\n    let mut max_elem = 0;\n    let mut min_elem = 0;\n    let mut min_sum = 0;\n    let mut curr_min_sum = 0;\n    let mut curr_max_sum = 0;\n    for i in 0..n {\n        curr_sum += a[i as usize];\n        if curr_sum > max_sum {\n            max_sum = curr_sum;\n        }\n        if a[i as usize] > max_elem {\n            max_elem = a[i as usize];\n        }\n        if a[i as usize] < min_elem {\n            min_elem = a[i as usize];\n        }\n    }\n    if k == 1 {\n        return max_sum;\n    }\n    min_sum = min_elem * n;\n    curr_min_sum = min_sum;\n    curr_max_sum = max_elem * n;\n    for i in 1..k {\n        if curr_min_sum > min_sum {\n            min_sum = curr_min_sum;\n        }\n        if curr_max_sum > max_sum {\n            max_sum = curr_max_sum;\n        }\n        curr_min_sum += min_sum;\n        curr_max_sum += max_sum;\n    }\n    max_sum",
    "    let mut max_sum = 0;\n    let mut curr_sum = 0;\n    let mut max_elem = std::isize::MIN;\n    for i in 0..n {\n        max_elem = max_elem.max(a[i as usize]);\n        curr_sum += a[i as usize];\n        if curr_sum < 0 {\n            curr_sum = 0;\n        }\n        max_sum = max_sum.max(curr_sum);\n    }\n    if max_elem < 0 {\n        return max_elem;\n    }\n    let mut curr_prefix_sum = 0;\n    let mut curr_suffix_sum = 0;\n    let mut total_sum = 0;\n    for i in 0..n {\n        curr_prefix_sum += a[i as usize];\n        total_sum += a[i as usize];\n        if curr_prefix_sum < 0 {\n            curr_prefix_sum = 0;\n        }\n    }\n    for i in (0..n).rev() {\n        curr_suffix_sum += a[i as usize];\n        if curr_suffix_sum < 0 {\n            curr_suffix_sum = 0;\n        }\n    }\n    max_sum = max_sum.max(curr_prefix_sum + curr_suffix_sum);\n    max_sum = max_sum.max(total_sum * k);\n    max_sum = max_sum.max(total_sum + curr_suffix_sum);\n    max_sum = max_sum.max(total_sum + curr_prefix_sum);\n    max_sum",
    "    let mut max_sum = 0;\n    let mut curr_sum = 0;\n    for i in 0..n {\n        curr_sum += a[i as usize];\n    }\n    max_sum = curr_sum;\n    let mut prev_sum = curr_sum;\n    for i in 1..k {\n        curr_sum = prev_sum + (a[(i as usize) % n] * (k - i));\n        prev_sum = curr_sum;\n        max_sum = std::cmp::max(max_sum, curr_sum);\n    }\n    max_sum",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    for i in 0..n {\n        max_ending_here = max_ending_here + a[i as usize];\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n        }\n    }\n    let mut min_so_far = std::isize::MAX;\n    let mut min_ending_here = 0;\n    for i in 0..n {\n        min_ending_here = min_ending_here + a[i as usize];\n        if min_so_far > min_ending_here {\n            min_so_far = min_ending_here;\n        }\n        if min_ending_here > 0 {\n            min_ending_here = 0;\n        }\n    }\n    let mut max_wrap = 0;\n    for i in 0..n {\n        max_wrap = max_wrap + a[i as usize];\n    }\n    if k == 1 {\n        return max_so_far;\n    }\n    return max(max_so_far, max_wrap + min_so_far * (k - 2));",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n    for i in 0..n * k {\n        max_ending_here += a[i as usize % n];\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n    println!(\"{} {}\", start, end);\n    max_so_far",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n    for i in 0..n * k {\n        max_ending_here += a[i as usize % n];\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n    println!(\"{} {}\", start, end);\n    max_so_far",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n * k {\n        max_ending_here += a[i as usize % n];\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n    println!(\"{} {}\", start, end);\n    max_so_far",
    "    let mut max_sum = 0;\n    let mut curr_sum = 0;\n    let mut max_elem = a[0];\n    for i in 0..n {\n        if a[i as usize] > max_elem {\n            max_elem = a[i as usize];\n        }\n        curr_sum += a[i as usize];\n        if curr_sum < 0 {\n            curr_sum = 0;\n        }\n        if curr_sum > max_sum {\n            max_sum = curr_sum;\n        }\n    }\n    if max_sum == 0 {\n        return max_elem;\n    }\n    let mut max_wrap = 0;\n    for i in 0..n {\n        max_wrap += a[i as usize];\n        a[i as usize] = -a[i as usize];\n    }\n    let mut curr_wrap = 0;\n    for i in 0..n {\n        curr_wrap += a[i as usize];\n        if curr_wrap < 0 {\n            curr_wrap = 0;\n        }\n        if curr_wrap > max_wrap {\n            max_wrap = curr_wrap;\n        }\n    }\n    max_wrap = max_wrap + max_wrap;\n    if k == 1 {\n        return max_sum;\n    }\n    if k == 2 {\n        return max_wrap;\n    }\n    return max(max_sum, max_wrap);",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n * k {\n        max_ending_here += a[i as usize % n];\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n\n    println!(\"{} {}\", start, end);\n    max_so_far",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n    for i in 0..n * k {\n        max_ending_here += a[i as usize % n];\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n    println!(\"{} {}\", start, end);\n    max_so_far",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n    for i in 0..n {\n        max_ending_here += a[i as usize];\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n    let mut max_wrap = 0;\n    for i in 0..n {\n        max_wrap += a[i as usize];\n        a[i as usize] = -a[i as usize];\n    }\n    let mut min_so_far = std::isize::MAX;\n    let mut min_ending_here = 0;\n    for i in 0..n {\n        min_ending_here += a[i as usize];\n        if min_so_far > min_ending_here {\n            min_so_far = min_ending_here;\n        }\n        if min_ending_here > 0 {\n            min_ending_here = 0;\n        }\n    }\n    let mut max_wrap_sum = max_wrap + min_so_far;\n    if k == 1 {\n        return max_so_far;\n    }\n    if max_wrap_sum > max_so_far {\n        max_so_far = max_wrap_sum;\n    }\n    if max_wrap_sum < 0 {\n        max_so_far = max_so_far;\n    } else {\n        max_so_far = max_so_far + (k - 2) * max_wrap_sum;\n    }\n    max_so_far",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n*k {\n        max_ending_here += a[i as usize];\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n\n    println!(\"{} {}\", start, end);\n    max_so_far",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n * k {\n        max_ending_here += a[i as usize % n];\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n\n    println!(\"{} {}\", start, end);\n    max_so_far",
    "    let mut max_sum = 0;\n    let mut curr_sum = 0;\n    let mut max_element = a[0];\n    for i in 0..n {\n        if a[i as usize] > max_element {\n            max_element = a[i as usize];\n        }\n        curr_sum += a[i as usize];\n        if curr_sum < 0 {\n            curr_sum = 0;\n        }\n        if curr_sum > max_sum {\n            max_sum = curr_sum;\n        }\n    }\n    if max_sum == 0 {\n        return max_element;\n    }\n    let mut max_wrap = 0;\n    for i in 0..n {\n        max_wrap += a[i as usize];\n        a[i as usize] = -a[i as usize];\n    }\n    let mut curr_wrap = 0;\n    for i in 0..n {\n        curr_wrap += a[i as usize];\n        if curr_wrap < 0 {\n            curr_wrap = 0;\n        }\n        if curr_wrap > max_wrap {\n            max_wrap = curr_wrap;\n        }\n    }\n    max_wrap = max_wrap + max_wrap;\n    if max_wrap > max_sum {\n        max_sum = max_wrap;\n    }\n    max_sum",
    "    let mut max_sum = 0;\n    let mut max_sum_so_far = 0;\n    let mut max_element = std::isize::MIN;\n    let mut min_element = std::isize::MAX;\n    let mut min_sum_so_far = 0;\n    let mut sum = 0;\n    for i in 0..n {\n        sum += a[i as usize];\n        max_sum_so_far += a[i as usize];\n        if max_sum_so_far < 0 {\n            max_sum_so_far = 0;\n        }\n        if max_sum < max_sum_so_far {\n            max_sum = max_sum_so_far;\n        }\n        min_sum_so_far += a[i as usize];\n        if min_sum_so_far > 0 {\n            min_sum_so_far = 0;\n        }\n        if min_element > min_sum_so_far {\n            min_element = min_sum_so_far;\n        }\n        if max_element < a[i as usize] {\n            max_element = a[i as usize];\n        }\n    }\n    if max_element < 0 {\n        return max_element * k;\n    }\n    let mut max_wrap = 0;\n    if k > 1 {\n        max_wrap = sum * (k - 2) + max_sum;\n    }\n    let mut min_wrap = 0;\n    if k > 1 {\n        min_wrap = sum * (k - 2) + sum + min_element;\n    }\n    if max_wrap > max_sum {\n        max_sum = max_wrap;\n    }\n    if min_wrap > max_sum {\n        max_sum = min_wrap;\n    }\n    max_sum",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n * k {\n        max_ending_here += a[i as usize % n];\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n    println!(\"{} {}\", start, end);\n    max_so_far",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n    for i in 0..n * k {\n        max_ending_here += a[i as usize % n];\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n    println!(\"{} {}\", start, end);\n    max_so_far",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n * k {\n        max_ending_here += a[i as usize % n];\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n\n    println!(\"{} {}\", start, end);\n    max_so_far",
    "    let mut max_sum = 0;\n    let mut curr_sum = 0;\n    let mut max_elem = a[0];\n    for i in 0..n {\n        if a[i as usize] > max_elem {\n            max_elem = a[i as usize];\n        }\n        curr_sum += a[i as usize];\n        if curr_sum < 0 {\n            curr_sum = 0;\n        }\n        if curr_sum > max_sum {\n            max_sum = curr_sum;\n        }\n    }\n    if max_sum == 0 {\n        return max_elem * k;\n    }\n    let mut curr_prefix_sum = 0;\n    let mut curr_suffix_sum = 0;\n    for i in 0..n {\n        curr_prefix_sum += a[i as usize];\n        if curr_prefix_sum < 0 {\n            curr_prefix_sum = 0;\n        }\n    }\n    for i in (0..n).rev() {\n        curr_suffix_sum += a[i as usize];\n        if curr_suffix_sum < 0 {\n            curr_suffix_sum = 0;\n        }\n    }\n    let mut ans = max_sum;\n    for i in 1..k {\n        let temp = curr_prefix_sum + curr_suffix_sum;\n        if temp > ans {\n            ans = temp;\n        }\n        curr_prefix_sum = curr_prefix_sum + curr_suffix_sum;\n        curr_prefix_sum = curr_prefix_sum - max_sum;\n    }\n    ans",
    "    let mut max_sum = 0;\n    let mut curr_sum = 0;\n    for i in 0..n {\n        curr_sum += a[i as usize];\n    }\n    max_sum = curr_sum;\n    let mut max_element = a[0];\n    for i in 1..n {\n        if a[i as usize] > max_element {\n            max_element = a[i as usize];\n        }\n        curr_sum = curr_sum - a[i as usize - 1] + a[i as usize];\n        if curr_sum > max_sum {\n            max_sum = curr_sum;\n        }\n    }\n    if max_sum < 0 {\n        max_sum = max_element;\n    }\n    max_sum * k",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n    for i in 0..n * k {\n        max_ending_here += a[i as usize];\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n    println!(\"{} {}\", start, end);\n    max_so_far",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n * k {\n        max_ending_here += a[i as usize % n];\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n\n    println!(\"{} {}\", start, end);\n    max_so_far",
    "    let mut max_sum = 0;\n    let mut curr_sum = 0;\n    let mut max_elem = 0;\n    let mut min_elem = 0;\n    let mut max_elem_sum = 0;\n    let mut min_elem_sum = 0;\n    let mut total_sum = 0;\n\n    for i in 0..n {\n        if a[i as usize] > max_elem {\n            max_elem = a[i as usize];\n        }\n        if a[i as usize] < min_elem {\n            min_elem = a[i as usize];\n        }\n        total_sum += a[i as usize];\n        curr_sum += a[i as usize];\n        if curr_sum > max_sum {\n            max_sum = curr_sum;\n        }\n        if curr_sum < 0 {\n            curr_sum = 0;\n        }\n    }\n\n    max_elem_sum = max_elem * n;\n    min_elem_sum = min_elem * n;\n\n    if k == 1 {\n        return max_sum;\n    }\n\n    if max_elem_sum > 0 {\n        return max_elem_sum;\n    }\n\n    if min_elem_sum < 0 {\n        return max(max_sum, total_sum * (k - 2) + max_sum);\n    }\n\n    return max(max_sum, total_sum * (k - 2) + max_sum);",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n * k {\n        max_ending_here += a[i as usize % n];\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n\n    println!(\"{} {}\", start, end);\n    max_so_far",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..(k * n) {\n        max_ending_here += a[i as usize % n];\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n\n    println!(\"{} {}\", start, end);\n    max_so_far",
    "    let mut max_sum = 0;\n    let mut curr_sum = 0;\n    let mut max_elem = a[0];\n\n    for i in 0..n {\n        if a[i as usize] > max_elem {\n            max_elem = a[i as usize];\n        }\n        curr_sum += a[i as usize];\n        if curr_sum < 0 {\n            curr_sum = 0;\n        }\n        if curr_sum > max_sum {\n            max_sum = curr_sum;\n        }\n    }\n    if max_sum == 0 {\n        return max_elem;\n    }\n    let mut max_wrap = 0;\n    let mut curr_wrap = 0;\n    for i in 0..n {\n        curr_wrap += a[i as usize];\n        if curr_wrap < 0 {\n            curr_wrap = 0;\n        }\n    }\n    max_wrap = curr_wrap;\n    let mut ans = max_sum + (k - 2) * max_wrap;\n    if ans < max_sum {\n        ans = max_sum;\n    }\n    ans",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n    let mut i = 0;\n    while i < n * k {\n        max_ending_here += a[i as usize];\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n        i += 1;\n    }\n    println!(\"{} {}\", start, end);\n    max_so_far",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n * k {\n        max_ending_here += a[i as usize % n];\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n\n    println!(\"{} {}\", start, end);\n    max_so_far",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..(n * k) {\n        max_ending_here += a[i as usize % n];\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n    println!(\"{} {}\", start, end);\n    max_so_far",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n * k {\n        max_ending_here += a[i as usize % n];\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n\n    println!(\"{} {}\", start, end);\n\n    max_so_far",
    "    let mut max_sum = 0;\n    let mut max_so_far = 0;\n    let mut max_ending_here = 0;\n    let mut min_ending_here = 0;\n    let mut min_so_far = 0;\n\n    for i in 0..n {\n        max_ending_here += a[i as usize];\n        min_ending_here += a[i as usize];\n\n        if max_ending_here > max_so_far {\n            max_so_far = max_ending_here;\n        }\n        if min_ending_here < min_so_far {\n            min_so_far = min_ending_here;\n        }\n\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n        }\n        if min_ending_here > 0 {\n            min_ending_here = 0;\n        }\n    }\n\n    let max_sum_without_wrap = max_so_far;\n    let min_sum_without_wrap = min_so_far;\n\n    let total_sum = a.iter().sum();\n\n    if k == 1 {\n        return max_sum_without_wrap;\n    }\n\n    max_sum = max_so_far;\n    max_ending_here = 0;\n\n    for i in 0..n {\n        max_ending_here += a[i as usize];\n        if max_ending_here > max_sum {\n            max_sum = max_ending_here;\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n        }\n    }\n\n    let max_sum_with_wrap = max_sum;\n\n    let mut max_sum_wrap = total_sum * (k - 2);\n    max_sum_wrap += max_sum_with_wrap;\n    max_sum_wrap -= min_sum_without_wrap;\n\n    if max_sum_wrap > max_sum_without_wrap {\n        return max_sum_wrap;\n    } else {\n        return max_sum_without_wrap;\n    }",
    "    let mut max_so_far = a[0];\n    let mut max_ending_here = a[0];\n    let mut i = 1;\n    while i < n {\n        max_ending_here = max(a[i as usize], max_ending_here + a[i as usize]);\n        max_so_far = max(max_so_far, max_ending_here);\n        i += 1;\n    }\n    let mut sum = 0;\n    for i in 0..n {\n        sum += a[i as usize];\n    }\n    let mut max_sum = max_so_far;\n    let mut j = 2;\n    while j <= k {\n        let mut i = 0;\n        max_so_far = a[0];\n        max_ending_here = a[0];\n        while i < n {\n            max_ending_here = max(a[i as usize], max_ending_here + a[i as usize]);\n            max_so_far = max(max_so_far, max_ending_here);\n            i += 1;\n        }\n        max_sum = max(max_sum, max_so_far);\n        max_sum = max(max_sum, max_so_far + sum * (k - j));\n        j += 1;\n    }\n    max_sum",
    "    let mut max_sum = 0;\n    let mut curr_sum = 0;\n    let mut max_elem = a[0];\n    for i in 0..n {\n        max_elem = max(max_elem, a[i as usize]);\n        curr_sum += a[i as usize];\n        if curr_sum < 0 {\n            curr_sum = 0;\n        }\n        max_sum = max(max_sum, curr_sum);\n    }\n    if max_sum == 0 {\n        return max_elem;\n    }\n    let mut max_wrap = 0;\n    let mut min_wrap = 0;\n    let mut wrap_sum = 0;\n    for i in 0..n {\n        wrap_sum += a[i as usize];\n        max_wrap = max(max_wrap, wrap_sum);\n        if wrap_sum < 0 {\n            wrap_sum = 0;\n        }\n        min_wrap = min(min_wrap, wrap_sum);\n    }\n    let mut ans = max(max_sum, (wrap_sum * k - min_wrap));\n    ans = max(ans, max_wrap + min_wrap * (k - 2));\n    return ans;",
    "    let mut max_sum = 0;\n    let mut curr_sum = 0;\n    let mut max_elem = 0;\n    let mut min_elem = 0;\n    let mut min_sum = 0;\n    for i in 0..n {\n        curr_sum += a[i as usize];\n        max_sum += a[i as usize];\n        if a[i as usize] > max_elem {\n            max_elem = a[i as usize];\n        }\n        if a[i as usize] < min_elem {\n            min_elem = a[i as usize];\n            min_sum += a[i as usize];\n        }\n    }\n    if k == 1 {\n        return max_sum;\n    }\n    if max_elem <= 0 {\n        return max_elem;\n    }\n    if min_elem >= 0 {\n        return max_sum * k;\n    }\n    let mut res = max_sum;\n    for i in 1..k {\n        curr_sum = curr_sum - min_sum;\n        res = max(res, curr_sum);\n        curr_sum = curr_sum + max_sum;\n    }\n    res",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n {\n        max_ending_here += a[i as usize];\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n\n    let mut min_so_far = std::isize::MAX;\n    let mut min_ending_here = 0;\n    let mut start_min = 0;\n    let mut end_min = 0;\n    let mut s_min = 0;\n\n    for i in 0..n {\n        min_ending_here += a[i as usize];\n        if min_so_far > min_ending_here {\n            min_so_far = min_ending_here;\n            start_min = s_min;\n            end_min = i;\n        }\n        if min_ending_here > 0 {\n            min_ending_here = 0;\n            s_min = i + 1;\n        }\n    }\n\n    let mut max_wrap = 0;\n    for i in 0..n {\n        max_wrap += a[i as usize];\n    }\n\n    if k == 1 {\n        return max_so_far;\n    }\n\n    let mut max_non_wrap = 0;\n    for i in 0..n {\n        max_non_wrap += a[i as usize];\n        if (i as isize) >= end {\n            break;\n        }\n    }\n\n    let mut min_non_wrap = 0;\n    for i in 0..n {\n        min_non_wrap += a[i as usize];\n        if (i as isize) >= end_min {\n            break;\n        }\n    }\n\n    let mut max_wrap_sum = max_wrap *",
    "    let mut max_so_far = 0;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n {\n        max_ending_here += a[i as usize];\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n\n    let mut min_so_far = 0;\n    let mut min_ending_here = 0;\n    let mut start_min = 0;\n    let mut end_min = 0;\n    let mut s_min = 0;\n\n    for i in 0..n {\n        min_ending_here += a[i as usize];\n        if min_so_far > min_ending_here {\n            min_so_far = min_ending_here;\n            start_min = s_min;\n            end_min = i;\n        }\n        if min_ending_here > 0 {\n            min_ending_here = 0;\n            s_min = i + 1;\n        }\n    }\n\n    let mut max_wrap = 0;\n    for i in 0..n {\n        max_wrap += a[i as usize];\n    }\n\n    let mut min_wrap = 0;\n    for i in 0..n {\n        min_wrap += a[i as usize];\n    }\n\n    let mut max_wrap_sum = max_wrap;\n    for i in 0..k - 1 {\n        max_wrap_sum = max_wrap_sum + max_wrap;\n    }\n\n    let mut min_wrap_sum = min_wrap;\n    for i in 0..k - 1 {\n        min_wrap_sum = min_wrap_sum + min_wrap;\n    }\n\n    let mut result = max_so_far;\n    if start > end_min {\n        result = max(result, max_wrap_sum",
    "    let mut max_sum = 0;\n    let mut curr_sum = 0;\n    let mut max_sum_so_far = 0;\n    let mut curr_sum_so_far = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut l = 0;\n    let mut r = 0;\n    let mut max_sum_so_far_l = 0;\n    let mut max_sum_so_far_r = 0;\n    let mut curr_sum_so_far_l = 0;\n    let mut curr_sum_so_far_r = 0;\n    let mut max_sum_so_far_l_index = 0;\n    let mut max_sum_so_far_r_index = 0;\n    let mut curr_sum_so_far_l_index = 0;\n    let mut curr_sum_so_far_r_index = 0;\n\n    while i < n {\n        curr_sum += a[i as usize];\n        if curr_sum < 0 {\n            curr_sum = 0;\n            j = i + 1;\n        }\n        if curr_sum > max_sum {\n            max_sum = curr_sum;\n            l = j;\n            r = i;\n        }\n        i += 1;\n    }\n\n    max_sum_so_far = max_sum;\n    curr_sum_so_far = max_sum;\n    max_sum_so_far_l = l;\n    max_sum_so_far_r = r;\n    curr_sum_so_far_l = l;\n    curr_sum_so_far_r = r;\n    max_sum_so_far_l_index = 0;\n    max_sum_so_far_r_index = 0;\n    curr_sum_so_far_l_index = 0;\n    curr_sum_so_far_r_index = 0;\n\n    for _ in 1..k {\n        if curr_sum_so_far_l_index < curr_sum_so_far_r_index {\n",
    "    let mut max_sum = 0;\n    let mut curr_sum = 0;\n    let mut max_elem = a[0];\n    let mut min_elem = a[0];\n    for i in 0..n {\n        curr_sum += a[i as usize];\n        max_elem = max(max_elem, a[i as usize]);\n        min_elem = min(min_elem, a[i as usize]);\n    }\n    if k == 1 {\n        return curr_sum;\n    }\n    max_sum = curr_sum;\n    for i in 1..k {\n        if curr_sum < 0 {\n            curr_sum = 0;\n        }\n        curr_sum += max_elem * (k - i) + min_elem * (i - 1);\n        max_sum = max(max_sum, curr_sum);\n    }\n    max_sum",
    "    let mut max_sum = 0;\n    let mut curr_sum = 0;\n    for i in 0..n {\n        curr_sum += a[i as usize];\n    }\n    max_sum = curr_sum;\n    let mut max_elem = a[0];\n    for i in 1..n {\n        if a[i as usize] > max_elem {\n            max_elem = a[i as usize];\n        }\n    }\n    let mut curr_val = curr_sum;\n    for i in 0..n {\n        curr_val = curr_val - max_elem + a[i as usize];\n        if curr_val > max_sum {\n            max_sum = curr_val;\n        }\n    }\n    max_sum * k",
    "    let mut max_sum = 0;\n    let mut curr_sum = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n    for i in 0..n {\n        curr_sum += a[i as usize];\n        if curr_sum < 0 {\n            curr_sum = 0;\n            s = i + 1;\n        }\n        if max_sum < curr_sum {\n            max_sum = curr_sum;\n            start = s;\n            end = i;\n        }\n    }\n    let mut min_sum = 0;\n    let mut curr_sum = 0;\n    for i in 0..n {\n        curr_sum += a[i as usize];\n        if curr_sum > 0 {\n            curr_sum = 0;\n        }\n        if min_sum > curr_sum {\n            min_sum = curr_sum;\n        }\n    }\n    let mut circular_sum = 0;\n    for i in 0..n {\n        circular_sum += a[i as usize];\n    }\n    let mut max_circular_sum = circular_sum - min_sum;\n    let mut max_kadane = max_sum;\n    if max_circular_sum > max_kadane {\n        return max_circular_sum;\n    }\n    if start <= end {\n        max_sum = max_sum * k;\n        let mut left_sum = 0;\n        for i in 0..start {\n            left_sum += a[i as usize];\n        }\n        let mut right_sum = 0;\n        for i in (end + 1)..n {\n            right_sum += a[i as usize];\n        }\n        max_sum -= (left_sum * (k - 1) + right_sum * (k - 1));\n    }\n    max_sum",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n {\n        max_ending_here += a[i as usize];\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n\n    let mut max_wrap = 0;\n    let mut temp = 0;\n\n    for i in 0..n {\n        temp += a[i as usize];\n        if temp < 0 {\n            temp = 0;\n        }\n        max_wrap = std::cmp::max(temp, max_wrap);\n    }\n\n    if max_wrap > 0 {\n        max_wrap *= k;\n    }\n\n    let mut max_wrap_sum = 0;\n    for i in start..end + 1 {\n        max_wrap_sum += a[i as usize];\n    }\n\n    max_wrap_sum = max_wrap_sum * (k - 2);\n    max_wrap_sum += max_so_far;\n\n    std::cmp::max(max_wrap_sum, max_wrap)",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n * k {\n        max_ending_here += a[i as usize % n];\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n    println!(\"{} {}\", start, end);\n    max_so_far",
    "    let mut max_sum = 0;\n    let mut curr_sum = 0;\n    let mut max_elem = std::isize::MIN;\n    let mut min_elem = std::isize::MAX;\n    for i in 0..n {\n        max_elem = max(max_elem, a[i as usize]);\n        min_elem = min(min_elem, a[i as usize]);\n        curr_sum += a[i as usize];\n        if curr_sum < 0 {\n            curr_sum = 0;\n        }\n        max_sum = max(max_sum, curr_sum);\n    }\n    if max_elem < 0 {\n        return max_elem;\n    }\n    let mut max_wrap = 0;\n    for i in 0..n {\n        max_wrap += a[i as usize];\n        curr_sum += a[i as usize];\n        if curr_sum < 0 {\n            curr_sum = 0;\n        }\n        max_wrap = max(max_wrap, curr_sum);\n    }\n    let mut ans = max(max_sum, max_wrap);\n    if k > 2 {\n        ans = max(ans, max_wrap + (k - 2) * max_sum);\n    }\n    return ans;",
    "    let mut max_sum = 0;\n    let mut curr_sum = 0;\n    let mut max_elem = 0;\n    let mut min_elem = 0;\n    let mut min_sum = 0;\n    let mut total_sum = 0;\n    for i in 0..n {\n        total_sum += a[i as usize];\n        if a[i as usize] > max_elem {\n            max_elem = a[i as usize];\n        }\n        if a[i as usize] < min_elem {\n            min_elem = a[i as usize];\n            min_sum += a[i as usize];\n        }\n        curr_sum += a[i as usize];\n        if curr_sum > max_sum {\n            max_sum = curr_sum;\n        }\n        if curr_sum < 0 {\n            curr_sum = 0;\n        }\n    }\n    if k == 1 {\n        return max_sum;\n    }\n    if max_elem <= 0 {\n        return max_elem;\n    }\n    let mut max_wrap = 0;\n    for i in 0..n {\n        curr_sum += a[i as usize];\n        if curr_sum > max_wrap {\n            max_wrap = curr_sum;\n        }\n    }\n    let mut max_non_wrap = max_sum;\n    if max_wrap > max_non_wrap {\n        max_non_wrap = max_wrap;\n    }\n    let mut ans = 0;\n    if min_elem < 0 {\n        ans = (total_sum * (k - 2) + max_wrap + max_non_wrap);\n    } else {\n        ans = (total_sum * (k - 1) + max_non_wrap);\n    }\n    return ans;",
    "    let mut max_so_far = std::isize::MIN;\n    let mut max_ending_here = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut s = 0;\n\n    for i in 0..n * k {\n        max_ending_here += a[i as usize % n];\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n            start = s;\n            end = i;\n        }\n\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n            s = i + 1;\n        }\n    }\n    println!(\"{} {}\", start, end);\n    max_so_far",
    "    let mut max_sum = 0;\n    let mut curr_sum = 0;\n    let mut max_elem = a[0];\n    for i in 0..n {\n        if a[i as usize] > max_elem {\n            max_elem = a[i as usize];\n        }\n        curr_sum += a[i as usize];\n        if curr_sum < 0 {\n            curr_sum = 0;\n        }\n        if curr_sum > max_sum {\n            max_sum = curr_sum;\n        }\n    }\n    if max_sum == 0 {\n        return max_elem;\n    }\n    let mut max_wrap = 0;\n    for i in 0..n {\n        max_wrap += a[i as usize];\n        a[i as usize] = -a[i as usize];\n    }\n    let mut curr_wrap = 0;\n    for i in 0..n {\n        curr_wrap += a[i as usize];\n        if curr_wrap < 0 {\n            curr_wrap = 0;\n        }\n        if curr_wrap > max_wrap {\n            max_wrap = curr_wrap;\n        }\n    }\n    max_wrap = max_wrap + max_wrap;\n    if k == 1 {\n        return max_sum;\n    }\n    if k == 2 {\n        return max_sum.max(max_wrap);\n    }\n    return max_sum.max(max_wrap + max_sub_array_sum_repeated(a, n, k - 2));",
    "    let mut max_sum = 0;\n    let mut curr_sum = 0;\n    let mut max_sub_array_sum = 0;\n    let mut curr_sub_array_sum = 0;\n    let mut curr_sub_array_start = 0;\n    let mut curr_sub_array_end = 0;\n    let mut max_sub_array_start = 0;\n    let mut max_sub_array_end = 0;\n    let mut start = 0;\n    let mut end = 0;\n    let mut i = 0;\n    while i < n {\n        curr_sum += a[i as usize];\n        if curr_sum > max_sum {\n            max_sum = curr_sum;\n            end = i;\n        }\n        if curr_sum < 0 {\n            curr_sum = 0;\n            start = i + 1;\n        }\n        i += 1;\n    }\n    i = 0;\n    while i < n {\n        curr_sub_array_sum += a[i as usize];\n        if curr_sub_array_sum > max_sub_array_sum {\n            max_sub_array_sum = curr_sub_array_sum;\n            curr_sub_array_end = i;\n        }\n        if curr_sub_array_sum < 0 {\n            curr_sub_array_sum = 0;\n            curr_sub_array_start = i + 1;\n        }\n        i += 1;\n    }\n    if max_sum > 0 {\n        max_sub_array_sum = max_sum;\n        max_sub_array_start = start;\n        max_sub_array_end = end;\n    }\n    let mut max_sum_repeated = max_sub_array_sum * k;\n    if max_sum_repeated < 0 {\n        max_sum_repeated = 0;\n    }\n    let mut i = 0;\n    while i < n {\n        max_sum_repeated += a[i as usize];\n        i += 1;\n    }\n    max_sum_repeated -= max_"
  ]
}