{
  "name": "mbpp_450_extract_string",
  "language": "rs",
  "prompt": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_450_extract_string.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut new_vec: Vec<String> = Vec::new();\n    for i in str {\n        if i.len() as isize == l {\n            new_vec.push(i);\n        }\n    }\n    new_vec\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut res = Vec::new();\n    for i in str {\n        if i.len() as isize == l {\n            res.push(i);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    str.iter().filter(|x| x.len() as isize == l).map(|x| x.to_string()).collect()\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    str.iter().map(|x| x.chars().take(l as usize).collect()).collect()\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[\"Python\", \"list\", \"exercise\", \"practice\", \"solution\"]`,\n right: `[\"practice\", \"solution\"]`', /tmp/tmpzocjxwf0.rs:8:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut v: Vec<String> = Vec::new();\n    for i in 0..str.len() {\n        if str[i].len() as isize == l {\n            v.push(str[i].clone());\n        }\n    }\n    v\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut res: Vec<String> = Vec::new();\n    for i in str {\n        if i.len() as isize == l {\n            res.push(i);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n    for i in str {\n        if i.len() as isize == l {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in str {\n        if s.len() as isize == l {\n            result.push(s);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut v = Vec::new();\n    for i in str {\n        if i.len() as isize == l {\n            v.push(i);\n        }\n    }\n    v\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut res: Vec<String> = Vec::new();\n    for i in str {\n        if i.len() as isize == l {\n            res.push(i);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut res = Vec::new();\n    for s in str {\n        if s.len() as isize == l {\n            res.push(s);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut v = Vec::new();\n    for i in str {\n        if i.len() as isize == l {\n            v.push(i);\n        }\n    }\n    v\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut res: Vec<String> = Vec::new();\n    for i in str {\n        if i.len() as isize == l {\n            res.push(i);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut new_vec: Vec<String> = Vec::new();\n    for i in str {\n        if i.len() as isize == l {\n            new_vec.push(i);\n        }\n    }\n    new_vec\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in str {\n        if s.len() as isize == l {\n            result.push(s);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut res: Vec<String> = Vec::new();\n    for i in str {\n        if i.len() as isize == l {\n            res.push(i);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    str.into_iter().filter(|x| x.len() as isize == l).collect()\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut result = Vec::new();\n    for i in str {\n        if i.len() as isize == l {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    str.into_iter().filter(|x| x.len() as isize == l).collect()\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut result = Vec::new();\n    for i in str {\n        if i.len() as isize == l {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut res = Vec::new();\n    for s in str {\n        if s.len() as isize == l {\n            res.push(s);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut res: Vec<String> = Vec::new();\n    for i in str {\n        if i.len() as isize == l {\n            res.push(i);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut res: Vec<String> = Vec::new();\n    for i in str {\n        if i.len() as isize == l {\n            res.push(i);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut res: Vec<String> = Vec::new();\n    for i in str {\n        if i.len() as isize == l {\n            res.push(i);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut res = Vec::new();\n    for s in str {\n        if s.len() as isize == l {\n            res.push(s);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut result = Vec::new();\n    for i in str {\n        if i.len() as isize == l {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    str.iter().filter(|s| s.len() as isize == l).map(|s| s.to_string()).collect()\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1666123794,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut res = Vec::new();\n    for i in str {\n        if i.len() as isize == l {\n            res.push(i);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut res = Vec::new();\n    for s in str {\n        if s.len() as isize == l {\n            res.push(s);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut res: Vec<String> = Vec::new();\n    for s in str {\n        if s.len() as isize == l {\n            res.push(s);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1666123794,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut res = Vec::new();\n    for i in str {\n        if i.len() as isize == l {\n            res.push(i);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut res = Vec::new();\n    for i in str {\n        if i.len() as isize == l {\n            res.push(i);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut result = Vec::new();\n    for i in str {\n        if i.len() as isize == l {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    str.iter().filter(|s| s.len() as isize == l).map(|s| s.to_string()).collect()\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1666123794,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n    for s in str {\n        if s.len() as isize == l {\n            result.push(s);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1666123794,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut res: Vec<String> = Vec::new();\n    for i in str {\n        if i.len() as isize == l {\n            res.push(i);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n    for i in str {\n        if i.len() as isize == l {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut res = Vec::new();\n    for i in str {\n        if i.len() as isize == l {\n            res.push(i);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n    for i in str {\n        if i.len() as isize == l {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut new_vec: Vec<String> = Vec::new();\n    for i in str {\n        if i.len() as isize == l {\n            new_vec.push(i);\n        }\n    }\n    new_vec\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut res = Vec::new();\n    for i in str {\n        if i.len() as isize == l {\n            res.push(i);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut res = Vec::new();\n    for i in str {\n        if i.len() as isize == l {\n            res.push(i);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut res = Vec::new();\n    for i in str {\n        if i.len() as isize == l {\n            res.push(i);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut new_vec = Vec::new();\n    for i in 0..str.len() {\n        if str[i].len() as isize == l {\n            new_vec.push(str[i].clone());\n        }\n    }\n    new_vec\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1666123794,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut res: Vec<String> = Vec::new();\n    for i in str.iter() {\n        if i.len() as isize == l {\n            res.push(i.to_string());\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1666123794,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut res = Vec::new();\n    for i in str {\n        if i.len() as isize == l {\n            res.push(i);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut v: Vec<String> = Vec::new();\n    for i in str {\n        if i.len() as isize == l {\n            v.push(i);\n        }\n    }\n    v\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1666123794,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n    for i in str {\n        if i.len() as isize == l {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut res: Vec<String> = Vec::new();\n    for i in str {\n        if i.len() as isize == l {\n            res.push(i);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut res: Vec<String> = Vec::new();\n    for i in str {\n        if i.len() as isize == l {\n            res.push(i);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut res = Vec::new();\n    for i in str {\n        if i.len() as isize == l {\n            res.push(i);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    str.into_iter().filter(|s| s.len() as isize == l).collect()\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1666123794,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut res: Vec<String> = Vec::new();\n    for i in 0..str.len() {\n        if str[i].len() as isize == l {\n            res.push(str[i].clone());\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1666123794,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut res = Vec::new();\n    for i in str {\n        if i.len() as isize == l {\n            res.push(i);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut res = Vec::new();\n    for s in str {\n        if s.len() as isize == l {\n            res.push(s);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    str.into_iter().filter(|s| s.len() as isize == l).collect()\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1666123794,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut result = Vec::new();\n    for i in str {\n        if i.len() as isize == l {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut result = Vec::new();\n    for i in str {\n        if i.len() as isize == l {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut v = Vec::new();\n    for s in str {\n        if s.len() as isize == l {\n            v.push(s);\n        }\n    }\n    v\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1666123794,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut result = Vec::new();\n    for i in str {\n        if i.len() as isize == l {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    str.into_iter().filter(|s| s.len() as isize == l).collect()\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1666123794,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut res: Vec<String> = Vec::new();\n    for i in str {\n        if i.len() as isize == l {\n            res.push(i);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut res = Vec::new();\n    for i in str {\n        if i.len() as isize == l {\n            res.push(i);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut res: Vec<String> = Vec::new();\n    for i in str {\n        if i.len() as isize == l {\n            res.push(i);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut res = Vec::new();\n    for i in str {\n        if i.len() as isize == l {\n            res.push(i);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut res: Vec<String> = Vec::new();\n    for i in str {\n        if i.len() as isize == l {\n            res.push(i);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut res: Vec<String> = Vec::new();\n    for s in str {\n        if s.len() as isize == l {\n            res.push(s);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1666123794,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in str {\n        if s.len() as isize == l {\n            result.push(s);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut new_str: Vec<String> = Vec::new();\n    for s in str {\n        if s.len() as isize == l {\n            new_str.push(s);\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1666123794,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut res: Vec<String> = Vec::new();\n    for i in str {\n        if i.len() as isize == l {\n            res.push(i);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut res = Vec::new();\n    for i in str {\n        if i.len() as isize == l {\n            res.push(i);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in str {\n        if s.len() as isize == l {\n            result.push(s);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut res = Vec::new();\n    for i in str {\n        if i.len() as isize == l {\n            res.push(i);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut result = Vec::new();\n    for i in str {\n        if i.len() as isize == l {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut res = Vec::new();\n    for i in str {\n        if i.len() as isize == l {\n            res.push(i);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut res: Vec<String> = Vec::new();\n    for i in str {\n        if i.len() as isize == l {\n            res.push(i);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut result = Vec::new();\n    for i in str {\n        if i.len() as isize == l {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n    for s in str {\n        if s.len() as isize == l {\n            result.push(s);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1666123794,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut res: Vec<String> = Vec::new();\n    for i in str {\n        if i.len() as isize == l {\n            res.push(i);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut res = Vec::new();\n    for s in str {\n        if s.len() as isize == l {\n            res.push(s);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut res = Vec::new();\n    for i in 0..str.len() {\n        if str[i].len() as isize == l {\n            res.push(str[i].clone());\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1666123794,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut res = Vec::new();\n    for i in str {\n        if i.len() as isize == l {\n            res.push(i);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut res = Vec::new();\n    for s in str {\n        if s.len() as isize == l {\n            res.push(s);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut res = Vec::new();\n    for s in str {\n        if s.len() as isize == l {\n            res.push(s);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut res: Vec<String> = Vec::new();\n    for i in str {\n        if i.len() as isize == l {\n            res.push(i);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut res = Vec::new();\n    for i in str {\n        if i.len() as isize == l {\n            res.push(i);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n    for i in 0..str.len() {\n        if str[i].len() as isize == l {\n            result.push(str[i].clone());\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1666123794,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut result = Vec::new();\n    for i in str {\n        if i.len() as isize == l {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut res: Vec<String> = Vec::new();\n    for i in str {\n        if i.len() as isize == l {\n            res.push(i);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut res = vec![];\n    for s in str {\n        if s.len() as isize == l {\n            res.push(s);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1666123794,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut res = Vec::new();\n    for s in str {\n        if s.len() as isize == l {\n            res.push(s);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n    for i in str {\n        if i.len() as isize == l {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut res: Vec<String> = Vec::new();\n    for i in str {\n        if i.len() as isize == l {\n            res.push(i);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    str.iter().filter(|x| x.len() as isize == l).map(|x| x.to_string()).collect()\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n    for i in 0..str.len() {\n        if str[i].len() as isize == l {\n            result.push(str[i].clone());\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1666123794,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut res: Vec<String> = Vec::new();\n    for i in str {\n        if i.len() as isize == l {\n            res.push(i);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n    for i in str {\n        if i.len() as isize == l {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n    for i in str {\n        if i.len() as isize == l {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut res = vec![];\n    for i in str {\n        if i.len() as isize == l {\n            res.push(i);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1666123794,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut res = Vec::new();\n    for i in str {\n        if i.len() as isize == l {\n            res.push(i);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    str.into_iter().filter(|x| x.len() as isize == l).collect()\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut res = Vec::new();\n    for i in str {\n        if i.len() as isize == l {\n            res.push(i);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut new_vec = Vec::new();\n    for s in str {\n        if s.len() as isize == l {\n            new_vec.push(s);\n        }\n    }\n    new_vec\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1666123794,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut res = Vec::new();\n    for i in str {\n        if i.len() as isize == l {\n            res.push(i);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut res = Vec::new();\n    for s in str {\n        if s.len() as isize == l {\n            res.push(s);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    str.iter().filter(|&x| x.len() as isize == l).map(|x| x.to_string()).collect()\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1666123794,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut res = Vec::new();\n    for s in str {\n        if s.len() as isize == l {\n            res.push(s);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    str.iter().filter(|s| s.len() as isize == l).map(|s| s.to_string()).collect()\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1666123794,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut res = Vec::new();\n    for i in str {\n        if i.len() as isize == l {\n            res.push(i);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut res: Vec<String> = Vec::new();\n    for i in str {\n        if i.len() as isize == l {\n            res.push(i);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n    for s in str {\n        if s.len() as isize == l {\n            result.push(s);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1666123794,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut res = Vec::new();\n    for i in str {\n        if i.len() as isize == l {\n            res.push(i);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut res = Vec::new();\n    for i in str {\n        if i.len() as isize == l {\n            res.push(i);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut result = Vec::new();\n    for i in str {\n        if i.len() as isize == l {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut res = Vec::new();\n    for s in str {\n        if s.len() as isize == l {\n            res.push(s);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n    for s in str {\n        if s.len() as isize == l {\n            result.push(s);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1666123794,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut res = Vec::new();\n    for i in str {\n        if i.len() as isize == l {\n            res.push(i);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut res: Vec<String> = Vec::new();\n    for i in str {\n        if i.len() as isize == l {\n            res.push(i);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    str.into_iter().filter(|x| x.len() as isize == l).collect()\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut res = Vec::new();\n    for i in str {\n        if i.len() as isize == l {\n            res.push(i);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in str {\n        if s.len() as isize == l {\n            result.push(s);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut res: Vec<String> = Vec::new();\n    for i in str {\n        if i.len() as isize == l {\n            res.push(i);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n    for i in str {\n        if i.len() as isize == l {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut res = Vec::new();\n    for i in str {\n        if i.len() as isize == l {\n            res.push(i);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut res: Vec<String> = Vec::new();\n    for i in str {\n        if i.len() as isize == l {\n            res.push(i);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    str.iter().filter(|x| x.len() as isize == l).map(|x| x.to_string()).collect()\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n    for i in str {\n        if i.len() as isize == l {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut v = Vec::new();\n    for i in str {\n        if i.len() as isize == l {\n            v.push(i);\n        }\n    }\n    v\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut res = Vec::new();\n    for i in str {\n        if i.len() as isize == l {\n            res.push(i);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n    for s in str {\n        if s.len() as isize == l {\n            result.push(s);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1666123794,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut res: Vec<String> = Vec::new();\n    for i in str {\n        if i.len() as isize == l {\n            res.push(i);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut result = Vec::new();\n    for i in 0..str.len() {\n        if str[i].len() as isize == l {\n            result.push(str[i].clone());\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1666123794,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n    for i in str {\n        if i.len() as isize == l {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in str {\n        if s.len() as isize == l {\n            result.push(s);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n    for i in str {\n        if i.len() as isize == l {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut new_str = Vec::new();\n    for s in str {\n        if s.len() as isize == l {\n            new_str.push(s);\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1666123794,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n    for i in 0..str.len() {\n        if str[i].len() as isize == l {\n            result.push(str[i].clone());\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1666123794,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut res = Vec::new();\n    for s in str {\n        if s.len() as isize == l {\n            res.push(s);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut res: Vec<String> = Vec::new();\n    for i in str {\n        if i.len() as isize == l {\n            res.push(i);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut res = Vec::new();\n    for s in str {\n        if s.len() as isize == l {\n            res.push(s);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut res: Vec<String> = Vec::new();\n    for i in 0..str.len() {\n        if str[i].len() as isize == l {\n            res.push(str[i].clone());\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1666123794,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut result = vec![];\n    for s in str {\n        if s.len() as isize == l {\n            result.push(s);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1666123794,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut v = Vec::new();\n    for s in str {\n        if s.len() as isize == l {\n            v.push(s);\n        }\n    }\n    v\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1666123794,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut res = Vec::new();\n    for i in str {\n        if i.len() as isize == l {\n            res.push(i);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    str.iter()\n        .filter(|s| s.len() as isize == l)\n        .map(|s| s.to_string())\n        .collect()\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1666123794,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    str.into_iter().filter(|x| x.len() as isize == l).collect()\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut res: Vec<String> = Vec::new();\n    for i in str {\n        if i.len() as isize == l {\n            res.push(i);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut res = Vec::new();\n    for i in str {\n        if i.len() as isize == l {\n            res.push(i);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut res: Vec<String> = Vec::new();\n    for i in str {\n        if i.len() as isize == l {\n            res.push(i);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut res = Vec::new();\n    for i in str {\n        if i.len() as isize == l {\n            res.push(i);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut res = Vec::new();\n    for i in str {\n        if i.len() as isize == l {\n            res.push(i);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut v: Vec<String> = Vec::new();\n    for s in str {\n        if s.len() as isize == l {\n            v.push(s);\n        }\n    }\n    v\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1666123794,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    str.iter().filter(|x| x.len() as isize == l).map(|x| x.to_string()).collect()\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut result = Vec::new();\n    for i in str {\n        if i.len() as isize == l {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut res = Vec::new();\n    for s in str {\n        if s.len() as isize == l {\n            res.push(s);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    str.into_iter().filter(|x| x.len() as isize == l).collect()\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut res: Vec<String> = Vec::new();\n    for i in str {\n        if i.len() as isize == l {\n            res.push(i);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut res: Vec<String> = Vec::new();\n    for i in str {\n        if i.len() as isize == l {\n            res.push(i);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut res: Vec<String> = Vec::new();\n    for i in str {\n        if i.len() as isize == l {\n            res.push(i);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    str.iter().filter(|s| s.len() as isize == l).map(|s| s.to_string()).collect()\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1666123794,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    str.iter().filter(|s| s.len() as isize == l).map(|s| s.to_string()).collect()\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1666123794,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut res = Vec::new();\n    for i in str {\n        if i.len() as isize == l {\n            res.push(i);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut res = Vec::new();\n    for s in str {\n        if s.len() as isize == l {\n            res.push(s);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut res = Vec::new();\n    for i in str {\n        if i.len() as isize == l {\n            res.push(i);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut result = Vec::new();\n    for i in str {\n        if i.len() as isize == l {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut result = Vec::new();\n    for i in str {\n        if i.len() as isize == l {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut v = Vec::new();\n    for i in str {\n        if i.len() as isize == l {\n            v.push(i);\n        }\n    }\n    v\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut res = Vec::new();\n    for i in str {\n        if i.len() as isize == l {\n            res.push(i);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n    for i in str {\n        if i.len() as isize == l {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    str.iter().filter(|x| x.len() as isize == l).map(|x| x.to_string()).collect()\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut res: Vec<String> = Vec::new();\n    for i in str {\n        if i.len() as isize == l {\n            res.push(i);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n    for i in str {\n        if i.len() as isize == l {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut res = Vec::new();\n    for i in str {\n        if i.len() as isize == l {\n            res.push(i);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    str.into_iter().filter(|s| s.len() as isize == l).collect()\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1666123794,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut res = Vec::new();\n    for i in str {\n        if i.len() as isize == l {\n            res.push(i);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut res = Vec::new();\n    for i in str {\n        if i.len() as isize == l {\n            res.push(i);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut result = Vec::new();\n    for i in str {\n        if i.len() as isize == l {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut res: Vec<String> = Vec::new();\n    for s in str {\n        if s.len() as isize == l {\n            res.push(s);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1666123794,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut res: Vec<String> = Vec::new();\n    for i in str {\n        if i.len() as isize == l {\n            res.push(i);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n    for s in str {\n        if s.len() as isize == l {\n            result.push(s);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1666123794,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut result = Vec::new();\n    for s in str {\n        if s.len() as isize == l {\n            result.push(s);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut result = Vec::new();\n    for i in str {\n        if i.len() as isize == l {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut res = Vec::new();\n    for i in str {\n        if i.len() as isize == l {\n            res.push(i);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut res = Vec::new();\n    for i in str {\n        if i.len() as isize == l {\n            res.push(i);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut res: Vec<String> = Vec::new();\n    for i in str {\n        if i.len() as isize == l {\n            res.push(i);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut res: Vec<String> = Vec::new();\n    for i in str {\n        if i.len() as isize == l {\n            res.push(i);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut result = Vec::new();\n    for i in str {\n        if i.len() as isize == l {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    str.into_iter().filter(|s| s.len() as isize == l).collect()\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1666123794,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut res = Vec::new();\n    for i in str {\n        if i.len() as isize == l {\n            res.push(i);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut res = Vec::new();\n    for i in str {\n        if i.len() as isize == l {\n            res.push(i);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut new_vec = Vec::new();\n    for i in str {\n        if i.len() as isize == l {\n            new_vec.push(i);\n        }\n    }\n    new_vec\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1666123794,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut res: Vec<String> = Vec::new();\n    for i in str {\n        if i.len() as isize == l {\n            res.push(i);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut res = Vec::new();\n    for i in str {\n        if i.len() as isize == l {\n            res.push(i);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut res = Vec::new();\n    for i in str {\n        if i.len() as isize == l {\n            res.push(i);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut res = Vec::new();\n    for s in str {\n        if s.len() as isize == l {\n            res.push(s);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut res = Vec::new();\n    for i in str {\n        if i.len() as isize == l {\n            res.push(i);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut res = Vec::new();\n    for i in str {\n        if i.len() as isize == l {\n            res.push(i);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n    for i in str {\n        if i.len() as isize == l {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut result = Vec::new();\n    for i in str {\n        if i.len() as isize == l {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to extract specified size of strings from a given list of string values.\nfn extract_string(str: Vec<String>, l: isize) -> Vec<String> {\n    let mut result: Vec<String> = Vec::new();\n    for i in str {\n        if i.len() as isize == l {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = extract_string;\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 8), vec![String::from(\"practice\"), String::from(\"solution\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 6), vec![String::from(\"Python\")]);\n    assert_eq!(candidate(vec![String::from(\"Python\"), String::from(\"list\"), String::from(\"exercises\"), String::from(\"practice\"), String::from(\"solution\")], 9), vec![String::from(\"exercises\")]);\n}\n",
      "timestamp": 1665509707,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}