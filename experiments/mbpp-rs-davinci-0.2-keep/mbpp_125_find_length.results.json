{
  "name": "mbpp_125_find_length",
  "language": "rs",
  "prompt": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_125_find_length.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_0 = 0;\n    let mut count_1 = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n        max_diff = max_diff.max(count_1 - count_0);\n    }\n    max_diff\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1665509993,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `6`', /tmp/tmpg7f_dire.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_length = 0;\n    let mut count = 0;\n    let mut hash_map = HashMap::new();\n    hash_map.insert(0, -1);\n\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count += 1;\n        } else {\n            count -= 1;\n        }\n\n        if hash_map.contains_key(&count) {\n            max_length = max(max_length, i as isize - hash_map[&count]);\n        } else {\n            hash_map.insert(count, i as isize);\n        }\n    }\n\n    max_length\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1665509993,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmpliahmkns.rs:5:24\n  |\n5 |     let mut hash_map = HashMap::new();\n  |                        ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpliahmkns.rs:16:26\n   |\n16 |             max_length = max(max_length, i as isize - hash_map[&count]);\n   |                          ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0425, E0433.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_0 = 0;\n    let mut count_1 = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n        let diff = (count_0 - count_1).abs();\n        if diff > max_diff {\n            max_diff = diff;\n        }\n    }\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1665509993,
      "stdout": "",
      "stderr": "error[E0689]: can't call method `abs` on ambiguous numeric type `{integer}`\n  --> /tmp/tmp2ewv7urz.rs:12:40\n   |\n12 |         let diff = (count_0 - count_1).abs();\n   |                                        ^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0689`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut diff = 0;\n    for c in string.chars() {\n        if c == '0' {\n            diff += 1;\n        } else {\n            diff -= 1;\n        }\n        if diff < 0 {\n            diff = 0;\n        }\n        if diff > max_diff {\n            max_diff = diff;\n        }\n    }\n    max_diff\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1665509993,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_len = 0;\n    let mut count = 0;\n    let mut hash_map = HashMap::new();\n    hash_map.insert(0, -1);\n\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count += 1;\n        } else {\n            count -= 1;\n        }\n\n        if hash_map.contains_key(&count) {\n            max_len = max(max_len, i as isize - hash_map.get(&count).unwrap());\n        } else {\n            hash_map.insert(count, i as isize);\n        }\n    }\n\n    max_len\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1665509993,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmpk4r1qjg2.rs:5:24\n  |\n5 |     let mut hash_map = HashMap::new();\n  |                        ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpk4r1qjg2.rs:16:23\n   |\n16 |             max_len = max(max_len, i as isize - hash_map.get(&count).unwrap());\n   |                       ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0425, E0433.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut diff = 0;\n    for c in string.chars() {\n        if c == '0' {\n            diff += 1;\n        } else {\n            diff -= 1;\n        }\n        if diff < 0 {\n            diff = 0;\n        }\n        if diff > max_diff {\n            max_diff = diff;\n        }\n    }\n    max_diff\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1665509993,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_len: isize = 0;\n    let mut count_zero: isize = 0;\n    let mut count_one: isize = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        if count_zero == count_one {\n            max_len = std::cmp::max(max_len, count_zero + count_one);\n        }\n    }\n    count_zero = 0;\n    count_one = 0;\n    for c in string.chars().rev() {\n        if c == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        if count_zero == count_one {\n            max_len = std::cmp::max(max_len, count_zero + count_one);\n        }\n    }\n    max_len\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1665509993,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmprdqgzo9i.rs:33:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_len = 0;\n    let mut count = 0;\n    let mut map = HashMap::new();\n    map.insert(0, -1);\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count -= 1;\n        } else {\n            count += 1;\n        }\n        if map.contains_key(&count) {\n            max_len = max(max_len, i as isize - map[&count]);\n        } else {\n            map.insert(count, i as isize);\n        }\n    }\n    max_len\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1665509993,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmp41800ad1.rs:5:19\n  |\n5 |     let mut map = HashMap::new();\n  |                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp41800ad1.rs:14:23\n   |\n14 |             max_len = max(max_len, i as isize - map[&count]);\n   |                       ^^^\n   |\nhelp: a local variable with a similar name exists\n   |\n14 |             max_len = map(max_len, i as isize - map[&count]);\n   |                       ~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0425, E0433.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut zeros = 0;\n    let mut ones = 0;\n    for c in string.chars() {\n        if c == '0' {\n            zeros += 1;\n        } else {\n            ones += 1;\n        }\n        if zeros == ones {\n            max_diff = std::cmp::max(max_diff, zeros * 2);\n        }\n    }\n    zeros = 0;\n    ones = 0;\n    for c in string.chars().rev() {\n        if c == '0' {\n            zeros += 1;\n        } else {\n            ones += 1;\n        }\n        if zeros == ones {\n            max_diff = std::cmp::max(max_diff, zeros * 2);\n        }\n    }\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1665509993,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmp6lpzl2ui.rs:33:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_0 = 0;\n    let mut count_1 = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n        max_diff = max(max_diff, count_0 - count_1);\n    }\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1665509993,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpzntul6am.rs:12:20\n   |\n12 |         max_diff = max(max_diff, count_0 - count_1);\n   |                    ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_0 = 0;\n    let mut count_1 = 0;\n    for i in 0..string.len() {\n        if string.chars().nth(i).unwrap() == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n        if count_0 == count_1 {\n            max_diff = max(max_diff, count_0 + count_1);\n        }\n    }\n    for i in 0..string.len() {\n        if string.chars().nth(i).unwrap() == '0' {\n            count_0 -= 1;\n        } else {\n            count_1 -= 1;\n        }\n        if count_0 == count_1 {\n            max_diff = max(max_diff, count_0 + count_1);\n        }\n    }\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1665509993,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpffpcjkqe.rs:13:24\n   |\n13 |             max_diff = max(max_diff, count_0 + count_1);\n   |                        ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpffpcjkqe.rs:23:24\n   |\n23 |             max_diff = max(max_diff, count_0 + count_1);\n   |                        ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count += 1;\n        } else {\n            count -= 1;\n        }\n        if count < 0 {\n            count = 0;\n        }\n        max_diff = max_diff.max(count);\n    }\n    max_diff\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1665509993,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_len = 0;\n    let mut count = 0;\n    let mut map = std::collections::HashMap::new();\n    map.insert(0, -1);\n    for (i, c) in string.chars().enumerate() {\n        count += if c == '0' { 1 } else { -1 };\n        if let Some(j) = map.get(&count) {\n            max_len = std::cmp::max(max_len, i as isize - j);\n        } else {\n            map.insert(count, i as isize);\n        }\n    }\n    max_len\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1665509993,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmpmjcpjs2b.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_length = 0;\n    let mut count = 0;\n    let mut map = std::collections::HashMap::new();\n    map.insert(0, -1);\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count -= 1;\n        } else {\n            count += 1;\n        }\n        if map.contains_key(&count) {\n            max_length = std::cmp::max(max_length, i as isize - map[&count]);\n        } else {\n            map.insert(count, i as isize);\n        }\n    }\n    max_length\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1665509993,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmpmk1zuuhn.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut curr_diff = 0;\n    for c in string.chars() {\n        if c == '0' {\n            curr_diff += 1;\n        } else {\n            curr_diff -= 1;\n        }\n        if curr_diff < 0 {\n            curr_diff = 0;\n        }\n        if curr_diff > max_diff {\n            max_diff = curr_diff;\n        }\n    }\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1665509993,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut zeros = 0;\n    let mut ones = 0;\n    for c in string.chars() {\n        if c == '0' {\n            zeros += 1;\n        } else {\n            ones += 1;\n        }\n        let diff = (zeros - ones).abs();\n        if diff > max_diff {\n            max_diff = diff;\n        }\n    }\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1665509993,
      "stdout": "",
      "stderr": "error[E0689]: can't call method `abs` on ambiguous numeric type `{integer}`\n  --> /tmp/tmpmoamxbm7.rs:12:35\n   |\n12 |         let diff = (zeros - ones).abs();\n   |                                   ^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0689`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count = 0;\n    let mut zeros = 0;\n    let mut ones = 0;\n    for c in string.chars() {\n        if c == '0' {\n            zeros += 1;\n        } else {\n            ones += 1;\n        }\n        count += 1;\n        if zeros == ones {\n            max_diff = std::cmp::max(max_diff, count);\n        }\n    }\n    zeros = 0;\n    ones = 0;\n    count = 0;\n    for c in string.chars().rev() {\n        if c == '0' {\n            zeros += 1;\n        } else {\n            ones += 1;\n        }\n        count += 1;\n        if zeros == ones {\n            max_diff = std::cmp::max(max_diff, count);\n        }\n    }\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1665509993,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmpk2mk1bzo.rs:37:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_0 = 0;\n    let mut count_1 = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n        max_diff = max_diff.max(count_0 - count_1);\n    }\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1665509993,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmpi9g6pter.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_len = 0;\n    let mut count = 0;\n    let mut map = HashMap::new();\n    map.insert(0, -1);\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count -= 1;\n        } else {\n            count += 1;\n        }\n        if map.contains_key(&count) {\n            max_len = max(max_len, i as isize - map[&count]);\n        } else {\n            map.insert(count, i as isize);\n        }\n    }\n    max_len\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1665509993,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmp41800ad1.rs:5:19\n  |\n5 |     let mut map = HashMap::new();\n  |                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp41800ad1.rs:14:23\n   |\n14 |             max_len = max(max_len, i as isize - map[&count]);\n   |                       ^^^\n   |\nhelp: a local variable with a similar name exists\n   |\n14 |             max_len = map(max_len, i as isize - map[&count]);\n   |                       ~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0425, E0433.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_of_0 = 0;\n    let mut count_of_1 = 0;\n    for i in 0..string.len() {\n        if string.chars().nth(i).unwrap() == '0' {\n            count_of_0 += 1;\n        } else {\n            count_of_1 += 1;\n        }\n        if count_of_0 == count_of_1 {\n            max_diff = std::cmp::max(max_diff, count_of_0);\n        }\n    }\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1665509993,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `6`', /tmp/tmpr60c4j9_.rs:21:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_of_1 = 0;\n    let mut count_of_0 = 0;\n    for i in 0..string.len() {\n        if string.chars().nth(i).unwrap() == '1' {\n            count_of_1 += 1;\n        } else {\n            count_of_0 += 1;\n        }\n        if count_of_1 == count_of_0 {\n            max_diff = std::cmp::max(max_diff, count_of_1 + count_of_0);\n        }\n    }\n    count_of_1 = 0;\n    count_of_0 = 0;\n    for i in (0..string.len()).rev() {\n        if string.chars().nth(i).unwrap() == '1' {\n            count_of_1 += 1;\n        } else {\n            count_of_0 += 1;\n        }\n        if count_of_1 == count_of_0 {\n            max_diff = std::cmp::max(max_diff, count_of_1 + count_of_0);\n        }\n    }\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122963,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmpulfw7je1.rs:33:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_zero = 0;\n    let mut count_one = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        if count_zero == count_one {\n            max_diff = std::cmp::max(max_diff, count_zero + count_one);\n        }\n    }\n    count_zero = 0;\n    count_one = 0;\n    for c in string.chars().rev() {\n        if c == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        if count_zero == count_one {\n            max_diff = std::cmp::max(max_diff, count_zero + count_one);\n        }\n    }\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmpltji4nrc.rs:33:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_length = 0;\n    let mut count = 0;\n    let mut hash = HashMap::new();\n    hash.insert(0, -1);\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count += 1;\n        } else {\n            count -= 1;\n        }\n        if hash.contains_key(&count) {\n            max_length = max(max_length, i as isize - hash.get(&count).unwrap());\n        } else {\n            hash.insert(count, i as isize);\n        }\n    }\n    max_length\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122961,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmptejt9lkz.rs:5:20\n  |\n5 |     let mut hash = HashMap::new();\n  |                    ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmptejt9lkz.rs:14:26\n   |\n14 |             max_length = max(max_length, i as isize - hash.get(&count).unwrap());\n   |                          ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0425, E0433.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut zeros = 0;\n    let mut ones = 0;\n    let mut max_diff = 0;\n    let mut diff = 0;\n    for c in string.chars() {\n        if c == '0' {\n            zeros += 1;\n        } else {\n            ones += 1;\n        }\n        diff = zeros - ones;\n        if diff < 0 {\n            diff = -diff;\n        }\n        if diff > max_diff {\n            max_diff = diff;\n        }\n    }\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122963,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmp59fwprxk.rs:26:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_0 = 0;\n    let mut count_1 = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n        let diff = (count_0 - count_1).abs();\n        if diff > max_diff {\n            max_diff = diff;\n        }\n    }\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1665509993,
      "stdout": "",
      "stderr": "error[E0689]: can't call method `abs` on ambiguous numeric type `{integer}`\n  --> /tmp/tmp2ewv7urz.rs:12:40\n   |\n12 |         let diff = (count_0 - count_1).abs();\n   |                                        ^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0689`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_len = 0;\n    let mut count = 0;\n    let mut hash_map = HashMap::new();\n    hash_map.insert(0, -1);\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count -= 1;\n        } else {\n            count += 1;\n        }\n        if hash_map.contains_key(&count) {\n            max_len = max(max_len, i as isize - hash_map[&count]);\n        } else {\n            hash_map.insert(count, i as isize);\n        }\n    }\n    max_len\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122963,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmp9mnyg2nt.rs:5:24\n  |\n5 |     let mut hash_map = HashMap::new();\n  |                        ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp9mnyg2nt.rs:14:23\n   |\n14 |             max_len = max(max_len, i as isize - hash_map[&count]);\n   |                       ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0425, E0433.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_len = 0;\n    let mut count = 0;\n    let mut map = HashMap::new();\n    map.insert(0, -1);\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count += 1;\n        } else {\n            count -= 1;\n        }\n        if map.contains_key(&count) {\n            max_len = max(max_len, i as isize - map[&count]);\n        } else {\n            map.insert(count, i as isize);\n        }\n    }\n    max_len\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122961,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmpcctdyw9r.rs:5:19\n  |\n5 |     let mut map = HashMap::new();\n  |                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpcctdyw9r.rs:14:23\n   |\n14 |             max_len = max(max_len, i as isize - map[&count]);\n   |                       ^^^\n   |\nhelp: a local variable with a similar name exists\n   |\n14 |             max_len = map(max_len, i as isize - map[&count]);\n   |                       ~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0425, E0433.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut zero_count = 0;\n    let mut one_count = 0;\n\n    for c in string.chars() {\n        if c == '0' {\n            zero_count += 1;\n        } else {\n            one_count += 1;\n        }\n\n        max_diff = max(max_diff, zero_count - one_count);\n        if max_diff < 0 {\n            max_diff = 0;\n            zero_count = 0;\n            one_count = 0;\n        }\n    }\n\n    max_diff\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122963,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmplwzoqznz.rs:14:20\n   |\n14 |         max_diff = max(max_diff, zero_count - one_count);\n   |                    ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_zero = 0;\n    let mut count_one = 0;\n\n    for c in string.chars() {\n        if c == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n\n        if count_zero == count_one {\n            max_diff = std::cmp::max(max_diff, count_zero + count_one);\n        }\n    }\n\n    count_zero = 0;\n    count_one = 0;\n\n    for c in string.chars().rev() {\n        if c == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n\n        if count_zero == count_one {\n            max_diff = std::cmp::max(max_diff, count_zero + count_one);\n        }\n    }\n\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1665509993,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmpkk4uj72w.rs:39:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_zero = 0;\n    let mut count_one = 0;\n    for ch in string.chars() {\n        if ch == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        if count_zero == count_one {\n            max_diff = std::cmp::max(max_diff, count_zero + count_one);\n        }\n    }\n    count_zero = 0;\n    count_one = 0;\n    for ch in string.chars().rev() {\n        if ch == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        if count_zero == count_one {\n            max_diff = std::cmp::max(max_diff, count_zero + count_one);\n        }\n    }\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122963,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmp3ilpdzgo.rs:33:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_0 = 0;\n    let mut count_1 = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n        max_diff = max_diff.max(count_0 - count_1);\n    }\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1665509993,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmpi9g6pter.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_zero = 0;\n    let mut count_one = 0;\n    for ch in string.chars() {\n        if ch == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        let diff = (count_zero - count_one).abs();\n        if diff > max_diff {\n            max_diff = diff;\n        }\n    }\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "error[E0689]: can't call method `abs` on ambiguous numeric type `{integer}`\n  --> /tmp/tmp5afh1ged.rs:12:45\n   |\n12 |         let diff = (count_zero - count_one).abs();\n   |                                             ^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0689`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count -= 1;\n        } else {\n            count += 1;\n        }\n        if count < 0 {\n            count = 0;\n        }\n        if count > max_diff {\n            max_diff = count;\n        }\n    }\n    max_diff\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122963,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `6`', /tmp/tmp1qwewcsb.rs:23:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_zero = 0;\n    let mut count_one = 0;\n    for i in 0..string.len() {\n        if string.chars().nth(i).unwrap() == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        if count_zero == count_one {\n            max_diff = std::cmp::max(max_diff, count_zero + count_one);\n        }\n    }\n    count_zero = 0;\n    count_one = 0;\n    for i in (0..string.len()).rev() {\n        if string.chars().nth(i).unwrap() == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        if count_zero == count_one {\n            max_diff = std::cmp::max(max_diff, count_zero + count_one);\n        }\n    }\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1665509993,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmptvhgdc4n.rs:33:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut zeros = 0;\n    let mut ones = 0;\n\n    for c in string.chars() {\n        if c == '0' {\n            zeros += 1;\n        } else {\n            ones += 1;\n        }\n\n        let diff = zeros - ones;\n        if diff < 0 {\n            zeros = 0;\n            ones = 0;\n        } else {\n            max_diff = std::cmp::max(max_diff, diff);\n        }\n    }\n\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122963,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_len = 0;\n    let mut count = 0;\n    let mut hash = HashMap::new();\n    hash.insert(0, -1);\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count += 1;\n        } else {\n            count -= 1;\n        }\n        if hash.contains_key(&count) {\n            max_len = max_len.max(i as isize - hash.get(&count).unwrap());\n        } else {\n            hash.insert(count, i as isize);\n        }\n    }\n    max_len\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122963,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmpg7r4l7rl.rs:5:20\n  |\n5 |     let mut hash = HashMap::new();\n  |                    ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_0 = 0;\n    let mut count_1 = 0;\n    for ch in string.chars() {\n        if ch == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n        max_diff = max_diff.max(count_1 - count_0);\n    }\n    max_diff\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122963,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `6`', /tmp/tmp6tjlrqje.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_zero = 0;\n    let mut count_one = 0;\n    for i in 0..string.len() {\n        if string.chars().nth(i).unwrap() == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        if count_zero == count_one {\n            max_diff = std::cmp::max(max_diff, count_zero + count_one);\n        }\n    }\n    count_zero = 0;\n    count_one = 0;\n    for i in (0..string.len()).rev() {\n        if string.chars().nth(i).unwrap() == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        if count_zero == count_one {\n            max_diff = std::cmp::max(max_diff, count_zero + count_one);\n        }\n    }\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1665509993,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmptvhgdc4n.rs:33:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_one = 0;\n    let mut count_zero = 0;\n\n    for c in string.chars() {\n        if c == '1' {\n            count_one += 1;\n        } else {\n            count_zero += 1;\n        }\n\n        if count_one == count_zero {\n            max_diff = std::cmp::max(max_diff, count_one + count_zero);\n        }\n    }\n\n    count_one = 0;\n    count_zero = 0;\n\n    for c in string.chars().rev() {\n        if c == '1' {\n            count_one += 1;\n        } else {\n            count_zero += 1;\n        }\n\n        if count_one == count_zero {\n            max_diff = std::cmp::max(max_diff, count_one + count_zero);\n        }\n    }\n\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122963,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmpkup5gk6l.rs:39:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_zero = 0;\n    let mut count_one = 0;\n    for ch in string.chars() {\n        if ch == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        max_diff = max_diff.max(count_one - count_zero);\n    }\n    max_diff\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122963,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `6`', /tmp/tmpbsoep16j.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_length = 0;\n    let mut count = 0;\n    let mut map = HashMap::new();\n    map.insert(0, -1);\n\n    for (i, ch) in string.chars().enumerate() {\n        if ch == '0' {\n            count -= 1;\n        } else {\n            count += 1;\n        }\n\n        if map.contains_key(&count) {\n            max_length = max(max_length, i as isize - map.get(&count).unwrap());\n        } else {\n            map.insert(count, i as isize);\n        }\n    }\n\n    max_length\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122963,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmpc_k5w9lg.rs:5:19\n  |\n5 |     let mut map = HashMap::new();\n  |                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpc_k5w9lg.rs:16:26\n   |\n16 |             max_length = max(max_length, i as isize - map.get(&count).unwrap());\n   |                          ^^^\n   |\nhelp: a local variable with a similar name exists\n   |\n16 |             max_length = map(max_length, i as isize - map.get(&count).unwrap());\n   |                          ~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0425, E0433.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_len = 0;\n    let mut count = 0;\n    let mut hash_map = HashMap::new();\n    hash_map.insert(0, -1);\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count -= 1;\n        } else {\n            count += 1;\n        }\n        if hash_map.contains_key(&count) {\n            max_len = max(max_len, i as isize - hash_map[&count]);\n        } else {\n            hash_map.insert(count, i as isize);\n        }\n    }\n    max_len\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122963,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmp9mnyg2nt.rs:5:24\n  |\n5 |     let mut hash_map = HashMap::new();\n  |                        ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp9mnyg2nt.rs:14:23\n   |\n14 |             max_len = max(max_len, i as isize - hash_map[&count]);\n   |                       ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0425, E0433.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_0 = 0;\n    let mut count_1 = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n        if count_0 == count_1 {\n            max_diff = std::cmp::max(max_diff, count_0 * 2);\n        }\n    }\n    count_0 = 0;\n    count_1 = 0;\n    for c in string.chars().rev() {\n        if c == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n        if count_0 == count_1 {\n            max_diff = std::cmp::max(max_diff, count_0 * 2);\n        }\n    }\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122961,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmpyz4d914v.rs:33:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_len = 0;\n    let mut count = 0;\n    let mut hash = HashMap::new();\n    hash.insert(0, -1);\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count += 1;\n        } else {\n            count -= 1;\n        }\n        if hash.contains_key(&count) {\n            max_len = max(max_len, i as isize - hash[&count]);\n        } else {\n            hash.insert(count, i as isize);\n        }\n    }\n    max_len\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmpxd60gywt.rs:5:20\n  |\n5 |     let mut hash = HashMap::new();\n  |                    ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpxd60gywt.rs:14:23\n   |\n14 |             max_len = max(max_len, i as isize - hash[&count]);\n   |                       ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0425, E0433.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut diff = 0;\n    let mut zeros = 0;\n    let mut ones = 0;\n\n    for c in string.chars() {\n        if c == '0' {\n            zeros += 1;\n        } else {\n            ones += 1;\n        }\n        diff = zeros - ones;\n        if diff < 0 {\n            diff = -diff;\n        }\n        if diff > max_diff {\n            max_diff = diff;\n        }\n    }\n\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122963,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmpa187xh2t.rs:28:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_len = 0;\n    let mut count = 0;\n    let mut map = HashMap::new();\n    map.insert(0, -1);\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count -= 1;\n        } else {\n            count += 1;\n        }\n        if map.contains_key(&count) {\n            max_len = max(max_len, i as isize - map[&count]);\n        } else {\n            map.insert(count, i as isize);\n        }\n    }\n    max_len\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1665509993,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmp41800ad1.rs:5:19\n  |\n5 |     let mut map = HashMap::new();\n  |                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp41800ad1.rs:14:23\n   |\n14 |             max_len = max(max_len, i as isize - map[&count]);\n   |                       ^^^\n   |\nhelp: a local variable with a similar name exists\n   |\n14 |             max_len = map(max_len, i as isize - map[&count]);\n   |                       ~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0425, E0433.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_zeros = 0;\n    let mut count_ones = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_zeros += 1;\n        } else {\n            count_ones += 1;\n        }\n        max_diff = max_diff.max(count_ones - count_zeros);\n        if count_zeros > count_ones {\n            count_zeros = 0;\n            count_ones = 0;\n        }\n    }\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122963,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `6`', /tmp/tmp86yez5er.rs:23:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_zero = 0;\n    let mut count_one = 0;\n    for i in 0..string.len() {\n        if string.chars().nth(i).unwrap() == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        if count_zero == count_one {\n            max_diff = std::cmp::max(max_diff, count_zero + count_one);\n        }\n    }\n    count_zero = 0;\n    count_one = 0;\n    for i in (0..string.len()).rev() {\n        if string.chars().nth(i).unwrap() == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        if count_zero == count_one {\n            max_diff = std::cmp::max(max_diff, count_zero + count_one);\n        }\n    }\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1665509993,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmptvhgdc4n.rs:33:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_len = 0;\n    let mut count_zero = 0;\n    let mut count_one = 0;\n\n    for i in 0..string.len() {\n        let c = string.chars().nth(i).unwrap();\n        if c == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n\n        if count_zero == count_one {\n            max_len = std::cmp::max(max_len, count_zero + count_one);\n        }\n    }\n\n    max_len as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122963,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmp8q6boj4_.rs:25:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_length = 0;\n    let mut count = 0;\n    let mut hash_map = HashMap::new();\n    hash_map.insert(0, -1);\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count += 1;\n        } else {\n            count -= 1;\n        }\n\n        if hash_map.contains_key(&count) {\n            max_length = max(max_length, i as isize - hash_map[&count]);\n        } else {\n            hash_map.insert(count, i as isize);\n        }\n    }\n\n    max_length\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122963,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmpcvwni7ma.rs:5:24\n  |\n5 |     let mut hash_map = HashMap::new();\n  |                        ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpcvwni7ma.rs:15:26\n   |\n15 |             max_length = max(max_length, i as isize - hash_map[&count]);\n   |                          ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0425, E0433.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_len = 0;\n    let mut count = 0;\n    let mut map = HashMap::new();\n    map.insert(0, -1);\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count -= 1;\n        } else {\n            count += 1;\n        }\n        if map.contains_key(&count) {\n            max_len = max_len.max(i as isize - *map.get(&count).unwrap());\n        } else {\n            map.insert(count, i as isize);\n        }\n    }\n    max_len\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122963,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmpdeng07g_.rs:5:19\n  |\n5 |     let mut map = HashMap::new();\n  |                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_len = 0;\n    let mut count = 0;\n    let mut hash = HashMap::new();\n    hash.insert(0, -1);\n\n    for (i, c) in string.chars().enumerate() {\n        count += if c == '0' { -1 } else { 1 };\n\n        if hash.contains_key(&count) {\n            max_len = max_len.max(i as isize - hash[&count]);\n        } else {\n            hash.insert(count, i as isize);\n        }\n    }\n\n    max_len\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122963,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmpeeu2es78.rs:5:20\n  |\n5 |     let mut hash = HashMap::new();\n  |                    ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_zero = 0;\n    let mut count_one = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        max_diff = max_diff.max(count_zero - count_one);\n    }\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmp6umjdhpa.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_length = 0;\n    let mut count = 0;\n    let mut hash_map = HashMap::new();\n    hash_map.insert(0, -1);\n\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count += 1;\n        } else {\n            count -= 1;\n        }\n\n        if hash_map.contains_key(&count) {\n            max_length = max(max_length, i as isize - hash_map[&count]);\n        } else {\n            hash_map.insert(count, i as isize);\n        }\n    }\n\n    max_length\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1665509993,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmpliahmkns.rs:5:24\n  |\n5 |     let mut hash_map = HashMap::new();\n  |                        ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpliahmkns.rs:16:26\n   |\n16 |             max_length = max(max_length, i as isize - hash_map[&count]);\n   |                          ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0425, E0433.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut zeros = 0;\n    let mut ones = 0;\n    for c in string.chars() {\n        if c == '0' {\n            zeros += 1;\n        } else {\n            ones += 1;\n        }\n        max_diff = max_diff.max(zeros - ones);\n    }\n    max_diff\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122963,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmp60i_7juq.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_len = 0;\n    let mut count = 0;\n    let mut map: HashMap<isize, isize> = HashMap::new();\n    map.insert(0, -1);\n\n    for (i, c) in string.chars().enumerate() {\n        count += if c == '0' { 1 } else { -1 };\n        if map.contains_key(&count) {\n            max_len = max(max_len, i as isize - map.get(&count).unwrap());\n        } else {\n            map.insert(count, i as isize);\n        }\n    }\n    max_len\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122963,
      "stdout": "",
      "stderr": "error[E0412]: cannot find type `HashMap` in this scope\n --> /tmp/tmpq0z48nu8.rs:5:18\n  |\n5 |     let mut map: HashMap<isize, isize> = HashMap::new();\n  |                  ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmpq0z48nu8.rs:5:42\n  |\n5 |     let mut map: HashMap<isize, isize> = HashMap::new();\n  |                                          ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpq0z48nu8.rs:11:23\n   |\n11 |             max_len = max(max_len, i as isize - map.get(&count).unwrap());\n   |                       ^^^\n   |\nhelp: a local variable with a similar name exists\n   |\n11 |             max_len = map(max_len, i as isize - map.get(&count).unwrap());\n   |                       ~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0412, E0425, E0433.\nFor more information about an error, try `rustc --explain E0412`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_zero = 0;\n    let mut count_one = 0;\n\n    for c in string.chars() {\n        if c == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n\n        if count_zero == count_one {\n            max_diff = std::cmp::max(max_diff, count_zero + count_one);\n        }\n    }\n\n    count_zero = 0;\n    count_one = 0;\n\n    for c in string.chars().rev() {\n        if c == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n\n        if count_zero == count_one {\n            max_diff = std::cmp::max(max_diff, count_zero + count_one);\n        }\n    }\n\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1665509993,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmpkk4uj72w.rs:39:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut cur_diff = 0;\n\n    for c in string.chars() {\n        if c == '0' {\n            cur_diff += 1;\n        } else {\n            cur_diff -= 1;\n        }\n\n        if cur_diff < 0 {\n            cur_diff = 0;\n        }\n\n        if cur_diff > max_diff {\n            max_diff = cur_diff;\n        }\n    }\n\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122963,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_len = 0;\n    let mut count = 0;\n    let mut hash = HashMap::new();\n    hash.insert(0, -1);\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count += 1;\n        } else {\n            count -= 1;\n        }\n        if hash.contains_key(&count) {\n            max_len = max(max_len, i as isize - hash.get(&count).unwrap());\n        } else {\n            hash.insert(count, i as isize);\n        }\n    }\n    max_len\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmpdt0dexrj.rs:5:20\n  |\n5 |     let mut hash = HashMap::new();\n  |                    ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpdt0dexrj.rs:14:23\n   |\n14 |             max_len = max(max_len, i as isize - hash.get(&count).unwrap());\n   |                       ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0425, E0433.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_zero = 0;\n    let mut count_one = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        max_diff = max_diff.max(count_zero - count_one);\n    }\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmp6umjdhpa.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_0 = 0;\n    let mut count_1 = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n        max_diff = max_diff.max(count_1 - count_0);\n    }\n    max_diff\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1665509993,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `6`', /tmp/tmpg7f_dire.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_len = 0;\n    let mut count = 0;\n    let mut hash = HashMap::new();\n    hash.insert(0, -1);\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count -= 1;\n        } else {\n            count += 1;\n        }\n        if hash.contains_key(&count) {\n            max_len = max(max_len, i as isize - hash[&count]);\n        } else {\n            hash.insert(count, i as isize);\n        }\n    }\n    max_len\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmp6xe1jxec.rs:5:20\n  |\n5 |     let mut hash = HashMap::new();\n  |                    ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp6xe1jxec.rs:14:23\n   |\n14 |             max_len = max(max_len, i as isize - hash[&count]);\n   |                       ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0425, E0433.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_len = 0;\n    let mut count = 0;\n    let mut map = HashMap::new();\n    map.insert(0, -1);\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count += 1;\n        } else {\n            count -= 1;\n        }\n        if map.contains_key(&count) {\n            max_len = max(max_len, i as isize - map[&count]);\n        } else {\n            map.insert(count, i as isize);\n        }\n    }\n    max_len\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122961,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmpcctdyw9r.rs:5:19\n  |\n5 |     let mut map = HashMap::new();\n  |                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpcctdyw9r.rs:14:23\n   |\n14 |             max_len = max(max_len, i as isize - map[&count]);\n   |                       ^^^\n   |\nhelp: a local variable with a similar name exists\n   |\n14 |             max_len = map(max_len, i as isize - map[&count]);\n   |                       ~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0425, E0433.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_zero = 0;\n    let mut count_one = 0;\n    let mut diff = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        diff = count_zero - count_one;\n        if diff < 0 {\n            diff = -diff;\n        }\n        if diff > max_diff {\n            max_diff = diff;\n        }\n    }\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122963,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmpshjwets_.rs:26:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_len = 0;\n    let mut count_zero = 0;\n    let mut count_one = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        if count_zero == count_one {\n            max_len = std::cmp::max(max_len, count_zero + count_one);\n        }\n    }\n    count_zero = 0;\n    count_one = 0;\n    for c in string.chars().rev() {\n        if c == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        if count_zero == count_one {\n            max_len = std::cmp::max(max_len, count_zero + count_one);\n        }\n    }\n    max_len as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmpelet8gv1.rs:33:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_length = 0;\n    let mut count = 0;\n    let mut hash_map: HashMap<isize, isize> = HashMap::new();\n    hash_map.insert(0, -1);\n\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count += 1;\n        } else {\n            count -= 1;\n        }\n\n        if hash_map.contains_key(&count) {\n            max_length = max(max_length, i as isize - hash_map[&count]);\n        } else {\n            hash_map.insert(count, i as isize);\n        }\n    }\n\n    max_length\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122963,
      "stdout": "",
      "stderr": "error[E0412]: cannot find type `HashMap` in this scope\n --> /tmp/tmpw26yd5ng.rs:5:23\n  |\n5 |     let mut hash_map: HashMap<isize, isize> = HashMap::new();\n  |                       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmpw26yd5ng.rs:5:47\n  |\n5 |     let mut hash_map: HashMap<isize, isize> = HashMap::new();\n  |                                               ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpw26yd5ng.rs:16:26\n   |\n16 |             max_length = max(max_length, i as isize - hash_map[&count]);\n   |                          ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0412, E0425, E0433.\nFor more information about an error, try `rustc --explain E0412`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_length = 0;\n    let mut count = 0;\n    let mut hash_map: HashMap<isize, isize> = HashMap::new();\n    hash_map.insert(0, -1);\n\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count += 1;\n        } else {\n            count -= 1;\n        }\n\n        if hash_map.contains_key(&count) {\n            max_length = max(max_length, i as isize - hash_map.get(&count).unwrap());\n        } else {\n            hash_map.insert(count, i as isize);\n        }\n    }\n\n    max_length\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122963,
      "stdout": "",
      "stderr": "error[E0412]: cannot find type `HashMap` in this scope\n --> /tmp/tmpcgfa8hkh.rs:5:23\n  |\n5 |     let mut hash_map: HashMap<isize, isize> = HashMap::new();\n  |                       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmpcgfa8hkh.rs:5:47\n  |\n5 |     let mut hash_map: HashMap<isize, isize> = HashMap::new();\n  |                                               ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpcgfa8hkh.rs:16:26\n   |\n16 |             max_length = max(max_length, i as isize - hash_map.get(&count).unwrap());\n   |                          ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0412, E0425, E0433.\nFor more information about an error, try `rustc --explain E0412`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_len = 0;\n    let mut count = 0;\n    let mut map = std::collections::HashMap::new();\n    map.insert(0, -1);\n\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count -= 1;\n        } else {\n            count += 1;\n        }\n\n        if map.contains_key(&count) {\n            max_len = std::cmp::max(max_len, i as isize - map.get(&count).unwrap());\n        } else {\n            map.insert(count, i as isize);\n        }\n    }\n\n    max_len\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122963,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmpo7myrbux.rs:27:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_len = 0;\n    let mut count = 0;\n    let mut map = HashMap::new();\n    map.insert(0, -1);\n\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count += 1;\n        } else {\n            count -= 1;\n        }\n\n        if map.contains_key(&count) {\n            max_len = max(max_len, i as isize - map[&count]);\n        } else {\n            map.insert(count, i as isize);\n        }\n    }\n\n    max_len\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmpc1wlh3t4.rs:5:19\n  |\n5 |     let mut map = HashMap::new();\n  |                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpc1wlh3t4.rs:16:23\n   |\n16 |             max_len = max(max_len, i as isize - map[&count]);\n   |                       ^^^\n   |\nhelp: a local variable with a similar name exists\n   |\n16 |             max_len = map(max_len, i as isize - map[&count]);\n   |                       ~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0425, E0433.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_0 = 0;\n    let mut count_1 = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n        max_diff = std::cmp::max(max_diff, count_0 - count_1);\n    }\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122961,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmpw1y4zthm.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_length = 0;\n    let mut count = 0;\n    let mut hash_map: HashMap<isize, isize> = HashMap::new();\n    hash_map.insert(0, -1);\n\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count -= 1;\n        } else {\n            count += 1;\n        }\n\n        if let Some(j) = hash_map.get(&count) {\n            max_length = std::cmp::max(max_length, i as isize - j);\n        } else {\n            hash_map.insert(count, i as isize);\n        }\n    }\n\n    max_length\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122963,
      "stdout": "",
      "stderr": "error[E0412]: cannot find type `HashMap` in this scope\n --> /tmp/tmp671l780a.rs:5:23\n  |\n5 |     let mut hash_map: HashMap<isize, isize> = HashMap::new();\n  |                       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmp671l780a.rs:5:47\n  |\n5 |     let mut hash_map: HashMap<isize, isize> = HashMap::new();\n  |                                               ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0412, E0433.\nFor more information about an error, try `rustc --explain E0412`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_zero = 0;\n    let mut count_one = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        let diff = (count_zero - count_one).abs();\n        if diff > max_diff {\n            max_diff = diff;\n        }\n    }\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1665509993,
      "stdout": "",
      "stderr": "error[E0689]: can't call method `abs` on ambiguous numeric type `{integer}`\n  --> /tmp/tmpfkvbskto.rs:12:45\n   |\n12 |         let diff = (count_zero - count_one).abs();\n   |                                             ^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0689`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_len = 0;\n    let mut count = 0;\n    let mut map = HashMap::new();\n    map.insert(0, -1);\n\n    for (i, ch) in string.chars().enumerate() {\n        if ch == '0' {\n            count -= 1;\n        } else {\n            count += 1;\n        }\n\n        if map.contains_key(&count) {\n            max_len = max(max_len, i as isize - map[&count]);\n        } else {\n            map.insert(count, i as isize);\n        }\n    }\n\n    max_len\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122963,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmps1d0i2jz.rs:5:19\n  |\n5 |     let mut map = HashMap::new();\n  |                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmps1d0i2jz.rs:16:23\n   |\n16 |             max_len = max(max_len, i as isize - map[&count]);\n   |                       ^^^\n   |\nhelp: a local variable with a similar name exists\n   |\n16 |             max_len = map(max_len, i as isize - map[&count]);\n   |                       ~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0425, E0433.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_zero = 0;\n    let mut count_one = 0;\n\n    for c in string.chars() {\n        if c == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n\n        if count_zero == count_one {\n            max_diff = std::cmp::max(max_diff, count_zero + count_one);\n        }\n    }\n\n    count_zero = 0;\n    count_one = 0;\n\n    for c in string.chars().rev() {\n        if c == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n\n        if count_zero == count_one {\n            max_diff = std::cmp::max(max_diff, count_zero + count_one);\n        }\n    }\n\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1665509993,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmpkk4uj72w.rs:39:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut zeros = 0;\n    let mut ones = 0;\n    for c in string.chars() {\n        if c == '0' {\n            zeros += 1;\n        } else {\n            ones += 1;\n        }\n        max_diff = max_diff.max(zeros - ones);\n    }\n    max_diff\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122963,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmp60i_7juq.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_zero = 0;\n    let mut count_one = 0;\n    for i in 0..string.len() {\n        if string.chars().nth(i).unwrap() == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        if count_zero == count_one {\n            max_diff = std::cmp::max(max_diff, count_zero);\n        }\n    }\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122963,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `6`', /tmp/tmpksm0omfn.rs:21:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_len = 0;\n    let mut count = 0;\n    let mut map: HashMap<isize, isize> = HashMap::new();\n    map.insert(0, -1);\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count += 1;\n        } else {\n            count -= 1;\n        }\n        if map.contains_key(&count) {\n            max_len = max(max_len, i as isize - map.get(&count).unwrap());\n        } else {\n            map.insert(count, i as isize);\n        }\n    }\n    max_len\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "error[E0412]: cannot find type `HashMap` in this scope\n --> /tmp/tmpq5x61tvp.rs:5:18\n  |\n5 |     let mut map: HashMap<isize, isize> = HashMap::new();\n  |                  ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmpq5x61tvp.rs:5:42\n  |\n5 |     let mut map: HashMap<isize, isize> = HashMap::new();\n  |                                          ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpq5x61tvp.rs:14:23\n   |\n14 |             max_len = max(max_len, i as isize - map.get(&count).unwrap());\n   |                       ^^^\n   |\nhelp: a local variable with a similar name exists\n   |\n14 |             max_len = map(max_len, i as isize - map.get(&count).unwrap());\n   |                       ~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0412, E0425, E0433.\nFor more information about an error, try `rustc --explain E0412`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_len = 0;\n    let mut count = 0;\n    let mut hash_map = HashMap::new();\n    hash_map.insert(0, -1);\n\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count += 1;\n        } else {\n            count -= 1;\n        }\n\n        if hash_map.contains_key(&count) {\n            max_len = max(max_len, i as isize - hash_map[&count]);\n        } else {\n            hash_map.insert(count, i as isize);\n        }\n    }\n\n    max_len\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122963,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmpjddfmnqv.rs:5:24\n  |\n5 |     let mut hash_map = HashMap::new();\n  |                        ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpjddfmnqv.rs:16:23\n   |\n16 |             max_len = max(max_len, i as isize - hash_map[&count]);\n   |                       ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0425, E0433.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_0 = 0;\n    let mut count_1 = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n        if count_0 == count_1 {\n            max_diff = std::cmp::max(max_diff, count_0 + count_1);\n        }\n    }\n    count_0 = 0;\n    count_1 = 0;\n    for c in string.chars().rev() {\n        if c == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n        if count_0 == count_1 {\n            max_diff = std::cmp::max(max_diff, count_0 + count_1);\n        }\n    }\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmpm4xufoi0.rs:33:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_len = 0;\n    let mut count = 0;\n    let mut map = HashMap::new();\n    map.insert(0, -1);\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count += 1;\n        } else {\n            count -= 1;\n        }\n        if map.contains_key(&count) {\n            max_len = max(max_len, i as isize - map[&count]);\n        } else {\n            map.insert(count, i as isize);\n        }\n    }\n    max_len\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122961,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmpcctdyw9r.rs:5:19\n  |\n5 |     let mut map = HashMap::new();\n  |                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpcctdyw9r.rs:14:23\n   |\n14 |             max_len = max(max_len, i as isize - map[&count]);\n   |                       ^^^\n   |\nhelp: a local variable with a similar name exists\n   |\n14 |             max_len = map(max_len, i as isize - map[&count]);\n   |                       ~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0425, E0433.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_len = 0;\n    let mut count = 0;\n    let mut map = HashMap::new();\n    map.insert(0, -1);\n\n    for (i, c) in string.chars().enumerate() {\n        count += if c == '0' { 1 } else { -1 };\n        if map.contains_key(&count) {\n            max_len = std::cmp::max(max_len, i as isize - map.get(&count).unwrap());\n        } else {\n            map.insert(count, i as isize);\n        }\n    }\n\n    max_len\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122963,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmpw4hajcgy.rs:5:19\n  |\n5 |     let mut map = HashMap::new();\n  |                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_length = 0;\n    let mut count = 0;\n    let mut hash_map = HashMap::new();\n    hash_map.insert(0, -1);\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count -= 1;\n        } else {\n            count += 1;\n        }\n        if hash_map.contains_key(&count) {\n            max_length = max(max_length, i as isize - hash_map[&count]);\n        } else {\n            hash_map.insert(count, i as isize);\n        }\n    }\n    max_length\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmp383_x1p9.rs:5:24\n  |\n5 |     let mut hash_map = HashMap::new();\n  |                        ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp383_x1p9.rs:14:26\n   |\n14 |             max_length = max(max_length, i as isize - hash_map[&count]);\n   |                          ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0425, E0433.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut curr_diff = 0;\n    for c in string.chars() {\n        if c == '0' {\n            curr_diff += 1;\n        } else {\n            curr_diff -= 1;\n        }\n        if curr_diff < 0 {\n            curr_diff = 0;\n        }\n        max_diff = max(max_diff, curr_diff);\n    }\n    max_diff\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp6lff7zjw.rs:14:20\n   |\n14 |         max_diff = max(max_diff, curr_diff);\n   |                    ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_length = 0;\n    let mut count = 0;\n    let mut hash_map: HashMap<isize, isize> = HashMap::new();\n    hash_map.insert(0, -1);\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count += 1;\n        } else {\n            count -= 1;\n        }\n        if hash_map.contains_key(&count) {\n            max_length = max(max_length, i as isize - hash_map.get(&count).unwrap());\n        } else {\n            hash_map.insert(count, i as isize);\n        }\n    }\n    max_length\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122963,
      "stdout": "",
      "stderr": "error[E0412]: cannot find type `HashMap` in this scope\n --> /tmp/tmp_c7lyj3o.rs:5:23\n  |\n5 |     let mut hash_map: HashMap<isize, isize> = HashMap::new();\n  |                       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmp_c7lyj3o.rs:5:47\n  |\n5 |     let mut hash_map: HashMap<isize, isize> = HashMap::new();\n  |                                               ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp_c7lyj3o.rs:14:26\n   |\n14 |             max_length = max(max_length, i as isize - hash_map.get(&count).unwrap());\n   |                          ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0412, E0425, E0433.\nFor more information about an error, try `rustc --explain E0412`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_zero = 0;\n    let mut count_one = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        if count_zero == count_one {\n            max_diff = std::cmp::max(max_diff, count_zero + count_one);\n        }\n    }\n    count_zero = 0;\n    count_one = 0;\n    for c in string.chars().rev() {\n        if c == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        if count_zero == count_one {\n            max_diff = std::cmp::max(max_diff, count_zero + count_one);\n        }\n    }\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmpltji4nrc.rs:33:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_length = 0;\n    let mut count = 0;\n    let mut hash_map = HashMap::new();\n    hash_map.insert(0, -1);\n\n    for (i, ch) in string.chars().enumerate() {\n        if ch == '1' {\n            count += 1;\n        } else {\n            count -= 1;\n        }\n\n        if hash_map.contains_key(&count) {\n            max_length = max(max_length, i as isize - hash_map[&count]);\n        } else {\n            hash_map.insert(count, i as isize);\n        }\n    }\n\n    max_length\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122963,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmp3dk4tt6q.rs:5:24\n  |\n5 |     let mut hash_map = HashMap::new();\n  |                        ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp3dk4tt6q.rs:16:26\n   |\n16 |             max_length = max(max_length, i as isize - hash_map[&count]);\n   |                          ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0425, E0433.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_length: isize = 0;\n    let mut count: isize = 0;\n    let mut hash_map: HashMap<isize, isize> = HashMap::new();\n    hash_map.insert(0, -1);\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count += 1;\n        } else {\n            count -= 1;\n        }\n        if hash_map.contains_key(&count) {\n            max_length = max_length.max(i as isize - hash_map.get(&count).unwrap());\n        } else {\n            hash_map.insert(count, i as isize);\n        }\n    }\n    max_length\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122963,
      "stdout": "",
      "stderr": "error[E0412]: cannot find type `HashMap` in this scope\n --> /tmp/tmp_69i27mo.rs:5:23\n  |\n5 |     let mut hash_map: HashMap<isize, isize> = HashMap::new();\n  |                       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmp_69i27mo.rs:5:47\n  |\n5 |     let mut hash_map: HashMap<isize, isize> = HashMap::new();\n  |                                               ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0412, E0433.\nFor more information about an error, try `rustc --explain E0412`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_len = 0;\n    let mut count = 0;\n    let mut hash = HashMap::new();\n    hash.insert(0, -1);\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count += 1;\n        } else {\n            count -= 1;\n        }\n        if hash.contains_key(&count) {\n            max_len = max(max_len, i as isize - hash[&count]);\n        } else {\n            hash.insert(count, i as isize);\n        }\n    }\n    max_len\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmpxd60gywt.rs:5:20\n  |\n5 |     let mut hash = HashMap::new();\n  |                    ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpxd60gywt.rs:14:23\n   |\n14 |             max_len = max(max_len, i as isize - hash[&count]);\n   |                       ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0425, E0433.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut diff = 0;\n    for c in string.chars() {\n        if c == '1' {\n            diff += 1;\n        } else {\n            diff -= 1;\n        }\n        if diff < 0 {\n            diff = 0;\n        }\n        if diff > max_diff {\n            max_diff = diff;\n        }\n    }\n    max_diff\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122963,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `6`', /tmp/tmpldd55dpd.rs:23:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_len = 0;\n    let mut count = 0;\n    let mut hash = HashMap::new();\n    hash.insert(0, -1);\n\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count += 1;\n        } else {\n            count -= 1;\n        }\n\n        if hash.contains_key(&count) {\n            max_len = max(max_len, i as isize - hash[&count]);\n        } else {\n            hash.insert(count, i as isize);\n        }\n    }\n\n    max_len\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmpm09jsx36.rs:5:20\n  |\n5 |     let mut hash = HashMap::new();\n  |                    ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpm09jsx36.rs:16:23\n   |\n16 |             max_len = max(max_len, i as isize - hash[&count]);\n   |                       ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0425, E0433.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_zero = 0;\n    let mut count_one = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        let diff = (count_zero - count_one).abs();\n        if diff > max_diff {\n            max_diff = diff;\n        }\n    }\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1665509993,
      "stdout": "",
      "stderr": "error[E0689]: can't call method `abs` on ambiguous numeric type `{integer}`\n  --> /tmp/tmpfkvbskto.rs:12:45\n   |\n12 |         let diff = (count_zero - count_one).abs();\n   |                                             ^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0689`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_len = 0;\n    let mut count = 0;\n    let mut map: HashMap<isize, isize> = HashMap::new();\n\n    map.insert(0, -1);\n\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count += 1;\n        } else {\n            count -= 1;\n        }\n\n        if map.contains_key(&count) {\n            max_len = max(max_len, i as isize - map.get(&count).unwrap());\n        } else {\n            map.insert(count, i as isize);\n        }\n    }\n\n    max_len\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122963,
      "stdout": "",
      "stderr": "error[E0412]: cannot find type `HashMap` in this scope\n --> /tmp/tmp_n0cl4fa.rs:5:18\n  |\n5 |     let mut map: HashMap<isize, isize> = HashMap::new();\n  |                  ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmp_n0cl4fa.rs:5:42\n  |\n5 |     let mut map: HashMap<isize, isize> = HashMap::new();\n  |                                          ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp_n0cl4fa.rs:17:23\n   |\n17 |             max_len = max(max_len, i as isize - map.get(&count).unwrap());\n   |                       ^^^\n   |\nhelp: a local variable with a similar name exists\n   |\n17 |             max_len = map(max_len, i as isize - map.get(&count).unwrap());\n   |                       ~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0412, E0425, E0433.\nFor more information about an error, try `rustc --explain E0412`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_zero = 0;\n    let mut count_one = 0;\n\n    for c in string.chars() {\n        if c == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n\n        let diff = (count_zero - count_one).abs();\n        if diff > max_diff {\n            max_diff = diff;\n        }\n    }\n\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122963,
      "stdout": "",
      "stderr": "error[E0689]: can't call method `abs` on ambiguous numeric type `{integer}`\n  --> /tmp/tmptftj_cgx.rs:14:45\n   |\n14 |         let diff = (count_zero - count_one).abs();\n   |                                             ^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0689`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_zero = 0;\n    let mut count_one = 0;\n    for i in 0..string.len() {\n        if string.chars().nth(i).unwrap() == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        if count_zero == count_one {\n            max_diff = std::cmp::max(max_diff, count_zero * 2);\n        }\n    }\n    count_zero = 0;\n    count_one = 0;\n    for i in (0..string.len()).rev() {\n        if string.chars().nth(i).unwrap() == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        if count_zero == count_one {\n            max_diff = std::cmp::max(max_diff, count_zero * 2);\n        }\n    }\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122963,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmpg608lo0p.rs:33:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_0 = 0;\n    let mut count_1 = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n        max_diff = max_diff.max(count_1 - count_0);\n        if count_0 == count_1 {\n            count_0 = 0;\n            count_1 = 0;\n        }\n    }\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122963,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `6`', /tmp/tmpyywjpbu1.rs:23:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_length = 0;\n    let mut count = 0;\n    let mut hash = HashMap::new();\n    hash.insert(0, -1);\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count -= 1;\n        } else {\n            count += 1;\n        }\n        if hash.contains_key(&count) {\n            max_length = max(max_length, i as isize - hash[&count]);\n        } else {\n            hash.insert(count, i as isize);\n        }\n    }\n    max_length\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122963,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmpufi7gj6c.rs:5:20\n  |\n5 |     let mut hash = HashMap::new();\n  |                    ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpufi7gj6c.rs:14:26\n   |\n14 |             max_length = max(max_length, i as isize - hash[&count]);\n   |                          ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0425, E0433.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_0 = 0;\n    let mut count_1 = 0;\n    for i in 0..string.len() {\n        if string.chars().nth(i).unwrap() == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n        if count_0 == count_1 {\n            max_diff = std::cmp::max(max_diff, count_0 + count_1);\n        }\n    }\n    count_0 = 0;\n    count_1 = 0;\n    for i in (0..string.len()).rev() {\n        if string.chars().nth(i).unwrap() == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n        if count_0 == count_1 {\n            max_diff = std::cmp::max(max_diff, count_0 + count_1);\n        }\n    }\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmpfjqdxy94.rs:33:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_zero = 0;\n    let mut count_one = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        let diff = (count_zero - count_one).abs();\n        if diff > max_diff {\n            max_diff = diff;\n        }\n    }\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1665509993,
      "stdout": "",
      "stderr": "error[E0689]: can't call method `abs` on ambiguous numeric type `{integer}`\n  --> /tmp/tmpfkvbskto.rs:12:45\n   |\n12 |         let diff = (count_zero - count_one).abs();\n   |                                             ^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0689`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_0 = 0;\n    let mut count_1 = 0;\n\n    for c in string.chars() {\n        if c == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n\n        let diff = (count_0 - count_1).abs();\n        if diff > max_diff {\n            max_diff = diff;\n        }\n    }\n\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122963,
      "stdout": "",
      "stderr": "error[E0689]: can't call method `abs` on ambiguous numeric type `{integer}`\n  --> /tmp/tmpk6unjh3h.rs:14:40\n   |\n14 |         let diff = (count_0 - count_1).abs();\n   |                                        ^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0689`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut diff = 0;\n    for c in string.chars() {\n        if c == '0' {\n            diff -= 1;\n        } else {\n            diff += 1;\n        }\n        if diff < 0 {\n            diff = 0;\n        }\n        max_diff = max_diff.max(diff);\n    }\n    max_diff\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `6`', /tmp/tmpwe57vudd.rs:21:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_len = 0;\n    let mut count = 0;\n    let mut hash = HashMap::new();\n    hash.insert(0, -1);\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count -= 1;\n        } else {\n            count += 1;\n        }\n\n        if hash.contains_key(&count) {\n            max_len = max(max_len, i as isize - hash[&count]);\n        } else {\n            hash.insert(count, i as isize);\n        }\n    }\n    max_len\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122963,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmp57kcsi9r.rs:5:20\n  |\n5 |     let mut hash = HashMap::new();\n  |                    ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp57kcsi9r.rs:15:23\n   |\n15 |             max_len = max(max_len, i as isize - hash[&count]);\n   |                       ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0425, E0433.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_0 = 0;\n    let mut count_1 = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n        max_diff = std::cmp::max(max_diff, count_0 - count_1);\n    }\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122961,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmpw1y4zthm.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_0 = 0;\n    let mut count_1 = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n        max_diff = max_diff.max(count_0 - count_1);\n    }\n    max_diff\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1665509993,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmprvuhatg7.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_len = 0;\n    let mut count = 0;\n    let mut hash = HashMap::new();\n    hash.insert(0, -1);\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count += 1;\n        } else {\n            count -= 1;\n        }\n        if hash.contains_key(&count) {\n            max_len = max(max_len, i as isize - hash.get(&count).unwrap());\n        } else {\n            hash.insert(count, i as isize);\n        }\n    }\n    max_len\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmpdt0dexrj.rs:5:20\n  |\n5 |     let mut hash = HashMap::new();\n  |                    ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpdt0dexrj.rs:14:23\n   |\n14 |             max_len = max(max_len, i as isize - hash.get(&count).unwrap());\n   |                       ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0425, E0433.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut zeros = 0;\n    let mut ones = 0;\n    let mut max_diff = 0;\n    for c in string.chars() {\n        if c == '0' {\n            zeros += 1;\n        } else {\n            ones += 1;\n        }\n        if zeros == ones {\n            max_diff = std::cmp::max(max_diff, zeros * 2);\n        }\n    }\n    zeros = 0;\n    ones = 0;\n    for c in string.chars().rev() {\n        if c == '0' {\n            zeros += 1;\n        } else {\n            ones += 1;\n        }\n        if zeros == ones {\n            max_diff = std::cmp::max(max_diff, zeros * 2);\n        }\n    }\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122963,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmp0_rk6zt0.rs:33:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_of_0 = 0;\n    let mut count_of_1 = 0;\n\n    for c in string.chars() {\n        if c == '0' {\n            count_of_0 += 1;\n        } else {\n            count_of_1 += 1;\n        }\n\n        if count_of_0 == count_of_1 {\n            max_diff = std::cmp::max(max_diff, count_of_0 + count_of_1);\n        }\n    }\n\n    count_of_0 = 0;\n    count_of_1 = 0;\n\n    for c in string.chars().rev() {\n        if c == '0' {\n            count_of_0 += 1;\n        } else {\n            count_of_1 += 1;\n        }\n\n        if count_of_0 == count_of_1 {\n            max_diff = std::cmp::max(max_diff, count_of_0 + count_of_1);\n        }\n    }\n\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122963,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmpdo06pcr5.rs:39:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_length = 0;\n    let mut count = 0;\n    let mut map: HashMap<isize, isize> = HashMap::new();\n    map.insert(0, -1);\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count -= 1;\n        } else {\n            count += 1;\n        }\n        if map.contains_key(&count) {\n            max_length = max(max_length, i as isize - map.get(&count).unwrap());\n        } else {\n            map.insert(count, i as isize);\n        }\n    }\n    max_length\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122963,
      "stdout": "",
      "stderr": "error[E0412]: cannot find type `HashMap` in this scope\n --> /tmp/tmp3r72weys.rs:5:18\n  |\n5 |     let mut map: HashMap<isize, isize> = HashMap::new();\n  |                  ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmp3r72weys.rs:5:42\n  |\n5 |     let mut map: HashMap<isize, isize> = HashMap::new();\n  |                                          ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp3r72weys.rs:14:26\n   |\n14 |             max_length = max(max_length, i as isize - map.get(&count).unwrap());\n   |                          ^^^\n   |\nhelp: a local variable with a similar name exists\n   |\n14 |             max_length = map(max_length, i as isize - map.get(&count).unwrap());\n   |                          ~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0412, E0425, E0433.\nFor more information about an error, try `rustc --explain E0412`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count = 0;\n    for ch in string.chars() {\n        if ch == '0' {\n            count += 1;\n        } else {\n            count -= 1;\n        }\n        if count < 0 {\n            count = 0;\n        }\n        max_diff = std::cmp::max(max_diff, count);\n    }\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122963,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_len = 0;\n    let mut count = 0;\n    let mut map = HashMap::new();\n    map.insert(0, -1);\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count += 1;\n        } else {\n            count -= 1;\n        }\n        if map.contains_key(&count) {\n            max_len = max(max_len, i as isize - map[&count]);\n        } else {\n            map.insert(count, i as isize);\n        }\n    }\n    max_len\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122961,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmpcctdyw9r.rs:5:19\n  |\n5 |     let mut map = HashMap::new();\n  |                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpcctdyw9r.rs:14:23\n   |\n14 |             max_len = max(max_len, i as isize - map[&count]);\n   |                       ^^^\n   |\nhelp: a local variable with a similar name exists\n   |\n14 |             max_len = map(max_len, i as isize - map[&count]);\n   |                       ~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0425, E0433.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut zero_count = 0;\n    let mut one_count = 0;\n    for c in string.chars() {\n        if c == '0' {\n            zero_count += 1;\n        } else {\n            one_count += 1;\n        }\n        max_diff = std::cmp::max(max_diff, zero_count - one_count);\n        if max_diff < 0 {\n            zero_count = 0;\n            one_count = 0;\n        }\n    }\n    max_diff\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122963,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmpj1vjgybs.rs:23:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_len = 0;\n    let mut count = 0;\n    let mut hash = HashMap::new();\n    hash.insert(0, -1);\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count += 1;\n        } else {\n            count -= 1;\n        }\n        if hash.contains_key(&count) {\n            max_len = max(max_len, i as isize - hash[&count]);\n        } else {\n            hash.insert(count, i as isize);\n        }\n    }\n    max_len\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmpxd60gywt.rs:5:20\n  |\n5 |     let mut hash = HashMap::new();\n  |                    ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpxd60gywt.rs:14:23\n   |\n14 |             max_len = max(max_len, i as isize - hash[&count]);\n   |                       ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0425, E0433.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut diff = 0;\n    for c in string.chars() {\n        if c == '0' {\n            diff += 1;\n        } else {\n            diff -= 1;\n        }\n        if diff < 0 {\n            diff = 0;\n        }\n        if diff > max_diff {\n            max_diff = diff;\n        }\n    }\n    max_diff\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1665509993,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_zero = 0;\n    let mut count_one = 0;\n\n    for c in string.chars() {\n        if c == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n\n        if count_zero == count_one {\n            max_diff = std::cmp::max(max_diff, count_zero + count_one);\n        }\n    }\n\n    count_zero = 0;\n    count_one = 0;\n\n    for c in string.chars().rev() {\n        if c == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n\n        if count_zero == count_one {\n            max_diff = std::cmp::max(max_diff, count_zero + count_one);\n        }\n    }\n\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1665509993,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmpkk4uj72w.rs:39:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_len = 0;\n    let mut count = 0;\n    let mut map = HashMap::new();\n    map.insert(0, -1);\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count += 1;\n        } else {\n            count -= 1;\n        }\n        if map.contains_key(&count) {\n            max_len = max(max_len, i as isize - map[&count]);\n        } else {\n            map.insert(count, i as isize);\n        }\n    }\n    max_len\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122961,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmpcctdyw9r.rs:5:19\n  |\n5 |     let mut map = HashMap::new();\n  |                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpcctdyw9r.rs:14:23\n   |\n14 |             max_len = max(max_len, i as isize - map[&count]);\n   |                       ^^^\n   |\nhelp: a local variable with a similar name exists\n   |\n14 |             max_len = map(max_len, i as isize - map[&count]);\n   |                       ~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0425, E0433.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_zero = 0;\n    let mut count_one = 0;\n    for ch in string.chars() {\n        if ch == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        max_diff = max_diff.max(count_zero - count_one);\n    }\n    max_diff\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122963,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmpac62re7m.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_0 = 0;\n    let mut count_1 = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n        max_diff = max_diff.max(count_1 - count_0);\n    }\n    max_diff\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1665509993,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `6`', /tmp/tmpg7f_dire.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut diff = 0;\n    for c in string.chars() {\n        if c == '0' {\n            diff += 1;\n        } else {\n            diff -= 1;\n        }\n        if diff < 0 {\n            diff = 0;\n        }\n        if diff > max_diff {\n            max_diff = diff;\n        }\n    }\n    max_diff\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1665509993,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_length = 0;\n    let mut count = 0;\n    let mut hash_map = HashMap::new();\n    hash_map.insert(0, -1);\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count += 1;\n        } else {\n            count -= 1;\n        }\n        if let Some(j) = hash_map.get(&count) {\n            max_length = max(max_length, i as isize - j);\n        } else {\n            hash_map.insert(count, i as isize);\n        }\n    }\n    max_length\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122963,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmpvezwdy3h.rs:5:24\n  |\n5 |     let mut hash_map = HashMap::new();\n  |                        ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpvezwdy3h.rs:14:26\n   |\n14 |             max_length = max(max_length, i as isize - j);\n   |                          ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0425, E0433.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff: isize = 0;\n    let mut count_zero: isize = 0;\n    let mut count_one: isize = 0;\n    let mut diff: isize = 0;\n    let mut i: usize = 0;\n    let mut j: usize = 0;\n    let mut n: usize = string.len();\n\n    while i < n {\n        if string.chars().nth(i).unwrap() == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        diff = count_zero - count_one;\n        if diff < 0 {\n            diff = -diff;\n        }\n        if diff > max_diff {\n            max_diff = diff;\n        }\n        i += 1;\n    }\n    max_diff\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122963,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmp4hs96148.rs:31:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_len = 0;\n    let mut count = 0;\n    let mut map = HashMap::new();\n    map.insert(0, -1);\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count -= 1;\n        } else {\n            count += 1;\n        }\n        if map.contains_key(&count) {\n            max_len = max(max_len, i as isize - map[&count]);\n        } else {\n            map.insert(count, i as isize);\n        }\n    }\n    max_len\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1665509993,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmp41800ad1.rs:5:19\n  |\n5 |     let mut map = HashMap::new();\n  |                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp41800ad1.rs:14:23\n   |\n14 |             max_len = max(max_len, i as isize - map[&count]);\n   |                       ^^^\n   |\nhelp: a local variable with a similar name exists\n   |\n14 |             max_len = map(max_len, i as isize - map[&count]);\n   |                       ~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0425, E0433.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_0 = 0;\n    let mut count_1 = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n        let diff = (count_0 - count_1).abs();\n        if diff > max_diff {\n            max_diff = diff;\n        }\n    }\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1665509993,
      "stdout": "",
      "stderr": "error[E0689]: can't call method `abs` on ambiguous numeric type `{integer}`\n  --> /tmp/tmp2ewv7urz.rs:12:40\n   |\n12 |         let diff = (count_0 - count_1).abs();\n   |                                        ^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0689`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_length = 0;\n    let mut count = 0;\n    let mut hash_map = HashMap::new();\n    hash_map.insert(0, -1);\n\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count -= 1;\n        } else {\n            count += 1;\n        }\n\n        if let Some(j) = hash_map.get(&count) {\n            max_length = max(max_length, i as isize - j);\n        } else {\n            hash_map.insert(count, i as isize);\n        }\n    }\n\n    max_length\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122963,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmp_nfivngt.rs:5:24\n  |\n5 |     let mut hash_map = HashMap::new();\n  |                        ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp_nfivngt.rs:16:26\n   |\n16 |             max_length = max(max_length, i as isize - j);\n   |                          ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0425, E0433.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_zero = 0;\n    let mut count_one = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        max_diff = max_diff.max(count_one - count_zero);\n        if count_one < count_zero {\n            count_one = 0;\n            count_zero = 0;\n        }\n    }\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122963,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `6`', /tmp/tmp8p20h5gu.rs:23:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_len = 0;\n    let mut count = 0;\n    let mut map = HashMap::new();\n    map.insert(0, -1);\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count -= 1;\n        } else {\n            count += 1;\n        }\n        if map.contains_key(&count) {\n            max_len = max(max_len, i as isize - map[&count]);\n        } else {\n            map.insert(count, i as isize);\n        }\n    }\n    max_len\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1665509993,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmp41800ad1.rs:5:19\n  |\n5 |     let mut map = HashMap::new();\n  |                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp41800ad1.rs:14:23\n   |\n14 |             max_len = max(max_len, i as isize - map[&count]);\n   |                       ^^^\n   |\nhelp: a local variable with a similar name exists\n   |\n14 |             max_len = map(max_len, i as isize - map[&count]);\n   |                       ~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0425, E0433.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_length = 0;\n    let mut count = 0;\n    let mut hash = HashMap::new();\n    hash.insert(0, -1);\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count -= 1;\n        } else {\n            count += 1;\n        }\n        if hash.contains_key(&count) {\n            max_length = max(max_length, i as isize - hash[&count]);\n        } else {\n            hash.insert(count, i as isize);\n        }\n    }\n    max_length\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122963,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmpufi7gj6c.rs:5:20\n  |\n5 |     let mut hash = HashMap::new();\n  |                    ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpufi7gj6c.rs:14:26\n   |\n14 |             max_length = max(max_length, i as isize - hash[&count]);\n   |                          ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0425, E0433.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_0 = 0;\n    let mut count_1 = 0;\n    let mut i = 0;\n    let mut j = 0;\n    while j < string.len() {\n        if string.chars().nth(j).unwrap() == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n        let diff = count_0 - count_1;\n        if diff < 0 {\n            i = j + 1;\n            count_0 = 0;\n            count_1 = 0;\n        } else {\n            max_diff = max(max_diff, diff);\n        }\n        j += 1;\n    }\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122963,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpy772phyo.rs:20:24\n   |\n20 |             max_diff = max(max_diff, diff);\n   |                        ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_0 = 0;\n    let mut count_1 = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n        max_diff = max_diff.max(count_1 - count_0);\n        if count_0 == count_1 {\n            count_0 = 0;\n            count_1 = 0;\n        }\n    }\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122963,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `6`', /tmp/tmpyywjpbu1.rs:23:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut diff = 0;\n    let mut count_0 = 0;\n    let mut count_1 = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n        diff = count_0 - count_1;\n        if diff > max_diff {\n            max_diff = diff;\n        }\n    }\n    max_diff\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122963,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmpn5jkpesb.rs:23:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_zeros = 0;\n    let mut count_ones = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_zeros += 1;\n        } else {\n            count_ones += 1;\n        }\n        let diff = (count_zeros - count_ones).abs();\n        if diff > max_diff {\n            max_diff = diff;\n        }\n    }\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122963,
      "stdout": "",
      "stderr": "error[E0689]: can't call method `abs` on ambiguous numeric type `{integer}`\n  --> /tmp/tmpw667ezfd.rs:12:47\n   |\n12 |         let diff = (count_zeros - count_ones).abs();\n   |                                               ^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0689`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut diff = 0;\n    for c in string.chars() {\n        if c == '0' {\n            diff += 1;\n        } else {\n            diff -= 1;\n        }\n        if diff < 0 {\n            diff = 0;\n        }\n        if diff > max_diff {\n            max_diff = diff;\n        }\n    }\n    max_diff\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1665509993,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_zero = 0;\n    let mut count_one = 0;\n\n    for c in string.chars() {\n        if c == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n\n        if count_zero == count_one {\n            max_diff = std::cmp::max(max_diff, count_zero + count_one);\n        }\n    }\n\n    count_zero = 0;\n    count_one = 0;\n\n    for c in string.chars().rev() {\n        if c == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n\n        if count_zero == count_one {\n            max_diff = std::cmp::max(max_diff, count_zero + count_one);\n        }\n    }\n\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1665509993,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmpkk4uj72w.rs:39:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff: isize = 0;\n    let mut count_0: isize = 0;\n    let mut count_1: isize = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n        max_diff = max_diff.max(count_0 - count_1);\n    }\n    max_diff\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122963,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmp8ly9z6jk.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut count = 0;\n    let mut max = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count += 1;\n        } else {\n            count -= 1;\n        }\n        if count < 0 {\n            count = 0;\n        }\n        max = max.max(count);\n    }\n    max as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122963,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_len = 0;\n    let mut count = 0;\n    let mut map = HashMap::new();\n    map.insert(0, -1);\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count -= 1;\n        } else {\n            count += 1;\n        }\n        if map.contains_key(&count) {\n            max_len = max(max_len, i as isize - map[&count]);\n        } else {\n            map.insert(count, i as isize);\n        }\n    }\n    max_len\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1665509993,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmp41800ad1.rs:5:19\n  |\n5 |     let mut map = HashMap::new();\n  |                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp41800ad1.rs:14:23\n   |\n14 |             max_len = max(max_len, i as isize - map[&count]);\n   |                       ^^^\n   |\nhelp: a local variable with a similar name exists\n   |\n14 |             max_len = map(max_len, i as isize - map[&count]);\n   |                       ~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0425, E0433.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut diff = 0;\n    for c in string.chars() {\n        if c == '0' {\n            diff += 1;\n        } else {\n            diff -= 1;\n        }\n        if diff < 0 {\n            diff = 0;\n        }\n        if diff > max_diff {\n            max_diff = diff;\n        }\n    }\n    max_diff\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1665509993,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_length: isize = 0;\n    let mut count: isize = 0;\n    let mut hash_map: HashMap<isize, isize> = HashMap::new();\n    hash_map.insert(0, -1);\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count += 1;\n        } else {\n            count -= 1;\n        }\n        if hash_map.contains_key(&count) {\n            max_length = max(max_length, i as isize - hash_map[&count]);\n        } else {\n            hash_map.insert(count, i as isize);\n        }\n    }\n    max_length\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122963,
      "stdout": "",
      "stderr": "error[E0412]: cannot find type `HashMap` in this scope\n --> /tmp/tmp4skyxf6n.rs:5:23\n  |\n5 |     let mut hash_map: HashMap<isize, isize> = HashMap::new();\n  |                       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmp4skyxf6n.rs:5:47\n  |\n5 |     let mut hash_map: HashMap<isize, isize> = HashMap::new();\n  |                                               ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp4skyxf6n.rs:14:26\n   |\n14 |             max_length = max(max_length, i as isize - hash_map[&count]);\n   |                          ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0412, E0425, E0433.\nFor more information about an error, try `rustc --explain E0412`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_length = 0;\n    let mut count = 0;\n    let mut hash_map: HashMap<isize, isize> = HashMap::new();\n    hash_map.insert(0, -1);\n\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count -= 1;\n        } else {\n            count += 1;\n        }\n\n        if hash_map.contains_key(&count) {\n            max_length = max(max_length, i as isize - hash_map.get(&count).unwrap());\n        } else {\n            hash_map.insert(count, i as isize);\n        }\n    }\n\n    max_length\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "error[E0412]: cannot find type `HashMap` in this scope\n --> /tmp/tmpbcrzmmb4.rs:5:23\n  |\n5 |     let mut hash_map: HashMap<isize, isize> = HashMap::new();\n  |                       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmpbcrzmmb4.rs:5:47\n  |\n5 |     let mut hash_map: HashMap<isize, isize> = HashMap::new();\n  |                                               ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpbcrzmmb4.rs:16:26\n   |\n16 |             max_length = max(max_length, i as isize - hash_map.get(&count).unwrap());\n   |                          ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0412, E0425, E0433.\nFor more information about an error, try `rustc --explain E0412`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_0 = 0;\n    let mut count_1 = 0;\n\n    for i in 0..string.len() {\n        if string.chars().nth(i).unwrap() == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n\n        if count_0 == count_1 {\n            max_diff = std::cmp::max(max_diff, count_0 + count_1);\n        }\n    }\n\n    count_0 = 0;\n    count_1 = 0;\n\n    for i in (0..string.len()).rev() {\n        if string.chars().nth(i).unwrap() == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n\n        if count_0 == count_1 {\n            max_diff = std::cmp::max(max_diff, count_0 + count_1);\n        }\n    }\n\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122963,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmp22gs73yv.rs:39:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_len = 0;\n    let mut count = 0;\n    let mut hash = HashMap::new();\n    hash.insert(0, -1);\n    for (i, c) in string.chars().enumerate() {\n        count += if c == '0' { -1 } else { 1 };\n        if hash.contains_key(&count) {\n            max_len = std::cmp::max(max_len, i as isize - hash[&count]);\n        } else {\n            hash.insert(count, i as isize);\n        }\n    }\n    max_len\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122963,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmpv4eqdw9j.rs:5:20\n  |\n5 |     let mut hash = HashMap::new();\n  |                    ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_0 = 0;\n    let mut count_1 = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n        max_diff = std::cmp::max(max_diff, count_0 - count_1);\n    }\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122961,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmpw1y4zthm.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_len = 0;\n    let mut count = 0;\n    let mut map: HashMap<isize, isize> = HashMap::new();\n    map.insert(0, -1);\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count -= 1;\n        } else {\n            count += 1;\n        }\n        if map.contains_key(&count) {\n            max_len = max(max_len, i as isize - map[&count]);\n        } else {\n            map.insert(count, i as isize);\n        }\n    }\n    max_len\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122963,
      "stdout": "",
      "stderr": "error[E0412]: cannot find type `HashMap` in this scope\n --> /tmp/tmpv0viyi5t.rs:5:18\n  |\n5 |     let mut map: HashMap<isize, isize> = HashMap::new();\n  |                  ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmpv0viyi5t.rs:5:42\n  |\n5 |     let mut map: HashMap<isize, isize> = HashMap::new();\n  |                                          ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpv0viyi5t.rs:14:23\n   |\n14 |             max_len = max(max_len, i as isize - map[&count]);\n   |                       ^^^\n   |\nhelp: a local variable with a similar name exists\n   |\n14 |             max_len = map(max_len, i as isize - map[&count]);\n   |                       ~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0412, E0425, E0433.\nFor more information about an error, try `rustc --explain E0412`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_len = 0;\n    let mut count = 0;\n    let mut hash = HashMap::new();\n    hash.insert(0, -1);\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count -= 1;\n        } else {\n            count += 1;\n        }\n        if hash.contains_key(&count) {\n            max_len = max(max_len, i as isize - hash[&count]);\n        } else {\n            hash.insert(count, i as isize);\n        }\n    }\n    max_len\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmp6xe1jxec.rs:5:20\n  |\n5 |     let mut hash = HashMap::new();\n  |                    ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp6xe1jxec.rs:14:23\n   |\n14 |             max_len = max(max_len, i as isize - hash[&count]);\n   |                       ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0425, E0433.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_zero = 0;\n    let mut count_one = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        max_diff = max(max_diff, count_zero - count_one);\n    }\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1665509993,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpuvsv853l.rs:12:20\n   |\n12 |         max_diff = max(max_diff, count_zero - count_one);\n   |                    ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_zero = 0;\n    let mut count_one = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        max_diff = max_diff.max(count_zero - count_one);\n    }\n    max_diff\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122961,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmpipc4kirz.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count = 0;\n    for ch in string.chars() {\n        if ch == '0' {\n            count += 1;\n        } else {\n            count -= 1;\n        }\n        if count < 0 {\n            count = 0;\n        }\n        max_diff = max_diff.max(count);\n    }\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122963,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_1 = 0;\n    let mut count_0 = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n        if count_1 == count_0 {\n            max_diff = std::cmp::max(max_diff, count_1 + count_0);\n        }\n    }\n    count_1 = 0;\n    count_0 = 0;\n    for c in string.chars().rev() {\n        if c == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n        if count_1 == count_0 {\n            max_diff = std::cmp::max(max_diff, count_1 + count_0);\n        }\n    }\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122963,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmph28lo92d.rs:33:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_zero = 0;\n    let mut count_one = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        max_diff = max(max_diff, count_zero - count_one);\n    }\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1665509993,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpuvsv853l.rs:12:20\n   |\n12 |         max_diff = max(max_diff, count_zero - count_one);\n   |                    ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_len = 0;\n    let mut count_0 = 0;\n    let mut count_1 = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n        if count_0 == count_1 {\n            max_len = std::cmp::max(max_len, count_0 + count_1);\n        }\n    }\n    count_0 = 0;\n    count_1 = 0;\n    for c in string.chars().rev() {\n        if c == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n        if count_0 == count_1 {\n            max_len = std::cmp::max(max_len, count_0 + count_1);\n        }\n    }\n    max_len as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122963,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmplcnpanjc.rs:33:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_zero = 0;\n    let mut count_one = 0;\n    for c in string.chars() {\n        match c {\n            '0' => count_zero += 1,\n            '1' => count_one += 1,\n            _ => panic!(\"Invalid character\"),\n        }\n        max_diff = max_diff.max(count_zero - count_one);\n        count_one = count_one.max(count_zero);\n    }\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122963,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `6`', /tmp/tmptgxrwcg5.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_0 = 0;\n    let mut count_1 = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n        if count_0 == count_1 {\n            max_diff = std::cmp::max(max_diff, count_0 + count_1);\n        }\n    }\n    count_0 = 0;\n    count_1 = 0;\n    for c in string.chars().rev() {\n        if c == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n        if count_0 == count_1 {\n            max_diff = std::cmp::max(max_diff, count_0 + count_1);\n        }\n    }\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmpm4xufoi0.rs:33:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_length = 0;\n    let mut count = 0;\n    let mut map = HashMap::new();\n    map.insert(0, -1);\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count -= 1;\n        } else {\n            count += 1;\n        }\n        if map.contains_key(&count) {\n            max_length = max(max_length, i as isize - map[&count]);\n        } else {\n            map.insert(count, i as isize);\n        }\n    }\n    max_length\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122963,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmpjsxljewg.rs:5:19\n  |\n5 |     let mut map = HashMap::new();\n  |                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpjsxljewg.rs:14:26\n   |\n14 |             max_length = max(max_length, i as isize - map[&count]);\n   |                          ^^^\n   |\nhelp: a local variable with a similar name exists\n   |\n14 |             max_length = map(max_length, i as isize - map[&count]);\n   |                          ~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0425, E0433.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_len = 0;\n    let mut count = 0;\n    let mut hash = HashMap::new();\n    hash.insert(0, -1);\n\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count += 1;\n        } else {\n            count -= 1;\n        }\n\n        if hash.contains_key(&count) {\n            max_len = max(max_len, i as isize - hash.get(&count).unwrap());\n        } else {\n            hash.insert(count, i as isize);\n        }\n    }\n\n    max_len\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122963,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmplohb9vkb.rs:5:20\n  |\n5 |     let mut hash = HashMap::new();\n  |                    ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmplohb9vkb.rs:16:23\n   |\n16 |             max_len = max(max_len, i as isize - hash.get(&count).unwrap());\n   |                       ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0425, E0433.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut diff = 0;\n    let mut zero_count = 0;\n    let mut one_count = 0;\n\n    for c in string.chars() {\n        if c == '0' {\n            zero_count += 1;\n        } else {\n            one_count += 1;\n        }\n\n        diff = zero_count - one_count;\n\n        if diff < 0 {\n            diff = -diff;\n        }\n\n        if diff > max_diff {\n            max_diff = diff;\n        }\n    }\n\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122963,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmpwdqfcpbv.rs:31:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_length = 0;\n    let mut count = 0;\n    let mut map: HashMap<isize, isize> = HashMap::new();\n    map.insert(0, -1);\n\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count += 1;\n        } else {\n            count -= 1;\n        }\n\n        if map.contains_key(&count) {\n            max_length = max_length.max(i as isize - map.get(&count).unwrap());\n        } else {\n            map.insert(count, i as isize);\n        }\n    }\n\n    max_length\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122963,
      "stdout": "",
      "stderr": "error[E0412]: cannot find type `HashMap` in this scope\n --> /tmp/tmp21eq90iz.rs:5:18\n  |\n5 |     let mut map: HashMap<isize, isize> = HashMap::new();\n  |                  ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmp21eq90iz.rs:5:42\n  |\n5 |     let mut map: HashMap<isize, isize> = HashMap::new();\n  |                                          ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0412, E0433.\nFor more information about an error, try `rustc --explain E0412`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_0 = 0;\n    let mut count_1 = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n        max_diff = max_diff.max(count_0 - count_1);\n    }\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1665509993,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmpi9g6pter.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_0 = 0;\n    let mut count_1 = 0;\n    for ch in string.chars() {\n        if ch == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n        max_diff = max_diff.max(count_0 - count_1);\n    }\n    max_diff\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122963,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmpdu1bepfy.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_zero = 0;\n    let mut count_one = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        if count_zero == count_one {\n            max_diff = std::cmp::max(max_diff, count_zero + count_one);\n        }\n    }\n    count_zero = 0;\n    count_one = 0;\n    for c in string.chars().rev() {\n        if c == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        if count_zero == count_one {\n            max_diff = std::cmp::max(max_diff, count_zero + count_one);\n        }\n    }\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmpltji4nrc.rs:33:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_length = 0;\n    let mut count = 0;\n    let mut hash = HashMap::new();\n    hash.insert(0, -1);\n\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count += 1;\n        } else {\n            count -= 1;\n        }\n\n        if hash.contains_key(&count) {\n            max_length = std::cmp::max(max_length, i as isize - hash.get(&count).unwrap());\n        } else {\n            hash.insert(count, i as isize);\n        }\n    }\n\n    max_length\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122963,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmps7653e_l.rs:5:20\n  |\n5 |     let mut hash = HashMap::new();\n  |                    ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_len = 0;\n    let mut count = 0;\n    let mut hash = HashMap::new();\n    hash.insert(0, -1);\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count += 1;\n        } else {\n            count -= 1;\n        }\n        if hash.contains_key(&count) {\n            max_len = max(max_len, i as isize - hash[&count]);\n        } else {\n            hash.insert(count, i as isize);\n        }\n    }\n    max_len\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmpxd60gywt.rs:5:20\n  |\n5 |     let mut hash = HashMap::new();\n  |                    ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpxd60gywt.rs:14:23\n   |\n14 |             max_len = max(max_len, i as isize - hash[&count]);\n   |                       ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0425, E0433.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut curr_diff = 0;\n    for c in string.chars() {\n        if c == '0' {\n            curr_diff += 1;\n        } else {\n            curr_diff -= 1;\n        }\n        if curr_diff < 0 {\n            curr_diff = 0;\n        }\n        if curr_diff > max_diff {\n            max_diff = curr_diff;\n        }\n    }\n    max_diff\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122963,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_length = 0;\n    let mut count = 0;\n    let mut hash = HashMap::new();\n    hash.insert(0, -1);\n\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count -= 1;\n        } else {\n            count += 1;\n        }\n\n        if hash.contains_key(&count) {\n            max_length = max(max_length, i as isize - hash[&count]);\n        } else {\n            hash.insert(count, i as isize);\n        }\n    }\n\n    max_length\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122961,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmpaxoq5nnw.rs:5:20\n  |\n5 |     let mut hash = HashMap::new();\n  |                    ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpaxoq5nnw.rs:16:26\n   |\n16 |             max_length = max(max_length, i as isize - hash[&count]);\n   |                          ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0425, E0433.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_len = 0;\n    let mut count = 0;\n    let mut hash_map: HashMap<isize, isize> = HashMap::new();\n    hash_map.insert(0, -1);\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count -= 1;\n        } else {\n            count += 1;\n        }\n        if hash_map.contains_key(&count) {\n            max_len = max(max_len, i as isize - hash_map.get(&count).unwrap());\n        } else {\n            hash_map.insert(count, i as isize);\n        }\n    }\n    max_len\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122963,
      "stdout": "",
      "stderr": "error[E0412]: cannot find type `HashMap` in this scope\n --> /tmp/tmp0529cwkx.rs:5:23\n  |\n5 |     let mut hash_map: HashMap<isize, isize> = HashMap::new();\n  |                       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmp0529cwkx.rs:5:47\n  |\n5 |     let mut hash_map: HashMap<isize, isize> = HashMap::new();\n  |                                               ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp0529cwkx.rs:14:23\n   |\n14 |             max_len = max(max_len, i as isize - hash_map.get(&count).unwrap());\n   |                       ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0412, E0425, E0433.\nFor more information about an error, try `rustc --explain E0412`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_length = 0;\n    let mut count = 0;\n    let mut hash_map = HashMap::new();\n    hash_map.insert(0, -1);\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count -= 1;\n        } else {\n            count += 1;\n        }\n        if hash_map.contains_key(&count) {\n            max_length = max(max_length, i as isize - hash_map[&count]);\n        } else {\n            hash_map.insert(count, i as isize);\n        }\n    }\n    max_length\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmp383_x1p9.rs:5:24\n  |\n5 |     let mut hash_map = HashMap::new();\n  |                        ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp383_x1p9.rs:14:26\n   |\n14 |             max_length = max(max_length, i as isize - hash_map[&count]);\n   |                          ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0425, E0433.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_len = 0;\n    let mut count = 0;\n    let mut hash = HashMap::new();\n    hash.insert(0, -1);\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count += 1;\n        } else {\n            count -= 1;\n        }\n        if hash.contains_key(&count) {\n            max_len = max(max_len, i as isize - hash[&count]);\n        } else {\n            hash.insert(count, i as isize);\n        }\n    }\n    max_len\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmpxd60gywt.rs:5:20\n  |\n5 |     let mut hash = HashMap::new();\n  |                    ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpxd60gywt.rs:14:23\n   |\n14 |             max_len = max(max_len, i as isize - hash[&count]);\n   |                       ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0425, E0433.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_len = 0;\n    let mut count = 0;\n    let mut map: HashMap<isize, isize> = HashMap::new();\n    map.insert(0, -1);\n\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count -= 1;\n        } else {\n            count += 1;\n        }\n\n        if map.contains_key(&count) {\n            max_len = max(max_len, i as isize - map.get(&count).unwrap());\n        } else {\n            map.insert(count, i as isize);\n        }\n    }\n\n    max_len\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122963,
      "stdout": "",
      "stderr": "error[E0412]: cannot find type `HashMap` in this scope\n --> /tmp/tmp689qma0r.rs:5:18\n  |\n5 |     let mut map: HashMap<isize, isize> = HashMap::new();\n  |                  ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmp689qma0r.rs:5:42\n  |\n5 |     let mut map: HashMap<isize, isize> = HashMap::new();\n  |                                          ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp689qma0r.rs:16:23\n   |\n16 |             max_len = max(max_len, i as isize - map.get(&count).unwrap());\n   |                       ^^^\n   |\nhelp: a local variable with a similar name exists\n   |\n16 |             max_len = map(max_len, i as isize - map.get(&count).unwrap());\n   |                       ~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0412, E0425, E0433.\nFor more information about an error, try `rustc --explain E0412`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_0 = 0;\n    let mut count_1 = 0;\n    for i in 0..string.len() {\n        if string.chars().nth(i).unwrap() == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n        if count_0 == count_1 {\n            max_diff = std::cmp::max(max_diff, count_0 + count_1);\n        }\n    }\n    count_0 = 0;\n    count_1 = 0;\n    for i in (0..string.len()).rev() {\n        if string.chars().nth(i).unwrap() == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n        if count_0 == count_1 {\n            max_diff = std::cmp::max(max_diff, count_0 + count_1);\n        }\n    }\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmpfjqdxy94.rs:33:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_zero = 0;\n    let mut count_one = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        max_diff = max(max_diff, count_zero - count_one);\n    }\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1665509993,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpuvsv853l.rs:12:20\n   |\n12 |         max_diff = max(max_diff, count_zero - count_one);\n   |                    ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_zero = 0;\n    let mut count_one = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        max_diff = max_diff.max(count_one - count_zero);\n    }\n    max_diff\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122961,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `6`', /tmp/tmputychuad.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_length = 0;\n    let mut count = 0;\n    let mut hash = HashMap::new();\n    hash.insert(0, -1);\n\n    for (i, c) in string.chars().enumerate() {\n        if c == '1' {\n            count += 1;\n        } else {\n            count -= 1;\n        }\n\n        if hash.contains_key(&count) {\n            max_length = max(max_length, i as isize - hash[&count]);\n        } else {\n            hash.insert(count, i as isize);\n        }\n    }\n\n    max_length\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122963,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmpdskpt3js.rs:5:20\n  |\n5 |     let mut hash = HashMap::new();\n  |                    ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpdskpt3js.rs:16:26\n   |\n16 |             max_length = max(max_length, i as isize - hash[&count]);\n   |                          ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0425, E0433.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_1 = 0;\n    let mut count_0 = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n        max_diff = max_diff.max(count_1 - count_0);\n    }\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122963,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `6`', /tmp/tmpvs65p0lx.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_len = 0;\n    let mut count_zero = 0;\n    let mut count_one = 0;\n    for i in 0..string.len() {\n        if string.chars().nth(i).unwrap() == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        if count_zero == count_one {\n            max_len = std::cmp::max(max_len, count_zero * 2);\n        }\n    }\n    max_len as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122963,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmp0tmg84b2.rs:21:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_0 = 0;\n    let mut count_1 = 0;\n    for ch in string.chars() {\n        if ch == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n        max_diff = std::cmp::max(max_diff, count_0 - count_1);\n    }\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122963,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmpdu14x74n.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_len: isize = 0;\n    let mut count: isize = 0;\n    let mut hash_map: HashMap<isize, isize> = HashMap::new();\n    hash_map.insert(0, -1);\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count += 1;\n        } else {\n            count -= 1;\n        }\n        if hash_map.contains_key(&count) {\n            max_len = max(max_len, i as isize - hash_map[&count]);\n        } else {\n            hash_map.insert(count, i as isize);\n        }\n    }\n    max_len\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122963,
      "stdout": "",
      "stderr": "error[E0412]: cannot find type `HashMap` in this scope\n --> /tmp/tmp1sbbai87.rs:5:23\n  |\n5 |     let mut hash_map: HashMap<isize, isize> = HashMap::new();\n  |                       ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmp1sbbai87.rs:5:47\n  |\n5 |     let mut hash_map: HashMap<isize, isize> = HashMap::new();\n  |                                               ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp1sbbai87.rs:14:23\n   |\n14 |             max_len = max(max_len, i as isize - hash_map[&count]);\n   |                       ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0412, E0425, E0433.\nFor more information about an error, try `rustc --explain E0412`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_0 = 0;\n    let mut count_1 = 0;\n\n    for i in 0..string.len() {\n        for j in i..string.len() {\n            if string.chars().nth(j).unwrap() == '0' {\n                count_0 += 1;\n            } else {\n                count_1 += 1;\n            }\n            let diff = (count_0 - count_1).abs();\n            if diff > max_diff {\n                max_diff = diff;\n            }\n        }\n        count_0 = 0;\n        count_1 = 0;\n    }\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122963,
      "stdout": "",
      "stderr": "error[E0689]: can't call method `abs` on ambiguous numeric type `{integer}`\n  --> /tmp/tmplypg_588.rs:14:44\n   |\n14 |             let diff = (count_0 - count_1).abs();\n   |                                            ^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0689`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_len = 0;\n    let mut count = 0;\n    let mut map = HashMap::new();\n    map.insert(0, -1);\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count -= 1;\n        } else {\n            count += 1;\n        }\n        if map.contains_key(&count) {\n            max_len = max(max_len, i as isize - *map.get(&count).unwrap());\n        } else {\n            map.insert(count, i as isize);\n        }\n    }\n    max_len\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmpku2c7gx5.rs:5:19\n  |\n5 |     let mut map = HashMap::new();\n  |                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpku2c7gx5.rs:14:23\n   |\n14 |             max_len = max(max_len, i as isize - *map.get(&count).unwrap());\n   |                       ^^^\n   |\nhelp: a local variable with a similar name exists\n   |\n14 |             max_len = map(max_len, i as isize - *map.get(&count).unwrap());\n   |                       ~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0425, E0433.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_len = 0;\n    let mut count = 0;\n    let mut map = HashMap::new();\n    map.insert(0, -1);\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count -= 1;\n        } else {\n            count += 1;\n        }\n        if map.contains_key(&count) {\n            max_len = max(max_len, i as isize - map.get(&count).unwrap());\n        } else {\n            map.insert(count, i as isize);\n        }\n    }\n    max_len\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122961,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmpx29wlkpt.rs:5:19\n  |\n5 |     let mut map = HashMap::new();\n  |                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpx29wlkpt.rs:14:23\n   |\n14 |             max_len = max(max_len, i as isize - map.get(&count).unwrap());\n   |                       ^^^\n   |\nhelp: a local variable with a similar name exists\n   |\n14 |             max_len = map(max_len, i as isize - map.get(&count).unwrap());\n   |                       ~~~\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0425, E0433.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_len = 0;\n    let mut count = 0;\n    let mut hash = HashMap::new();\n    hash.insert(0, -1);\n    for (i, c) in string.chars().enumerate() {\n        if c == '1' {\n            count += 1;\n        } else {\n            count -= 1;\n        }\n        if hash.contains_key(&count) {\n            max_len = max(max_len, i as isize - hash.get(&count).unwrap());\n        } else {\n            hash.insert(count, i as isize);\n        }\n    }\n    max_len\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122963,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmpa_eol2hy.rs:5:20\n  |\n5 |     let mut hash = HashMap::new();\n  |                    ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpa_eol2hy.rs:14:23\n   |\n14 |             max_len = max(max_len, i as isize - hash.get(&count).unwrap());\n   |                       ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0425, E0433.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_len = 0;\n    let mut count = 0;\n    let mut hash = HashMap::new();\n    hash.insert(0, -1);\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count -= 1;\n        } else {\n            count += 1;\n        }\n        if hash.contains_key(&count) {\n            max_len = max(max_len, i as isize - hash[&count]);\n        } else {\n            hash.insert(count, i as isize);\n        }\n    }\n    max_len\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmp6xe1jxec.rs:5:20\n  |\n5 |     let mut hash = HashMap::new();\n  |                    ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmp6xe1jxec.rs:14:23\n   |\n14 |             max_len = max(max_len, i as isize - hash[&count]);\n   |                       ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0425, E0433.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_zero = 0;\n    let mut count_one = 0;\n\n    for c in string.chars() {\n        if c == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n\n        let diff = count_zero - count_one;\n        if diff < 0 {\n            count_zero = 0;\n            count_one = 0;\n        } else {\n            max_diff = max_diff.max(diff);\n        }\n    }\n\n    max_diff\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122963,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_zero = 0;\n    let mut count_one = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        max_diff = max_diff.max(count_one - count_zero);\n    }\n    max_diff\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122961,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `2`,\n right: `6`', /tmp/tmputychuad.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_zero = 0;\n    let mut count_one = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        max_diff = max_diff.max(count_zero - count_one);\n    }\n    max_diff\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122961,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmpipc4kirz.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_zero = 0;\n    let mut count_one = 0;\n    for i in 0..string.len() {\n        if string.chars().nth(i).unwrap() == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        if count_zero == count_one {\n            max_diff = std::cmp::max(max_diff, count_zero + count_one);\n        }\n    }\n    count_zero = 0;\n    count_one = 0;\n    for i in (0..string.len()).rev() {\n        if string.chars().nth(i).unwrap() == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        if count_zero == count_one {\n            max_diff = std::cmp::max(max_diff, count_zero + count_one);\n        }\n    }\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1665509993,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmptvhgdc4n.rs:33:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count += 1;\n        } else {\n            count -= 1;\n        }\n        if count < 0 {\n            count = 0;\n        }\n        max_diff = max_diff.max(count);\n    }\n    max_diff\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1665509993,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_0 = 0;\n    let mut count_1 = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n        max_diff = std::cmp::max(max_diff, count_0 - count_1);\n    }\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122961,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmpw1y4zthm.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_0 = 0;\n    let mut count_1 = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n        max_diff = std::cmp::max(max_diff, count_0 - count_1);\n    }\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122961,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmpw1y4zthm.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_len = 0;\n    let mut count = 0;\n    let mut map = HashMap::new();\n    map.insert(0, -1);\n    for (i, c) in string.chars().enumerate() {\n        count += if c == '0' { 1 } else { -1 };\n        if map.contains_key(&count) {\n            max_len = max_len.max(i as isize - map[&count]);\n        } else {\n            map.insert(count, i as isize);\n        }\n    }\n    max_len\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122963,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmp0_o8jp2p.rs:5:19\n  |\n5 |     let mut map = HashMap::new();\n  |                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_length = 0;\n    let mut count_zero = 0;\n    let mut count_one = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        if count_zero == count_one {\n            max_length = std::cmp::max(max_length, count_zero + count_one);\n        }\n    }\n    count_zero = 0;\n    count_one = 0;\n    for c in string.chars().rev() {\n        if c == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        if count_zero == count_one {\n            max_length = std::cmp::max(max_length, count_zero + count_one);\n        }\n    }\n    max_length as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122963,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmplwcygzlt.rs:33:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_0 = 0;\n    let mut count_1 = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n        max_diff = max_diff.max(count_0 - count_1);\n    }\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1665509993,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmpi9g6pter.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut zeros = 0;\n    let mut ones = 0;\n    for c in string.chars() {\n        if c == '0' {\n            zeros += 1;\n        } else {\n            ones += 1;\n        }\n        if zeros == ones {\n            max_diff = std::cmp::max(max_diff, zeros * 2);\n        }\n    }\n    zeros = 0;\n    ones = 0;\n    for c in string.chars().rev() {\n        if c == '0' {\n            zeros += 1;\n        } else {\n            ones += 1;\n        }\n        if zeros == ones {\n            max_diff = std::cmp::max(max_diff, zeros * 2);\n        }\n    }\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1665509993,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmp6lpzl2ui.rs:33:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_zero = 0;\n    let mut count_one = 0;\n    for i in 0..string.len() {\n        if string.chars().nth(i).unwrap() == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        if count_zero == count_one {\n            max_diff = std::cmp::max(max_diff, count_zero + count_one);\n        }\n    }\n    count_zero = 0;\n    count_one = 0;\n    for i in (0..string.len()).rev() {\n        if string.chars().nth(i).unwrap() == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        if count_zero == count_one {\n            max_diff = std::cmp::max(max_diff, count_zero + count_one);\n        }\n    }\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1665509993,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmptvhgdc4n.rs:33:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_length = 0;\n    let mut count = 0;\n    let mut hash = HashMap::new();\n    hash.insert(0, -1);\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count -= 1;\n        } else {\n            count += 1;\n        }\n        if let Some(j) = hash.get(&count) {\n            max_length = max(max_length, i as isize - j);\n        } else {\n            hash.insert(count, i as isize);\n        }\n    }\n    max_length\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122963,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmpq9iohvgc.rs:5:20\n  |\n5 |     let mut hash = HashMap::new();\n  |                    ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpq9iohvgc.rs:14:26\n   |\n14 |             max_length = max(max_length, i as isize - j);\n   |                          ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0425, E0433.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_0 = 0;\n    let mut count_1 = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n        if count_0 == count_1 {\n            max_diff = std::cmp::max(max_diff, count_0 + count_1);\n        }\n    }\n    count_0 = 0;\n    count_1 = 0;\n    for c in string.chars().rev() {\n        if c == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n        if count_0 == count_1 {\n            max_diff = std::cmp::max(max_diff, count_0 + count_1);\n        }\n    }\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmpm4xufoi0.rs:33:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_0 = 0;\n    let mut count_1 = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n        max_diff = std::cmp::max(max_diff, count_0 - count_1);\n    }\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122961,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmpw1y4zthm.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_length = 0;\n    let mut count = 0;\n    let mut hash = HashMap::new();\n    hash.insert(0, -1);\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count -= 1;\n        } else {\n            count += 1;\n        }\n        if hash.contains_key(&count) {\n            max_length = max_length.max(i as isize - hash[&count]);\n        } else {\n            hash.insert(count, i as isize);\n        }\n    }\n    max_length\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122963,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmp3h7rq9rg.rs:5:20\n  |\n5 |     let mut hash = HashMap::new();\n  |                    ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_zero = 0;\n    let mut count_one = 0;\n\n    for c in string.chars() {\n        if c == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n\n        if count_zero == count_one {\n            max_diff = std::cmp::max(max_diff, count_zero + count_one);\n        }\n    }\n\n    count_zero = 0;\n    count_one = 0;\n\n    for c in string.chars().rev() {\n        if c == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n\n        if count_zero == count_one {\n            max_diff = std::cmp::max(max_diff, count_zero + count_one);\n        }\n    }\n\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1665509993,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmpkk4uj72w.rs:39:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_0 = 0;\n    let mut count_1 = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n        max_diff = max_diff.max(count_0 - count_1);\n    }\n    max_diff\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1665509993,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmprvuhatg7.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut count_zero = 0;\n    let mut count_one = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        let diff = (count_zero - count_one).abs();\n        if diff > max_diff {\n            max_diff = diff;\n        }\n    }\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1665509993,
      "stdout": "",
      "stderr": "error[E0689]: can't call method `abs` on ambiguous numeric type `{integer}`\n  --> /tmp/tmpfkvbskto.rs:12:45\n   |\n12 |         let diff = (count_zero - count_one).abs();\n   |                                             ^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0689`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_len = 0;\n    let mut count_0 = 0;\n    let mut count_1 = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n        if count_0 == count_1 {\n            max_len = std::cmp::max(max_len, count_0 + count_1);\n        }\n    }\n    count_0 = 0;\n    count_1 = 0;\n    for c in string.chars().rev() {\n        if c == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n        if count_0 == count_1 {\n            max_len = std::cmp::max(max_len, count_0 + count_1);\n        }\n    }\n    max_len as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122963,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `6`', /tmp/tmplcnpanjc.rs:33:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_diff = 0;\n    let mut diff = 0;\n    for c in string.chars() {\n        if c == '0' {\n            diff += 1;\n        } else {\n            diff -= 1;\n        }\n        if diff < 0 {\n            diff = 0;\n        }\n        if diff > max_diff {\n            max_diff = diff;\n        }\n    }\n    max_diff as isize\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1666122963,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n    let mut max_length = 0;\n    let mut count = 0;\n    let mut hash_map = HashMap::new();\n    hash_map.insert(0, -1);\n\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count += 1;\n        } else {\n            count -= 1;\n        }\n\n        if hash_map.contains_key(&count) {\n            max_length = max(max_length, i as isize - hash_map[&count]);\n        } else {\n            hash_map.insert(count, i as isize);\n        }\n    }\n\n    max_length\n}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
      "timestamp": 1665509993,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashMap`\n --> /tmp/tmpliahmkns.rs:5:24\n  |\n5 |     let mut hash_map = HashMap::new();\n  |                        ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashMap;\n  |\n\nerror[E0425]: cannot find function `max` in this scope\n  --> /tmp/tmpliahmkns.rs:16:26\n   |\n16 |             max_length = max(max_length, i as isize - hash_map[&count]);\n   |                          ^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n1  | use std::cmp::max;\n   |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0425, E0433.\nFor more information about an error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}