{
  "name": "mbpp_395_first_non_repeating_character",
  "language": "rs",
  "prompt": "/// Write a python function to find the first non-repeated character in a given string.\nfn first_non_repeating_character(str1: String) -> Option<String> {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_395_first_non_repeating_character.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\nfn main() {\n    let candidate = first_non_repeating_character;\n    assert_eq!(candidate(String::from(\"abcabc\")), None);\n    assert_eq!(candidate(String::from(\"abc\")), Some(String::from(\"a\")));\n    assert_eq!(candidate(String::from(\"ababc\")), Some(String::from(\"c\")));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    let mut map = HashMap::new();\n    for c in str1.chars() {\n        let count = map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if map.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_map = HashMap::new();\n    for c in str1.chars() {\n        let counter = char_map.entry(c).or_insert(0);\n        *counter += 1;\n    }\n\n    for c in str1.chars() {\n        if char_map.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut map = HashMap::new();\n    for c in str1.chars() {\n        let count = map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if map.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_count: HashMap<char, u32> = HashMap::new();\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n\n    for c in str1.chars() {\n        if char_count.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n\n    None",
    "    let mut char_map = HashMap::new();\n    for c in str1.chars() {\n        let count = char_map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_map.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_map: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = char_map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_map.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut count: HashMap<char, u32> = HashMap::new();\n    for c in str1.chars() {\n        let counter = count.entry(c).or_insert(0);\n        *counter += 1;\n    }\n    for c in str1.chars() {\n        if count.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_count = HashMap::new();\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n\n    for c in str1.chars() {\n        if char_count.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n\n    None",
    "    let mut map: HashMap<char, i32> = HashMap::new();\n    let mut result: Option<String> = None;\n\n    for c in str1.chars() {\n        let count = map.entry(c).or_insert(0);\n        *count += 1;\n    }\n\n    for c in str1.chars() {\n        if map.get(&c).unwrap() == &1 {\n            result = Some(c.to_string());\n            break;\n        }\n    }\n\n    result",
    "    let mut map: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if map[&c] == 1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut chars = str1.chars();\n    let mut char_count = HashMap::new();\n    let mut char_first_index = HashMap::new();\n\n    for (index, c) in chars.enumerate() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n\n        if !char_first_index.contains_key(&c) {\n            char_first_index.insert(c, index);\n        }\n    }\n\n    let mut min_index = str1.len();\n    let mut result = None;\n\n    for (c, count) in &char_count {\n        if *count == 1 && *char_first_index.get(c).unwrap() < min_index {\n            min_index = *char_first_index.get(c).unwrap();\n            result = Some(c.to_string());\n        }\n    }\n\n    result",
    "    let mut map = HashMap::new();\n    for c in str1.chars() {\n        let count = map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if map[&c] == 1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut map = HashMap::new();\n    let mut result = None;\n\n    for c in str1.chars() {\n        let count = map.entry(c).or_insert(0);\n        *count += 1;\n    }\n\n    for c in str1.chars() {\n        if map.get(&c).unwrap() == &1 {\n            result = Some(c.to_string());\n            break;\n        }\n    }\n\n    result",
    "    let mut char_map = HashMap::new();\n    for c in str1.chars() {\n        let count = char_map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_map[&c] == 1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut chars: HashMap<char, i32> = HashMap::new();\n    let mut first_non_repeating_char: Option<String> = None;\n\n    for c in str1.chars() {\n        let count = chars.entry(c).or_insert(0);\n        *count += 1;\n    }\n\n    for c in str1.chars() {\n        let count = chars.get(&c).unwrap();\n        if *count == 1 {\n            first_non_repeating_char = Some(c.to_string());\n            break;\n        }\n    }\n\n    first_non_repeating_char",
    "    let mut char_count: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_count[&c] == 1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut map: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if map.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut map = HashMap::new();\n    for c in str1.chars() {\n        let count = map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if map[&c] == 1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut map: HashMap<char, u32> = HashMap::new();\n    for c in str1.chars() {\n        let count = map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if map.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_count: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_count[&c] == 1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut count = HashMap::new();\n    let mut result = None;\n    for c in str1.chars() {\n        let counter = count.entry(c).or_insert(0);\n        *counter += 1;\n    }\n    for c in str1.chars() {\n        if count.get(&c).unwrap() == &1 {\n            result = Some(c.to_string());\n            break;\n        }\n    }\n    result",
    "    let mut char_map: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = char_map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_map.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_count = HashMap::new();\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_count.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_count = HashMap::new();\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_count.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut chars: Vec<char> = str1.chars().collect();\n    let mut count: HashMap<char, i32> = HashMap::new();\n    let mut result: Option<String> = None;\n\n    for i in 0..chars.len() {\n        let count = count.entry(chars[i]).or_insert(0);\n        *count += 1;\n    }\n\n    for i in 0..chars.len() {\n        if count[&chars[i]] == 1 {\n            result = Some(chars[i].to_string());\n            break;\n        }\n    }\n\n    result",
    "    let mut char_count = HashMap::new();\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_count.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_count: HashMap<char, u32> = HashMap::new();\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n\n    for c in str1.chars() {\n        if char_count.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n\n    None",
    "    let mut map = HashMap::new();\n    for c in str1.chars() {\n        let count = map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if map.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_count = HashMap::new();\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        match char_count.get(&c) {\n            Some(count) => {\n                if *count == 1 {\n                    return Some(c.to_string());\n                }\n            }\n            None => return None,\n        }\n    }\n    None",
    "    let mut map: HashMap<char, i32> = HashMap::new();\n    let mut result: Option<String> = None;\n\n    for c in str1.chars() {\n        let count = map.entry(c).or_insert(0);\n        *count += 1;\n    }\n\n    for c in str1.chars() {\n        if map.get(&c).unwrap() == &1 {\n            result = Some(c.to_string());\n            break;\n        }\n    }\n\n    result",
    "    let mut char_count = HashMap::new();\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_count.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut map = HashMap::new();\n    for c in str1.chars() {\n        let count = map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if map[&c] == 1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_count = HashMap::new();\n    for c in str1.chars() {\n        let counter = char_count.entry(c).or_insert(0);\n        *counter += 1;\n    }\n    for c in str1.chars() {\n        if char_count[&c] == 1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_count = HashMap::new();\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_count[&c] == 1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_count: HashMap<char, u32> = HashMap::new();\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_count[&c] == 1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_count = HashMap::new();\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_count[&c] == 1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut map: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if map.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_count = HashMap::new();\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n\n    for c in str1.chars() {\n        if char_count[&c] == 1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_count: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n\n    for c in str1.chars() {\n        if char_count.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut map = HashMap::new();\n    for c in str1.chars() {\n        let count = map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if map[&c] == 1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut chars = HashMap::new();\n    for c in str1.chars() {\n        let count = chars.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if chars.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_count = HashMap::new();\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_count.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_count = HashMap::new();\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_count[&c] == 1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_count: HashMap<char, u32> = HashMap::new();\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n\n    for c in str1.chars() {\n        if char_count[&c] == 1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut map: HashMap<char, u32> = HashMap::new();\n    for c in str1.chars() {\n        let count = map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if map[&c] == 1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_count = HashMap::new();\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n\n    for c in str1.chars() {\n        if char_count.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut map: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if map.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut map = HashMap::new();\n    for c in str1.chars() {\n        let counter = map.entry(c).or_insert(0);\n        *counter += 1;\n    }\n    for c in str1.chars() {\n        if map[&c] == 1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_map: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = char_map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_map.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_count: HashMap<char, i32> = HashMap::new();\n    let mut first_non_repeating_char: Option<String> = None;\n\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n\n    for c in str1.chars() {\n        match char_count.get(&c) {\n            Some(count) => {\n                if *count == 1 {\n                    first_non_repeating_char = Some(c.to_string());\n                    break;\n                }\n            }\n            None => {}\n        }\n    }\n\n    first_non_repeating_char",
    "    let mut char_count: HashMap<char, i32> = HashMap::new();\n    let mut result: Option<String> = None;\n\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n\n    for c in str1.chars() {\n        if char_count[&c] == 1 {\n            result = Some(c.to_string());\n            break;\n        }\n    }\n\n    result",
    "    let mut char_count: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_count.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut chars: HashMap<char, u32> = HashMap::new();\n    for c in str1.chars() {\n        let count = chars.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if chars.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_map: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = char_map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_map.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut map = HashMap::new();\n    for c in str1.chars() {\n        let count = map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if map.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_count: HashMap<char, u32> = HashMap::new();\n    let mut result: Option<String> = None;\n\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n\n    for c in str1.chars() {\n        if char_count.get(&c).unwrap() == &1 {\n            result = Some(c.to_string());\n            break;\n        }\n    }\n\n    result",
    "    let mut char_count: HashMap<char, u32> = HashMap::new();\n    let mut first_non_repeating_char: Option<char> = None;\n\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n\n    for c in str1.chars() {\n        if char_count[&c] == 1 {\n            first_non_repeating_char = Some(c);\n            break;\n        }\n    }\n\n    match first_non_repeating_char {\n        Some(c) => Some(c.to_string()),\n        None => None,\n    }",
    "    let mut char_map: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = char_map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_map[&c] == 1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_count = HashMap::new();\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_count[&c] == 1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_count: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_count[&c] == 1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_count = HashMap::new();\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_count.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_count: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n\n    for c in str1.chars() {\n        if char_count.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_count: HashMap<char, u32> = HashMap::new();\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_count[&c] == 1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut chars: HashMap<char, u32> = HashMap::new();\n    let mut first_non_repeating_char: Option<char> = None;\n    for c in str1.chars() {\n        let count = chars.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if chars[&c] == 1 {\n            first_non_repeating_char = Some(c);\n            break;\n        }\n    }\n    match first_non_repeating_char {\n        Some(c) => Some(c.to_string()),\n        None => None,\n    }",
    "    let mut chars = str1.chars();\n    let mut map = HashMap::new();\n    while let Some(c) = chars.next() {\n        let count = map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if map.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_count: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_count[&c] == 1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_count = HashMap::new();\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_count[&c] == 1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_count = HashMap::new();\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_count.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    return None;",
    "    let mut char_count: HashMap<char, u32> = HashMap::new();\n    let mut first_char: Option<String> = None;\n\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n\n    for c in str1.chars() {\n        if char_count.get(&c).unwrap() == &1 {\n            first_char = Some(c.to_string());\n            break;\n        }\n    }\n\n    first_char",
    "    let mut char_count: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_count.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut chars: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = chars.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if chars[&c] == 1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut map = HashMap::new();\n    for c in str1.chars() {\n        let count = map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if map.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut map: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if map.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut map: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if map.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut map: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if map.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_count = HashMap::new();\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_count[&c] == 1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_map: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = char_map.entry(c).or_insert(0);\n        *count += 1;\n    }\n\n    for c in str1.chars() {\n        if char_map.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n\n    None",
    "    let mut char_counts: HashMap<char, u32> = HashMap::new();\n    let mut first_non_repeating_char: Option<char> = None;\n\n    for c in str1.chars() {\n        let count = char_counts.entry(c).or_insert(0);\n        *count += 1;\n    }\n\n    for c in str1.chars() {\n        if char_counts[&c] == 1 {\n            first_non_repeating_char = Some(c);\n            break;\n        }\n    }\n\n    match first_non_repeating_char {\n        Some(c) => Some(c.to_string()),\n        None => None,\n    }",
    "    let mut map = HashMap::new();\n    for c in str1.chars() {\n        let count = map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if map[&c] == 1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_count = HashMap::new();\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_count.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_count = HashMap::new();\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_count[&c] == 1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_count: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_count.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_count = HashMap::new();\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_count.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut map: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if map.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_map: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = char_map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_map.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_count: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n\n    for c in str1.chars() {\n        if char_count[&c] == 1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut map: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if map.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_count: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_count[&c] == 1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_map = HashMap::new();\n    for c in str1.chars() {\n        let count = char_map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_map.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_count = HashMap::new();\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n\n    for c in str1.chars() {\n        if char_count[&c] == 1 {\n            return Some(c.to_string());\n        }\n    }\n\n    None",
    "    let mut char_count: HashMap<char, i32> = HashMap::new();\n    let mut first_non_repeating_char: Option<char> = None;\n\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n\n    for c in str1.chars() {\n        match char_count.get(&c) {\n            Some(count) => {\n                if *count == 1 {\n                    first_non_repeating_char = Some(c);\n                    break;\n                }\n            }\n            None => {}\n        }\n    }\n\n    match first_non_repeating_char {\n        Some(c) => Some(c.to_string()),\n        None => None,\n    }",
    "    let mut map = HashMap::new();\n    for c in str1.chars() {\n        let count = map.entry(c).or_insert(0);\n        *count += 1;\n    }\n\n    for c in str1.chars() {\n        if map.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n\n    None",
    "    let mut char_count: HashMap<char, u32> = HashMap::new();\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_count[&c] == 1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_count = HashMap::new();\n    let mut char_order = Vec::new();\n\n    for c in str1.chars() {\n        if char_count.contains_key(&c) {\n            *char_count.get_mut(&c).unwrap() += 1;\n        } else {\n            char_count.insert(c, 1);\n            char_order.push(c);\n        }\n    }\n\n    for c in char_order {\n        if char_count[&c] == 1 {\n            return Some(c.to_string());\n        }\n    }\n\n    None",
    "    let mut char_count = HashMap::new();\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_count[&c] == 1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut chars: HashMap<char, u32> = HashMap::new();\n    for c in str1.chars() {\n        let count = chars.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if chars[&c] == 1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_count = HashMap::new();\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_count[&c] == 1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_count: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_count.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut map = HashMap::new();\n    for c in str1.chars() {\n        let counter = map.entry(c).or_insert(0);\n        *counter += 1;\n    }\n    for c in str1.chars() {\n        if map.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_count: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_count.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_count = HashMap::new();\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_count[&c] == 1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_count = HashMap::new();\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        match char_count.get(&c) {\n            Some(count) => {\n                if *count == 1 {\n                    return Some(c.to_string());\n                }\n            }\n            None => return None,\n        }\n    }\n    None",
    "    let mut char_count = HashMap::new();\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_count.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_count: HashMap<char, u32> = HashMap::new();\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n\n    for c in str1.chars() {\n        if char_count.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut count = HashMap::new();\n    let mut result = String::from(\"\");\n\n    for c in str1.chars() {\n        let counter = count.entry(c).or_insert(0);\n        *counter += 1;\n    }\n\n    for c in str1.chars() {\n        if count[&c] == 1 {\n            result.push(c);\n            break;\n        }\n    }\n\n    if result.is_empty() {\n        None\n    } else {\n        Some(result)\n    }",
    "    let mut char_map: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = char_map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_map.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_count = HashMap::new();\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_count.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_map = HashMap::new();\n    for c in str1.chars() {\n        let count = char_map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_map[&c] == 1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_count = HashMap::new();\n    let mut char_order = Vec::new();\n\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n        char_order.push(c);\n    }\n\n    for c in char_order {\n        if char_count[&c] == 1 {\n            return Some(c.to_string());\n        }\n    }\n\n    None",
    "    let mut char_count = HashMap::new();\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_count.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut map: HashMap<char, u32> = HashMap::new();\n    let mut result: Option<String> = None;\n\n    for c in str1.chars() {\n        let count = map.entry(c).or_insert(0);\n        *count += 1;\n    }\n\n    for c in str1.chars() {\n        match map.get(&c) {\n            Some(count) => {\n                if *count == 1 {\n                    result = Some(c.to_string());\n                    break;\n                }\n            }\n            None => (),\n        }\n    }\n\n    result",
    "    let mut char_count = HashMap::new();\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_count[&c] == 1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_count = HashMap::new();\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_count.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut chars: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = chars.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if chars[&c] == 1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_map: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = char_map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_map[&c] == 1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_counts: HashMap<char, u32> = HashMap::new();\n    for c in str1.chars() {\n        let count = char_counts.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_counts.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_count: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_count[&c] == 1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_count = HashMap::new();\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_count.get(&c) == Some(&1) {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_count: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_count.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_count: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_count.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_map: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = char_map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_map[&c] == 1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut map: HashMap<char, u32> = HashMap::new();\n    for c in str1.chars() {\n        let count = map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if map.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_count: HashMap<char, u32> = HashMap::new();\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_count.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_map = HashMap::new();\n    for c in str1.chars() {\n        let count = char_map.entry(c).or_insert(0);\n        *count += 1;\n    }\n\n    for c in str1.chars() {\n        if char_map.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_count = HashMap::new();\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        match char_count.get(&c) {\n            Some(1) => return Some(c.to_string()),\n            _ => continue,\n        }\n    }\n    None",
    "    let mut map: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if map.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_count = HashMap::new();\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_count[&c] == 1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut map = HashMap::new();\n    for c in str1.chars() {\n        let count = map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if map.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_count = HashMap::new();\n\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n\n    for c in str1.chars() {\n        if char_count[&c] == 1 {\n            return Some(c.to_string());\n        }\n    }\n\n    None",
    "    let mut chars: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = chars.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if chars[&c] == 1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut chars: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = chars.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if chars[&c] == 1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_count: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_count.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_count: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_count[&c] == 1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_count: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_count[&c] == 1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut map = HashMap::new();\n    for c in str1.chars() {\n        let count = map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if let Some(count) = map.get(&c) {\n            if *count == 1 {\n                return Some(c.to_string());\n            }\n        }\n    }\n    None",
    "    let mut chars: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = chars.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if chars[&c] == 1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_map: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = char_map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_map[&c] == 1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_count: HashMap<char, i32> = HashMap::new();\n    let mut char_order: HashMap<char, i32> = HashMap::new();\n    let mut order: i32 = 0;\n\n    for c in str1.chars() {\n        order += 1;\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n        char_order.entry(c).or_insert(order);\n    }\n\n    let mut min_order: i32 = std::i32::MAX;\n    let mut min_char: Option<char> = None;\n\n    for (c, count) in &char_count {\n        if *count == 1 {\n            let order = char_order.get(c).unwrap();\n            if *order < min_order {\n                min_order = *order;\n                min_char = Some(*c);\n            }\n        }\n    }\n\n    match min_char {\n        Some(c) => Some(c.to_string()),\n        None => None,\n    }",
    "    let mut char_count: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_count.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut map = HashMap::new();\n    for c in str1.chars() {\n        let count = map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if map[&c] == 1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_count = HashMap::new();\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_count.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut chars: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = chars.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if chars.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_count: HashMap<char, i32> = HashMap::new();\n    let mut char_order: HashMap<char, i32> = HashMap::new();\n    let mut order: i32 = 0;\n\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n\n        if !char_order.contains_key(&c) {\n            char_order.insert(c, order);\n            order += 1;\n        }\n    }\n\n    let mut min_order: i32 = std::i32::MAX;\n    let mut min_char: Option<char> = None;\n\n    for (c, count) in char_count.iter() {\n        if *count == 1 {\n            let order = char_order.get(c).unwrap();\n            if *order < min_order {\n                min_order = *order;\n                min_char = Some(*c);\n            }\n        }\n    }\n\n    if let Some(c) = min_char {\n        return Some(c.to_string());\n    }\n\n    None",
    "    let mut char_count: HashMap<char, i32> = HashMap::new();\n\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n\n    for c in str1.chars() {\n        if char_count.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n\n    None",
    "    let mut char_count = HashMap::new();\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_count[&c] == 1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut chars: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = chars.entry(c).or_insert(0);\n        *count += 1;\n    }\n\n    for c in str1.chars() {\n        if chars.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut chars: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = chars.entry(c).or_insert(0);\n        *count += 1;\n    }\n\n    for c in str1.chars() {\n        if chars[&c] == 1 {\n            return Some(c.to_string());\n        }\n    }\n\n    None",
    "    let mut map: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if map.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_count = HashMap::new();\n    let mut non_repeating_chars = Vec::new();\n\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n\n    for c in str1.chars() {\n        if char_count[&c] == 1 {\n            non_repeating_chars.push(c);\n        }\n    }\n\n    if non_repeating_chars.len() > 0 {\n        return Some(non_repeating_chars[0].to_string());\n    } else {\n        return None;\n    }",
    "    let mut char_map = HashMap::new();\n    for c in str1.chars() {\n        let count = char_map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_map[&c] == 1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_count = HashMap::new();\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_count.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_map: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = char_map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_map.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_count = HashMap::new();\n    let mut char_order = Vec::new();\n\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n        char_order.push(c);\n    }\n\n    for c in char_order {\n        if char_count[&c] == 1 {\n            return Some(c.to_string());\n        }\n    }\n\n    None",
    "    let mut char_count = HashMap::new();\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_count.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_count = HashMap::new();\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_count[&c] == 1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut map: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if map.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_count = HashMap::new();\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_count.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut chars: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let counter = chars.entry(c).or_insert(0);\n        *counter += 1;\n    }\n    for c in str1.chars() {\n        if chars[&c] == 1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_count = HashMap::new();\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        match char_count.get(&c) {\n            Some(&1) => return Some(c.to_string()),\n            _ => (),\n        }\n    }\n    None",
    "    let mut char_map: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = char_map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_map.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut map: HashMap<char, usize> = HashMap::new();\n    for c in str1.chars() {\n        let count = map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if map.get(&c) == Some(&1) {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut map: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let counter = map.entry(c).or_insert(0);\n        *counter += 1;\n    }\n    for c in str1.chars() {\n        if map.get(&c) == Some(&1) {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_count = HashMap::new();\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_count[&c] == 1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_map: HashMap<char, u32> = HashMap::new();\n    for c in str1.chars() {\n        let count = char_map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_map[&c] == 1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_count: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n\n    for c in str1.chars() {\n        if char_count[&c] == 1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_count: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_count[&c] == 1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_count = HashMap::new();\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n\n    for c in str1.chars() {\n        if char_count[&c] == 1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_map: HashMap<char, u32> = HashMap::new();\n    for c in str1.chars() {\n        let count = char_map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_map[&c] == 1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut map = HashMap::new();\n    for c in str1.chars() {\n        let count = map.entry(c).or_insert(0);\n        *count += 1;\n    }\n\n    for c in str1.chars() {\n        if map[&c] == 1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut chars: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = chars.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if chars[&c] == 1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_count: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_count[&c] == 1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut count: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let counter = count.entry(c).or_insert(0);\n        *counter += 1;\n    }\n    for c in str1.chars() {\n        if count[&c] == 1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut map = HashMap::new();\n    for c in str1.chars() {\n        let count = map.entry(c).or_insert(0);\n        *count += 1;\n    }\n\n    for c in str1.chars() {\n        if map.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n\n    None",
    "    let mut char_count = HashMap::new();\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_count.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut map: HashMap<char, u32> = HashMap::new();\n    for c in str1.chars() {\n        let count = map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if map.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut map = HashMap::new();\n    for c in str1.chars() {\n        let count = map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if map[&c] == 1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut chars_count = HashMap::new();\n    for c in str1.chars() {\n        let count = chars_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if chars_count.get(&c) == Some(&1) {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut map: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if map.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut map = HashMap::new();\n    for c in str1.chars() {\n        let counter = map.entry(c).or_insert(0);\n        *counter += 1;\n    }\n    for c in str1.chars() {\n        if map[&c] == 1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_count = HashMap::new();\n    let mut first_non_repeating_character = None;\n\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n\n    for c in str1.chars() {\n        match char_count.get(&c) {\n            Some(count) => {\n                if *count == 1 {\n                    first_non_repeating_character = Some(c.to_string());\n                    break;\n                }\n            }\n            None => {}\n        }\n    }\n\n    first_non_repeating_character",
    "    let mut char_count = HashMap::new();\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_count[&c] == 1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut count: HashMap<char, i32> = HashMap::new();\n    let mut result: Option<String> = None;\n\n    for c in str1.chars() {\n        let counter = count.entry(c).or_insert(0);\n        *counter += 1;\n    }\n\n    for c in str1.chars() {\n        match count.get(&c) {\n            Some(1) => {\n                result = Some(c.to_string());\n                break;\n            }\n            _ => continue,\n        }\n    }\n\n    result",
    "    let mut map = HashMap::new();\n    for c in str1.chars() {\n        let count = map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if map.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_count: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_count.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut map = HashMap::new();\n    for c in str1.chars() {\n        let counter = map.entry(c).or_insert(0);\n        *counter += 1;\n    }\n    for c in str1.chars() {\n        if map[&c] == 1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_count: HashMap<char, i32> = HashMap::new();\n    let mut first_non_repeating_char: Option<String> = None;\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_count.get(&c).unwrap() == &1 {\n            first_non_repeating_char = Some(c.to_string());\n            break;\n        }\n    }\n    first_non_repeating_char",
    "    let mut map = HashMap::new();\n    for c in str1.chars() {\n        let count = map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if map[&c] == 1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_count: HashMap<char, i32> = HashMap::new();\n    let mut first_non_repeating_char: Option<String> = None;\n\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n\n    for c in str1.chars() {\n        if char_count.get(&c).unwrap() == &1 {\n            first_non_repeating_char = Some(c.to_string());\n            break;\n        }\n    }\n\n    first_non_repeating_char",
    "    let mut map = HashMap::new();\n    for c in str1.chars() {\n        let count = map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if map[&c] == 1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_count: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_count[&c] == 1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut chars: HashMap<char, u32> = HashMap::new();\n    for c in str1.chars() {\n        let count = chars.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if chars[&c] == 1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_count = HashMap::new();\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n\n    for c in str1.chars() {\n        if char_count[&c] == 1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_count = HashMap::new();\n\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n\n    for c in str1.chars() {\n        match char_count.get(&c) {\n            Some(count) => {\n                if *count == 1 {\n                    return Some(c.to_string());\n                }\n            }\n            None => println!(\"char not found\"),\n        }\n    }\n    None",
    "    let mut char_count = HashMap::new();\n    let mut char_order = Vec::new();\n\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n        if *count == 1 {\n            char_order.push(c);\n        }\n    }\n\n    for c in char_order {\n        if char_count[&c] == 1 {\n            return Some(c.to_string());\n        }\n    }\n\n    None",
    "    let mut map = HashMap::new();\n    for c in str1.chars() {\n        let count = map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if map.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_count: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n\n    for c in str1.chars() {\n        match char_count.get(&c) {\n            Some(count) => {\n                if *count == 1 {\n                    return Some(c.to_string());\n                }\n            }\n            None => return None,\n        }\n    }\n    None",
    "    let mut map: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = map.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if map.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut chars: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = chars.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if chars[&c] == 1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut char_count: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = char_count.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if char_count.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None",
    "    let mut chars: HashMap<char, i32> = HashMap::new();\n    for c in str1.chars() {\n        let count = chars.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in str1.chars() {\n        if chars.get(&c).unwrap() == &1 {\n            return Some(c.to_string());\n        }\n    }\n    None"
  ]
}