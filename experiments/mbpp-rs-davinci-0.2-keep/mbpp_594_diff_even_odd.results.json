{
  "name": "mbpp_594_diff_even_odd",
  "language": "rs",
  "prompt": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_594_diff_even_odd.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even = None;\n    let mut odd = None;\n    for i in list1 {\n        if i % 2 == 0 {\n            if even.is_none() {\n                even = Some(i);\n            }\n        } else {\n            if odd.is_none() {\n                odd = Some(i);\n            }\n        }\n    }\n    even.unwrap_or(0) - odd.unwrap_or(0)\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even = None;\n    let mut odd = None;\n    for i in list1 {\n        if i % 2 == 0 {\n            even = Some(i);\n            break;\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = Some(i);\n            break;\n        }\n    }\n    match (even, odd) {\n        (Some(even), Some(odd)) => even - odd,\n        _ => 0,\n    }\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list1`\n   --> /tmp/tmpo0rtb3uy.rs:11:14\n    |\n2   | fn diff_even_odd(list1: Vec<isize>) -> isize {\n    |                  ----- move occurs because `list1` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n5   |     for i in list1 {\n    |              ----- `list1` moved due to this implicit call to `.into_iter()`\n...\n11  |     for i in list1 {\n    |              ^^^^^ value used here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list1`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n5   |     for i in &list1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even = None;\n    let mut odd = None;\n    for i in list1 {\n        if i % 2 == 0 {\n            even = Some(i);\n            break;\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = Some(i);\n            break;\n        }\n    }\n    match (even, odd) {\n        (Some(e), Some(o)) => e - o,\n        _ => 0,\n    }\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list1`\n   --> /tmp/tmp6v04kwpm.rs:11:14\n    |\n2   | fn diff_even_odd(list1: Vec<isize>) -> isize {\n    |                  ----- move occurs because `list1` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n5   |     for i in list1 {\n    |              ----- `list1` moved due to this implicit call to `.into_iter()`\n...\n11  |     for i in list1 {\n    |              ^^^^^ value used here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list1`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n5   |     for i in &list1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even = None;\n    let mut odd = None;\n    for i in list1 {\n        if i % 2 == 0 {\n            if even.is_none() {\n                even = Some(i);\n            }\n        } else {\n            if odd.is_none() {\n                odd = Some(i);\n            }\n        }\n    }\n    even.unwrap() - odd.unwrap()\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even = None;\n    let mut odd = None;\n    for i in list1 {\n        if i % 2 == 0 {\n            if even.is_none() {\n                even = Some(i);\n            }\n        } else {\n            if odd.is_none() {\n                odd = Some(i);\n            }\n        }\n    }\n    even.unwrap() - odd.unwrap()\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even_num = 0;\n    let mut odd_num = 0;\n    let mut even_found = false;\n    let mut odd_found = false;\n    for i in list1 {\n        if i % 2 == 0 {\n            if !even_found {\n                even_num = i;\n                even_found = true;\n            }\n        } else {\n            if !odd_found {\n                odd_num = i;\n                odd_found = true;\n            }\n        }\n        if even_found && odd_found {\n            break;\n        }\n    }\n    even_num - odd_num\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even_num = 0;\n    let mut odd_num = 0;\n    let mut even_flag = false;\n    let mut odd_flag = false;\n    for i in list1 {\n        if i % 2 == 0 {\n            if !even_flag {\n                even_num = i;\n                even_flag = true;\n            }\n        } else {\n            if !odd_flag {\n                odd_num = i;\n                odd_flag = true;\n            }\n        }\n    }\n    even_num - odd_num\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even = None;\n    let mut odd = None;\n    for i in list1 {\n        if i % 2 == 0 {\n            if even.is_none() {\n                even = Some(i);\n            }\n        } else {\n            if odd.is_none() {\n                odd = Some(i);\n            }\n        }\n        if even.is_some() && odd.is_some() {\n            break;\n        }\n    }\n    match (even, odd) {\n        (Some(e), Some(o)) => e - o,\n        _ => 0,\n    }\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even = None;\n    let mut odd = None;\n    for i in list1 {\n        if i % 2 == 0 {\n            if even.is_none() {\n                even = Some(i);\n            }\n        } else {\n            if odd.is_none() {\n                odd = Some(i);\n            }\n        }\n    }\n    let even = even.unwrap();\n    let odd = odd.unwrap();\n    even - odd\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even = None;\n    let mut odd = None;\n    for i in list1 {\n        if i % 2 == 0 {\n            if even.is_none() {\n                even = Some(i);\n            }\n        } else {\n            if odd.is_none() {\n                odd = Some(i);\n            }\n        }\n    }\n    even.unwrap() - odd.unwrap()\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even = None;\n    let mut odd = None;\n    for i in list1 {\n        if i % 2 == 0 {\n            even = Some(i);\n            break;\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = Some(i);\n            break;\n        }\n    }\n    if even.is_some() && odd.is_some() {\n        even.unwrap() - odd.unwrap()\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list1`\n   --> /tmp/tmpf3n5ip5h.rs:11:14\n    |\n2   | fn diff_even_odd(list1: Vec<isize>) -> isize {\n    |                  ----- move occurs because `list1` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n5   |     for i in list1 {\n    |              ----- `list1` moved due to this implicit call to `.into_iter()`\n...\n11  |     for i in list1 {\n    |              ^^^^^ value used here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list1`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n5   |     for i in &list1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even: Option<isize> = None;\n    let mut odd: Option<isize> = None;\n    for i in list1 {\n        if i % 2 == 0 {\n            even = Some(i);\n            break;\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = Some(i);\n            break;\n        }\n    }\n    match (even, odd) {\n        (Some(e), Some(o)) => e - o,\n        _ => 0,\n    }\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list1`\n   --> /tmp/tmprcg1x6dz.rs:11:14\n    |\n2   | fn diff_even_odd(list1: Vec<isize>) -> isize {\n    |                  ----- move occurs because `list1` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n5   |     for i in list1 {\n    |              ----- `list1` moved due to this implicit call to `.into_iter()`\n...\n11  |     for i in list1 {\n    |              ^^^^^ value used here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list1`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n5   |     for i in &list1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even_num = 0;\n    let mut odd_num = 0;\n    for i in list1 {\n        if i % 2 == 0 {\n            even_num = i;\n            break;\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd_num = i;\n            break;\n        }\n    }\n    even_num - odd_num\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list1`\n   --> /tmp/tmpngg4qo0t.rs:11:14\n    |\n2   | fn diff_even_odd(list1: Vec<isize>) -> isize {\n    |                  ----- move occurs because `list1` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n5   |     for i in list1 {\n    |              ----- `list1` moved due to this implicit call to `.into_iter()`\n...\n11  |     for i in list1 {\n    |              ^^^^^ value used here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list1`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n5   |     for i in &list1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even_num = 0;\n    let mut odd_num = 0;\n    for num in list1 {\n        if num % 2 == 0 {\n            even_num = num;\n            break;\n        }\n    }\n    for num in list1 {\n        if num % 2 != 0 {\n            odd_num = num;\n            break;\n        }\n    }\n    even_num - odd_num\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list1`\n   --> /tmp/tmpa83fvxsm.rs:11:16\n    |\n2   | fn diff_even_odd(list1: Vec<isize>) -> isize {\n    |                  ----- move occurs because `list1` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n5   |     for num in list1 {\n    |                ----- `list1` moved due to this implicit call to `.into_iter()`\n...\n11  |     for num in list1 {\n    |                ^^^^^ value used here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list1`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n5   |     for num in &list1 {\n    |                +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even = None;\n    let mut odd = None;\n    for i in list1 {\n        if i % 2 == 0 {\n            even = Some(i);\n            break;\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = Some(i);\n            break;\n        }\n    }\n    match (even, odd) {\n        (Some(e), Some(o)) => e - o,\n        _ => 0,\n    }\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list1`\n   --> /tmp/tmp6v04kwpm.rs:11:14\n    |\n2   | fn diff_even_odd(list1: Vec<isize>) -> isize {\n    |                  ----- move occurs because `list1` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n5   |     for i in list1 {\n    |              ----- `list1` moved due to this implicit call to `.into_iter()`\n...\n11  |     for i in list1 {\n    |              ^^^^^ value used here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list1`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n5   |     for i in &list1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even = None;\n    let mut odd = None;\n    for i in list1 {\n        if i % 2 == 0 {\n            even = Some(i);\n            break;\n        }\n    }\n    for i in list1 {\n        if i % 2 == 1 {\n            odd = Some(i);\n            break;\n        }\n    }\n    match (even, odd) {\n        (Some(e), Some(o)) => e - o,\n        _ => 0,\n    }\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list1`\n   --> /tmp/tmpo9v9ulsb.rs:11:14\n    |\n2   | fn diff_even_odd(list1: Vec<isize>) -> isize {\n    |                  ----- move occurs because `list1` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n5   |     for i in list1 {\n    |              ----- `list1` moved due to this implicit call to `.into_iter()`\n...\n11  |     for i in list1 {\n    |              ^^^^^ value used here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list1`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n5   |     for i in &list1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even = None;\n    let mut odd = None;\n    for x in list1 {\n        if x % 2 == 0 {\n            if even.is_none() {\n                even = Some(x);\n            }\n        } else {\n            if odd.is_none() {\n                odd = Some(x);\n            }\n        }\n    }\n    even.unwrap_or(0) - odd.unwrap_or(0)\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even: Option<isize> = None;\n    let mut odd: Option<isize> = None;\n    for i in list1 {\n        if i % 2 == 0 {\n            if even.is_none() {\n                even = Some(i);\n            }\n        } else {\n            if odd.is_none() {\n                odd = Some(i);\n            }\n        }\n    }\n    even.unwrap() - odd.unwrap()\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even_num = None;\n    let mut odd_num = None;\n    for num in list1 {\n        if num % 2 == 0 {\n            if even_num.is_none() {\n                even_num = Some(num);\n            }\n        } else {\n            if odd_num.is_none() {\n                odd_num = Some(num);\n            }\n        }\n    }\n    even_num.unwrap() - odd_num.unwrap()\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even = None;\n    let mut odd = None;\n    for i in list1 {\n        if i % 2 == 0 {\n            if even.is_none() {\n                even = Some(i);\n            }\n        } else {\n            if odd.is_none() {\n                odd = Some(i);\n            }\n        }\n    }\n    even.unwrap() - odd.unwrap()\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even = None;\n    let mut odd = None;\n    for n in list1 {\n        if n % 2 == 0 {\n            if even.is_none() {\n                even = Some(n);\n            }\n        } else {\n            if odd.is_none() {\n                odd = Some(n);\n            }\n        }\n    }\n    even.unwrap_or(0) - odd.unwrap_or(0)\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even = None;\n    let mut odd = None;\n    for i in list1 {\n        if i % 2 == 0 {\n            if even.is_none() {\n                even = Some(i);\n            }\n        } else {\n            if odd.is_none() {\n                odd = Some(i);\n            }\n        }\n    }\n    even.unwrap() - odd.unwrap()\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even = None;\n    let mut odd = None;\n    for i in list1 {\n        if i % 2 == 0 {\n            if even.is_none() {\n                even = Some(i);\n            }\n        } else {\n            if odd.is_none() {\n                odd = Some(i);\n            }\n        }\n    }\n    if even.is_none() || odd.is_none() {\n        return 0;\n    }\n    even.unwrap() - odd.unwrap()\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even_odd_diff = 0;\n    let mut even_found = false;\n    let mut odd_found = false;\n    for i in list1 {\n        if i % 2 == 0 && !even_found {\n            even_odd_diff = i;\n            even_found = true;\n        } else if i % 2 != 0 && !odd_found {\n            even_odd_diff -= i;\n            odd_found = true;\n        }\n        if even_found && odd_found {\n            break;\n        }\n    }\n    even_odd_diff\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `3`', /tmp/tmppq4wrwcr.rs:23:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even = None;\n    let mut odd = None;\n    for i in list1 {\n        if i % 2 == 0 {\n            if even.is_none() {\n                even = Some(i);\n            }\n        } else {\n            if odd.is_none() {\n                odd = Some(i);\n            }\n        }\n    }\n    even.unwrap_or(0) - odd.unwrap_or(0)\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even = None;\n    let mut odd = None;\n    for i in list1 {\n        if i % 2 == 0 {\n            if even.is_none() {\n                even = Some(i);\n            }\n        } else {\n            if odd.is_none() {\n                odd = Some(i);\n            }\n        }\n    }\n    even.unwrap_or(0) - odd.unwrap_or(0)\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even = None;\n    let mut odd = None;\n\n    for i in list1 {\n        if i % 2 == 0 {\n            if even.is_none() {\n                even = Some(i);\n            }\n        } else {\n            if odd.is_none() {\n                odd = Some(i);\n            }\n        }\n    }\n\n    match (even, odd) {\n        (Some(e), Some(o)) => e - o,\n        _ => 0,\n    }\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even = None;\n    let mut odd = None;\n    for i in list1 {\n        if i % 2 == 0 {\n            if even.is_none() {\n                even = Some(i);\n            }\n        } else {\n            if odd.is_none() {\n                odd = Some(i);\n            }\n        }\n    }\n    match (even, odd) {\n        (Some(e), Some(o)) => e - o,\n        _ => 0,\n    }\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even_num = 0;\n    let mut odd_num = 0;\n    for i in list1 {\n        if i % 2 == 0 {\n            even_num = i;\n            break;\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd_num = i;\n            break;\n        }\n    }\n    even_num - odd_num\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list1`\n   --> /tmp/tmpngg4qo0t.rs:11:14\n    |\n2   | fn diff_even_odd(list1: Vec<isize>) -> isize {\n    |                  ----- move occurs because `list1` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n5   |     for i in list1 {\n    |              ----- `list1` moved due to this implicit call to `.into_iter()`\n...\n11  |     for i in list1 {\n    |              ^^^^^ value used here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list1`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n5   |     for i in &list1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even = None;\n    let mut odd = None;\n    for i in list1 {\n        if i % 2 == 0 {\n            even = Some(i);\n            break;\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = Some(i);\n            break;\n        }\n    }\n    match (even, odd) {\n        (Some(e), Some(o)) => e - o,\n        _ => 0,\n    }\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list1`\n   --> /tmp/tmp6v04kwpm.rs:11:14\n    |\n2   | fn diff_even_odd(list1: Vec<isize>) -> isize {\n    |                  ----- move occurs because `list1` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n5   |     for i in list1 {\n    |              ----- `list1` moved due to this implicit call to `.into_iter()`\n...\n11  |     for i in list1 {\n    |              ^^^^^ value used here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list1`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n5   |     for i in &list1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut even_found = false;\n    let mut odd_found = false;\n\n    for i in list1 {\n        if i % 2 == 0 {\n            if !even_found {\n                even = i;\n                even_found = true;\n            }\n        } else {\n            if !odd_found {\n                odd = i;\n                odd_found = true;\n            }\n        }\n        if even_found && odd_found {\n            break;\n        }\n    }\n\n    even - odd\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even = None;\n    let mut odd = None;\n\n    for i in list1 {\n        if i % 2 == 0 {\n            if even.is_none() {\n                even = Some(i);\n            }\n        } else {\n            if odd.is_none() {\n                odd = Some(i);\n            }\n        }\n    }\n\n    match (even, odd) {\n        (Some(even), Some(odd)) => even - odd,\n        _ => 0,\n    }\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even = None;\n    let mut odd = None;\n    for i in list1 {\n        if i % 2 == 0 {\n            if even.is_none() {\n                even = Some(i);\n            }\n        } else {\n            if odd.is_none() {\n                odd = Some(i);\n            }\n        }\n    }\n    even.unwrap() - odd.unwrap()\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even: isize = 0;\n    let mut odd: isize = 0;\n    let mut even_found = false;\n    let mut odd_found = false;\n    for i in list1 {\n        if i % 2 == 0 {\n            if !even_found {\n                even = i;\n                even_found = true;\n            }\n        } else {\n            if !odd_found {\n                odd = i;\n                odd_found = true;\n            }\n        }\n        if even_found && odd_found {\n            break;\n        }\n    }\n    even - odd\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even_num = 0;\n    let mut odd_num = 0;\n    let mut even_flag = false;\n    let mut odd_flag = false;\n    for i in list1 {\n        if i % 2 == 0 {\n            if !even_flag {\n                even_num = i;\n                even_flag = true;\n            }\n        } else {\n            if !odd_flag {\n                odd_num = i;\n                odd_flag = true;\n            }\n        }\n        if even_flag && odd_flag {\n            break;\n        }\n    }\n    even_num - odd_num\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even_num = 0;\n    let mut odd_num = 0;\n    let mut flag = false;\n    for i in list1 {\n        if i % 2 == 0 {\n            if flag == false {\n                even_num = i;\n                flag = true;\n            }\n        } else {\n            if flag == true {\n                odd_num = i;\n                break;\n            }\n        }\n    }\n    even_num - odd_num\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `-1`,\n right: `1`', /tmp/tmpdqcyd1t2.rs:25:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even = None;\n    let mut odd = None;\n    for i in list1 {\n        if i % 2 == 0 {\n            if even.is_none() {\n                even = Some(i);\n            }\n        } else {\n            if odd.is_none() {\n                odd = Some(i);\n            }\n        }\n    }\n    let even = even.unwrap();\n    let odd = odd.unwrap();\n    if even > odd {\n        even - odd\n    } else {\n        odd - even\n    }\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even_num = 0;\n    let mut odd_num = 0;\n    for i in list1 {\n        if i % 2 == 0 {\n            even_num = i;\n            break;\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd_num = i;\n            break;\n        }\n    }\n    even_num - odd_num\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list1`\n   --> /tmp/tmpngg4qo0t.rs:11:14\n    |\n2   | fn diff_even_odd(list1: Vec<isize>) -> isize {\n    |                  ----- move occurs because `list1` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n5   |     for i in list1 {\n    |              ----- `list1` moved due to this implicit call to `.into_iter()`\n...\n11  |     for i in list1 {\n    |              ^^^^^ value used here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list1`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n5   |     for i in &list1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even = None;\n    let mut odd = None;\n    for item in list1 {\n        if item % 2 == 0 {\n            if even.is_none() {\n                even = Some(item);\n            }\n        } else {\n            if odd.is_none() {\n                odd = Some(item);\n            }\n        }\n    }\n    even.unwrap() - odd.unwrap()\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even_num = 0;\n    let mut odd_num = 0;\n    let mut even_found = false;\n    let mut odd_found = false;\n    for i in list1 {\n        if i % 2 == 0 && !even_found {\n            even_num = i;\n            even_found = true;\n        } else if i % 2 != 0 && !odd_found {\n            odd_num = i;\n            odd_found = true;\n        }\n        if even_found && odd_found {\n            break;\n        }\n    }\n    even_num - odd_num\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut even_found = false;\n    let mut odd_found = false;\n    for i in list1 {\n        if i % 2 == 0 {\n            if !even_found {\n                even = i;\n                even_found = true;\n            }\n        } else {\n            if !odd_found {\n                odd = i;\n                odd_found = true;\n            }\n        }\n        if even_found && odd_found {\n            break;\n        }\n    }\n    even - odd\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even: isize = 0;\n    let mut odd: isize = 0;\n    let mut even_found = false;\n    let mut odd_found = false;\n    for i in list1 {\n        if i % 2 == 0 && !even_found {\n            even = i;\n            even_found = true;\n        } else if i % 2 != 0 && !odd_found {\n            odd = i;\n            odd_found = true;\n        }\n    }\n    even - odd\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even = 0;\n    let mut odd = 0;\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i;\n            break;\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i;\n            break;\n        }\n    }\n    even - odd\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list1`\n   --> /tmp/tmp3nabz2h0.rs:11:14\n    |\n2   | fn diff_even_odd(list1: Vec<isize>) -> isize {\n    |                  ----- move occurs because `list1` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n5   |     for i in list1 {\n    |              ----- `list1` moved due to this implicit call to `.into_iter()`\n...\n11  |     for i in list1 {\n    |              ^^^^^ value used here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list1`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n5   |     for i in &list1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even_num = 0;\n    let mut odd_num = 0;\n    let mut even_found = false;\n    let mut odd_found = false;\n    for num in list1 {\n        if num % 2 == 0 {\n            if !even_found {\n                even_num = num;\n                even_found = true;\n            }\n        } else {\n            if !odd_found {\n                odd_num = num;\n                odd_found = true;\n            }\n        }\n        if even_found && odd_found {\n            break;\n        }\n    }\n    even_num - odd_num\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even = None;\n    let mut odd = None;\n    for i in list1 {\n        if i % 2 == 0 {\n            if even.is_none() {\n                even = Some(i);\n            }\n        } else {\n            if odd.is_none() {\n                odd = Some(i);\n            }\n        }\n    }\n    even.unwrap() - odd.unwrap()\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even = None;\n    let mut odd = None;\n    for x in list1 {\n        if x % 2 == 0 {\n            if even.is_none() {\n                even = Some(x);\n            }\n        } else {\n            if odd.is_none() {\n                odd = Some(x);\n            }\n        }\n    }\n    even.unwrap_or(0) - odd.unwrap_or(0)\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even_num = 0;\n    let mut odd_num = 0;\n    let mut even_found = false;\n    let mut odd_found = false;\n    for num in list1 {\n        if num % 2 == 0 {\n            if !even_found {\n                even_num = num;\n                even_found = true;\n            }\n        } else {\n            if !odd_found {\n                odd_num = num;\n                odd_found = true;\n            }\n        }\n    }\n    even_num - odd_num\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even = 0;\n    let mut odd = 0;\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i;\n            break;\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i;\n            break;\n        }\n    }\n    even - odd\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list1`\n   --> /tmp/tmp3nabz2h0.rs:11:14\n    |\n2   | fn diff_even_odd(list1: Vec<isize>) -> isize {\n    |                  ----- move occurs because `list1` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n5   |     for i in list1 {\n    |              ----- `list1` moved due to this implicit call to `.into_iter()`\n...\n11  |     for i in list1 {\n    |              ^^^^^ value used here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list1`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n5   |     for i in &list1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even_num = 0;\n    let mut odd_num = 0;\n    let mut even_found = false;\n    let mut odd_found = false;\n    for i in list1 {\n        if i % 2 == 0 {\n            if !even_found {\n                even_num = i;\n                even_found = true;\n            }\n        } else {\n            if !odd_found {\n                odd_num = i;\n                odd_found = true;\n            }\n        }\n        if even_found && odd_found {\n            break;\n        }\n    }\n    even_num - odd_num\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even = None;\n    let mut odd = None;\n    for i in list1 {\n        if i % 2 == 0 {\n            if even.is_none() {\n                even = Some(i);\n            }\n        } else {\n            if odd.is_none() {\n                odd = Some(i);\n            }\n        }\n    }\n    match (even, odd) {\n        (Some(even), Some(odd)) => even - odd,\n        _ => 0,\n    }\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut even_found = false;\n    let mut odd_found = false;\n    for i in list1 {\n        if i % 2 == 0 && !even_found {\n            even = i;\n            even_found = true;\n        } else if i % 2 != 0 && !odd_found {\n            odd = i;\n            odd_found = true;\n        }\n        if even_found && odd_found {\n            break;\n        }\n    }\n    even - odd\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even_num = None;\n    let mut odd_num = None;\n    for num in list1 {\n        if num % 2 == 0 {\n            if even_num.is_none() {\n                even_num = Some(num);\n            }\n        } else {\n            if odd_num.is_none() {\n                odd_num = Some(num);\n            }\n        }\n    }\n    even_num.unwrap_or(0) - odd_num.unwrap_or(0)\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even = None;\n    let mut odd = None;\n    for i in list1 {\n        if i % 2 == 0 {\n            if even.is_none() {\n                even = Some(i);\n            }\n        } else {\n            if odd.is_none() {\n                odd = Some(i);\n            }\n        }\n    }\n    match (even, odd) {\n        (Some(e), Some(o)) => e - o,\n        _ => 0,\n    }\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even = None;\n    let mut odd = None;\n    for i in list1 {\n        if i % 2 == 0 {\n            if even.is_none() {\n                even = Some(i);\n            }\n        } else {\n            if odd.is_none() {\n                odd = Some(i);\n            }\n        }\n    }\n    let even = even.unwrap_or(0);\n    let odd = odd.unwrap_or(0);\n    even - odd\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even_num = 0;\n    let mut odd_num = 0;\n    let mut even_found = false;\n    let mut odd_found = false;\n    for i in list1 {\n        if i % 2 == 0 {\n            even_num = i;\n            even_found = true;\n            break;\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd_num = i;\n            odd_found = true;\n            break;\n        }\n    }\n    if even_found && odd_found {\n        even_num - odd_num\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list1`\n   --> /tmp/tmp3h2g07as.rs:14:14\n    |\n2   | fn diff_even_odd(list1: Vec<isize>) -> isize {\n    |                  ----- move occurs because `list1` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n7   |     for i in list1 {\n    |              ----- `list1` moved due to this implicit call to `.into_iter()`\n...\n14  |     for i in list1 {\n    |              ^^^^^ value used here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list1`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n7   |     for i in &list1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even_num = 0;\n    let mut odd_num = 0;\n    let mut even_found = false;\n    let mut odd_found = false;\n\n    for num in list1 {\n        if num % 2 == 0 {\n            if !even_found {\n                even_num = num;\n                even_found = true;\n            }\n        } else {\n            if !odd_found {\n                odd_num = num;\n                odd_found = true;\n            }\n        }\n    }\n\n    even_num - odd_num\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even = None;\n    let mut odd = None;\n    for x in list1 {\n        if x % 2 == 0 {\n            if even.is_none() {\n                even = Some(x);\n            }\n        } else {\n            if odd.is_none() {\n                odd = Some(x);\n            }\n        }\n    }\n    even.unwrap() - odd.unwrap()\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even = None;\n    let mut odd = None;\n    for i in list1 {\n        if i % 2 == 0 {\n            if even.is_none() {\n                even = Some(i);\n            }\n        } else {\n            if odd.is_none() {\n                odd = Some(i);\n            }\n        }\n    }\n    even.unwrap() - odd.unwrap()\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even = None;\n    let mut odd = None;\n    for i in list1 {\n        if i % 2 == 0 {\n            if even.is_none() {\n                even = Some(i);\n            }\n        } else {\n            if odd.is_none() {\n                odd = Some(i);\n            }\n        }\n    }\n    even.unwrap() - odd.unwrap()\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even_num = 0;\n    let mut odd_num = 0;\n    for i in list1 {\n        if i % 2 == 0 {\n            even_num = i;\n            break;\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd_num = i;\n            break;\n        }\n    }\n    even_num - odd_num\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list1`\n   --> /tmp/tmpngg4qo0t.rs:11:14\n    |\n2   | fn diff_even_odd(list1: Vec<isize>) -> isize {\n    |                  ----- move occurs because `list1` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n5   |     for i in list1 {\n    |              ----- `list1` moved due to this implicit call to `.into_iter()`\n...\n11  |     for i in list1 {\n    |              ^^^^^ value used here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list1`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n5   |     for i in &list1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even_num = 0;\n    let mut odd_num = 0;\n    for i in list1 {\n        if i % 2 == 0 {\n            even_num = i;\n            break;\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd_num = i;\n            break;\n        }\n    }\n    even_num - odd_num\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list1`\n   --> /tmp/tmpngg4qo0t.rs:11:14\n    |\n2   | fn diff_even_odd(list1: Vec<isize>) -> isize {\n    |                  ----- move occurs because `list1` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n5   |     for i in list1 {\n    |              ----- `list1` moved due to this implicit call to `.into_iter()`\n...\n11  |     for i in list1 {\n    |              ^^^^^ value used here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list1`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n5   |     for i in &list1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even = None;\n    let mut odd = None;\n    for i in list1 {\n        if i % 2 == 0 {\n            if even.is_none() {\n                even = Some(i);\n            }\n        } else {\n            if odd.is_none() {\n                odd = Some(i);\n            }\n        }\n    }\n    even.unwrap() - odd.unwrap()\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even_num = 0;\n    let mut odd_num = 0;\n    for i in list1 {\n        if i % 2 == 0 {\n            even_num = i;\n            break;\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd_num = i;\n            break;\n        }\n    }\n    even_num - odd_num\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list1`\n   --> /tmp/tmpngg4qo0t.rs:11:14\n    |\n2   | fn diff_even_odd(list1: Vec<isize>) -> isize {\n    |                  ----- move occurs because `list1` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n5   |     for i in list1 {\n    |              ----- `list1` moved due to this implicit call to `.into_iter()`\n...\n11  |     for i in list1 {\n    |              ^^^^^ value used here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list1`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n5   |     for i in &list1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even = None;\n    let mut odd = None;\n    for i in list1 {\n        if i % 2 == 0 {\n            if even.is_none() {\n                even = Some(i);\n            }\n        } else {\n            if odd.is_none() {\n                odd = Some(i);\n            }\n        }\n    }\n    even.unwrap() - odd.unwrap()\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even = None;\n    let mut odd = None;\n    for i in list1 {\n        if i % 2 == 0 {\n            if even.is_none() {\n                even = Some(i);\n            }\n        } else {\n            if odd.is_none() {\n                odd = Some(i);\n            }\n        }\n    }\n    match (even, odd) {\n        (Some(e), Some(o)) => e - o,\n        _ => 0,\n    }\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even = None;\n    let mut odd = None;\n    for n in list1 {\n        if n % 2 == 0 {\n            if even.is_none() {\n                even = Some(n);\n            }\n        } else {\n            if odd.is_none() {\n                odd = Some(n);\n            }\n        }\n    }\n    even.unwrap_or(0) - odd.unwrap_or(0)\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even = None;\n    let mut odd = None;\n    for i in list1 {\n        if i % 2 == 0 {\n            even = Some(i);\n            break;\n        }\n    }\n    for i in list1 {\n        if i % 2 == 1 {\n            odd = Some(i);\n            break;\n        }\n    }\n    match (even, odd) {\n        (Some(e), Some(o)) => e - o,\n        _ => 0,\n    }\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list1`\n   --> /tmp/tmpo9v9ulsb.rs:11:14\n    |\n2   | fn diff_even_odd(list1: Vec<isize>) -> isize {\n    |                  ----- move occurs because `list1` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n5   |     for i in list1 {\n    |              ----- `list1` moved due to this implicit call to `.into_iter()`\n...\n11  |     for i in list1 {\n    |              ^^^^^ value used here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list1`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n5   |     for i in &list1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even = None;\n    let mut odd = None;\n    for i in list1 {\n        if i % 2 == 0 {\n            even = Some(i);\n            break;\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = Some(i);\n            break;\n        }\n    }\n    match (even, odd) {\n        (Some(e), Some(o)) => e - o,\n        _ => 0,\n    }\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list1`\n   --> /tmp/tmp6v04kwpm.rs:11:14\n    |\n2   | fn diff_even_odd(list1: Vec<isize>) -> isize {\n    |                  ----- move occurs because `list1` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n5   |     for i in list1 {\n    |              ----- `list1` moved due to this implicit call to `.into_iter()`\n...\n11  |     for i in list1 {\n    |              ^^^^^ value used here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list1`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n5   |     for i in &list1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even = None;\n    let mut odd = None;\n    for n in list1 {\n        if n % 2 == 0 {\n            if even.is_none() {\n                even = Some(n);\n            }\n        } else {\n            if odd.is_none() {\n                odd = Some(n);\n            }\n        }\n    }\n    even.unwrap_or(0) - odd.unwrap_or(0)\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even = None;\n    let mut odd = None;\n\n    for i in list1 {\n        if i % 2 == 0 {\n            even = Some(i);\n            break;\n        }\n    }\n\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = Some(i);\n            break;\n        }\n    }\n\n    match (even, odd) {\n        (Some(e), Some(o)) => e - o,\n        _ => 0,\n    }\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list1`\n   --> /tmp/tmpdwvw_y7j.rs:13:14\n    |\n2   | fn diff_even_odd(list1: Vec<isize>) -> isize {\n    |                  ----- move occurs because `list1` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n6   |     for i in list1 {\n    |              ----- `list1` moved due to this implicit call to `.into_iter()`\n...\n13  |     for i in list1 {\n    |              ^^^^^ value used here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list1`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n6   |     for i in &list1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even = None;\n    let mut odd = None;\n    for i in list1 {\n        if i % 2 == 0 {\n            if even.is_none() {\n                even = Some(i);\n            }\n        } else {\n            if odd.is_none() {\n                odd = Some(i);\n            }\n        }\n        if even.is_some() && odd.is_some() {\n            break;\n        }\n    }\n    even.unwrap_or(0) - odd.unwrap_or(0)\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even = None;\n    let mut odd = None;\n    for i in list1 {\n        if i % 2 == 0 {\n            if even.is_none() {\n                even = Some(i);\n            }\n        } else {\n            if odd.is_none() {\n                odd = Some(i);\n            }\n        }\n    }\n    even.unwrap_or(0) - odd.unwrap_or(0)\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even = None;\n    let mut odd = None;\n\n    for n in list1 {\n        if n % 2 == 0 {\n            if even.is_none() {\n                even = Some(n);\n            }\n        } else {\n            if odd.is_none() {\n                odd = Some(n);\n            }\n        }\n    }\n\n    even.unwrap_or(0) - odd.unwrap_or(0)\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even = None;\n    let mut odd = None;\n    for i in list1 {\n        if i % 2 == 0 {\n            if even == None {\n                even = Some(i);\n            }\n        } else {\n            if odd == None {\n                odd = Some(i);\n            }\n        }\n    }\n    even.unwrap() - odd.unwrap()\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even_num = 0;\n    let mut odd_num = 0;\n    let mut even_found = false;\n    let mut odd_found = false;\n    for num in list1 {\n        if num % 2 == 0 {\n            if !even_found {\n                even_num = num;\n                even_found = true;\n            }\n        } else {\n            if !odd_found {\n                odd_num = num;\n                odd_found = true;\n            }\n        }\n        if even_found && odd_found {\n            break;\n        }\n    }\n    even_num - odd_num\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even = None;\n    let mut odd = None;\n    for i in list1 {\n        if i % 2 == 0 {\n            if even.is_none() {\n                even = Some(i);\n            }\n        } else {\n            if odd.is_none() {\n                odd = Some(i);\n            }\n        }\n    }\n    even.unwrap() - odd.unwrap()\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even = None;\n    let mut odd = None;\n    for i in list1 {\n        if i % 2 == 0 {\n            if even.is_none() {\n                even = Some(i);\n            }\n        } else {\n            if odd.is_none() {\n                odd = Some(i);\n            }\n        }\n    }\n    even.unwrap_or(0) - odd.unwrap_or(0)\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even_odd_diff = 0;\n    let mut even_found = false;\n    let mut odd_found = false;\n    for i in list1 {\n        if i % 2 == 0 && !even_found {\n            even_odd_diff = i;\n            even_found = true;\n        } else if i % 2 != 0 && !odd_found {\n            even_odd_diff -= i;\n            odd_found = true;\n        }\n    }\n    even_odd_diff\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `3`', /tmp/tmp0lftg75d.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even = None;\n    let mut odd = None;\n    for i in list1 {\n        if i % 2 == 0 {\n            even = Some(i);\n            break;\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = Some(i);\n            break;\n        }\n    }\n    match (even, odd) {\n        (Some(e), Some(o)) => e - o,\n        _ => 0,\n    }\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list1`\n   --> /tmp/tmp6v04kwpm.rs:11:14\n    |\n2   | fn diff_even_odd(list1: Vec<isize>) -> isize {\n    |                  ----- move occurs because `list1` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n5   |     for i in list1 {\n    |              ----- `list1` moved due to this implicit call to `.into_iter()`\n...\n11  |     for i in list1 {\n    |              ^^^^^ value used here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list1`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n5   |     for i in &list1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even = None;\n    let mut odd = None;\n    for i in list1 {\n        if i % 2 == 0 {\n            if even.is_none() {\n                even = Some(i);\n            }\n        } else {\n            if odd.is_none() {\n                odd = Some(i);\n            }\n        }\n    }\n    match (even, odd) {\n        (Some(e), Some(o)) => e - o,\n        _ => 0,\n    }\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even = None;\n    let mut odd = None;\n    for i in list1 {\n        if i % 2 == 0 {\n            if even.is_none() {\n                even = Some(i);\n            }\n        } else {\n            if odd.is_none() {\n                odd = Some(i);\n            }\n        }\n    }\n    match (even, odd) {\n        (Some(e), Some(o)) => e - o,\n        _ => 0,\n    }\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even = None;\n    let mut odd = None;\n\n    for i in list1 {\n        if i % 2 == 0 {\n            even = Some(i);\n            break;\n        }\n    }\n\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = Some(i);\n            break;\n        }\n    }\n\n    match (even, odd) {\n        (Some(e), Some(o)) => e - o,\n        _ => 0,\n    }\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list1`\n   --> /tmp/tmpdwvw_y7j.rs:13:14\n    |\n2   | fn diff_even_odd(list1: Vec<isize>) -> isize {\n    |                  ----- move occurs because `list1` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n6   |     for i in list1 {\n    |              ----- `list1` moved due to this implicit call to `.into_iter()`\n...\n13  |     for i in list1 {\n    |              ^^^^^ value used here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list1`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n6   |     for i in &list1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even = None;\n    let mut odd = None;\n    for i in list1 {\n        if i % 2 == 0 {\n            if even.is_none() {\n                even = Some(i);\n            }\n        } else {\n            if odd.is_none() {\n                odd = Some(i);\n            }\n        }\n    }\n    even.unwrap_or(0) - odd.unwrap_or(0)\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even = None;\n    let mut odd = None;\n    for i in list1 {\n        if i % 2 == 0 {\n            if even.is_none() {\n                even = Some(i);\n            }\n        } else {\n            if odd.is_none() {\n                odd = Some(i);\n            }\n        }\n    }\n    even.unwrap() - odd.unwrap()\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even = None;\n    let mut odd = None;\n    for n in list1 {\n        if n % 2 == 0 {\n            if even.is_none() {\n                even = Some(n);\n            }\n        } else {\n            if odd.is_none() {\n                odd = Some(n);\n            }\n        }\n    }\n    match (even, odd) {\n        (Some(e), Some(o)) => e - o,\n        _ => 0,\n    }\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even = None;\n    let mut odd = None;\n    for i in list1 {\n        if i % 2 == 0 {\n            if even.is_none() {\n                even = Some(i);\n            }\n        } else {\n            if odd.is_none() {\n                odd = Some(i);\n            }\n        }\n    }\n    even.unwrap() - odd.unwrap()\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even_num = 0;\n    let mut odd_num = 0;\n    let mut even_flag = false;\n    let mut odd_flag = false;\n    for i in list1 {\n        if i % 2 == 0 && !even_flag {\n            even_num = i;\n            even_flag = true;\n        }\n        if i % 2 != 0 && !odd_flag {\n            odd_num = i;\n            odd_flag = true;\n        }\n    }\n    even_num - odd_num\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even = None;\n    let mut odd = None;\n    for i in list1 {\n        if i % 2 == 0 {\n            if even.is_none() {\n                even = Some(i);\n            }\n        } else {\n            if odd.is_none() {\n                odd = Some(i);\n            }\n        }\n        if even.is_some() && odd.is_some() {\n            break;\n        }\n    }\n    even.unwrap_or(0) - odd.unwrap_or(0)\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even_num = 0;\n    let mut odd_num = 0;\n    let mut even_found = false;\n    let mut odd_found = false;\n    for i in list1 {\n        if i % 2 == 0 && !even_found {\n            even_num = i;\n            even_found = true;\n        }\n        if i % 2 != 0 && !odd_found {\n            odd_num = i;\n            odd_found = true;\n        }\n        if even_found && odd_found {\n            break;\n        }\n    }\n    even_num - odd_num\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even = None;\n    let mut odd = None;\n    for i in list1 {\n        if i % 2 == 0 {\n            if even.is_none() {\n                even = Some(i);\n            }\n        } else {\n            if odd.is_none() {\n                odd = Some(i);\n            }\n        }\n    }\n    match (even, odd) {\n        (Some(e), Some(o)) => e - o,\n        _ => 0,\n    }\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even_found = false;\n    let mut odd_found = false;\n    let mut even_num = 0;\n    let mut odd_num = 0;\n    for i in list1 {\n        if i % 2 == 0 && !even_found {\n            even_num = i;\n            even_found = true;\n        } else if i % 2 != 0 && !odd_found {\n            odd_num = i;\n            odd_found = true;\n        }\n        if even_found && odd_found {\n            break;\n        }\n    }\n    even_num - odd_num\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even_num = 0;\n    let mut odd_num = 0;\n    let mut even_found = false;\n    let mut odd_found = false;\n    for i in list1 {\n        if i % 2 == 0 {\n            if !even_found {\n                even_num = i;\n                even_found = true;\n            }\n        } else {\n            if !odd_found {\n                odd_num = i;\n                odd_found = true;\n            }\n        }\n    }\n    even_num - odd_num\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even = None;\n    let mut odd = None;\n    for i in list1 {\n        if i % 2 == 0 {\n            even = Some(i);\n            break;\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = Some(i);\n            break;\n        }\n    }\n    even.unwrap_or(0) - odd.unwrap_or(0)\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list1`\n   --> /tmp/tmp4l9gj36d.rs:11:14\n    |\n2   | fn diff_even_odd(list1: Vec<isize>) -> isize {\n    |                  ----- move occurs because `list1` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n5   |     for i in list1 {\n    |              ----- `list1` moved due to this implicit call to `.into_iter()`\n...\n11  |     for i in list1 {\n    |              ^^^^^ value used here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list1`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n5   |     for i in &list1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even = None;\n    let mut odd = None;\n    for i in list1 {\n        if i % 2 == 0 {\n            if even.is_none() {\n                even = Some(i);\n            }\n        } else {\n            if odd.is_none() {\n                odd = Some(i);\n            }\n        }\n    }\n    match (even, odd) {\n        (Some(e), Some(o)) => e - o,\n        _ => 0,\n    }\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even_num = 0;\n    let mut odd_num = 0;\n    let mut even_found = false;\n    let mut odd_found = false;\n    for i in list1 {\n        if i % 2 == 0 && !even_found {\n            even_num = i;\n            even_found = true;\n        }\n        if i % 2 != 0 && !odd_found {\n            odd_num = i;\n            odd_found = true;\n        }\n        if even_found && odd_found {\n            break;\n        }\n    }\n    even_num - odd_num\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even = None;\n    let mut odd = None;\n    for i in list1 {\n        if i % 2 == 0 {\n            even = Some(i);\n            break;\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = Some(i);\n            break;\n        }\n    }\n    match (even, odd) {\n        (Some(x), Some(y)) => x - y,\n        _ => 0,\n    }\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list1`\n   --> /tmp/tmpodzgbe8p.rs:11:14\n    |\n2   | fn diff_even_odd(list1: Vec<isize>) -> isize {\n    |                  ----- move occurs because `list1` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n5   |     for i in list1 {\n    |              ----- `list1` moved due to this implicit call to `.into_iter()`\n...\n11  |     for i in list1 {\n    |              ^^^^^ value used here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list1`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n5   |     for i in &list1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even = None;\n    let mut odd = None;\n    for i in list1 {\n        if i % 2 == 0 {\n            if even.is_none() {\n                even = Some(i);\n            }\n        } else {\n            if odd.is_none() {\n                odd = Some(i);\n            }\n        }\n    }\n    match (even, odd) {\n        (Some(e), Some(o)) => e - o,\n        _ => 0,\n    }\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even = None;\n    let mut odd = None;\n    for i in list1 {\n        if i % 2 == 0 {\n            if even.is_none() {\n                even = Some(i);\n            }\n        } else {\n            if odd.is_none() {\n                odd = Some(i);\n            }\n        }\n    }\n    match (even, odd) {\n        (Some(e), Some(o)) => e - o,\n        (Some(e), None) => e,\n        (None, Some(o)) => -o,\n        (None, None) => 0,\n    }\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even = None;\n    let mut odd = None;\n    for i in list1 {\n        if i % 2 == 0 {\n            even = Some(i);\n            break;\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = Some(i);\n            break;\n        }\n    }\n    match (even, odd) {\n        (Some(even), Some(odd)) => even - odd,\n        _ => 0,\n    }\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list1`\n   --> /tmp/tmpo0rtb3uy.rs:11:14\n    |\n2   | fn diff_even_odd(list1: Vec<isize>) -> isize {\n    |                  ----- move occurs because `list1` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n5   |     for i in list1 {\n    |              ----- `list1` moved due to this implicit call to `.into_iter()`\n...\n11  |     for i in list1 {\n    |              ^^^^^ value used here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list1`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n5   |     for i in &list1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even = None;\n    let mut odd = None;\n    for i in list1 {\n        if i % 2 == 0 {\n            if even.is_none() {\n                even = Some(i);\n            }\n        } else {\n            if odd.is_none() {\n                odd = Some(i);\n            }\n        }\n    }\n    even.unwrap_or(0) - odd.unwrap_or(0)\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even = None;\n    let mut odd = None;\n    for i in list1 {\n        if i % 2 == 0 {\n            if even.is_none() {\n                even = Some(i);\n            }\n        } else {\n            if odd.is_none() {\n                odd = Some(i);\n            }\n        }\n    }\n    even.unwrap() - odd.unwrap()\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even = None;\n    let mut odd = None;\n    for i in list1 {\n        if i % 2 == 0 {\n            if even.is_none() {\n                even = Some(i);\n            }\n        } else {\n            if odd.is_none() {\n                odd = Some(i);\n            }\n        }\n    }\n    match (even, odd) {\n        (Some(e), Some(o)) => e - o,\n        _ => 0,\n    }\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even = None;\n    let mut odd = None;\n    for i in list1 {\n        if i % 2 == 0 {\n            even = Some(i);\n            break;\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = Some(i);\n            break;\n        }\n    }\n    match (even, odd) {\n        (Some(even), Some(odd)) => even - odd,\n        _ => 0,\n    }\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list1`\n   --> /tmp/tmpo0rtb3uy.rs:11:14\n    |\n2   | fn diff_even_odd(list1: Vec<isize>) -> isize {\n    |                  ----- move occurs because `list1` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n5   |     for i in list1 {\n    |              ----- `list1` moved due to this implicit call to `.into_iter()`\n...\n11  |     for i in list1 {\n    |              ^^^^^ value used here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list1`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n5   |     for i in &list1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even = None;\n    let mut odd = None;\n    for item in list1 {\n        if item % 2 == 0 {\n            if even.is_none() {\n                even = Some(item);\n            }\n        } else {\n            if odd.is_none() {\n                odd = Some(item);\n            }\n        }\n    }\n    match (even, odd) {\n        (Some(e), Some(o)) => e - o,\n        _ => 0,\n    }\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even_num = 0;\n    let mut odd_num = 0;\n    let mut even_found = false;\n    let mut odd_found = false;\n\n    for num in list1 {\n        if num % 2 == 0 && !even_found {\n            even_num = num;\n            even_found = true;\n        } else if num % 2 != 0 && !odd_found {\n            odd_num = num;\n            odd_found = true;\n        }\n    }\n\n    even_num - odd_num\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even = None;\n    let mut odd = None;\n    for i in list1 {\n        if i % 2 == 0 {\n            even = Some(i);\n            break;\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = Some(i);\n            break;\n        }\n    }\n    match (even, odd) {\n        (Some(x), Some(y)) => x - y,\n        _ => 0,\n    }\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list1`\n   --> /tmp/tmpodzgbe8p.rs:11:14\n    |\n2   | fn diff_even_odd(list1: Vec<isize>) -> isize {\n    |                  ----- move occurs because `list1` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n5   |     for i in list1 {\n    |              ----- `list1` moved due to this implicit call to `.into_iter()`\n...\n11  |     for i in list1 {\n    |              ^^^^^ value used here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list1`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n5   |     for i in &list1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even = 0;\n    let mut odd = 0;\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i;\n            break;\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i;\n            break;\n        }\n    }\n    even - odd\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list1`\n   --> /tmp/tmp3nabz2h0.rs:11:14\n    |\n2   | fn diff_even_odd(list1: Vec<isize>) -> isize {\n    |                  ----- move occurs because `list1` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n5   |     for i in list1 {\n    |              ----- `list1` moved due to this implicit call to `.into_iter()`\n...\n11  |     for i in list1 {\n    |              ^^^^^ value used here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list1`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n5   |     for i in &list1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even: Option<isize> = None;\n    let mut odd: Option<isize> = None;\n    for i in list1 {\n        if i % 2 == 0 {\n            if even.is_none() {\n                even = Some(i);\n            }\n        } else {\n            if odd.is_none() {\n                odd = Some(i);\n            }\n        }\n    }\n    if even.is_none() || odd.is_none() {\n        return 0;\n    }\n    even.unwrap() - odd.unwrap()\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even = None;\n    let mut odd = None;\n    for i in list1 {\n        if i % 2 == 0 {\n            if even.is_none() {\n                even = Some(i);\n            }\n        } else {\n            if odd.is_none() {\n                odd = Some(i);\n            }\n        }\n    }\n    match (even, odd) {\n        (Some(e), Some(o)) => e - o,\n        _ => 0,\n    }\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even_num = 0;\n    let mut odd_num = 0;\n    let mut even_found = false;\n    let mut odd_found = false;\n    for num in list1 {\n        if num % 2 == 0 {\n            if !even_found {\n                even_num = num;\n                even_found = true;\n            }\n        } else {\n            if !odd_found {\n                odd_num = num;\n                odd_found = true;\n            }\n        }\n    }\n    even_num - odd_num\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even_num: isize = 0;\n    let mut odd_num: isize = 0;\n    let mut even_flag: bool = false;\n    let mut odd_flag: bool = false;\n    for i in list1 {\n        if i % 2 == 0 {\n            if even_flag == false {\n                even_num = i;\n                even_flag = true;\n            }\n        } else {\n            if odd_flag == false {\n                odd_num = i;\n                odd_flag = true;\n            }\n        }\n        if even_flag == true && odd_flag == true {\n            break;\n        }\n    }\n    even_num - odd_num\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even = None;\n    let mut odd = None;\n    for i in list1 {\n        if i % 2 == 0 {\n            even = Some(i);\n            break;\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = Some(i);\n            break;\n        }\n    }\n    match (even, odd) {\n        (Some(e), Some(o)) => e - o,\n        _ => 0,\n    }\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list1`\n   --> /tmp/tmp6v04kwpm.rs:11:14\n    |\n2   | fn diff_even_odd(list1: Vec<isize>) -> isize {\n    |                  ----- move occurs because `list1` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n5   |     for i in list1 {\n    |              ----- `list1` moved due to this implicit call to `.into_iter()`\n...\n11  |     for i in list1 {\n    |              ^^^^^ value used here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list1`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n5   |     for i in &list1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even = None;\n    let mut odd = None;\n    for i in list1 {\n        if i % 2 == 0 {\n            if even.is_none() {\n                even = Some(i);\n            }\n        } else {\n            if odd.is_none() {\n                odd = Some(i);\n            }\n        }\n    }\n    even.unwrap() - odd.unwrap()\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even = None;\n    let mut odd = None;\n    for i in list1 {\n        if i % 2 == 0 {\n            even = Some(i);\n            break;\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = Some(i);\n            break;\n        }\n    }\n    match (even, odd) {\n        (Some(e), Some(o)) => e - o,\n        _ => 0,\n    }\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list1`\n   --> /tmp/tmp6v04kwpm.rs:11:14\n    |\n2   | fn diff_even_odd(list1: Vec<isize>) -> isize {\n    |                  ----- move occurs because `list1` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n5   |     for i in list1 {\n    |              ----- `list1` moved due to this implicit call to `.into_iter()`\n...\n11  |     for i in list1 {\n    |              ^^^^^ value used here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list1`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n5   |     for i in &list1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even: isize = 0;\n    let mut odd: isize = 0;\n    let mut even_found = false;\n    let mut odd_found = false;\n    for i in list1 {\n        if i % 2 == 0 {\n            if !even_found {\n                even = i;\n                even_found = true;\n            }\n        } else {\n            if !odd_found {\n                odd = i;\n                odd_found = true;\n            }\n        }\n    }\n    even - odd\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even = None;\n    let mut odd = None;\n    for i in list1 {\n        if i % 2 == 0 {\n            even = Some(i);\n            break;\n        }\n    }\n    for i in list1 {\n        if i % 2 == 1 {\n            odd = Some(i);\n            break;\n        }\n    }\n    match (even, odd) {\n        (Some(e), Some(o)) => e - o,\n        _ => 0,\n    }\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list1`\n   --> /tmp/tmpo9v9ulsb.rs:11:14\n    |\n2   | fn diff_even_odd(list1: Vec<isize>) -> isize {\n    |                  ----- move occurs because `list1` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n5   |     for i in list1 {\n    |              ----- `list1` moved due to this implicit call to `.into_iter()`\n...\n11  |     for i in list1 {\n    |              ^^^^^ value used here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list1`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n5   |     for i in &list1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even = None;\n    let mut odd = None;\n    for n in list1 {\n        if n % 2 == 0 {\n            if even.is_none() {\n                even = Some(n);\n            }\n        } else {\n            if odd.is_none() {\n                odd = Some(n);\n            }\n        }\n    }\n    match (even, odd) {\n        (Some(e), Some(o)) => e - o,\n        _ => 0,\n    }\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut flag = false;\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i;\n            flag = true;\n            break;\n        }\n    }\n    if flag {\n        for i in list1 {\n            if i % 2 != 0 {\n                odd = i;\n                break;\n            }\n        }\n    }\n    even - odd\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list1`\n   --> /tmp/tmpvjrm31cu.rs:14:18\n    |\n2   | fn diff_even_odd(list1: Vec<isize>) -> isize {\n    |                  ----- move occurs because `list1` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n6   |     for i in list1 {\n    |              ----- `list1` moved due to this implicit call to `.into_iter()`\n...\n14  |         for i in list1 {\n    |                  ^^^^^ value used here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list1`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n6   |     for i in &list1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even = None;\n    let mut odd = None;\n    for i in list1 {\n        if i % 2 == 0 {\n            if even.is_none() {\n                even = Some(i);\n            }\n        } else {\n            if odd.is_none() {\n                odd = Some(i);\n            }\n        }\n    }\n    even.unwrap() - odd.unwrap()\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even = None;\n    let mut odd = None;\n    for i in list1 {\n        if i % 2 == 0 {\n            if even.is_none() {\n                even = Some(i);\n            }\n        } else {\n            if odd.is_none() {\n                odd = Some(i);\n            }\n        }\n    }\n    if even.is_none() || odd.is_none() {\n        return 0;\n    }\n    even.unwrap() - odd.unwrap()\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even = None;\n    let mut odd = None;\n    for n in list1 {\n        if n % 2 == 0 {\n            even = Some(n);\n            break;\n        }\n    }\n    for n in list1 {\n        if n % 2 != 0 {\n            odd = Some(n);\n            break;\n        }\n    }\n    match (even, odd) {\n        (Some(even), Some(odd)) => even - odd,\n        _ => 0,\n    }\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list1`\n   --> /tmp/tmpeateus_9.rs:11:14\n    |\n2   | fn diff_even_odd(list1: Vec<isize>) -> isize {\n    |                  ----- move occurs because `list1` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n5   |     for n in list1 {\n    |              ----- `list1` moved due to this implicit call to `.into_iter()`\n...\n11  |     for n in list1 {\n    |              ^^^^^ value used here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list1`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n5   |     for n in &list1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even = None;\n    let mut odd = None;\n    for i in list1 {\n        if i % 2 == 0 {\n            if even.is_none() {\n                even = Some(i);\n            }\n        } else {\n            if odd.is_none() {\n                odd = Some(i);\n            }\n        }\n    }\n    match (even, odd) {\n        (Some(e), Some(o)) => e - o,\n        _ => 0,\n    }\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even = None;\n    let mut odd = None;\n    for i in list1 {\n        if i % 2 == 0 {\n            if even.is_none() {\n                even = Some(i);\n            }\n        } else {\n            if odd.is_none() {\n                odd = Some(i);\n            }\n        }\n    }\n    even.unwrap() - odd.unwrap()\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even = None;\n    let mut odd = None;\n    for i in list1 {\n        if i % 2 == 0 {\n            if even.is_none() {\n                even = Some(i);\n            }\n        } else {\n            if odd.is_none() {\n                odd = Some(i);\n            }\n        }\n    }\n    even.unwrap() - odd.unwrap()\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even = None;\n    let mut odd = None;\n    for i in list1 {\n        if i % 2 == 0 {\n            even = Some(i);\n            break;\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = Some(i);\n            break;\n        }\n    }\n    even.unwrap_or(0) - odd.unwrap_or(0)\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list1`\n   --> /tmp/tmp4l9gj36d.rs:11:14\n    |\n2   | fn diff_even_odd(list1: Vec<isize>) -> isize {\n    |                  ----- move occurs because `list1` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n5   |     for i in list1 {\n    |              ----- `list1` moved due to this implicit call to `.into_iter()`\n...\n11  |     for i in list1 {\n    |              ^^^^^ value used here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list1`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n5   |     for i in &list1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even = None;\n    let mut odd = None;\n    for i in list1 {\n        if i % 2 == 0 {\n            if even.is_none() {\n                even = Some(i);\n            }\n        } else {\n            if odd.is_none() {\n                odd = Some(i);\n            }\n        }\n    }\n    if even.is_none() || odd.is_none() {\n        return 0;\n    }\n    even.unwrap() - odd.unwrap()\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even = None;\n    let mut odd = None;\n    for i in list1 {\n        if i % 2 == 0 {\n            even = Some(i);\n            break;\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = Some(i);\n            break;\n        }\n    }\n    match (even, odd) {\n        (Some(e), Some(o)) => e - o,\n        _ => 0,\n    }\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list1`\n   --> /tmp/tmp6v04kwpm.rs:11:14\n    |\n2   | fn diff_even_odd(list1: Vec<isize>) -> isize {\n    |                  ----- move occurs because `list1` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n5   |     for i in list1 {\n    |              ----- `list1` moved due to this implicit call to `.into_iter()`\n...\n11  |     for i in list1 {\n    |              ^^^^^ value used here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list1`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n5   |     for i in &list1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even = None;\n    let mut odd = None;\n    for i in list1 {\n        if i % 2 == 0 {\n            if even.is_none() {\n                even = Some(i);\n            }\n        } else {\n            if odd.is_none() {\n                odd = Some(i);\n            }\n        }\n    }\n    even.unwrap() - odd.unwrap()\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even = None;\n    let mut odd = None;\n    for i in list1 {\n        if i % 2 == 0 {\n            if even.is_none() {\n                even = Some(i);\n            }\n        } else {\n            if odd.is_none() {\n                odd = Some(i);\n            }\n        }\n        if even.is_some() && odd.is_some() {\n            break;\n        }\n    }\n    even.unwrap_or(0) - odd.unwrap_or(0)\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even = None;\n    let mut odd = None;\n    for i in list1 {\n        if i % 2 == 0 {\n            if even.is_none() {\n                even = Some(i);\n            }\n        } else {\n            if odd.is_none() {\n                odd = Some(i);\n            }\n        }\n    }\n    even.unwrap() - odd.unwrap()\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even = None;\n    let mut odd = None;\n    for i in list1 {\n        if i % 2 == 0 {\n            if even.is_none() {\n                even = Some(i);\n            }\n        } else {\n            if odd.is_none() {\n                odd = Some(i);\n            }\n        }\n    }\n    match (even, odd) {\n        (Some(e), Some(o)) => e - o,\n        _ => 0,\n    }\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even_num = 0;\n    let mut odd_num = 0;\n    let mut even_found = false;\n    let mut odd_found = false;\n    for i in list1 {\n        if i % 2 == 0 {\n            if !even_found {\n                even_num = i;\n                even_found = true;\n            }\n        } else {\n            if !odd_found {\n                odd_num = i;\n                odd_found = true;\n            }\n        }\n        if even_found && odd_found {\n            break;\n        }\n    }\n    even_num - odd_num\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even = None;\n    let mut odd = None;\n    for i in list1 {\n        if i % 2 == 0 {\n            even = Some(i);\n            break;\n        }\n    }\n    for i in list1 {\n        if i % 2 == 1 {\n            odd = Some(i);\n            break;\n        }\n    }\n    match (even, odd) {\n        (Some(e), Some(o)) => e - o,\n        _ => 0,\n    }\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list1`\n   --> /tmp/tmpo9v9ulsb.rs:11:14\n    |\n2   | fn diff_even_odd(list1: Vec<isize>) -> isize {\n    |                  ----- move occurs because `list1` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n5   |     for i in list1 {\n    |              ----- `list1` moved due to this implicit call to `.into_iter()`\n...\n11  |     for i in list1 {\n    |              ^^^^^ value used here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list1`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n5   |     for i in &list1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even = None;\n    let mut odd = None;\n    for i in list1 {\n        if i % 2 == 0 {\n            even = Some(i);\n            break;\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = Some(i);\n            break;\n        }\n    }\n    match (even, odd) {\n        (Some(even), Some(odd)) => even - odd,\n        _ => 0,\n    }\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list1`\n   --> /tmp/tmpo0rtb3uy.rs:11:14\n    |\n2   | fn diff_even_odd(list1: Vec<isize>) -> isize {\n    |                  ----- move occurs because `list1` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n5   |     for i in list1 {\n    |              ----- `list1` moved due to this implicit call to `.into_iter()`\n...\n11  |     for i in list1 {\n    |              ^^^^^ value used here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list1`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n5   |     for i in &list1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even = None;\n    let mut odd = None;\n    for i in list1 {\n        if i % 2 == 0 {\n            even = Some(i);\n            break;\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = Some(i);\n            break;\n        }\n    }\n    match (even, odd) {\n        (Some(e), Some(o)) => e - o,\n        _ => 0,\n    }\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list1`\n   --> /tmp/tmp6v04kwpm.rs:11:14\n    |\n2   | fn diff_even_odd(list1: Vec<isize>) -> isize {\n    |                  ----- move occurs because `list1` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n5   |     for i in list1 {\n    |              ----- `list1` moved due to this implicit call to `.into_iter()`\n...\n11  |     for i in list1 {\n    |              ^^^^^ value used here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list1`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n5   |     for i in &list1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even = None;\n    let mut odd = None;\n    for i in list1 {\n        if i % 2 == 0 {\n            even = Some(i);\n            break;\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = Some(i);\n            break;\n        }\n    }\n    match (even, odd) {\n        (Some(e), Some(o)) => e - o,\n        _ => 0,\n    }\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list1`\n   --> /tmp/tmp6v04kwpm.rs:11:14\n    |\n2   | fn diff_even_odd(list1: Vec<isize>) -> isize {\n    |                  ----- move occurs because `list1` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n5   |     for i in list1 {\n    |              ----- `list1` moved due to this implicit call to `.into_iter()`\n...\n11  |     for i in list1 {\n    |              ^^^^^ value used here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list1`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n5   |     for i in &list1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even = None;\n    let mut odd = None;\n    for i in list1 {\n        if i % 2 == 0 {\n            if even.is_none() {\n                even = Some(i);\n            }\n        } else {\n            if odd.is_none() {\n                odd = Some(i);\n            }\n        }\n    }\n    even.unwrap_or(0) - odd.unwrap_or(0)\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even_num = 0;\n    let mut odd_num = 0;\n    let mut even_found = false;\n    let mut odd_found = false;\n    for i in list1 {\n        if i % 2 == 0 && !even_found {\n            even_num = i;\n            even_found = true;\n        } else if i % 2 != 0 && !odd_found {\n            odd_num = i;\n            odd_found = true;\n        }\n        if even_found && odd_found {\n            break;\n        }\n    }\n    even_num - odd_num\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even_num = 0;\n    let mut odd_num = 0;\n    let mut even_flag = false;\n    let mut odd_flag = false;\n    for i in list1 {\n        if i % 2 == 0 && !even_flag {\n            even_num = i;\n            even_flag = true;\n        } else if i % 2 != 0 && !odd_flag {\n            odd_num = i;\n            odd_flag = true;\n        }\n        if even_flag && odd_flag {\n            break;\n        }\n    }\n    even_num - odd_num\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut even_found = false;\n    let mut odd_found = false;\n    for i in list1 {\n        if i % 2 == 0 && !even_found {\n            even = i;\n            even_found = true;\n        } else if i % 2 != 0 && !odd_found {\n            odd = i;\n            odd_found = true;\n        }\n    }\n    even - odd\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even = None;\n    let mut odd = None;\n    for i in list1 {\n        if i % 2 == 0 {\n            even = Some(i);\n            break;\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = Some(i);\n            break;\n        }\n    }\n    match (even, odd) {\n        (Some(e), Some(o)) => e - o,\n        _ => 0,\n    }\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list1`\n   --> /tmp/tmp6v04kwpm.rs:11:14\n    |\n2   | fn diff_even_odd(list1: Vec<isize>) -> isize {\n    |                  ----- move occurs because `list1` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n5   |     for i in list1 {\n    |              ----- `list1` moved due to this implicit call to `.into_iter()`\n...\n11  |     for i in list1 {\n    |              ^^^^^ value used here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list1`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n5   |     for i in &list1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even = None;\n    let mut odd = None;\n    for i in list1 {\n        if i % 2 == 0 {\n            if even.is_none() {\n                even = Some(i);\n            }\n        } else {\n            if odd.is_none() {\n                odd = Some(i);\n            }\n        }\n    }\n    even.unwrap_or(0) - odd.unwrap_or(0)\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even = None;\n    let mut odd = None;\n    for i in list1 {\n        if i % 2 == 0 {\n            even = Some(i);\n            break;\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = Some(i);\n            break;\n        }\n    }\n    match (even, odd) {\n        (Some(e), Some(o)) => e - o,\n        _ => 0,\n    }\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list1`\n   --> /tmp/tmp6v04kwpm.rs:11:14\n    |\n2   | fn diff_even_odd(list1: Vec<isize>) -> isize {\n    |                  ----- move occurs because `list1` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n5   |     for i in list1 {\n    |              ----- `list1` moved due to this implicit call to `.into_iter()`\n...\n11  |     for i in list1 {\n    |              ^^^^^ value used here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list1`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n5   |     for i in &list1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even = None;\n    let mut odd = None;\n    for i in list1 {\n        if i % 2 == 0 {\n            if even.is_none() {\n                even = Some(i);\n            }\n        } else {\n            if odd.is_none() {\n                odd = Some(i);\n            }\n        }\n    }\n    even.unwrap_or(0) - odd.unwrap_or(0)\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut even_found = false;\n    let mut odd_found = false;\n    for i in list1 {\n        if i % 2 == 0 && !even_found {\n            even = i;\n            even_found = true;\n        } else if i % 2 != 0 && !odd_found {\n            odd = i;\n            odd_found = true;\n        }\n        if even_found && odd_found {\n            break;\n        }\n    }\n    even - odd\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even = None;\n    let mut odd = None;\n    for i in list1 {\n        if i % 2 == 0 {\n            if even.is_none() {\n                even = Some(i);\n            }\n        } else {\n            if odd.is_none() {\n                odd = Some(i);\n            }\n        }\n        if even.is_some() && odd.is_some() {\n            break;\n        }\n    }\n    even.unwrap() - odd.unwrap()\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even_num = 0;\n    let mut odd_num = 0;\n    let mut even_found = false;\n    let mut odd_found = false;\n    for i in list1 {\n        if i % 2 == 0 {\n            if !even_found {\n                even_num = i;\n                even_found = true;\n            }\n        } else {\n            if !odd_found {\n                odd_num = i;\n                odd_found = true;\n            }\n        }\n        if even_found && odd_found {\n            break;\n        }\n    }\n    even_num - odd_num\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even_num = 0;\n    let mut odd_num = 0;\n    let mut even_found = false;\n    let mut odd_found = false;\n    for i in list1 {\n        if i % 2 == 0 {\n            if !even_found {\n                even_num = i;\n                even_found = true;\n            }\n        } else {\n            if !odd_found {\n                odd_num = i;\n                odd_found = true;\n            }\n        }\n        if even_found && odd_found {\n            break;\n        }\n    }\n    even_num - odd_num\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even: isize = 0;\n    let mut odd: isize = 0;\n    let mut even_found = false;\n    let mut odd_found = false;\n\n    for i in list1 {\n        if i % 2 == 0 && !even_found {\n            even = i;\n            even_found = true;\n        }\n        if i % 2 != 0 && !odd_found {\n            odd = i;\n            odd_found = true;\n        }\n        if even_found && odd_found {\n            break;\n        }\n    }\n    even - odd\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even_num = 0;\n    let mut odd_num = 0;\n    for i in list1 {\n        if i % 2 == 0 {\n            even_num = i;\n            break;\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd_num = i;\n            break;\n        }\n    }\n    even_num - odd_num\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list1`\n   --> /tmp/tmpngg4qo0t.rs:11:14\n    |\n2   | fn diff_even_odd(list1: Vec<isize>) -> isize {\n    |                  ----- move occurs because `list1` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n5   |     for i in list1 {\n    |              ----- `list1` moved due to this implicit call to `.into_iter()`\n...\n11  |     for i in list1 {\n    |              ^^^^^ value used here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list1`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n5   |     for i in &list1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even = None;\n    let mut odd = None;\n    for i in list1 {\n        if i % 2 == 0 {\n            if even.is_none() {\n                even = Some(i);\n            }\n        } else {\n            if odd.is_none() {\n                odd = Some(i);\n            }\n        }\n    }\n    even.unwrap_or(0) - odd.unwrap_or(0)\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even = None;\n    let mut odd = None;\n    for i in list1 {\n        if i % 2 == 0 {\n            if even.is_none() {\n                even = Some(i);\n            }\n        } else {\n            if odd.is_none() {\n                odd = Some(i);\n            }\n        }\n    }\n    if even.is_none() || odd.is_none() {\n        return 0;\n    }\n    even.unwrap() - odd.unwrap()\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even = None;\n    let mut odd = None;\n    for i in list1 {\n        if i % 2 == 0 {\n            if even.is_none() {\n                even = Some(i);\n            }\n        } else {\n            if odd.is_none() {\n                odd = Some(i);\n            }\n        }\n        if even.is_some() && odd.is_some() {\n            break;\n        }\n    }\n    let even = even.unwrap();\n    let odd = odd.unwrap();\n    even - odd\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even = 0;\n    let mut odd = 0;\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i;\n            break;\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i;\n            break;\n        }\n    }\n    even - odd\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list1`\n   --> /tmp/tmp3nabz2h0.rs:11:14\n    |\n2   | fn diff_even_odd(list1: Vec<isize>) -> isize {\n    |                  ----- move occurs because `list1` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n5   |     for i in list1 {\n    |              ----- `list1` moved due to this implicit call to `.into_iter()`\n...\n11  |     for i in list1 {\n    |              ^^^^^ value used here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list1`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n5   |     for i in &list1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even = None;\n    let mut odd = None;\n    for i in list1 {\n        if i % 2 == 0 {\n            even = Some(i);\n            break;\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = Some(i);\n            break;\n        }\n    }\n    match (even, odd) {\n        (Some(e), Some(o)) => e - o,\n        _ => 0,\n    }\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list1`\n   --> /tmp/tmp6v04kwpm.rs:11:14\n    |\n2   | fn diff_even_odd(list1: Vec<isize>) -> isize {\n    |                  ----- move occurs because `list1` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n5   |     for i in list1 {\n    |              ----- `list1` moved due to this implicit call to `.into_iter()`\n...\n11  |     for i in list1 {\n    |              ^^^^^ value used here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list1`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n5   |     for i in &list1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even = None;\n    let mut odd = None;\n    for i in list1 {\n        if i % 2 == 0 {\n            if even.is_none() {\n                even = Some(i);\n            }\n        } else {\n            if odd.is_none() {\n                odd = Some(i);\n            }\n        }\n        if even.is_some() && odd.is_some() {\n            break;\n        }\n    }\n    even.unwrap_or(0) - odd.unwrap_or(0)\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even = None;\n    let mut odd = None;\n    for i in list1 {\n        if i % 2 == 0 {\n            if even.is_none() {\n                even = Some(i);\n            }\n        } else {\n            if odd.is_none() {\n                odd = Some(i);\n            }\n        }\n    }\n    even.unwrap_or(0) - odd.unwrap_or(0)\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even = None;\n    let mut odd = None;\n    for i in list1 {\n        if i % 2 == 0 {\n            even = Some(i);\n            break;\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = Some(i);\n            break;\n        }\n    }\n    match (even, odd) {\n        (Some(e), Some(o)) => e - o,\n        _ => 0,\n    }\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list1`\n   --> /tmp/tmp6v04kwpm.rs:11:14\n    |\n2   | fn diff_even_odd(list1: Vec<isize>) -> isize {\n    |                  ----- move occurs because `list1` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n5   |     for i in list1 {\n    |              ----- `list1` moved due to this implicit call to `.into_iter()`\n...\n11  |     for i in list1 {\n    |              ^^^^^ value used here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list1`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n5   |     for i in &list1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even = None;\n    let mut odd = None;\n    for i in list1 {\n        if i % 2 == 0 {\n            even = Some(i);\n            break;\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = Some(i);\n            break;\n        }\n    }\n    match (even, odd) {\n        (Some(e), Some(o)) => e - o,\n        _ => 0,\n    }\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list1`\n   --> /tmp/tmp6v04kwpm.rs:11:14\n    |\n2   | fn diff_even_odd(list1: Vec<isize>) -> isize {\n    |                  ----- move occurs because `list1` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n5   |     for i in list1 {\n    |              ----- `list1` moved due to this implicit call to `.into_iter()`\n...\n11  |     for i in list1 {\n    |              ^^^^^ value used here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list1`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n5   |     for i in &list1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even = None;\n    let mut odd = None;\n    for item in list1 {\n        if item % 2 == 0 {\n            if even.is_none() {\n                even = Some(item);\n            }\n        } else {\n            if odd.is_none() {\n                odd = Some(item);\n            }\n        }\n    }\n    even.unwrap() - odd.unwrap()\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even: Option<isize> = None;\n    let mut odd: Option<isize> = None;\n    for i in list1 {\n        if i % 2 == 0 {\n            if even.is_none() {\n                even = Some(i);\n            }\n        } else {\n            if odd.is_none() {\n                odd = Some(i);\n            }\n        }\n    }\n    even.unwrap() - odd.unwrap()\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even = None;\n    let mut odd = None;\n    for i in list1 {\n        if i % 2 == 0 {\n            if even.is_none() {\n                even = Some(i);\n            }\n        } else {\n            if odd.is_none() {\n                odd = Some(i);\n            }\n        }\n    }\n    match (even, odd) {\n        (Some(e), Some(o)) => e - o,\n        _ => 0,\n    }\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even = None;\n    let mut odd = None;\n    for i in list1 {\n        if i % 2 == 0 {\n            if even.is_none() {\n                even = Some(i);\n            }\n        } else {\n            if odd.is_none() {\n                odd = Some(i);\n            }\n        }\n    }\n    even.unwrap_or(0) - odd.unwrap_or(0)\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even = None;\n    let mut odd = None;\n    for i in list1 {\n        if i % 2 == 0 {\n            if even.is_none() {\n                even = Some(i);\n            }\n        } else {\n            if odd.is_none() {\n                odd = Some(i);\n            }\n        }\n    }\n    even.unwrap() - odd.unwrap()\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even = None;\n    let mut odd = None;\n    for i in list1 {\n        if i % 2 == 0 {\n            if even.is_none() {\n                even = Some(i);\n            }\n        } else {\n            if odd.is_none() {\n                odd = Some(i);\n            }\n        }\n    }\n    if even.is_none() || odd.is_none() {\n        return 0;\n    }\n    even.unwrap() - odd.unwrap()\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even_num = 0;\n    let mut odd_num = 0;\n    let mut even_flag = false;\n    let mut odd_flag = false;\n    for i in list1 {\n        if i % 2 == 0 && !even_flag {\n            even_num = i;\n            even_flag = true;\n        }\n        if i % 2 != 0 && !odd_flag {\n            odd_num = i;\n            odd_flag = true;\n        }\n        if even_flag && odd_flag {\n            break;\n        }\n    }\n    even_num - odd_num\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even = None;\n    let mut odd = None;\n    for i in list1 {\n        if i % 2 == 0 {\n            even = Some(i);\n            break;\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = Some(i);\n            break;\n        }\n    }\n    match even {\n        Some(x) => match odd {\n            Some(y) => x - y,\n            None => 0,\n        },\n        None => 0,\n    }\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list1`\n   --> /tmp/tmp6sx2qfb5.rs:11:14\n    |\n2   | fn diff_even_odd(list1: Vec<isize>) -> isize {\n    |                  ----- move occurs because `list1` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n5   |     for i in list1 {\n    |              ----- `list1` moved due to this implicit call to `.into_iter()`\n...\n11  |     for i in list1 {\n    |              ^^^^^ value used here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list1`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n5   |     for i in &list1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even = None;\n    let mut odd = None;\n    for i in list1 {\n        if i % 2 == 0 {\n            if even.is_none() {\n                even = Some(i);\n            }\n        } else {\n            if odd.is_none() {\n                odd = Some(i);\n            }\n        }\n    }\n    even.unwrap_or(0) - odd.unwrap_or(0)\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even = None;\n    let mut odd = None;\n\n    for i in list1 {\n        if i % 2 == 0 {\n            even = Some(i);\n            break;\n        }\n    }\n\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = Some(i);\n            break;\n        }\n    }\n\n    match (even, odd) {\n        (Some(even), Some(odd)) => even - odd,\n        _ => 0,\n    }\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list1`\n   --> /tmp/tmp92bsuzi5.rs:13:14\n    |\n2   | fn diff_even_odd(list1: Vec<isize>) -> isize {\n    |                  ----- move occurs because `list1` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n6   |     for i in list1 {\n    |              ----- `list1` moved due to this implicit call to `.into_iter()`\n...\n13  |     for i in list1 {\n    |              ^^^^^ value used here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list1`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n6   |     for i in &list1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even_index = 0;\n    let mut odd_index = 0;\n    let mut even_found = false;\n    let mut odd_found = false;\n    for (index, item) in list1.iter().enumerate() {\n        if item % 2 == 0 && !even_found {\n            even_index = index;\n            even_found = true;\n        }\n        if item % 2 != 0 && !odd_found {\n            odd_index = index;\n            odd_found = true;\n        }\n        if even_found && odd_found {\n            break;\n        }\n    }\n    list1[even_index] - list1[odd_index]\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even: isize = 0;\n    let mut odd: isize = 0;\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i;\n            break;\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i;\n            break;\n        }\n    }\n    even - odd\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list1`\n   --> /tmp/tmp1udutb35.rs:11:14\n    |\n2   | fn diff_even_odd(list1: Vec<isize>) -> isize {\n    |                  ----- move occurs because `list1` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n5   |     for i in list1 {\n    |              ----- `list1` moved due to this implicit call to `.into_iter()`\n...\n11  |     for i in list1 {\n    |              ^^^^^ value used here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list1`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n5   |     for i in &list1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even_num = 0;\n    let mut odd_num = 0;\n    for i in list1 {\n        if i % 2 == 0 {\n            even_num = i;\n            break;\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd_num = i;\n            break;\n        }\n    }\n    even_num - odd_num\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list1`\n   --> /tmp/tmpngg4qo0t.rs:11:14\n    |\n2   | fn diff_even_odd(list1: Vec<isize>) -> isize {\n    |                  ----- move occurs because `list1` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n5   |     for i in list1 {\n    |              ----- `list1` moved due to this implicit call to `.into_iter()`\n...\n11  |     for i in list1 {\n    |              ^^^^^ value used here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list1`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n5   |     for i in &list1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even = None;\n    let mut odd = None;\n\n    for i in list1 {\n        match i % 2 {\n            0 => {\n                if even.is_none() {\n                    even = Some(i);\n                }\n            }\n            _ => {\n                if odd.is_none() {\n                    odd = Some(i);\n                }\n            }\n        }\n    }\n\n    even.unwrap() - odd.unwrap()\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut even_found = false;\n    let mut odd_found = false;\n    for i in list1 {\n        if i % 2 == 0 && !even_found {\n            even = i;\n            even_found = true;\n        }\n        if i % 2 != 0 && !odd_found {\n            odd = i;\n            odd_found = true;\n        }\n        if even_found && odd_found {\n            break;\n        }\n    }\n    even - odd\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even = None;\n    let mut odd = None;\n    for item in list1 {\n        if item % 2 == 0 {\n            if even.is_none() {\n                even = Some(item);\n            }\n        } else {\n            if odd.is_none() {\n                odd = Some(item);\n            }\n        }\n    }\n    even.unwrap_or(0) - odd.unwrap_or(0)\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut even_found = false;\n    let mut odd_found = false;\n    for i in list1 {\n        if i % 2 == 0 {\n            if !even_found {\n                even = i;\n                even_found = true;\n            }\n        } else {\n            if !odd_found {\n                odd = i;\n                odd_found = true;\n            }\n        }\n        if even_found && odd_found {\n            break;\n        }\n    }\n    even - odd\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even = 0;\n    let mut odd = 0;\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i;\n            break;\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i;\n            break;\n        }\n    }\n    even - odd\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list1`\n   --> /tmp/tmp3nabz2h0.rs:11:14\n    |\n2   | fn diff_even_odd(list1: Vec<isize>) -> isize {\n    |                  ----- move occurs because `list1` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n5   |     for i in list1 {\n    |              ----- `list1` moved due to this implicit call to `.into_iter()`\n...\n11  |     for i in list1 {\n    |              ^^^^^ value used here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list1`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n5   |     for i in &list1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even_num = 0;\n    let mut odd_num = 0;\n    let mut even_flag = false;\n    let mut odd_flag = false;\n\n    for i in list1 {\n        if i % 2 == 0 {\n            even_num = i;\n            even_flag = true;\n            break;\n        }\n    }\n\n    for i in list1 {\n        if i % 2 != 0 {\n            odd_num = i;\n            odd_flag = true;\n            break;\n        }\n    }\n\n    if even_flag && odd_flag {\n        even_num - odd_num\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list1`\n   --> /tmp/tmp6qibjw9q.rs:16:14\n    |\n2   | fn diff_even_odd(list1: Vec<isize>) -> isize {\n    |                  ----- move occurs because `list1` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n8   |     for i in list1 {\n    |              ----- `list1` moved due to this implicit call to `.into_iter()`\n...\n16  |     for i in list1 {\n    |              ^^^^^ value used here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list1`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n8   |     for i in &list1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut even_found = false;\n    let mut odd_found = false;\n    for i in list1 {\n        if i % 2 == 0 && !even_found {\n            even = i;\n            even_found = true;\n        } else if i % 2 != 0 && !odd_found {\n            odd = i;\n            odd_found = true;\n        }\n        if even_found && odd_found {\n            break;\n        }\n    }\n    even - odd\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even = None;\n    let mut odd = None;\n    for i in list1 {\n        if i % 2 == 0 {\n            if even.is_none() {\n                even = Some(i);\n            }\n        } else {\n            if odd.is_none() {\n                odd = Some(i);\n            }\n        }\n    }\n    if even.is_none() || odd.is_none() {\n        return 0;\n    }\n    even.unwrap() - odd.unwrap()\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even = None;\n    let mut odd = None;\n    for i in list1 {\n        if i % 2 == 0 {\n            if even.is_none() {\n                even = Some(i);\n            }\n        } else {\n            if odd.is_none() {\n                odd = Some(i);\n            }\n        }\n    }\n    even.unwrap_or(0) - odd.unwrap_or(0)\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even_num = 0;\n    let mut odd_num = 0;\n    let mut even_found = false;\n    let mut odd_found = false;\n    for i in list1 {\n        if i % 2 == 0 {\n            if !even_found {\n                even_num = i;\n                even_found = true;\n            }\n        } else {\n            if !odd_found {\n                odd_num = i;\n                odd_found = true;\n            }\n        }\n    }\n    even_num - odd_num\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even = None;\n    let mut odd = None;\n    for i in list1 {\n        if i % 2 == 0 {\n            if even.is_none() {\n                even = Some(i);\n            }\n        } else {\n            if odd.is_none() {\n                odd = Some(i);\n            }\n        }\n    }\n    even.unwrap_or(0) - odd.unwrap_or(0)\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even = None;\n    let mut odd = None;\n    for i in list1 {\n        if i % 2 == 0 {\n            if even.is_none() {\n                even = Some(i);\n            }\n        } else {\n            if odd.is_none() {\n                odd = Some(i);\n            }\n        }\n    }\n    match (even, odd) {\n        (Some(e), Some(o)) => e - o,\n        _ => 0,\n    }\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even = None;\n    let mut odd = None;\n    for i in list1 {\n        if i % 2 == 0 {\n            even = Some(i);\n            break;\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = Some(i);\n            break;\n        }\n    }\n    match (even, odd) {\n        (Some(even), Some(odd)) => even - odd,\n        _ => 0,\n    }\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list1`\n   --> /tmp/tmpo0rtb3uy.rs:11:14\n    |\n2   | fn diff_even_odd(list1: Vec<isize>) -> isize {\n    |                  ----- move occurs because `list1` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n5   |     for i in list1 {\n    |              ----- `list1` moved due to this implicit call to `.into_iter()`\n...\n11  |     for i in list1 {\n    |              ^^^^^ value used here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list1`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n5   |     for i in &list1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even = None;\n    let mut odd = None;\n    for i in list1 {\n        if i % 2 == 0 {\n            if even.is_none() {\n                even = Some(i);\n            }\n        } else {\n            if odd.is_none() {\n                odd = Some(i);\n            }\n        }\n    }\n    even.unwrap() - odd.unwrap()\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even = 0;\n    let mut odd = 0;\n    let mut first_even = true;\n    let mut first_odd = true;\n    for i in list1 {\n        if i % 2 == 0 {\n            if first_even {\n                even = i;\n                first_even = false;\n            }\n        } else {\n            if first_odd {\n                odd = i;\n                first_odd = false;\n            }\n        }\n    }\n    even - odd\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even_num = 0;\n    let mut odd_num = 0;\n    let mut even_found = false;\n    let mut odd_found = false;\n    for num in list1 {\n        if num % 2 == 0 && !even_found {\n            even_num = num;\n            even_found = true;\n        } else if num % 2 != 0 && !odd_found {\n            odd_num = num;\n            odd_found = true;\n        }\n        if even_found && odd_found {\n            break;\n        }\n    }\n    even_num - odd_num\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even = None;\n    let mut odd = None;\n    for i in list1 {\n        if i % 2 == 0 {\n            if even.is_none() {\n                even = Some(i);\n            }\n        } else {\n            if odd.is_none() {\n                odd = Some(i);\n            }\n        }\n    }\n    even.unwrap() - odd.unwrap()\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even = None;\n    let mut odd = None;\n    for i in list1 {\n        if i % 2 == 0 {\n            if even.is_none() {\n                even = Some(i);\n            }\n        } else {\n            if odd.is_none() {\n                odd = Some(i);\n            }\n        }\n    }\n    even.unwrap() - odd.unwrap()\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even = None;\n    let mut odd = None;\n    for i in list1 {\n        if i % 2 == 0 {\n            if even.is_none() {\n                even = Some(i);\n            }\n        } else {\n            if odd.is_none() {\n                odd = Some(i);\n            }\n        }\n    }\n    even.unwrap() - odd.unwrap()\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even = None;\n    let mut odd = None;\n    for i in list1 {\n        if i % 2 == 0 {\n            if even.is_none() {\n                even = Some(i);\n            }\n        } else {\n            if odd.is_none() {\n                odd = Some(i);\n            }\n        }\n    }\n    even.unwrap_or(0) - odd.unwrap_or(0)\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even = None;\n    let mut odd = None;\n    for x in list1 {\n        if x % 2 == 0 {\n            if even.is_none() {\n                even = Some(x);\n            }\n        } else {\n            if odd.is_none() {\n                odd = Some(x);\n            }\n        }\n    }\n    even.unwrap_or(0) - odd.unwrap_or(0)\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even_odd_diff = 0;\n    let mut even_found = false;\n    let mut odd_found = false;\n    for i in list1 {\n        if i % 2 == 0 && !even_found {\n            even_odd_diff = i;\n            even_found = true;\n        }\n        if i % 2 != 0 && !odd_found {\n            even_odd_diff -= i;\n            odd_found = true;\n        }\n        if even_found && odd_found {\n            break;\n        }\n    }\n    even_odd_diff\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `3`', /tmp/tmpz9pbbdne.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even = None;\n    let mut odd = None;\n    for i in list1 {\n        if i % 2 == 0 {\n            even = Some(i);\n            break;\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = Some(i);\n            break;\n        }\n    }\n    match (even, odd) {\n        (Some(x), Some(y)) => x - y,\n        _ => 0,\n    }\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1666123525,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list1`\n   --> /tmp/tmpodzgbe8p.rs:11:14\n    |\n2   | fn diff_even_odd(list1: Vec<isize>) -> isize {\n    |                  ----- move occurs because `list1` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n5   |     for i in list1 {\n    |              ----- `list1` moved due to this implicit call to `.into_iter()`\n...\n11  |     for i in list1 {\n    |              ^^^^^ value used here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list1`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n5   |     for i in &list1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even = None;\n    let mut odd = None;\n    for i in list1 {\n        if i % 2 == 0 {\n            if even.is_none() {\n                even = Some(i);\n            }\n        } else {\n            if odd.is_none() {\n                odd = Some(i);\n            }\n        }\n    }\n    even.unwrap_or(0) - odd.unwrap_or(0)\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even = None;\n    let mut odd = None;\n    for i in list1 {\n        if i % 2 == 0 {\n            even = Some(i);\n            break;\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = Some(i);\n            break;\n        }\n    }\n    match (even, odd) {\n        (Some(e), Some(o)) => e - o,\n        _ => 0,\n    }\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list1`\n   --> /tmp/tmp6v04kwpm.rs:11:14\n    |\n2   | fn diff_even_odd(list1: Vec<isize>) -> isize {\n    |                  ----- move occurs because `list1` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n5   |     for i in list1 {\n    |              ----- `list1` moved due to this implicit call to `.into_iter()`\n...\n11  |     for i in list1 {\n    |              ^^^^^ value used here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list1`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n5   |     for i in &list1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even = None;\n    let mut odd = None;\n    for i in list1 {\n        if i % 2 == 0 {\n            if even.is_none() {\n                even = Some(i);\n            }\n        } else {\n            if odd.is_none() {\n                odd = Some(i);\n            }\n        }\n    }\n    even.unwrap_or(0) - odd.unwrap_or(0)\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even = None;\n    let mut odd = None;\n    for i in list1 {\n        if i % 2 == 0 {\n            even = Some(i);\n            break;\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = Some(i);\n            break;\n        }\n    }\n    match (even, odd) {\n        (Some(e), Some(o)) => e - o,\n        _ => 0,\n    }\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list1`\n   --> /tmp/tmp6v04kwpm.rs:11:14\n    |\n2   | fn diff_even_odd(list1: Vec<isize>) -> isize {\n    |                  ----- move occurs because `list1` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n5   |     for i in list1 {\n    |              ----- `list1` moved due to this implicit call to `.into_iter()`\n...\n11  |     for i in list1 {\n    |              ^^^^^ value used here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list1`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n5   |     for i in &list1 {\n    |              +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to find the difference of the first even and first odd number of a given list.\nfn diff_even_odd(list1: Vec<isize>) -> isize {\n    let mut even = None;\n    let mut odd = None;\n    for i in list1 {\n        if i % 2 == 0 {\n            if even.is_none() {\n                even = Some(i);\n            }\n        } else {\n            if odd.is_none() {\n                odd = Some(i);\n            }\n        }\n    }\n    even.unwrap() - odd.unwrap()\n}\n\nfn main() {\n    let candidate = diff_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 3);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 1);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 9);\n}\n",
      "timestamp": 1665510310,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}