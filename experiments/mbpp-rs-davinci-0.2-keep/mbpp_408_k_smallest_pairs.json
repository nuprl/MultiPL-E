{
  "name": "mbpp_408_k_smallest_pairs",
  "language": "rs",
  "prompt": "/// Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\nfn k_smallest_pairs(nums1: Vec<isize>, nums2: Vec<isize>, k: isize) -> Vec<Vec<isize>> {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_408_k_smallest_pairs.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\nfn main() {\n    let candidate = k_smallest_pairs;\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 2), vec![vec![1, 2], vec![1, 4]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 1), vec![vec![1, 2]]);\n    assert_eq!(candidate(vec![1, 3, 7], vec![2, 4, 6], 7), vec![vec![1, 2], vec![1, 4], vec![3, 2], vec![1, 6], vec![3, 4], vec![3, 6], vec![7, 2]]);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    let mut pairs = Vec::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            pairs.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    pairs.sort_by(|a, b| (a[0] + a[1]).cmp(&(b[0] + b[1])));\n    pairs.into_iter().take(k as usize).collect()",
    "    let mut pairs = Vec::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            pairs.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    pairs.sort_by(|a, b| a[0].cmp(&b[0]));\n    pairs.truncate(k as usize);\n    pairs",
    "    let mut result = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let sum = nums1[i] + nums2[j];\n            if heap.len() < k as usize {\n                heap.push(Reverse((sum, i, j)));\n            } else {\n                let top = heap.peek().unwrap();\n                if top.0 > sum {\n                    heap.pop();\n                    heap.push(Reverse((sum, i, j)));\n                }\n            }\n        }\n    }\n    while !heap.is_empty() {\n        let Reverse((sum, i, j)) = heap.pop().unwrap();\n        result.push(vec![nums1[i], nums2[j]]);\n    }\n    result",
    "    let mut result = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            heap.push(Reverse((nums1[i] + nums2[j], (i, j))));\n        }\n    }\n    for _ in 0..k {\n        if let Some(Reverse((_, (i, j)))) = heap.pop() {\n            result.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    result",
    "    let mut result = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let sum = nums1[i] + nums2[j];\n            if heap.len() < k as usize {\n                heap.push(Reverse((sum, nums1[i], nums2[j])));\n            } else {\n                let top = heap.peek().unwrap();\n                if top.0 > sum {\n                    heap.pop();\n                    heap.push(Reverse((sum, nums1[i], nums2[j])));\n                }\n            }\n        }\n    }\n    for item in heap {\n        result.push(vec![item.1, item.2]);\n    }\n    result",
    "    let mut heap = BinaryHeap::new();\n    let mut res = Vec::new();\n    let mut i = 0;\n    let mut j = 0;\n    while i < nums1.len() && j < nums2.len() {\n        heap.push(Reverse((nums1[i] + nums2[j], i, j)));\n        if i == nums1.len() - 1 {\n            j += 1;\n        } else if j == nums2.len() - 1 {\n            i += 1;\n        } else {\n            if nums1[i + 1] + nums2[j] < nums1[i] + nums2[j + 1] {\n                i += 1;\n            } else {\n                j += 1;\n            }\n        }\n    }\n    while k > 0 && !heap.is_empty() {\n        let (sum, i, j) = heap.pop().unwrap().0;\n        res.push(vec![nums1[i], nums2[j]]);\n        k -= 1;\n    }\n    res",
    "    let mut res = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            heap.push(Reverse((nums1[i] + nums2[j], (i, j))));\n        }\n    }\n    let mut count = 0;\n    while count < k && !heap.is_empty() {\n        let Reverse((_, (i, j))) = heap.pop().unwrap();\n        res.push(vec![nums1[i], nums2[j]]);\n        count += 1;\n    }\n    res",
    "    let mut res = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let sum = nums1[i] + nums2[j];\n            if heap.len() < k as usize {\n                heap.push((-sum, (i, j)));\n            } else {\n                if sum < -heap.peek().unwrap().0 {\n                    heap.pop();\n                    heap.push((-sum, (i, j)));\n                }\n            }\n        }\n    }\n    while let Some((_, (i, j))) = heap.pop() {\n        res.push(vec![nums1[i], nums2[j]]);\n    }\n    res",
    "    let mut res = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            heap.push(Reverse((nums1[i] + nums2[j], i, j)));\n        }\n    }\n    while k > 0 && !heap.is_empty() {\n        let Reverse((_, i, j)) = heap.pop().unwrap();\n        res.push(vec![nums1[i], nums2[j]]);\n        k -= 1;\n    }\n    res",
    "    let mut res = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            heap.push(Reverse((nums1[i] + nums2[j], (i, j))));\n        }\n    }\n    for _ in 0..k {\n        if let Some(Reverse((_, (i, j)))) = heap.pop() {\n            res.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    res",
    "    let mut res = Vec::new();\n    if nums1.len() == 0 || nums2.len() == 0 {\n        return res;\n    }\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        heap.push(Pair {\n            sum: nums1[i] + nums2[0],\n            index1: i,\n            index2: 0,\n        });\n    }\n    while k > 0 && !heap.is_empty() {\n        let pair = heap.pop().unwrap();\n        res.push(vec![nums1[pair.index1], nums2[pair.index2]]);\n        if pair.index2 < nums2.len() - 1 {\n            heap.push(Pair {\n                sum: nums1[pair.index1] + nums2[pair.index2 + 1],\n                index1: pair.index1,\n                index2: pair.index2 + 1,\n            });\n        }\n        k -= 1;\n    }\n    res",
    "    let mut res: Vec<Vec<isize>> = Vec::new();\n    let mut heap: BinaryHeap<(isize, isize, isize)> = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            heap.push((nums1[i] + nums2[j], nums1[i], nums2[j]));\n        }\n    }\n    for _ in 0..k {\n        if let Some(x) = heap.pop() {\n            res.push(vec![x.1, x.2]);\n        } else {\n            break;\n        }\n    }\n    res",
    "    let mut pairs = Vec::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            pairs.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    pairs.sort_by(|a, b| (a[0] + a[1]).cmp(&(b[0] + b[1])));\n    pairs.truncate(k as usize);\n    pairs",
    "    let mut pairs = Vec::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            pairs.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    pairs.sort_by(|a, b| (a[0] + a[1]).cmp(&(b[0] + b[1])));\n    pairs.truncate(k as usize);\n    pairs",
    "    let mut res = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            heap.push(Reverse((nums1[i] + nums2[j], (i, j))));\n        }\n    }\n    for _ in 0..k {\n        if let Some(Reverse((_, (i, j)))) = heap.pop() {\n            res.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    res",
    "    let mut res = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let sum = nums1[i] + nums2[j];\n            let pair = vec![nums1[i], nums2[j]];\n            if heap.len() < k as usize {\n                heap.push((-sum, pair));\n            } else {\n                if sum > -heap.peek().unwrap().0 {\n                    heap.pop();\n                    heap.push((-sum, pair));\n                }\n            }\n        }\n    }\n    while !heap.is_empty() {\n        res.push(heap.pop().unwrap().1);\n    }\n    res.reverse();\n    res",
    "    let mut res: Vec<Vec<isize>> = Vec::new();\n    let mut i = 0;\n    let mut j = 0;\n    while i < nums1.len() && j < nums2.len() && res.len() < k as usize {\n        let mut tmp = vec![nums1[i], nums2[j]];\n        if i + 1 < nums1.len() && j + 1 < nums2.len() {\n            if nums1[i + 1] + nums2[j] < nums1[i] + nums2[j + 1] {\n                i += 1;\n            } else {\n                j += 1;\n            }\n        } else if i + 1 < nums1.len() {\n            i += 1;\n        } else {\n            j += 1;\n        }\n        res.push(tmp);\n    }\n    res",
    "    let mut pairs = Vec::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            pairs.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    pairs.sort_by(|a, b| (a[0] + a[1]).cmp(&(b[0] + b[1])));\n    pairs.iter().take(k as usize).map(|v| v.to_vec()).collect()",
    "    let mut res = Vec::new();\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            heap.push(Reverse((nums1[i] + nums2[j], (i, j))));\n        }\n    }\n    for _ in 0..k {\n        if let Some(Reverse((_, (i, j)))) = heap.pop() {\n            res.push(vec![nums1[i], nums2[j]]);\n        }\n    }\n    res",
    "    let mut res = vec![];\n    let mut heap = BinaryHeap::new();\n    for i in 0..nums1.len() {\n        for j in 0..nums2.len() {\n            let sum = nums1[i] + nums2[j];\n            heap.push(Reverse((sum, (i, j))));\n        }\n    }\n    let mut count = 0;\n    while count < k && !heap.is_empty() {\n        let Reverse((_, (i, j))) = heap.pop().unwrap();\n        res.push(vec![nums1[i], nums2[j]]);\n        count += 1;\n    }\n    res"
  ]
}