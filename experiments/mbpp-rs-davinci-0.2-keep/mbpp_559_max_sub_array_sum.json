{
  "name": "mbpp_559_max_sub_array_sum",
  "language": "rs",
  "prompt": "/// Write a function to find the sum of the largest contiguous sublist in the given list.\nfn max_sub_array_sum(a: Vec<isize>, size: isize) -> isize {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_559_max_sub_array_sum.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\nfn main() {\n    let candidate = max_sub_array_sum;\n    assert_eq!(candidate(vec![-2, -3, 4, -1, -2, 1, 5, -3], 8), 7);\n    assert_eq!(candidate(vec![-3, -4, 5, -2, -3, 2, 6, -4], 8), 8);\n    assert_eq!(candidate(vec![-4, -5, 6, -3, -4, 3, 7, -5], 8), 10);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    let mut max_so_far = a[0];\n    let mut curr_max = a[0];\n\n    for i in 1..size {\n        curr_max = max(a[i], curr_max + a[i]);\n        max_so_far = max(max_so_far, curr_max);\n    }\n    max_so_far",
    "    let mut max_so_far = a[0];\n    let mut curr_max = a[0];\n\n    for i in 1..size {\n        curr_max = max(a[i], curr_max + a[i]);\n        max_so_far = max(max_so_far, curr_max);\n    }\n    max_so_far",
    "    let mut max_so_far = a[0];\n    let mut curr_max = a[0];\n\n    for i in 1..size {\n        curr_max = max(a[i], curr_max + a[i]);\n        max_so_far = max(max_so_far, curr_max);\n    }\n    max_so_far",
    "    let mut max_so_far = a[0];\n    let mut curr_max = a[0];\n\n    for i in 1..size {\n        curr_max = max(a[i], curr_max + a[i]);\n        max_so_far = max(max_so_far, curr_max);\n    }\n    max_so_far",
    "    let mut max_so_far = a[0];\n    let mut curr_max = a[0];\n\n    for i in 1..size {\n        curr_max = max(a[i], curr_max + a[i]);\n        max_so_far = max(max_so_far, curr_max);\n    }\n    max_so_far",
    "    let mut max_so_far = a[0];\n    let mut curr_max = a[0];\n\n    for i in 1..size {\n        curr_max = max(a[i], curr_max + a[i]);\n        max_so_far = max(max_so_far, curr_max);\n    }\n    max_so_far",
    "    let mut max_so_far = a[0];\n    let mut curr_max = a[0];\n\n    for i in 1..size {\n        curr_max = max(a[i], curr_max + a[i]);\n        max_so_far = max(max_so_far, curr_max);\n    }\n    max_so_far",
    "    let mut max_so_far = 0;\n    let mut max_ending_here = 0;\n\n    for i in 0..size {\n        max_ending_here = max_ending_here + a[i as usize];\n        if max_ending_here < 0 {\n            max_ending_here = 0;\n        }\n\n        if max_so_far < max_ending_here {\n            max_so_far = max_ending_here;\n        }\n    }\n    max_so_far",
    "    let mut max_so_far = a[0];\n    let mut curr_max = a[0];\n\n    for i in 1..size {\n        curr_max = max(a[i], curr_max + a[i]);\n        max_so_far = max(max_so_far, curr_max);\n    }\n    max_so_far",
    "    let mut max_so_far = a[0];\n    let mut curr_max = a[0];\n\n    for i in 1..size {\n        curr_max = max(a[i], curr_max + a[i]);\n        max_so_far = max(max_so_far, curr_max);\n    }\n    max_so_far",
    "    let mut max_so_far = a[0];\n    let mut curr_max = a[0];\n\n    for i in 1..size {\n        curr_max = max(a[i], curr_max + a[i]);\n        max_so_far = max(max_so_far, curr_max);\n    }\n    max_so_far",
    "    let mut max_so_far = a[0];\n    let mut curr_max = a[0];\n\n    for i in 1..size {\n        curr_max = max(a[i], curr_max + a[i]);\n        max_so_far = max(max_so_far, curr_max);\n    }\n    max_so_far",
    "    let mut max_so_far = a[0];\n    let mut curr_max = a[0];\n\n    for i in 1..size {\n        curr_max = std::cmp::max(a[i], curr_max + a[i]);\n        max_so_far = std::cmp::max(max_so_far, curr_max);\n    }\n    max_so_far",
    "    let mut max_so_far = a[0];\n    let mut curr_max = a[0];\n\n    for i in 1..size {\n        curr_max = max(a[i], curr_max + a[i]);\n        max_so_far = max(max_so_far, curr_max);\n    }\n    max_so_far",
    "    let mut max_so_far = a[0];\n    let mut curr_max = a[0];\n\n    for i in 1..size {\n        curr_max = max(a[i], curr_max + a[i]);\n        max_so_far = max(max_so_far, curr_max);\n    }\n    max_so_far",
    "    let mut max_so_far = a[0];\n    let mut curr_max = a[0];\n\n    for i in 1..size {\n        curr_max = max(a[i], curr_max + a[i]);\n        max_so_far = max(max_so_far, curr_max);\n    }\n    max_so_far",
    "    let mut max_so_far = a[0];\n    let mut curr_max = a[0];\n\n    for i in 1..size {\n        curr_max = max(a[i], curr_max + a[i]);\n        max_so_far = max(max_so_far, curr_max);\n    }\n    max_so_far",
    "    let mut max_so_far = a[0];\n    let mut curr_max = a[0];\n\n    for i in 1..size {\n        curr_max = std::cmp::max(a[i], curr_max + a[i]);\n        max_so_far = std::cmp::max(max_so_far, curr_max);\n    }\n    max_so_far",
    "    let mut max_so_far = a[0];\n    let mut curr_max = a[0];\n\n    for i in 1..size {\n        curr_max = std::cmp::max(a[i], curr_max + a[i]);\n        max_so_far = std::cmp::max(max_so_far, curr_max);\n    }\n    max_so_far",
    "    let mut max_so_far = a[0];\n    let mut curr_max = a[0];\n\n    for i in 1..size {\n        curr_max = max(a[i], curr_max + a[i]);\n        max_so_far = max(max_so_far, curr_max);\n    }\n    max_so_far"
  ]
}