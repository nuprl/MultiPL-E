{
  "name": "mbpp_234_volume_cube",
  "language": "rs",
  "prompt": "/// Write a function to find the volume of a cube given its side length.\nfn volume_cube(l: isize) -> isize {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_234_volume_cube.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\nfn main() {\n    let candidate = volume_cube;\n    assert_eq!(candidate(3), 27);\n    assert_eq!(candidate(2), 8);\n    assert_eq!(candidate(5), 125);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l",
    "    l * l * l"
  ]
}