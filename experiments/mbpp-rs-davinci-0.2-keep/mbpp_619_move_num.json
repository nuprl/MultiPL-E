{
  "name": "mbpp_619_move_num",
  "language": "rs",
  "prompt": "/// Write a function to move all the numbers to the end of the given string.\nfn move_num(test_str: String) -> String {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_619_move_num.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\nfn main() {\n    let candidate = move_num;\n    assert_eq!(candidate(String::from(\"I1love143you55three3000thousand\")), String::from(\"Iloveyouthreethousand1143553000\"));\n    assert_eq!(candidate(String::from(\"Avengers124Assemble\")), String::from(\"AvengersAssemble124\"));\n    assert_eq!(candidate(String::from(\"Its11our12path13to14see15things16do17things\")), String::from(\"Itsourpathtoseethingsdothings11121314151617\"));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    let mut result = String::new();\n    let mut num = String::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            num.push(c);\n        } else {\n            result.push(c);\n        }\n    }\n    result.push_str(&num);\n    result",
    "    let mut result = String::new();\n    let mut num_str = String::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            num_str.push(c);\n        } else {\n            result.push(c);\n        }\n    }\n    result.push_str(&num_str);\n    result",
    "    let mut num_vec = Vec::new();\n    let mut char_vec = Vec::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            num_vec.push(c);\n        } else {\n            char_vec.push(c);\n        }\n    }\n    char_vec.append(&mut num_vec);\n    char_vec.into_iter().collect()",
    "    let mut num_vec = Vec::new();\n    let mut char_vec = Vec::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            num_vec.push(c);\n        } else {\n            char_vec.push(c);\n        }\n    }\n    char_vec.append(&mut num_vec);\n    char_vec.iter().collect()",
    "    let mut num_vec = Vec::new();\n    let mut char_vec = Vec::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            num_vec.push(c);\n        } else {\n            char_vec.push(c);\n        }\n    }\n    let mut result = String::new();\n    for c in char_vec {\n        result.push(c);\n    }\n    for c in num_vec {\n        result.push(c);\n    }\n    result",
    "    let mut result = String::new();\n    let mut num_str = String::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            num_str.push(c);\n        } else {\n            result.push(c);\n        }\n    }\n    result.push_str(&num_str);\n    result",
    "    let mut nums = String::new();\n    let mut chars = String::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            nums.push(c);\n        } else {\n            chars.push(c);\n        }\n    }\n    chars + &nums",
    "    let mut num_vec: Vec<char> = Vec::new();\n    let mut str_vec: Vec<char> = Vec::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            num_vec.push(c);\n        } else {\n            str_vec.push(c);\n        }\n    }\n    str_vec.append(&mut num_vec);\n    str_vec.into_iter().collect()",
    "    let mut result = String::new();\n    let mut nums = String::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            nums.push(c);\n        } else {\n            result.push(c);\n        }\n    }\n    result.push_str(&nums);\n    result",
    "    let mut new_str = String::new();\n    let mut num_str = String::new();\n    for ch in test_str.chars() {\n        if ch.is_digit(10) {\n            num_str.push(ch);\n        } else {\n            new_str.push(ch);\n        }\n    }\n    new_str.push_str(&num_str);\n    new_str",
    "    let mut result = String::new();\n    let mut nums = String::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            nums.push(c);\n        } else {\n            result.push(c);\n        }\n    }\n    result.push_str(&nums);\n    result",
    "    let mut num_vec: Vec<char> = Vec::new();\n    let mut char_vec: Vec<char> = Vec::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            num_vec.push(c);\n        } else {\n            char_vec.push(c);\n        }\n    }\n    let mut result = String::new();\n    for c in char_vec {\n        result.push(c);\n    }\n    for c in num_vec {\n        result.push(c);\n    }\n    result",
    "    let mut nums = Vec::new();\n    let mut chars = Vec::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            nums.push(c);\n        } else {\n            chars.push(c);\n        }\n    }\n    chars.extend(nums);\n    chars.iter().collect()",
    "    let mut new_str = String::new();\n    let mut num_str = String::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            num_str.push(c);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str.push_str(&num_str);\n    new_str",
    "    let mut nums = String::new();\n    let mut chars = String::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            nums.push(c);\n        } else {\n            chars.push(c);\n        }\n    }\n    chars + &nums",
    "    let mut result = String::new();\n    let mut nums = String::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            nums.push(c);\n        } else {\n            result.push(c);\n        }\n    }\n    result.push_str(&nums);\n    result",
    "    let mut new_str = String::new();\n    let mut num_str = String::new();\n    for ch in test_str.chars() {\n        if ch.is_numeric() {\n            num_str.push(ch);\n        } else {\n            new_str.push(ch);\n        }\n    }\n    new_str.push_str(&num_str);\n    new_str",
    "    let mut res = String::new();\n    let mut nums = String::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            nums.push(c);\n        } else {\n            res.push(c);\n        }\n    }\n    res.push_str(&nums);\n    res",
    "    let mut chars: Vec<char> = test_str.chars().collect();\n    let mut i = 0;\n    let mut j = chars.len() - 1;\n    while i < j {\n        if chars[i].is_numeric() {\n            while j > i && chars[j].is_numeric() {\n                j -= 1;\n            }\n            if j > i {\n                chars.swap(i, j);\n                j -= 1;\n            }\n        }\n        i += 1;\n    }\n    chars.into_iter().collect()",
    "    let mut res = String::new();\n    let mut nums = String::new();\n    for c in test_str.chars() {\n        if c.is_numeric() {\n            nums.push(c);\n        } else {\n            res.push(c);\n        }\n    }\n    res.push_str(&nums);\n    res"
  ]
}