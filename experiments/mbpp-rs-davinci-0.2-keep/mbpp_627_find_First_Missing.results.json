{
  "name": "mbpp_627_find_First_Missing",
  "language": "rs",
  "prompt": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_627_find_First_Missing.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = 1;\n    while j < array.len() {\n        if array[i] + 1 != array[j] {\n            return array[i] + 1;\n        }\n        i += 1;\n        j += 1;\n    }\n    return array[i] + 1;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510451,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `0`', /tmp/tmp79xg85vx.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] != i as isize {\n            return i as isize;\n        }\n        i += 1;\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510451,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    while i < j {\n        let mid = (i + j) / 2;\n        if array[mid] > mid as isize {\n            j = mid;\n        } else {\n            i = mid + 1;\n        }\n    }\n    if array[i] == i as isize {\n        i as isize + 1\n    } else {\n        i as isize\n    }\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510451,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] != i as isize {\n            return i as isize;\n        }\n        i += 1;\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510451,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = 1;\n    let mut n = array.len();\n    while j < n {\n        if array[i] == array[j] {\n            j += 1;\n        } else if array[i] + 1 == array[j] {\n            i += 1;\n            j += 1;\n        } else {\n            return array[i] + 1;\n        }\n    }\n    return array[n - 1] + 1;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510451,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `0`', /tmp/tmpq0z7sw3_.rs:23:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    let mut mid = 0;\n    while i <= j {\n        mid = (i + j) / 2;\n        if mid == 0 && array[mid] != 0 {\n            return 0;\n        }\n        if array[mid] == mid as isize {\n            i = mid + 1;\n        } else {\n            j = mid - 1;\n        }\n    }\n    return mid as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510451,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3`,\n right: `4`', /tmp/tmpn2u3sop8.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] != i as isize {\n            return i as isize;\n        }\n        i += 1;\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510451,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = 1;\n    let mut missing = 0;\n    while i < array.len() {\n        if array[i] != j {\n            missing = j;\n            break;\n        }\n        i += 1;\n        j += 1;\n    }\n    missing\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510451,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `4`', /tmp/tmpfjhji9m_.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    while i < j {\n        let mid = (i + j) / 2;\n        if array[mid] > mid as isize {\n            j = mid;\n        } else {\n            i = mid + 1;\n        }\n    }\n    i as isize\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510451,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3`,\n right: `4`', /tmp/tmp7wyi0g45.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut min = 0;\n    for i in array {\n        if i > min {\n            return min;\n        }\n        min += 1;\n    }\n    return min;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510451,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = 1;\n    let mut missing = 0;\n    while j < array.len() {\n        if array[i] + 1 != array[j] {\n            missing = array[i] + 1;\n            break;\n        }\n        i += 1;\n        j += 1;\n    }\n    missing\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510451,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `0`,\n right: `4`', /tmp/tmpcrvjj8fm.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] != i as isize {\n            return i as isize;\n        }\n        i += 1;\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510451,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    let mut mid = 0;\n    while i <= j {\n        mid = (i + j) / 2;\n        if array[mid] != mid as isize {\n            if mid > 0 && array[mid - 1] == mid as isize - 1 {\n                return mid as isize;\n            } else {\n                j = mid - 1;\n            }\n        } else {\n            i = mid + 1;\n        }\n    }\n    if mid == array.len() - 1 && array[mid] == mid as isize {\n        return mid as isize + 1;\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510451,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to subtract with overflow', /tmp/tmpcty019t4.rs:12:21\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    let mut mid = 0;\n    while i <= j {\n        mid = (i + j) / 2;\n        if array[mid] != mid as isize {\n            if mid == 0 || array[mid - 1] == mid as isize - 1 {\n                return mid as isize;\n            } else {\n                j = mid - 1;\n            }\n        } else {\n            i = mid + 1;\n        }\n    }\n    return mid as isize + 1;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510451,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut min = array[0];\n    let mut max = array[0];\n    let mut sum = 0;\n    let mut product = 1;\n    for i in array {\n        if i < min {\n            min = i;\n        }\n        if i > max {\n            max = i;\n        }\n        sum += i;\n        product *= i;\n    }\n    let mut i = min + 1;\n    while i < max {\n        if !array.contains(&i) {\n            return i;\n        }\n        i += 1;\n    }\n    return max + 1;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510450,
      "stdout": "",
      "stderr": "warning: variable `sum` is assigned to, but never used\n --> /tmp/tmp888rpxn8.rs:5:13\n  |\n5 |     let mut sum = 0;\n  |             ^^^\n  |\n  = note: `#[warn(unused_variables)]` on by default\n  = note: consider using `_sum` instead\n\nwarning: variable `product` is assigned to, but never used\n --> /tmp/tmp888rpxn8.rs:6:13\n  |\n6 |     let mut product = 1;\n  |             ^^^^^^^\n  |\n  = note: consider using `_product` instead\n\nerror[E0382]: borrow of moved value: `array`\n   --> /tmp/tmp888rpxn8.rs:19:13\n    |\n2   | fn find_First_Missing(array: Vec<isize>) -> isize {\n    |                       ----- move occurs because `array` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n7   |     for i in array {\n    |              ----- `array` moved due to this implicit call to `.into_iter()`\n...\n19  |         if !array.contains(&i) {\n    |             ^^^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership of the receiver `self`, which moves `array`\n    = note: borrow occurs due to deref coercion to `[isize]`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n7   |     for i in &array {\n    |              +\n\nerror: aborting due to previous error; 2 warnings emitted\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    while i < j {\n        let mid = (i + j) / 2;\n        if array[mid] > mid as isize {\n            j = mid;\n        } else {\n            i = mid + 1;\n        }\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510451,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3`,\n right: `4`', /tmp/tmpd35hnbft.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    while i < j {\n        let mid = (i + j) / 2;\n        if array[mid] > mid as isize {\n            j = mid;\n        } else {\n            i = mid + 1;\n        }\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510451,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3`,\n right: `4`', /tmp/tmpd35hnbft.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    while i <= j {\n        let mid = (i + j) / 2;\n        if array[mid] != mid as isize {\n            if mid == 0 || array[mid - 1] == mid as isize - 1 {\n                return mid as isize;\n            } else {\n                j = mid - 1;\n            }\n        } else {\n            i = mid + 1;\n        }\n    }\n    return j as isize + 1;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510451,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] != i as isize {\n            return i as isize;\n        }\n        i += 1;\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510451,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    let mut mid = 0;\n    while i <= j {\n        mid = (i + j) / 2;\n        if array[mid] != mid as isize {\n            if mid == 0 || array[mid - 1] == mid as isize - 1 {\n                return mid as isize;\n            } else {\n                j = mid - 1;\n            }\n        } else {\n            i = mid + 1;\n        }\n    }\n    return mid as isize + 1;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510451,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut min = 0;\n    for i in 0..array.len() {\n        if array[i] != i as isize {\n            min = i as isize;\n            break;\n        }\n    }\n    min\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `0`,\n right: `4`', /tmp/tmp8icrlx8c.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = 1;\n    while i < array.len() {\n        if array[i] != j {\n            return j;\n        }\n        i += 1;\n        j += 1;\n    }\n    return j;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `4`', /tmp/tmpcahsmaif.rs:17:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = 1;\n    let mut n = array.len();\n    while j < n {\n        if array[i] != array[j] {\n            if array[i] + 1 != array[j] {\n                return array[i] + 1;\n            }\n            i = j;\n        }\n        j += 1;\n    }\n    return array[n - 1] + 1;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `0`', /tmp/tmpbeovkep_.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] != i as isize {\n            return i as isize;\n        }\n        i += 1;\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510451,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] != i as isize {\n            return i as isize;\n        }\n        i += 1;\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510451,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    while i < j {\n        let mid = (i + j) / 2;\n        if array[mid] > mid as isize {\n            j = mid;\n        } else {\n            i = mid + 1;\n        }\n    }\n    i as isize\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510451,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3`,\n right: `4`', /tmp/tmp7wyi0g45.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = 1;\n    let mut missing = 0;\n    while i < array.len() {\n        if array[i] != j {\n            missing = j;\n            break;\n        }\n        i += 1;\n        j += 1;\n    }\n    missing\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510451,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `4`', /tmp/tmpfjhji9m_.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = 1;\n    let mut missing = 0;\n    while i < array.len() {\n        if array[i] != j {\n            missing = j;\n            break;\n        }\n        i += 1;\n        j += 1;\n    }\n    missing\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510451,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `4`', /tmp/tmpfjhji9m_.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] != i as isize {\n            return i as isize;\n        }\n        i += 1;\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510451,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] != i as isize {\n            return i as isize;\n        }\n        i += 1;\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510451,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] != i as isize {\n            return i as isize;\n        }\n        i += 1;\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510451,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = 1;\n    while j < array.len() {\n        if array[i] + 1 == array[j] {\n            i += 1;\n            j += 1;\n        } else {\n            return array[i] + 1;\n        }\n    }\n    return array[i] + 1;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `0`', /tmp/tmpb_ays46k.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = 1;\n    let mut len = array.len();\n    while i < len {\n        if j != array[i] {\n            return j;\n        }\n        i += 1;\n        j += 1;\n    }\n    return j;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `4`', /tmp/tmph2g5o4zu.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    let mut mid = 0;\n    while i <= j {\n        mid = (i + j) / 2;\n        if array[mid] != mid as isize {\n            if mid > 0 && array[mid - 1] == mid as isize - 1 {\n                return mid as isize;\n            } else {\n                j = mid - 1;\n            }\n        } else {\n            i = mid + 1;\n        }\n    }\n    return mid as isize + 1;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to subtract with overflow', /tmp/tmpoo7t81l4.rs:12:21\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] != i as isize {\n            return i as isize;\n        }\n        i += 1;\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510451,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] != i as isize {\n            return i as isize;\n        }\n        i += 1;\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510451,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut min = 0;\n    for i in 0..array.len() {\n        if array[i] != i as isize {\n            min = i as isize;\n            break;\n        }\n    }\n    min\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `0`,\n right: `4`', /tmp/tmp8icrlx8c.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] != i as isize {\n            return i as isize;\n        }\n        i += 1;\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510451,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] != i as isize {\n            return i as isize;\n        }\n        i += 1;\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510451,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    let mut mid = 0;\n    while i <= j {\n        mid = (i + j) / 2;\n        if array[mid] != mid as isize {\n            if mid > 0 && array[mid - 1] == mid as isize - 1 {\n                return mid as isize;\n            } else {\n                j = mid - 1;\n            }\n        } else {\n            i = mid + 1;\n        }\n    }\n    if array[mid] == mid as isize {\n        return mid as isize + 1;\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to subtract with overflow', /tmp/tmpd15o7tic.rs:12:21\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut index = 0;\n    let mut result = 0;\n    while index < array.len() {\n        if array[index] != index as isize {\n            result = index as isize;\n            break;\n        }\n        index += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `0`,\n right: `4`', /tmp/tmpjqtbk5pk.rs:17:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = 1;\n    let mut missing = 0;\n    while i < array.len() {\n        if array[i] != j {\n            missing = j;\n            break;\n        }\n        i += 1;\n        j += 1;\n    }\n    missing\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510451,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `4`', /tmp/tmpfjhji9m_.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut min = 0;\n    for i in array {\n        if i == min {\n            min += 1;\n        }\n    }\n    min\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    while i < j {\n        let mid = (i + j) / 2;\n        if array[mid] > mid as isize {\n            j = mid;\n        } else {\n            i = mid + 1;\n        }\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510451,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3`,\n right: `4`', /tmp/tmpd35hnbft.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] != i as isize {\n            return i as isize;\n        }\n        i += 1;\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510451,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = 1;\n    while j < array.len() {\n        if array[i] + 1 != array[j] {\n            return array[i] + 1;\n        }\n        i += 1;\n        j += 1;\n    }\n    return array[i] + 1;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510451,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `0`', /tmp/tmp79xg85vx.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] != i as isize {\n            return i as isize;\n        }\n        i += 1;\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510451,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = 1;\n    let mut n = array.len();\n    while i < n {\n        if array[i] != j {\n            return j;\n        }\n        i += 1;\n        j += 1;\n    }\n    return j;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `4`', /tmp/tmpkly1c1qg.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] != i as isize {\n            return i as isize;\n        }\n        i += 1;\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510451,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    let mut mid = 0;\n    while i <= j {\n        mid = (i + j) / 2;\n        if array[mid] != mid as isize {\n            if mid == 0 || array[mid - 1] == mid as isize - 1 {\n                return mid as isize;\n            } else {\n                j = mid - 1;\n            }\n        } else {\n            i = mid + 1;\n        }\n    }\n    return mid as isize + 1;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510451,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] != i as isize {\n            return i as isize;\n        }\n        i += 1;\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510451,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut min = 0;\n    for i in array {\n        if i == min {\n            min += 1;\n        } else {\n            break;\n        }\n    }\n    min\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    while i <= j {\n        let mid = (i + j) / 2;\n        if array[mid] != mid as isize {\n            if mid == 0 || array[mid - 1] == mid as isize - 1 {\n                return mid as isize;\n            } else {\n                j = mid - 1;\n            }\n        } else {\n            i = mid + 1;\n        }\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `-1`,\n right: `4`', /tmp/tmp50j4ih3o.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    let mut mid = 0;\n    while i <= j {\n        mid = (i + j) / 2;\n        if array[mid] != mid as isize + 1 && array[mid - 1] == mid as isize {\n            return mid as isize + 1;\n        } else if array[mid] == mid as isize + 1 {\n            i = mid + 1;\n        } else {\n            j = mid - 1;\n        }\n    }\n    if array[mid] == mid as isize + 1 {\n        return mid as isize + 2;\n    }\n    return 1;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to subtract with overflow', /tmp/tmpexyeuulh.rs:8:52\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    while i <= j {\n        let mid = (i + j) / 2;\n        if array[mid] != mid as isize {\n            if mid == 0 || array[mid - 1] == mid as isize - 1 {\n                return mid as isize;\n            }\n            j = mid - 1;\n        } else {\n            i = mid + 1;\n        }\n    }\n    return j as isize + 1;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] != i as isize {\n            return i as isize;\n        }\n        i += 1;\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510451,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] != i as isize {\n            return i as isize;\n        }\n        i += 1;\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510451,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = 1;\n    while j < array.len() {\n        if array[i] + 1 != array[j] {\n            return array[i] + 1;\n        }\n        i += 1;\n        j += 1;\n    }\n    return array[i] + 1;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510451,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `0`', /tmp/tmp79xg85vx.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut index = 0;\n    let mut result = 0;\n    for i in 0..array.len() {\n        if array[i] != index {\n            result = index;\n            break;\n        }\n        index += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `0`,\n right: `4`', /tmp/tmpk1bxoslq.rs:17:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = 1;\n    while i < array.len() {\n        if array[i] != j {\n            return j;\n        }\n        i += 1;\n        j += 1;\n    }\n    return j;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `4`', /tmp/tmpcahsmaif.rs:17:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] != i as isize {\n            return i as isize;\n        }\n        i += 1;\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510451,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    while i < j {\n        let mid = (i + j) / 2;\n        if array[mid] == mid as isize {\n            i = mid + 1;\n        } else {\n            j = mid;\n        }\n    }\n    if array[i] == i as isize {\n        i as isize + 1\n    } else {\n        i as isize\n    }\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = 1;\n    let mut missing = 0;\n    let mut found = false;\n    while i < array.len() {\n        if array[i] != j {\n            missing = j;\n            found = true;\n            break;\n        }\n        i += 1;\n        j += 1;\n    }\n    if !found {\n        missing = array[array.len() - 1] + 1;\n    }\n    missing\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `4`', /tmp/tmpr8tcogm3.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    while i < j {\n        let mid = (i + j) / 2;\n        if array[mid] > mid as isize {\n            j = mid;\n        } else {\n            i = mid + 1;\n        }\n    }\n    i as isize\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510451,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3`,\n right: `4`', /tmp/tmp7wyi0g45.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] != i as isize {\n            return i as isize;\n        }\n        i += 1;\n    }\n    return array.len() as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = 1;\n    while j < array.len() {\n        if array[i] + 1 != array[j] {\n            return array[i] + 1;\n        }\n        i += 1;\n        j += 1;\n    }\n    array[array.len() - 1] + 1\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `0`', /tmp/tmpj73ngbtf.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] != i as isize {\n            return i as isize;\n        }\n        i += 1;\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510451,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    while i < j {\n        let mid = (i + j) / 2;\n        if array[mid] > mid as isize {\n            j = mid;\n        } else {\n            i = mid + 1;\n        }\n    }\n    i as isize\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510451,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3`,\n right: `4`', /tmp/tmp7wyi0g45.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    let mut mid = 0;\n    while i <= j {\n        mid = (i + j) / 2;\n        if array[mid] != mid as isize {\n            if mid > 0 && array[mid - 1] == mid as isize - 1 {\n                return mid as isize;\n            } else {\n                j = mid - 1;\n            }\n        } else {\n            i = mid + 1;\n        }\n    }\n    if array[mid] == mid as isize {\n        return mid as isize + 1;\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to subtract with overflow', /tmp/tmpd15o7tic.rs:12:21\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    while i < j {\n        let mid = (i + j) / 2;\n        if array[mid] == mid as isize {\n            i = mid + 1;\n        } else {\n            j = mid;\n        }\n    }\n    i as isize\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3`,\n right: `4`', /tmp/tmps33x2_9i.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] != i as isize {\n            return i as isize;\n        }\n        i += 1;\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510451,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] != i as isize {\n            return i as isize;\n        }\n        i += 1;\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510451,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] != i as isize {\n            return i as isize;\n        }\n        i += 1;\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510451,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    while i <= j {\n        let mid = (i + j) / 2;\n        if array[mid] != mid as isize {\n            if mid == 0 || array[mid - 1] == mid as isize - 1 {\n                return mid as isize;\n            } else {\n                j = mid - 1;\n            }\n        } else {\n            i = mid + 1;\n        }\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] != i as isize {\n            return i as isize;\n        }\n        i += 1;\n    }\n    return array.len() as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] != i as isize {\n            return i as isize;\n        }\n        i += 1;\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510451,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] != i as isize {\n            return i as isize;\n        }\n        i += 1;\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510451,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] != i as isize {\n            return i as isize;\n        }\n        i += 1;\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510451,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    while i <= j {\n        let m = (i + j) / 2;\n        if array[m] != m as isize {\n            if m == 0 || array[m - 1] == m as isize - 1 {\n                return m as isize;\n            } else {\n                j = m - 1;\n            }\n        } else {\n            i = m + 1;\n        }\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    while i <= j {\n        let mid = (i + j) / 2;\n        if array[mid] != mid as isize {\n            if mid == 0 || array[mid - 1] == mid as isize - 1 {\n                return mid as isize;\n            } else {\n                j = mid - 1;\n            }\n        } else {\n            i = mid + 1;\n        }\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] != i as isize {\n            return i as isize;\n        }\n        i += 1;\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510451,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] != i as isize {\n            return i as isize;\n        }\n        i += 1;\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510451,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    while i <= j {\n        let mid = (i + j) / 2;\n        if array[mid] != mid as isize {\n            if mid == 0 || array[mid - 1] == mid as isize - 1 {\n                return mid as isize;\n            }\n            j = mid - 1;\n        } else {\n            i = mid + 1;\n        }\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] != i as isize {\n            return i as isize;\n        }\n        i += 1;\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510451,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = 1;\n    let mut missing = 0;\n    while i < array.len() {\n        if array[i] != j {\n            missing = j;\n            break;\n        }\n        i += 1;\n        j += 1;\n    }\n    missing\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510451,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `4`', /tmp/tmpfjhji9m_.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] != i as isize {\n            return i as isize;\n        }\n        i += 1;\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510451,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] != i as isize {\n            return i as isize;\n        }\n        i += 1;\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510451,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] != i as isize {\n            return i as isize;\n        }\n        i += 1;\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510451,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    while i <= j {\n        let mid = (i + j) / 2;\n        if array[mid] != mid as isize {\n            if mid == 0 || array[mid - 1] == mid as isize - 1 {\n                return mid as isize;\n            }\n            j = mid - 1;\n        } else {\n            i = mid + 1;\n        }\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    while i < j {\n        let mid = (i + j) / 2;\n        if array[mid] == mid as isize {\n            i = mid + 1;\n        } else {\n            j = mid;\n        }\n    }\n    i as isize\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3`,\n right: `4`', /tmp/tmps33x2_9i.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    while i < j {\n        let mid = (i + j) / 2;\n        if array[mid] > mid as isize {\n            j = mid;\n        } else {\n            i = mid + 1;\n        }\n    }\n    i as isize\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510451,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3`,\n right: `4`', /tmp/tmp7wyi0g45.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] != i as isize {\n            return i as isize;\n        }\n        i += 1;\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510451,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    let mut mid = 0;\n    while i <= j {\n        mid = (i + j) / 2;\n        if array[mid] != mid as isize {\n            if mid > 0 && array[mid - 1] == mid as isize - 1 {\n                return mid as isize;\n            } else {\n                j = mid - 1;\n            }\n        } else {\n            i = mid + 1;\n        }\n    }\n    if array[mid] == mid as isize {\n        return mid as isize + 1;\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to subtract with overflow', /tmp/tmpd15o7tic.rs:12:21\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] != i as isize {\n            return i as isize;\n        }\n        i += 1;\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510451,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] != i as isize {\n            return i as isize;\n        }\n        i += 1;\n    }\n    i as isize\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] != i as isize {\n            return i as isize;\n        }\n        i += 1;\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510451,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] != i as isize {\n            return i as isize;\n        }\n        i += 1;\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510451,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] != i as isize {\n            return i as isize;\n        }\n        i += 1;\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510451,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] != i as isize {\n            return i as isize;\n        }\n        i += 1;\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510451,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] != i as isize {\n            return i as isize;\n        }\n        i += 1;\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510451,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] != i as isize {\n            return i as isize;\n        }\n        i += 1;\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510451,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = 1;\n    let mut result = 0;\n    while i < array.len() {\n        if array[i] != j {\n            result = j;\n            break;\n        }\n        i += 1;\n        j += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `4`', /tmp/tmp53s2q8ux.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    while i < j {\n        let mid = (i + j) / 2;\n        if array[mid] > mid as isize {\n            j = mid;\n        } else {\n            i = mid + 1;\n        }\n    }\n    i as isize\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510451,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3`,\n right: `4`', /tmp/tmp7wyi0g45.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] != i as isize {\n            return i as isize;\n        }\n        i += 1;\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510451,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] != i as isize {\n            return i as isize;\n        }\n        i += 1;\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510451,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = 1;\n    let mut missing = 0;\n    while i < array.len() {\n        if array[i] != j {\n            missing = j;\n            break;\n        }\n        i += 1;\n        j += 1;\n    }\n    missing\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510451,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `4`', /tmp/tmpfjhji9m_.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    while i < j {\n        let mid = (i + j) / 2;\n        if array[mid] == mid as isize {\n            i = mid + 1;\n        } else {\n            j = mid;\n        }\n    }\n    i as isize\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3`,\n right: `4`', /tmp/tmps33x2_9i.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] != i as isize {\n            return i as isize;\n        }\n        i += 1;\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510451,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] != i as isize {\n            return i as isize;\n        }\n        i += 1;\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510451,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    while i < j {\n        let mid = (i + j) / 2;\n        if array[mid] == mid as isize {\n            i = mid + 1;\n        } else {\n            j = mid;\n        }\n    }\n    i as isize\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3`,\n right: `4`', /tmp/tmps33x2_9i.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] != i as isize {\n            return i as isize;\n        }\n        i += 1;\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510451,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = 1;\n    let mut len = array.len();\n    while i < len {\n        if array[i] != j {\n            return j;\n        }\n        i += 1;\n        j += 1;\n    }\n    j\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `4`', /tmp/tmpz1vcxup1.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] != i as isize {\n            return i as isize;\n        }\n        i += 1;\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510451,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] != i as isize {\n            return i as isize;\n        }\n        i += 1;\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510451,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] != i as isize {\n            return i as isize;\n        }\n        i += 1;\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510451,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] != i as isize {\n            return i as isize;\n        }\n        i += 1;\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510451,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] != i as isize {\n            return i as isize;\n        }\n        i += 1;\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510451,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    while i <= j {\n        let mid = (i + j) / 2;\n        if array[mid] != mid as isize {\n            if mid == 0 || array[mid - 1] == mid as isize - 1 {\n                return mid as isize;\n            } else {\n                j = mid - 1;\n            }\n        } else {\n            i = mid + 1;\n        }\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `-1`,\n right: `4`', /tmp/tmp50j4ih3o.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len();\n    while i < j {\n        let m = (i + j) / 2;\n        if array[m] > m as isize {\n            j = m;\n        } else {\n            i = m + 1;\n        }\n    }\n    i as isize\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut smallest = 1;\n    for i in array {\n        if i == smallest {\n            smallest += 1;\n        }\n    }\n    smallest\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `0`', /tmp/tmp8srhsloo.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut idx = 0;\n    let mut min = array[idx];\n    while idx < array.len() {\n        if array[idx] != min {\n            return min;\n        }\n        min += 1;\n        idx += 1;\n    }\n    return min;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `0`', /tmp/tmpar957urf.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] != i as isize {\n            return i as isize;\n        }\n        i += 1;\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510451,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] != i as isize {\n            return i as isize;\n        }\n        i += 1;\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510451,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] != i as isize {\n            return i as isize;\n        }\n        i += 1;\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510451,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    while i <= j {\n        let mid = (i + j) / 2;\n        if array[mid] != mid as isize {\n            if mid == 0 || array[mid - 1] == mid as isize - 1 {\n                return mid as isize;\n            }\n            j = mid - 1;\n        } else {\n            i = mid + 1;\n        }\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = 1;\n    while j < array.len() {\n        if array[i] + 1 != array[j] {\n            return array[i] + 1;\n        }\n        i += 1;\n        j += 1;\n    }\n    return array[array.len() - 1] + 1;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `0`', /tmp/tmpdcd49878.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut index: isize = 0;\n    let mut missing: isize = -1;\n    while index < array.len() as isize {\n        if array[index as usize] != index {\n            missing = index;\n            break;\n        }\n        index += 1;\n    }\n    return missing;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `-1`,\n right: `4`', /tmp/tmp1tmz8lxn.rs:17:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    while i < j {\n        let mid = (i + j) / 2;\n        if array[mid] == mid as isize + 1 {\n            i = mid + 1;\n        } else {\n            j = mid;\n        }\n    }\n    if array[i] == i as isize + 1 {\n        return i as isize + 2;\n    } else {\n        return i as isize + 1;\n    }\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `4`', /tmp/tmpybnvnhv1.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] != i as isize {\n            return i as isize;\n        }\n        i += 1;\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510451,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = 1;\n    let mut len = array.len();\n    while j < len {\n        if array[i] == array[j] {\n            j += 1;\n        } else if array[i] + 1 == array[j] {\n            i += 1;\n            j += 1;\n        } else {\n            return array[i] + 1;\n        }\n    }\n    return array[i] + 1;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `0`', /tmp/tmp8x87qylp.rs:23:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] != i as isize {\n            return i as isize;\n        }\n        i += 1;\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510451,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] != i as isize {\n            return i as isize;\n        }\n        i += 1;\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510451,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] != i as isize {\n            return i as isize;\n        }\n        i += 1;\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510451,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] != i as isize {\n            return i as isize;\n        }\n        i += 1;\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510451,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    while i < j {\n        let mid = (i + j) / 2;\n        if array[mid] > mid as isize {\n            j = mid;\n        } else {\n            i = mid + 1;\n        }\n    }\n    i as isize\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510451,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3`,\n right: `4`', /tmp/tmp7wyi0g45.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] != i as isize {\n            return i as isize;\n        }\n        i += 1;\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510451,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] != i as isize {\n            return i as isize;\n        }\n        i += 1;\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510451,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    let mut mid = 0;\n    while i <= j {\n        mid = (i + j) / 2;\n        if array[mid] != mid as isize {\n            if mid == 0 || array[mid - 1] == mid as isize - 1 {\n                return mid as isize;\n            } else {\n                j = mid - 1;\n            }\n        } else {\n            i = mid + 1;\n        }\n    }\n    return mid as isize + 1;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510451,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = 1;\n    let mut n = array.len();\n    while i < n {\n        if array[i] != j {\n            return j;\n        }\n        i += 1;\n        j += 1;\n    }\n    return j;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `4`', /tmp/tmpkly1c1qg.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    while i < j {\n        let mid = (i + j) / 2;\n        if array[mid] == mid as isize {\n            i = mid + 1;\n        } else {\n            j = mid;\n        }\n    }\n    if array[i] == i as isize {\n        i as isize + 1\n    } else {\n        i as isize\n    }\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = 1;\n    while j < array.len() {\n        if array[i] + 1 != array[j] {\n            return array[i] + 1;\n        }\n        i += 1;\n        j += 1;\n    }\n    return array[i] + 1;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510451,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `0`', /tmp/tmp79xg85vx.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = 1;\n    let mut result = 0;\n    while i < array.len() {\n        if array[i] != j {\n            result = j;\n            break;\n        }\n        i += 1;\n        j += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `4`', /tmp/tmp53s2q8ux.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    let mut mid = 0;\n    while i <= j {\n        mid = (i + j) / 2;\n        if array[mid] != mid as isize {\n            if mid == 0 || array[mid - 1] == mid as isize - 1 {\n                return mid as isize;\n            } else {\n                j = mid - 1;\n            }\n        } else {\n            i = mid + 1;\n        }\n    }\n    return mid as isize + 1;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510451,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] != i as isize {\n            return i as isize;\n        }\n        i += 1;\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510451,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] != i as isize {\n            return i as isize;\n        }\n        i += 1;\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510451,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] != i as isize {\n            return i as isize;\n        }\n        i += 1;\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510451,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    while i < j {\n        let mid = (i + j) / 2;\n        if array[mid] == mid as isize {\n            i = mid + 1;\n        } else {\n            j = mid;\n        }\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3`,\n right: `4`', /tmp/tmpjek5q52h.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut index = 0;\n    let mut result = 0;\n    while index < array.len() {\n        if array[index] != index as isize {\n            result = index as isize;\n            break;\n        }\n        index += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `0`,\n right: `4`', /tmp/tmpjqtbk5pk.rs:17:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = 1;\n    let mut n = array.len();\n    while i < n {\n        if array[i] != j {\n            return j;\n        }\n        i += 1;\n        j += 1;\n    }\n    return j;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `4`', /tmp/tmpkly1c1qg.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    while i < j {\n        let mid = (i + j) / 2;\n        if array[mid] > mid as isize {\n            j = mid;\n        } else {\n            i = mid + 1;\n        }\n    }\n    i as isize\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510451,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3`,\n right: `4`', /tmp/tmp7wyi0g45.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] != i as isize {\n            return i as isize;\n        }\n        i += 1;\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510451,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    while i <= j {\n        let mid = (i + j) / 2;\n        if array[mid] != mid as isize {\n            if mid == 0 || array[mid - 1] == mid as isize - 1 {\n                return mid as isize;\n            }\n            j = mid - 1;\n        } else {\n            i = mid + 1;\n        }\n    }\n    return j as isize + 1;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    while i < j {\n        let mid = (i + j) / 2;\n        if array[mid] == mid as isize {\n            i = mid + 1;\n        } else {\n            j = mid;\n        }\n    }\n    if array[i] == i as isize {\n        i as isize + 1\n    } else {\n        i as isize\n    }\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] != i as isize {\n            return i as isize;\n        }\n        i += 1;\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510451,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] != i as isize {\n            return i as isize;\n        }\n        i += 1;\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510451,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    let mut mid = 0;\n    while i <= j {\n        mid = (i + j) / 2;\n        if array[mid] != mid as isize {\n            if mid == 0 || array[mid - 1] == mid as isize - 1 {\n                return mid as isize;\n            } else {\n                j = mid - 1;\n            }\n        } else {\n            i = mid + 1;\n        }\n    }\n    return mid as isize + 1;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510451,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = 1;\n    while j < array.len() {\n        if array[i] + 1 != array[j] {\n            return array[i] + 1;\n        }\n        i += 1;\n        j += 1;\n    }\n    return 0;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `0`,\n right: `4`', /tmp/tmpllcvkxus.rs:17:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    while i <= j {\n        let mid = (i + j) / 2;\n        if array[mid] != mid as isize {\n            if mid == 0 || array[mid - 1] == mid as isize - 1 {\n                return mid as isize;\n            }\n            j = mid - 1;\n        } else {\n            i = mid + 1;\n        }\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `-1`,\n right: `4`', /tmp/tmp364x19sb.rs:21:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] != i as isize {\n            return i as isize;\n        }\n        i += 1;\n    }\n    return array.len() as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] != i as isize {\n            return i as isize;\n        }\n        i += 1;\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510451,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut min = array[0];\n    let mut max = array[0];\n    for i in array.iter() {\n        if *i < min {\n            min = *i;\n        }\n        if *i > max {\n            max = *i;\n        }\n    }\n    let mut result = 0;\n    for i in min..max {\n        if !array.contains(&i) {\n            result = i;\n            break;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `0`,\n right: `4`', /tmp/tmppxmg1o4f.rs:25:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    while i < j {\n        let mid = (i + j) / 2;\n        if array[mid] > mid as isize {\n            j = mid;\n        } else {\n            i = mid + 1;\n        }\n    }\n    i as isize\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510451,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3`,\n right: `4`', /tmp/tmp7wyi0g45.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    while i < j {\n        let mid = (i + j) / 2;\n        if array[mid] == mid as isize {\n            i = mid + 1;\n        } else {\n            j = mid;\n        }\n    }\n    i as isize\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3`,\n right: `4`', /tmp/tmps33x2_9i.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] != i as isize {\n            return i as isize;\n        }\n        i += 1;\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510451,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] != i as isize {\n            return i as isize;\n        }\n        i += 1;\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510451,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] != i as isize {\n            return i as isize;\n        }\n        i += 1;\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510451,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] != i as isize {\n            return i as isize;\n        }\n        i += 1;\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510451,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] != i as isize {\n            return i as isize;\n        }\n        i += 1;\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510451,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] != i as isize {\n            return i as isize;\n        }\n        i += 1;\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510451,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] != i as isize {\n            return i as isize;\n        }\n        i += 1;\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510451,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] != i as isize {\n            return i as isize;\n        }\n        i += 1;\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510451,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = 1;\n    let mut n = array.len();\n    while i < n {\n        if array[i] != j {\n            return j;\n        }\n        i += 1;\n        j += 1;\n    }\n    j\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `4`', /tmp/tmpet38zs5o.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] != i as isize {\n            return i as isize;\n        }\n        i += 1;\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510451,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = 1;\n    let mut missing_number = 0;\n    while i < array.len() {\n        if array[i] != j {\n            missing_number = j;\n            break;\n        }\n        i += 1;\n        j += 1;\n    }\n    missing_number\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `4`', /tmp/tmpu1plj4vi.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    while i <= j {\n        let mid = (i + j) / 2;\n        if array[mid] != mid as isize {\n            if mid == 0 || array[mid - 1] == mid as isize - 1 {\n                return mid as isize;\n            } else {\n                j = mid - 1;\n            }\n        } else {\n            i = mid + 1;\n        }\n    }\n    return j as isize + 1;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510451,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] != i as isize {\n            return i as isize;\n        }\n        i += 1;\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510451,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] != i as isize {\n            return i as isize;\n        }\n        i += 1;\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510451,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut min = array[0];\n    let mut max = array[0];\n    for i in array.iter() {\n        if *i < min {\n            min = *i;\n        }\n        if *i > max {\n            max = *i;\n        }\n    }\n    let mut index = min;\n    while index < max {\n        if !array.contains(&index) {\n            return index;\n        }\n        index += 1;\n    }\n    return index;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `3`,\n right: `4`', /tmp/tmpktu94uof.rs:25:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] != i as isize {\n            return i as isize;\n        }\n        i += 1;\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510451,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut smallest = 1;\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] == smallest {\n            smallest += 1;\n            i += 1;\n        } else {\n            break;\n        }\n    }\n    smallest\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `4`', /tmp/tmpf54_i6hm.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    while i <= j {\n        let mid = (i + j) / 2;\n        if array[mid] != mid as isize {\n            if mid == 0 || array[mid - 1] == mid as isize - 1 {\n                return mid as isize;\n            }\n            j = mid - 1;\n        } else {\n            i = mid + 1;\n        }\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] != i as isize {\n            return i as isize;\n        }\n        i += 1;\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510451,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    while i <= j {\n        let mid = (i + j) / 2;\n        if array[mid] != mid as isize {\n            if mid == 0 || array[mid - 1] == mid as isize - 1 {\n                return mid as isize;\n            }\n            j = mid - 1;\n        } else {\n            i = mid + 1;\n        }\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `-1`,\n right: `4`', /tmp/tmp364x19sb.rs:21:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] != i as isize {\n            return i as isize;\n        }\n        i += 1;\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510451,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] != i as isize {\n            return i as isize;\n        }\n        i += 1;\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510451,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut min = 0;\n    let mut max = array.len();\n    while min < max {\n        let mid = (min + max) / 2;\n        if array[mid] > mid as isize {\n            max = mid;\n        } else {\n            min = mid + 1;\n        }\n    }\n    min as isize\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] != i as isize {\n            return i as isize;\n        }\n        i += 1;\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510451,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    while i <= j {\n        let mid = (i + j) / 2;\n        if array[mid] != mid as isize {\n            if mid == 0 || array[mid - 1] == mid as isize - 1 {\n                return mid as isize;\n            }\n            j = mid - 1;\n        } else {\n            i = mid + 1;\n        }\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut index = 0;\n    let mut missing = 0;\n    while index < array.len() {\n        if array[index] != index as isize {\n            missing = index as isize;\n            break;\n        }\n        index += 1;\n    }\n    missing\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `0`,\n right: `4`', /tmp/tmpjonyal2g.rs:17:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = 1;\n    while j < array.len() {\n        if array[i] + 1 != array[j] {\n            return array[i] + 1;\n        }\n        i += 1;\n        j += 1;\n    }\n    return array[i] + 1;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510451,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `0`', /tmp/tmp79xg85vx.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    let mut mid;\n    while i <= j {\n        mid = (i + j) / 2;\n        if array[mid] != mid as isize {\n            if mid > 0 && array[mid - 1] == mid as isize - 1 {\n                return mid as isize;\n            } else {\n                j = mid - 1;\n            }\n        } else {\n            i = mid + 1;\n        }\n    }\n    if i == array.len() {\n        return array.len() as isize;\n    }\n    return -1;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to subtract with overflow', /tmp/tmp2ruwslzd.rs:12:21\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] != i as isize {\n            return i as isize;\n        }\n        i += 1;\n    }\n    return array.len() as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] != i as isize {\n            return i as isize;\n        }\n        i += 1;\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510451,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] != i as isize {\n            return i as isize;\n        }\n        i += 1;\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510451,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] != i as isize {\n            return i as isize;\n        }\n        i += 1;\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510451,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = 1;\n    while j < array.len() {\n        if array[i] + 1 != array[j] {\n            return array[i] + 1;\n        }\n        i += 1;\n        j += 1;\n    }\n    return array[i] + 1;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510451,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `0`', /tmp/tmp79xg85vx.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] != i as isize {\n            return i as isize;\n        }\n        i += 1;\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510451,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    let mut j = array.len() - 1;\n    let mut mid = 0;\n    while i <= j {\n        mid = (i + j) / 2;\n        if array[mid] != mid as isize {\n            if mid == 0 || array[mid - 1] == mid as isize - 1 {\n                return mid as isize;\n            } else {\n                j = mid - 1;\n            }\n        } else {\n            i = mid + 1;\n        }\n    }\n    return mid as isize + 1;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510451,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut min = 0;\n    let mut max = array.len() as isize;\n    let mut mid = (min + max) / 2;\n    while min < max {\n        if array[mid as usize] == mid {\n            min = mid + 1;\n        } else {\n            max = mid;\n        }\n        mid = (min + max) / 2;\n    }\n    return min;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1666123191,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfn find_First_Missing(array: Vec<isize>) -> isize {\n    let mut i = 0;\n    while i < array.len() {\n        if array[i] != i as isize {\n            return i as isize;\n        }\n        i += 1;\n    }\n    return i as isize;\n}\n\nfn main() {\n    let candidate = find_First_Missing;\n    assert_eq!(candidate(vec![0, 1, 2, 3]), 4);\n    assert_eq!(candidate(vec![0, 1, 2, 6, 9]), 3);\n    assert_eq!(candidate(vec![2, 3, 5, 8, 9]), 0);\n}\n",
      "timestamp": 1665510451,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}