{
  "name": "mbpp_239_get_total_number_of_sequences",
  "language": "rs",
  "prompt": "/// Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\nfn get_total_number_of_sequences(m: isize, n: isize) -> isize {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_239_get_total_number_of_sequences.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\nfn main() {\n    let candidate = get_total_number_of_sequences;\n    assert_eq!(candidate(10, 4), 4);\n    assert_eq!(candidate(5, 2), 6);\n    assert_eq!(candidate(16, 3), 84);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    let mut dp = vec![vec![0; n as usize + 1]; m as usize + 1];\n    for i in 0..=m {\n        dp[i as usize][0] = 1;\n    }\n    for i in 0..=m {\n        for j in 1..=n {\n            for k in 2 * i..=i {\n                dp[i as usize][j as usize] += dp[k as usize][j as usize - 1];\n            }\n        }\n    }\n    dp[m as usize][n as usize]",
    "    let mut dp = vec![vec![0; (m + 1) as usize]; (n + 1) as usize];\n\n    for i in 1..=m {\n        dp[1][i as usize] = 1;\n    }\n\n    for i in 2..=n {\n        for j in 2..=m {\n            for k in 2..=j {\n                dp[i as usize][j as usize] += dp[(i - 1) as usize][(j - k) as usize];\n            }\n        }\n    }\n\n    dp[n as usize][m as usize]",
    "    let mut dp = vec![vec![0; (m + 1) as usize]; (n + 1) as usize];\n    for i in 1..=m {\n        dp[1][i as usize] = 1;\n    }\n    for i in 2..=n {\n        for j in 1..=m {\n            for k in 1..=j / 2 {\n                dp[i as usize][j as usize] += dp[(i - 1) as usize][k as usize];\n            }\n        }\n    }\n    dp[n as usize].iter().sum()",
    "    if n == 1 {\n        return m;\n    }\n\n    let mut total = 0;\n    for i in 2..=m {\n        total += get_total_number_of_sequences(m / i, n - 1);\n    }\n\n    total",
    "    let mut dp = vec![vec![0; n as usize + 1]; m as usize + 1];\n    for i in 0..=m {\n        dp[i as usize][1] = 1;\n    }\n    for i in 0..=m {\n        for j in 2..=n {\n            for k in (2 * i)..=i {\n                dp[i as usize][j as usize] += dp[k as usize][j as usize - 1];\n            }\n        }\n    }\n    dp[m as usize][n as usize]",
    "    let mut dp = vec![vec![0; n as usize + 1]; m as usize + 1];\n    for i in 0..=m {\n        dp[i as usize][1] = 1;\n    }\n    for i in 2..=n {\n        for j in 2..=m {\n            dp[j as usize][i as usize] = dp[j as usize][i as usize - 1] + dp[j as usize - 1][i as usize];\n        }\n    }\n    dp[m as usize][n as usize]",
    "    let mut dp = vec![vec![0; n as usize + 1]; m as usize + 1];\n    for i in 0..=m {\n        dp[i as usize][1] = 1;\n    }\n    for i in 2..=n {\n        for j in 2..=m {\n            for k in 2..=j {\n                dp[j as usize][i as usize] += dp[k as usize][i as usize - 1];\n            }\n        }\n    }\n    dp[m as usize][n as usize]",
    "    let mut dp = vec![vec![0; n as usize + 1]; m as usize + 1];\n    for i in 0..=m {\n        dp[i as usize][1] = 1;\n    }\n    for i in 2..=n {\n        for j in 2..=m {\n            for k in 2..=j {\n                dp[j as usize][i as usize] += dp[k as usize][i as usize - 1];\n            }\n        }\n    }\n    dp[m as usize][n as usize]",
    "    let mut total = 0;\n    for i in 1..=m {\n        total += get_total_number_of_sequences_helper(m, n, i);\n    }\n    total",
    "    let mut dp = vec![vec![0; n as usize + 1]; m as usize + 1];\n    for i in 0..=m {\n        dp[i as usize][1] = 1;\n    }\n    for i in 0..=m {\n        for j in 2..=n {\n            for k in 2..=i {\n                dp[i as usize][j as usize] += dp[k as usize - 1][j as usize - 1];\n            }\n        }\n    }\n    dp[m as usize][n as usize]",
    "    let mut dp = vec![vec![0; n as usize + 1]; m as usize + 1];\n    for i in 0..=m {\n        dp[i as usize][1] = 1;\n    }\n    for i in 0..=m {\n        for j in 2..=n {\n            for k in 2..=i {\n                dp[i as usize][j as usize] += dp[(i - k) as usize][(j - 1) as usize];\n            }\n        }\n    }\n    dp[m as usize][n as usize]",
    "    let mut dp = vec![vec![0; n as usize + 1]; m as usize + 1];\n    for i in 0..=m {\n        dp[i as usize][1] = 1;\n    }\n    for i in 0..=m {\n        for j in 2..=n {\n            for k in 2..=i {\n                dp[i as usize][j as usize] += dp[k as usize - 1][j as usize - 1];\n            }\n        }\n    }\n    dp[m as usize][n as usize]",
    "    let mut dp: Vec<isize> = vec![0; (m + 1) as usize];\n    let mut dp_prev: Vec<isize> = vec![0; (m + 1) as usize];\n    dp[0] = 1;\n    for _ in 0..n {\n        for i in 0..m + 1 {\n            dp[i as usize] = 0;\n            for j in 0..i + 1 {\n                if j * 2 <= i {\n                    dp[i as usize] += dp_prev[j as usize];\n                }\n            }\n        }\n        dp_prev = dp.clone();\n    }\n    dp[m as usize]",
    "    let mut dp = vec![vec![0; (m + 1) as usize]; (n + 1) as usize];\n    for i in 0..=m {\n        dp[0][i as usize] = 1;\n    }\n    for i in 1..=n {\n        for j in 0..=m {\n            dp[i as usize][j as usize] = if j == 0 {\n                0\n            } else {\n                dp[(i - 1) as usize][j as usize] + dp[i as usize][(j - 1) as usize]\n            };\n        }\n    }\n    dp[n as usize][m as usize]",
    "    if n == 0 {\n        return 1;\n    }\n    let mut total = 0;\n    for i in (2..=m).rev() {\n        if i >= n {\n            total += get_total_number_of_sequences(i, n - 1);\n        }\n    }\n    total",
    "    let mut dp = vec![vec![0; n as usize + 1]; m as usize + 1];\n    for i in 0..=m {\n        dp[i as usize][1] = 1;\n    }\n    for i in 2..=n {\n        for j in 2..=m {\n            for k in 2..=j {\n                dp[j as usize][i as usize] += dp[k as usize][i as usize - 1];\n            }\n        }\n    }\n    dp[m as usize][n as usize]",
    "    let mut dp = vec![0; (n + 1) as usize];\n    dp[0] = 1;\n    for i in 1..=n {\n        for j in 1..=m {\n            if j >= 2 * i {\n                dp[i as usize] += dp[(i - j) as usize];\n            }\n        }\n    }\n    dp[n as usize]",
    "    let mut dp = vec![vec![0; n as usize + 1]; m as usize + 1];\n    for i in 0..=m {\n        for j in 0..=n {\n            if j == 0 {\n                dp[i as usize][j as usize] = 1;\n            } else if i == 0 {\n                dp[i as usize][j as usize] = 0;\n            } else {\n                dp[i as usize][j as usize] = dp[(i - 1) as usize][j as usize] + dp[(i / 2) as usize][(j - 1) as usize];\n            }\n        }\n    }\n    dp[m as usize][n as usize]",
    "    let mut dp = vec![0; (n + 1) as usize];\n    dp[0] = 1;\n    for i in 1..=n {\n        for j in (2 * i)..=m {\n            dp[i as usize] += dp[(i - j / 2) as usize];\n        }\n    }\n    dp[n as usize]",
    "    let mut dp = vec![vec![0; (m + 1) as usize]; (n + 1) as usize];\n    dp[0][0] = 1;\n    for i in 1..=n {\n        for j in 1..=m {\n            let mut sum = 0;\n            for k in (j / 2)..=j {\n                sum += dp[(i - 1) as usize][k as usize];\n            }\n            dp[i as usize][j as usize] = sum;\n        }\n    }\n    dp[n as usize].iter().sum()"
  ]
}