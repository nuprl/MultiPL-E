{
  "name": "mbpp_459_remove_uppercase",
  "language": "rs",
  "prompt": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_459_remove_uppercase.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    let mut str2 = String::new();\n    for c in str1.chars() {\n        if !c.is_uppercase() {\n            str2.push(c);\n        }\n    }\n    str2\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    let mut result = String::new();\n    for c in str1.chars() {\n        if c.is_lowercase() {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    let mut str2 = String::new();\n    for c in str1.chars() {\n        if c.is_lowercase() {\n            str2.push(c);\n        }\n    }\n    str2\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    let mut str2 = String::from(\"\");\n    for c in str1.chars() {\n        if !c.is_uppercase() {\n            str2.push(c);\n        }\n    }\n    str2\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    str1.chars().filter(|x| !x.is_uppercase()).collect()\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    let mut str2 = String::new();\n    for c in str1.chars() {\n        if c.is_lowercase() {\n            str2.push(c);\n        }\n    }\n    str2\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    let mut str2 = String::new();\n    for c in str1.chars() {\n        if c.is_lowercase() {\n            str2.push(c);\n        }\n    }\n    str2\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    let mut str2 = String::new();\n    for c in str1.chars() {\n        if !c.is_uppercase() {\n            str2.push(c);\n        }\n    }\n    str2\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    str1.chars().filter(|c| !c.is_uppercase()).collect()\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    let mut result = String::new();\n    for c in str1.chars() {\n        if !c.is_uppercase() {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    let mut result = String::new();\n    for c in str1.chars() {\n        if c.is_lowercase() {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    let mut result = String::new();\n    for c in str1.chars() {\n        if !c.is_uppercase() {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    let mut result = String::new();\n    for c in str1.chars() {\n        if c.is_lowercase() {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    str1.chars().filter(|c| !c.is_uppercase()).collect()\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    str1.chars().filter(|c| !c.is_uppercase()).collect::<String>()\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    let mut result = String::new();\n    for c in str1.chars() {\n        if !c.is_uppercase() {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    str1.chars().filter(|c| !c.is_uppercase()).collect()\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    str1.chars().filter(|c| !c.is_uppercase()).collect()\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    let mut new_str = String::new();\n    for c in str1.chars() {\n        if !c.is_uppercase() {\n            new_str.push(c);\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    str1.chars().filter(|c| !c.is_uppercase()).collect()\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    let mut result = String::new();\n    for c in str1.chars() {\n        if c.is_lowercase() {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    str1.chars().filter(|c| !c.is_uppercase()).collect::<String>()\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    let mut result = String::new();\n    for c in str1.chars() {\n        if !c.is_uppercase() {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    let mut str2 = String::new();\n    for c in str1.chars() {\n        if !c.is_uppercase() {\n            str2.push(c);\n        }\n    }\n    str2\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    let mut str2 = String::new();\n    for c in str1.chars() {\n        if c.is_lowercase() {\n            str2.push(c);\n        }\n    }\n    str2\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c.is_lowercase() {\n            new_str.push(c);\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    let mut result = String::new();\n    for c in str1.chars() {\n        if !c.is_uppercase() {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    let mut str2 = String::new();\n    for c in str1.chars() {\n        if !c.is_uppercase() {\n            str2.push(c);\n        }\n    }\n    str2\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    let mut result = String::new();\n    for c in str1.chars() {\n        if !c.is_uppercase() {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    let mut new_str = String::new();\n    for c in str1.chars() {\n        if !c.is_uppercase() {\n            new_str.push(c);\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    let mut result = String::new();\n    for c in str1.chars() {\n        if c.is_uppercase() {\n            result.push_str(&c.to_lowercase().to_string());\n        } else {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1666123009,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"castyourfavoritetvshows\"`,\n right: `\"cstyoravoitshos\"`', /tmp/tmpt9wuij10.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    let mut result = String::new();\n    for c in str1.chars() {\n        if !c.is_uppercase() {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c.is_lowercase() {\n            new_str.push(c);\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    str1.chars()\n        .filter(|&c| !c.is_uppercase())\n        .collect::<String>()\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1666123009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    let mut str2 = String::new();\n    for c in str1.chars() {\n        if c.is_lowercase() {\n            str2.push(c);\n        }\n    }\n    str2\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    str1.chars().filter(|c| !c.is_uppercase()).collect()\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    str1.chars().filter(|c| !c.is_uppercase()).collect()\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    let mut result = String::new();\n    for c in str1.chars() {\n        if !c.is_uppercase() {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    let mut result = String::new();\n    for c in str1.chars() {\n        if !c.is_uppercase() {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    str1.chars().filter(|c| !c.is_uppercase()).collect()\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    str1.chars().filter(|c| !c.is_uppercase()).collect()\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    let mut result = String::new();\n    for c in str1.chars() {\n        if !c.is_uppercase() {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    let mut str2 = String::new();\n    for c in str1.chars() {\n        if !c.is_uppercase() {\n            str2.push(c);\n        }\n    }\n    str2\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    let mut str2 = String::new();\n    for c in str1.chars() {\n        if !c.is_uppercase() {\n            str2.push(c);\n        }\n    }\n    str2\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    str1.chars().filter(|c| !c.is_uppercase()).collect()\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    let mut result = String::new();\n    let mut is_upper = false;\n    for c in str1.chars() {\n        if c.is_uppercase() {\n            is_upper = true;\n        } else if is_upper {\n            is_upper = false;\n        } else {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1666123009,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"ctyovotho\"`,\n right: `\"cstyoravoitshos\"`', /tmp/tmpjgw8dvvz.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    let mut result = String::new();\n    for c in str1.chars() {\n        if c.is_lowercase() {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    let mut result = String::new();\n    for c in str1.chars() {\n        if !c.is_uppercase() {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    let mut result = String::new();\n    for c in str1.chars() {\n        if c.is_lowercase() {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    let mut str2 = String::new();\n    for c in str1.chars() {\n        if !c.is_uppercase() {\n            str2.push(c);\n        }\n    }\n    str2\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    str1.chars().filter(|c| !c.is_uppercase()).collect::<String>()\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    str1.chars().filter(|c| !c.is_uppercase()).collect()\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    str1.chars().filter(|c| !c.is_uppercase()).collect()\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    str1.chars().filter(|c| !c.is_uppercase()).collect()\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    let mut str2 = String::new();\n    for c in str1.chars() {\n        if c.is_uppercase() {\n            str2.push_str(&c.to_string());\n        }\n    }\n    str2\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1666123009,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"AUFRETVW\"`,\n right: `\"cstyoravoitshos\"`', /tmp/tmprh4c73av.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    str1.chars()\n        .filter(|c| !c.is_uppercase())\n        .collect::<String>()\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    let mut result = String::new();\n    for c in str1.chars() {\n        if c.is_lowercase() {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    let mut str2 = String::new();\n    for c in str1.chars() {\n        if c.is_lowercase() {\n            str2.push(c);\n        }\n    }\n    str2\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    let mut new_str = String::new();\n    for c in str1.chars() {\n        if !c.is_uppercase() {\n            new_str.push(c);\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    str1.chars()\n        .filter(|c| !c.is_uppercase())\n        .collect::<String>()\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    str1.chars().filter(|c| !c.is_uppercase()).collect()\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    let mut result = String::new();\n    for c in str1.chars() {\n        if !c.is_uppercase() {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    let mut str2 = String::new();\n    for c in str1.chars() {\n        if !c.is_uppercase() {\n            str2.push(c);\n        }\n    }\n    str2\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    let mut str2 = String::new();\n    for c in str1.chars() {\n        if c.is_lowercase() {\n            str2.push(c);\n        }\n    }\n    str2\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    let mut str2 = String::new();\n    for c in str1.chars() {\n        if !c.is_uppercase() {\n            str2.push(c);\n        }\n    }\n    str2\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    let mut result = String::new();\n    for c in str1.chars() {\n        if !c.is_uppercase() {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    str1.chars().filter(|c| !c.is_uppercase()).collect()\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    let mut str2 = String::new();\n    for c in str1.chars() {\n        if !c.is_uppercase() {\n            str2.push(c);\n        }\n    }\n    str2\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    str1.chars().filter(|c| !c.is_uppercase()).collect()\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    str1.chars().filter(|c| c.is_lowercase()).collect()\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    str1.chars().filter(|c| !c.is_uppercase()).collect()\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    str1.chars().filter(|x| x.is_lowercase()).collect()\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    let mut str2 = String::new();\n    for c in str1.chars() {\n        if c.is_lowercase() {\n            str2.push(c);\n        }\n    }\n    str2\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    let mut str2 = String::new();\n    for c in str1.chars() {\n        if c.is_lowercase() {\n            str2.push(c);\n        }\n    }\n    str2\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    let mut str2 = String::new();\n    for c in str1.chars() {\n        if !c.is_uppercase() {\n            str2.push(c);\n        }\n    }\n    str2\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    let mut new_str = String::new();\n    for c in str1.chars() {\n        if !c.is_uppercase() {\n            new_str.push(c);\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c.is_lowercase() {\n            new_str.push(c);\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    let mut result = String::new();\n    for c in str1.chars() {\n        if c.is_lowercase() {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    str1.chars().filter(|c| c.is_lowercase()).collect()\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    str1.chars().filter(|c| !c.is_uppercase()).collect()\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    let mut result = String::new();\n    for c in str1.chars() {\n        if !c.is_uppercase() {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    let mut result = String::new();\n    for c in str1.chars() {\n        if !c.is_uppercase() {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    str1.chars().filter(|c| !c.is_uppercase()).collect()\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    let mut result = String::new();\n    for c in str1.chars() {\n        if c.is_lowercase() {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    let mut result = String::new();\n    for c in str1.chars() {\n        if !c.is_uppercase() {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    let mut str2 = String::new();\n    for c in str1.chars() {\n        if c.is_lowercase() {\n            str2.push(c);\n        }\n    }\n    str2\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    let mut result = String::new();\n    for c in str1.chars() {\n        if c.is_lowercase() {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    str1.chars().filter(|c| !c.is_uppercase()).collect()\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    let mut str2 = String::new();\n    for c in str1.chars() {\n        if !c.is_uppercase() {\n            str2.push(c);\n        }\n    }\n    str2\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    let mut str2 = String::new();\n    for c in str1.chars() {\n        if c.is_lowercase() {\n            str2.push(c);\n        }\n    }\n    str2\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    let mut result = String::new();\n    for c in str1.chars() {\n        if !c.is_uppercase() {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    str1.chars().filter(|c| !c.is_uppercase()).collect()\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    let mut str2 = String::new();\n    for c in str1.chars() {\n        if c.is_lowercase() {\n            str2.push(c);\n        }\n    }\n    str2\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    let mut result = String::new();\n    for c in str1.chars() {\n        if c.is_lowercase() {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    str1.chars().filter(|c| c.is_lowercase()).collect()\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    let mut result = String::new();\n    for c in str1.chars() {\n        if !c.is_uppercase() {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    str1.chars().filter(|c| !c.is_uppercase()).collect()\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    let mut new_str = String::new();\n    for c in str1.chars() {\n        if !c.is_uppercase() {\n            new_str.push(c);\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    let mut str2 = String::new();\n    for c in str1.chars() {\n        if c.is_lowercase() {\n            str2.push(c);\n        }\n    }\n    str2\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    let mut result = String::new();\n    for ch in str1.chars() {\n        if ch.is_lowercase() {\n            result.push(ch);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1666123009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    let mut result = String::new();\n    for c in str1.chars() {\n        if !c.is_uppercase() {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    let mut str2 = String::new();\n    for c in str1.chars() {\n        if c.is_lowercase() {\n            str2.push(c);\n        }\n    }\n    str2\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    let mut result = String::new();\n    for c in str1.chars() {\n        if c.is_lowercase() {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    str1.chars()\n        .filter(|c| !c.is_uppercase())\n        .collect::<String>()\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    let mut str2 = String::new();\n    for c in str1.chars() {\n        if !c.is_uppercase() {\n            str2.push(c);\n        }\n    }\n    str2\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    let mut str2 = String::new();\n    for c in str1.chars() {\n        if !c.is_uppercase() {\n            str2.push(c);\n        }\n    }\n    str2\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    str1.chars().filter(|c| !c.is_uppercase()).collect()\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    str1.chars()\n        .filter(|c| !c.is_uppercase())\n        .collect::<String>()\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    let mut str2 = String::new();\n    for c in str1.chars() {\n        if c.is_lowercase() {\n            str2.push(c);\n        }\n    }\n    str2\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    let mut result = String::new();\n    for c in str1.chars() {\n        if !c.is_uppercase() {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    let mut result = String::new();\n    let mut is_uppercase = false;\n    for c in str1.chars() {\n        if c.is_uppercase() {\n            is_uppercase = true;\n        } else if is_uppercase {\n            is_uppercase = false;\n        } else {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1666123009,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"ctyovotho\"`,\n right: `\"cstyoravoitshos\"`', /tmp/tmp66lzywim.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    str1.chars().filter(|c| !c.is_uppercase()).collect()\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    let mut str2 = String::new();\n    for c in str1.chars() {\n        if c.is_lowercase() {\n            str2.push(c);\n        }\n    }\n    str2\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    let mut result = String::new();\n    for c in str1.chars() {\n        if c.is_lowercase() {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    let mut result = String::new();\n    for c in str1.chars() {\n        if c.is_lowercase() {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    str1.chars().filter(|c| c.is_lowercase()).collect()\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    let mut str2 = String::new();\n    for c in str1.chars() {\n        if !c.is_uppercase() {\n            str2.push(c);\n        }\n    }\n    str2\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    let mut result = String::new();\n    for c in str1.chars() {\n        if !c.is_uppercase() {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    let mut result = String::new();\n    for c in str1.chars() {\n        if !c.is_uppercase() {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    str1.chars().filter(|c| c.is_lowercase()).collect()\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    let mut result = String::new();\n    for c in str1.chars() {\n        if c.is_lowercase() {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    let mut result = String::new();\n    for c in str1.chars() {\n        if !c.is_uppercase() {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    let mut new_str = String::new();\n    for c in str1.chars() {\n        if !c.is_uppercase() {\n            new_str.push(c);\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    let mut result = String::new();\n    let mut is_uppercase = false;\n    for c in str1.chars() {\n        if c.is_uppercase() {\n            is_uppercase = true;\n        } else if is_uppercase {\n            is_uppercase = false;\n        } else {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1666123009,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"ctyovotho\"`,\n right: `\"cstyoravoitshos\"`', /tmp/tmp66lzywim.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    let mut result = String::new();\n    for c in str1.chars() {\n        if !c.is_uppercase() {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    str1.chars().filter(|c| !c.is_uppercase()).collect()\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    let mut result = String::new();\n    for c in str1.chars() {\n        if !c.is_uppercase() {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    let mut result = String::new();\n    for c in str1.chars() {\n        if c.is_lowercase() {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    str1.chars()\n        .filter(|c| !c.is_uppercase())\n        .collect::<String>()\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    let mut result = String::new();\n    for c in str1.chars() {\n        if !c.is_uppercase() {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    str1.chars()\n        .filter(|c| c.is_lowercase())\n        .collect::<String>()\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1666123008,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    str1.chars().filter(|x| x.is_lowercase()).collect()\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c.is_lowercase() {\n            new_str.push(c);\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    let mut result = String::new();\n    for c in str1.chars() {\n        if !c.is_uppercase() {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c.is_lowercase() {\n            new_str.push(c);\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    str1.chars().filter(|c| !c.is_uppercase()).collect()\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    let mut str2 = String::new();\n    for c in str1.chars() {\n        if !c.is_uppercase() {\n            str2.push(c);\n        }\n    }\n    str2\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    let mut result = String::new();\n    for c in str1.chars() {\n        if c.is_lowercase() {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    let mut res = String::new();\n    for c in str1.chars() {\n        if !c.is_uppercase() {\n            res.push(c);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1666123009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    let mut str2 = String::new();\n    for c in str1.chars() {\n        if c.is_lowercase() {\n            str2.push(c);\n        }\n    }\n    str2\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    str1.chars().filter(|c| !c.is_uppercase()).collect()\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    let mut str2 = String::new();\n    for c in str1.chars() {\n        if !c.is_uppercase() {\n            str2.push(c);\n        }\n    }\n    str2\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    let mut result = String::new();\n    for ch in str1.chars() {\n        if !ch.is_uppercase() {\n            result.push(ch);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1666123009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    let mut result = String::new();\n    for c in str1.chars() {\n        if !c.is_uppercase() {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    str1.chars().filter(|c| !c.is_uppercase()).collect()\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    let mut result = String::new();\n    for c in str1.chars() {\n        if c.is_lowercase() {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    str1.chars().filter(|c| !c.is_uppercase()).collect()\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    let mut result = String::new();\n    for c in str1.chars() {\n        if !c.is_uppercase() {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c.is_lowercase() {\n            new_str.push(c);\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    let mut str2 = String::new();\n    for c in str1.chars() {\n        if c.is_lowercase() {\n            str2.push(c);\n        }\n    }\n    str2\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    let mut str2 = String::new();\n    for c in str1.chars() {\n        if c.is_lowercase() {\n            str2.push(c);\n        }\n    }\n    str2\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c.is_lowercase() {\n            new_str.push(c);\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    let mut result = String::new();\n    let mut is_upper = false;\n    for c in str1.chars() {\n        if c.is_uppercase() {\n            is_upper = true;\n        } else {\n            if !is_upper {\n                result.push(c);\n            }\n            is_upper = false;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1666123009,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"ctyovotho\"`,\n right: `\"cstyoravoitshos\"`', /tmp/tmpr4ir9nl2.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    str1.chars().filter(|c| !c.is_uppercase()).collect()\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    let mut str2 = String::new();\n    for c in str1.chars() {\n        if c.is_lowercase() {\n            str2.push(c);\n        }\n    }\n    str2\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    let mut result = String::new();\n    for c in str1.chars() {\n        if c.is_lowercase() {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    str1.chars().filter(|c| !c.is_uppercase()).collect()\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    let mut result = String::new();\n    for c in str1.chars() {\n        if c.is_lowercase() {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    let mut str2 = String::new();\n    for c in str1.chars() {\n        if c.is_lowercase() {\n            str2.push(c);\n        }\n    }\n    str2\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    let mut str2 = String::new();\n    for i in str1.chars() {\n        if i.is_lowercase() {\n            str2.push(i);\n        }\n    }\n    str2\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1666123009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    str1.chars().filter(|x| !x.is_uppercase()).collect()\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    str1.chars().filter(|c| !c.is_uppercase()).collect::<String>()\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    let mut str2 = String::new();\n    for c in str1.chars() {\n        if c.is_lowercase() {\n            str2.push(c);\n        }\n    }\n    str2\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    let mut result = String::new();\n    for c in str1.chars() {\n        if c.is_lowercase() {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    let mut result = String::new();\n    for c in str1.chars() {\n        if !c.is_uppercase() {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    let mut result = String::new();\n    for c in str1.chars() {\n        if !c.is_uppercase() {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    let mut result = String::new();\n    for c in str1.chars() {\n        if c.is_lowercase() {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    str1.chars().filter(|c| !c.is_uppercase()).collect()\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    let mut result = String::new();\n    for c in str1.chars() {\n        if c.is_lowercase() {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    let mut result = String::new();\n    for c in str1.chars() {\n        if !c.is_uppercase() {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    let mut result = String::new();\n    for c in str1.chars() {\n        if !c.is_uppercase() {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    let mut result = String::new();\n    for c in str1.chars() {\n        if c.is_lowercase() {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    let mut result = String::new();\n    for c in str1.chars() {\n        if !c.is_uppercase() {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    str1.chars().filter(|x| !x.is_uppercase()).collect()\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    let mut result = String::new();\n    for c in str1.chars() {\n        if !c.is_uppercase() {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    str1.chars().filter(|c| !c.is_uppercase()).collect()\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    let mut str2 = String::new();\n    for c in str1.chars() {\n        if c.is_lowercase() {\n            str2.push(c);\n        }\n    }\n    str2\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    let mut result = String::new();\n    for c in str1.chars() {\n        if c.is_lowercase() {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    let mut new_str = String::new();\n    for c in str1.chars() {\n        if !c.is_uppercase() {\n            new_str.push(c);\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    str1.chars().filter(|c| !c.is_uppercase()).collect()\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    let mut result = String::new();\n    for c in str1.chars() {\n        if c.is_uppercase() {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1666123009,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"AUFRETVW\"`,\n right: `\"cstyoravoitshos\"`', /tmp/tmpmnq754wh.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    let mut result = String::new();\n    for c in str1.chars() {\n        if c.is_lowercase() {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    let mut str2 = String::new();\n    for c in str1.chars() {\n        if c.is_lowercase() {\n            str2.push(c);\n        }\n    }\n    str2\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    str1.chars().filter(|c| !c.is_uppercase()).collect()\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    str1.chars().filter(|c| !c.is_uppercase()).collect()\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    let mut result = String::new();\n    for c in str1.chars() {\n        if c.is_lowercase() {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    let mut result = String::new();\n    for c in str1.chars() {\n        if !c.is_uppercase() {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    let mut str2 = String::new();\n    for c in str1.chars() {\n        if c.is_lowercase() {\n            str2.push(c);\n        }\n    }\n    str2\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    let mut str2 = String::new();\n    for c in str1.chars() {\n        if !c.is_uppercase() {\n            str2.push(c);\n        }\n    }\n    str2\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    str1.chars().filter(|c| c.is_lowercase()).collect()\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    let mut result = String::new();\n    for c in str1.chars() {\n        if c.is_lowercase() {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    str1.chars().filter(|c| !c.is_uppercase()).collect()\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    let mut result = String::new();\n    let mut is_uppercase = false;\n    for c in str1.chars() {\n        if c.is_uppercase() {\n            is_uppercase = true;\n        } else if is_uppercase {\n            is_uppercase = false;\n        } else {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1666123009,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"ctyovotho\"`,\n right: `\"cstyoravoitshos\"`', /tmp/tmp66lzywim.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    let mut result = String::new();\n    for c in str1.chars() {\n        if c.is_lowercase() {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    let mut str2 = String::new();\n    for c in str1.chars() {\n        if !c.is_uppercase() {\n            str2.push(c);\n        }\n    }\n    str2\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    let mut str2 = String::new();\n    for c in str1.chars() {\n        if c.is_lowercase() {\n            str2.push(c);\n        }\n    }\n    str2\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    let mut str2 = String::new();\n    for c in str1.chars() {\n        if !c.is_uppercase() {\n            str2.push(c);\n        }\n    }\n    str2\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    str1.chars().filter(|c| !c.is_uppercase()).collect()\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    let mut result = String::new();\n    for c in str1.chars() {\n        if !c.is_uppercase() {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to remove uppercase substrings from a given string.\nfn remove_uppercase(str1: String) -> String {\n    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c.is_lowercase() {\n            new_str.push(c);\n        }\n    }\n    new_str\n}\n\nfn main() {\n    let candidate = remove_uppercase;\n    assert_eq!(candidate(String::from(\"cAstyoUrFavoRitETVshoWs\")), String::from(\"cstyoravoitshos\"));\n    assert_eq!(candidate(String::from(\"wAtchTheinTernEtrAdIo\")), String::from(\"wtchheinerntrdo\"));\n    assert_eq!(candidate(String::from(\"VoicESeaRchAndreComMendaTionS\")), String::from(\"oiceachndreomendaion\"));\n}\n",
      "timestamp": 1665510187,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}