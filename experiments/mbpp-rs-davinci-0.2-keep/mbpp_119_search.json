{
  "name": "mbpp_119_search",
  "language": "rs",
  "prompt": "/// Write a python function to find the element that appears only once in a sorted array.\nfn search(arr: Vec<isize>) -> isize {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_119_search.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\nfn main() {\n    let candidate = search;\n    assert_eq!(candidate(vec![1, 1, 2, 2, 3]), 3);\n    assert_eq!(candidate(vec![1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]), 8);\n    assert_eq!(candidate(vec![1, 2, 2, 3, 3, 4, 4]), 1);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    let mut i = 0;\n    let mut j = arr.len() - 1;\n    while i < j {\n        let mid = (i + j) / 2;\n        if mid % 2 == 0 {\n            if arr[mid] == arr[mid + 1] {\n                i = mid + 2;\n            } else {\n                j = mid;\n            }\n        } else {\n            if arr[mid] == arr[mid - 1] {\n                i = mid + 1;\n            } else {\n                j = mid - 1;\n            }\n        }\n    }\n    arr[i]",
    "    let mut i = 0;\n    let mut j = arr.len() - 1;\n    while i < j {\n        let mid = (i + j) / 2;\n        if mid % 2 == 0 {\n            if arr[mid] == arr[mid + 1] {\n                i = mid + 2;\n            } else {\n                j = mid;\n            }\n        } else {\n            if arr[mid] == arr[mid - 1] {\n                i = mid + 1;\n            } else {\n                j = mid - 1;\n            }\n        }\n    }\n    arr[i]",
    "    let mut i = 0;\n    while i < arr.len() {\n        if i == 0 {\n            if arr[i] != arr[i + 1] {\n                return arr[i];\n            }\n        } else if i == arr.len() - 1 {\n            if arr[i] != arr[i - 1] {\n                return arr[i];\n            }\n        } else if arr[i] != arr[i - 1] && arr[i] != arr[i + 1] {\n            return arr[i];\n        }\n        i += 1;\n    }\n    return -1;",
    "    let mut i = 0;\n    while i < arr.len() {\n        if i == 0 && arr[i] != arr[i + 1] {\n            return arr[i];\n        }\n        if i == arr.len() - 1 && arr[i] != arr[i - 1] {\n            return arr[i];\n        }\n        if arr[i] != arr[i - 1] && arr[i] != arr[i + 1] {\n            return arr[i];\n        }\n        i += 1;\n    }\n    return 0;",
    "    let mut low = 0;\n    let mut high = arr.len() - 1;\n    let mut mid = 0;\n    while low <= high {\n        mid = (low + high) / 2;\n        if mid == 0 || mid == arr.len() - 1 {\n            return arr[mid];\n        }\n        if arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1] {\n            return arr[mid];\n        }\n        if mid % 2 == 0 {\n            if arr[mid] == arr[mid + 1] {\n                low = mid + 2;\n            } else {\n                high = mid - 2;\n            }\n        } else {\n            if arr[mid] == arr[mid - 1] {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        }\n    }\n    return arr[mid];",
    "    let mut i = 0;\n    let mut j = arr.len() - 1;\n    while i < j {\n        let mid = (i + j) / 2;\n        if mid % 2 == 0 {\n            if arr[mid] == arr[mid + 1] {\n                i = mid + 2;\n            } else {\n                j = mid;\n            }\n        } else {\n            if arr[mid] == arr[mid - 1] {\n                i = mid + 1;\n            } else {\n                j = mid - 1;\n            }\n        }\n    }\n    arr[i]",
    "    let mut low = 0;\n    let mut high = arr.len() - 1;\n    while low < high {\n        let mid = low + (high - low) / 2;\n        if mid % 2 == 0 {\n            if arr[mid] == arr[mid + 1] {\n                low = mid + 2;\n            } else {\n                high = mid;\n            }\n        } else {\n            if arr[mid] == arr[mid - 1] {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        }\n    }\n    arr[low]",
    "    let mut i = 0;\n    let mut j = arr.len() - 1;\n    while i < j {\n        let mid = (i + j) / 2;\n        if mid % 2 == 0 {\n            if arr[mid] == arr[mid + 1] {\n                i = mid + 2;\n            } else {\n                j = mid;\n            }\n        } else {\n            if arr[mid] == arr[mid - 1] {\n                i = mid + 1;\n            } else {\n                j = mid - 1;\n            }\n        }\n    }\n    arr[i]",
    "    let mut i = 0;\n    let mut j = arr.len() - 1;\n    let mut mid = 0;\n    while i <= j {\n        mid = (i + j) / 2;\n        if mid == 0 || mid == arr.len() - 1 {\n            return arr[mid];\n        }\n        if arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1] {\n            return arr[mid];\n        }\n        if arr[mid] == arr[mid - 1] {\n            if mid % 2 == 0 {\n                i = mid + 1;\n            } else {\n                j = mid - 1;\n            }\n        } else if arr[mid] == arr[mid + 1] {\n            if mid % 2 == 0 {\n                j = mid - 1;\n            } else {\n                i = mid + 1;\n            }\n        }\n    }\n    return arr[mid];",
    "    let mut i = 0;\n    let mut j = arr.len() - 1;\n    while i < j {\n        let mid = (i + j) / 2;\n        if mid % 2 == 0 {\n            if arr[mid] == arr[mid + 1] {\n                i = mid + 2;\n            } else {\n                j = mid;\n            }\n        } else {\n            if arr[mid] == arr[mid - 1] {\n                i = mid + 1;\n            } else {\n                j = mid - 1;\n            }\n        }\n    }\n    arr[i]",
    "    let mut start = 0;\n    let mut end = arr.len() - 1;\n    while start <= end {\n        let mid = (start + end) / 2;\n        if mid == 0 || mid == arr.len() - 1 {\n            return arr[mid];\n        }\n        if arr[mid] != arr[mid - 1] && arr[mid] != arr[mid + 1] {\n            return arr[mid];\n        }\n        if arr[mid] == arr[mid - 1] {\n            if mid % 2 == 0 {\n                end = mid - 2;\n            } else {\n                start = mid + 1;\n            }\n        } else {\n            if mid % 2 == 0 {\n                start = mid + 2;\n            } else {\n                end = mid - 1;\n            }\n        }\n    }\n    return -1;",
    "    let mut i = 0;\n    let mut j = arr.len() - 1;\n    while i < j {\n        let mid = (i + j) / 2;\n        if mid % 2 == 0 {\n            if arr[mid] == arr[mid + 1] {\n                i = mid + 2;\n            } else {\n                j = mid;\n            }\n        } else {\n            if arr[mid] == arr[mid - 1] {\n                i = mid + 1;\n            } else {\n                j = mid - 1;\n            }\n        }\n    }\n    arr[i]",
    "    let mut i = 0;\n    let mut j = arr.len() - 1;\n    while i < j {\n        let mid = (i + j) / 2;\n        if mid % 2 == 0 {\n            if arr[mid] == arr[mid + 1] {\n                i = mid + 2;\n            } else {\n                j = mid;\n            }\n        } else {\n            if arr[mid] == arr[mid - 1] {\n                i = mid + 1;\n            } else {\n                j = mid - 1;\n            }\n        }\n    }\n    arr[i]",
    "    let mut i = 0;\n    let mut j = arr.len() - 1;\n    while i < j {\n        let mid = (i + j) / 2;\n        if arr[mid] == arr[mid - 1] {\n            if (mid - i) % 2 == 0 {\n                j = mid - 2;\n            } else {\n                i = mid + 1;\n            }\n        } else if arr[mid] == arr[mid + 1] {\n            if (j - mid) % 2 == 0 {\n                i = mid + 2;\n            } else {\n                j = mid - 1;\n            }\n        } else {\n            return arr[mid];\n        }\n    }\n    return arr[i];",
    "    let mut i = 0;\n    let mut j = arr.len() - 1;\n    while i < j {\n        let m = (i + j) / 2;\n        if m % 2 == 0 {\n            if arr[m] == arr[m + 1] {\n                i = m + 2;\n            } else {\n                j = m;\n            }\n        } else {\n            if arr[m] == arr[m - 1] {\n                i = m + 1;\n            } else {\n                j = m - 1;\n            }\n        }\n    }\n    arr[i]",
    "    let mut i = 0;\n    while i < arr.len() {\n        if i == 0 {\n            if arr[i] != arr[i + 1] {\n                return arr[i];\n            }\n        } else if i == arr.len() - 1 {\n            if arr[i] != arr[i - 1] {\n                return arr[i];\n            }\n        } else {\n            if arr[i] != arr[i - 1] && arr[i] != arr[i + 1] {\n                return arr[i];\n            }\n        }\n        i += 1;\n    }\n    0",
    "    let mut i = 0;\n    while i < arr.len() - 1 {\n        if arr[i] != arr[i + 1] {\n            return arr[i];\n        }\n        i += 2;\n    }\n    arr[arr.len() - 1]",
    "    let mut i = 0;\n    while i < arr.len() - 1 {\n        if arr[i] != arr[i + 1] {\n            return arr[i];\n        }\n        i += 2;\n    }\n    arr[arr.len() - 1]",
    "    let mut i = 0;\n    while i < arr.len() - 1 {\n        if arr[i] != arr[i + 1] {\n            return arr[i];\n        }\n        i += 2;\n    }\n    arr[i]",
    "    let mut i = 0;\n    let mut j = arr.len() - 1;\n    while i < j {\n        let mid = (i + j) / 2;\n        if mid % 2 == 0 {\n            if arr[mid] == arr[mid + 1] {\n                i = mid + 2;\n            } else {\n                j = mid;\n            }\n        } else {\n            if arr[mid] == arr[mid - 1] {\n                i = mid + 1;\n            } else {\n                j = mid - 1;\n            }\n        }\n    }\n    arr[i]"
  ]
}