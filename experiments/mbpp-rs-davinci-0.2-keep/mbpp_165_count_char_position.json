{
  "name": "mbpp_165_count_char_position",
  "language": "rs",
  "prompt": "/// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfn count_char_position(str1: String) -> isize {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_165_count_char_position.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\nfn main() {\n    let candidate = count_char_position;\n    assert_eq!(candidate(String::from(\"xbcefg\")), 2);\n    assert_eq!(candidate(String::from(\"ABcED\")), 3);\n    assert_eq!(candidate(String::from(\"AbgdeF\")), 5);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    let mut count = 0;\n    let mut str_vec: Vec<char> = str1.chars().collect();\n    str_vec.sort();\n    let mut alphabet = \"abcdefghijklmnopqrstuvwxyz\".to_string();\n    alphabet.push_str(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\");\n    let mut alphabet_vec: Vec<char> = alphabet.chars().collect();\n    alphabet_vec.sort();\n    for i in 0..str_vec.len() {\n        if str_vec[i] == alphabet_vec[i] {\n            count += 1;\n        }\n    }\n    count",
    "    let mut count = 0;\n    let mut str1 = str1.to_lowercase();\n    let mut str1 = str1.chars().collect::<Vec<char>>();\n    str1.sort();\n    for i in 0..str1.len() {\n        if str1[i] as u8 == (i as u8 + 97) {\n            count += 1;\n        }\n    }\n    count",
    "    let mut count: isize = 0;\n    let mut i: isize = 0;\n    for c in str1.chars() {\n        if c.to_ascii_lowercase() as isize - 'a' as isize == i {\n            count += 1;\n        }\n        i += 1;\n    }\n    count",
    "    let mut count = 0;\n    for (i, c) in str1.chars().enumerate() {\n        if c.to_lowercase().next().unwrap() == (i as u8 + 'a' as u8) as char {\n            count += 1;\n        }\n    }\n    count",
    "    let mut count = 0;\n    let mut str2 = str1.to_lowercase();\n    let mut str3 = str2.clone();\n    str3.retain(|c| c.is_alphabetic());\n    for (i, c) in str3.chars().enumerate() {\n        if c == (i as u8 + 97) as char {\n            count += 1;\n        }\n    }\n    count",
    "    let mut count = 0;\n    let mut str1 = str1.to_lowercase();\n    let mut str1 = str1.chars().collect::<Vec<char>>();\n    str1.sort();\n    let mut str1 = str1.into_iter().collect::<String>();\n    let mut alphabet = \"abcdefghijklmnopqrstuvwxyz\".to_string();\n    let mut alphabet = alphabet.chars().collect::<Vec<char>>();\n    alphabet.sort();\n    let mut alphabet = alphabet.into_iter().collect::<String>();\n    for (i, c) in str1.chars().enumerate() {\n        if c == alphabet.chars().nth(i).unwrap() {\n            count += 1;\n        }\n    }\n    count",
    "    let mut count = 0;\n    let mut str2 = str1.to_lowercase();\n    for c in str2.chars() {\n        if c as u8 >= 97 && c as u8 <= 122 {\n            count += 1;\n        }\n    }\n    return count;",
    "    let mut count: isize = 0;\n    let mut str2 = str1.to_lowercase();\n    str2.retain(|c| c.is_alphabetic());\n    for (i, c) in str2.chars().enumerate() {\n        if c as u8 == 97 + i as u8 {\n            count += 1;\n        }\n    }\n    count",
    "    let mut count = 0;\n    let mut str1 = str1.to_lowercase();\n    let mut str1 = str1.chars().collect::<Vec<_>>();\n    str1.sort();\n    for (i, c) in str1.iter().enumerate() {\n        if c.to_string() == ((i as u8 + 97) as char).to_string() {\n            count += 1;\n        }\n    }\n    count",
    "    let mut count = 0;\n    let mut str1 = str1.to_lowercase();\n    let mut str1 = str1.chars().collect::<Vec<char>>();\n    str1.sort();\n    let mut str2 = \"abcdefghijklmnopqrstuvwxyz\".to_string();\n    let mut str2 = str2.chars().collect::<Vec<char>>();\n    str2.sort();\n    for i in 0..str1.len() {\n        if str1[i] == str2[i] {\n            count += 1;\n        }\n    }\n    count",
    "    let mut count = 0;\n    let mut str_vec: Vec<char> = str1.chars().collect();\n    str_vec.sort();\n    for i in 0..str_vec.len() {\n        if str_vec[i] == (i as u8 + 97) as char {\n            count += 1;\n        }\n    }\n    count",
    "    let mut count: isize = 0;\n    let mut i: isize = 0;\n    for c in str1.chars() {\n        if c.to_lowercase().next().unwrap() == (i + 97) as u8 as char {\n            count += 1;\n        }\n        i += 1;\n    }\n    count",
    "    let mut count = 0;\n    let mut str_vec: Vec<char> = str1.chars().collect();\n    str_vec.sort();\n    for i in 0..str_vec.len() {\n        if str_vec[i] == (i as u8 + 97) as char {\n            count += 1;\n        }\n    }\n    count",
    "    let mut count = 0;\n    let mut str1 = str1.to_lowercase();\n    let mut str1 = str1.chars().collect::<Vec<char>>();\n    str1.sort();\n    let mut str2 = \"abcdefghijklmnopqrstuvwxyz\".to_string();\n    let mut str2 = str2.chars().collect::<Vec<char>>();\n    str2.sort();\n    for i in 0..str1.len() {\n        if str1[i] == str2[i] {\n            count += 1;\n        }\n    }\n    count",
    "    let mut count = 0;\n    let mut str1 = str1.to_lowercase();\n    let mut str1 = str1.chars().collect::<Vec<char>>();\n    str1.sort();\n    let mut str2 = \"abcdefghijklmnopqrstuvwxyz\".chars().collect::<Vec<char>>();\n    str2.sort();\n    for i in 0..str1.len() {\n        if str1[i] == str2[i] {\n            count += 1;\n        }\n    }\n    count",
    "    let mut count = 0;\n    let mut str1 = str1.to_lowercase();\n    let mut str1 = str1.chars().collect::<Vec<char>>();\n    str1.sort();\n    str1.dedup();\n    for i in str1 {\n        if i as u8 >= 97 && i as u8 <= 122 {\n            count += 1;\n        }\n    }\n    count",
    "    let mut count = 0;\n    let mut str1 = str1.to_lowercase();\n    let mut str2 = String::from(\"abcdefghijklmnopqrstuvwxyz\");\n    for i in 0..str1.len() {\n        if str1.chars().nth(i).unwrap() == str2.chars().nth(i).unwrap() {\n            count += 1;\n        }\n    }\n    count",
    "    let mut count = 0;\n    let mut str1 = str1.to_lowercase();\n    let mut str1 = str1.chars().collect::<Vec<char>>();\n    str1.sort();\n    let mut str1 = str1.into_iter().collect::<String>();\n    let mut str2 = \"abcdefghijklmnopqrstuvwxyz\".to_string();\n    for i in 0..str1.len() {\n        if str1.chars().nth(i).unwrap() == str2.chars().nth(i).unwrap() {\n            count += 1;\n        }\n    }\n    count",
    "    let mut count = 0;\n    let mut str2 = str1.to_lowercase();\n    str2.retain(|c| c.is_alphabetic());\n    for (i, c) in str2.chars().enumerate() {\n        if c as u8 == 97 + i as u8 {\n            count += 1;\n        }\n    }\n    count",
    "    let mut count = 0;\n    let mut str_vec: Vec<char> = str1.chars().collect();\n    str_vec.sort();\n    for (index, item) in str_vec.iter().enumerate() {\n        if item.to_lowercase().to_string() == (index as u8 + 97).to_string() {\n            count += 1;\n        }\n    }\n    count"
  ]
}