{
  "name": "mbpp_747_lcs_of_three",
  "language": "rs",
  "prompt": "/// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfn lcs_of_three(X: String, Y: String, Z: String) -> isize {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_747_lcs_of_three.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\nfn main() {\n    let candidate = lcs_of_three;\n    assert_eq!(candidate(String::from(\"AGGT12\"), String::from(\"12TXAYB\"), String::from(\"12XBA\")), 2);\n    assert_eq!(candidate(String::from(\"Reels\"), String::from(\"Reelsfor\"), String::from(\"ReelsforReels\")), 5);\n    assert_eq!(candidate(String::from(\"abcd1e2\"), String::from(\"bc12ea\"), String::from(\"bd1ea\")), 3);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 0..m + 1 {\n        for j in 0..n + 1 {\n            for k in 0..o + 1 {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1)\n                    && X.chars().nth(i - 1) == Z.chars().nth(k - 1)\n                {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = std::cmp::max(\n                        std::cmp::max(dp[i - 1][j][k], dp[i][j - 1][k]),\n                        dp[i][j][k - 1],\n                    );\n                }\n            }\n        }\n    }\n    dp[m][n][o]",
    "    let x = X.as_bytes();\n    let y = Y.as_bytes();\n    let z = Z.as_bytes();\n    let m = x.len();\n    let n = y.len();\n    let o = z.len();\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 0..m + 1 {\n        for j in 0..n + 1 {\n            for k in 0..o + 1 {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if x[i - 1] == y[j - 1] && x[i - 1] == z[k - 1] {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n    dp[m][n][o]",
    "    let x = X.as_bytes();\n    let y = Y.as_bytes();\n    let z = Z.as_bytes();\n    let m = x.len();\n    let n = y.len();\n    let o = z.len();\n\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..m + 1 {\n        for j in 0..n + 1 {\n            for k in 0..o + 1 {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if x[i - 1] == y[j - 1] && x[i - 1] == z[k - 1] {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n\n    dp[m][n][o]",
    "    let x = X.as_bytes();\n    let y = Y.as_bytes();\n    let z = Z.as_bytes();\n    let m = x.len();\n    let n = y.len();\n    let o = z.len();\n    let mut lcs = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    lcs[i][j][k] = 0;\n                } else if x[i - 1] == y[j - 1] && x[i - 1] == z[k - 1] {\n                    lcs[i][j][k] = lcs[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    lcs[i][j][k] = max(lcs[i - 1][j][k], max(lcs[i][j - 1][k], lcs[i][j][k - 1]));\n                }\n            }\n        }\n    }\n    lcs[m][n][o]",
    "    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n    let mut L = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = max(max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    L[m][n][o]",
    "    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n    let mut L = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = max(L[i - 1][j][k], max(L[i][j - 1][k], L[i][j][k - 1]));\n                }\n            }\n        }\n    }\n    L[m][n][o]",
    "    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n\n    dp[m][n][o]",
    "    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n    let mut L = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..m + 1 {\n        for j in 0..n + 1 {\n            for k in 0..o + 1 {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = max(\n                        max(L[i - 1][j][k], L[i][j - 1][k]),\n                        L[i][j][k - 1],\n                    );\n                }\n            }\n        }\n    }\n    L[m][n][o]",
    "    let x = X.as_bytes();\n    let y = Y.as_bytes();\n    let z = Z.as_bytes();\n    let m = x.len();\n    let n = y.len();\n    let o = z.len();\n    let mut L = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..m + 1 {\n        for j in 0..n + 1 {\n            for k in 0..o + 1 {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0;\n                } else if x[i - 1] == y[j - 1] && x[i - 1] == z[k - 1] {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    L[m][n][o]",
    "    let (m, n, o) = (X.len(), Y.len(), Z.len());\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n    dp[m][n][o]",
    "    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1)\n                    && X.chars().nth(i - 1) == Z.chars().nth(k - 1)\n                {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(\n                        max(dp[i - 1][j][k], dp[i][j - 1][k]),\n                        dp[i][j][k - 1],\n                    );\n                }\n            }\n        }\n    }\n\n    dp[m][n][o]",
    "    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n\n    let mut L = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = max(L[i - 1][j][k], max(L[i][j - 1][k], L[i][j][k - 1]));\n                }\n            }\n        }\n    }\n\n    L[m][n][o]",
    "    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n    let mut L = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1)\n                    && X.chars().nth(i - 1) == Z.chars().nth(k - 1)\n                {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = max(\n                        max(L[i - 1][j][k], L[i][j - 1][k]),\n                        L[i][j][k - 1],\n                    );\n                }\n            }\n        }\n    }\n    L[m][n][o]",
    "    let x = X.as_bytes();\n    let y = Y.as_bytes();\n    let z = Z.as_bytes();\n    let m = x.len();\n    let n = y.len();\n    let o = z.len();\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if x[i - 1] == y[j - 1] && x[i - 1] == z[k - 1] {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n    dp[m][n][o]",
    "    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = std::cmp::max(dp[i - 1][j][k], std::cmp::max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n\n    dp[m][n][o]",
    "    let x = X.as_bytes();\n    let y = Y.as_bytes();\n    let z = Z.as_bytes();\n\n    let m = x.len();\n    let n = y.len();\n    let o = z.len();\n\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if x[i - 1] == y[j - 1] && x[i - 1] == z[k - 1] {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n\n    dp[m][n][o]",
    "    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n\n    let mut L = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1)\n                    && X.chars().nth(i - 1) == Z.chars().nth(k - 1)\n                {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = max(\n                        max(L[i - 1][j][k], L[i][j - 1][k]),\n                        L[i][j][k - 1],\n                    );\n                }\n            }\n        }\n    }\n\n    L[m][n][o]",
    "    let x_len = X.len();\n    let y_len = Y.len();\n    let z_len = Z.len();\n    let mut dp = vec![vec![vec![0; z_len + 1]; y_len + 1]; x_len + 1];\n\n    for i in 0..=x_len {\n        for j in 0..=y_len {\n            for k in 0..=z_len {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1)\n                    && X.chars().nth(i - 1) == Z.chars().nth(k - 1)\n                {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = dp[i - 1][j][k].max(dp[i][j - 1][k].max(dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n    dp[x_len][y_len][z_len]",
    "    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n\n    let mut L = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = std::cmp::max(std::cmp::max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n\n    L[m][n][o]",
    "    let x_len = X.len();\n    let y_len = Y.len();\n    let z_len = Z.len();\n    let mut lcs_matrix = vec![vec![vec![0; z_len + 1]; y_len + 1]; x_len + 1];\n    for i in 0..x_len + 1 {\n        for j in 0..y_len + 1 {\n            for k in 0..z_len + 1 {\n                if i == 0 || j == 0 || k == 0 {\n                    lcs_matrix[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    lcs_matrix[i][j][k] = lcs_matrix[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    lcs_matrix[i][j][k] = max(max(lcs_matrix[i - 1][j][k], lcs_matrix[i][j - 1][k]), lcs_matrix[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    lcs_matrix[x_len][y_len][z_len]",
    "    let x = X.as_bytes();\n    let y = Y.as_bytes();\n    let z = Z.as_bytes();\n    let m = x.len();\n    let n = y.len();\n    let o = z.len();\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if x[i - 1] == y[j - 1] && x[i - 1] == z[k - 1] {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = std::cmp::max(dp[i - 1][j][k], std::cmp::max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n    dp[m][n][o]",
    "    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n\n    dp[m][n][o]",
    "    let x = X.as_bytes();\n    let y = Y.as_bytes();\n    let z = Z.as_bytes();\n    let m = x.len();\n    let n = y.len();\n    let o = z.len();\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if x[i - 1] == y[j - 1] && x[i - 1] == z[k - 1] {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n    dp[m][n][o]",
    "    let x = X.as_bytes();\n    let y = Y.as_bytes();\n    let z = Z.as_bytes();\n    let m = x.len();\n    let n = y.len();\n    let o = z.len();\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if x[i - 1] == y[j - 1] && x[i - 1] == z[k - 1] {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n    dp[m][n][o]",
    "    let x = X.as_bytes();\n    let y = Y.as_bytes();\n    let z = Z.as_bytes();\n    let m = x.len();\n    let n = y.len();\n    let o = z.len();\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if x[i - 1] == y[j - 1] && x[i - 1] == z[k - 1] {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = std::cmp::max(dp[i - 1][j][k], std::cmp::max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n    dp[m][n][o]",
    "    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n    let mut L = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = std::cmp::max(L[i - 1][j][k], std::cmp::max(L[i][j - 1][k], L[i][j][k - 1]));\n                }\n            }\n        }\n    }\n    L[m][n][o]",
    "    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n    let mut L = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = max(max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    L[m][n][o]",
    "    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n    dp[m][n][o]",
    "    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1)\n                    && X.chars().nth(i - 1) == Z.chars().nth(k - 1)\n                {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n    dp[m][n][o]",
    "    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n    dp[m][n][o]",
    "    let x = X.as_bytes();\n    let y = Y.as_bytes();\n    let z = Z.as_bytes();\n\n    let m = x.len();\n    let n = y.len();\n    let o = z.len();\n\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if x[i - 1] == y[j - 1] && x[i - 1] == z[k - 1] {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(dp[i - 1][j][k], dp[i][j - 1][k], dp[i][j][k - 1]);\n                }\n            }\n        }\n    }\n\n    dp[m][n][o]",
    "    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n    let mut L = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = max(L[i - 1][j][k], max(L[i][j - 1][k], L[i][j][k - 1]));\n                }\n            }\n        }\n    }\n    L[m][n][o]",
    "    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n\n    let mut dp: Vec<Vec<Vec<isize>>> = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1)\n                    && X.chars().nth(i - 1) == Z.chars().nth(k - 1)\n                {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(\n                        max(dp[i - 1][j][k], dp[i][j - 1][k]),\n                        dp[i][j][k - 1],\n                    );\n                }\n            }\n        }\n    }\n\n    dp[m][n][o]",
    "    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 0..m + 1 {\n        for j in 0..n + 1 {\n            for k in 0..o + 1 {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n    dp[m][n][o]",
    "    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(max(dp[i - 1][j][k], dp[i][j - 1][k]), dp[i][j][k - 1]);\n                }\n            }\n        }\n    }\n\n    dp[m][n][o]",
    "    let x = X.as_bytes();\n    let y = Y.as_bytes();\n    let z = Z.as_bytes();\n    let m = x.len();\n    let n = y.len();\n    let o = z.len();\n    let mut lcs = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    lcs[i][j][k] = 0;\n                } else if x[i - 1] == y[j - 1] && x[i - 1] == z[k - 1] {\n                    lcs[i][j][k] = lcs[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    lcs[i][j][k] = max(lcs[i - 1][j][k], max(lcs[i][j - 1][k], lcs[i][j][k - 1]));\n                }\n            }\n        }\n    }\n    lcs[m][n][o]",
    "    let x = X.as_bytes();\n    let y = Y.as_bytes();\n    let z = Z.as_bytes();\n    let m = x.len();\n    let n = y.len();\n    let o = z.len();\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if x[i - 1] == y[j - 1] && x[i - 1] == z[k - 1] {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n    dp[m][n][o]",
    "    let (m, n, o) = (X.len(), Y.len(), Z.len());\n    let mut L = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = max(max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    L[m][n][o]",
    "    let x = X.as_bytes();\n    let y = Y.as_bytes();\n    let z = Z.as_bytes();\n    let m = x.len();\n    let n = y.len();\n    let o = z.len();\n    let mut l = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    l[i][j][k] = 0;\n                } else if x[i - 1] == y[j - 1] && x[i - 1] == z[k - 1] {\n                    l[i][j][k] = l[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    l[i][j][k] = max(\n                        max(l[i - 1][j][k], l[i][j - 1][k]),\n                        l[i][j][k - 1],\n                    );\n                }\n            }\n        }\n    }\n    return l[m][n][o];",
    "    let x = X.as_bytes();\n    let y = Y.as_bytes();\n    let z = Z.as_bytes();\n    let m = x.len();\n    let n = y.len();\n    let o = z.len();\n    let mut lcs = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    lcs[i][j][k] = 0;\n                } else if x[i - 1] == y[j - 1] && x[i - 1] == z[k - 1] {\n                    lcs[i][j][k] = lcs[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    lcs[i][j][k] = std::cmp::max(\n                        std::cmp::max(lcs[i - 1][j][k], lcs[i][j - 1][k]),\n                        lcs[i][j][k - 1],\n                    );\n                }\n            }\n        }\n    }\n    lcs[m][n][o]",
    "    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..m + 1 {\n        for j in 0..n + 1 {\n            for k in 0..o + 1 {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n    return dp[m][n][o];",
    "    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n\n    let mut L = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = std::cmp::max(L[i - 1][j][k], std::cmp::max(L[i][j - 1][k], L[i][j][k - 1]));\n                }\n            }\n        }\n    }\n\n    L[m][n][o]",
    "    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1)\n                    && X.chars().nth(i - 1) == Z.chars().nth(k - 1)\n                {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = std::cmp::max(\n                        std::cmp::max(dp[i - 1][j][k], dp[i][j - 1][k]),\n                        dp[i][j][k - 1],\n                    );\n                }\n            }\n        }\n    }\n\n    dp[m][n][o]",
    "    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n\n    dp[m][n][o]",
    "    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1)\n                    && X.chars().nth(i - 1) == Z.chars().nth(k - 1)\n                {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(\n                        max(dp[i - 1][j][k], dp[i][j - 1][k]),\n                        dp[i][j][k - 1],\n                    );\n                }\n            }\n        }\n    }\n    dp[m][n][o]",
    "    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n    let mut L = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 0..m + 1 {\n        for j in 0..n + 1 {\n            for k in 0..o + 1 {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = max(max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    L[m][n][o]",
    "    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n\n    let mut lcs = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    lcs[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    lcs[i][j][k] = lcs[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    lcs[i][j][k] = max(lcs[i - 1][j][k], max(lcs[i][j - 1][k], lcs[i][j][k - 1]));\n                }\n            }\n        }\n    }\n\n    lcs[m][n][o]",
    "    let x = X.as_bytes();\n    let y = Y.as_bytes();\n    let z = Z.as_bytes();\n    let m = x.len();\n    let n = y.len();\n    let o = z.len();\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 1..m + 1 {\n        for j in 1..n + 1 {\n            for k in 1..o + 1 {\n                if x[i - 1] == y[j - 1] && x[i - 1] == z[k - 1] {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = dp[i - 1][j][k].max(dp[i][j - 1][k].max(dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n    dp[m][n][o]",
    "    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 1..m + 1 {\n        for j in 1..n + 1 {\n            for k in 1..o + 1 {\n                if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n    dp[m][n][o]",
    "    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1)\n                    && X.chars().nth(i - 1) == Z.chars().nth(k - 1)\n                {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n\n    dp[m][n][o]",
    "    let x_len = X.len();\n    let y_len = Y.len();\n    let z_len = Z.len();\n    let mut dp = vec![vec![vec![0; z_len + 1]; y_len + 1]; x_len + 1];\n    for i in 0..x_len {\n        for j in 0..y_len {\n            for k in 0..z_len {\n                if X.chars().nth(i) == Y.chars().nth(j) && X.chars().nth(i) == Z.chars().nth(k) {\n                    dp[i + 1][j + 1][k + 1] = dp[i][j][k] + 1;\n                } else {\n                    dp[i + 1][j + 1][k + 1] = max(dp[i][j + 1][k + 1], max(dp[i + 1][j][k + 1], dp[i + 1][j + 1][k]));\n                }\n            }\n        }\n    }\n    dp[x_len][y_len][z_len]",
    "    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n\n    let mut lcs = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..m + 1 {\n        for j in 0..n + 1 {\n            for k in 0..o + 1 {\n                if i == 0 || j == 0 || k == 0 {\n                    lcs[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    lcs[i][j][k] = lcs[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    lcs[i][j][k] = max(lcs[i - 1][j][k], max(lcs[i][j - 1][k], lcs[i][j][k - 1]));\n                }\n            }\n        }\n    }\n\n    lcs[m][n][o]",
    "    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    dp[i][j][k] = 1 + dp[i - 1][j - 1][k - 1];\n                } else {\n                    dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n    dp[m][n][o]",
    "    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n    let mut L = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = max(L[i - 1][j][k], max(L[i][j - 1][k], L[i][j][k - 1]));\n                }\n            }\n        }\n    }\n    L[m][n][o]",
    "    let x = X.as_bytes();\n    let y = Y.as_bytes();\n    let z = Z.as_bytes();\n    let m = x.len();\n    let n = y.len();\n    let o = z.len();\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 0..m + 1 {\n        for j in 0..n + 1 {\n            for k in 0..o + 1 {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if x[i - 1] == y[j - 1] && x[i - 1] == z[k - 1] {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n    dp[m][n][o]",
    "    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n\n    let mut lcs = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..m + 1 {\n        for j in 0..n + 1 {\n            for k in 0..o + 1 {\n                if i == 0 || j == 0 || k == 0 {\n                    lcs[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    lcs[i][j][k] = lcs[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    lcs[i][j][k] = std::cmp::max(std::cmp::max(lcs[i - 1][j][k], lcs[i][j - 1][k]), lcs[i][j][k - 1]);\n                }\n            }\n        }\n    }\n\n    lcs[m][n][o]",
    "    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1)\n                    && X.chars().nth(i - 1) == Z.chars().nth(k - 1)\n                {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(\n                        max(dp[i - 1][j][k], dp[i][j - 1][k]),\n                        dp[i][j][k - 1],\n                    );\n                }\n            }\n        }\n    }\n    dp[m][n][o]",
    "    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n\n    let mut L = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = max(max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n\n    L[m][n][o]",
    "    let x = X.as_bytes();\n    let y = Y.as_bytes();\n    let z = Z.as_bytes();\n    let m = x.len();\n    let n = y.len();\n    let o = z.len();\n    let mut lcs = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 0..m + 1 {\n        for j in 0..n + 1 {\n            for k in 0..o + 1 {\n                if i == 0 || j == 0 || k == 0 {\n                    lcs[i][j][k] = 0;\n                } else if x[i - 1] == y[j - 1] && x[i - 1] == z[k - 1] {\n                    lcs[i][j][k] = lcs[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    lcs[i][j][k] = max(\n                        max(lcs[i - 1][j][k], lcs[i][j - 1][k]),\n                        lcs[i][j][k - 1],\n                    );\n                }\n            }\n        }\n    }\n    lcs[m][n][o]",
    "    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = std::cmp::max(dp[i - 1][j][k], std::cmp::max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n    dp[m][n][o]",
    "    let x = X.as_bytes();\n    let y = Y.as_bytes();\n    let z = Z.as_bytes();\n    let m = x.len();\n    let n = y.len();\n    let o = z.len();\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 0..m + 1 {\n        for j in 0..n + 1 {\n            for k in 0..o + 1 {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if x[i - 1] == y[j - 1] && x[i - 1] == z[k - 1] {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n    dp[m][n][o]",
    "    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n\n    dp[m][n][o]",
    "    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n\n    dp[m][n][o]",
    "    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n\n    let mut L = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = max(max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n\n    L[m][n][o]",
    "    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n\n    let mut L = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = max(max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n\n    L[m][n][o]",
    "    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n\n    let mut L = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1)\n                    && X.chars().nth(i - 1) == Z.chars().nth(k - 1)\n                {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = std::cmp::max(\n                        std::cmp::max(L[i - 1][j][k], L[i][j - 1][k]),\n                        L[i][j][k - 1],\n                    );\n                }\n            }\n        }\n    }\n\n    L[m][n][o]",
    "    let x = X.as_bytes();\n    let y = Y.as_bytes();\n    let z = Z.as_bytes();\n    let m = x.len();\n    let n = y.len();\n    let o = z.len();\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 0..m + 1 {\n        for j in 0..n + 1 {\n            for k in 0..o + 1 {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if x[i - 1] == y[j - 1] && x[i - 1] == z[k - 1] {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n    dp[m][n][o]",
    "    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..m + 1 {\n        for j in 0..n + 1 {\n            for k in 0..o + 1 {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = std::cmp::max(dp[i - 1][j][k], std::cmp::max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n\n    dp[m][n][o]",
    "    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n\n    let mut L = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = max(L[i - 1][j][k], max(L[i][j - 1][k], L[i][j][k - 1]));\n                }\n            }\n        }\n    }\n\n    L[m][n][o]",
    "    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1)\n                    && X.chars().nth(i - 1) == Z.chars().nth(k - 1)\n                {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(\n                        dp[i - 1][j][k],\n                        max(dp[i][j - 1][k], dp[i][j][k - 1]),\n                    );\n                }\n            }\n        }\n    }\n    dp[m][n][o]",
    "    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1)\n                    && X.chars().nth(i - 1) == Z.chars().nth(k - 1)\n                {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(\n                        dp[i - 1][j][k],\n                        max(dp[i][j - 1][k], dp[i][j][k - 1]),\n                    );\n                }\n            }\n        }\n    }\n    dp[m][n][o]",
    "    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 0..m + 1 {\n        for j in 0..n + 1 {\n            for k in 0..o + 1 {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n    dp[m][n][o]",
    "    let x = X.as_bytes();\n    let y = Y.as_bytes();\n    let z = Z.as_bytes();\n    let m = x.len();\n    let n = y.len();\n    let o = z.len();\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if x[i - 1] == y[j - 1] && x[i - 1] == z[k - 1] {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = std::cmp::max(dp[i - 1][j][k], std::cmp::max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n    dp[m][n][o]",
    "    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n    let mut lcs = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 0..m + 1 {\n        for j in 0..n + 1 {\n            for k in 0..o + 1 {\n                if i == 0 || j == 0 || k == 0 {\n                    lcs[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    lcs[i][j][k] = lcs[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    lcs[i][j][k] = std::cmp::max(std::cmp::max(lcs[i - 1][j][k], lcs[i][j - 1][k]), lcs[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    lcs[m][n][o]",
    "    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n    let mut L = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1)\n                    && X.chars().nth(i - 1) == Z.chars().nth(k - 1)\n                {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = max(\n                        max(L[i - 1][j][k], L[i][j - 1][k]),\n                        L[i][j][k - 1],\n                    );\n                }\n            }\n        }\n    }\n    L[m][n][o]",
    "    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n    let mut L = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = max(max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n\n    L[m][n][o]",
    "    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 0..m + 1 {\n        for j in 0..n + 1 {\n            for k in 0..o + 1 {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n    dp[m][n][o]",
    "    let x = X.as_bytes();\n    let y = Y.as_bytes();\n    let z = Z.as_bytes();\n    let m = x.len();\n    let n = y.len();\n    let o = z.len();\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if x[i - 1] == y[j - 1] && x[i - 1] == z[k - 1] {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(dp[i - 1][j][k], dp[i][j - 1][k], dp[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    dp[m][n][o]",
    "    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n\n    let mut L = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1)\n                    && X.chars().nth(i - 1) == Z.chars().nth(k - 1)\n                {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = std::cmp::max(\n                        std::cmp::max(L[i - 1][j][k], L[i][j - 1][k]),\n                        L::[i][j][k - 1],\n                    );\n                }\n            }\n        }\n    }\n\n    L[m][n][o]",
    "    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n\n    dp[m][n][o]",
    "    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n\n    let mut L = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1)\n                    && X.chars().nth(i - 1) == Z.chars().nth(k - 1)\n                {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = max(\n                        max(L[i - 1][j][k], L[i][j - 1][k]),\n                        L[i][j][k - 1],\n                    );\n                }\n            }\n        }\n    }\n\n    L[m][n][o]",
    "    let x = X.as_bytes();\n    let y = Y.as_bytes();\n    let z = Z.as_bytes();\n    let m = x.len();\n    let n = y.len();\n    let o = z.len();\n    let mut lcs = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 0..m + 1 {\n        for j in 0..n + 1 {\n            for k in 0..o + 1 {\n                if i == 0 || j == 0 || k == 0 {\n                    lcs[i][j][k] = 0;\n                } else if x[i - 1] == y[j - 1] && x[i - 1] == z[k - 1] {\n                    lcs[i][j][k] = lcs[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    lcs[i][j][k] = std::cmp::max(\n                        std::cmp::max(lcs[i - 1][j][k], lcs[i][j - 1][k]),\n                        lcs[i][j][k - 1],\n                    );\n                }\n            }\n        }\n    }\n    lcs[m][n][o]",
    "    let (m, n, o) = (X.len(), Y.len(), Z.len());\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    dp[i][j][k] = 1 + dp[i - 1][j - 1][k - 1];\n                } else {\n                    dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n    dp[m][n][o]",
    "    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n\n    dp[m][n][o]",
    "    let x = X.as_bytes();\n    let y = Y.as_bytes();\n    let z = Z.as_bytes();\n    let m = x.len();\n    let n = y.len();\n    let o = z.len();\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if x[i - 1] == y[j - 1] && x[i - 1] == z[k - 1] {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n    dp[m][n][o]",
    "    let x = X.as_bytes();\n    let y = Y.as_bytes();\n    let z = Z.as_bytes();\n    let m = x.len();\n    let n = y.len();\n    let o = z.len();\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if x[i - 1] == y[j - 1] && x[i - 1] == z[k - 1] {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = std::cmp::max(dp[i - 1][j][k], std::cmp::max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n    dp[m][n][o]",
    "    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n    dp[m][n][o]",
    "    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n    let mut L = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = std::cmp::max(std::cmp::max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];",
    "    let x = X.as_bytes();\n    let y = Y.as_bytes();\n    let z = Z.as_bytes();\n    let m = x.len();\n    let n = y.len();\n    let o = z.len();\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if x[i - 1] == y[j - 1] && x[i - 1] == z[k - 1] {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n    dp[m][n][o]",
    "    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n    dp[m][n][o]",
    "    let x = X.as_bytes();\n    let y = Y.as_bytes();\n    let z = Z.as_bytes();\n    let m = x.len();\n    let n = y.len();\n    let o = z.len();\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..m + 1 {\n        for j in 0..n + 1 {\n            for k in 0..o + 1 {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if x[i - 1] == y[j - 1] && x[i - 1] == z[k - 1] {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n    dp[m][n][o] as isize",
    "    let x = X.as_bytes();\n    let y = Y.as_bytes();\n    let z = Z.as_bytes();\n    let m = x.len();\n    let n = y.len();\n    let o = z.len();\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if x[i - 1] == y[j - 1] && x[i - 1] == z[k - 1] {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n    dp[m][n][o]",
    "    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n    let mut L = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = std::cmp::max(std::cmp::max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    return L[m][n][o];",
    "    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 0..m + 1 {\n        for j in 0..n + 1 {\n            for k in 0..o + 1 {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1)\n                    && X.chars().nth(i - 1) == Z.chars().nth(k - 1)\n                {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n    dp[m][n][o]",
    "    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n\n    let mut L = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1)\n                    && X.chars().nth(i - 1) == Z.chars().nth(k - 1)\n                {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = max(\n                        max(L[i - 1][j][k], L[i][j - 1][k]),\n                        L[i][j][k - 1],\n                    );\n                }\n            }\n        }\n    }\n\n    L[m][n][o]",
    "    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 1..=m {\n        for j in 1..=n {\n            for k in 1..=o {\n                if X.chars().nth(i - 1).unwrap() == Y.chars().nth(j - 1).unwrap() &&\n                   X.chars().nth(i - 1).unwrap() == Z.chars().nth(k - 1).unwrap() {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n\n    dp[m][n][o]",
    "    let x = X.as_bytes();\n    let y = Y.as_bytes();\n    let z = Z.as_bytes();\n    let m = x.len();\n    let n = y.len();\n    let o = z.len();\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if x[i - 1] == y[j - 1] && x[i - 1] == z[k - 1] {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n    dp[m][n][o]",
    "    let x = X.as_bytes();\n    let y = Y.as_bytes();\n    let z = Z.as_bytes();\n\n    let m = x.len();\n    let n = y.len();\n    let o = z.len();\n\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if x[i - 1] == y[j - 1] && x[i - 1] == z[k - 1] {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n\n    dp[m][n][o]",
    "    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n\n    let mut L = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = std::cmp::max(std::cmp::max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    L[m][n][o]",
    "    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 0..m + 1 {\n        for j in 0..n + 1 {\n            for k in 0..o + 1 {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n    dp[m][n][o]",
    "    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 0..m + 1 {\n        for j in 0..n + 1 {\n            for k in 0..o + 1 {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1)\n                    && X.chars().nth(i - 1) == Z.chars().nth(k - 1)\n                {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(\n                        max(dp[i - 1][j][k], dp[i][j - 1][k]),\n                        dp[i][j][k - 1],\n                    );\n                }\n            }\n        }\n    }\n    dp[m][n][o]",
    "    let x = X.as_bytes();\n    let y = Y.as_bytes();\n    let z = Z.as_bytes();\n    let m = x.len();\n    let n = y.len();\n    let o = z.len();\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 1..m + 1 {\n        for j in 1..n + 1 {\n            for k in 1..o + 1 {\n                if x[i - 1] == y[j - 1] && y[j - 1] == z[k - 1] {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = std::cmp::max(dp[i - 1][j][k], std::cmp::max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n    dp[m][n][o]",
    "    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n    let mut L = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = max(L[i - 1][j][k], max(L[i][j - 1][k], L[i][j][k - 1]));\n                }\n            }\n        }\n    }\n\n    L[m][n][o]",
    "    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n\n    let mut L = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = max(max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n\n    L[m][n][o]",
    "    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n\n    let mut L = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = max(max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n\n    L[m][n][o]",
    "    let x_len = X.len();\n    let y_len = Y.len();\n    let z_len = Z.len();\n\n    let mut lcs_matrix: Vec<Vec<Vec<isize>>> = vec![vec![vec![0; z_len + 1]; y_len + 1]; x_len + 1];\n\n    for i in 1..x_len + 1 {\n        for j in 1..y_len + 1 {\n            for k in 1..z_len + 1 {\n                if X.chars().nth(i - 1).unwrap() == Y.chars().nth(j - 1).unwrap() && X.chars().nth(i - 1).unwrap() == Z.chars().nth(k - 1).unwrap() {\n                    lcs_matrix[i][j][k] = lcs_matrix[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    lcs_matrix[i][j][k] = std::cmp::max(std::cmp::max(lcs_matrix[i - 1][j][k], lcs_matrix[i][j - 1][k]), lcs_matrix[i][j][k - 1]);\n                }\n            }\n        }\n    }\n\n    lcs_matrix[x_len][y_len][z_len]",
    "    let (m, n, o) = (X.len(), Y.len(), Z.len());\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n\n    dp[m][n][o]",
    "    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n\n    let mut L = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = max(L[i - 1][j][k], max(L[i][j - 1][k], L[i][j][k - 1]));\n                }\n            }\n        }\n    }\n\n    L[m][n][o]",
    "    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n\n    let mut L = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = max(max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n\n    L[m][n][o]",
    "    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1)\n                    && X.chars().nth(i - 1) == Z.chars().nth(k - 1)\n                {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(\n                        dp[i - 1][j][k],\n                        max(dp[i][j - 1][k], dp[i][j][k - 1]),\n                    );\n                }\n            }\n        }\n    }\n    dp[m][n][o]",
    "    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1)\n                    && X.chars().nth(i - 1) == Z.chars().nth(k - 1)\n                {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = std::cmp::max(\n                        std::cmp::max(dp[i - 1][j][k], dp[i][j - 1][k]),\n                        dp[i][j][k - 1],\n                    );\n                }\n            }\n        }\n    }\n    dp[m][n][o]",
    "    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n\n    let mut L = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1)\n                    && X.chars().nth(i - 1) == Z.chars().nth(k - 1)\n                {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = max(\n                        max(L[i - 1][j][k], L[i][j - 1][k]),\n                        L[i][j][k - 1],\n                    );\n                }\n            }\n        }\n    }\n\n    L[m][n][o]",
    "    let x = X.as_bytes();\n    let y = Y.as_bytes();\n    let z = Z.as_bytes();\n\n    let m = x.len();\n    let n = y.len();\n    let o = z.len();\n\n    let mut lcs = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    lcs[i][j][k] = 0;\n                } else if x[i - 1] == y[j - 1] && x[i - 1] == z[k - 1] {\n                    lcs[i][j][k] = lcs[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    lcs[i][j][k] = max(lcs[i - 1][j][k], max(lcs[i][j - 1][k], lcs[i][j][k - 1]));\n                }\n            }\n        }\n    }\n\n    lcs[m][n][o]",
    "    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n    let mut L = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = std::cmp::max(L[i - 1][j][k], std::cmp::max(L[i][j - 1][k], L[i][j][k - 1]));\n                }\n            }\n        }\n    }\n    L[m][n][o]",
    "    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..m + 1 {\n        for j in 0..n + 1 {\n            for k in 0..o + 1 {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = std::cmp::max(std::cmp::max(dp[i - 1][j][k], dp[i][j - 1][k]), dp[i][j][k - 1]);\n                }\n            }\n        }\n    }\n\n    dp[m][n][o]",
    "    let x = X.as_bytes();\n    let y = Y.as_bytes();\n    let z = Z.as_bytes();\n    let m = x.len();\n    let n = y.len();\n    let o = z.len();\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if x[i - 1] == y[j - 1] && x[i - 1] == z[k - 1] {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n    dp[m][n][o]",
    "    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..m + 1 {\n        for j in 0..n + 1 {\n            for k in 0..o + 1 {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1)\n                    && X.chars().nth(i - 1) == Z.chars().nth(k - 1)\n                {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = std::cmp::max(dp[i - 1][j][k], dp[i][j - 1][k]);\n                    dp[i][j][k] = std::cmp::max(dp[i][j][k], dp[i][j][k - 1]);\n                }\n            }\n        }\n    }\n\n    dp[m][n][o]",
    "    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n    let mut L = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1)\n                    && X.chars().nth(i - 1) == Z.chars().nth(k - 1)\n                {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = std::cmp::max(\n                        std::cmp::max(L[i - 1][j][k], L[i][j - 1][k]),\n                        L::[i][j][k - 1],\n                    );\n                }\n            }\n        }\n    }\n    L[m][n][o]",
    "    let x = X.as_bytes();\n    let y = Y.as_bytes();\n    let z = Z.as_bytes();\n    let m = x.len();\n    let n = y.len();\n    let o = z.len();\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if x[i - 1] == y[j - 1] && x[i - 1] == z[k - 1] {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n    dp[m][n][o]",
    "    let x = X.as_bytes();\n    let y = Y.as_bytes();\n    let z = Z.as_bytes();\n    let m = x.len();\n    let n = y.len();\n    let o = z.len();\n    let mut lcs = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 1..m + 1 {\n        for j in 1..n + 1 {\n            for k in 1..o + 1 {\n                if x[i - 1] == y[j - 1] && y[j - 1] == z[k - 1] {\n                    lcs[i][j][k] = lcs[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    lcs[i][j][k] = max(lcs[i - 1][j][k], max(lcs[i][j - 1][k], lcs[i][j][k - 1]));\n                }\n            }\n        }\n    }\n    lcs[m][n][o]",
    "    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n\n    let mut L = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..m + 1 {\n        for j in 0..n + 1 {\n            for k in 0..o + 1 {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = max(L[i - 1][j][k], max(L[i][j - 1][k], L[i][j][k - 1]));\n                }\n            }\n        }\n    }\n\n    return L[m][n][o];",
    "    let x = X.as_bytes();\n    let y = Y.as_bytes();\n    let z = Z.as_bytes();\n    let m = x.len();\n    let n = y.len();\n    let o = z.len();\n    let mut lcs = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 1..m + 1 {\n        for j in 1..n + 1 {\n            for k in 1..o + 1 {\n                if x[i - 1] == y[j - 1] && x[i - 1] == z[k - 1] {\n                    lcs[i][j][k] = lcs[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    lcs[i][j][k] = max(lcs[i - 1][j][k], max(lcs[i][j - 1][k], lcs[i][j][k - 1]));\n                }\n            }\n        }\n    }\n    lcs[m][n][o]",
    "    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n\n    let mut lcs = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    lcs[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    lcs[i][j][k] = lcs[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    lcs[i][j][k] = max(max(lcs[i - 1][j][k], lcs[i][j - 1][k]), lcs[i][j][k - 1]);\n                }\n            }\n        }\n    }\n\n    lcs[m][n][o]",
    "    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1)\n                    && X.chars().nth(i - 1) == Z.chars().nth(k - 1)\n                {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(\n                        max(dp[i - 1][j][k], dp[i][j - 1][k]),\n                        dp[i][j][k - 1],\n                    );\n                }\n            }\n        }\n    }\n\n    return dp[m][n][o];",
    "    let x = X.as_bytes();\n    let y = Y.as_bytes();\n    let z = Z.as_bytes();\n    let m = x.len();\n    let n = y.len();\n    let o = z.len();\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 1..=m {\n        for j in 1..=n {\n            for k in 1..=o {\n                if x[i - 1] == y[j - 1] && x[i - 1] == z[k - 1] {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n    dp[m][n][o]",
    "    let x = X.as_bytes();\n    let y = Y.as_bytes();\n    let z = Z.as_bytes();\n    let m = x.len();\n    let n = y.len();\n    let o = z.len();\n\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if x[i - 1] == y[j - 1] && x[i - 1] == z[k - 1] {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n\n    dp[m][n][o]",
    "    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n    let mut L = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = max(L[i - 1][j][k], max(L[i][j - 1][k], L[i][j][k - 1]));\n                }\n            }\n        }\n    }\n\n    L[m][n][o]",
    "    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n    let mut L = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = max(max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    L[m][n][o]",
    "    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n\n    let mut L = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = std::cmp::max(L[i - 1][j][k], std::cmp::max(L[i][j - 1][k], L[i][j][k - 1]));\n                }\n            }\n        }\n    }\n\n    L[m][n][o]",
    "    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n\n    let mut L = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = max(L[i - 1][j][k], max(L[i][j - 1][k], L[i][j][k - 1]));\n                }\n            }\n        }\n    }\n\n    L[m][n][o]",
    "    let x = X.as_bytes();\n    let y = Y.as_bytes();\n    let z = Z.as_bytes();\n    let m = x.len();\n    let n = y.len();\n    let o = z.len();\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if x[i - 1] == y[j - 1] && x[i - 1] == z[k - 1] {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(max(dp[i - 1][j][k], dp[i][j - 1][k]), dp[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    dp[m][n][o]",
    "    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 1..=m {\n        for j in 1..=n {\n            for k in 1..=o {\n                if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = std::cmp::max(dp[i - 1][j][k], std::cmp::max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n    dp[m][n][o]",
    "    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n\n    let mut L = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = max(L[i - 1][j][k], max(L[i][j - 1][k], L[i][j][k - 1]));\n                }\n            }\n        }\n    }\n\n    L[m][n][o]",
    "    let x = X.as_bytes();\n    let y = Y.as_bytes();\n    let z = Z.as_bytes();\n\n    let m = x.len();\n    let n = y.len();\n    let o = z.len();\n\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if x[i - 1] == y[j - 1] && x[i - 1] == z[k - 1] {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n\n    dp[m][n][o]",
    "    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n\n    let mut lcs = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..m + 1 {\n        for j in 0..n + 1 {\n            for k in 0..o + 1 {\n                if i == 0 || j == 0 || k == 0 {\n                    lcs[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    lcs[i][j][k] = lcs[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    lcs[i][j][k] = std::cmp::max(lcs[i - 1][j][k], std::cmp::max(lcs[i][j - 1][k], lcs[i][j][k - 1]));\n                }\n            }\n        }\n    }\n\n    lcs[m][n][o]",
    "    let x = X.as_bytes();\n    let y = Y.as_bytes();\n    let z = Z.as_bytes();\n    let m = x.len();\n    let n = y.len();\n    let o = z.len();\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if x[i - 1] == y[j - 1] && x[i - 1] == z[k - 1] {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n    dp[m][n][o]",
    "    let x = X.as_bytes();\n    let y = Y.as_bytes();\n    let z = Z.as_bytes();\n    let m = x.len();\n    let n = y.len();\n    let o = z.len();\n\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if x[i - 1] == y[j - 1] && x[i - 1] == z[k - 1] {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n\n    dp[m][n][o]",
    "    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n\n    dp[m][n][o]",
    "    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n    dp[m][n][o]",
    "    let x = X.as_bytes();\n    let y = Y.as_bytes();\n    let z = Z.as_bytes();\n\n    let m = x.len();\n    let n = y.len();\n    let o = z.len();\n\n    let mut dp: Vec<Vec<Vec<isize>>> = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if x[i - 1] == y[j - 1] && x[i - 1] == z[k - 1] {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n\n    dp[m][n][o]",
    "    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n\n    let mut L = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1)\n                    && X.chars().nth(i - 1) == Z.chars().nth(k - 1)\n                {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = max(\n                        max(L[i - 1][j][k], L[i][j - 1][k]),\n                        L[i][j][k - 1],\n                    );\n                }\n            }\n        }\n    }\n\n    L[m][n][o]",
    "    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n\n    let mut L = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = max(L[i - 1][j][k], max(L[i][j - 1][k], L[i][j][k - 1]));\n                }\n            }\n        }\n    }\n\n    L[m][n][o]",
    "    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n    let mut L = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1)\n                    && X.chars().nth(i - 1) == Z.chars().nth(k - 1)\n                {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = max(\n                        max(L[i - 1][j][k], L[i][j - 1][k]),\n                        L[i][j][k - 1],\n                    );\n                }\n            }\n        }\n    }\n    L[m][n][o]",
    "    let (m, n, o) = (X.len(), Y.len(), Z.len());\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 0..m + 1 {\n        for j in 0..n + 1 {\n            for k in 0..o + 1 {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1)\n                    && X.chars().nth(i - 1) == Z.chars().nth(k - 1)\n                {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(\n                        max(dp[i - 1][j][k], dp[i][j - 1][k]),\n                        dp[i][j][k - 1],\n                    );\n                }\n            }\n        }\n    }\n    dp[m][n][o]",
    "    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n\n    let mut dp: Vec<Vec<Vec<isize>>> = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n\n    dp[m][n][o]",
    "    let x = X.as_bytes();\n    let y = Y.as_bytes();\n    let z = Z.as_bytes();\n    let m = x.len();\n    let n = y.len();\n    let o = z.len();\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if x[i - 1] == y[j - 1] && x[i - 1] == z[k - 1] {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n    dp[m][n][o]",
    "    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n\n    dp[m][n][o]",
    "    let x = X.as_bytes();\n    let y = Y.as_bytes();\n    let z = Z.as_bytes();\n    let m = x.len();\n    let n = y.len();\n    let o = z.len();\n    let mut L = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0;\n                } else if x[i - 1] == y[j - 1] && x[i - 1] == z[k - 1] {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = max(\n                        max(L[i - 1][j][k], L[i][j - 1][k]),\n                        L[i][j][k - 1],\n                    );\n                }\n            }\n        }\n    }\n    L[m][n][o]",
    "    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n    let mut L = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = max(L[i - 1][j][k], max(L[i][j - 1][k], L[i][j][k - 1]));\n                }\n            }\n        }\n    }\n    L[m][n][o]",
    "    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n    dp[m][n][o]",
    "    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n    let mut L = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = max(L[i - 1][j][k], max(L[i][j - 1][k], L[i][j][k - 1]));\n                }\n            }\n        }\n    }\n    L[m][n][o]",
    "    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n\n    let mut L = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..m + 1 {\n        for j in 0..n + 1 {\n            for k in 0..o + 1 {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = std::cmp::max(std::cmp::max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n\n    L[m][n][o]",
    "    let x_len = X.len();\n    let y_len = Y.len();\n    let z_len = Z.len();\n\n    let mut dp = vec![vec![vec![0; z_len + 1]; y_len + 1]; x_len + 1];\n\n    for i in 0..=x_len {\n        for j in 0..=y_len {\n            for k in 0..=z_len {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1)\n                    && X.chars().nth(i - 1) == Z.chars().nth(k - 1)\n                {\n                    dp[i][j][k] = 1 + dp[i - 1][j - 1][k - 1];\n                } else {\n                    dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n\n    dp[x_len][y_len][z_len]",
    "    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n    dp[m][n][o]",
    "    let x = X.as_bytes();\n    let y = Y.as_bytes();\n    let z = Z.as_bytes();\n\n    let m = x.len();\n    let n = y.len();\n    let o = z.len();\n\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 1..m + 1 {\n        for j in 1..n + 1 {\n            for k in 1..o + 1 {\n                if x[i - 1] == y[j - 1] && x[i - 1] == z[k - 1] {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = std::cmp::max(dp[i - 1][j][k], std::cmp::max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n\n    dp[m][n][o]",
    "    let x = X.as_bytes();\n    let y = Y.as_bytes();\n    let z = Z.as_bytes();\n\n    let m = x.len();\n    let n = y.len();\n    let o = z.len();\n\n    let mut lcs = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 1..m + 1 {\n        for j in 1..n + 1 {\n            for k in 1..o + 1 {\n                if x[i - 1] == y[j - 1] && x[i - 1] == z[k - 1] {\n                    lcs[i][j][k] = lcs[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    lcs[i][j][k] = max(lcs[i - 1][j][k], max(lcs[i][j - 1][k], lcs[i][j][k - 1]));\n                }\n            }\n        }\n    }\n\n    lcs[m][n][o]",
    "    let x = X.as_bytes();\n    let y = Y.as_bytes();\n    let z = Z.as_bytes();\n    let m = x.len();\n    let n = y.len();\n    let o = z.len();\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if x[i - 1] == y[j - 1] && x[i - 1] == z[k - 1] {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n    dp[m][n][o]",
    "    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n    let mut L = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = max(max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n    L[m][n][o]",
    "    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n    let mut L = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = max(L[i - 1][j][k], max(L[i][j - 1][k], L[i][j][k - 1]));\n                }\n            }\n        }\n    }\n    L[m][n][o]",
    "    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n\n    let mut L = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = max(L[i - 1][j][k], max(L[i][j - 1][k], L[i][j][k - 1]));\n                }\n            }\n        }\n    }\n\n    L[m][n][o]",
    "    let x = X.as_bytes();\n    let y = Y.as_bytes();\n    let z = Z.as_bytes();\n    let m = x.len();\n    let n = y.len();\n    let o = z.len();\n    let mut lcs = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    lcs[i][j][k] = 0;\n                } else if x[i - 1] == y[j - 1] && x[i - 1] == z[k - 1] {\n                    lcs[i][j][k] = lcs[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    lcs[i][j][k] = max(\n                        max(lcs[i - 1][j][k], lcs[i][j - 1][k]),\n                        lcs[i][j][k - 1],\n                    );\n                }\n            }\n        }\n    }\n    lcs[m][n][o]",
    "    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n    let mut L = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = max(L[i - 1][j][k], max(L[i][j - 1][k], L[i][j][k - 1]));\n                }\n            }\n        }\n    }\n    L[m][n][o]",
    "    let (m, n, o) = (X.len(), Y.len(), Z.len());\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1)\n                    && X.chars().nth(i - 1) == Z.chars().nth(k - 1)\n                {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(\n                        max(dp[i - 1][j][k], dp[i][j - 1][k]),\n                        dp[i][j][k - 1],\n                    );\n                }\n            }\n        }\n    }\n    dp[m][n][o]",
    "    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n    dp[m][n][o]",
    "    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n\n    let mut L = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = max(L[i - 1][j][k], max(L[i][j - 1][k], L[i][j][k - 1]));\n                }\n            }\n        }\n    }\n\n    L[m][n][o]",
    "    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 0..m + 1 {\n        for j in 0..n + 1 {\n            for k in 0..o + 1 {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n    dp[m][n][o]",
    "    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n\n    let mut L = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1)\n                    && X.chars().nth(i - 1) == Z.chars().nth(k - 1)\n                {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = max(\n                        max(L[i - 1][j][k], L[i][j - 1][k]),\n                        L[i][j][k - 1],\n                    );\n                }\n            }\n        }\n    }\n\n    L[m][n][o]",
    "    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n\n    let mut L = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = max(L[i - 1][j][k], max(L[i][j - 1][k], L[i][j][k - 1]));\n                }\n            }\n        }\n    }\n\n    L[m][n][o]",
    "    let x = X.as_bytes();\n    let y = Y.as_bytes();\n    let z = Z.as_bytes();\n    let m = x.len();\n    let n = y.len();\n    let o = z.len();\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 1..=m {\n        for j in 1..=n {\n            for k in 1..=o {\n                if x[i - 1] == y[j - 1] && x[i - 1] == z[k - 1] {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = std::cmp::max(dp[i - 1][j][k], std::cmp::max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n    dp[m][n][o]",
    "    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n    let mut L = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1)\n                    && X.chars().nth(i - 1) == Z.chars().nth(k - 1)\n                {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = std::cmp::max(\n                        std::cmp::max(L[i - 1][j][k], L[i][j - 1][k]),\n                        L::[i][j][k - 1],\n                    );\n                }\n            }\n        }\n    }\n    L[m][n][o]",
    "    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1)\n                    && X.chars().nth(i - 1) == Z.chars().nth(k - 1)\n                {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(\n                        dp[i - 1][j][k],\n                        max(dp[i][j - 1][k], dp[i][j][k - 1]),\n                    );\n                }\n            }\n        }\n    }\n\n    dp[m][n][o]",
    "    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n\n    let mut L = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = std::cmp::max(L[i - 1][j][k], std::cmp::max(L[i][j - 1][k], L[i][j][k - 1]));\n                }\n            }\n        }\n    }\n\n    L[m][n][o]",
    "    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n\n    dp[m][n][o]",
    "    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n    let mut lcs = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    lcs[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    lcs[i][j][k] = lcs[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    lcs[i][j][k] = max(lcs[i - 1][j][k], max(lcs[i][j - 1][k], lcs[i][j][k - 1]));\n                }\n            }\n        }\n    }\n    lcs[m][n][o]",
    "    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n    let mut L = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1)\n                    && X.chars().nth(i - 1) == Z.chars().nth(k - 1)\n                {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = std::cmp::max(\n                        std::cmp::max(L[i - 1][j][k], L[i][j - 1][k]),\n                        L::[i][j][k - 1],\n                    );\n                }\n            }\n        }\n    }\n    L[m][n][o]",
    "    let x_len = X.len();\n    let y_len = Y.len();\n    let z_len = Z.len();\n    let mut dp = vec![vec![vec![0; z_len + 1]; y_len + 1]; x_len + 1];\n\n    for i in 1..x_len + 1 {\n        for j in 1..y_len + 1 {\n            for k in 1..z_len + 1 {\n                if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n    dp[x_len][y_len][z_len]",
    "    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n\n    let mut L = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = max(L[i - 1][j][k], max(L[i][j - 1][k], L[i][j][k - 1]));\n                }\n            }\n        }\n    }\n\n    L[m][n][o]",
    "    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = std::cmp::max(dp[i - 1][j][k], std::cmp::max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n\n    dp[m][n][o]",
    "    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n\n    let mut L = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = max(max(L[i - 1][j][k], L[i][j - 1][k]), L[i][j][k - 1]);\n                }\n            }\n        }\n    }\n\n    return L[m][n][o];",
    "    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n\n    let mut L = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = std::cmp::max(L[i - 1][j][k], std::cmp::max(L[i][j - 1][k], L[i][j][k - 1]));\n                }\n            }\n        }\n    }\n\n    L[m][n][o]",
    "    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n\n    let mut L = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = max(L[i - 1][j][k], max(L[i][j - 1][k], L[i][j][k - 1]));\n                }\n            }\n        }\n    }\n\n    L[m][n][o]",
    "    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = std::cmp::max(dp[i - 1][j][k], std::cmp::max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n    dp[m][n][o]",
    "    let x = X.as_bytes();\n    let y = Y.as_bytes();\n    let z = Z.as_bytes();\n    let m = x.len();\n    let n = y.len();\n    let o = z.len();\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if x[i - 1] == y[j - 1] && x[i - 1] == z[k - 1] {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n    dp[m][n][o]",
    "    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1)\n                    && X.chars().nth(i - 1) == Z.chars().nth(k - 1)\n                {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(\n                        max(dp[i - 1][j][k], dp[i][j - 1][k]),\n                        dp[i][j][k - 1],\n                    );\n                }\n            }\n        }\n    }\n    dp[m][n][o]",
    "    let x = X.as_bytes();\n    let y = Y.as_bytes();\n    let z = Z.as_bytes();\n    let m = x.len();\n    let n = y.len();\n    let o = z.len();\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 1..m + 1 {\n        for j in 1..n + 1 {\n            for k in 1..o + 1 {\n                if x[i - 1] == y[j - 1] && x[i - 1] == z[k - 1] {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = std::cmp::max(dp[i - 1][j][k], std::cmp::max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n    dp[m][n][o]",
    "    let x = X.as_bytes();\n    let y = Y.as_bytes();\n    let z = Z.as_bytes();\n    let m = x.len();\n    let n = y.len();\n    let o = z.len();\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 1..m + 1 {\n        for j in 1..n + 1 {\n            for k in 1..o + 1 {\n                if x[i - 1] == y[j - 1] && x[i - 1] == z[k - 1] {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n    dp[m][n][o]",
    "    let x = X.as_bytes();\n    let y = Y.as_bytes();\n    let z = Z.as_bytes();\n    let m = x.len();\n    let n = y.len();\n    let o = z.len();\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if x[i - 1] == y[j - 1] && x[i - 1] == z[k - 1] {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n    dp[m][n][o]",
    "    let x = X.as_bytes();\n    let y = Y.as_bytes();\n    let z = Z.as_bytes();\n    let m = x.len();\n    let n = y.len();\n    let o = z.len();\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 0..m + 1 {\n        for j in 0..n + 1 {\n            for k in 0..o + 1 {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if x[i - 1] == y[j - 1] && x[i - 1] == z[k - 1] {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n    dp[m][n][o]",
    "    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n\n    let mut L = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = max(L[i - 1][j][k], max(L[i][j - 1][k], L[i][j][k - 1]));\n                }\n            }\n        }\n    }\n\n    L[m][n][o]",
    "    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n    let mut L = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..m + 1 {\n        for j in 0..n + 1 {\n            for k in 0..o + 1 {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1)\n                    && X.chars().nth(i - 1) == Z.chars().nth(k - 1)\n                {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    L[i][j][k] = max(\n                        max(L[i - 1][j][k], L[i][j - 1][k]),\n                        L[i][j][k - 1],\n                    );\n                }\n            }\n        }\n    }\n\n    L[m][n][o]",
    "    let n = X.len();\n    let m = Y.len();\n    let o = Z.len();\n    let mut dp = vec![vec![vec![0; o + 1]; m + 1]; n + 1];\n    for i in 0..=n {\n        for j in 0..=m {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n    dp[n][m][o]",
    "    let x = X.as_bytes();\n    let y = Y.as_bytes();\n    let z = Z.as_bytes();\n    let m = x.len();\n    let n = y.len();\n    let o = z.len();\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if x[i - 1] == y[j - 1] && x[i - 1] == z[k - 1] {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n    dp[m][n][o]",
    "    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n\n    dp[m][n][o]",
    "    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n\n    dp[m][n][o]",
    "    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = std::cmp::max(std::cmp::max(dp[i - 1][j][k], dp[i][j - 1][k]), dp[i][j][k - 1]);\n                }\n            }\n        }\n    }\n\n    dp[m][n][o]",
    "    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 0..=m {\n        for j in 0..=n {\n            for k in 0..=o {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n    dp[m][n][o]",
    "    let x_len = X.len();\n    let y_len = Y.len();\n    let z_len = Z.len();\n\n    let mut dp = vec![vec![vec![0; z_len + 1]; y_len + 1]; x_len + 1];\n\n    for i in 0..=x_len {\n        for j in 0..=y_len {\n            for k in 0..=z_len {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1) && X.chars().nth(i - 1) == Z.chars().nth(k - 1) {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n\n    dp[x_len][y_len][z_len]",
    "    let x = X.as_bytes();\n    let y = Y.as_bytes();\n    let z = Z.as_bytes();\n    let m = x.len();\n    let n = y.len();\n    let o = z.len();\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 0..m + 1 {\n        for j in 0..n + 1 {\n            for k in 0..o + 1 {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if x[i - 1] == y[j - 1] && x[i - 1] == z[k - 1] {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(dp[i - 1][j][k], max(dp[i][j - 1][k], dp[i][j][k - 1]));\n                }\n            }\n        }\n    }\n    dp[m][n][o]",
    "    let x = X.as_bytes();\n    let y = Y.as_bytes();\n    let z = Z.as_bytes();\n    let m = x.len();\n    let n = y.len();\n    let o = z.len();\n    let mut l = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 0..m + 1 {\n        for j in 0..n + 1 {\n            for k in 0..o + 1 {\n                if i == 0 || j == 0 || k == 0 {\n                    l[i][j][k] = 0;\n                } else if x[i - 1] == y[j - 1] && x[i - 1] == z[k - 1] {\n                    l[i][j][k] = l[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    l[i][j][k] = max(l[i - 1][j][k], max(l[i][j - 1][k], l[i][j][k - 1]));\n                }\n            }\n        }\n    }\n    l[m][n][o]",
    "    let m = X.len();\n    let n = Y.len();\n    let o = Z.len();\n    let mut dp = vec![vec![vec![0; o + 1]; n + 1]; m + 1];\n    for i in 0..m + 1 {\n        for j in 0..n + 1 {\n            for k in 0..o + 1 {\n                if i == 0 || j == 0 || k == 0 {\n                    dp[i][j][k] = 0;\n                } else if X.chars().nth(i - 1) == Y.chars().nth(j - 1)\n                    && X.chars().nth(i - 1) == Z.chars().nth(k - 1)\n                {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1;\n                } else {\n                    dp[i][j][k] = max(\n                        dp[i - 1][j][k],\n                        max(dp[i][j - 1][k], dp[i][j][k - 1]),\n                    );\n                }\n            }\n        }\n    }\n    dp[m][n][o]"
  ]
}