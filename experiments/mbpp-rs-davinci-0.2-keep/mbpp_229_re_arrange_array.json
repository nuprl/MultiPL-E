{
  "name": "mbpp_229_re_arrange_array",
  "language": "rs",
  "prompt": "/// Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfn re_arrange_array(arr: Vec<isize>, n: isize) -> Vec<isize> {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_229_re_arrange_array.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\nfn main() {\n    let candidate = re_arrange_array;\n    assert_eq!(candidate(vec![-1, 2, -3, 4, 5, 6, -7, 8, 9], 9), vec![-1, -3, -7, 4, 5, 6, 2, 8, 9]);\n    assert_eq!(candidate(vec![12, -14, -26, 13, 15], 5), vec![-14, -26, 12, 13, 15]);\n    assert_eq!(candidate(vec![10, 24, 36, -42, -39, -78, 85], 7), vec![-42, -39, -78, 10, 24, 36, 85]);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    let mut arr = arr;\n    let mut i = 0;\n    let mut j = n - 1;\n    while i < j {\n        if arr[i as usize] < 0 {\n            i += 1;\n        } else {\n            arr.swap(i as usize, j as usize);\n            j -= 1;\n        }\n    }\n    arr",
    "    let mut arr = arr;\n    let mut i = 0;\n    let mut j = n - 1;\n    while i < j {\n        if arr[i as usize] < 0 {\n            i += 1;\n        } else if arr[j as usize] >= 0 {\n            j -= 1;\n        } else {\n            let temp = arr[i as usize];\n            arr[i as usize] = arr[j as usize];\n            arr[j as usize] = temp;\n        }\n    }\n    arr",
    "    let mut arr = arr;\n    let mut i = 0;\n    let mut j = n - 1;\n    while i < j {\n        if arr[i as usize] < 0 {\n            i += 1;\n        } else if arr[j as usize] >= 0 {\n            j -= 1;\n        } else {\n            let temp = arr[i as usize];\n            arr[i as usize] = arr[j as usize];\n            arr[j as usize] = temp;\n            i += 1;\n            j -= 1;\n        }\n    }\n    arr",
    "    let mut arr = arr;\n    let mut i = 0;\n    let mut j = n - 1;\n    while i < j {\n        if arr[i as usize] < 0 && arr[j as usize] >= 0 {\n            i += 1;\n            j -= 1;\n        } else if arr[i as usize] >= 0 && arr[j as usize] >= 0 {\n            j -= 1;\n        } else if arr[i as usize] < 0 && arr[j as usize] < 0 {\n            i += 1;\n        } else {\n            let temp = arr[i as usize];\n            arr[i as usize] = arr[j as usize];\n            arr[j as usize] = temp;\n            i += 1;\n            j -= 1;\n        }\n    }\n    arr",
    "    let mut arr = arr;\n    let mut i = 0;\n    let mut j = n - 1;\n    while i < j {\n        while i < j && arr[i as usize] < 0 {\n            i += 1;\n        }\n        while i < j && arr[j as usize] > 0 {\n            j -= 1;\n        }\n        if i < j {\n            arr.swap(i as usize, j as usize);\n        }\n    }\n    arr",
    "    let mut arr = arr;\n    let mut i = 0;\n    let mut j = n - 1;\n    while i < j {\n        if arr[i as usize] < 0 {\n            i += 1;\n        } else if arr[j as usize] >= 0 {\n            j -= 1;\n        } else {\n            arr.swap(i as usize, j as usize);\n            i += 1;\n            j -= 1;\n        }\n    }\n    arr",
    "    let mut arr = arr;\n    let mut i = 0;\n    let mut j = n - 1;\n\n    while i < j {\n        if arr[i] < 0 {\n            i += 1;\n        } else if arr[j] >= 0 {\n            j -= 1;\n        } else {\n            let temp = arr[i];\n            arr[i] = arr[j];\n            arr[j] = temp;\n            i += 1;\n            j -= 1;\n        }\n    }\n\n    arr",
    "    let mut arr = arr;\n    let mut i = 0;\n    let mut j = n - 1;\n    while i < j {\n        if arr[i as usize] < 0 {\n            i += 1;\n        } else if arr[j as usize] >= 0 {\n            j -= 1;\n        } else {\n            arr.swap(i as usize, j as usize);\n        }\n    }\n    arr",
    "    let mut arr = arr;\n    let mut i = 0;\n    let mut j = n - 1;\n    while i < j {\n        if arr[i as usize] < 0 {\n            i += 1;\n        } else if arr[j as usize] > 0 {\n            j -= 1;\n        } else {\n            let temp = arr[i as usize];\n            arr[i as usize] = arr[j as usize];\n            arr[j as usize] = temp;\n            i += 1;\n            j -= 1;\n        }\n    }\n    arr",
    "    let mut result = arr.clone();\n    let mut i = 0;\n    let mut j = n - 1;\n    while i < j {\n        if result[i as usize] < 0 {\n            i += 1;\n        } else if result[j as usize] >= 0 {\n            j -= 1;\n        } else {\n            let temp = result[i as usize];\n            result[i as usize] = result[j as usize];\n            result[j as usize] = temp;\n            i += 1;\n            j -= 1;\n        }\n    }\n    result",
    "    let mut arr = arr;\n    let mut i = 0;\n    let mut j = n - 1;\n    while i < j {\n        if arr[i as usize] < 0 {\n            i += 1;\n        } else if arr[j as usize] >= 0 {\n            j -= 1;\n        } else {\n            let temp = arr[i as usize];\n            arr[i as usize] = arr[j as usize];\n            arr[j as usize] = temp;\n            i += 1;\n            j -= 1;\n        }\n    }\n    arr",
    "    let mut arr = arr;\n    let mut i = 0;\n    let mut j = n - 1;\n    while i < j {\n        while arr[i as usize] < 0 && i < j {\n            i += 1;\n        }\n        while arr[j as usize] > 0 && i < j {\n            j -= 1;\n        }\n        if i < j {\n            let temp = arr[i as usize];\n            arr[i as usize] = arr[j as usize];\n            arr[j as usize] = temp;\n        }\n    }\n    arr",
    "    let mut arr = arr;\n    let mut i = 0;\n    let mut j = n - 1;\n    while i < j {\n        while arr[i as usize] < 0 && i < j {\n            i += 1;\n        }\n        while arr[j as usize] >= 0 && i < j {\n            j -= 1;\n        }\n        if i < j {\n            arr.swap(i as usize, j as usize);\n        }\n    }\n    arr",
    "    let mut arr = arr;\n    let mut i = 0;\n    let mut j = n - 1;\n    while i < j {\n        while i < j && arr[i as usize] < 0 {\n            i += 1;\n        }\n        while i < j && arr[j as usize] > 0 {\n            j -= 1;\n        }\n        if i < j {\n            let temp = arr[i as usize];\n            arr[i as usize] = arr[j as usize];\n            arr[j as usize] = temp;\n        }\n    }\n    arr",
    "    let mut result = vec![];\n    let mut negative_count = 0;\n    for i in 0..n {\n        if arr[i as usize] < 0 {\n            result.push(arr[i as usize]);\n            negative_count += 1;\n        }\n    }\n    for i in 0..n {\n        if arr[i as usize] >= 0 {\n            result.push(arr[i as usize]);\n        }\n    }\n    for i in n..arr.len() as isize {\n        result.push(arr[i as usize]);\n    }\n    result",
    "    let mut arr = arr;\n    let mut i = 0;\n    let mut j = n - 1;\n    while i < j {\n        if arr[i as usize] < 0 {\n            i += 1;\n        } else {\n            arr.swap(i as usize, j as usize);\n            j -= 1;\n        }\n    }\n    arr",
    "    let mut result = vec![];\n    let mut positive = vec![];\n    let mut negative = vec![];\n    for i in 0..n {\n        if arr[i as usize] >= 0 {\n            positive.push(arr[i as usize]);\n        } else {\n            negative.push(arr[i as usize]);\n        }\n    }\n    result.append(&mut negative);\n    result.append(&mut positive);\n    result",
    "    let mut arr = arr;\n    let mut i = 0;\n    let mut j = n - 1;\n    while i < j {\n        if arr[i as usize] < 0 {\n            i += 1;\n        } else if arr[j as usize] >= 0 {\n            j -= 1;\n        } else {\n            arr.swap(i as usize, j as usize);\n        }\n    }\n    arr",
    "    let mut arr = arr;\n    let mut i = 0;\n    let mut j = n - 1;\n    while i < j {\n        while arr[i as usize] < 0 {\n            i += 1;\n        }\n        while arr[j as usize] >= 0 {\n            j -= 1;\n        }\n        if i < j {\n            let temp = arr[i as usize];\n            arr[i as usize] = arr[j as usize];\n            arr[j as usize] = temp;\n        }\n    }\n    arr",
    "    let mut arr = arr;\n    let mut i = 0;\n    let mut j = n - 1;\n    while i < j {\n        while i < j && arr[i as usize] < 0 {\n            i += 1;\n        }\n        while i < j && arr[j as usize] >= 0 {\n            j -= 1;\n        }\n        if i < j {\n            let tmp = arr[i as usize];\n            arr[i as usize] = arr[j as usize];\n            arr[j as usize] = tmp;\n        }\n    }\n    arr"
  ]
}