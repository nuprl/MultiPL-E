{
  "name": "mbpp_576_is_Sub_Array",
  "language": "rs",
  "prompt": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_576_is_Sub_Array.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    let mut n = A.len();\n    let mut m = B.len();\n    while i < n && j < m {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    if j == m {\n        flag = true;\n    }\n    flag\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    let mut n = A.len();\n    let mut m = B.len();\n    while i < n && j < m {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    if j == m {\n        flag = true;\n    }\n    flag\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut is_sub_array = false;\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut l = 0;\n    let mut is_match = false;\n    let mut is_match_found = false;\n    let mut is_match_found_again = false;\n    let mut is_match_found_again_again = false;\n    while i < A.len() {\n        if A[i] == B[j] {\n            is_match = true;\n            is_match_found = true;\n            k = i;\n            l = j;\n            while is_match {\n                if A[k] == B[l] {\n                    is_match_found_again = true;\n                    k += 1;\n                    l += 1;\n                } else {\n                    is_match_found_again = false;\n                    is_match = false;\n                }\n            }\n            if is_match_found_again {\n                is_match_found_again_again = true;\n            }\n        }\n        i += 1;\n        j += 1;\n    }\n    if is_match_found_again_again {\n        is_sub_array = true;\n    }\n    is_sub_array\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 2 but the index is 2', /tmp/tmpnivhtyrf.rs:13:20\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    while i < A.len() && j < B.len() {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n        if j == B.len() {\n            flag = true;\n            break;\n        }\n    }\n    flag\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    while i < A.len() && j < B.len() {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    if j == B.len() {\n        flag = true;\n    }\n    flag\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    while i < A.len() && j < B.len() {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n        if j == B.len() {\n            flag = true;\n            break;\n        }\n    }\n    flag\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    let mut n = A.len();\n    let mut m = B.len();\n    while i < n && j < m {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n        if j == m {\n            flag = true;\n            break;\n        }\n    }\n    flag\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    while i < A.len() && j < B.len() {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    if j == B.len() {\n        flag = true;\n    }\n    flag\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    while i < A.len() && j < B.len() {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n        if j == B.len() {\n            flag = true;\n            break;\n        }\n    }\n    flag\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    let mut n = A.len();\n    let mut m = B.len();\n    while i < n && j < m {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    if j == m {\n        flag = true;\n    }\n    flag\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    while i < A.len() && j < B.len() {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    if j == B.len() {\n        flag = true;\n    }\n    flag\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    while i < A.len() && j < B.len() {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n            flag = true;\n        } else {\n            i += 1;\n            flag = false;\n        }\n    }\n    flag\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpzbjtemfr.rs:23:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    while i < A.len() && j < B.len() {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n            flag = true;\n        } else {\n            i += 1;\n            j = 0;\n            flag = false;\n        }\n    }\n    flag\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpy5ga4hlm.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    let mut k = 0;\n    let mut l = 0;\n    let mut m = 0;\n    let mut n = 0;\n    let mut o = 0;\n    let mut p = 0;\n    let mut q = 0;\n    let mut r = 0;\n    let mut s = 0;\n    let mut t = 0;\n    let mut u = 0;\n    let mut v = 0;\n    let mut w = 0;\n    let mut x = 0;\n    let mut y = 0;\n    let mut z = 0;\n    let mut aa = 0;\n    let mut bb = 0;\n    let mut cc = 0;\n    let mut dd = 0;\n    let mut ee = 0;\n    let mut ff = 0;\n    let mut gg = 0;\n    let mut hh = 0;\n    let mut ii = 0;\n    let mut jj = 0;\n    let mut kk = 0;\n    let mut ll = 0;\n    let mut mm = 0;\n    let mut nn = 0;\n    let mut oo = 0;\n    let mut pp = 0;\n    let mut qq = 0;\n    let mut rr = 0;\n    let mut ss = 0;\n    let mut tt = 0;\n    let mut uu = 0;\n    let mut vv = 0;\n    let mut ww = 0;\n    let mut xx = 0;\n    let mut yy = 0;\n    let mut zz = 0;\n    let mut aaa = 0;\n    let mut bbb = 0;\n    let mut ccc = 0;\n    let mut ddd = 0;\n    let mut eee = 0;\n    let mut fff = 0;\n    let mut ggg = 0;\n    let mut hhh = 0;\n    let mut iii = 0;\n    let mut jjj = 0;\n    let mut kkk = 0;\n    let mut lll = 0;\n    let mut mmm = 0;\n    let mut nnn = 0;\n    let mut ooo = 0;\n\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmps4azzdaa.rs:2:50\n  |\n2 | fn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n  |    ------------                                  ^^^^ expected `bool`, found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    while i < A.len() && j < B.len() {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n        } else {\n            i += 1;\n        }\n        if j == B.len() {\n            flag = true;\n            break;\n        }\n    }\n    flag\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    while i < A.len() && j < B.len() {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n        } else {\n            i += 1;\n        }\n        if j == B.len() {\n            flag = true;\n            break;\n        }\n    }\n    flag\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    let mut n = A.len();\n    let mut m = B.len();\n    while i < n && j < m {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    if j == m {\n        flag = true;\n    }\n    flag\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    while i < A.len() && j < B.len() {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n        if j == B.len() {\n            flag = true;\n        }\n    }\n    flag\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    while i < A.len() && j < B.len() {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    if j == B.len() {\n        return true;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    while i < A.len() && j < B.len() {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n        if j == B.len() {\n            flag = true;\n        }\n    }\n    flag\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    while i < A.len() && j < B.len() {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n        } else {\n            i += 1;\n            j = 0;\n        }\n        if j == B.len() {\n            flag = true;\n            break;\n        }\n    }\n    flag\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1666124055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    let mut k = 0;\n    let mut l = 0;\n    let mut m = 0;\n    let mut n = 0;\n    let mut o = 0;\n    let mut p = 0;\n    let mut q = 0;\n    let mut r = 0;\n    let mut s = 0;\n    let mut t = 0;\n    let mut u = 0;\n    let mut v = 0;\n    let mut w = 0;\n    let mut x = 0;\n    let mut y = 0;\n    let mut z = 0;\n    let mut aa = 0;\n    let mut bb = 0;\n    let mut cc = 0;\n    let mut dd = 0;\n    let mut ee = 0;\n    let mut ff = 0;\n    let mut gg = 0;\n    let mut hh = 0;\n    let mut ii = 0;\n    let mut jj = 0;\n    let mut kk = 0;\n    let mut ll = 0;\n    let mut mm = 0;\n    let mut nn = 0;\n    let mut oo = 0;\n    let mut pp = 0;\n    let mut qq = 0;\n    let mut rr = 0;\n    let mut ss = 0;\n    let mut tt = 0;\n    let mut uu = 0;\n    let mut vv = 0;\n    let mut ww = 0;\n    let mut xx = 0;\n    let mut yy = 0;\n    let mut zz = 0;\n    let mut aaa = 0;\n    let mut bbb = 0;\n    let mut ccc = 0;\n    let mut ddd = 0;\n    let mut eee = 0;\n    let mut fff = 0;\n    let mut ggg = 0;\n    let mut hhh = 0;\n    let mut iii = 0;\n    let mut jjj = 0;\n    let mut kkk = 0;\n    let mut lll = 0;\n    let mut mmm = 0;\n    let mut nnn = 0;\n    let mut ooo = 0;\n\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmps4azzdaa.rs:2:50\n  |\n2 | fn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n  |    ------------                                  ^^^^ expected `bool`, found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    while i < A.len() && j < B.len() {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n        if j == B.len() {\n            flag = true;\n        }\n    }\n    flag\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    while i < A.len() && j < B.len() {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n            flag = true;\n        } else {\n            i += 1;\n            j = 0;\n            flag = false;\n        }\n    }\n    if flag {\n        return true;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1666124055,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmprzyczviq.rs:27:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    let mut count = 0;\n    let mut k = 0;\n    let mut l = 0;\n    let mut m = 0;\n    let mut n = 0;\n    let mut o = 0;\n    let mut p = 0;\n    let mut q = 0;\n    let mut r = 0;\n    let mut s = 0;\n    let mut t = 0;\n    let mut u = 0;\n    let mut v = 0;\n    let mut w = 0;\n    let mut x = 0;\n    let mut y = 0;\n    let mut z = 0;\n    let mut aa = 0;\n    let mut bb = 0;\n    let mut cc = 0;\n    let mut dd = 0;\n    let mut ee = 0;\n    let mut ff = 0;\n    let mut gg = 0;\n    let mut hh = 0;\n    let mut ii = 0;\n    let mut jj = 0;\n    let mut kk = 0;\n    let mut ll = 0;\n    let mut mm = 0;\n    let mut nn = 0;\n    let mut oo = 0;\n    let mut pp = 0;\n    let mut qq = 0;\n    let mut rr = 0;\n    let mut ss = 0;\n    let mut tt = 0;\n    let mut uu = 0;\n    let mut vv = 0;\n    let mut ww = 0;\n    let mut xx = 0;\n    let mut yy = 0;\n    let mut zz = 0;\n    let mut aaa = 0;\n    let mut bbb = 0;\n    let mut ccc = 0;\n    let mut ddd = 0;\n    let mut eee = 0;\n    let mut fff = 0;\n    let mut ggg = 0;\n    let mut hhh = 0;\n    let mut iii = 0;\n    let mut jjj = 0;\n    let mut kkk = 0;\n    let mut lll = 0;\n    let mut mmm = 0;\n    let mut nnn = 0;\n   \n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1666124055,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp7q4u2bic.rs:2:50\n  |\n2 | fn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n  |    ------------                                  ^^^^ expected `bool`, found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    let mut n = A.len();\n    let mut m = B.len();\n    while i < n && j < m {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n        } else {\n            i += 1;\n            j = 0;\n        }\n        if j == m {\n            flag = true;\n            break;\n        }\n    }\n    flag\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1666124055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut flag = false;\n    while i < A.len() && j < B.len() {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n        if j == B.len() {\n            flag = true;\n            break;\n        }\n    }\n    flag\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1666124055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    let mut n = A.len();\n    let mut m = B.len();\n    while i < n && j < m {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n        if j == m {\n            flag = true;\n        }\n    }\n    flag\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1666124055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    while i < A.len() && j < B.len() {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n        if j == B.len() {\n            flag = true;\n        }\n    }\n    flag\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    while i < A.len() && j < B.len() {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n            flag = true;\n        } else {\n            i += 1;\n            flag = false;\n        }\n    }\n    flag\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpzbjtemfr.rs:23:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n\n    while i < A.len() && j < B.len() {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n\n    if j == B.len() {\n        flag = true;\n    }\n\n    flag\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1666124055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    while i < A.len() && j < B.len() {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    if j == B.len() {\n        flag = true;\n    }\n    flag\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n\n    while i < A.len() && j < B.len() {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n            flag = true;\n        } else {\n            i += 1;\n            flag = false;\n        }\n    }\n    flag\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1666124055,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpp6f91vkc.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    while i < A.len() && j < B.len() {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n        } else {\n            i += 1;\n            j = 0;\n        }\n        if j == B.len() {\n            flag = true;\n        }\n    }\n    flag\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1666124055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    while i < A.len() && j < B.len() {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n        } else {\n            i += 1;\n            j = 0;\n        }\n        if j == B.len() {\n            flag = true;\n            break;\n        }\n    }\n    flag\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1666124055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n\n    while i < A.len() && j < B.len() {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n\n    if j == B.len() {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1666124055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    while i < A.len() && j < B.len() {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n        } else {\n            i += 1;\n            j = 0;\n        }\n        if j == B.len() {\n            flag = true;\n            break;\n        }\n    }\n    flag\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1666124055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    while i < A.len() && j < B.len() {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n            flag = true;\n        } else {\n            i += 1;\n            flag = false;\n        }\n    }\n    if j == B.len() {\n        true\n    } else {\n        false\n    }\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1666124055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    while i < A.len() && j < B.len() {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n        if j == B.len() {\n            flag = true;\n        }\n    }\n    flag\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    let mut n = A.len();\n    let mut m = B.len();\n    while i < n && j < m {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    if j == m {\n        flag = true;\n    }\n    flag\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    let mut count = 0;\n    while i < A.len() && j < B.len() {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n            count += 1;\n        } else {\n            i += 1;\n            count = 0;\n        }\n        if count == B.len() {\n            flag = true;\n        }\n    }\n    flag\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1666124055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    while i < A.len() && j < B.len() {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n        if j == B.len() {\n            flag = true;\n            break;\n        }\n    }\n    flag\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut flag = false;\n    while i < A.len() && j < B.len() {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n        } else {\n            j = 0;\n            k += 1;\n            i = k;\n        }\n        if j == B.len() {\n            flag = true;\n        }\n    }\n    flag\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1666124055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    let mut n = A.len();\n    let mut m = B.len();\n    while i < n && j < m {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n        if j == m {\n            flag = true;\n            break;\n        }\n    }\n    flag\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    while i < A.len() && j < B.len() {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n            flag = true;\n        } else {\n            i += 1;\n            flag = false;\n        }\n    }\n    if j == B.len() {\n        flag\n    } else {\n        false\n    }\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1666124055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    let mut count = 0;\n    while i < A.len() && j < B.len() {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n            count += 1;\n            flag = true;\n        } else {\n            i += 1;\n            flag = false;\n            count = 0;\n        }\n    }\n    if count == B.len() {\n        flag = true;\n    } else {\n        flag = false;\n    }\n    flag\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1666124055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    while i < A.len() && j < B.len() {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n            flag = true;\n        } else {\n            i += 1;\n            flag = false;\n        }\n    }\n    if j == B.len() {\n        return flag;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1666124055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n\n    while i < A.len() && j < B.len() {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n\n    if j == B.len() {\n        flag = true;\n    }\n\n    flag\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1666124055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    while i < A.len() && j < B.len() {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    if j == B.len() {\n        flag = true;\n    }\n    flag\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    while i < A.len() && j < B.len() {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n        if j == B.len() {\n            flag = true;\n        }\n    }\n    flag\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    while i < A.len() && j < B.len() {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n        } else {\n            i += 1;\n            j = 0;\n        }\n        if j == B.len() {\n            flag = true;\n            break;\n        }\n    }\n    flag\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1666124055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    let mut count = 0;\n    let mut k = 0;\n    let mut l = 0;\n    let mut m = 0;\n    let mut n = 0;\n    let mut o = 0;\n    let mut p = 0;\n    let mut q = 0;\n    let mut r = 0;\n    let mut s = 0;\n    let mut t = 0;\n    let mut u = 0;\n    let mut v = 0;\n    let mut w = 0;\n    let mut x = 0;\n    let mut y = 0;\n    let mut z = 0;\n    let mut aa = 0;\n    let mut bb = 0;\n    let mut cc = 0;\n    let mut dd = 0;\n    let mut ee = 0;\n    let mut ff = 0;\n    let mut gg = 0;\n    let mut hh = 0;\n    let mut ii = 0;\n    let mut jj = 0;\n    let mut kk = 0;\n    let mut ll = 0;\n    let mut mm = 0;\n    let mut nn = 0;\n    let mut oo = 0;\n    let mut pp = 0;\n    let mut qq = 0;\n    let mut rr = 0;\n    let mut ss = 0;\n    let mut tt = 0;\n    let mut uu = 0;\n    let mut vv = 0;\n    let mut ww = 0;\n    let mut xx = 0;\n    let mut yy = 0;\n    let mut zz = 0;\n    let mut aaa = 0;\n    let mut bbb = 0;\n    let mut ccc = 0;\n    let mut ddd = 0;\n    let mut eee = 0;\n    let mut fff = 0;\n    let mut ggg = 0;\n    let mut hhh = 0;\n    let mut iii = 0;\n    let mut jjj = 0;\n    let mut kkk = 0;\n    let mut lll = 0;\n    let mut mmm = 0;\n    let mut nnn = 0;\n   \n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1666124055,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp7q4u2bic.rs:2:50\n  |\n2 | fn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n  |    ------------                                  ^^^^ expected `bool`, found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    while i < A.len() && j < B.len() {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n            flag = true;\n        } else {\n            i += 1;\n            flag = false;\n        }\n    }\n    if j == B.len() {\n        flag\n    } else {\n        false\n    }\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1666124055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    let mut count = 0;\n    while i < A.len() && j < B.len() {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n            count += 1;\n        } else {\n            i += 1;\n            j = 0;\n            count = 0;\n        }\n        if count == B.len() {\n            flag = true;\n            break;\n        }\n    }\n    flag\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1666124055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    let mut len_A = A.len();\n    let mut len_B = B.len();\n    while i < len_A && j < len_B {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    if j == len_B {\n        flag = true;\n    }\n    flag\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1666124055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    while i < A.len() && j < B.len() {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n        if j == B.len() {\n            flag = true;\n        }\n    }\n    flag\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    while i < A.len() && j < B.len() {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n            flag = true;\n        } else {\n            i += 1;\n            flag = false;\n        }\n    }\n    if j == B.len() {\n        flag\n    } else {\n        false\n    }\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1666124055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    let mut result = false;\n    while i < A.len() && j < B.len() {\n        if A[i] == B[j] {\n            flag = true;\n            i += 1;\n            j += 1;\n        } else {\n            if flag {\n                result = false;\n                break;\n            }\n            i += 1;\n        }\n    }\n    if flag {\n        result = true;\n    }\n    result\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1666124055,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp4plf_g87.rs:28:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    while i < A.len() && j < B.len() {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n        if j == B.len() {\n            flag = true;\n            break;\n        }\n    }\n    flag\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    while i < A.len() && j < B.len() {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n            flag = true;\n        } else {\n            i += 1;\n            j = 0;\n            flag = false;\n        }\n    }\n    if j == B.len() {\n        return flag;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1666124055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    while i < A.len() && j < B.len() {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    if j == B.len() {\n        flag = true;\n    }\n    flag\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    while i < A.len() && j < B.len() {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n            flag = true;\n        } else {\n            i += 1;\n            j = 0;\n            flag = false;\n        }\n    }\n    if j == B.len() {\n        flag = true;\n    }\n    flag\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1666124055,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmph_mtumsz.rs:27:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    while i < A.len() && j < B.len() {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n        } else {\n            i += 1;\n            j = 0;\n        }\n        if j == B.len() {\n            flag = true;\n            break;\n        }\n    }\n    flag\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1666124055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    while i < A.len() && j < B.len() {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n        if j == B.len() {\n            flag = true;\n            break;\n        }\n    }\n    flag\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    let mut n = A.len();\n    let mut m = B.len();\n    while i < n && j < m {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    if j == m {\n        flag = true;\n    }\n    flag\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    let mut count = 0;\n    while i < A.len() && j < B.len() {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n            count += 1;\n        } else {\n            i += 1;\n            j = 0;\n            count = 0;\n        }\n        if count == B.len() {\n            flag = true;\n            break;\n        }\n    }\n    flag\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1666124055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    while i < A.len() && j < B.len() {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n        if j == B.len() {\n            flag = true;\n            break;\n        }\n    }\n    flag\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    while i < A.len() && j < B.len() {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n        if j == B.len() {\n            flag = true;\n            break;\n        }\n    }\n    flag\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut found = false;\n    let mut start = 0;\n    while i < A.len() && j < B.len() {\n        if A[i] == B[j] {\n            if found == false {\n                start = i;\n                found = true;\n            }\n            i += 1;\n            j += 1;\n        } else {\n            i = start + 1;\n            start = i;\n            j = 0;\n            found = false;\n        }\n    }\n    if found == true {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1666124055,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpunn42_wv.rs:33:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    let mut n = A.len();\n    let mut m = B.len();\n    while i < n && j < m {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    if j == m {\n        flag = true;\n    }\n    return flag;\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1666124055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    let mut k = 0;\n    let mut l = 0;\n    let mut m = 0;\n    let mut n = 0;\n    let mut o = 0;\n    let mut p = 0;\n    let mut q = 0;\n    let mut r = 0;\n    let mut s = 0;\n    let mut t = 0;\n    let mut u = 0;\n    let mut v = 0;\n    let mut w = 0;\n    let mut x = 0;\n    let mut y = 0;\n    let mut z = 0;\n    let mut aa = 0;\n    let mut bb = 0;\n    let mut cc = 0;\n    let mut dd = 0;\n    let mut ee = 0;\n    let mut ff = 0;\n    let mut gg = 0;\n    let mut hh = 0;\n    let mut ii = 0;\n    let mut jj = 0;\n    let mut kk = 0;\n    let mut ll = 0;\n    let mut mm = 0;\n    let mut nn = 0;\n    let mut oo = 0;\n    let mut pp = 0;\n    let mut qq = 0;\n    let mut rr = 0;\n    let mut ss = 0;\n    let mut tt = 0;\n    let mut uu = 0;\n    let mut vv = 0;\n    let mut ww = 0;\n    let mut xx = 0;\n    let mut yy = 0;\n    let mut zz = 0;\n    let mut aaa = 0;\n    let mut bbb = 0;\n    let mut ccc = 0;\n    let mut ddd = 0;\n    let mut eee = 0;\n    let mut fff = 0;\n    let mut ggg = 0;\n    let mut hhh = 0;\n    let mut iii = 0;\n    let mut jjj = 0;\n    let mut kkk = 0;\n    let mut lll = 0;\n    let mut mmm = 0;\n    let mut nnn = 0;\n    let mut ooo = 0;\n\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmps4azzdaa.rs:2:50\n  |\n2 | fn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n  |    ------------                                  ^^^^ expected `bool`, found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    let mut m = A.len();\n    let mut n = B.len();\n    while i < m && j < n {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    if j == n {\n        flag = true;\n    }\n    flag\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1666124055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n\n    while i < A.len() && j < B.len() {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n\n    if j == B.len() {\n        return true;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1666124055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    while i < A.len() && j < B.len() {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    if j == B.len() {\n        flag = true;\n    }\n    flag\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    let mut n = A.len();\n    let mut m = B.len();\n    while i < n && j < m {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    if j == m {\n        flag = true;\n    }\n    flag\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    while i < A.len() && j < B.len() {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n        if j == B.len() {\n            flag = true;\n        }\n    }\n    flag\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    while i < A.len() && j < B.len() {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n        if j == B.len() {\n            flag = true;\n            break;\n        }\n    }\n    flag\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    while i < A.len() && j < B.len() {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    if j == B.len() {\n        flag = true;\n    }\n    flag\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    let mut n = A.len();\n    let mut m = B.len();\n    while i < n && j < m {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    if j == m {\n        flag = true;\n    }\n    flag\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    while i < A.len() && j < B.len() {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n        if j == B.len() {\n            flag = true;\n            break;\n        }\n    }\n    flag\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    while i < A.len() && j < B.len() {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    if j == B.len() {\n        flag = true;\n    }\n    flag\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    while i < A.len() && j < B.len() {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n        } else {\n            i += 1;\n        }\n        if j == B.len() {\n            flag = true;\n        }\n    }\n    flag\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1666124055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    let mut n = A.len();\n    let mut m = B.len();\n    while i < n && j < m {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n        if j == m {\n            flag = true;\n            break;\n        }\n    }\n    flag\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    let mut found = false;\n    let mut start = 0;\n    let mut end = 0;\n    while i < A.len() && j < B.len() {\n        if A[i] == B[j] {\n            if found == false {\n                start = i;\n                found = true;\n            }\n            i += 1;\n            j += 1;\n        } else {\n            found = false;\n            i += 1;\n            j = 0;\n        }\n        if j == B.len() {\n            flag = true;\n            end = i;\n            break;\n        }\n    }\n    if flag == true {\n        println!(\"Sub Array found from {} to {}\", start, end);\n    }\n    flag\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1666124055,
      "stdout": "Sub Array found from 0 to 3\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    while i < A.len() && j < B.len() {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n            flag = true;\n        } else {\n            i += 1;\n            flag = false;\n        }\n    }\n    flag\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpzbjtemfr.rs:23:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    while i < A.len() && j < B.len() {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n            flag = true;\n        } else {\n            i += 1;\n            j = 0;\n            flag = false;\n        }\n    }\n    return flag;\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1666124055,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpzoq9papn.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    let mut found = false;\n    let mut start = 0;\n    let mut end = 0;\n    let mut start_index = 0;\n    let mut end_index = 0;\n    let mut len_A = A.len();\n    let mut len_B = B.len();\n    while i < len_A && j < len_B {\n        if A[i] == B[j] {\n            if flag == false {\n                flag = true;\n                start = i;\n                start_index = j;\n            }\n            j += 1;\n        } else {\n            flag = false;\n            j = 0;\n            start = i + 1;\n        }\n        i += 1;\n    }\n    if flag == true {\n        end = i - 1;\n        end_index = j;\n        found = true;\n    }\n    println!(\"start = {}\", start);\n    println!(\"end = {}\", end);\n    println!(\"start_index = {}\", start_index);\n    println!(\"end_index = {}\", end_index);\n    found\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1666124055,
      "stdout": "start = 4\nend = 0\nstart_index = 0\nend_index = 0\nstart = 0\nend = 2\nstart_index = 0\nend_index = 3\nstart = 2\nend = 3\nstart_index = 0\nend_index = 2\n",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpl826x5f1.rs:44:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    let mut count = 0;\n    while i < A.len() && j < B.len() {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n            count += 1;\n        } else {\n            i += 1;\n            j = 0;\n            count = 0;\n        }\n        if count == B.len() {\n            flag = true;\n            break;\n        }\n    }\n    flag\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1666124055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    while i < A.len() && j < B.len() {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n        } else {\n            i += 1;\n        }\n    }\n    if j == B.len() {\n        flag = true;\n    }\n    flag\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1666124055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    while i < A.len() && j < B.len() {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n        if j == B.len() {\n            flag = true;\n        }\n    }\n    flag\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    while i < A.len() && j < B.len() {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n        } else {\n            i += 1;\n        }\n        if j == B.len() {\n            flag = true;\n            break;\n        }\n    }\n    flag\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    while i < A.len() && j < B.len() {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n        if j == B.len() {\n            flag = true;\n        }\n    }\n    flag\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    let mut n = A.len();\n    let mut m = B.len();\n    while i < n && j < m {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    if j == m {\n        flag = true;\n    }\n    flag\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    while i < A.len() && j < B.len() {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    if j == B.len() {\n        return true;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    while i < A.len() && j < B.len() {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n            flag = true;\n        } else {\n            i += 1;\n            flag = false;\n        }\n    }\n    if j == B.len() {\n        flag\n    } else {\n        false\n    }\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1666124055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    let mut n = A.len();\n    let mut m = B.len();\n    while i < n && j < m {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    if j == m {\n        flag = true;\n    }\n    flag\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    while i < A.len() && j < B.len() {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n            flag = true;\n        } else {\n            i += 1;\n            flag = false;\n        }\n    }\n    if j == B.len() {\n        return flag;\n    } else {\n        return false;\n    }\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1666124055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    while i < A.len() && j < B.len() {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n        } else {\n            i += 1;\n            j = 0;\n        }\n        if j == B.len() {\n            flag = true;\n            break;\n        }\n    }\n    flag\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1666124055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    while i < A.len() && j < B.len() {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n        if j == B.len() {\n            flag = true;\n        }\n    }\n    flag\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    let mut count = 0;\n    while i < A.len() && j < B.len() {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n            flag = true;\n            count += 1;\n        } else {\n            i += 1;\n            flag = false;\n        }\n    }\n    if count == B.len() {\n        flag\n    } else {\n        false\n    }\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1666124055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    while i < A.len() && j < B.len() {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n        } else {\n            i += 1;\n            j = 0;\n        }\n        if j == B.len() {\n            flag = true;\n            break;\n        }\n    }\n    flag\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1666124055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    let mut count = 0;\n    let mut k = 0;\n    let mut l = 0;\n    let mut m = 0;\n    let mut n = 0;\n    let mut o = 0;\n    let mut p = 0;\n    let mut q = 0;\n    let mut r = 0;\n    let mut s = 0;\n    let mut t = 0;\n    let mut u = 0;\n    let mut v = 0;\n    let mut w = 0;\n    let mut x = 0;\n    let mut y = 0;\n    let mut z = 0;\n    let mut a = 0;\n    let mut b = 0;\n    let mut c = 0;\n    let mut d = 0;\n    let mut e = 0;\n    let mut f = 0;\n    let mut g = 0;\n    let mut h = 0;\n    let mut i1 = 0;\n    let mut j1 = 0;\n    let mut k1 = 0;\n    let mut l1 = 0;\n    let mut m1 = 0;\n    let mut n1 = 0;\n    let mut o1 = 0;\n    let mut p1 = 0;\n    let mut q1 = 0;\n    let mut r1 = 0;\n    let mut s1 = 0;\n    let mut t1 = 0;\n    let mut u1 = 0;\n    let mut v1 = 0;\n    let mut w1 = 0;\n    let mut x1 = 0;\n    let mut y1 = 0;\n    let mut z1 = 0;\n    let mut a1 = 0;\n    let mut b1 = 0;\n    let mut c1 = 0;\n    let mut d1 = 0;\n    let mut e1 = 0;\n    let mut f1 = 0;\n    let mut g1 = 0;\n    let mut h1 = 0;\n    let mut i2 = 0;\n    let mut j2 = 0;\n    let mut k2 = 0;\n    let mut l2 = 0;\n    let mut m2 = 0;\n    let mut n2 = 0;\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1666124055,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp1hk5_uw0.rs:2:50\n  |\n2 | fn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n  |    ------------                                  ^^^^ expected `bool`, found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    let mut count = 0;\n    let mut len_A = A.len();\n    let mut len_B = B.len();\n    while i < len_A && j < len_B {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n            count += 1;\n        } else {\n            i += 1;\n            count = 0;\n        }\n        if count == len_B {\n            flag = true;\n            break;\n        }\n    }\n    flag\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1666124055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    while i < A.len() && j < B.len() {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n        } else {\n            i += 1;\n            j = 0;\n        }\n        if j == B.len() {\n            flag = true;\n            break;\n        }\n    }\n    return flag;\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1666124055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    while i < A.len() && j < B.len() {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n        } else {\n            i += 1;\n        }\n        if j == B.len() {\n            flag = true;\n            break;\n        }\n    }\n    return flag;\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1666124055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    while i < A.len() && j < B.len() {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n        } else {\n            i += 1;\n            j = 0;\n        }\n        if j == B.len() {\n            flag = true;\n            break;\n        }\n    }\n    flag\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1666124055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    while i < A.len() && j < B.len() {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n        } else {\n            i += 1;\n        }\n        if j == B.len() {\n            flag = true;\n            break;\n        }\n    }\n    flag\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    let mut k = 0;\n    let mut l = 0;\n    let mut m = 0;\n    let mut n = 0;\n    let mut o = 0;\n    let mut p = 0;\n    let mut q = 0;\n    let mut r = 0;\n    let mut s = 0;\n    let mut t = 0;\n    let mut u = 0;\n    let mut v = 0;\n    let mut w = 0;\n    let mut x = 0;\n    let mut y = 0;\n    let mut z = 0;\n    let mut aa = 0;\n    let mut bb = 0;\n    let mut cc = 0;\n    let mut dd = 0;\n    let mut ee = 0;\n    let mut ff = 0;\n    let mut gg = 0;\n    let mut hh = 0;\n    let mut ii = 0;\n    let mut jj = 0;\n    let mut kk = 0;\n    let mut ll = 0;\n    let mut mm = 0;\n    let mut nn = 0;\n    let mut oo = 0;\n    let mut pp = 0;\n    let mut qq = 0;\n    let mut rr = 0;\n    let mut ss = 0;\n    let mut tt = 0;\n    let mut uu = 0;\n    let mut vv = 0;\n    let mut ww = 0;\n    let mut xx = 0;\n    let mut yy = 0;\n    let mut zz = 0;\n    let mut aaa = 0;\n    let mut bbb = 0;\n    let mut ccc = 0;\n    let mut ddd = 0;\n    let mut eee = 0;\n    let mut fff = 0;\n    let mut ggg = 0;\n    let mut hhh = 0;\n    let mut iii = 0;\n    let mut jjj = 0;\n    let mut kkk = 0;\n    let mut lll = 0;\n    let mut mmm = 0;\n    let mut nnn = 0;\n    let mut ooo = 0;\n\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmps4azzdaa.rs:2:50\n  |\n2 | fn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n  |    ------------                                  ^^^^ expected `bool`, found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    let mut k = 0;\n    let mut l = 0;\n    let mut m = 0;\n    let mut n = 0;\n    let mut o = 0;\n    let mut p = 0;\n    let mut q = 0;\n    let mut r = 0;\n    let mut s = 0;\n    let mut t = 0;\n    let mut u = 0;\n    let mut v = 0;\n    let mut w = 0;\n    let mut x = 0;\n    let mut y = 0;\n    let mut z = 0;\n    let mut aa = 0;\n    let mut bb = 0;\n    let mut cc = 0;\n    let mut dd = 0;\n    let mut ee = 0;\n    let mut ff = 0;\n    let mut gg = 0;\n    let mut hh = 0;\n    let mut ii = 0;\n    let mut jj = 0;\n    let mut kk = 0;\n    let mut ll = 0;\n    let mut mm = 0;\n    let mut nn = 0;\n    let mut oo = 0;\n    let mut pp = 0;\n    let mut qq = 0;\n    let mut rr = 0;\n    let mut ss = 0;\n    let mut tt = 0;\n    let mut uu = 0;\n    let mut vv = 0;\n    let mut ww = 0;\n    let mut xx = 0;\n    let mut yy = 0;\n    let mut zz = 0;\n    let mut aaa = 0;\n    let mut bbb = 0;\n    let mut ccc = 0;\n    let mut ddd = 0;\n    let mut eee = 0;\n    let mut fff = 0;\n    let mut ggg = 0;\n    let mut hhh = 0;\n    let mut iii = 0;\n    let mut jjj = 0;\n    let mut kkk = 0;\n    let mut lll = 0;\n    let mut mmm = 0;\n    let mut nnn = 0;\n    let mut ooo = 0;\n\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmps4azzdaa.rs:2:50\n  |\n2 | fn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n  |    ------------                                  ^^^^ expected `bool`, found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    while i < A.len() && j < B.len() {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n            flag = true;\n        } else {\n            i += 1;\n            j = 0;\n            flag = false;\n        }\n    }\n    if j == B.len() {\n        flag\n    } else {\n        false\n    }\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1666124055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    let mut len_A = A.len();\n    let mut len_B = B.len();\n    while i < len_A && j < len_B {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    if j == len_B {\n        flag = true;\n    }\n    return flag;\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1666124055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    while i < A.len() && j < B.len() {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    if j == B.len() {\n        flag = true;\n    }\n    flag\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    while i < A.len() && j < B.len() {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    if j == B.len() {\n        flag = true;\n    }\n    flag\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    let mut count = 0;\n    let mut k = 0;\n\n    while i < A.len() && j < B.len() {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n            flag = true;\n            count += 1;\n        } else {\n            j = 0;\n            i = k;\n            flag = false;\n            count = 0;\n        }\n        if count == B.len() {\n            break;\n        }\n        k += 1;\n    }\n    flag\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1666124055,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpoqm8pe3p.rs:33:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    while i < A.len() && j < B.len() {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n        if j == B.len() {\n            flag = true;\n        }\n    }\n    flag\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    let mut n = A.len();\n    let mut m = B.len();\n    while i < n && j < m {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    if j == m {\n        flag = true;\n    }\n    flag\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    while i < A.len() && j < B.len() {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n        } else {\n            i += 1;\n            j = 0;\n        }\n        if j == B.len() {\n            flag = true;\n            break;\n        }\n    }\n    flag\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1666124055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    let mut k = 0;\n    let mut l = 0;\n    let mut m = 0;\n    let mut n = 0;\n    let mut o = 0;\n    let mut p = 0;\n    let mut q = 0;\n    let mut r = 0;\n    let mut s = 0;\n    let mut t = 0;\n    let mut u = 0;\n    let mut v = 0;\n    let mut w = 0;\n    let mut x = 0;\n    let mut y = 0;\n    let mut z = 0;\n    let mut aa = 0;\n    let mut bb = 0;\n    let mut cc = 0;\n    let mut dd = 0;\n    let mut ee = 0;\n    let mut ff = 0;\n    let mut gg = 0;\n    let mut hh = 0;\n    let mut ii = 0;\n    let mut jj = 0;\n    let mut kk = 0;\n    let mut ll = 0;\n    let mut mm = 0;\n    let mut nn = 0;\n    let mut oo = 0;\n    let mut pp = 0;\n    let mut qq = 0;\n    let mut rr = 0;\n    let mut ss = 0;\n    let mut tt = 0;\n    let mut uu = 0;\n    let mut vv = 0;\n    let mut ww = 0;\n    let mut xx = 0;\n    let mut yy = 0;\n    let mut zz = 0;\n    let mut aaa = 0;\n    let mut bbb = 0;\n    let mut ccc = 0;\n    let mut ddd = 0;\n    let mut eee = 0;\n    let mut fff = 0;\n    let mut ggg = 0;\n    let mut hhh = 0;\n    let mut iii = 0;\n    let mut jjj = 0;\n    let mut kkk = 0;\n    let mut lll = 0;\n    let mut mmm = 0;\n    let mut nnn = 0;\n    let mut ooo = 0;\n\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmps4azzdaa.rs:2:50\n  |\n2 | fn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n  |    ------------                                  ^^^^ expected `bool`, found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    let mut count = 0;\n    while i < A.len() && j < B.len() {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n            count += 1;\n        } else {\n            j = 0;\n            count = 0;\n            i += 1;\n        }\n        if count == B.len() {\n            flag = true;\n            break;\n        }\n    }\n    flag\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1666124055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    let mut count = 0;\n    while i < A.len() && j < B.len() {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n            count += 1;\n        } else {\n            i += 1;\n            j = 0;\n            count = 0;\n        }\n        if count == B.len() {\n            flag = true;\n        }\n    }\n    flag\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1666124055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    while i < A.len() && j < B.len() {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    if j == B.len() {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1666124055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    while i < A.len() && j < B.len() {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n        } else {\n            i += 1;\n            j = 0;\n        }\n        if j == B.len() {\n            flag = true;\n            break;\n        }\n    }\n    flag\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1666124055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    while i < A.len() && j < B.len() {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n        if j == B.len() {\n            flag = true;\n            break;\n        }\n    }\n    flag\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    while i < A.len() && j < B.len() {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n        } else {\n            i += 1;\n            j = 0;\n        }\n        if j == B.len() {\n            flag = true;\n            break;\n        }\n    }\n    flag\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1666124055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    let mut temp = 0;\n    while i < A.len() && j < B.len() {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n            flag = true;\n        } else {\n            j = temp;\n            i += 1;\n            flag = false;\n        }\n        if j == B.len() {\n            break;\n        }\n        if i == A.len() {\n            i = temp + 1;\n            temp = i;\n            flag = false;\n        }\n    }\n    flag\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1666124055,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp1trzwt30.rs:33:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    while i < A.len() && j < B.len() {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n            flag = true;\n        } else {\n            i += 1;\n            j = 0;\n            flag = false;\n        }\n    }\n    if j == B.len() {\n        return true;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1666124055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    let mut k = 0;\n    let mut l = 0;\n    let mut m = 0;\n    let mut n = 0;\n    let mut o = 0;\n    let mut p = 0;\n    let mut q = 0;\n    let mut r = 0;\n    let mut s = 0;\n    let mut t = 0;\n    let mut u = 0;\n    let mut v = 0;\n    let mut w = 0;\n    let mut x = 0;\n    let mut y = 0;\n    let mut z = 0;\n    let mut aa = 0;\n    let mut bb = 0;\n    let mut cc = 0;\n    let mut dd = 0;\n    let mut ee = 0;\n    let mut ff = 0;\n    let mut gg = 0;\n    let mut hh = 0;\n    let mut ii = 0;\n    let mut jj = 0;\n    let mut kk = 0;\n    let mut ll = 0;\n    let mut mm = 0;\n    let mut nn = 0;\n    let mut oo = 0;\n    let mut pp = 0;\n    let mut qq = 0;\n    let mut rr = 0;\n    let mut ss = 0;\n    let mut tt = 0;\n    let mut uu = 0;\n    let mut vv = 0;\n    let mut ww = 0;\n    let mut xx = 0;\n    let mut yy = 0;\n    let mut zz = 0;\n    let mut aaa = 0;\n    let mut bbb = 0;\n    let mut ccc = 0;\n    let mut ddd = 0;\n    let mut eee = 0;\n    let mut fff = 0;\n    let mut ggg = 0;\n    let mut hhh = 0;\n    let mut iii = 0;\n    let mut jjj = 0;\n    let mut kkk = 0;\n    let mut lll = 0;\n    let mut mmm = 0;\n    let mut nnn = 0;\n    let mut ooo = 0;\n\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmps4azzdaa.rs:2:50\n  |\n2 | fn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n  |    ------------                                  ^^^^ expected `bool`, found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    let mut count = 0;\n    while i < A.len() && j < B.len() {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n            count += 1;\n        } else {\n            i += 1;\n            j = 0;\n            count = 0;\n        }\n        if count == B.len() {\n            flag = true;\n            break;\n        }\n    }\n    flag\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1666124055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    let mut k = 0;\n    let mut l = 0;\n    let mut m = 0;\n    let mut n = 0;\n    let mut o = 0;\n    let mut p = 0;\n    let mut q = 0;\n    let mut r = 0;\n    let mut s = 0;\n    let mut t = 0;\n    let mut u = 0;\n    let mut v = 0;\n    let mut w = 0;\n    let mut x = 0;\n    let mut y = 0;\n    let mut z = 0;\n    let mut aa = 0;\n    let mut bb = 0;\n    let mut cc = 0;\n    let mut dd = 0;\n    let mut ee = 0;\n    let mut ff = 0;\n    let mut gg = 0;\n    let mut hh = 0;\n    let mut ii = 0;\n    let mut jj = 0;\n    let mut kk = 0;\n    let mut ll = 0;\n    let mut mm = 0;\n    let mut nn = 0;\n    let mut oo = 0;\n    let mut pp = 0;\n    let mut qq = 0;\n    let mut rr = 0;\n    let mut ss = 0;\n    let mut tt = 0;\n    let mut uu = 0;\n    let mut vv = 0;\n    let mut ww = 0;\n    let mut xx = 0;\n    let mut yy = 0;\n    let mut zz = 0;\n    let mut aaa = 0;\n    let mut bbb = 0;\n    let mut ccc = 0;\n    let mut ddd = 0;\n    let mut eee = 0;\n    let mut fff = 0;\n    let mut ggg = 0;\n    let mut hhh = 0;\n    let mut iii = 0;\n    let mut jjj = 0;\n    let mut kkk = 0;\n    let mut lll = 0;\n    let mut mmm = 0;\n    let mut nnn = 0;\n    let mut ooo = 0;\n\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmps4azzdaa.rs:2:50\n  |\n2 | fn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n  |    ------------                                  ^^^^ expected `bool`, found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    while i < A.len() && j < B.len() {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n        } else {\n            i += 1;\n            j = 0;\n        }\n        if j == B.len() {\n            flag = true;\n            break;\n        }\n    }\n    flag\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1666124055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    while i < A.len() && j < B.len() {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n        } else {\n            i += 1;\n            j = 0;\n        }\n        if j == B.len() {\n            flag = true;\n            break;\n        }\n    }\n    flag\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1666124055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    let mut m = A.len();\n    let mut n = B.len();\n    while i < m && j < n {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n        if j == n {\n            flag = true;\n            break;\n        }\n    }\n    flag\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1666124055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    while i < A.len() && j < B.len() {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n        if j == B.len() {\n            flag = true;\n        }\n    }\n    flag\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    let mut len_A = A.len();\n    let mut len_B = B.len();\n    while i < len_A && j < len_B {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    if j == len_B {\n        flag = true;\n    }\n    flag\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1666124055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    let mut found = false;\n    while i < A.len() && j < B.len() {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n        if j == B.len() {\n            flag = true;\n            found = true;\n            break;\n        }\n    }\n    if flag {\n        println!(\"Sub Array found\");\n    } else {\n        println!(\"Sub Array not found\");\n    }\n    found\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1666124055,
      "stdout": "Sub Array not found\nSub Array found\nSub Array not found\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    let mut len_A = A.len();\n    let mut len_B = B.len();\n    while i < len_A && j < len_B {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n        if j == len_B {\n            flag = true;\n            break;\n        }\n    }\n    flag\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1666124055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    let mut k = 0;\n    while i < A.len() && j < B.len() {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n        if j == B.len() {\n            flag = true;\n            k = i - j;\n            break;\n        }\n    }\n    return flag;\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1666124055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    let mut found = false;\n    while i < A.len() && j < B.len() {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n            flag = true;\n        } else {\n            if flag {\n                i = i - j + 1;\n                j = 0;\n                flag = false;\n            } else {\n                i += 1;\n            }\n        }\n        if j == B.len() {\n            found = true;\n            break;\n        }\n    }\n    found\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1666124055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    let mut found = false;\n    let mut len_A = A.len();\n    let mut len_B = B.len();\n    while i < len_A && j < len_B {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n            flag = true;\n        } else {\n            if flag {\n                j = 0;\n                flag = false;\n            } else {\n                i += 1;\n            }\n        }\n        if j == len_B {\n            found = true;\n            break;\n        }\n    }\n    found\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1666124055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    while i < A.len() && j < B.len() {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n        if j == B.len() {\n            flag = true;\n        }\n    }\n    flag\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = 0;\n    let mut n = A.len();\n    let mut m = B.len();\n    while i < n && j < m {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n        } else {\n            i += 1;\n            j = 0;\n        }\n        if j == m {\n            flag = 1;\n            break;\n        }\n    }\n    if flag == 1 {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1666124055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    while i < A.len() && j < B.len() {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n        } else {\n            i += 1;\n            j = 0;\n        }\n        if j == B.len() {\n            flag = true;\n            break;\n        }\n    }\n    flag\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1666124055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut flag = false;\n    let mut temp = 0;\n    let mut count = 0;\n    let mut flag1 = false;\n    let mut flag2 = false;\n    let mut flag3 = false;\n    let mut flag4 = false;\n    let mut flag5 = false;\n    let mut flag6 = false;\n    let mut flag7 = false;\n    let mut flag8 = false;\n    let mut flag9 = false;\n    let mut flag10 = false;\n    let mut flag11 = false;\n    let mut flag12 = false;\n    let mut flag13 = false;\n    let mut flag14 = false;\n    let mut flag15 = false;\n    let mut flag16 = false;\n    let mut flag17 = false;\n    let mut flag18 = false;\n    let mut flag19 = false;\n    let mut flag20 = false;\n    let mut flag21 = false;\n    let mut flag22 = false;\n    let mut flag23 = false;\n    let mut flag24 = false;\n    let mut flag25 = false;\n    let mut flag26 = false;\n    let mut flag27 = false;\n    let mut flag28 = false;\n    let mut flag29 = false;\n    let mut flag30 = false;\n    let mut flag31 = false;\n    let mut flag32 = false;\n    let mut flag33 = false;\n    let mut flag34 = false;\n    let mut flag35 = false;\n    let mut flag36 = false;\n    let mut flag37 = false;\n    let mut flag38 = false;\n    let mut flag39 = false;\n    let mut flag40 = false;\n    let mut flag41 = false;\n    let mut flag42 = false;\n    let mut flag43 = false;\n    let mut flag44 = false;\n    let mut flag45 = false;\n    let mut flag46 = false;\n    let mut flag47 = false;\n    let mut flag48 = false;\n    let mut flag49 = false;\n    let mut flag50 = false;\n    let mut flag51 = false;\n    let mut flag\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1666124055,
      "stdout": "",
      "stderr": "error: expected `;`, found `}`\n  --> /tmp/tmp0sjvbcf1.rs:60:17\n   |\n60 |     let mut flag\n   |                 ^ help: add `;` here\n61 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmp0sjvbcf1.rs:2:50\n  |\n2 | fn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n  |    ------------                                  ^^^^ expected `bool`, found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    while i < A.len() && j < B.len() {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n        if j == B.len() {\n            flag = true;\n            break;\n        }\n    }\n    flag\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    while i < A.len() && j < B.len() {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n        } else {\n            i += 1;\n            j = 0;\n        }\n        if j == B.len() {\n            flag = true;\n            break;\n        }\n    }\n    flag\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1666124055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    while i < A.len() && j < B.len() {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n        if j == B.len() {\n            flag = true;\n            break;\n        }\n    }\n    flag\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    let mut count = 0;\n    let mut k = 0;\n    let mut l = 0;\n    let mut m = 0;\n    let mut n = 0;\n    let mut o = 0;\n    let mut p = 0;\n    let mut q = 0;\n    let mut r = 0;\n    let mut s = 0;\n    let mut t = 0;\n    let mut u = 0;\n    let mut v = 0;\n    let mut w = 0;\n    let mut x = 0;\n    let mut y = 0;\n    let mut z = 0;\n    let mut aa = 0;\n    let mut bb = 0;\n    let mut cc = 0;\n    let mut dd = 0;\n    let mut ee = 0;\n    let mut ff = 0;\n    let mut gg = 0;\n    let mut hh = 0;\n    let mut ii = 0;\n    let mut jj = 0;\n    let mut kk = 0;\n    let mut ll = 0;\n    let mut mm = 0;\n    let mut nn = 0;\n    let mut oo = 0;\n    let mut pp = 0;\n    let mut qq = 0;\n    let mut rr = 0;\n    let mut ss = 0;\n    let mut tt = 0;\n    let mut uu = 0;\n    let mut vv = 0;\n    let mut ww = 0;\n    let mut xx = 0;\n    let mut yy = 0;\n    let mut zz = 0;\n    let mut aaa = 0;\n    let mut bbb = 0;\n    let mut ccc = 0;\n    let mut ddd = 0;\n    let mut eee = 0;\n    let mut fff = 0;\n    let mut ggg = 0;\n    let mut hhh = 0;\n    let mut iii = 0;\n    let mut jjj = 0;\n    let mut kkk = 0;\n    let mut lll = 0;\n    let mut mmm = 0;\n    let mut nnn = 0;\n   \n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1666124055,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp7q4u2bic.rs:2:50\n  |\n2 | fn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n  |    ------------                                  ^^^^ expected `bool`, found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    let mut n = A.len();\n    let mut m = B.len();\n    while i < n && j < m {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    if j == m {\n        flag = true;\n    }\n    return flag;\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1666124055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    let mut n = A.len();\n    let mut m = B.len();\n    while i < n && j < m {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n            flag = true;\n        } else {\n            i += 1;\n            flag = false;\n        }\n    }\n    if flag {\n        return true;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1666124056,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp0b_d5hq8.rs:28:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    while i < A.len() && j < B.len() {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n        if j == B.len() {\n            flag = true;\n            break;\n        }\n    }\n    flag\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    let mut n = A.len();\n    let mut m = B.len();\n    while i < n && j < m {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    if j == m {\n        flag = true;\n    }\n    flag\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    let mut count = 0;\n    while i < A.len() && j < B.len() {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n            count += 1;\n        } else {\n            i += 1;\n            count = 0;\n        }\n        if count == B.len() {\n            flag = true;\n            break;\n        }\n    }\n    flag\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1666124056,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    while i < A.len() && j < B.len() {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n        if j == B.len() {\n            flag = true;\n            break;\n        }\n    }\n    flag\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut flag = false;\n    let mut len_A = A.len();\n    let mut len_B = B.len();\n    if len_A < len_B {\n        return false;\n    }\n    while i < len_A && j < len_B {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n        if j == len_B {\n            flag = true;\n            break;\n        }\n    }\n    flag\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1666124056,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut flag = false;\n    while i < A.len() && j < B.len() {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n        } else {\n            j = 0;\n            k += 1;\n            i = k;\n        }\n        if j == B.len() {\n            flag = true;\n        }\n    }\n    flag\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1666124055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = 0;\n    while i < A.len() && j < B.len() {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n        if j == B.len() {\n            flag = 1;\n            break;\n        }\n    }\n    if flag == 1 {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1666124056,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    while i < A.len() && j < B.len() {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n        if j == B.len() {\n            flag = true;\n        }\n    }\n    flag\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    let mut k = 0;\n    let mut l = 0;\n    let mut m = 0;\n    let mut n = 0;\n    let mut o = 0;\n    let mut p = 0;\n    let mut q = 0;\n    let mut r = 0;\n    let mut s = 0;\n    let mut t = 0;\n    let mut u = 0;\n    let mut v = 0;\n    let mut w = 0;\n    let mut x = 0;\n    let mut y = 0;\n    let mut z = 0;\n    let mut aa = 0;\n    let mut bb = 0;\n    let mut cc = 0;\n    let mut dd = 0;\n    let mut ee = 0;\n    let mut ff = 0;\n    let mut gg = 0;\n    let mut hh = 0;\n    let mut ii = 0;\n    let mut jj = 0;\n    let mut kk = 0;\n    let mut ll = 0;\n    let mut mm = 0;\n    let mut nn = 0;\n    let mut oo = 0;\n    let mut pp = 0;\n    let mut qq = 0;\n    let mut rr = 0;\n    let mut ss = 0;\n    let mut tt = 0;\n    let mut uu = 0;\n    let mut vv = 0;\n    let mut ww = 0;\n    let mut xx = 0;\n    let mut yy = 0;\n    let mut zz = 0;\n    let mut aaa = 0;\n    let mut bbb = 0;\n    let mut ccc = 0;\n    let mut ddd = 0;\n    let mut eee = 0;\n    let mut fff = 0;\n    let mut ggg = 0;\n    let mut hhh = 0;\n    let mut iii = 0;\n    let mut jjj = 0;\n    let mut kkk = 0;\n    let mut lll = 0;\n    let mut mmm = 0;\n    let mut nnn = 0;\n    let mut ooo = 0;\n\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmps4azzdaa.rs:2:50\n  |\n2 | fn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n  |    ------------                                  ^^^^ expected `bool`, found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    let mut found = false;\n    let mut n = A.len();\n    let mut m = B.len();\n    while i < n && j < m {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n        if j == m {\n            flag = true;\n            found = true;\n            break;\n        }\n    }\n    if flag == true {\n        println!(\"Yes, list2 is a sublist of list1\");\n    } else {\n        println!(\"No, list2 is not a sublist of list1\");\n    }\n    return found;\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1666124056,
      "stdout": "No, list2 is not a sublist of list1\nYes, list2 is a sublist of list1\nNo, list2 is not a sublist of list1\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut flag = false;\n    for i in 0..A.len() {\n        if A[i] == B[0] {\n            let mut j = 0;\n            while j < B.len() && A[i + j] == B[j] {\n                j += 1;\n            }\n            if j == B.len() {\n                flag = true;\n            }\n        }\n    }\n    flag\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1666124056,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 3 but the index is 3', /tmp/tmphf4c6pky.rs:7:34\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    while i < A.len() && j < B.len() {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n            flag = true;\n        } else {\n            i += 1;\n            j = 0;\n            flag = false;\n        }\n    }\n    flag\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpy5ga4hlm.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut is_sub_array: bool = false;\n    let mut i: usize = 0;\n    let mut j: usize = 0;\n    let mut k: usize = 0;\n\n    while i < A.len() && j < B.len() {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n        } else {\n            j = 0;\n            k += 1;\n            i = k;\n        }\n    }\n\n    if j == B.len() {\n        is_sub_array = true;\n    }\n\n    return is_sub_array;\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1666124056,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    while i < A.len() && j < B.len() {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n        if j == B.len() {\n            flag = true;\n        }\n    }\n    flag\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    let mut m = A.len();\n    let mut n = B.len();\n    while i < m && j < n {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    if j == n {\n        flag = true;\n    }\n    flag\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1666124055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    while i < A.len() && j < B.len() {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n            flag = true;\n        } else {\n            i += 1;\n            flag = false;\n        }\n    }\n    flag\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpzbjtemfr.rs:23:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut found = false;\n    let mut start = 0;\n    let mut A_len = A.len();\n    let mut B_len = B.len();\n    while i < A_len && j < B_len {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n        } else {\n            start += 1;\n            i = start;\n            j = 0;\n        }\n        if j == B_len {\n            found = true;\n            break;\n        }\n    }\n    found\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1666124056,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    while i < A.len() && j < B.len() {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n            flag = true;\n        } else {\n            i += 1;\n            flag = false;\n        }\n    }\n    if j == B.len() {\n        return flag;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1666124055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    while i < A.len() && j < B.len() {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n        } else {\n            i += 1;\n        }\n        if j == B.len() {\n            flag = true;\n            break;\n        }\n    }\n    flag\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = 0;\n    while i < A.len() && j < B.len() {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n            flag = 1;\n        } else {\n            i += 1;\n            flag = 0;\n        }\n    }\n    if flag == 1 {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1666124056,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmp89lye1cf.rs:27:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    while i < A.len() && j < B.len() {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n        if j == B.len() {\n            flag = true;\n        }\n    }\n    flag\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    while i < A.len() && j < B.len() {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n            flag = true;\n        } else {\n            i += 1;\n            flag = false;\n        }\n    }\n    if j == B.len() {\n        return flag;\n    } else {\n        return false;\n    }\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1666124055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut flag = false;\n    let mut found = false;\n    let mut len_A = A.len();\n    let mut len_B = B.len();\n    if len_A < len_B {\n        return false;\n    }\n    while i < len_A && j < len_B {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n        if j == len_B {\n            found = true;\n            break;\n        }\n    }\n    return found;\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1666124056,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    if A.len() > B.len() {\n        return false;\n    }\n    let mut i = 0;\n    let mut j = 0;\n    while i < A.len() && j < B.len() {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n        } else {\n            i = 0;\n            j += 1;\n        }\n    }\n    if i == A.len() {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1666124056,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    while i < A.len() && j < B.len() {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n            flag = true;\n        } else {\n            i += 1;\n            j = 0;\n            flag = false;\n        }\n    }\n    flag\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpy5ga4hlm.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    let mut len_A = A.len();\n    let mut len_B = B.len();\n    while i < len_A && j < len_B {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n        if j == len_B {\n            flag = true;\n            break;\n        }\n    }\n    flag\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1666124055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    while i < A.len() && j < B.len() {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n        if j == B.len() {\n            flag = true;\n            break;\n        }\n    }\n    flag\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    while i < A.len() && j < B.len() {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n        if j == B.len() {\n            flag = true;\n        }\n    }\n    flag\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    let mut n = A.len();\n    let mut m = B.len();\n    while i < n && j < m {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n        if j == m {\n            flag = true;\n            break;\n        }\n    }\n    flag\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    while i < A.len() && j < B.len() {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n            flag = true;\n        } else {\n            i += 1;\n            flag = false;\n        }\n    }\n    flag\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpzbjtemfr.rs:23:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    let mut count = 0;\n    while i < A.len() && j < B.len() {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n            count += 1;\n        } else {\n            i += 1;\n            j = 0;\n            count = 0;\n        }\n        if count == B.len() {\n            flag = true;\n        }\n    }\n    flag\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1666124055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    let mut count = 0;\n    while i < A.len() && j < B.len() {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n            count += 1;\n        } else {\n            i += 1;\n            count = 0;\n        }\n        if count == B.len() {\n            flag = true;\n            break;\n        }\n    }\n    flag\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1666124056,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    while i < A.len() && j < B.len() {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n            flag = true;\n        } else {\n            i += 1;\n            flag = false;\n        }\n    }\n    if flag {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1666124056,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpdhhl8qnb.rs:27:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    let mut n = A.len();\n    let mut m = B.len();\n    while i < n && j < m {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    if j == m {\n        flag = true;\n    }\n    return flag;\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1666124055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    while i < A.len() && j < B.len() {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n        if j == B.len() {\n            flag = true;\n        }\n    }\n    flag\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut result = false;\n    let mut n = A.len();\n    let mut m = B.len();\n    while i < n && j < m {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    if j == m {\n        result = true;\n    }\n    result\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1666124056,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    let mut count = 0;\n    while i < A.len() && j < B.len() {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n            count += 1;\n        } else {\n            i += 1;\n            j = 0;\n            count = 0;\n        }\n        if count == B.len() {\n            flag = true;\n            break;\n        }\n    }\n    flag\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1666124055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    let mut count = 0;\n    while i < A.len() && j < B.len() {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n            count += 1;\n        } else {\n            i += 1;\n            count = 0;\n        }\n        if count == B.len() {\n            flag = true;\n            break;\n        }\n    }\n    flag\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1666124056,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    while i < A.len() && j < B.len() {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n        if j == B.len() {\n            flag = true;\n            break;\n        }\n    }\n    flag\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    let mut len_A = A.len();\n    let mut len_B = B.len();\n\n    while i < len_A && j < len_B {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n\n    if j == len_B {\n        flag = true;\n    }\n\n    flag\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1666124056,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    let mut k = 0;\n    let mut l = 0;\n    let mut m = 0;\n    let mut n = 0;\n    let mut o = 0;\n    let mut p = 0;\n    let mut q = 0;\n    let mut r = 0;\n    let mut s = 0;\n    let mut t = 0;\n    let mut u = 0;\n    let mut v = 0;\n    let mut w = 0;\n    let mut x = 0;\n    let mut y = 0;\n    let mut z = 0;\n    let mut aa = 0;\n    let mut bb = 0;\n    let mut cc = 0;\n    let mut dd = 0;\n    let mut ee = 0;\n    let mut ff = 0;\n    let mut gg = 0;\n    let mut hh = 0;\n    let mut ii = 0;\n    let mut jj = 0;\n    let mut kk = 0;\n    let mut ll = 0;\n    let mut mm = 0;\n    let mut nn = 0;\n    let mut oo = 0;\n    let mut pp = 0;\n    let mut qq = 0;\n    let mut rr = 0;\n    let mut ss = 0;\n    let mut tt = 0;\n    let mut uu = 0;\n    let mut vv = 0;\n    let mut ww = 0;\n    let mut xx = 0;\n    let mut yy = 0;\n    let mut zz = 0;\n    let mut aaa = 0;\n    let mut bbb = 0;\n    let mut ccc = 0;\n    let mut ddd = 0;\n    let mut eee = 0;\n    let mut fff = 0;\n    let mut ggg = 0;\n    let mut hhh = 0;\n    let mut iii = 0;\n    let mut jjj = 0;\n    let mut kkk = 0;\n    let mut lll = 0;\n    let mut mmm = 0;\n    let mut nnn = 0;\n    let mut ooo = 0;\n\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmps4azzdaa.rs:2:50\n  |\n2 | fn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n  |    ------------                                  ^^^^ expected `bool`, found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    let mut index = 0;\n    let mut count = 0;\n    while i < A.len() {\n        if A[i] == B[j] {\n            flag = true;\n            index = i;\n            break;\n        }\n        i += 1;\n    }\n    if flag {\n        while j < B.len() {\n            if A[index] == B[j] {\n                count += 1;\n                index += 1;\n            }\n            j += 1;\n        }\n    }\n    if count == B.len() {\n        return true;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1666124056,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 4', /tmp/tmpr9jd5ddt.rs:18:16\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    while i < A.len() && j < B.len() {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n        if j == B.len() {\n            flag = true;\n        }\n    }\n    flag\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    let mut n = A.len();\n    let mut m = B.len();\n    while i < n && j < m {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    if j == m {\n        flag = true;\n    }\n    flag\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    while i < A.len() && j < B.len() {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    if j == B.len() {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1666124055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    let mut n = A.len();\n    let mut m = B.len();\n    while i < n && j < m {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    if j == m {\n        flag = true;\n    }\n    flag\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    while i < A.len() && j < B.len() {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n            flag = true;\n        } else {\n            i += 1;\n            flag = false;\n        }\n    }\n    if j == B.len() {\n        return flag;\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1666124055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut flag = false;\n    let mut len_A = A.len();\n    let mut len_B = B.len();\n    if len_A > len_B {\n        return false;\n    }\n    while i < len_B && j < len_A {\n        if A[j] == B[i] {\n            j += 1;\n        }\n        i += 1;\n    }\n    if j == len_A {\n        flag = true;\n    }\n    return flag;\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1666124056,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    let mut n = A.len();\n    let mut m = B.len();\n    while i < n && j < m {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n        if j == m {\n            flag = true;\n        }\n    }\n    flag\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1666124055,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    while i < A.len() && j < B.len() {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n        if j == B.len() {\n            flag = true;\n            break;\n        }\n    }\n    flag\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether a list is sublist of another or not.\nfn is_Sub_Array(A: Vec<isize>, B: Vec<isize>) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    let mut flag = false;\n    let mut n = A.len();\n    let mut m = B.len();\n    while i < n && j < m {\n        if A[i] == B[j] {\n            i += 1;\n            j += 1;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    if j == m {\n        flag = true;\n    }\n    flag\n}\n\nfn main() {\n    let candidate = is_Sub_Array;\n    assert_eq!(candidate(vec![1, 4, 3, 5], vec![1, 2]), false);\n    assert_eq!(candidate(vec![1, 2, 1], vec![1, 2, 1]), true);\n    assert_eq!(candidate(vec![1, 0, 2, 2], vec![2, 2, 0]), false);\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}