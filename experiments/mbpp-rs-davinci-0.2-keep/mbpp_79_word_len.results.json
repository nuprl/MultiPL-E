{
  "name": "mbpp_79_word_len",
  "language": "rs",
  "prompt": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_79_word_len.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 1\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    let len = s.len();\n    len % 2 == 1\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 0\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpy_cftj8d.rs:8:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 1\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 1\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 1\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 0\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpy_cftj8d.rs:8:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 1\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 != 0\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 1\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 1\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 0\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpy_cftj8d.rs:8:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 1\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 1\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 1\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 0\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpy_cftj8d.rs:8:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 1\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 1\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 1\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 1\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 1\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 1\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 1\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 1\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 1\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 1\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 0\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpy_cftj8d.rs:8:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 1\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 1\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 1\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 1\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 1\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 1\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 0\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpy_cftj8d.rs:8:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 0\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpy_cftj8d.rs:8:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    let len = s.len();\n    if len % 2 == 0 {\n        return false;\n    } else {\n        return true;\n    }\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1666123676,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 1\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 1\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 0\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpy_cftj8d.rs:8:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 0\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpy_cftj8d.rs:8:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 1\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 0\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpy_cftj8d.rs:8:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 1\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 1\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 0\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpy_cftj8d.rs:8:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 1\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    let len = s.len();\n    if len % 2 == 0 {\n        false\n    } else {\n        true\n    }\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1666123676,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 1\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    let len = s.len();\n    if len % 2 == 0 {\n        return false;\n    }\n    true\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1666123676,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 0\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpy_cftj8d.rs:8:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    let len = s.len();\n    if len % 2 == 0 {\n        return false;\n    }\n    true\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1666123676,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    let len = s.len();\n    if len % 2 == 0 {\n        return false;\n    }\n    return true;\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1666123676,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 1\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    let len = s.len();\n    if len % 2 == 0 {\n        return false;\n    } else {\n        return true;\n    }\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1666123676,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 != 0\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 0\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpy_cftj8d.rs:8:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 1\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 0\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpy_cftj8d.rs:8:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 0\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpy_cftj8d.rs:8:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 1\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 1\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 1\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 1\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 1\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 0\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpy_cftj8d.rs:8:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 1\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 1\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 0\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpy_cftj8d.rs:8:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 1\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 1\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 1\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 1\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 1\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 0\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpy_cftj8d.rs:8:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    let len = s.len();\n    if len % 2 == 0 {\n        false\n    } else {\n        true\n    }\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1666123676,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 1\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 0\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpy_cftj8d.rs:8:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 0\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpy_cftj8d.rs:8:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    let len = s.len();\n    len % 2 == 0\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1666123676,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpimym8x9p.rs:9:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 1\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 1\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 0\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpy_cftj8d.rs:8:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 1\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 1\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 1\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    let len = s.len();\n    if len % 2 == 0 {\n        return false;\n    }\n    true\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1666123676,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 1\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 0\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpy_cftj8d.rs:8:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 != 0\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 0\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpy_cftj8d.rs:8:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 1\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 1\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 0\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpy_cftj8d.rs:8:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 0\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpy_cftj8d.rs:8:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    let len = s.len();\n    len % 2 == 1\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 1\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    let len = s.len();\n    if len % 2 == 0 {\n        return false;\n    }\n    true\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1666123676,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 1\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 1\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    let len = s.len();\n    if len % 2 == 0 {\n        return false;\n    }\n    return true;\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1666123676,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 1\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 1\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 1\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 1\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 0\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpy_cftj8d.rs:8:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 1\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 1\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 1\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 != 0\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 1\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 1\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 1\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 0\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpy_cftj8d.rs:8:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 1\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    let len = s.len();\n    if len % 2 == 0 {\n        return false;\n    }\n    true\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1666123676,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 1\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 1\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    let len = s.len();\n    if len % 2 == 0 {\n        return false;\n    } else {\n        return true;\n    }\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1666123676,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    let len = s.len();\n    if len % 2 == 0 {\n        return false;\n    } else {\n        return true;\n    }\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1666123676,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 0\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpy_cftj8d.rs:8:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    let len = s.len();\n    if len % 2 == 0 {\n        return false;\n    }\n    true\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1666123676,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 1\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 1\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    let len = s.len();\n    if len % 2 == 0 {\n        return false;\n    }\n    true\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1666123676,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 1\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 1\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 1\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 1\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 1\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 1\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 1\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 1\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 1\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 1\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 1\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 1\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 0\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpy_cftj8d.rs:8:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 0\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpy_cftj8d.rs:8:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 1\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 0\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpy_cftj8d.rs:8:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    let len = s.len();\n    if len % 2 == 0 {\n        return false;\n    } else {\n        return true;\n    }\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1666123676,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    let len = s.len();\n    if len % 2 == 0 {\n        return false;\n    }\n    true\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1666123676,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 1\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 1\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 1\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 1\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 1\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 1\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 0\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpy_cftj8d.rs:8:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 1\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    let len = s.len();\n    if len % 2 == 0 {\n        return false;\n    }\n    true\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1666123676,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 1\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 1\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 1\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 0\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpy_cftj8d.rs:8:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 1\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 1\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 1\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 1\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 0\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpy_cftj8d.rs:8:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 1\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    let len = s.len();\n    if len % 2 == 0 {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1666123676,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpg_ttmj7q.rs:13:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 0\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpy_cftj8d.rs:8:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 1\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 1\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 1\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 1\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 1\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 1\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 1\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 1\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 1\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 1\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    let len = s.len();\n    if len % 2 == 0 {\n        return false;\n    }\n    return true;\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1666123676,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 0\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpy_cftj8d.rs:8:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    let len = s.len();\n    len % 2 == 1\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 1\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 1\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 0\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpy_cftj8d.rs:8:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 1\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 1\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    let len = s.len();\n    len % 2 != 0\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1666123676,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 0\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpy_cftj8d.rs:8:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 1\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    let len = s.len();\n    if len % 2 == 0 {\n        return false;\n    }\n    true\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1666123676,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 1\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 1\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 1\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 1\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 0\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `true`,\n right: `false`', /tmp/tmpy_cftj8d.rs:8:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    let len = s.len();\n    if len % 2 == 0 {\n        return false;\n    }\n    true\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1666123676,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 1\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 1\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 1\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 1\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    let len = s.len();\n    if len % 2 == 0 {\n        return false;\n    } else {\n        return true;\n    }\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1666123676,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 1\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 1\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    let len = s.len();\n    if len % 2 == 0 {\n        return false;\n    } else {\n        return true;\n    }\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1666123676,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether the length of the word is odd or not.\nfn word_len(s: String) -> bool {\n    s.len() % 2 == 1\n}\n\nfn main() {\n    let candidate = word_len;\n    assert_eq!(candidate(String::from(\"Hadoop\")), false);\n    assert_eq!(candidate(String::from(\"great\")), true);\n    assert_eq!(candidate(String::from(\"structure\")), true);\n}\n",
      "timestamp": 1665510630,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}