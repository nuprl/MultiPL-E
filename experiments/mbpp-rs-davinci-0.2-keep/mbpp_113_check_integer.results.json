{
  "name": "mbpp_113_check_integer",
  "language": "rs",
  "prompt": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_113_check_integer.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    text.parse::<i32>().is_ok()\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1665509796,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    let mut first_char = chars.next();\n    if first_char == Some('-') || first_char == Some('+') {\n        first_char = chars.next();\n    }\n    if first_char.is_none() {\n        return false;\n    }\n    for c in chars {\n        if !c.is_digit(10) {\n            return false;\n        }\n    }\n    return true;\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1665509797,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    let mut is_integer = false;\n    let mut is_negative = false;\n\n    if let Some(c) = chars.next() {\n        if c == '-' {\n            is_negative = true;\n        } else if c.is_digit(10) {\n            is_integer = true;\n        } else {\n            return false;\n        }\n    }\n\n    for c in chars {\n        if !c.is_digit(10) {\n            return false;\n        }\n    }\n\n    if is_negative && text.len() == 1 {\n        return false;\n    }\n\n    is_integer\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1665509797,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    let mut is_integer = false;\n    let mut is_negative = false;\n    let mut is_positive = false;\n    let mut has_decimal = false;\n    let mut has_exponent = false;\n    let mut has_exponent_sign = false;\n    let mut has_exponent_value = false;\n    let mut has_exponent_decimal = false;\n    let mut has_exponent_decimal_value = false;\n\n    while let Some(c) = chars.next() {\n        match c {\n            '-' => {\n                if is_negative || is_positive || has_decimal || has_exponent {\n                    return false;\n                }\n                is_negative = true;\n            }\n            '+' => {\n                if is_negative || is_positive || has_decimal || has_exponent {\n                    return false;\n                }\n                is_positive = true;\n            }\n            '.' => {\n                if has_decimal || has_exponent {\n                    return false;\n                }\n                has_decimal = true;\n            }\n            'e' => {\n                if has_exponent {\n                    return false;\n                }\n                has_exponent = true;\n            }\n            '-' | '+' => {\n                if has_exponent_sign || has_exponent_value || has_exponent_decimal {\n                    return false;\n                }\n                has_exponent_sign = true;\n            }\n            '.' => {\n                if has_exponent_decimal || has_exponent_decimal_value {\n                    return false;\n                }\n                has_exponent_decimal = true;\n            }\n            '0'..='9' => {\n                if has_exponent {\n                    if has_exponent_decimal {\n                        has_exponent_decimal_value = true;\n                    } else {\n                        has_exponent_value = true;\n                    }\n                } else {\n                    is_integer = true;\n                }\n            }\n            _ => return false,\n        }\n    }\n\n    if has_\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1665509796,
      "stdout": "",
      "stderr": "error: expected `{`, found `}`\n  --> /tmp/tmpyc2_hbme.rs:68:1\n   |\n67 |     if has_\n   |     -- this `if` expression has a condition, but no block\n68 | }\n   | ^ expected `{`\n\nerror: aborting due to previous error\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    if chars.next().unwrap() == '-' {\n        chars.next();\n    }\n    chars.all(|c| c.is_digit(10))\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1665509796,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut is_integer = true;\n    let mut is_negative = false;\n    let mut is_positive = false;\n    let mut is_decimal = false;\n    let mut is_exponent = false;\n    let mut is_exponent_sign = false;\n    let mut is_exponent_number = false;\n    let mut is_exponent_decimal = false;\n    let mut is_exponent_decimal_number = false;\n    let mut is_exponent_decimal_number_after = false;\n    let mut is_exponent_decimal_number_after_number = false;\n    let mut is_exponent_decimal_number_after_decimal = false;\n    let mut is_exponent_decimal_number_after_decimal_number = false;\n    let mut is_exponent_decimal_number_after_decimal_number_after = false;\n    let mut is_exponent_decimal_number_after_decimal_number_after_number = false;\n    let mut is_exponent_decimal_number_after_decimal_number_after_decimal = false;\n    let mut is_exponent_decimal_number_after_decimal_number_after_decimal_number = false;\n    let mut is_exponent_decimal_number_after_decimal_number_after_decimal_number_after = false;\n    let mut is_exponent_decimal_number_after_decimal_number_after_decimal_number_after_number = false;\n    let mut is_exponent_decimal_number_after_decimal_number_after_decimal_number_after_decimal = false;\n    let mut is_exponent_decimal_number_after_decimal_number_after_decimal_number_after_decimal_number = false;\n    let mut is_exponent_decimal_number_after_decimal_number_after_decimal_number_after_decimal_number_after = false;\n    let mut is_exponent_decimal_number_after_decimal_number_after_decimal_number_after_decimal_number_\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1665509796,
      "stdout": "",
      "stderr": "error: expected `;`, found `}`\n  --> /tmp/tmpmeqp0bb_.rs:25:103\n   |\n25 |     let mut is_exponent_decimal_number_after_decimal_number_after_decimal_number_after_decimal_number_\n   |                                                                                                       ^ help: add `;` here\n26 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmpmeqp0bb_.rs:2:35\n  |\n2 | fn check_integer(text: String) -> bool {\n  |    -------------                  ^^^^ expected `bool`, found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    let mut first = chars.next();\n    if first == Some('-') {\n        first = chars.next();\n    }\n    if first == Some('0') {\n        return chars.next().is_none();\n    }\n    if first.is_none() {\n        return false;\n    }\n    for c in chars {\n        if !c.is_digit(10) {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1665509797,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    text.parse::<i32>().is_ok()\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1665509796,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    let mut first = chars.next();\n    if first == Some('-') {\n        first = chars.next();\n    }\n    if first == None {\n        return false;\n    }\n    for c in chars {\n        if !c.is_digit(10) {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1665509796,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    let mut first = chars.next();\n    if first == Some('-') {\n        first = chars.next();\n    }\n    if first == None {\n        return false;\n    }\n    for c in chars {\n        if !c.is_digit(10) {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1665509796,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    let first_char = chars.next();\n    match first_char {\n        Some(c) => {\n            if c == '-' || c == '+' {\n                chars.all(|c| c.is_digit(10))\n            } else {\n                first_char.unwrap().is_digit(10) && chars.all(|c| c.is_digit(10))\n            }\n        }\n        None => false,\n    }\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1665509797,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    let mut is_integer = true;\n\n    if let Some(c) = chars.next() {\n        if c == '-' {\n            if let Some(c) = chars.next() {\n                if c.is_digit(10) {\n                    for c in chars {\n                        if !c.is_digit(10) {\n                            is_integer = false;\n                            break;\n                        }\n                    }\n                } else {\n                    is_integer = false;\n                }\n            } else {\n                is_integer = false;\n            }\n        } else if c.is_digit(10) {\n            for c in chars {\n                if !c.is_digit(10) {\n                    is_integer = false;\n                    break;\n                }\n            }\n        } else {\n            is_integer = false;\n        }\n    } else {\n        is_integer = false;\n    }\n\n    is_integer\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1665509797,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    let mut first_char = chars.next();\n    if first_char == Some('-') || first_char == Some('+') {\n        first_char = chars.next();\n    }\n    if first_char == None {\n        return false;\n    }\n    for c in chars {\n        if !c.is_digit(10) {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1665509797,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    if let Some(c) = chars.next() {\n        if c == '-' {\n            if let Some(c) = chars.next() {\n                if c.is_digit(10) {\n                    for c in chars {\n                        if !c.is_digit(10) {\n                            return false;\n                        }\n                    }\n                    return true;\n                }\n            }\n        } else if c.is_digit(10) {\n            for c in chars {\n                if !c.is_digit(10) {\n                    return false;\n                }\n            }\n            return true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1665509797,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    let mut is_integer = true;\n    let mut has_sign = false;\n    let mut has_digit = false;\n\n    while let Some(c) = chars.next() {\n        if c == '-' || c == '+' {\n            if has_sign || has_digit {\n                is_integer = false;\n                break;\n            } else {\n                has_sign = true;\n            }\n        } else if c.is_digit(10) {\n            has_digit = true;\n        } else {\n            is_integer = false;\n            break;\n        }\n    }\n\n    is_integer\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1665509797,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    let mut is_integer = true;\n\n    if let Some(c) = chars.next() {\n        if c == '-' {\n            if let Some(c) = chars.next() {\n                if !c.is_digit(10) {\n                    is_integer = false;\n                }\n            } else {\n                is_integer = false;\n            }\n        } else if !c.is_digit(10) {\n            is_integer = false;\n        }\n    } else {\n        is_integer = false;\n    }\n\n    while let Some(c) = chars.next() {\n        if !c.is_digit(10) {\n            is_integer = false;\n            break;\n        }\n    }\n\n    is_integer\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1665509797,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    let mut is_integer = true;\n    let mut is_negative = false;\n    let mut is_started = false;\n    while let Some(c) = chars.next() {\n        if c == '-' {\n            if is_started {\n                is_integer = false;\n                break;\n            }\n            is_negative = true;\n            is_started = true;\n        } else if c.is_digit(10) {\n            is_started = true;\n        } else {\n            is_integer = false;\n            break;\n        }\n    }\n    is_integer && is_started && !is_negative\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1665509797,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    let mut first = chars.next();\n    if first == Some('-') {\n        first = chars.next();\n    }\n    if first == None {\n        return false;\n    }\n    for c in chars {\n        if !c.is_digit(10) {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1665509796,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    let mut first = chars.next();\n    if first == Some('-') {\n        first = chars.next();\n    }\n    if first == None {\n        return false;\n    }\n    while let Some(c) = first {\n        if !c.is_digit(10) {\n            return false;\n        }\n        first = chars.next();\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1665509797,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    match chars.next() {\n        None => false,\n        Some(c) => {\n            if c == '-' {\n                match chars.next() {\n                    None => false,\n                    Some(c) => c.is_digit(10),\n                }\n            } else {\n                c.is_digit(10)\n            }\n        }\n    }\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1665509797,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    let mut has_sign = false;\n    let mut has_digit = false;\n    let mut has_dot = false;\n\n    while let Some(c) = chars.next() {\n        if c == '-' || c == '+' {\n            if has_sign || has_digit || has_dot {\n                return false;\n            }\n            has_sign = true;\n        } else if c == '.' {\n            if has_dot {\n                return false;\n            }\n            has_dot = true;\n        } else if c.is_digit(10) {\n            has_digit = true;\n        } else {\n            return false;\n        }\n    }\n    has_digit\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1666124042,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    let mut first_char = chars.next();\n    if first_char == Some('-') {\n        first_char = chars.next();\n    }\n    if first_char == None {\n        return false;\n    }\n    for c in chars {\n        if !c.is_digit(10) {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1666124041,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    let mut is_integer = true;\n    let mut is_first_char = true;\n    while let Some(c) = chars.next() {\n        if is_first_char {\n            if c == '-' {\n                is_first_char = false;\n                continue;\n            }\n        }\n        if !c.is_digit(10) {\n            is_integer = false;\n            break;\n        }\n    }\n    is_integer\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1666124042,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    match chars.next() {\n        Some(c) => {\n            if c == '-' {\n                match chars.next() {\n                    Some(c) => c.is_digit(10),\n                    None => false,\n                }\n            } else {\n                c.is_digit(10)\n            }\n        }\n        None => false,\n    }\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1666124041,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    let mut first_char = chars.next();\n\n    if first_char == Some('-') {\n        first_char = chars.next();\n    }\n\n    if first_char == None {\n        return false;\n    }\n\n    for c in chars {\n        if !c.is_digit(10) {\n            return false;\n        }\n    }\n\n    true\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1666124041,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    text.parse::<i32>().is_ok()\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1665509796,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    let first = chars.next();\n    let mut is_integer = false;\n\n    if let Some(c) = first {\n        if c == '-' || c == '+' {\n            is_integer = chars.all(|c| c.is_digit(10));\n        } else {\n            is_integer = chars.all(|c| c.is_digit(10));\n        }\n    }\n\n    is_integer\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    let mut first = chars.next();\n    if first == Some('-') || first == Some('+') {\n        first = chars.next();\n    }\n    if first == None {\n        return false;\n    }\n    for c in chars {\n        if !c.is_digit(10) {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1666124042,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    let mut first_char = chars.next();\n    if first_char == Some('-') || first_char == Some('+') {\n        first_char = chars.next();\n    }\n    if first_char == None {\n        return false;\n    }\n    for c in chars {\n        if !c.is_digit(10) {\n            return false;\n        }\n    }\n    return true;\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1666124041,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    if chars.next().unwrap() == '-' {\n        chars.next();\n    }\n    chars.all(|c| c.is_digit(10))\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1665509796,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    let mut first_char = chars.next();\n\n    if first_char == Some('-') {\n        first_char = chars.next();\n    }\n\n    if first_char == None {\n        return false;\n    }\n\n    for c in chars {\n        if !c.is_digit(10) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1666124042,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    text.parse::<i32>().is_ok()\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1665509796,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    let mut first = chars.next();\n    if first == Some('-') {\n        first = chars.next();\n    }\n    if first == None {\n        return false;\n    }\n    for c in chars {\n        if !c.is_digit(10) {\n            return false;\n        }\n    }\n    return true;\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1665509796,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    let mut first = chars.next();\n    if first == Some('-') {\n        first = chars.next();\n    }\n    if first == None {\n        return false;\n    }\n    for c in chars {\n        if !c.is_digit(10) {\n            return false;\n        }\n    }\n    return true;\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1665509796,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    let mut is_integer = false;\n    let mut is_negative = false;\n\n    match chars.next() {\n        Some('-') => is_negative = true,\n        Some(c) => {\n            if c.is_digit(10) {\n                is_integer = true;\n            }\n        }\n        None => return false,\n    }\n\n    for c in chars {\n        if !c.is_digit(10) {\n            is_integer = false;\n            break;\n        }\n    }\n\n    if is_integer && is_negative {\n        return false;\n    }\n\n    is_integer\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1666124042,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    let mut first_char = chars.next();\n    if first_char == Some('-') || first_char == Some('+') {\n        first_char = chars.next();\n    }\n    if first_char == None {\n        return false;\n    }\n    for c in chars {\n        if !c.is_digit(10) {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1665509797,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    let mut first_char = chars.next();\n    if first_char == Some('-') {\n        first_char = chars.next();\n    }\n    if first_char == None {\n        return false;\n    }\n    for c in chars {\n        if !c.is_digit(10) {\n            return false;\n        }\n    }\n    return true;\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1665509796,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    let mut is_integer = true;\n    let mut is_negative = false;\n    let mut is_positive = false;\n    let mut is_zero = false;\n\n    if chars.next() == Some('-') {\n        is_negative = true;\n    } else if chars.next() == Some('+') {\n        is_positive = true;\n    } else if chars.next() == Some('0') {\n        is_zero = true;\n    }\n\n    for c in chars {\n        if !c.is_digit(10) {\n            is_integer = false;\n            break;\n        }\n    }\n\n    if is_negative && is_positive {\n        is_integer = false;\n    }\n\n    if is_negative && is_zero {\n        is_integer = false;\n    }\n\n    if is_positive && is_zero {\n        is_integer = false;\n    }\n\n    is_integer\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1666124042,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    let mut first_char = chars.next();\n    if first_char == Some('-') {\n        first_char = chars.next();\n    }\n    if first_char == None {\n        return false;\n    }\n    for c in chars {\n        if !c.is_digit(10) {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1666124041,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    let mut first_char = chars.next();\n    if first_char == Some('-') {\n        first_char = chars.next();\n    }\n    if first_char == None {\n        return false;\n    }\n    for c in chars {\n        if !c.is_digit(10) {\n            return false;\n        }\n    }\n    return true;\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1665509796,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    let mut first_char = chars.next();\n    if first_char == Some('-') || first_char == Some('+') {\n        first_char = chars.next();\n    }\n    if first_char.is_none() {\n        return false;\n    }\n    for c in chars {\n        if !c.is_digit(10) {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    let mut is_integer = true;\n    let mut is_negative = false;\n\n    if let Some(c) = chars.next() {\n        if c == '-' {\n            is_negative = true;\n        } else if !c.is_digit(10) {\n            is_integer = false;\n        }\n    }\n\n    for c in chars {\n        if !c.is_digit(10) {\n            is_integer = false;\n            break;\n        }\n    }\n\n    if is_negative && text.len() == 1 {\n        is_integer = false;\n    }\n\n    is_integer\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1666124041,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    let first = chars.next();\n    if first.is_none() {\n        return false;\n    }\n    let first = first.unwrap();\n    if first == '-' || first == '+' {\n        let second = chars.next();\n        if second.is_none() {\n            return false;\n        }\n        let second = second.unwrap();\n        if !second.is_digit(10) {\n            return false;\n        }\n    } else if !first.is_digit(10) {\n        return false;\n    }\n    for c in chars {\n        if !c.is_digit(10) {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1666124042,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    let mut first = chars.next();\n    if first == Some('-') {\n        first = chars.next();\n    }\n    if first == Some('0') {\n        return chars.next().is_none();\n    }\n    if first.is_none() {\n        return false;\n    }\n    for c in chars {\n        if !c.is_digit(10) {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1665509797,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    text.parse::<i32>().is_ok()\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1665509796,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    let first = chars.next();\n    let mut is_integer = false;\n    match first {\n        Some(c) => {\n            if c == '-' {\n                is_integer = chars.all(|c| c.is_digit(10));\n            } else {\n                is_integer = chars.all(|c| c.is_digit(10));\n            }\n        }\n        None => is_integer = false,\n    }\n    is_integer\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    let mut is_integer = true;\n    if let Some(c) = chars.next() {\n        if c == '-' {\n            if let Some(c) = chars.next() {\n                if !c.is_digit(10) {\n                    is_integer = false;\n                }\n            }\n        } else if !c.is_digit(10) {\n            is_integer = false;\n        }\n    }\n    for c in chars {\n        if !c.is_digit(10) {\n            is_integer = false;\n        }\n    }\n    is_integer\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1666124042,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    let mut first = chars.next();\n    if first == Some('-') {\n        first = chars.next();\n    }\n    if first == None {\n        return false;\n    }\n    for c in chars {\n        if !c.is_digit(10) {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1665509796,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    text.parse::<i32>().is_ok()\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1665509796,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    if chars.next().unwrap() == '-' {\n        chars.next();\n    }\n    chars.all(|c| c.is_digit(10))\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1665509796,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    let mut first_char = chars.next();\n\n    if first_char == Some('-') {\n        first_char = chars.next();\n    }\n\n    if first_char == None {\n        return false;\n    }\n\n    for c in chars {\n        if !c.is_digit(10) {\n            return false;\n        }\n    }\n\n    true\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1666124041,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    let mut first = chars.next();\n    if first == Some('-') {\n        first = chars.next();\n    }\n    if first == Some('0') {\n        return chars.next().is_none();\n    }\n    let mut has_digit = false;\n    for c in chars {\n        if c < '0' || c > '9' {\n            return false;\n        }\n        has_digit = true;\n    }\n    has_digit\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmp3u1q7z0y.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    let mut has_sign = false;\n    let mut has_digit = false;\n    let mut has_dot = false;\n    let mut has_exp = false;\n    let mut has_exp_sign = false;\n    let mut has_exp_digit = false;\n\n    while let Some(c) = chars.next() {\n        match c {\n            '+' | '-' => {\n                if has_sign || has_digit || has_dot || has_exp {\n                    return false;\n                }\n                has_sign = true;\n            }\n            '.' => {\n                if has_dot || has_exp {\n                    return false;\n                }\n                has_dot = true;\n            }\n            'e' | 'E' => {\n                if has_exp {\n                    return false;\n                }\n                has_exp = true;\n            }\n            '0'..='9' => {\n                if has_exp {\n                    has_exp_digit = true;\n                } else {\n                    has_digit = true;\n                }\n            }\n            _ => return false,\n        }\n    }\n\n    has_digit || has_exp_digit\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1666124042,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    let mut is_integer = true;\n    let mut is_negative = false;\n\n    if let Some(c) = chars.next() {\n        if c == '-' {\n            is_negative = true;\n        } else if !c.is_digit(10) {\n            is_integer = false;\n        }\n    }\n\n    for c in chars {\n        if !c.is_digit(10) {\n            is_integer = false;\n            break;\n        }\n    }\n\n    if is_integer && is_negative {\n        is_integer = false;\n    }\n\n    is_integer\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1666124041,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    let mut first = chars.next();\n    if first == Some('-') {\n        first = chars.next();\n    }\n    first.map_or(false, |c| c.is_digit(10)) && chars.all(|c| c.is_digit(10))\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    let mut first = chars.next();\n    if first == Some('-') || first == Some('+') {\n        first = chars.next();\n    }\n    if first == None {\n        return false;\n    }\n    for c in chars {\n        if !c.is_digit(10) {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1666124042,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    let mut first = chars.next();\n    let mut is_integer = false;\n\n    if first.is_some() {\n        if first.unwrap() == '-' {\n            first = chars.next();\n        }\n    }\n\n    if first.is_some() {\n        is_integer = first.unwrap().is_digit(10);\n    }\n\n    while is_integer && chars.next().is_some() {\n        is_integer = chars.next().unwrap().is_digit(10);\n    }\n\n    is_integer\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    let mut is_integer = true;\n    let mut is_first = true;\n    while let Some(c) = chars.next() {\n        if is_first {\n            if c == '-' || c == '+' {\n                is_first = false;\n                continue;\n            }\n        }\n        if !c.is_digit(10) {\n            is_integer = false;\n            break;\n        }\n    }\n    is_integer\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1666124042,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    let mut is_integer = true;\n    let mut is_first_char = true;\n    let mut is_negative = false;\n    while let Some(c) = chars.next() {\n        if is_first_char {\n            if c == '-' {\n                is_negative = true;\n            } else if !c.is_digit(10) {\n                is_integer = false;\n                break;\n            }\n            is_first_char = false;\n        } else {\n            if !c.is_digit(10) {\n                is_integer = false;\n                break;\n            }\n        }\n    }\n    if is_integer && is_negative {\n        is_integer = false;\n    }\n    is_integer\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1666124042,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    let mut is_integer = true;\n    let mut is_negative = false;\n\n    if let Some(c) = chars.next() {\n        if c == '-' {\n            is_negative = true;\n        } else if !c.is_digit(10) {\n            is_integer = false;\n        }\n    }\n\n    for c in chars {\n        if !c.is_digit(10) {\n            is_integer = false;\n            break;\n        }\n    }\n\n    is_integer && !is_negative\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1666124041,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    text.parse::<i32>().is_ok()\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1665509796,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    let mut first = chars.next();\n    if first == Some('-') {\n        first = chars.next();\n    }\n    if first.is_none() {\n        return false;\n    }\n    for c in chars {\n        if !c.is_digit(10) {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1666124041,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    let mut is_integer = true;\n\n    if let Some(first_char) = chars.next() {\n        if first_char == '-' {\n            if let Some(second_char) = chars.next() {\n                if !second_char.is_digit(10) {\n                    is_integer = false;\n                }\n            } else {\n                is_integer = false;\n            }\n        } else if !first_char.is_digit(10) {\n            is_integer = false;\n        }\n    } else {\n        is_integer = false;\n    }\n\n    for c in chars {\n        if !c.is_digit(10) {\n            is_integer = false;\n        }\n    }\n\n    is_integer\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    let mut first_char = chars.next();\n    if first_char == Some('-') {\n        first_char = chars.next();\n    }\n    if first_char == None {\n        return false;\n    }\n    for c in chars {\n        if !c.is_digit(10) {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1666124041,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    let mut first = chars.next();\n    if first == Some('-') {\n        first = chars.next();\n    }\n    match first {\n        Some(c) => c.is_digit(10),\n        None => false,\n    }\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1666124041,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    let mut first_char = chars.next();\n    if first_char == Some('-') || first_char == Some('+') {\n        first_char = chars.next();\n    }\n    if first_char.is_none() {\n        return false;\n    }\n    for c in chars {\n        if !c.is_digit(10) {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    let mut first = true;\n    while let Some(c) = chars.next() {\n        if first {\n            if c == '-' {\n                first = false;\n                continue;\n            }\n        }\n        if c < '0' || c > '9' {\n            return false;\n        }\n        first = false;\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    match chars.next() {\n        Some(c) => {\n            if c == '-' {\n                match chars.next() {\n                    Some(c) => c.is_digit(10),\n                    None => false,\n                }\n            } else {\n                c.is_digit(10)\n            }\n        }\n        None => false,\n    }\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1666124041,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    let mut has_sign = false;\n    let mut has_digit = false;\n    let mut has_dot = false;\n    let mut has_exp = false;\n    let mut has_exp_sign = false;\n    let mut has_exp_digit = false;\n\n    while let Some(c) = chars.next() {\n        match c {\n            '+' | '-' => {\n                if has_sign || has_digit || has_exp {\n                    return false;\n                }\n                has_sign = true;\n            }\n            '.' => {\n                if has_dot || has_exp {\n                    return false;\n                }\n                has_dot = true;\n            }\n            'e' | 'E' => {\n                if has_exp {\n                    return false;\n                }\n                has_exp = true;\n            }\n            '0'..='9' => {\n                if has_exp {\n                    has_exp_digit = true;\n                } else {\n                    has_digit = true;\n                }\n            }\n            _ => return false,\n        }\n    }\n\n    has_digit && (has_exp ? has_exp_digit : true)\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1666124042,
      "stdout": "",
      "stderr": "error: expected identifier, found keyword `true`\n  --> /tmp/tmpqx2frees.rs:42:45\n   |\n42 |     has_digit && (has_exp ? has_exp_digit : true)\n   |                                             ^^^^ expected identifier, found keyword\n   |\nhelp: escape `true` to use it as an identifier\n   |\n42 |     has_digit && (has_exp ? has_exp_digit : r#true)\n   |                                             ++\n\nerror: expected one of `)`, `,`, `.`, `?`, or an operator, found `has_exp_digit`\n  --> /tmp/tmpqx2frees.rs:42:29\n   |\n42 |     has_digit && (has_exp ? has_exp_digit : true)\n   |                             ^^^^^^^^^^^^^ expected one of `)`, `,`, `.`, `?`, or an operator\n\nerror: expected one of `!`, `&&`, `&`, `(`, `)`, `*`, `...`, `.`, `;`, `<`, `?`, `[`, `_`, `async`, `const`, `dyn`, `extern`, `fn`, `for`, `impl`, `unsafe`, `}`, `~`, an operator, lifetime, or path, found keyword `true`\n  --> /tmp/tmpqx2frees.rs:42:45\n   |\n42 |     has_digit && (has_exp ? has_exp_digit : true)\n   |                                             ^^^^ expected one of 26 possible tokens\n\nerror: aborting due to 3 previous errors\n\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    let mut is_integer = true;\n    if let Some(c) = chars.next() {\n        if c == '-' {\n            if let Some(c) = chars.next() {\n                if !c.is_digit(10) {\n                    is_integer = false;\n                }\n            } else {\n                is_integer = false;\n            }\n        } else if !c.is_digit(10) {\n            is_integer = false;\n        }\n    } else {\n        is_integer = false;\n    }\n    for c in chars {\n        if !c.is_digit(10) {\n            is_integer = false;\n        }\n    }\n    is_integer\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    let mut first = chars.next();\n    if first == Some('-') {\n        first = chars.next();\n    }\n    if first == None {\n        return false;\n    }\n    for c in chars {\n        if !c.is_digit(10) {\n            return false;\n        }\n    }\n    return true;\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1665509796,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    let mut first_char = chars.next();\n    if first_char == Some('-') {\n        first_char = chars.next();\n    }\n    if first_char == None {\n        return false;\n    }\n    for c in chars {\n        if !c.is_digit(10) {\n            return false;\n        }\n    }\n    return true;\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1665509796,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    let first = chars.next();\n    if first.is_none() {\n        return false;\n    }\n    let first = first.unwrap();\n    if first == '-' || first == '+' {\n        let second = chars.next();\n        if second.is_none() {\n            return false;\n        }\n        let second = second.unwrap();\n        if !second.is_digit(10) {\n            return false;\n        }\n    } else if !first.is_digit(10) {\n        return false;\n    }\n    for c in chars {\n        if !c.is_digit(10) {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1666124042,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    text.parse::<i32>().is_ok()\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1665509796,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    let mut first = chars.next();\n    if first == Some('-') {\n        first = chars.next();\n    }\n    if first.is_none() {\n        return false;\n    }\n    for c in chars {\n        if !c.is_digit(10) {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1666124041,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    let mut is_integer = true;\n    let mut is_negative = false;\n\n    if let Some(c) = chars.next() {\n        if c == '-' {\n            is_negative = true;\n        } else if !c.is_digit(10) {\n            is_integer = false;\n        }\n    }\n\n    for c in chars {\n        if !c.is_digit(10) {\n            is_integer = false;\n            break;\n        }\n    }\n\n    is_integer && (is_negative || text.len() > 1)\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1666124042,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmpdokvssmx.rs:28:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    text.parse::<i32>().is_ok()\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1665509796,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    text.parse::<i32>().is_ok()\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1665509796,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    let mut is_integer = true;\n    let mut is_first_char = true;\n\n    while let Some(c) = chars.next() {\n        if is_first_char {\n            if c == '-' {\n                is_first_char = false;\n                continue;\n            }\n        }\n\n        if !c.is_digit(10) {\n            is_integer = false;\n            break;\n        }\n    }\n\n    is_integer\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    text.parse::<i32>().is_ok()\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1665509796,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    let mut has_sign = false;\n    let mut has_digit = false;\n\n    if let Some(c) = chars.next() {\n        if c == '+' || c == '-' {\n            has_sign = true;\n        } else if !c.is_digit(10) {\n            return false;\n        } else {\n            has_digit = true;\n        }\n    }\n\n    for c in chars {\n        if !c.is_digit(10) {\n            return false;\n        } else {\n            has_digit = true;\n        }\n    }\n\n    has_digit\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    let mut is_integer = true;\n    let mut is_first_char = true;\n    let mut is_negative = false;\n\n    while let Some(c) = chars.next() {\n        if is_first_char {\n            if c == '-' {\n                is_negative = true;\n            } else if !c.is_digit(10) {\n                is_integer = false;\n                break;\n            }\n            is_first_char = false;\n        } else if !c.is_digit(10) {\n            is_integer = false;\n            break;\n        }\n    }\n\n    if is_negative && text.len() == 1 {\n        is_integer = false;\n    }\n\n    is_integer\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    let mut is_integer = true;\n    let mut is_first_char = true;\n\n    while let Some(c) = chars.next() {\n        if is_first_char {\n            if c == '-' {\n                is_first_char = false;\n                continue;\n            }\n        }\n\n        if c < '0' || c > '9' {\n            is_integer = false;\n            break;\n        }\n    }\n\n    is_integer\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    let mut is_integer = false;\n    let mut is_negative = false;\n\n    // Check if the first character is a '-'\n    if let Some(c) = chars.next() {\n        if c == '-' {\n            is_negative = true;\n        }\n    }\n\n    // Check if the rest of the characters are digits\n    for c in chars {\n        if c.is_digit(10) {\n            is_integer = true;\n        } else {\n            is_integer = false;\n            break;\n        }\n    }\n\n    // If the string is negative, it can't be zero\n    if is_negative && text == \"-0\" {\n        is_integer = false;\n    }\n\n    is_integer\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmpjdyahqim.rs:35:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    let mut first = chars.next();\n    if first == Some('-') {\n        first = chars.next();\n    }\n    if first == None {\n        return false;\n    }\n    for c in chars {\n        if !c.is_digit(10) {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1665509796,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    let mut first = chars.next();\n    if first == Some('-') {\n        first = chars.next();\n    }\n    first.map_or(false, |c| c.is_digit(10)) && chars.all(|c| c.is_digit(10))\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    if chars.next().unwrap() == '-' {\n        chars.next();\n    }\n    chars.all(|c| c.is_digit(10))\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1665509796,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    match chars.next() {\n        None => false,\n        Some(c) => {\n            if c == '-' {\n                match chars.next() {\n                    None => false,\n                    Some(c) => c.is_digit(10)\n                }\n            } else {\n                c.is_digit(10)\n            }\n        }\n    }\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    let first = chars.next();\n    if first.is_none() {\n        return false;\n    }\n    let first = first.unwrap();\n    if first == '-' || first == '+' {\n        if chars.next().is_none() {\n            return false;\n        }\n    }\n    for c in chars {\n        if !c.is_digit(10) {\n            return false;\n        }\n    }\n    return true;\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    let mut first = chars.next();\n    if first == Some('-') {\n        first = chars.next();\n    }\n    if first == None {\n        return false;\n    }\n    for c in chars {\n        if !c.is_digit(10) {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1665509796,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    let mut first = chars.next();\n    if first == Some('-') {\n        first = chars.next();\n    }\n    if first == None {\n        return false;\n    }\n    for c in chars {\n        if !c.is_digit(10) {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1665509796,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    let mut first = chars.next();\n    if first == Some('-') {\n        first = chars.next();\n    }\n    if first == None {\n        return false;\n    }\n    for c in chars {\n        if !c.is_digit(10) {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1665509796,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    text.parse::<i32>().is_ok()\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1665509796,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    let mut first = chars.next();\n    if first == Some('-') {\n        first = chars.next();\n    }\n    if first == None {\n        return false;\n    }\n    for c in chars {\n        if !c.is_digit(10) {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1665509796,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    let mut first = chars.next();\n    if first == Some('-') {\n        first = chars.next();\n    }\n    if first == None {\n        return false;\n    }\n    for c in chars {\n        if !c.is_digit(10) {\n            return false;\n        }\n    }\n    return true;\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1665509796,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    let mut is_integer = true;\n    let mut is_first_digit = true;\n    let mut is_negative = false;\n\n    while let Some(c) = chars.next() {\n        if is_first_digit {\n            if c == '-' {\n                is_negative = true;\n            } else if !c.is_digit(10) {\n                is_integer = false;\n                break;\n            }\n            is_first_digit = false;\n        } else if !c.is_digit(10) {\n            is_integer = false;\n            break;\n        }\n    }\n\n    if is_integer && is_negative {\n        is_integer = false;\n    }\n\n    is_integer\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    let mut first_char = chars.next();\n    if first_char == Some('-') || first_char == Some('+') {\n        first_char = chars.next();\n    }\n    if first_char == None {\n        return false;\n    }\n    for c in chars {\n        if !c.is_digit(10) {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1665509797,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    let mut has_sign = false;\n    let mut has_digit = false;\n    let mut has_dot = false;\n    let mut has_exp = false;\n    let mut has_exp_sign = false;\n    let mut has_exp_digit = false;\n\n    while let Some(c) = chars.next() {\n        match c {\n            '+' | '-' => {\n                if has_sign {\n                    return false;\n                }\n                if has_digit || has_dot || has_exp {\n                    return false;\n                }\n                has_sign = true;\n            }\n            '0'..='9' => {\n                if has_exp {\n                    has_exp_digit = true;\n                } else {\n                    has_digit = true;\n                }\n            }\n            '.' => {\n                if has_dot || has_exp {\n                    return false;\n                }\n                has_dot = true;\n            }\n            'e' | 'E' => {\n                if has_exp {\n                    return false;\n                }\n                has_exp = true;\n            }\n            _ => return false,\n        }\n    }\n\n    if has_exp {\n        has_exp_digit\n    } else {\n        has_digit\n    }\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    let mut first_char = chars.next();\n    if first_char == Some('-') {\n        first_char = chars.next();\n    }\n    if first_char == None {\n        return false;\n    }\n    for c in chars {\n        if !c.is_digit(10) {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1666124041,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    let mut first_char = chars.next();\n    if first_char == Some('-') || first_char == Some('+') {\n        first_char = chars.next();\n    }\n    if first_char == None {\n        return false;\n    }\n    for c in chars {\n        if !c.is_digit(10) {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1665509797,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    let mut is_integer = true;\n    let mut is_negative = false;\n\n    if chars.next() == Some('-') {\n        is_negative = true;\n    }\n\n    while let Some(c) = chars.next() {\n        if !c.is_digit(10) {\n            is_integer = false;\n            break;\n        }\n    }\n\n    if is_integer && is_negative {\n        return false;\n    }\n\n    is_integer\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    let mut is_integer = false;\n    if let Some(c) = chars.next() {\n        if c == '-' {\n            is_integer = true;\n        } else if c.is_digit(10) {\n            is_integer = true;\n        }\n    }\n    for c in chars {\n        if !c.is_digit(10) {\n            is_integer = false;\n            break;\n        }\n    }\n    is_integer\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    let mut first_char = chars.next();\n    if first_char == Some('-') || first_char == Some('+') {\n        first_char = chars.next();\n    }\n    if first_char == None {\n        return false;\n    }\n    for c in chars {\n        if !c.is_digit(10) {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1665509797,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    let mut has_sign = false;\n    let mut has_digit = false;\n\n    while let Some(c) = chars.next() {\n        if c == '+' || c == '-' {\n            if has_sign || has_digit {\n                return false;\n            }\n            has_sign = true;\n        } else if c.is_digit(10) {\n            has_digit = true;\n        } else {\n            return false;\n        }\n    }\n\n    has_digit\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    let mut first_char = chars.next();\n    let mut is_integer = true;\n\n    if first_char == Some('-') {\n        first_char = chars.next();\n    }\n\n    if first_char == None {\n        is_integer = false;\n    }\n\n    while is_integer && first_char != None {\n        if !first_char.unwrap().is_digit(10) {\n            is_integer = false;\n        }\n        first_char = chars.next();\n    }\n\n    is_integer\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    let mut first_char = chars.next();\n    if first_char == Some('-') {\n        first_char = chars.next();\n    }\n    if first_char == None {\n        return false;\n    }\n    for c in chars {\n        if !c.is_digit(10) {\n            return false;\n        }\n    }\n    return true;\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1665509796,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    let mut first = true;\n    let mut has_sign = false;\n    let mut has_digit = false;\n    while let Some(c) = chars.next() {\n        if first {\n            if c == '+' || c == '-' {\n                has_sign = true;\n            } else if !c.is_digit(10) {\n                return false;\n            } else {\n                has_digit = true;\n            }\n            first = false;\n        } else {\n            if !c.is_digit(10) {\n                return false;\n            } else {\n                has_digit = true;\n            }\n        }\n    }\n    has_digit\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    let mut first = chars.next();\n    if first == Some('-') {\n        first = chars.next();\n    }\n    if first == None {\n        return false;\n    }\n    for c in chars {\n        if !c.is_digit(10) {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1665509796,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    text.parse::<i32>().is_ok()\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1665509796,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    match chars.next() {\n        Some(c) => {\n            if c == '-' {\n                chars.all(|c| c.is_digit(10))\n            } else {\n                chars.all(|c| c.is_digit(10))\n            }\n        }\n        None => false,\n    }\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    let first = chars.next();\n    let mut is_integer = true;\n    match first {\n        Some(c) => {\n            if !c.is_digit(10) {\n                is_integer = false;\n            }\n        }\n        None => is_integer = false,\n    }\n\n    for c in chars {\n        if !c.is_digit(10) {\n            is_integer = false;\n            break;\n        }\n    }\n\n    is_integer\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    text.parse::<i32>().is_ok()\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1665509796,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    match chars.next() {\n        Some(c) => {\n            if c == '-' {\n                match chars.next() {\n                    Some(c) => {\n                        if c.is_digit(10) {\n                            for c in chars {\n                                if !c.is_digit(10) {\n                                    return false;\n                                }\n                            }\n                            return true;\n                        } else {\n                            return false;\n                        }\n                    }\n                    None => return false,\n                }\n            } else if c.is_digit(10) {\n                for c in chars {\n                    if !c.is_digit(10) {\n                        return false;\n                    }\n                }\n                return true;\n            } else {\n                return false;\n            }\n        }\n        None => return false,\n    }\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    let mut first = chars.next();\n    if first == Some('-') {\n        first = chars.next();\n    }\n    if first == None {\n        return false;\n    }\n    let mut is_integer = true;\n    for c in chars {\n        if !c.is_digit(10) {\n            is_integer = false;\n            break;\n        }\n    }\n    is_integer\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    let mut first = chars.next().unwrap();\n    if first == '-' || first == '+' {\n        first = chars.next().unwrap();\n    }\n    if first.is_digit(10) {\n        for c in chars {\n            if !c.is_digit(10) {\n                return false;\n            }\n        }\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    text.parse::<i32>().is_ok()\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1665509796,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    let mut first_char = chars.next();\n    if first_char == Some('-') {\n        first_char = chars.next();\n    }\n    if first_char == None {\n        return false;\n    }\n    for c in chars {\n        if !c.is_digit(10) {\n            return false;\n        }\n    }\n    return true;\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1665509796,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    let mut has_sign = false;\n    let mut has_digit = false;\n\n    match chars.next() {\n        Some(c) => {\n            if c == '+' || c == '-' {\n                has_sign = true;\n            } else if !c.is_digit(10) {\n                return false;\n            } else {\n                has_digit = true;\n            }\n        }\n        None => return false,\n    }\n\n    for c in chars {\n        if !c.is_digit(10) {\n            return false;\n        } else {\n            has_digit = true;\n        }\n    }\n\n    has_sign || has_digit\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    text.parse::<i32>().is_ok()\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1665509796,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    text.parse::<i32>().is_ok()\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1665509796,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    let first = chars.next();\n    if first == Some('-') {\n        chars.next();\n    }\n    chars.all(|c| c.is_digit(10))\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1666124041,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    let mut first = chars.next();\n    if first == Some('-') {\n        first = chars.next();\n    }\n    if first == None {\n        return false;\n    }\n    for c in chars {\n        if !c.is_digit(10) {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1665509796,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    let mut first = chars.next();\n    if first == Some('-') {\n        first = chars.next();\n    }\n    if first == None {\n        return false;\n    }\n    for c in chars {\n        if !c.is_digit(10) {\n            return false;\n        }\n    }\n    return true;\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1665509796,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    let mut is_integer = false;\n    let mut is_negative = false;\n    let mut is_positive = false;\n    let mut is_decimal = false;\n\n    while let Some(c) = chars.next() {\n        match c {\n            '-' => {\n                if is_negative || is_positive {\n                    return false;\n                }\n                is_negative = true;\n            }\n            '+' => {\n                if is_negative || is_positive {\n                    return false;\n                }\n                is_positive = true;\n            }\n            '.' => {\n                if is_decimal {\n                    return false;\n                }\n                is_decimal = true;\n            }\n            '0'..='9' => {\n                is_integer = true;\n            }\n            _ => {\n                return false;\n            }\n        }\n    }\n\n    is_integer\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    let mut first_char = chars.next();\n    if first_char == Some('-') || first_char == Some('+') {\n        first_char = chars.next();\n    }\n    if first_char == None {\n        return false;\n    }\n    for c in chars {\n        if !c.is_digit(10) {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1665509797,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    let mut is_integer = true;\n    let mut is_negative = false;\n    let mut is_positive = false;\n    let mut is_first_char = true;\n    let mut is_first_digit = true;\n\n    while let Some(c) = chars.next() {\n        if is_first_char {\n            if c == '-' {\n                is_negative = true;\n                is_first_char = false;\n            } else if c == '+' {\n                is_positive = true;\n                is_first_char = false;\n            } else if c.is_digit(10) {\n                is_first_char = false;\n            } else {\n                is_integer = false;\n                break;\n            }\n        } else if is_first_digit {\n            if c.is_digit(10) {\n                is_first_digit = false;\n            } else {\n                is_integer = false;\n                break;\n            }\n        } else {\n            if c.is_digit(10) {\n                continue;\n            } else {\n                is_integer = false;\n                break;\n            }\n        }\n    }\n\n    if is_negative && is_positive {\n        is_integer = false;\n    }\n\n    is_integer\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    let mut first = chars.next();\n    if first == Some('-') || first == Some('+') {\n        first = chars.next();\n    }\n    if first == None {\n        return false;\n    }\n    for c in chars {\n        if !c.is_digit(10) {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1666124042,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    let first_char = chars.next();\n    match first_char {\n        Some(c) => {\n            if c == '-' || c == '+' {\n                chars.all(|c| c.is_digit(10))\n            } else {\n                chars.all(|c| c.is_digit(10))\n            }\n        }\n        None => false,\n    }\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    let mut first = true;\n    while let Some(c) = chars.next() {\n        if first {\n            if c == '-' || c == '+' {\n                first = false;\n            } else if !c.is_digit(10) {\n                return false;\n            }\n        } else {\n            if !c.is_digit(10) {\n                return false;\n            }\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    let mut is_integer = true;\n    let mut is_negative = false;\n\n    if let Some(c) = chars.next() {\n        if c == '-' {\n            is_negative = true;\n        } else if !c.is_digit(10) {\n            is_integer = false;\n        }\n    }\n\n    for c in chars {\n        if !c.is_digit(10) {\n            is_integer = false;\n            break;\n        }\n    }\n\n    if is_integer {\n        if is_negative {\n            if text.len() == 1 {\n                is_integer = false;\n            }\n        } else {\n            if text.len() == 0 {\n                is_integer = false;\n            }\n        }\n    }\n\n    is_integer\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    text.parse::<i32>().is_ok()\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1665509796,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    let mut first_char = chars.next();\n    if first_char == Some('-') {\n        first_char = chars.next();\n    }\n    if first_char == None {\n        return false;\n    }\n    for c in chars {\n        if !c.is_digit(10) {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1666124041,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    let mut first = chars.next();\n    let mut is_integer = true;\n    let mut is_negative = false;\n\n    if first == Some('-') {\n        is_negative = true;\n        first = chars.next();\n    }\n\n    if first == Some('0') {\n        first = chars.next();\n    }\n\n    while let Some(c) = first {\n        if c.is_digit(10) {\n            first = chars.next();\n        } else {\n            is_integer = false;\n            break;\n        }\n    }\n\n    if is_integer && is_negative {\n        is_integer = false;\n    }\n\n    is_integer\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    let mut first = chars.next();\n    if first == Some('-') {\n        first = chars.next();\n    }\n    if first == None {\n        return false;\n    }\n    for c in chars {\n        if !c.is_digit(10) {\n            return false;\n        }\n    }\n    return true;\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1665509796,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    let mut first_char = chars.next();\n    if first_char == Some('-') {\n        first_char = chars.next();\n    }\n    if first_char == Some('0') {\n        return chars.next().is_none();\n    }\n    if first_char.is_none() {\n        return false;\n    }\n    let mut has_digit = false;\n    for c in chars {\n        if !c.is_digit(10) {\n            return false;\n        }\n        has_digit = true;\n    }\n    has_digit\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmpt5wv0gfs.rs:27:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    let first = chars.next();\n    let mut is_integer = false;\n    match first {\n        Some(c) => {\n            if c == '-' || c == '+' {\n                is_integer = true;\n            } else if c.is_digit(10) {\n                is_integer = true;\n            }\n        }\n        None => return false,\n    }\n    for c in chars {\n        if !c.is_digit(10) {\n            is_integer = false;\n            break;\n        }\n    }\n    is_integer\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1666124042,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    let first = chars.next();\n    if first == Some('-') {\n        return chars.all(|c| c.is_digit(10));\n    }\n    chars.all(|c| c.is_digit(10))\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    text.parse::<i32>().is_ok()\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1665509796,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    let mut is_integer = true;\n    let mut is_first_digit = true;\n    let mut is_negative = false;\n    while let Some(c) = chars.next() {\n        if is_first_digit {\n            if c == '-' {\n                is_negative = true;\n                is_first_digit = false;\n            } else if c.is_digit(10) {\n                is_first_digit = false;\n            } else {\n                is_integer = false;\n                break;\n            }\n        } else {\n            if !c.is_digit(10) {\n                is_integer = false;\n                break;\n            }\n        }\n    }\n    if is_negative && is_first_digit {\n        is_integer = false;\n    }\n    is_integer\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    let mut first = chars.next();\n    if first == Some('+') || first == Some('-') {\n        first = chars.next();\n    }\n    if first == None {\n        return false;\n    }\n    while let Some(c) = first {\n        if !c.is_digit(10) {\n            return false;\n        }\n        first = chars.next();\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    let mut is_integer = true;\n    let mut is_first_char = true;\n\n    while let Some(c) = chars.next() {\n        if is_first_char {\n            if c == '-' {\n                is_first_char = false;\n                continue;\n            }\n        }\n\n        if !c.is_digit(10) {\n            is_integer = false;\n            break;\n        }\n    }\n\n    is_integer\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    let mut first_char = chars.next();\n    if first_char == Some('-') {\n        first_char = chars.next();\n    }\n    if first_char == None {\n        return false;\n    }\n    for c in chars {\n        if !c.is_digit(10) {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1666124041,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    text.parse::<i32>().is_ok()\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1665509796,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    let mut first_char = chars.next();\n    if first_char == Some('-') {\n        first_char = chars.next();\n    }\n    if first_char == None {\n        return false;\n    }\n    for c in chars {\n        if !c.is_digit(10) {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1666124041,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    text.parse::<i32>().is_ok()\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1665509796,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    let first = chars.next();\n    match first {\n        Some(c) => {\n            if c == '-' {\n                chars.all(|c| c.is_digit(10))\n            } else {\n                chars.all(|c| c.is_digit(10)) && first.unwrap().is_digit(10)\n            }\n        }\n        None => false,\n    }\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    let mut is_integer = true;\n    let mut has_digit = false;\n    let mut has_sign = false;\n\n    while let Some(c) = chars.next() {\n        match c {\n            '0'..='9' => has_digit = true,\n            '+' | '-' => {\n                if has_sign || has_digit {\n                    is_integer = false;\n                    break;\n                }\n                has_sign = true;\n            }\n            _ => {\n                is_integer = false;\n                break;\n            }\n        }\n    }\n\n    is_integer && has_digit\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    let mut first = chars.next();\n    if first == Some('-') {\n        first = chars.next();\n    }\n    if first == Some('0') {\n        return chars.next().is_none();\n    }\n    if first.is_none() {\n        return false;\n    }\n    for c in chars {\n        if !c.is_digit(10) {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1665509797,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    let mut is_integer = false;\n    let mut is_negative = false;\n\n    if let Some(c) = chars.next() {\n        if c == '-' {\n            is_negative = true;\n        } else if c.is_digit(10) {\n            is_integer = true;\n        } else {\n            return false;\n        }\n    }\n\n    for c in chars {\n        if !c.is_digit(10) {\n            return false;\n        }\n    }\n\n    if is_negative {\n        is_integer\n    } else {\n        true\n    }\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    let mut is_integer = true;\n    let mut is_negative = false;\n\n    if let Some(c) = chars.next() {\n        if c == '-' {\n            is_negative = true;\n        } else if !c.is_digit(10) {\n            is_integer = false;\n        }\n    }\n\n    for c in chars {\n        if !c.is_digit(10) {\n            is_integer = false;\n        }\n    }\n\n    is_integer && !is_negative\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    text.parse::<i32>().is_ok()\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1665509796,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    let mut first_char = chars.next();\n    if first_char == Some('-') {\n        first_char = chars.next();\n    }\n    if first_char == None {\n        return false;\n    }\n    for c in chars {\n        if !c.is_numeric() {\n            return false;\n        }\n    }\n    return true;\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    if chars.next().unwrap() == '-' {\n        chars.next();\n    }\n    chars.all(|c| c.is_digit(10))\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1665509796,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    let mut has_sign = false;\n    let mut has_digit = false;\n\n    match chars.next() {\n        Some(c) => {\n            if c == '+' || c == '-' {\n                has_sign = true;\n            } else if !c.is_digit(10) {\n                return false;\n            } else {\n                has_digit = true;\n            }\n        }\n        None => return false,\n    }\n\n    for c in chars {\n        if !c.is_digit(10) {\n            return false;\n        } else {\n            has_digit = true;\n        }\n    }\n\n    has_sign || has_digit\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    let mut first = chars.next();\n    if first == Some('-') {\n        first = chars.next();\n    }\n    if first == None {\n        return false;\n    }\n    for c in chars {\n        if !c.is_digit(10) {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1665509796,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    let mut is_integer = true;\n    let mut is_negative = false;\n    let mut is_positive = false;\n\n    if chars.next() == Some('-') {\n        is_negative = true;\n    } else if chars.next() == Some('+') {\n        is_positive = true;\n    }\n\n    if is_negative && is_positive {\n        is_integer = false;\n    }\n\n    for c in chars {\n        if !c.is_digit(10) {\n            is_integer = false;\n            break;\n        }\n    }\n\n    is_integer\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    let mut first_char = chars.next();\n    if first_char == Some('-') || first_char == Some('+') {\n        first_char = chars.next();\n    }\n    if first_char == None {\n        return false;\n    }\n    for c in chars {\n        if !c.is_digit(10) {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1665509797,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    if chars.next().unwrap() == '-' {\n        chars.next();\n    }\n    chars.all(|c| c.is_digit(10))\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1665509796,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    if chars.next().unwrap() == '-' {\n        chars.next();\n    }\n    chars.all(|c| c.is_digit(10))\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1665509796,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    let mut first = chars.next();\n    if first == Some('-') {\n        first = chars.next();\n    }\n    if first == None {\n        return false;\n    }\n    for c in chars {\n        if !c.is_digit(10) {\n            return false;\n        }\n    }\n    return true;\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1665509796,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    text.parse::<i32>().is_ok()\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1665509796,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    let mut is_integer = true;\n    let mut is_first = true;\n\n    while let Some(c) = chars.next() {\n        if is_first {\n            if c == '-' {\n                is_first = false;\n            } else if c.is_digit(10) {\n                is_first = false;\n            } else {\n                is_integer = false;\n                break;\n            }\n        } else {\n            if !c.is_digit(10) {\n                is_integer = false;\n                break;\n            }\n        }\n    }\n\n    is_integer\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    let mut first_char = chars.next();\n    if first_char == Some('-') || first_char == Some('+') {\n        first_char = chars.next();\n    }\n    if first_char == None {\n        return false;\n    }\n    let mut has_digit = false;\n    for c in chars {\n        if c.is_digit(10) {\n            has_digit = true;\n        } else {\n            return false;\n        }\n    }\n    return has_digit;\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmpf8ctp41h.rs:25:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    let mut has_digit = false;\n    match chars.next() {\n        Some(c) => {\n            if c == '-' || c == '+' {\n                match chars.next() {\n                    Some(c) => {\n                        if c.is_digit(10) {\n                            has_digit = true;\n                        } else {\n                            return false;\n                        }\n                    }\n                    None => return false,\n                }\n            } else if c.is_digit(10) {\n                has_digit = true;\n            } else {\n                return false;\n            }\n        }\n        None => return false,\n    }\n    for c in chars {\n        if !c.is_digit(10) {\n            return false;\n        }\n    }\n    has_digit\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    let mut first = chars.next();\n    if first == Some('-') {\n        first = chars.next();\n    }\n    if first == None {\n        return false;\n    }\n    for c in chars {\n        if !c.is_digit(10) {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1665509796,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    let first = chars.next();\n    if first == Some('-') || first == Some('+') {\n        chars.next();\n    }\n    chars.all(|c| c.is_digit(10))\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1666124042,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    let mut first = chars.next();\n    if first == Some('-') {\n        first = chars.next();\n    }\n    if first == None {\n        return false;\n    }\n    for c in chars {\n        if !c.is_digit(10) {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1665509796,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    let mut has_sign = false;\n    let mut has_digit = false;\n    let mut has_dot = false;\n    let mut has_exp = false;\n    let mut has_exp_sign = false;\n    let mut has_exp_digit = false;\n    while let Some(c) = chars.next() {\n        match c {\n            '+' | '-' => {\n                if has_sign || has_digit || has_dot || has_exp {\n                    return false;\n                }\n                has_sign = true;\n            }\n            '0'..='9' => {\n                if has_exp {\n                    has_exp_digit = true;\n                } else {\n                    has_digit = true;\n                }\n            }\n            '.' => {\n                if has_dot || has_exp {\n                    return false;\n                }\n                has_dot = true;\n            }\n            'e' | 'E' => {\n                if has_exp || !has_digit {\n                    return false;\n                }\n                has_exp = true;\n            }\n            _ => return false,\n        }\n    }\n    has_digit && (has_exp_digit || !has_exp)\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    if chars.next().unwrap() == '-' {\n        chars.next();\n    }\n    chars.all(|c| c.is_digit(10))\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1665509796,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    let mut is_integer = false;\n    let mut is_negative = false;\n\n    if let Some(c) = chars.next() {\n        if c == '-' {\n            is_negative = true;\n        } else if c.is_digit(10) {\n            is_integer = true;\n        }\n    }\n\n    for c in chars {\n        if !c.is_digit(10) {\n            is_integer = false;\n            break;\n        }\n    }\n\n    if is_negative {\n        is_integer\n    } else {\n        is_integer && text.len() > 0\n    }\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n\n    let mut is_integer = true;\n    let mut is_negative = false;\n\n    if let Some(c) = chars.next() {\n        if c == '-' {\n            is_negative = true;\n        } else if !c.is_digit(10) {\n            is_integer = false;\n        }\n    }\n\n    if is_integer {\n        for c in chars {\n            if !c.is_digit(10) {\n                is_integer = false;\n                break;\n            }\n        }\n    }\n\n    is_integer && !is_negative\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    let mut first = true;\n    let mut has_sign = false;\n    let mut has_digit = false;\n\n    while let Some(c) = chars.next() {\n        if first {\n            if c == '+' || c == '-' {\n                has_sign = true;\n            } else if c.is_digit(10) {\n                has_digit = true;\n            } else {\n                return false;\n            }\n            first = false;\n        } else {\n            if !c.is_digit(10) {\n                return false;\n            }\n            has_digit = true;\n        }\n    }\n\n    has_digit\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    text.parse::<i32>().is_ok()\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1665509796,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    let mut first = chars.next();\n    if first == Some('-') {\n        first = chars.next();\n    }\n    if first == None {\n        return false;\n    }\n    for c in chars {\n        if !c.is_digit(10) {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1665509796,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    let mut is_integer = true;\n    let mut is_first = true;\n    while let Some(c) = chars.next() {\n        if is_first {\n            if c == '-' {\n                is_first = false;\n                continue;\n            }\n        }\n        if c < '0' || c > '9' {\n            is_integer = false;\n            break;\n        }\n        is_first = false;\n    }\n    is_integer\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    text.parse::<i32>().is_ok()\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1665509796,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    let mut first = true;\n    let mut has_digit = false;\n    while let Some(c) = chars.next() {\n        if first {\n            if c == '-' {\n                first = false;\n            } else if c.is_digit(10) {\n                has_digit = true;\n                first = false;\n            } else {\n                return false;\n            }\n        } else {\n            if c.is_digit(10) {\n                has_digit = true;\n            } else {\n                return false;\n            }\n        }\n    }\n    has_digit\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    let mut first_char = chars.next();\n    match first_char {\n        Some(c) => {\n            if c == '-' {\n                first_char = chars.next();\n            }\n        }\n        None => return false,\n    }\n    match first_char {\n        Some(c) => {\n            if c.is_digit(10) {\n                for c in chars {\n                    if !c.is_digit(10) {\n                        return false;\n                    }\n                }\n                return true;\n            }\n        }\n        None => return false,\n    }\n    false\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    if chars.next() == Some('-') {\n        chars.next();\n    }\n    chars.all(|c| c.is_digit(10))\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    text.parse::<i32>().is_ok()\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1665509796,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    let mut first = chars.next();\n    if first == Some('-') {\n        first = chars.next();\n    }\n    match first {\n        Some(c) => c.is_digit(10),\n        None => false,\n    }\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1666124041,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    let mut is_integer = true;\n    let mut is_first_char = true;\n    let mut is_negative = false;\n\n    while let Some(c) = chars.next() {\n        if is_first_char {\n            if c == '-' {\n                is_negative = true;\n                is_first_char = false;\n            } else if c.is_digit(10) {\n                is_first_char = false;\n            } else {\n                is_integer = false;\n                break;\n            }\n        } else {\n            if !c.is_digit(10) {\n                is_integer = false;\n                break;\n            }\n        }\n    }\n\n    if is_integer && is_negative {\n        is_integer = false;\n    }\n\n    is_integer\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    let mut first_char = chars.next();\n    if first_char == Some('-') || first_char == Some('+') {\n        first_char = chars.next();\n    }\n    if first_char == None {\n        return false;\n    }\n    for c in chars {\n        if !c.is_digit(10) {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1665509797,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    let mut first_char = chars.next();\n    if first_char == Some('-') {\n        first_char = chars.next();\n    }\n    if first_char == None {\n        return false;\n    }\n    for c in chars {\n        if !c.is_digit(10) {\n            return false;\n        }\n    }\n    return true;\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1665509796,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    let mut first = chars.next();\n    if first == Some('-') {\n        first = chars.next();\n    }\n    if first == Some('0') {\n        return chars.next().is_none();\n    }\n    first.map_or(false, |c| c.is_digit(10) && chars.all(|c| c.is_digit(10)))\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    let mut has_sign = false;\n    let mut has_digit = false;\n\n    if let Some(c) = chars.next() {\n        if c == '-' || c == '+' {\n            has_sign = true;\n        } else if !c.is_digit(10) {\n            return false;\n        } else {\n            has_digit = true;\n        }\n    }\n\n    for c in chars {\n        if !c.is_digit(10) {\n            return false;\n        } else {\n            has_digit = true;\n        }\n    }\n\n    has_digit\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    let mut is_negative = false;\n    if let Some(c) = chars.next() {\n        if c == '-' {\n            is_negative = true;\n        } else if !c.is_digit(10) {\n            return false;\n        }\n    }\n    chars.all(|c| c.is_digit(10)) && !(is_negative && text.len() == 1)\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    let mut first_char = chars.next();\n    if first_char == Some('-') {\n        first_char = chars.next();\n    }\n    if first_char == None {\n        return false;\n    }\n    for c in chars {\n        if !c.is_digit(10) {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1666124041,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    let first = chars.next();\n    if first.is_none() {\n        return false;\n    }\n    let first = first.unwrap();\n    if first == '-' || first == '+' {\n        if chars.next().is_none() {\n            return false;\n        }\n    }\n    for c in chars {\n        if !c.is_digit(10) {\n            return false;\n        }\n    }\n    return true;\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    let mut first = chars.next();\n    if first == Some('-') {\n        first = chars.next();\n    }\n    if first == Some('0') {\n        return chars.next().is_none();\n    }\n    if first.is_none() {\n        return false;\n    }\n    while let Some(c) = first {\n        if !c.is_digit(10) {\n            return false;\n        }\n        first = chars.next();\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    let mut first_char = chars.next();\n    let mut is_integer = true;\n\n    if first_char == Some('-') || first_char == Some('+') {\n        first_char = chars.next();\n    }\n\n    while let Some(c) = first_char {\n        if !c.is_digit(10) {\n            is_integer = false;\n            break;\n        }\n        first_char = chars.next();\n    }\n\n    is_integer\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    let first = chars.next();\n    if first == Some('-') || first == Some('+') {\n        chars.next();\n    }\n    chars.all(|c| c.is_digit(10))\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1666124042,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    let mut first_char = chars.next();\n    if first_char == Some('-') || first_char == Some('+') {\n        first_char = chars.next();\n    }\n    if first_char == None {\n        return false;\n    }\n    for c in chars {\n        if !c.is_digit(10) {\n            return false;\n        }\n    }\n    return true;\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1666124041,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    let mut is_integer = false;\n    let mut is_negative = false;\n\n    if chars.next() == Some('-') {\n        is_negative = true;\n    }\n\n    while let Some(c) = chars.next() {\n        if !c.is_digit(10) {\n            break;\n        }\n        is_integer = true;\n    }\n\n    is_integer && !is_negative\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `false`,\n right: `true`', /tmp/tmpi3rqif7h.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    let mut first = true;\n    let mut has_digit = false;\n    while let Some(c) = chars.next() {\n        if first {\n            if c == '-' || c == '+' {\n                first = false;\n            } else if c.is_digit(10) {\n                first = false;\n                has_digit = true;\n            } else {\n                return false;\n            }\n        } else {\n            if c.is_digit(10) {\n                has_digit = true;\n            } else {\n                return false;\n            }\n        }\n    }\n    has_digit\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    let first_char = chars.next();\n    let mut is_integer = false;\n\n    match first_char {\n        Some(c) => {\n            if c == '-' || c == '+' {\n                is_integer = true;\n            } else if c.is_digit(10) {\n                is_integer = true;\n            }\n        }\n        None => is_integer = false,\n    }\n\n    for c in chars {\n        if !c.is_digit(10) {\n            is_integer = false;\n            break;\n        }\n    }\n\n    is_integer\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    if chars.next() == Some('-') {\n        chars.next();\n    }\n    chars.all(|c| c.is_digit(10))\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1666124043,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    let mut first = chars.next();\n    if first == Some('-') {\n        first = chars.next();\n    }\n    if first == None {\n        return false;\n    }\n    for c in chars {\n        if !c.is_digit(10) {\n            return false;\n        }\n    }\n    return true;\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1665509796,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    let mut is_integer = true;\n    if let Some(c) = chars.next() {\n        if c == '-' {\n            if let Some(c) = chars.next() {\n                if !c.is_digit(10) {\n                    is_integer = false;\n                }\n            }\n        } else if !c.is_digit(10) {\n            is_integer = false;\n        }\n    }\n    for c in chars {\n        if !c.is_digit(10) {\n            is_integer = false;\n        }\n    }\n    is_integer\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1666124042,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n    let mut chars = text.chars();\n    let mut first_char = chars.next();\n    if first_char == Some('-') || first_char == Some('+') {\n        first_char = chars.next();\n    }\n    if first_char == None {\n        return false;\n    }\n    for c in chars {\n        if !c.is_digit(10) {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
      "timestamp": 1665509797,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}