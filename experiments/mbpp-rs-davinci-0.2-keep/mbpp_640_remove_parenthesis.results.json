{
  "name": "mbpp_640_remove_parenthesis",
  "language": "rs",
  "prompt": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_640_remove_parenthesis.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmp8mou8i6d.rs:21:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmp1sjbq7fa.rs:21:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpxvfnluz9.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut stack = Vec::new();\n    for item in items {\n        if item == \"(\" {\n            stack.push(item);\n        } else if item == \")\" {\n            stack.pop();\n        } else if stack.is_empty() {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpqlgvyb0q.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpxvfnluz9.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpxvfnluz9.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpxvfnluz9.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpxvfnluz9.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut skip = false;\n    for item in items {\n        if item == \"(\" {\n            skip = true;\n        } else if item == \")\" {\n            skip = false;\n        } else if !skip {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpx7vopgot.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpxvfnluz9.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut skip = false;\n    for item in items {\n        if item == \"(\" {\n            skip = true;\n        } else if item == \")\" {\n            skip = false;\n        } else if !skip {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpx7vopgot.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpxvfnluz9.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpxvfnluz9.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpxvfnluz9.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpxvfnluz9.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpxvfnluz9.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmp1sjbq7fa.rs:21:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpxvfnluz9.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_paren = false;\n    for item in items {\n        if item == \"(\" {\n            in_paren = true;\n        } else if item == \")\" {\n            in_paren = false;\n        } else if !in_paren {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpjtxz_e7z.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpxvfnluz9.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpxvfnluz9.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpxvfnluz9.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpxvfnluz9.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for c in items.join(\"\").chars() {\n        if c == '(' {\n            in_parenthesis = true;\n        } else if c == ')' {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push(c);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1666123212,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python \"`,\n right: `\"python\"`', /tmp/tmp2fdkugwn.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut open_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            open_parenthesis = true;\n        } else if item == \")\" {\n            open_parenthesis = false;\n        } else if !open_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1666123211,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmprrdfsxj6.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpxvfnluz9.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpxvfnluz9.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpxvfnluz9.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpxvfnluz9.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpxvfnluz9.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpxvfnluz9.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpxvfnluz9.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n\n    for item in items {\n        if item.contains(\"(\") {\n            let mut chars = item.chars();\n            let mut temp = String::new();\n            let mut found_open = false;\n            let mut found_close = false;\n\n            while let Some(c) = chars.next() {\n                if c == '(' {\n                    found_open = true;\n                } else if c == ')' {\n                    found_close = true;\n                } else if found_open && !found_close {\n                    continue;\n                } else {\n                    temp.push(c);\n                }\n            }\n\n            result.push_str(&temp);\n        } else {\n            result.push_str(&item);\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1666123212,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python \"`,\n right: `\"python\"`', /tmp/tmp1trte5nv.rs:35:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpxvfnluz9.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpxvfnluz9.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpxvfnluz9.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpxvfnluz9.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpxvfnluz9.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpxvfnluz9.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpxvfnluz9.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpxvfnluz9.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    items.iter().map(|s| {\n        let mut s = s.clone();\n        let mut i = 0;\n        while i < s.len() {\n            if s.chars().nth(i) == Some('(') {\n                let mut j = i + 1;\n                while j < s.len() {\n                    if s.chars().nth(j) == Some(')') {\n                        s.drain(i..j + 1);\n                        break;\n                    }\n                    j += 1;\n                }\n            }\n            i += 1;\n        }\n        s\n    }).collect::<Vec<String>>().join(\" \")\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1666123212,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python \"`,\n right: `\"python\"`', /tmp/tmp6zsa23pn.rs:25:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpxvfnluz9.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpxvfnluz9.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpxvfnluz9.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpxvfnluz9.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpxvfnluz9.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpxvfnluz9.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpxvfnluz9.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n            result.push(' ');\n        }\n    }\n    result.trim().to_string()\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1666123211,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpwfj6ftbc.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpxvfnluz9.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpxvfnluz9.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpxvfnluz9.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpxvfnluz9.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut inside_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            inside_parenthesis = true;\n        } else if item == \")\" {\n            inside_parenthesis = false;\n        } else if !inside_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpd_uuq0yi.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut res = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            res.push_str(&item);\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1666123212,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpl4zk8thq.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpxvfnluz9.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmp1sjbq7fa.rs:21:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpxvfnluz9.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpxvfnluz9.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpxvfnluz9.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpxvfnluz9.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpxvfnluz9.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpxvfnluz9.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpxvfnluz9.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpxvfnluz9.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut open_parenthesis = 0;\n    for item in items {\n        if item == \"(\" {\n            open_parenthesis += 1;\n        } else if item == \")\" {\n            open_parenthesis -= 1;\n        } else if open_parenthesis == 0 {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1666123212,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmp5gcqxbcw.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpxvfnluz9.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpxvfnluz9.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpxvfnluz9.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpxvfnluz9.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmp1sjbq7fa.rs:21:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpxvfnluz9.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpxvfnluz9.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmp1sjbq7fa.rs:21:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpxvfnluz9.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpxvfnluz9.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parens = false;\n    for item in items {\n        if item == \"(\" {\n            in_parens = true;\n        } else if item == \")\" {\n            in_parens = false;\n        } else if !in_parens {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmp9vz3t1g7.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpxvfnluz9.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpxvfnluz9.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else {\n            if !in_parenthesis {\n                result.push_str(&item);\n                result.push_str(\" \");\n            }\n        }\n    }\n    result.trim().to_string()\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1666123212,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpzxp62qe4.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpxvfnluz9.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpxvfnluz9.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else {\n            if !in_parenthesis {\n                result.push_str(&item);\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1666123212,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpau2dbyle.rs:21:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpxvfnluz9.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpxvfnluz9.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpxvfnluz9.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpxvfnluz9.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpxvfnluz9.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpxvfnluz9.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut skip = false;\n    for item in items {\n        if item == \"(\" {\n            skip = true;\n        } else if item == \")\" {\n            skip = false;\n        } else if !skip {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpx7vopgot.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpxvfnluz9.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpxvfnluz9.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpxvfnluz9.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpxvfnluz9.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n            result.push(' ');\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome) \"`,\n right: `\"python\"`', /tmp/tmpmb5f041w.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpxvfnluz9.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpxvfnluz9.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else {\n            if !in_parenthesis {\n                result.push_str(&item);\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1666123212,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpau2dbyle.rs:21:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpxvfnluz9.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut skip = false;\n    for item in items {\n        if item == \"(\" {\n            skip = true;\n        } else if item == \")\" {\n            skip = false;\n        } else if !skip {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpx7vopgot.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpxvfnluz9.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpxvfnluz9.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpxvfnluz9.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpxvfnluz9.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut skip = false;\n    for item in items {\n        if item == \"(\" {\n            skip = true;\n        } else if item == \")\" {\n            skip = false;\n        } else if !skip {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpx7vopgot.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpxvfnluz9.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpxvfnluz9.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n            continue;\n        }\n        if item == \")\" {\n            in_parenthesis = false;\n            continue;\n        }\n        if !in_parenthesis {\n            result.push_str(&item);\n            result.push(' ');\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1666123212,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome) \"`,\n right: `\"python\"`', /tmp/tmpjizgfrmi.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n            result.push_str(\" \");\n        }\n    }\n    result.trim().to_string()\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1666123212,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpwnwksysa.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut stack = Vec::new();\n    for item in items {\n        if item == \"(\" {\n            stack.push(item);\n        } else if item == \")\" {\n            stack.pop();\n        } else {\n            if stack.is_empty() {\n                result.push_str(&item);\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1666123211,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmp68vhxdhg.rs:21:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpxvfnluz9.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpxvfnluz9.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpxvfnluz9.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut skip = false;\n    for item in items {\n        if item == \"(\" {\n            skip = true;\n        } else if item == \")\" {\n            skip = false;\n        } else if !skip {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpx7vopgot.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpxvfnluz9.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmp1sjbq7fa.rs:21:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpxvfnluz9.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmp1sjbq7fa.rs:21:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpxvfnluz9.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut skip = false;\n    for item in items {\n        if item == \"(\" {\n            skip = true;\n        } else if item == \")\" {\n            skip = false;\n        } else if !skip {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpx7vopgot.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpxvfnluz9.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n            result.push(' ');\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome) \"`,\n right: `\"python\"`', /tmp/tmpmb5f041w.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut skip = false;\n    for item in items {\n        if item == \"(\" {\n            skip = true;\n        } else if item == \")\" {\n            skip = false;\n        } else if !skip {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpx7vopgot.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmp1sjbq7fa.rs:21:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut open_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            open_parenthesis = true;\n        } else if item == \")\" {\n            open_parenthesis = false;\n        } else if !open_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1666123211,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmprrdfsxj6.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpxvfnluz9.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut new_items = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            new_items.push_str(&item);\n        }\n    }\n    new_items\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1666123212,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpkropefx4.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpxvfnluz9.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpxvfnluz9.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpxvfnluz9.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpxvfnluz9.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpxvfnluz9.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut open_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            open_parenthesis = true;\n        } else if item == \")\" {\n            open_parenthesis = false;\n        } else if !open_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1666123211,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmprrdfsxj6.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpxvfnluz9.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n            result.push(' ');\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome) \"`,\n right: `\"python\"`', /tmp/tmpmb5f041w.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut skip = false;\n    for item in items {\n        if item == \"(\" {\n            skip = true;\n        } else if item == \")\" {\n            skip = false;\n        } else if !skip {\n            result.push_str(&item);\n            result.push(' ');\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1666123212,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome) \"`,\n right: `\"python\"`', /tmp/tmpqdqespoq.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpxvfnluz9.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpxvfnluz9.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpxvfnluz9.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpxvfnluz9.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpxvfnluz9.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpxvfnluz9.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpxvfnluz9.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpxvfnluz9.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpxvfnluz9.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpxvfnluz9.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpxvfnluz9.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpxvfnluz9.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpxvfnluz9.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpxvfnluz9.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpxvfnluz9.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpxvfnluz9.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpxvfnluz9.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpxvfnluz9.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmp1sjbq7fa.rs:21:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut open = false;\n    for item in items {\n        if item == \"(\" {\n            open = true;\n        } else if item == \")\" {\n            open = false;\n        } else if !open {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1666123212,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpuy2jh237.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpxvfnluz9.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpxvfnluz9.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpxvfnluz9.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpxvfnluz9.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpxvfnluz9.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpxvfnluz9.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmp1sjbq7fa.rs:21:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpxvfnluz9.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpxvfnluz9.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpxvfnluz9.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut new_items = Vec::new();\n    for item in items {\n        let mut new_item = String::new();\n        let mut in_parenthesis = false;\n        for c in item.chars() {\n            if c == '(' {\n                in_parenthesis = true;\n                continue;\n            }\n            if c == ')' {\n                in_parenthesis = false;\n                continue;\n            }\n            if !in_parenthesis {\n                new_item.push(c);\n            }\n        }\n        new_items.push(new_item);\n    }\n    new_items.join(\" \")\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1666123212,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python \"`,\n right: `\"python\"`', /tmp/tmpq1b5vbi8.rs:27:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpxvfnluz9.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut inside_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            inside_parenthesis = true;\n        } else if item == \")\" {\n            inside_parenthesis = false;\n        } else if !inside_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpd_uuq0yi.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut new_items = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            new_items.push_str(&item);\n        }\n    }\n    new_items\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1666123212,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpkropefx4.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpxvfnluz9.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpxvfnluz9.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpxvfnluz9.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpxvfnluz9.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmp1sjbq7fa.rs:21:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpxvfnluz9.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpxvfnluz9.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpxvfnluz9.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n            result.push(' ');\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome) \"`,\n right: `\"python\"`', /tmp/tmpmb5f041w.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpxvfnluz9.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpxvfnluz9.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpxvfnluz9.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpxvfnluz9.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpxvfnluz9.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpxvfnluz9.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut skip = false;\n    for item in items {\n        if item == \"(\" {\n            skip = true;\n        } else if item == \")\" {\n            skip = false;\n        } else if !skip {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpx7vopgot.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpxvfnluz9.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut open_parenthesis = false;\n\n    for item in items {\n        if item == \"(\" {\n            open_parenthesis = true;\n        } else if item == \")\" {\n            open_parenthesis = false;\n        } else if !open_parenthesis {\n            result.push_str(&item);\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1666123212,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpi7ui3jt9.rs:21:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpxvfnluz9.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpxvfnluz9.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmp1sjbq7fa.rs:21:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpxvfnluz9.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n            result.push(' ');\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome) \"`,\n right: `\"python\"`', /tmp/tmpmb5f041w.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpxvfnluz9.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpxvfnluz9.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpxvfnluz9.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpxvfnluz9.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmpxvfnluz9.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to remove the parenthesis and what is inbetween them from a string.\nfn remove_parenthesis(items: Vec<String>) -> String {\n    let mut result = String::new();\n    let mut in_parenthesis = false;\n\n    for item in items {\n        if item == \"(\" {\n            in_parenthesis = true;\n        } else if item == \")\" {\n            in_parenthesis = false;\n        } else if !in_parenthesis {\n            result.push_str(&item);\n        }\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = remove_parenthesis;\n    assert_eq!(candidate(vec![String::from(\"python (chrome)\")]), String::from(\"python\"));\n    assert_eq!(candidate(vec![String::from(\"string(.abc)\")]), String::from(\"string\"));\n    assert_eq!(candidate(vec![String::from(\"alpha(num)\")]), String::from(\"alpha\"));\n}\n",
      "timestamp": 1665510071,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `\"python (chrome)\"`,\n right: `\"python\"`', /tmp/tmp1sjbq7fa.rs:21:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    }
  ]
}