{
  "name": "mbpp_583_catalan_number",
  "language": "rs",
  "prompt": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_583_catalan_number.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1665510000,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    let mut res = 1;\n    for i in 0..num {\n        res = res * (num + i) / (i + 1);\n    }\n    res\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1665510001,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `92378`,\n right: `16796`', /tmp/tmpswy16t7x.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    let mut catalan_num = 1;\n    for i in 0..num {\n        catalan_num *= (num + i) / (i + 1);\n    }\n    catalan_num\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1665510001,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `19200`,\n right: `16796`', /tmp/tmp8jrb93vh.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1665510000,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    let mut result = 1;\n    for i in 0..num {\n        result = result * (num + i) / (i + 1);\n    }\n    result\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1665510001,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `92378`,\n right: `16796`', /tmp/tmpj0c3vk7i.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    let mut catalan: isize = 1;\n    for i in 0..num {\n        catalan = catalan * (2 * num - i) / (i + 1);\n    }\n    catalan / (num + 1)\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1665510000,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    let mut res = 1;\n    for i in 0..num {\n        res = res * (num + i) / (i + 1);\n    }\n    res\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1665510001,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `92378`,\n right: `16796`', /tmp/tmpswy16t7x.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    if num <= 1 {\n        return 1;\n    }\n\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1665510000,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1665510000,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    if num <= 1 {\n        return 1;\n    }\n\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1665510000,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    let mut res = 1;\n    for i in 0..num {\n        res = res * (num + i) / (i + 1);\n    }\n    res\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1665510001,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `92378`,\n right: `16796`', /tmp/tmpswy16t7x.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    let mut result = 1;\n    for i in 0..num {\n        result = result * (num + i) / (i + 1);\n    }\n    result\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1665510001,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `92378`,\n right: `16796`', /tmp/tmpj0c3vk7i.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    let mut result = 1;\n    for i in 0..num {\n        result = result * (num + i) / (i + 1);\n    }\n    result / (num + 1)\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1665510001,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `8398`,\n right: `16796`', /tmp/tmp9hm_1yds.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1665510000,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    if num == 0 {\n        return 1;\n    }\n\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1665510001,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    let mut catalan_numbers: Vec<isize> = vec![0; (num + 1) as usize];\n    catalan_numbers[0] = 1;\n    catalan_numbers[1] = 1;\n    for i in 2..=num {\n        for j in 0..i {\n            catalan_numbers[i as usize] += catalan_numbers[j as usize] * catalan_numbers[(i - j - 1) as usize];\n        }\n    }\n    catalan_numbers[num as usize]\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1665510001,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    let mut res = 1;\n    for i in 0..num {\n        res = res * (2 * num - i) / (i + 1);\n    }\n    res / (num + 1)\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1665510000,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    let mut catalan_numbers = vec![1];\n    for i in 1..num {\n        let mut sum = 0;\n        for j in 0..i {\n            sum += catalan_numbers[j as usize] * catalan_numbers[(i - j - 1) as usize];\n        }\n        catalan_numbers.push(sum);\n    }\n    catalan_numbers[num as usize]\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1665510001,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 10 but the index is 10', /tmp/tmp6iecxi_2.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    let mut catalan_numbers: Vec<isize> = vec![0; (num + 1) as usize];\n    catalan_numbers[0] = 1;\n    catalan_numbers[1] = 1;\n    for i in 2..=num {\n        for j in 0..i {\n            catalan_numbers[i as usize] += catalan_numbers[j as usize] * catalan_numbers[(i - j - 1) as usize];\n        }\n    }\n    catalan_numbers[num as usize]\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1665510001,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    if num <= 1 {\n        1\n    } else {\n        let mut res = 0;\n        for i in 0..num {\n            res += catalan_number(i) * catalan_number(num - i - 1);\n        }\n        res\n    }\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1665510000,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    let mut res = 1;\n    for i in 0..num {\n        res = res * (num + i) / (i + 1);\n    }\n    res / (num + 1)\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1666122585,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `8398`,\n right: `16796`', /tmp/tmpxpmg38tm.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    let mut catalan: isize = 1;\n    let mut n: isize = num;\n    let mut r: isize = num;\n    if n <= 1 {\n        return 1;\n    }\n    while n > 0 {\n        catalan = catalan * n;\n        n = n - 1;\n    }\n    while r > 0 {\n        catalan = catalan / r;\n        r = r - 1;\n    }\n    return catalan;\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1666122586,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `16796`', /tmp/tmp8k175ag2.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1665510000,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    let mut catalan_numbers = vec![1, 1];\n    for i in 2..num + 1 {\n        let mut sum = 0;\n        for j in 0..i {\n            sum += catalan_numbers[j as usize] * catalan_numbers[(i - j - 1) as usize];\n        }\n        catalan_numbers.push(sum);\n    }\n    catalan_numbers[num as usize]\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1666122585,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1665510000,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1665510000,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    let mut catalan = vec![0; (num + 1) as usize];\n    catalan[0] = 1;\n    catalan[1] = 1;\n\n    for i in 2..=num {\n        for j in 0..i {\n            catalan[i as usize] += catalan[j as usize] * catalan[(i - j - 1) as usize];\n        }\n    }\n\n    catalan[num as usize]\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1666122586,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    let mut catalan: isize = 1;\n    let mut i: isize = 1;\n    while i <= num {\n        catalan = catalan * (2 * num - i + 1) / i;\n        i += 1;\n    }\n    catalan\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1666122586,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `184756`,\n right: `16796`', /tmp/tmp0n2amvyy.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1665510000,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1665510000,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1665510000,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    let mut catalan_number = 1;\n    for i in 0..num {\n        catalan_number = catalan_number * (2 * num - i) / (i + 1);\n    }\n    catalan_number / (num + 1)\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1666122586,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    if num <= 1 {\n        return 1;\n    }\n\n    let mut result = 0;\n    for i in 0..num {\n        result += catalan_number(i) * catalan_number(num - i - 1);\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1666122585,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1665510000,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    let mut catalan: isize = 1;\n    for i in 0..num {\n        catalan = catalan * (2 * num - i) / (i + 1);\n    }\n    catalan / (num + 1)\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1665510000,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    let mut result = 1;\n    for i in 0..num {\n        result = result * (2 * num - i) / (i + 1);\n    }\n    result / (num + 1)\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1666122585,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1665510000,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1665510000,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    let mut result = 1;\n    for i in 0..num {\n        result = result * (num + i) / (i + 1);\n    }\n    result\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1665510001,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `92378`,\n right: `16796`', /tmp/tmpj0c3vk7i.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1665510000,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1665510000,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    let mut catalan_numbers: Vec<isize> = vec![0; (num + 1) as usize];\n    catalan_numbers[0] = 1;\n    catalan_numbers[1] = 1;\n    for i in 2..num + 1 {\n        for j in 0..i {\n            catalan_numbers[i as usize] += catalan_numbers[j as usize] * catalan_numbers[(i - j - 1) as usize];\n        }\n    }\n    catalan_numbers[num as usize]\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1666122586,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    let mut catalan_number = 1;\n    for i in 0..num {\n        catalan_number = catalan_number * (2 * num - i) / (i + 1);\n    }\n    catalan_number / (num + 1)\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1666122586,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    if num == 0 {\n        return 1;\n    }\n    let mut sum = 0;\n    for i in 0..num {\n        sum += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    sum\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1666122586,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1665510000,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    let mut catalan_numbers: Vec<isize> = vec![0; (num + 1) as usize];\n    catalan_numbers[0] = 1;\n    catalan_numbers[1] = 1;\n\n    for i in 2..=num {\n        for j in 0..i {\n            catalan_numbers[i as usize] += catalan_numbers[j as usize] * catalan_numbers[(i - j - 1) as usize];\n        }\n    }\n\n    catalan_numbers[num as usize]\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1666122586,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    let mut result = 1;\n    for i in 0..num {\n        result = result * (num + i) / (i + 1);\n    }\n    result / (num + 1)\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1665510001,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `8398`,\n right: `16796`', /tmp/tmp9hm_1yds.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    let mut res = 1;\n    for i in 0..num {\n        res = res * (num + i) / (i + 1);\n    }\n    res / (num + 1)\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1666122585,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `8398`,\n right: `16796`', /tmp/tmpxpmg38tm.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1665510000,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    let mut res = 1;\n    for i in 0..num {\n        res = res * (num + i) / (i + 1);\n    }\n    res / (num + 1)\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1666122585,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `8398`,\n right: `16796`', /tmp/tmpxpmg38tm.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    let mut result = 1;\n    for i in 0..num {\n        result = result * (2 * num - i) / (i + 1);\n    }\n    result / (num + 1)\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1666122585,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1665510000,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    let mut res = 1;\n    for i in 0..num {\n        res = res * (2 * num - i) / (i + 1);\n    }\n    res / (num + 1)\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1665510000,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    let mut catalan_numbers = vec![1, 1];\n    for i in 2..num + 1 {\n        let mut sum = 0;\n        for j in 0..i {\n            sum += catalan_numbers[j as usize] * catalan_numbers[(i - j - 1) as usize];\n        }\n        catalan_numbers.push(sum);\n    }\n    catalan_numbers[num as usize]\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1666122585,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1665510000,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    let mut catalan = vec![1; (num + 1) as usize];\n    for i in 1..num + 1 {\n        catalan[i as usize] = 0;\n        for j in 0..i {\n            catalan[i as usize] += catalan[j as usize] * catalan[(i - j - 1) as usize];\n        }\n    }\n    catalan[num as usize]\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1666122586,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1665510000,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1665510000,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    if num == 0 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1666122585,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    if num == 0 {\n        return 1;\n    }\n    let mut result = 0;\n    for i in 0..num {\n        result += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    result\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1666122586,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    let mut catalan: isize = 1;\n    for i in 0..num {\n        catalan = catalan * 2 * (2 * i + 1) / (i + 2);\n    }\n    catalan\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1666122586,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    if num <= 1 {\n        return 1;\n    }\n\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1665510000,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1665510000,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1665510000,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    let mut catalan_number = 1;\n    for i in 0..num {\n        catalan_number = catalan_number * (2 * num - i) / (i + 1);\n    }\n    catalan_number\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1666122585,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `184756`,\n right: `16796`', /tmp/tmpuj463rj8.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    let mut catalan: isize = 1;\n    for i in 0..num {\n        catalan = catalan * (2 * num - i) / (i + 1);\n    }\n    return catalan;\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1666122586,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `184756`,\n right: `16796`', /tmp/tmpks9i59uk.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    let mut catalan_numbers = vec![0; (num + 1) as usize];\n    catalan_numbers[0] = 1;\n    catalan_numbers[1] = 1;\n    for i in 2..num + 1 {\n        for j in 0..i {\n            catalan_numbers[i as usize] += catalan_numbers[j as usize] * catalan_numbers[(i - j - 1) as usize];\n        }\n    }\n    catalan_numbers[num as usize]\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1666122585,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1665510000,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    let mut catalan_numbers: Vec<isize> = vec![0; (num + 1) as usize];\n    catalan_numbers[0] = 1;\n    catalan_numbers[1] = 1;\n    for i in 2..=num {\n        for j in 0..i {\n            catalan_numbers[i as usize] += catalan_numbers[j as usize] * catalan_numbers[(i - j - 1) as usize];\n        }\n    }\n    catalan_numbers[num as usize]\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1665510001,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    if num <= 1 {\n        return 1;\n    }\n    let mut result = 0;\n    for i in 0..num {\n        result += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    result\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1666122586,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    if num == 0 {\n        return 1;\n    }\n    let mut result = 0;\n    for i in 0..num {\n        result += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    result\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1666122586,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1665510000,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1665510000,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1665510000,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1665510000,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    let mut res = 1;\n    for i in 0..num {\n        res = res * (num + i) / (i + 1);\n    }\n    res / (num + 1)\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1666122585,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `8398`,\n right: `16796`', /tmp/tmpxpmg38tm.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    let mut catalan = vec![0; (num + 1) as usize];\n    catalan[0] = 1;\n    catalan[1] = 1;\n    for i in 2..=num {\n        for j in 0..i {\n            catalan[i as usize] += catalan[j as usize] * catalan[(i - j - 1) as usize];\n        }\n    }\n    catalan[num as usize]\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1666122585,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1665510000,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    let mut catalan_numbers = vec![0; (num + 1) as usize];\n    catalan_numbers[0] = 1;\n    catalan_numbers[1] = 1;\n    for i in 2..num + 1 {\n        for j in 0..i {\n            catalan_numbers[i as usize] += catalan_numbers[j as usize] * catalan_numbers[(i - j - 1) as usize];\n        }\n    }\n    catalan_numbers[num as usize]\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1666122585,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    let mut res = 1;\n    for i in 0..num {\n        res = res * (2 * num - i) / (i + 1);\n    }\n    res / (num + 1)\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1665510000,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1665510000,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1665510000,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1665510000,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    if num == 0 {\n        return 1;\n    }\n\n    let mut result = 0;\n    for i in 0..num {\n        result += catalan_number(i) * catalan_number(num - i - 1);\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1666122586,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    let mut catalan: isize = 1;\n    for i in 0..num {\n        catalan = catalan * 2 * (2 * i + 1) / (i + 2);\n    }\n    catalan\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1666122586,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    let mut catalan_numbers: Vec<isize> = vec![0; (num + 1) as usize];\n    catalan_numbers[0] = 1;\n    catalan_numbers[1] = 1;\n    for i in 2..=num {\n        for j in 0..i {\n            catalan_numbers[i as usize] += catalan_numbers[j as usize] * catalan_numbers[(i - j - 1) as usize];\n        }\n    }\n    catalan_numbers[num as usize]\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1665510001,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1665510000,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1665510000,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    let mut catalan: isize = 1;\n    for i in 0..num {\n        catalan = catalan * (2 * num - i) / (i + 1);\n    }\n    catalan / (num + 1)\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1665510000,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1665510000,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1665510000,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    let mut res = 1;\n    for i in 0..num {\n        res = res * (2 * num - i) / (i + 1);\n    }\n    res / (num + 1)\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1665510000,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    let mut result = 1;\n    for i in 0..num {\n        result = result * (2 * num - i) / (i + 1);\n    }\n    result / (num + 1)\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1666122585,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    if num == 0 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1666122585,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    let mut catalan_numbers = vec![1, 1];\n    for i in 2..num + 1 {\n        let mut sum = 0;\n        for j in 0..i {\n            sum += catalan_numbers[j as usize] * catalan_numbers[(i - j - 1) as usize];\n        }\n        catalan_numbers.push(sum);\n    }\n    catalan_numbers[num as usize]\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1666122585,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1665510000,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    let mut catalan_numbers = vec![1, 1];\n    for i in 2..num + 1 {\n        let mut sum = 0;\n        for j in 0..i {\n            sum += catalan_numbers[j as usize] * catalan_numbers[(i - j - 1) as usize];\n        }\n        catalan_numbers.push(sum);\n    }\n    catalan_numbers[num as usize]\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1666122585,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1665510000,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    let mut catalan: isize = 1;\n    for i in 0..num {\n        catalan = catalan * (2 * num - i) / (i + 1);\n    }\n    catalan / (num + 1)\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1665510000,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    let mut res = 1;\n    for i in 0..num {\n        res = res * (2 * num - i) / (i + 1);\n    }\n    res / (num + 1)\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1665510000,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    let mut catalan: isize = 1;\n    for i in 0..num {\n        catalan = catalan * (2 * num - i) / (i + 1);\n    }\n    catalan / (num + 1)\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1665510000,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    let mut catalan_number = 1;\n    for i in 0..num {\n        catalan_number = catalan_number * (2 * num - i) / (i + 1);\n    }\n    catalan_number / (num + 1)\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1666122586,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    if num == 0 {\n        return 1;\n    }\n\n    let mut sum = 0;\n    for i in 0..num {\n        sum += catalan_number(i) * catalan_number(num - i - 1);\n    }\n\n    sum\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1666122586,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1665510000,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    let mut catalan_numbers = vec![0; (num + 1) as usize];\n    catalan_numbers[0] = 1;\n    catalan_numbers[1] = 1;\n    for i in 2..=num {\n        for j in 0..i {\n            catalan_numbers[i as usize] += catalan_numbers[j as usize] * catalan_numbers[(i - j - 1) as usize];\n        }\n    }\n    catalan_numbers[num as usize]\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1666122585,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    if num <= 1 {\n        return 1;\n    }\n\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n\n    res\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1666122585,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1665510000,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1665510000,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    let mut catalan_numbers: Vec<isize> = vec![0; (num + 1) as usize];\n    catalan_numbers[0] = 1;\n    catalan_numbers[1] = 1;\n    for i in 2..num + 1 {\n        for j in 0..i {\n            catalan_numbers[i as usize] += catalan_numbers[j as usize] * catalan_numbers[(i - j - 1) as usize];\n        }\n    }\n    catalan_numbers[num as usize]\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1666122586,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    let mut result = 1;\n    for i in 0..num {\n        result = result * (num + i) / (i + 1);\n    }\n    result / (num + 1)\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1665510001,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `8398`,\n right: `16796`', /tmp/tmp9hm_1yds.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    let mut catalan: Vec<isize> = vec![0; (num + 1) as usize];\n    catalan[0] = 1;\n    catalan[1] = 1;\n    for i in 2..num + 1 {\n        catalan[i as usize] = 0;\n        for j in 0..i {\n            catalan[i as usize] += catalan[j as usize] * catalan[(i - j - 1) as usize];\n        }\n    }\n    catalan[num as usize]\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1666122586,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    let mut result = 1;\n    for i in 0..num {\n        result = result * (num + i) / (i + 1);\n    }\n    result / (num + 1)\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1665510001,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `8398`,\n right: `16796`', /tmp/tmp9hm_1yds.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1665510000,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1665510000,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1665510000,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1665510000,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1665510000,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    let mut catalan: isize = 1;\n    let mut n: isize = num;\n    let mut r: isize = num;\n    if num <= 1 {\n        return 1;\n    }\n    for _ in 0..num {\n        catalan = catalan * n;\n        n = n - 1;\n    }\n    for _ in 0..num {\n        catalan = catalan / r;\n        r = r - 1;\n    }\n    return catalan;\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1666122586,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `16796`', /tmp/tmpepnxb6h4.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1665510000,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    let mut catalan: isize = 1;\n    for i in 0..num {\n        catalan = catalan * (2 * num - i) / (i + 1);\n    }\n    catalan / (num + 1)\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1665510000,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1665510000,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1665510000,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    let mut catalan_numbers = vec![1];\n\n    for n in 1..num + 1 {\n        let mut sum = 0;\n        for i in 0..n {\n            sum += catalan_numbers[i as usize] * catalan_numbers[(n - i - 1) as usize];\n        }\n        catalan_numbers.push(sum);\n    }\n\n    catalan_numbers[num as usize]\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1666122586,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    let mut catalan_numbers = vec![0; (num + 1) as usize];\n    catalan_numbers[0] = 1;\n    catalan_numbers[1] = 1;\n    for i in 2..=num {\n        for j in 0..i {\n            catalan_numbers[i as usize] += catalan_numbers[j as usize] * catalan_numbers[(i - j - 1) as usize];\n        }\n    }\n    catalan_numbers[num as usize]\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1666122585,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    let mut catalan_numbers = vec![1, 1];\n    for i in 2..num + 1 {\n        let mut sum = 0;\n        for j in 0..i {\n            sum += catalan_numbers[j as usize] * catalan_numbers[(i - j - 1) as usize];\n        }\n        catalan_numbers.push(sum);\n    }\n    catalan_numbers[num as usize]\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1666122585,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    let mut result = 1;\n    for i in 0..num {\n        result = result * (2 * num - i) / (i + 1);\n    }\n    result / (num + 1)\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1666122585,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    if num <= 1 {\n        return 1;\n    }\n\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n\n    res\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1666122585,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    if num <= 1 {\n        return 1;\n    }\n\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1665510000,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1665510000,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1665510000,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    let mut catalan_number = 1;\n    for i in 0..num {\n        catalan_number *= (2 * num - i) / (i + 1);\n    }\n    catalan_number / (num + 1)\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1666122586,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4712`,\n right: `16796`', /tmp/tmp9iwkuw26.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1665510000,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    let mut catalan_numbers = vec![1, 1];\n    for i in 2..num + 1 {\n        let mut sum = 0;\n        for j in 0..i {\n            sum += catalan_numbers[j as usize] * catalan_numbers[(i - j - 1) as usize];\n        }\n        catalan_numbers.push(sum);\n    }\n    catalan_numbers[num as usize]\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1666122585,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    let mut catalan_numbers = vec![1; (num + 1) as usize];\n    for i in 1..num {\n        let mut sum = 0;\n        for j in 0..i {\n            sum += catalan_numbers[j as usize] * catalan_numbers[(i - j - 1) as usize];\n        }\n        catalan_numbers[i as usize] = sum;\n    }\n    catalan_numbers[num as usize]\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1666122586,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `16796`', /tmp/tmphfqtz1l5.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    let mut catalan_numbers = vec![1, 1];\n    for i in 2..num + 1 {\n        let mut sum = 0;\n        for j in 0..i {\n            sum += catalan_numbers[j as usize] * catalan_numbers[(i - j - 1) as usize];\n        }\n        catalan_numbers.push(sum);\n    }\n    catalan_numbers[num as usize]\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1666122585,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    if num == 0 {\n        return 1;\n    }\n    let mut result = 0;\n    for i in 0..num {\n        result += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    result\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1666122586,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    let mut res = 1;\n    for i in 0..num {\n        res = res * (2 * num - i) / (i + 1);\n    }\n    res / (num + 1)\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1665510000,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    let mut result = 1;\n    for i in 0..num {\n        result = result * (num + i) / (i + 1);\n    }\n    result / (num + 1)\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1665510001,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `8398`,\n right: `16796`', /tmp/tmp9hm_1yds.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1665510000,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    let mut result = 1;\n    for i in 0..num {\n        result = result * (num + i) / (i + 1);\n    }\n    result / (num + 1)\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1665510001,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `8398`,\n right: `16796`', /tmp/tmp9hm_1yds.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1665510000,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1665510000,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1665510000,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    let mut catalan: isize = 1;\n    let mut n: isize = num;\n    let mut r: isize = num;\n    if num <= 1 {\n        return 1;\n    }\n    while n != 0 {\n        catalan *= n;\n        n -= 1;\n    }\n    while r != 1 {\n        catalan /= r;\n        r -= 1;\n    }\n    return catalan;\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1666122586,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `1`,\n right: `16796`', /tmp/tmpbkmoytj7.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1665510000,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    let mut catalan_numbers = vec![1];\n    for i in 1..num + 1 {\n        let mut catalan_number = 0;\n        for j in 0..i {\n            catalan_number += catalan_numbers[j as usize] * catalan_numbers[(i - j - 1) as usize];\n        }\n        catalan_numbers.push(catalan_number);\n    }\n    catalan_numbers[num as usize]\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1666122586,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    if num <= 1 {\n        return 1;\n    }\n\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n\n    res\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1666122585,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    let mut catalan = vec![0; (num + 1) as usize];\n    catalan[0] = 1;\n    catalan[1] = 1;\n    for i in 2..=num {\n        for j in 0..i {\n            catalan[i as usize] += catalan[j as usize] * catalan[(i - j - 1) as usize];\n        }\n    }\n    catalan[num as usize]\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1666122585,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    if num <= 1 {\n        return 1;\n    }\n\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n\n    res\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1666122585,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    if num <= 1 {\n        return 1;\n    }\n\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n\n    res\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1666122585,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    let mut catalan_numbers = vec![0; (num + 1) as usize];\n    catalan_numbers[0] = 1;\n    catalan_numbers[1] = 1;\n    for i in 2..=num {\n        for j in 0..i {\n            catalan_numbers[i as usize] += catalan_numbers[j as usize] * catalan_numbers[(i - j - 1) as usize];\n        }\n    }\n    catalan_numbers[num as usize]\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1666122585,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    let mut res = 1;\n    for i in 0..num {\n        res = res * (num + i) / (i + 1);\n    }\n    res / (num + 1)\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1666122585,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `8398`,\n right: `16796`', /tmp/tmpxpmg38tm.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    let mut catalan: isize = 1;\n    for i in 0..num {\n        catalan = catalan * (2 * num - i) / (i + 1);\n    }\n    catalan / (num + 1)\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1665510000,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1665510000,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    if num == 0 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1666122585,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1665510000,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    if num <= 1 {\n        1\n    } else {\n        let mut res = 0;\n        for i in 0..num {\n            res += catalan_number(i) * catalan_number(num - i - 1);\n        }\n        res\n    }\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1665510000,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1665510000,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    let mut res = 1;\n    for i in 0..num {\n        res = res * (num + i) / (i + 1);\n    }\n    res / (num + 1)\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1666122585,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `8398`,\n right: `16796`', /tmp/tmpxpmg38tm.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    let mut catalan: isize = 1;\n    for i in 0..num {\n        catalan = catalan * (2 * num - i) / (i + 1);\n    }\n    catalan / (num + 1)\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1665510000,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    let mut catalan_numbers = vec![0; (num + 1) as usize];\n    catalan_numbers[0] = 1;\n    catalan_numbers[1] = 1;\n    for i in 2..=num {\n        for j in 0..i {\n            catalan_numbers[i as usize] += catalan_numbers[j as usize] * catalan_numbers[(i - j - 1) as usize];\n        }\n    }\n    catalan_numbers[num as usize]\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1666122585,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1665510000,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    let mut result = 1;\n    for i in 0..num {\n        result = result * (num + i) / (i + 1);\n    }\n    result\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1665510001,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `92378`,\n right: `16796`', /tmp/tmpj0c3vk7i.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1665510000,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1665510000,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    let mut catalan_numbers: Vec<isize> = vec![0; (num + 1) as usize];\n    catalan_numbers[0] = 1;\n    catalan_numbers[1] = 1;\n    for i in 2..=num {\n        let mut sum = 0;\n        for j in 0..i {\n            sum += catalan_numbers[j as usize] * catalan_numbers[(i - j - 1) as usize];\n        }\n        catalan_numbers[i as usize] = sum;\n    }\n    catalan_numbers[num as usize]\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1666122586,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1665510000,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    let mut catalan_numbers: Vec<isize> = vec![0; (num + 1) as usize];\n    catalan_numbers[0] = 1;\n    catalan_numbers[1] = 1;\n    for i in 2..=num {\n        for j in 0..i {\n            catalan_numbers[i as usize] += catalan_numbers[j as usize] * catalan_numbers[(i - j - 1) as usize];\n        }\n    }\n    catalan_numbers[num as usize]\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1665510001,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1665510000,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    if num <= 1 {\n        1\n    } else {\n        let mut res = 0;\n        for i in 0..num {\n            res += catalan_number(i) * catalan_number(num - i - 1);\n        }\n        res\n    }\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1665510000,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    let mut result = 1;\n    for i in 0..num {\n        result = result * (2 * num - i) / (i + 1);\n    }\n    result / (num + 1)\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1666122585,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    if num <= 1 {\n        return 1;\n    }\n\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1665510000,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1665510000,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    let mut catalan = vec![0; num as usize + 1];\n    catalan[0] = 1;\n    catalan[1] = 1;\n    for i in 2..num + 1 {\n        for j in 0..i {\n            catalan[i as usize] += catalan[j as usize] * catalan[(i - j - 1) as usize];\n        }\n    }\n    catalan[num as usize]\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1666122585,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    if num == 0 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1666122585,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    let mut res = 1;\n    for i in 0..num {\n        res = res * (num + i) / (i + 1);\n    }\n    res\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1665510001,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `92378`,\n right: `16796`', /tmp/tmpswy16t7x.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    let mut res = 1;\n    for i in 0..num {\n        res = res * (num + i) / (i + 1);\n    }\n    res / (num + 1)\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1666122585,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `8398`,\n right: `16796`', /tmp/tmpxpmg38tm.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1665510000,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    let mut result = 1;\n    for i in 0..num {\n        result = result * (2 * num - i) / (i + 1);\n    }\n    result / (num + 1)\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1666122585,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    let mut catalan: isize = 1;\n    for i in 0..num {\n        catalan = catalan * (2 * num - i) / (i + 1);\n    }\n    catalan\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1666122586,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `184756`,\n right: `16796`', /tmp/tmpc2927zmo.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1665510000,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1665510000,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    let mut catalan: Vec<isize> = vec![0; (num + 1) as usize];\n    catalan[0] = 1;\n    catalan[1] = 1;\n    for i in 2..num + 1 {\n        for j in 0..i {\n            catalan[i as usize] += catalan[j as usize] * catalan[(i - j - 1) as usize];\n        }\n    }\n    catalan[num as usize]\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1666122585,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    if num <= 1 {\n        return 1;\n    }\n\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1665510000,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    let mut catalan_numbers: Vec<isize> = vec![0; (num + 1) as usize];\n    catalan_numbers[0] = 1;\n    catalan_numbers[1] = 1;\n    for i in 2..num + 1 {\n        for j in 0..i {\n            catalan_numbers[i as usize] += catalan_numbers[j as usize] * catalan_numbers[(i - j - 1) as usize];\n        }\n    }\n    catalan_numbers[num as usize]\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1666122586,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    let mut catalan: isize = 1;\n    let mut i: isize = 0;\n    while i < num {\n        catalan = catalan * (2 * num - i) / (i + 1);\n        i += 1;\n    }\n    catalan\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1666122585,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `184756`,\n right: `16796`', /tmp/tmp08fh_x7p.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    if num <= 1 {\n        return 1;\n    }\n\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1665510000,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    let mut catalan: isize = 1;\n    for i in 0..num {\n        catalan = catalan * (2 * num - i) / (i + 1);\n    }\n    catalan / (num + 1)\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1665510000,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    if num <= 1 {\n        return 1;\n    }\n\n    let mut result = 0;\n    for i in 0..num {\n        result += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    result\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1666122585,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    let mut res = 1;\n    for i in 0..num {\n        res = res * (2 * num - i) / (i + 1);\n    }\n    res / (num + 1)\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1665510000,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    let mut catalan_number: isize = 1;\n    for i in 0..num {\n        catalan_number = catalan_number * (2 * num - i) / (i + 1);\n    }\n    catalan_number / (num + 1)\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1666122586,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    if num <= 1 {\n        return 1;\n    }\n\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1665510000,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1665510000,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1665510000,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    let mut res = 1;\n    for i in 0..num {\n        res *= (num + i);\n        res /= (i + 1);\n    }\n    res / (num + 1)\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1666122586,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `8398`,\n right: `16796`', /tmp/tmp1basmd_z.rs:13:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    if num == 0 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1666122585,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1665510000,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    if num == 0 {\n        return 1;\n    }\n\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n\n    res\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1666122586,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1665510000,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function which returns nth catalan number.\nfn catalan_number(num: isize) -> isize {\n    if num <= 1 {\n        return 1;\n    }\n    let mut res = 0;\n    for i in 0..num {\n        res += catalan_number(i) * catalan_number(num - i - 1);\n    }\n    res\n}\n\nfn main() {\n    let candidate = catalan_number;\n    assert_eq!(candidate(10), 16796);\n    assert_eq!(candidate(9), 4862);\n    assert_eq!(candidate(7), 429);\n}\n",
      "timestamp": 1665510000,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}