{
  "name": "mbpp_292_find",
  "language": "rs",
  "prompt": "/// Write a python function to find quotient of two numbers (rounded down to the nearest integer).\nfn find(n: isize, m: isize) -> isize {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_292_find.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\nfn main() {\n    let candidate = find;\n    assert_eq!(candidate(10, 3), 3);\n    assert_eq!(candidate(4, 2), 2);\n    assert_eq!(candidate(20, 5), 4);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    let mut i = 0;\n    let mut j = 0;\n    while i < n {\n        i += m;\n        j += 1;\n    }\n    j - 1",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    if n < m {\n        return 0;\n    }\n    let mut q = 1;\n    let mut r = n - m;\n    while r >= m {\n        r -= m;\n        q += 1;\n    }\n    q",
    "    if n == 0 {\n        return 0;\n    }\n    if m == 0 {\n        return 0;\n    }\n    if n < m {\n        return 0;\n    }\n    if n == m {\n        return 1;\n    }\n    let mut count = 0;\n    let mut sum = m;\n    while sum <= n {\n        sum += m;\n        count += 1;\n    }\n    count",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    if n < m {\n        return 0;\n    }\n    let mut count = 0;\n    let mut n = n;\n    while n >= m {\n        n -= m;\n        count += 1;\n    }\n    count",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m",
    "    n / m"
  ]
}