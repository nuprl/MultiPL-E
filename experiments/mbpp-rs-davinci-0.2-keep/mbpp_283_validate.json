{
  "name": "mbpp_283_validate",
  "language": "rs",
  "prompt": "/// Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfn validate(n: isize) -> bool {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_283_validate.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\nfn main() {\n    let candidate = validate;\n    assert_eq!(candidate(1234), true);\n    assert_eq!(candidate(51241), false);\n    assert_eq!(candidate(321), true);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        let count = digits.entry(digit).or_insert(0);\n        *count += 1;\n        n /= 10;\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        *digits.entry(digit).or_insert(0) += 1;\n        n /= 10;\n    }\n    digits.iter().all(|(&k, &v)| v <= k)",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        let count = digits.entry(digit).or_insert(0);\n        *count += 1;\n        n /= 10;\n    }\n    digits.into_iter().all(|(digit, count)| count <= digit)",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        let count = digits.entry(digit).or_insert(0);\n        *count += 1;\n        n /= 10;\n    }\n    for (digit, count) in digits {\n        if digit < count {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        *digits.entry(digit).or_insert(0) += 1;\n        n /= 10;\n    }\n    digits.iter().all(|(digit, count)| *count <= digit)",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        *digits.entry(digit).or_insert(0) += 1;\n        n /= 10;\n    }\n    digits.iter().all(|(digit, count)| count <= digit)",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        let count = digits.entry(digit).or_insert(0);\n        *count += 1;\n        n /= 10;\n    }\n    for (digit, count) in digits {\n        if digit < count {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        let count = digits.entry(digit).or_insert(0);\n        *count += 1;\n        n /= 10;\n    }\n    digits.iter().all(|(&digit, &count)| count <= digit)",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        *digits.entry(digit).or_insert(0) += 1;\n        n /= 10;\n    }\n    digits.iter().all(|(&digit, &freq)| freq <= digit)",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        *digits.entry(digit).or_insert(0) += 1;\n        n /= 10;\n    }\n    digits.iter().all(|(digit, count)| digit >= count)",
    "    let mut n = n;\n    let mut digits = vec![0; 10];\n    while n > 0 {\n        digits[(n % 10) as usize] += 1;\n        n /= 10;\n    }\n    digits.iter().enumerate().all(|(i, &c)| c <= i as isize)",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        let count = digits.entry(digit).or_insert(0);\n        *count += 1;\n        n /= 10;\n    }\n    for (digit, count) in digits {\n        if digit < count {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        *digits.entry(digit).or_insert(0) += 1;\n        n /= 10;\n    }\n    digits.into_iter().all(|(digit, freq)| freq <= digit)",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        *digits.entry(digit).or_insert(0) += 1;\n        n /= 10;\n    }\n    digits.iter().all(|(digit, freq)| *freq <= digit)",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        *digits.entry(digit).or_insert(0) += 1;\n        n /= 10;\n    }\n    digits.iter().all(|(&digit, &count)| count <= digit)",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        let count = digits.entry(digit).or_insert(0);\n        *count += 1;\n        n /= 10;\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    for c in n.to_string().chars() {\n        let count = digits.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in n.to_string().chars() {\n        if digits[&c] > c.to_digit(10).unwrap() as usize {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        let count = digits.entry(digit).or_insert(0);\n        *count += 1;\n        n /= 10;\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = n.to_string().chars().collect::<Vec<char>>();\n    digits.sort();\n    digits.dedup();\n    let mut counts = digits.iter().map(|&d| n.to_string().chars().filter(|&c| c == d).count() as isize).collect::<Vec<isize>>();\n    counts.sort();\n    counts.dedup();\n    counts.iter().zip(digits.iter().map(|&d| d.to_digit(10).unwrap() as isize)).all(|(c, d)| c <= d)",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        *digits.entry(digit).or_insert(0) += 1;\n        n /= 10;\n    }\n    digits.iter().all(|(k, v)| k >= v)",
    "    let mut digits = Vec::new();\n    let mut n = n;\n    while n > 0 {\n        digits.push(n % 10);\n        n /= 10;\n    }\n    digits.sort();\n    digits.dedup();\n    for d in digits {\n        let count = digits.iter().filter(|x| **x == d).count();\n        if count > d as usize {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        *digits.entry(digit).or_insert(0) += 1;\n        n /= 10;\n    }\n    digits.iter().all(|(&digit, &count)| count <= digit)",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        *digits.entry(digit).or_insert(0) += 1;\n        n /= 10;\n    }\n\n    for (digit, count) in digits {\n        if digit < count {\n            return false;\n        }\n    }\n\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let d = n % 10;\n        n /= 10;\n        let count = digits.entry(d).or_insert(0);\n        *count += 1;\n    }\n    digits.iter().all(|(&k, &v)| v <= k)",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        *digits.entry(digit).or_insert(0) += 1;\n        n /= 10;\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        *digits.entry(digit).or_insert(0) += 1;\n        n /= 10;\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        n /= 10;\n        *digits.entry(digit).or_insert(0) += 1;\n    }\n    digits.iter().all(|(&digit, &freq)| freq <= digit)",
    "    let mut digits = HashMap::new();\n    for c in n.to_string().chars() {\n        let count = digits.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in n.to_string().chars() {\n        let count = digits.entry(c).or_insert(0);\n        if *count > c.to_digit(10).unwrap() as usize {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        *digits.entry(digit).or_insert(0) += 1;\n        n /= 10;\n    }\n    digits.iter().all(|(&digit, &count)| count <= digit)",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        let count = digits.entry(digit).or_insert(0);\n        *count += 1;\n        n /= 10;\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        *digits.entry(digit).or_insert(0) += 1;\n        n /= 10;\n    }\n    digits.iter().all(|(digit, freq)| *freq <= digit)",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        *digits.entry(digit).or_insert(0) += 1;\n        n /= 10;\n    }\n    digits.iter().all(|(&digit, &count)| count <= digit)",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        *digits.entry(digit).or_insert(0) += 1;\n        n /= 10;\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        *digits.entry(digit).or_insert(0) += 1;\n        n /= 10;\n    }\n    digits.iter().all(|(&digit, &count)| count <= digit)",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        n /= 10;\n        let count = digits.entry(digit).or_insert(0);\n        *count += 1;\n    }\n    for (digit, count) in digits {\n        if digit < count {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = vec![0; 10];\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        digits[digit as usize] += 1;\n        n /= 10;\n    }\n    for i in 0..10 {\n        if digits[i] > i as isize {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        *digits.entry(digit).or_insert(0) += 1;\n        n /= 10;\n    }\n    digits.iter().all(|(&digit, &count)| count <= digit)",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        n /= 10;\n        let count = digits.entry(digit).or_insert(0);\n        *count += 1;\n    }\n    for (digit, count) in digits {\n        if digit < count {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        n /= 10;\n        *digits.entry(digit).or_insert(0) += 1;\n    }\n    for (digit, count) in digits {\n        if digit < count {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        *digits.entry(digit).or_insert(0) += 1;\n        n /= 10;\n    }\n    digits.iter().all(|(digit, freq)| *freq <= digit)",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        let count = digits.entry(digit).or_insert(0);\n        *count += 1;\n        n /= 10;\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        n /= 10;\n        let count = digits.entry(digit).or_insert(0);\n        *count += 1;\n    }\n    digits.iter().all(|(&digit, &count)| count <= digit)",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        if let Some(count) = digits.get(&digit) {\n            digits.insert(digit, count + 1);\n        } else {\n            digits.insert(digit, 1);\n        }\n        n /= 10;\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        n /= 10;\n        *digits.entry(digit).or_insert(0) += 1;\n    }\n\n    for (digit, count) in digits {\n        if count > digit {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        let count = digits.entry(digit).or_insert(0);\n        *count += 1;\n        n /= 10;\n    }\n\n    for (digit, count) in digits {\n        if count > digit {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        *digits.entry(digit).or_insert(0) += 1;\n        n /= 10;\n    }\n    digits.iter().all(|(&digit, &count)| count <= digit)",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        *digits.entry(digit).or_insert(0) += 1;\n        n /= 10;\n    }\n    digits.iter().all(|(digit, freq)| digit >= freq)",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        *digits.entry(digit).or_insert(0) += 1;\n        n /= 10;\n    }\n    digits.iter().all(|(digit, count)| *count <= digit)",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        n /= 10;\n        *digits.entry(digit).or_insert(0) += 1;\n    }\n    digits.into_iter().all(|(digit, freq)| freq <= digit)",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        n /= 10;\n        let count = digits.entry(digit).or_insert(0);\n        *count += 1;\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        let count = digits.entry(digit).or_insert(0);\n        *count += 1;\n        n /= 10;\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        let count = digits.entry(digit).or_insert(0);\n        *count += 1;\n        n /= 10;\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        *digits.entry(digit).or_insert(0) += 1;\n        n /= 10;\n    }\n    digits.iter().all(|(k, v)| *k >= *v)",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        n /= 10;\n        let count = digits.entry(digit).or_insert(0);\n        *count += 1;\n    }\n    digits.into_iter().all(|(digit, count)| count <= digit)",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        *digits.entry(digit).or_insert(0) += 1;\n        n /= 10;\n    }\n    digits.iter().all(|(&k, &v)| v <= k)",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        *digits.entry(digit).or_insert(0) += 1;\n        n /= 10;\n    }\n    digits.iter().all(|(&digit, &count)| count <= digit)",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        *digits.entry(digit).or_insert(0) += 1;\n        n /= 10;\n    }\n    digits.iter().all(|(&digit, &count)| count <= digit)",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        *digits.entry(digit).or_insert(0) += 1;\n        n /= 10;\n    }\n    digits.into_iter().all(|(digit, freq)| freq <= digit)",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        *digits.entry(digit).or_insert(0) += 1;\n        n /= 10;\n    }\n    digits.iter().all(|(digit, count)| digit >= count)",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        *digits.entry(digit).or_insert(0) += 1;\n        n /= 10;\n    }\n    digits.iter().all(|(&digit, &count)| count <= digit)",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        let count = digits.entry(digit).or_insert(0);\n        *count += 1;\n        n /= 10;\n    }\n    digits.iter().all(|(digit, count)| count <= digit)",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        *digits.entry(digit).or_insert(0) += 1;\n        n /= 10;\n    }\n    for (k, v) in digits {\n        if k < v {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        *digits.entry(digit).or_insert(0) += 1;\n        n /= 10;\n    }\n    digits.iter().all(|(&digit, &freq)| freq <= digit)",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        *digits.entry(digit).or_insert(0) += 1;\n        n /= 10;\n    }\n    digits.iter().all(|(digit, count)| count <= digit)",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        let count = digits.entry(digit).or_insert(0);\n        *count += 1;\n        n /= 10;\n    }\n    digits.iter().all(|(&digit, &count)| count <= digit)",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        let count = digits.entry(digit).or_insert(0);\n        *count += 1;\n        n /= 10;\n    }\n    digits.iter().all(|(&digit, &count)| count <= digit)",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        let count = digits.entry(digit).or_insert(0);\n        *count += 1;\n        n /= 10;\n    }\n\n    for (digit, count) in digits {\n        if count > digit {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        *digits.entry(digit).or_insert(0) += 1;\n        n /= 10;\n    }\n    digits.iter().all(|(digit, freq)| *freq <= digit)",
    "    let mut m = HashMap::new();\n    for c in n.to_string().chars() {\n        let count = m.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in n.to_string().chars() {\n        if m[&c] > c.to_digit(10).unwrap() as usize {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        n /= 10;\n        let count = digits.entry(digit).or_insert(0);\n        *count += 1;\n    }\n    digits.iter().all(|(&digit, &count)| count <= digit)",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        let count = digits.entry(digit).or_insert(0);\n        *count += 1;\n        n /= 10;\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        n /= 10;\n        let count = digits.entry(digit).or_insert(0);\n        *count += 1;\n    }\n    digits.iter().all(|(&k, &v)| k >= v)",
    "    let mut counts = [0; 10];\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        counts[digit as usize] += 1;\n        n /= 10;\n    }\n    counts.iter().enumerate().all(|(i, &count)| count <= i as isize)",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let d = n % 10;\n        n /= 10;\n        let count = digits.entry(d).or_insert(0);\n        *count += 1;\n    }\n    for (k, v) in digits {\n        if k < v {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        let count = digits.entry(digit).or_insert(0);\n        *count += 1;\n        n /= 10;\n    }\n\n    for (digit, count) in digits {\n        if count > digit {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        n /= 10;\n        let count = digits.entry(digit).or_insert(0);\n        *count += 1;\n    }\n    for (digit, count) in digits {\n        if digit < count {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    for c in n.to_string().chars() {\n        let count = digits.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in n.to_string().chars() {\n        if digits[&c] > c.to_digit(10).unwrap() as usize {\n            return false;\n        }\n    }\n    true",
    "    let mut counts = [0; 10];\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        counts[digit as usize] += 1;\n        n /= 10;\n    }\n    for (i, count) in counts.iter().enumerate() {\n        if count > &i {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        let count = digits.entry(digit).or_insert(0);\n        *count += 1;\n        n /= 10;\n    }\n    digits.iter().all(|(&digit, &count)| count <= digit)",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        *digits.entry(digit).or_insert(0) += 1;\n        n /= 10;\n    }\n    digits.iter().all(|(digit, count)| digit >= count)",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        let count = digits.entry(digit).or_insert(0);\n        *count += 1;\n        n /= 10;\n    }\n    digits.iter().all(|(&digit, &count)| count <= digit)",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        *digits.entry(digit).or_insert(0) += 1;\n        n /= 10;\n    }\n    digits.iter().all(|(&digit, &count)| count <= digit)",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        let count = digits.entry(digit).or_insert(0);\n        *count += 1;\n        n /= 10;\n    }\n\n    for (digit, count) in digits {\n        if count > digit {\n            return false;\n        }\n    }\n\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        *digits.entry(digit).or_insert(0) += 1;\n        n /= 10;\n    }\n    digits.iter().all(|(&digit, &count)| count <= digit)",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        *digits.entry(digit).or_insert(0) += 1;\n        n /= 10;\n    }\n    digits.iter().all(|(digit, count)| digit >= count)",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        *digits.entry(digit).or_insert(0) += 1;\n        n /= 10;\n    }\n    digits.iter().all(|(&digit, &count)| count <= digit)",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        *digits.entry(digit).or_insert(0) += 1;\n        n /= 10;\n    }\n\n    for (digit, count) in digits {\n        if digit < count {\n            return false;\n        }\n    }\n\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        let count = digits.entry(digit).or_insert(0);\n        *count += 1;\n        n /= 10;\n    }\n    digits.iter().all(|(digit, count)| digit >= count)",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        let entry = digits.entry(digit).or_insert(0);\n        *entry += 1;\n        n /= 10;\n    }\n    for (digit, count) in digits {\n        if digit < count {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        n /= 10;\n        let count = digits.entry(digit).or_insert(0);\n        *count += 1;\n    }\n    digits.iter().all(|(&digit, &count)| count <= digit)",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        *digits.entry(digit).or_insert(0) += 1;\n        n /= 10;\n    }\n    digits.iter().all(|(k, v)| *k >= v)",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let d = n % 10;\n        *digits.entry(d).or_insert(0) += 1;\n        n /= 10;\n    }\n    for (k, v) in digits {\n        if k < v {\n            return false;\n        }\n    }\n    true",
    "    let mut freq = [0; 10];\n    for c in n.to_string().chars() {\n        freq[c.to_digit(10).unwrap() as usize] += 1;\n    }\n    for (i, &f) in freq.iter().enumerate() {\n        if i == 0 {\n            continue;\n        }\n        if f > i as isize {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        *digits.entry(digit).or_insert(0) += 1;\n        n /= 10;\n    }\n    for (digit, count) in digits {\n        if digit < count {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        *digits.entry(digit).or_insert(0) += 1;\n        n /= 10;\n    }\n    digits.into_iter().all(|(digit, count)| count <= digit)",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        let count = digits.entry(digit).or_insert(0);\n        *count += 1;\n        n /= 10;\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    for c in n.to_string().chars() {\n        *digits.entry(c).or_insert(0) += 1;\n    }\n    for (k, v) in digits {\n        if v > k.to_digit(10).unwrap() as usize {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        *digits.entry(digit).or_insert(0) += 1;\n        n /= 10;\n    }\n    digits.iter().all(|(digit, freq)| *freq <= digit)",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        *digits.entry(digit).or_insert(0) += 1;\n        n /= 10;\n    }\n    digits.iter().all(|(&digit, &freq)| freq <= digit)",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        n /= 10;\n        let count = digits.entry(digit).or_insert(0);\n        *count += 1;\n    }\n    for (digit, count) in digits {\n        if digit < count {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        *digits.entry(digit).or_insert(0) += 1;\n        n /= 10;\n    }\n    digits.iter().all(|(&k, &v)| v <= k)",
    "    let mut n = n;\n    let mut digits = [0; 10];\n    while n > 0 {\n        let digit = n % 10;\n        digits[digit as usize] += 1;\n        n /= 10;\n    }\n    for i in 0..10 {\n        if digits[i] > i {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        let count = digits.entry(digit).or_insert(0);\n        *count += 1;\n        n /= 10;\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        n /= 10;\n        let count = digits.entry(digit).or_insert(0);\n        *count += 1;\n    }\n    digits.iter().all(|(&digit, &count)| count <= digit)",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        *digits.entry(digit).or_insert(0) += 1;\n        n /= 10;\n    }\n    digits.iter().all(|(&digit, &count)| count <= digit)",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        *digits.entry(digit).or_insert(0) += 1;\n        n /= 10;\n    }\n    digits.iter().all(|(&k, &v)| v <= k)",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        let count = digits.entry(digit).or_insert(0);\n        *count += 1;\n        n /= 10;\n    }\n\n    for (digit, count) in digits.iter() {\n        if *count > digit {\n            return false;\n        }\n    }\n\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        let count = digits.entry(digit).or_insert(0);\n        *count += 1;\n        n /= 10;\n    }\n    for (digit, count) in digits {\n        if digit < count {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    for c in n.to_string().chars() {\n        let count = digits.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in n.to_string().chars() {\n        if digits.get(&c).unwrap() > &c.to_digit(10).unwrap() {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        *digits.entry(digit).or_insert(0) += 1;\n        n /= 10;\n    }\n    digits.iter().all(|(&digit, &freq)| freq <= digit)",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        let count = digits.entry(digit).or_insert(0);\n        *count += 1;\n        n /= 10;\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    for c in n.to_string().chars() {\n        let count = digits.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in n.to_string().chars() {\n        let count = digits.get(&c).unwrap();\n        if count > &(c.to_digit(10).unwrap() as isize) {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        *digits.entry(digit).or_insert(0) += 1;\n        n /= 10;\n    }\n\n    for (digit, freq) in digits {\n        if digit < freq {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        let count = digits.entry(digit).or_insert(0);\n        *count += 1;\n        n /= 10;\n    }\n    for (digit, count) in digits {\n        if digit < count {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        *digits.entry(digit).or_insert(0) += 1;\n        n /= 10;\n    }\n    digits.iter().all(|(digit, count)| digit >= count)",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        let count = digits.entry(digit).or_insert(0);\n        *count += 1;\n        n /= 10;\n    }\n    digits.iter().all(|(digit, count)| digit >= count)",
    "    let mut digits = HashMap::new();\n    for c in n.to_string().chars() {\n        let count = digits.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in n.to_string().chars() {\n        let count = digits.get(&c).unwrap();\n        if *count > c.to_digit(10).unwrap() as usize {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        *digits.entry(digit).or_insert(0) += 1;\n        n /= 10;\n    }\n    digits.iter().all(|(&k, &v)| v <= k)",
    "    let mut digits = HashMap::new();\n    for c in n.to_string().chars() {\n        let count = digits.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in n.to_string().chars() {\n        let count = digits.get(&c).unwrap();\n        if count > &(c.to_digit(10).unwrap() as isize) {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        let count = digits.entry(digit).or_insert(0);\n        *count += 1;\n        n /= 10;\n    }\n    digits.iter().all(|(&digit, &count)| count <= digit)",
    "    let mut digits = HashMap::new();\n    for c in n.to_string().chars() {\n        let count = digits.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in n.to_string().chars() {\n        let count = digits.get(&c).unwrap();\n        if count > &(c.to_digit(10).unwrap() as isize) {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        let count = digits.entry(digit).or_insert(0);\n        *count += 1;\n        n /= 10;\n    }\n    digits.iter().all(|(&digit, &count)| count <= digit)",
    "    let mut m = n;\n    let mut digits = [0; 10];\n    while m > 0 {\n        let d = m % 10;\n        digits[d as usize] += 1;\n        m /= 10;\n    }\n    for i in 0..10 {\n        if digits[i] > i {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        let count = digits.entry(digit).or_insert(0);\n        *count += 1;\n        n /= 10;\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        *digits.entry(digit).or_insert(0) += 1;\n        n /= 10;\n    }\n    digits.iter().all(|(&k, &v)| v <= k)",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        let count = digits.entry(digit).or_insert(0);\n        *count += 1;\n        n /= 10;\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        n /= 10;\n        digits.entry(digit).and_modify(|count| *count += 1).or_insert(1);\n    }\n    digits.iter().all(|(digit, count)| *count <= *digit)",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        *digits.entry(digit).or_insert(0) += 1;\n        n /= 10;\n    }\n    digits.iter().all(|(k, v)| k >= v)",
    "    let mut counts = [0; 10];\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        counts[digit as usize] += 1;\n        n /= 10;\n    }\n    counts.iter().enumerate().all(|(i, &count)| count <= i as isize)",
    "    let mut counts = [0; 10];\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        counts[digit as usize] += 1;\n        n /= 10;\n    }\n    for (i, &count) in counts.iter().enumerate() {\n        if count > i as isize {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        let count = digits.entry(digit).or_insert(0);\n        *count += 1;\n        n /= 10;\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    for c in n.to_string().chars() {\n        let count = digits.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in n.to_string().chars() {\n        let count = digits.entry(c).or_insert(0);\n        if *count > c.to_digit(10).unwrap() as usize {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    for c in n.to_string().chars() {\n        let count = digits.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in n.to_string().chars() {\n        let count = digits.get(&c).unwrap();\n        if *count > c.to_digit(10).unwrap() as usize {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        let count = digits.entry(digit).or_insert(0);\n        *count += 1;\n        n /= 10;\n    }\n    digits.iter().all(|(&digit, &count)| count <= digit)",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        *digits.entry(digit).or_insert(0) += 1;\n        n /= 10;\n    }\n    digits.iter().all(|(&digit, &count)| count <= digit)",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        let count = digits.entry(digit).or_insert(0);\n        *count += 1;\n        n /= 10;\n    }\n\n    for (digit, count) in digits {\n        if count > digit {\n            return false;\n        }\n    }\n\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        *digits.entry(digit).or_insert(0) += 1;\n        n /= 10;\n    }\n    digits.into_iter().all(|(digit, freq)| digit >= freq)",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        let count = digits.entry(digit).or_insert(0);\n        *count += 1;\n        n /= 10;\n    }\n    digits.iter().all(|(&digit, &count)| count <= digit)",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        *digits.entry(digit).or_insert(0) += 1;\n        n /= 10;\n    }\n    digits.iter().all(|(&digit, &count)| count <= digit)",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        *digits.entry(digit).or_insert(0) += 1;\n        n /= 10;\n    }\n    digits.iter().all(|(digit, freq)| *freq <= digit)",
    "    let mut digits = HashMap::new();\n    for c in n.to_string().chars() {\n        let count = digits.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in n.to_string().chars() {\n        if digits[&c] > c.to_digit(10).unwrap() as isize {\n            return false;\n        }\n    }\n    true",
    "    let mut freq = [0; 10];\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        freq[digit as usize] += 1;\n        n /= 10;\n    }\n    for (i, &f) in freq.iter().enumerate() {\n        if f > i as isize {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    for c in n.to_string().chars() {\n        let count = digits.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in n.to_string().chars() {\n        let count = digits.get(&c).unwrap();\n        if count > &(c.to_digit(10).unwrap() as isize) {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        let count = digits.entry(digit).or_insert(0);\n        *count += 1;\n        n /= 10;\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    for c in n.to_string().chars() {\n        let count = digits.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in n.to_string().chars() {\n        let count = digits.get(&c).unwrap();\n        if count > &(c.to_digit(10).unwrap() as isize) {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        n /= 10;\n        let count = digits.entry(digit).or_insert(0);\n        *count += 1;\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        let count = digits.entry(digit).or_insert(0);\n        *count += 1;\n        n /= 10;\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false;\n        }\n    }\n    true",
    "    let mut counts = [0; 10];\n    for c in n.to_string().chars() {\n        counts[c.to_digit(10).unwrap() as usize] += 1;\n    }\n    for (i, &count) in counts.iter().enumerate() {\n        if i == 0 {\n            continue;\n        }\n        if count > i as isize {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        n /= 10;\n        *digits.entry(digit).or_insert(0) += 1;\n    }\n    digits.iter().all(|(digit, count)| *count <= digit)",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        let count = digits.entry(digit).or_insert(0);\n        *count += 1;\n        n /= 10;\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        *digits.entry(digit).or_insert(0) += 1;\n        n /= 10;\n    }\n    digits.iter().all(|(&k, &v)| v <= k)",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        *digits.entry(digit).or_insert(0) += 1;\n        n /= 10;\n    }\n    digits.iter().all(|(&digit, &count)| count <= digit)",
    "    let mut digits = HashMap::new();\n\n    for c in n.to_string().chars() {\n        let count = digits.entry(c).or_insert(0);\n        *count += 1;\n    }\n\n    for c in n.to_string().chars() {\n        let count = digits.get(&c).unwrap();\n        if count > &(c.to_digit(10).unwrap() as isize) {\n            return false;\n        }\n    }\n\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        *digits.entry(digit).or_insert(0) += 1;\n        n /= 10;\n    }\n    digits.iter().all(|(digit, freq)| digit >= freq)",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        let count = digits.entry(digit).or_insert(0);\n        *count += 1;\n        n /= 10;\n    }\n\n    for (digit, count) in digits {\n        if count > digit {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    for c in n.to_string().chars() {\n        let count = digits.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in n.to_string().chars() {\n        let count = digits.get(&c).unwrap();\n        if count > &(c.to_digit(10).unwrap() as usize) {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        *digits.entry(digit).or_insert(0) += 1;\n        n /= 10;\n    }\n    digits.iter().all(|(&digit, &count)| count <= digit)",
    "    let s = n.to_string();\n    let mut counts = [0; 10];\n    for c in s.chars() {\n        counts[c.to_digit(10).unwrap() as usize] += 1;\n    }\n    for (i, &c) in counts.iter().enumerate() {\n        if c > i as isize {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        let count = digits.entry(digit).or_insert(0);\n        *count += 1;\n        n /= 10;\n    }\n\n    for (digit, count) in digits {\n        if count > digit {\n            return false;\n        }\n    }\n\n    true",
    "    let mut digits = HashMap::new();\n    for c in n.to_string().chars() {\n        let count = digits.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in n.to_string().chars() {\n        if digits[&c] > c.to_digit(10).unwrap() as usize {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let d = n % 10;\n        n /= 10;\n        let count = digits.entry(d).or_insert(0);\n        *count += 1;\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        *digits.entry(digit).or_insert(0) += 1;\n        n /= 10;\n    }\n    digits.iter().all(|(&digit, &count)| count <= digit)",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        if digits.contains_key(&digit) {\n            *digits.get_mut(&digit).unwrap() += 1;\n        } else {\n            digits.insert(digit, 1);\n        }\n        n /= 10;\n    }\n    for (digit, freq) in digits {\n        if freq > digit {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        *digits.entry(digit).or_insert(0) += 1;\n        n /= 10;\n    }\n    digits.iter().all(|(&digit, &count)| count <= digit)",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        *digits.entry(digit).or_insert(0) += 1;\n        n /= 10;\n    }\n    for (digit, freq) in digits {\n        if digit < freq {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        let count = digits.entry(digit).or_insert(0);\n        *count += 1;\n        n /= 10;\n    }\n    digits.into_iter().all(|(digit, count)| count <= digit)",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        let count = digits.entry(digit).or_insert(0);\n        *count += 1;\n        n /= 10;\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        let count = digits.entry(digit).or_insert(0);\n        *count += 1;\n        n /= 10;\n    }\n    digits.iter().all(|(&digit, &count)| count <= digit)",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        *digits.entry(digit).or_insert(0) += 1;\n        n /= 10;\n    }\n    digits.iter().all(|(&k, &v)| v <= k)",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        *digits.entry(digit).or_insert(0) += 1;\n        n /= 10;\n    }\n    digits.iter().all(|(&digit, &count)| count <= digit)",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        n /= 10;\n        let count = digits.entry(digit).or_insert(0);\n        *count += 1;\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false;\n        }\n    }\n    true",
    "    let mut freq = [0; 10];\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        freq[digit as usize] += 1;\n        n /= 10;\n    }\n    for i in 0..10 {\n        if freq[i] > i {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        let count = digits.entry(digit).or_insert(0);\n        *count += 1;\n        n /= 10;\n    }\n    digits.iter().all(|(digit, count)| count <= digit)",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        n /= 10;\n        if let Some(count) = digits.get(&digit) {\n            digits.insert(digit, count + 1);\n        } else {\n            digits.insert(digit, 1);\n        }\n    }\n    for (digit, count) in digits.iter() {\n        if *count > digit {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        n /= 10;\n        *digits.entry(digit).or_insert(0) += 1;\n    }\n    digits.iter().all(|(digit, count)| *count <= digit)",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        let count = digits.entry(digit).or_insert(0);\n        *count += 1;\n        n /= 10;\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        *digits.entry(digit).or_insert(0) += 1;\n        n /= 10;\n    }\n    digits.iter().all(|(&digit, &count)| count <= digit)",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        let count = digits.entry(digit).or_insert(0);\n        *count += 1;\n        n /= 10;\n    }\n    for (digit, count) in digits {\n        if digit < count {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    for c in n.to_string().chars() {\n        let count = digits.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in n.to_string().chars() {\n        let count = digits.get(&c).unwrap();\n        if count > &(c.to_digit(10).unwrap() as isize) {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        *digits.entry(digit).or_insert(0) += 1;\n        n /= 10;\n    }\n    digits.iter().all(|(&digit, &count)| count <= digit)",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        *digits.entry(digit).or_insert(0) += 1;\n        n /= 10;\n    }\n    digits.iter().all(|(&digit, &count)| count <= digit)",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        *digits.entry(digit).or_insert(0) += 1;\n        n /= 10;\n    }\n\n    for (digit, count) in digits {\n        if count > digit {\n            return false;\n        }\n    }\n\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        n /= 10;\n        let count = digits.entry(digit).or_insert(0);\n        *count += 1;\n    }\n    for (digit, count) in digits {\n        if digit < count {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        let count = digits.entry(digit).or_insert(0);\n        *count += 1;\n        n /= 10;\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        let count = digits.entry(digit).or_insert(0);\n        *count += 1;\n        n /= 10;\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        let count = digits.entry(digit).or_insert(0);\n        *count += 1;\n        n /= 10;\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        *digits.entry(digit).or_insert(0) += 1;\n        n /= 10;\n    }\n    digits.iter().all(|(&digit, &count)| count <= digit)",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        *digits.entry(digit).or_insert(0) += 1;\n        n /= 10;\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        *digits.entry(digit).or_insert(0) += 1;\n        n /= 10;\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    for c in n.to_string().chars() {\n        let count = digits.entry(c).or_insert(0);\n        *count += 1;\n    }\n    for c in n.to_string().chars() {\n        let count = digits.get(&c).unwrap();\n        if count > &(c.to_digit(10).unwrap() as isize) {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let d = n % 10;\n        n /= 10;\n        *digits.entry(d).or_insert(0) += 1;\n    }\n    for (k, v) in digits {\n        if k < v {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        *digits.entry(digit).or_insert(0) += 1;\n        n /= 10;\n    }\n    digits.iter().all(|(&k, &v)| v <= k)",
    "    let mut freq = [0; 10];\n    let mut n = n;\n    while n > 0 {\n        let d = n % 10;\n        freq[d as usize] += 1;\n        n /= 10;\n    }\n    for i in 0..10 {\n        if freq[i] > i as isize {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        let count = digits.entry(digit).or_insert(0);\n        *count += 1;\n        n /= 10;\n    }\n    digits.iter().all(|(digit, count)| digit >= count)",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        n /= 10;\n        let count = digits.entry(digit).or_insert(0);\n        *count += 1;\n    }\n    for (digit, count) in digits {\n        if count > digit {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        let count = digits.entry(digit).or_insert(0);\n        *count += 1;\n        n /= 10;\n    }\n    digits.iter().all(|(&digit, &count)| count <= digit)",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        let count = digits.entry(digit).or_insert(0);\n        *count += 1;\n        n /= 10;\n    }\n    for (digit, count) in digits {\n        if digit < count {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        let count = digits.entry(digit).or_insert(0);\n        *count += 1;\n        n /= 10;\n    }\n    for (digit, count) in digits {\n        if digit < count {\n            return false;\n        }\n    }\n    true",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        *digits.entry(digit).or_insert(0) += 1;\n        n /= 10;\n    }\n    digits.iter().all(|(digit, count)| *count <= digit)",
    "    let mut digits = HashMap::new();\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        let count = digits.entry(digit).or_insert(0);\n        *count += 1;\n        n /= 10;\n    }\n    digits.iter().all(|(&digit, &count)| count <= digit)"
  ]
}