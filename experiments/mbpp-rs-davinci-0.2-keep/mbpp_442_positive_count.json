{
  "name": "mbpp_442_positive_count",
  "language": "rs",
  "prompt": "/// Write a function to find the ration of positive numbers in an array of integers.\nfn positive_count(nums: Vec<isize>) -> f64 {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_442_positive_count.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\nfn main() {\n    let candidate = positive_count;\n    assert_eq!(candidate(vec![0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]), 0.54);\n    assert_eq!(candidate(vec![2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 0.69);\n    assert_eq!(candidate(vec![2, 4, -6, -9, 11, -12, 14, -5, 17]), 0.56);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    let mut count = 0;\n    for num in nums {\n        if num > 0 {\n            count += 1;\n        }\n    }\n    (count as f64) / (nums.len() as f64)",
    "    let mut count = 0;\n    for num in nums {\n        if num > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for num in nums {\n        if num > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for num in nums {\n        if num > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for num in nums {\n        if num > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for num in nums {\n        if num > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for i in nums {\n        if i > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for i in nums {\n        if i > 0 {\n            count += 1;\n        }\n    }\n    return (count as f64) / (nums.len() as f64);",
    "    let mut count = 0;\n    for i in nums {\n        if i > 0 {\n            count += 1;\n        }\n    }\n    (count as f64) / (nums.len() as f64)",
    "    let mut count = 0;\n    for num in nums {\n        if num > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for num in nums {\n        if num > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for num in nums {\n        if num > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for num in nums {\n        if num > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for num in nums {\n        if num > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for num in nums {\n        if num > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for num in nums {\n        if num > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for num in nums {\n        if num > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for n in nums {\n        if n > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for num in nums {\n        if num > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for num in nums {\n        if num > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for i in nums {\n        if i > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for num in nums {\n        if num > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for num in nums {\n        if num > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for num in nums {\n        if num > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for i in nums {\n        if i > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for num in nums {\n        if num > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for num in nums {\n        if num > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for i in nums {\n        if i > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for num in nums {\n        if num > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for num in nums {\n        if num > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for num in nums {\n        if num > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for num in nums {\n        if num > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for num in nums {\n        if num > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for num in nums {\n        if num > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for i in nums {\n        if i > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for num in nums {\n        if num > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for num in nums {\n        if num > 0 {\n            count += 1;\n        }\n    }\n    (count as f64) / (nums.len() as f64)",
    "    let mut count = 0;\n    for num in nums {\n        if num > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for num in nums {\n        if num > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for i in nums {\n        if i > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for num in nums {\n        if num > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for num in nums {\n        if num > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for i in nums {\n        if i > 0 {\n            count += 1;\n        }\n    }\n    (count as f64) / (nums.len() as f64)",
    "    let mut count = 0;\n    for num in nums {\n        if num > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for num in nums {\n        if num > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for num in nums {\n        if num > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for num in nums {\n        if num > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for num in nums {\n        if num > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for num in nums {\n        if num > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for num in nums {\n        if num > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for num in nums {\n        if num > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for i in nums {\n        if i > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for i in nums {\n        if i > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for num in nums {\n        if num > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for num in nums {\n        if num > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for num in nums {\n        if num > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for num in nums {\n        if num > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for i in nums {\n        if i > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for n in nums {\n        if n > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for num in nums {\n        if num > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for num in nums {\n        if num > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for num in nums {\n        if num > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for num in nums {\n        if num > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count: usize = 0;\n    for num in nums {\n        if num > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for i in nums {\n        if i > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for num in nums {\n        if num > 0 {\n            count += 1;\n        }\n    }\n    return count as f64 / nums.len() as f64;",
    "    let mut count = 0;\n    for num in nums {\n        if num > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for num in nums {\n        if num > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut pos_count = 0;\n    for num in nums {\n        if num > 0 {\n            pos_count += 1;\n        }\n    }\n    pos_count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for num in nums {\n        if num > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for num in nums {\n        if num > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for num in nums {\n        if num > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for num in nums {\n        if num > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for num in nums {\n        if num > 0 {\n            count += 1;\n        }\n    }\n    return count as f64 / nums.len() as f64;",
    "    let mut count = 0;\n    for num in nums {\n        if num > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for num in nums {\n        if num > 0 {\n            count += 1;\n        }\n    }\n    return (count as f64) / (nums.len() as f64);",
    "    let mut count = 0;\n    for num in nums {\n        if num > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for i in nums {\n        if i > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for num in nums {\n        if num > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for i in nums {\n        if i > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for num in nums {\n        if num > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for num in nums {\n        if num > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for n in nums {\n        if n > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for num in nums {\n        if num > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for num in nums {\n        if num > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for num in nums {\n        if num > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for num in nums {\n        if num > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for i in nums {\n        if i > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for i in nums {\n        if i > 0 {\n            count += 1;\n        }\n    }\n    (count as f64) / (nums.len() as f64)",
    "    let mut count = 0;\n    for num in nums {\n        if num > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for num in nums {\n        if num > 0 {\n            count += 1;\n        }\n    }\n    (count as f64) / (nums.len() as f64)",
    "    let mut count = 0;\n    for i in nums {\n        if i > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for num in nums {\n        if num > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for num in nums {\n        if num > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for num in nums {\n        if num > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for num in nums {\n        if num > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for num in nums {\n        if num > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for num in nums {\n        if num > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for num in nums {\n        if num > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for i in nums {\n        if i > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for num in nums {\n        if num > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for num in nums {\n        if num > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for num in nums {\n        if num > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for num in nums {\n        if num > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for num in nums {\n        if num > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for i in nums {\n        if i > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for num in nums {\n        if num > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for num in nums {\n        if num > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for num in nums {\n        if num > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for num in nums {\n        if num > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for i in nums {\n        if i > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for num in nums {\n        if num > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for num in nums {\n        if num > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for num in nums {\n        if num > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for i in nums {\n        if i > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for num in nums {\n        if num > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for n in nums {\n        if n > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for num in nums {\n        if num > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for i in nums {\n        if i > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for num in nums {\n        if num > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for i in nums {\n        if i > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for num in nums {\n        if num > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    nums.iter().filter(|&n| *n > 0).count() as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for i in nums {\n        if i > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for num in nums {\n        if num > 0 {\n            count += 1;\n        }\n    }\n    (count as f64) / (nums.len() as f64)",
    "    let mut count = 0;\n    for num in nums {\n        if num > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for num in nums {\n        if num > 0 {\n            count += 1;\n        }\n    }\n    return count as f64 / nums.len() as f64;",
    "    let mut count = 0;\n    for num in nums {\n        if num > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for num in nums {\n        if num > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for i in nums {\n        if i > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for num in nums {\n        if num > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for num in nums {\n        if num > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for num in nums {\n        if num > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for num in nums {\n        if num > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for num in nums {\n        if num > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for num in nums {\n        if num > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for num in nums {\n        if num > 0 {\n            count += 1;\n        }\n    }\n    (count as f64) / (nums.len() as f64)",
    "    let mut count = 0;\n    for i in nums {\n        if i > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for num in nums {\n        if num > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for num in nums {\n        if num > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count: isize = 0;\n    for i in nums {\n        if i > 0 {\n            count += 1;\n        }\n    }\n    return (count as f64) / (nums.len() as f64);",
    "    let mut count = 0;\n    for num in nums {\n        if num > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for i in nums {\n        if i > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for num in nums {\n        if num > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for num in nums {\n        if num > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for num in nums {\n        if num > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for num in nums {\n        if num > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for num in nums {\n        if num > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for i in nums {\n        if i > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for num in nums {\n        if num > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for i in nums {\n        if i > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for num in nums {\n        if num > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for num in nums {\n        if num > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for num in nums {\n        if num > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for num in nums {\n        if num > 0 {\n            count += 1;\n        }\n    }\n    (count as f64) / (nums.len() as f64)",
    "    let mut count = 0;\n    for num in nums {\n        if num > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for num in nums {\n        if num > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for num in nums {\n        if num > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for num in nums {\n        if num > 0 {\n            count += 1;\n        }\n    }\n    (count as f64) / (nums.len() as f64)",
    "    let mut count = 0;\n    for num in nums {\n        if num > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for num in nums {\n        if num > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for num in nums {\n        if num > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for num in nums {\n        if num > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for num in nums {\n        if num > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for num in nums {\n        if num > 0 {\n            count += 1;\n        }\n    }\n    return count as f64 / nums.len() as f64;",
    "    let mut count = 0;\n    for i in nums {\n        if i > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for num in nums {\n        if num > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for num in nums {\n        if num > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for num in nums {\n        if num > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for num in nums {\n        if num > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for num in nums {\n        if num > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for num in nums {\n        if num > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for num in nums {\n        if num > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for num in nums.iter() {\n        if *num > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for num in nums {\n        if num > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut positive_count = 0;\n    for num in nums {\n        if num > 0 {\n            positive_count += 1;\n        }\n    }\n    positive_count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for num in nums {\n        if num > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for i in nums {\n        if i > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for num in nums {\n        if num > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for i in nums {\n        if i > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for num in nums {\n        if num > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for num in nums {\n        if num > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for num in nums {\n        if num > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for num in nums {\n        if num > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for num in nums.iter() {\n        if *num > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for n in nums {\n        if n > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for num in nums.iter() {\n        if *num > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for num in nums {\n        if num > 0 {\n            count += 1;\n        }\n    }\n    (count as f64) / (nums.len() as f64)",
    "    let mut count = 0;\n    for n in nums {\n        if n > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for num in nums {\n        if num > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for num in nums {\n        if num > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for num in nums {\n        if num > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for i in nums {\n        if i > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for i in nums {\n        if i > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for i in nums {\n        if i > 0 {\n            count += 1;\n        }\n    }\n    (count as f64) / (nums.len() as f64)",
    "    let mut count = 0;\n    for num in nums {\n        if num > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for num in nums {\n        if num > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut pos_count = 0;\n    for num in nums {\n        if num > 0 {\n            pos_count += 1;\n        }\n    }\n    pos_count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for i in nums {\n        if i > 0 {\n            count += 1;\n        }\n    }\n    count as f64 / nums.len() as f64",
    "    let mut count = 0;\n    for i in nums {\n        if i > 0 {\n            count += 1;\n        }\n    }\n    return (count as f64) / (nums.len() as f64);"
  ]
}