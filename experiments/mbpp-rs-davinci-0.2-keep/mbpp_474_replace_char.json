{
  "name": "mbpp_474_replace_char",
  "language": "rs",
  "prompt": "/// Write a function to replace characters in a string.\nfn replace_char(str1: String, ch: String, newch: String) -> String {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_474_replace_char.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\nfn main() {\n    let candidate = replace_char;\n    assert_eq!(candidate(String::from(\"polygon\"), String::from(\"y\"), String::from(\"l\")), String::from(\"pollgon\"));\n    assert_eq!(candidate(String::from(\"character\"), String::from(\"c\"), String::from(\"a\")), String::from(\"aharaater\"));\n    assert_eq!(candidate(String::from(\"python\"), String::from(\"l\"), String::from(\"a\")), String::from(\"python\"));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    str1.replace(ch, newch)",
    "    let mut newstr = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            newstr.push_str(&newch);\n        } else {\n            newstr.push(c);\n        }\n    }\n    newstr",
    "    str1.replace(ch, newch)",
    "    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            new_str.push_str(&newch);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str",
    "    let mut newstr = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            newstr.push_str(&newch);\n        } else {\n            newstr.push(c);\n        }\n    }\n    newstr",
    "    let mut newstr = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            newstr.push_str(&newch);\n        } else {\n            newstr.push(c);\n        }\n    }\n    newstr",
    "    str1.replace(ch, newch)",
    "    str1.replace(ch, newch)",
    "    let mut newstr = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            newstr.push_str(&newch);\n        } else {\n            newstr.push(c);\n        }\n    }\n    newstr",
    "    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            new_str.push_str(&newch);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str",
    "    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            new_str.push_str(&newch);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str",
    "    str1.replace(ch, newch)",
    "    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            new_str.push_str(&newch);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str",
    "    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            new_str.push_str(&newch);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str",
    "    str1.replace(ch, newch)",
    "    let mut result = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            result.push_str(&newch);\n        } else {\n            result.push(c);\n        }\n    }\n    result",
    "    str1.replace(ch, newch)",
    "    let mut str2 = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            str2.push_str(&newch);\n        } else {\n            str2.push(c);\n        }\n    }\n    str2",
    "    let mut newstr = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            newstr.push_str(&newch);\n        } else {\n            newstr.push(c);\n        }\n    }\n    newstr",
    "    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            new_str.push_str(&newch);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str",
    "    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            new_str.push_str(&newch);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str",
    "    let mut newstr = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            newstr.push_str(&newch);\n        } else {\n            newstr.push(c);\n        }\n    }\n    newstr",
    "    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            new_str.push_str(&newch);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str",
    "    str1.replace(ch, newch)",
    "    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            new_str.push_str(&newch);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str",
    "    let mut newstr = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            newstr.push_str(&newch);\n        } else {\n            newstr.push(c);\n        }\n    }\n    newstr",
    "    let mut result = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            result.push_str(&newch);\n        } else {\n            result.push(c);\n        }\n    }\n    result",
    "    let mut newstr = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            newstr.push_str(&newch);\n        } else {\n            newstr.push(c);\n        }\n    }\n    newstr",
    "    let mut newstr = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            newstr.push_str(&newch);\n        } else {\n            newstr.push(c);\n        }\n    }\n    newstr",
    "    let mut result = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            result.push_str(&newch);\n        } else {\n            result.push(c);\n        }\n    }\n    result",
    "    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            new_str.push_str(&newch);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str",
    "    let mut newstr = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            newstr.push_str(&newch);\n        } else {\n            newstr.push(c);\n        }\n    }\n    newstr",
    "    let mut newstr = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            newstr.push_str(&newch);\n        } else {\n            newstr.push(c);\n        }\n    }\n    newstr",
    "    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            new_str.push_str(&newch);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str",
    "    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            new_str.push_str(&newch);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str",
    "    let mut result = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            result.push_str(&newch);\n        } else {\n            result.push(c);\n        }\n    }\n    result",
    "    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            new_str.push_str(&newch);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str",
    "    let mut newstr = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            newstr.push_str(&newch);\n        } else {\n            newstr.push(c);\n        }\n    }\n    newstr",
    "    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            new_str.push_str(&newch);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str",
    "    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            new_str.push_str(&newch);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str",
    "    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            new_str.push_str(&newch);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str",
    "    let mut result = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            result.push_str(&newch);\n        } else {\n            result.push(c);\n        }\n    }\n    result",
    "    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            new_str.push_str(&newch);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str",
    "    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            new_str.push_str(&newch);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str",
    "    let mut newstr = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            newstr.push_str(&newch);\n        } else {\n            newstr.push(c);\n        }\n    }\n    newstr",
    "    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            new_str.push_str(&newch);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str",
    "    let mut str2 = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            str2.push_str(&newch);\n        } else {\n            str2.push(c);\n        }\n    }\n    str2",
    "    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            new_str.push_str(&newch);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str",
    "    let mut str2 = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            str2.push_str(&newch);\n        } else {\n            str2.push(c);\n        }\n    }\n    str2",
    "    let mut result = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            result.push_str(&newch);\n        } else {\n            result.push(c);\n        }\n    }\n    result",
    "    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            new_str.push_str(&newch);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str",
    "    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            new_str.push_str(&newch);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str",
    "    let mut newstr = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            newstr.push_str(&newch);\n        } else {\n            newstr.push(c);\n        }\n    }\n    newstr",
    "    let mut newstr = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            newstr.push_str(&newch);\n        } else {\n            newstr.push(c);\n        }\n    }\n    newstr",
    "    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            new_str.push_str(&newch);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str",
    "    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            new_str.push_str(&newch);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str",
    "    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            new_str.push_str(&newch);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str",
    "    str1.replace(ch, newch)",
    "    let mut newstr = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            newstr.push_str(&newch);\n        } else {\n            newstr.push(c);\n        }\n    }\n    newstr",
    "    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            new_str.push_str(&newch);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str",
    "    let mut newstr = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            newstr.push_str(&newch);\n        } else {\n            newstr.push(c);\n        }\n    }\n    newstr",
    "    let mut newstr = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            newstr.push_str(&newch);\n        } else {\n            newstr.push(c);\n        }\n    }\n    newstr",
    "    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            new_str.push_str(&newch);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str",
    "    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            new_str.push_str(&newch);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str",
    "    str1.replace(ch, newch)",
    "    let mut newstr = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            newstr.push_str(&newch);\n        } else {\n            newstr.push(c);\n        }\n    }\n    newstr",
    "    let mut str2 = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            str2.push_str(&newch);\n        } else {\n            str2.push(c);\n        }\n    }\n    str2",
    "    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            new_str.push_str(&newch);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str",
    "    let mut newstr = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            newstr.push_str(&newch);\n        } else {\n            newstr.push(c);\n        }\n    }\n    newstr",
    "    let mut newstr = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            newstr.push_str(&newch);\n        } else {\n            newstr.push(c);\n        }\n    }\n    newstr",
    "    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            new_str.push_str(&newch);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str",
    "    let mut new_str = str1.clone();\n    for i in 0..str1.len() {\n        if str1.chars().nth(i).unwrap().to_string() == ch {\n            new_str.replace_range(i..i+1, &newch);\n        }\n    }\n    new_str",
    "    str1.replace(ch, newch)",
    "    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            new_str.push_str(&newch);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str",
    "    let mut newstr = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            newstr.push_str(&newch);\n        } else {\n            newstr.push(c);\n        }\n    }\n    newstr",
    "    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            new_str.push_str(&newch);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str",
    "    let mut new_str: String = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            new_str.push_str(&newch);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str",
    "    str1.replace(ch, newch)",
    "    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            new_str.push_str(&newch);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str",
    "    str1.replace(ch, newch)",
    "    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            new_str.push_str(&newch);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str",
    "    let mut newstr = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            newstr.push_str(&newch);\n        } else {\n            newstr.push(c);\n        }\n    }\n    newstr",
    "    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            new_str.push_str(&newch);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str",
    "    let mut str2 = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            str2.push_str(&newch);\n        } else {\n            str2.push(c);\n        }\n    }\n    str2",
    "    let mut newstr = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            newstr.push_str(&newch);\n        } else {\n            newstr.push(c);\n        }\n    }\n    newstr",
    "    let mut newstr = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            newstr.push_str(&newch);\n        } else {\n            newstr.push(c);\n        }\n    }\n    newstr",
    "    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            new_str.push_str(&newch);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str",
    "    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            new_str.push_str(&newch);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str",
    "    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            new_str.push_str(&newch);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str",
    "    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            new_str.push_str(&newch);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str",
    "    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            new_str.push_str(&newch);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str",
    "    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            new_str.push_str(&newch);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str",
    "    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            new_str.push_str(&newch);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str",
    "    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            new_str.push_str(&newch);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str",
    "    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            new_str.push_str(&newch);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str",
    "    let mut newstr = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            newstr.push_str(&newch);\n        } else {\n            newstr.push(c);\n        }\n    }\n    newstr",
    "    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            new_str.push_str(&newch);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str",
    "    let mut newstr = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            newstr.push_str(&newch);\n        } else {\n            newstr.push(c);\n        }\n    }\n    newstr",
    "    str1.replace(ch, newch)",
    "    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            new_str.push_str(&newch);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str",
    "    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            new_str.push_str(&newch);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str",
    "    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            new_str.push_str(&newch);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str",
    "    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            new_str.push_str(&newch);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str",
    "    str1.replace(ch, newch)",
    "    let mut newstr = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            newstr.push_str(&newch);\n        } else {\n            newstr.push(c);\n        }\n    }\n    newstr",
    "    let mut newstr = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            newstr.push_str(&newch);\n        } else {\n            newstr.push(c);\n        }\n    }\n    newstr",
    "    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            new_str.push_str(&newch);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str",
    "    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            new_str.push_str(&newch);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str",
    "    let mut newstr = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            newstr.push_str(&newch);\n        } else {\n            newstr.push(c);\n        }\n    }\n    newstr",
    "    str1.replace(ch, newch)",
    "    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            new_str.push_str(&newch);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str",
    "    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            new_str.push_str(&newch);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str",
    "    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            new_str.push_str(&newch);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str",
    "    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            new_str.push_str(&newch);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str",
    "    let mut result = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            result.push_str(&newch);\n        } else {\n            result.push(c);\n        }\n    }\n    result",
    "    let mut newstr = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            newstr.push_str(&newch);\n        } else {\n            newstr.push(c);\n        }\n    }\n    newstr",
    "    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            new_str.push_str(&newch);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str",
    "    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            new_str.push_str(&newch);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str",
    "    str1.replace(ch, newch)",
    "    let mut newstr = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            newstr.push_str(&newch);\n        } else {\n            newstr.push(c);\n        }\n    }\n    newstr",
    "    let mut result = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            result.push_str(&newch);\n        } else {\n            result.push(c);\n        }\n    }\n    result",
    "    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            new_str.push_str(&newch);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str",
    "    let mut result = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            result.push_str(&newch);\n        } else {\n            result.push(c);\n        }\n    }\n    result",
    "    let mut newstr = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            newstr.push_str(&newch);\n        } else {\n            newstr.push(c);\n        }\n    }\n    newstr",
    "    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            new_str.push_str(&newch);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str",
    "    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            new_str.push_str(&newch);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str",
    "    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            new_str.push_str(&newch);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str",
    "    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            new_str.push_str(&newch);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str",
    "    str1.replace(ch, newch)",
    "    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            new_str.push_str(&newch);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str",
    "    let mut newstr = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            newstr.push_str(&newch);\n        } else {\n            newstr.push(c);\n        }\n    }\n    newstr",
    "    str1.replace(ch, newch)",
    "    str1.replace(ch, newch)",
    "    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            new_str.push_str(&newch);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str",
    "    let mut result = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            result.push_str(&newch);\n        } else {\n            result.push(c);\n        }\n    }\n    result",
    "    let mut newstr = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            newstr.push_str(&newch);\n        } else {\n            newstr.push(c);\n        }\n    }\n    newstr",
    "    let mut str2 = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            str2.push_str(&newch);\n        } else {\n            str2.push(c);\n        }\n    }\n    str2",
    "    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            new_str.push_str(&newch);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str",
    "    str1.replace(ch, newch)",
    "    let mut newstr = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            newstr.push_str(&newch);\n        } else {\n            newstr.push(c);\n        }\n    }\n    newstr",
    "    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            new_str.push_str(&newch);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str",
    "    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            new_str.push_str(&newch);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str",
    "    str1.replace(ch, newch)",
    "    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            new_str.push_str(&newch);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str",
    "    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            new_str.push_str(&newch);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str",
    "    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            new_str.push_str(&newch);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str",
    "    let mut newstr = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            newstr.push_str(&newch);\n        } else {\n            newstr.push(c);\n        }\n    }\n    newstr",
    "    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            new_str.push_str(&newch);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str",
    "    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            new_str.push_str(&newch);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str",
    "    let mut newstr = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            newstr.push_str(&newch);\n        } else {\n            newstr.push(c);\n        }\n    }\n    newstr",
    "    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            new_str.push_str(&newch);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str",
    "    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            new_str.push_str(&newch);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str",
    "    let mut newstr = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            newstr.push_str(&newch);\n        } else {\n            newstr.push(c);\n        }\n    }\n    newstr",
    "    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            new_str.push_str(newch.as_str());\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str",
    "    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            new_str.push_str(&newch);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str",
    "    let mut newstr = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            newstr.push_str(&newch);\n        } else {\n            newstr.push(c);\n        }\n    }\n    newstr",
    "    let mut newstr = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            newstr.push_str(&newch);\n        } else {\n            newstr.push(c);\n        }\n    }\n    newstr",
    "    let mut newstr = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            newstr.push_str(&newch);\n        } else {\n            newstr.push(c);\n        }\n    }\n    newstr",
    "    str1.replace(ch, newch)",
    "    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            new_str.push_str(&newch);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str",
    "    let mut newstr = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            newstr.push_str(&newch);\n        } else {\n            newstr.push(c);\n        }\n    }\n    newstr",
    "    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            new_str.push_str(&newch);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str",
    "    str1.replace(ch, newch)",
    "    let mut newstr = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            newstr.push_str(&newch);\n        } else {\n            newstr.push(c);\n        }\n    }\n    newstr",
    "    str1.replace(ch, newch)",
    "    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            new_str.push_str(&newch);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str",
    "    str1.replace(ch, newch)",
    "    str1.replace(ch, newch)",
    "    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            new_str.push_str(&newch);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str",
    "    let mut newstr = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            newstr.push_str(&newch);\n        } else {\n            newstr.push(c);\n        }\n    }\n    newstr",
    "    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            new_str.push_str(&newch);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str",
    "    let mut new_str = String::new();\n    for i in str1.chars() {\n        if i.to_string() == ch {\n            new_str.push_str(&newch);\n        } else {\n            new_str.push(i);\n        }\n    }\n    new_str",
    "    let mut str2 = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            str2.push_str(&newch);\n        } else {\n            str2.push(c);\n        }\n    }\n    str2",
    "    let mut result = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            result.push_str(&newch);\n        } else {\n            result.push(c);\n        }\n    }\n    result",
    "    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            new_str.push_str(&newch);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str",
    "    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            new_str.push_str(&newch);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str",
    "    let mut result = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            result.push_str(&newch);\n        } else {\n            result.push(c);\n        }\n    }\n    result",
    "    let mut newstr = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            newstr.push_str(&newch);\n        } else {\n            newstr.push(c);\n        }\n    }\n    newstr",
    "    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            new_str.push_str(&newch);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str",
    "    str1.chars().map(|c| if c.to_string() == ch { newch.chars().next().unwrap() } else { c }).collect()",
    "    str1.replace(ch, newch)",
    "    str1.replace(ch, newch)",
    "    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            new_str.push_str(&newch);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str",
    "    let mut newstr = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            newstr.push_str(&newch);\n        } else {\n            newstr.push(c);\n        }\n    }\n    newstr",
    "    let mut result = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            result.push_str(&newch);\n        } else {\n            result.push(c);\n        }\n    }\n    result",
    "    let mut newstr = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            newstr.push_str(&newch);\n        } else {\n            newstr.push(c);\n        }\n    }\n    newstr",
    "    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            new_str.push_str(&newch);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str",
    "    str1.replace(ch, newch)",
    "    let mut new_string = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            new_string.push_str(&newch);\n        } else {\n            new_string.push(c);\n        }\n    }\n    new_string",
    "    str1.replace(ch, newch)",
    "    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            new_str.push_str(&newch);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str",
    "    let mut newstr = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            newstr.push_str(&newch);\n        } else {\n            newstr.push(c);\n        }\n    }\n    newstr",
    "    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            new_str.push_str(&newch);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str",
    "    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            new_str.push_str(&newch);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str",
    "    let mut newstr = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            newstr.push_str(&newch);\n        } else {\n            newstr.push(c);\n        }\n    }\n    newstr",
    "    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            new_str.push_str(&newch);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str",
    "    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            new_str.push_str(&newch);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str",
    "    let mut str2 = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            str2.push_str(&newch);\n        } else {\n            str2.push(c);\n        }\n    }\n    str2",
    "    let mut result = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            result.push_str(&newch);\n        } else {\n            result.push(c);\n        }\n    }\n    result",
    "    let mut new_str = String::new();\n    for c in str1.chars() {\n        if c.to_string() == ch {\n            new_str.push_str(&newch);\n        } else {\n            new_str.push(c);\n        }\n    }\n    new_str"
  ]
}