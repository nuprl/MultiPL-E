{
  "name": "mbpp_414_overlapping",
  "language": "rs",
  "prompt": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_414_overlapping.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    for x in list1 {\n        for y in list2 {\n            if x == y {\n                return true;\n            }\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list2`\n   --> /tmp/tmpb_ruvjot.rs:4:18\n    |\n2   | fn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    |                                   ----- move occurs because `list2` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     for x in list1 {\n4   |         for y in list2 {\n    |                  ^^^^^ `list2` moved due to this implicit call to `.into_iter()`, in previous iteration of loop\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list2`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |         for y in &list2 {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    for i in list1 {\n        for j in list2 {\n            if i == j {\n                return true;\n            }\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list2`\n   --> /tmp/tmp2r_84mzj.rs:4:18\n    |\n2   | fn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    |                                   ----- move occurs because `list2` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     for i in list1 {\n4   |         for j in list2 {\n    |                  ^^^^^ `list2` moved due to this implicit call to `.into_iter()`, in previous iteration of loop\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list2`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |         for j in &list2 {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    let mut result = false;\n    for i in list1 {\n        for j in list2 {\n            if i == j {\n                result = true;\n                break;\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list2`\n   --> /tmp/tmpkl_3w5_y.rs:5:18\n    |\n2   | fn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    |                                   ----- move occurs because `list2` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n5   |         for j in list2 {\n    |                  ^^^^^ `list2` moved due to this implicit call to `.into_iter()`, in previous iteration of loop\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list2`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n5   |         for j in &list2 {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    for i in list1 {\n        for j in list2 {\n            if i == j {\n                return true;\n            }\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list2`\n   --> /tmp/tmp2r_84mzj.rs:4:18\n    |\n2   | fn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    |                                   ----- move occurs because `list2` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     for i in list1 {\n4   |         for j in list2 {\n    |                  ^^^^^ `list2` moved due to this implicit call to `.into_iter()`, in previous iteration of loop\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list2`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |         for j in &list2 {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    for item in list1 {\n        for item2 in list2 {\n            if item == item2 {\n                return true;\n            }\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list2`\n   --> /tmp/tmp434u2m42.rs:4:22\n    |\n2   | fn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    |                                   ----- move occurs because `list2` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     for item in list1 {\n4   |         for item2 in list2 {\n    |                      ^^^^^ `list2` moved due to this implicit call to `.into_iter()`, in previous iteration of loop\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list2`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |         for item2 in &list2 {\n    |                      +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    list1.iter().any(|x| list2.contains(x))\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    list1.iter().any(|x| list2.contains(x))\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    for i in list1 {\n        for j in list2 {\n            if i == j {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list2`\n   --> /tmp/tmpa0lyn4uj.rs:4:18\n    |\n2   | fn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    |                                   ----- move occurs because `list2` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     for i in list1 {\n4   |         for j in list2 {\n    |                  ^^^^^ `list2` moved due to this implicit call to `.into_iter()`, in previous iteration of loop\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list2`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |         for j in &list2 {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    for i in list1 {\n        for j in list2 {\n            if i == j {\n                return true;\n            }\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list2`\n   --> /tmp/tmp2r_84mzj.rs:4:18\n    |\n2   | fn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    |                                   ----- move occurs because `list2` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     for i in list1 {\n4   |         for j in list2 {\n    |                  ^^^^^ `list2` moved due to this implicit call to `.into_iter()`, in previous iteration of loop\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list2`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |         for j in &list2 {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    let mut result = false;\n    for i in list1 {\n        for j in list2 {\n            if i == j {\n                result = true;\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list2`\n   --> /tmp/tmpiilizagw.rs:5:18\n    |\n2   | fn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    |                                   ----- move occurs because `list2` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n5   |         for j in list2 {\n    |                  ^^^^^ `list2` moved due to this implicit call to `.into_iter()`, in previous iteration of loop\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list2`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n5   |         for j in &list2 {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    list1.iter().any(|x| list2.contains(x))\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    list1.iter().any(|x| list2.contains(x))\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    list1.iter().any(|x| list2.contains(x))\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    for i in list1 {\n        for j in list2 {\n            if i == j {\n                return true;\n            }\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list2`\n   --> /tmp/tmp2r_84mzj.rs:4:18\n    |\n2   | fn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    |                                   ----- move occurs because `list2` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     for i in list1 {\n4   |         for j in list2 {\n    |                  ^^^^^ `list2` moved due to this implicit call to `.into_iter()`, in previous iteration of loop\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list2`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |         for j in &list2 {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    for i in list1 {\n        for j in list2 {\n            if i == j {\n                return true;\n            }\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list2`\n   --> /tmp/tmp2r_84mzj.rs:4:18\n    |\n2   | fn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    |                                   ----- move occurs because `list2` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     for i in list1 {\n4   |         for j in list2 {\n    |                  ^^^^^ `list2` moved due to this implicit call to `.into_iter()`, in previous iteration of loop\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list2`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |         for j in &list2 {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    for i in list1 {\n        for j in list2 {\n            if i == j {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list2`\n   --> /tmp/tmpa0lyn4uj.rs:4:18\n    |\n2   | fn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    |                                   ----- move occurs because `list2` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     for i in list1 {\n4   |         for j in list2 {\n    |                  ^^^^^ `list2` moved due to this implicit call to `.into_iter()`, in previous iteration of loop\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list2`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |         for j in &list2 {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    let mut result = false;\n    for i in list1 {\n        for j in list2 {\n            if i == j {\n                result = true;\n                break;\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list2`\n   --> /tmp/tmpkl_3w5_y.rs:5:18\n    |\n2   | fn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    |                                   ----- move occurs because `list2` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n5   |         for j in list2 {\n    |                  ^^^^^ `list2` moved due to this implicit call to `.into_iter()`, in previous iteration of loop\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list2`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n5   |         for j in &list2 {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    let mut result = false;\n    for item1 in list1 {\n        for item2 in list2 {\n            if item1 == item2 {\n                result = true;\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list2`\n   --> /tmp/tmp9kbygmp5.rs:5:22\n    |\n2   | fn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    |                                   ----- move occurs because `list2` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n5   |         for item2 in list2 {\n    |                      ^^^^^ `list2` moved due to this implicit call to `.into_iter()`, in previous iteration of loop\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list2`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n5   |         for item2 in &list2 {\n    |                      +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    let mut result = false;\n    for i in list1 {\n        for j in list2 {\n            if i == j {\n                result = true;\n                break;\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list2`\n   --> /tmp/tmpkl_3w5_y.rs:5:18\n    |\n2   | fn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    |                                   ----- move occurs because `list2` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n5   |         for j in list2 {\n    |                  ^^^^^ `list2` moved due to this implicit call to `.into_iter()`, in previous iteration of loop\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list2`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n5   |         for j in &list2 {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    for i in list1 {\n        for j in list2 {\n            if i == j {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list2`\n   --> /tmp/tmpa0lyn4uj.rs:4:18\n    |\n2   | fn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    |                                   ----- move occurs because `list2` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     for i in list1 {\n4   |         for j in list2 {\n    |                  ^^^^^ `list2` moved due to this implicit call to `.into_iter()`, in previous iteration of loop\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list2`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |         for j in &list2 {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    for i in list1 {\n        for j in list2 {\n            if i == j {\n                return true;\n            }\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list2`\n   --> /tmp/tmp2r_84mzj.rs:4:18\n    |\n2   | fn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    |                                   ----- move occurs because `list2` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     for i in list1 {\n4   |         for j in list2 {\n    |                  ^^^^^ `list2` moved due to this implicit call to `.into_iter()`, in previous iteration of loop\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list2`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |         for j in &list2 {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    let mut result = false;\n    for i in list1 {\n        for j in list2 {\n            if i == j {\n                result = true;\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list2`\n   --> /tmp/tmpiilizagw.rs:5:18\n    |\n2   | fn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    |                                   ----- move occurs because `list2` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n5   |         for j in list2 {\n    |                  ^^^^^ `list2` moved due to this implicit call to `.into_iter()`, in previous iteration of loop\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list2`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n5   |         for j in &list2 {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    for i in list1 {\n        for j in list2 {\n            if i == j {\n                return true;\n            }\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list2`\n   --> /tmp/tmp2r_84mzj.rs:4:18\n    |\n2   | fn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    |                                   ----- move occurs because `list2` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     for i in list1 {\n4   |         for j in list2 {\n    |                  ^^^^^ `list2` moved due to this implicit call to `.into_iter()`, in previous iteration of loop\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list2`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |         for j in &list2 {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    list1.iter().any(|x| list2.contains(x))\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    let mut result = false;\n    for i in list1 {\n        for j in list2 {\n            if i == j {\n                result = true;\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list2`\n   --> /tmp/tmpiilizagw.rs:5:18\n    |\n2   | fn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    |                                   ----- move occurs because `list2` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n5   |         for j in list2 {\n    |                  ^^^^^ `list2` moved due to this implicit call to `.into_iter()`, in previous iteration of loop\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list2`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n5   |         for j in &list2 {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    list1.iter().any(|x| list2.contains(x))\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    let mut result = false;\n    for i in list1 {\n        for j in list2 {\n            if i == j {\n                result = true;\n                break;\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list2`\n   --> /tmp/tmpkl_3w5_y.rs:5:18\n    |\n2   | fn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    |                                   ----- move occurs because `list2` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n5   |         for j in list2 {\n    |                  ^^^^^ `list2` moved due to this implicit call to `.into_iter()`, in previous iteration of loop\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list2`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n5   |         for j in &list2 {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    list1.iter().any(|x| list2.contains(x))\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    let mut set = HashSet::new();\n    for i in list1 {\n        set.insert(i);\n    }\n    for i in list2 {\n        if set.contains(&i) {\n            return true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1666123212,
      "stdout": "",
      "stderr": "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n --> /tmp/tmpxftzjhi9.rs:3:19\n  |\n3 |     let mut set = HashSet::new();\n  |                   ^^^^^^^ not found in this scope\n  |\nhelp: consider importing this struct\n  |\n1 | use std::collections::HashSet;\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0433`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    let mut result = false;\n    for i in list1 {\n        for j in list2 {\n            if i == j {\n                result = true;\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list2`\n   --> /tmp/tmpiilizagw.rs:5:18\n    |\n2   | fn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    |                                   ----- move occurs because `list2` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n5   |         for j in list2 {\n    |                  ^^^^^ `list2` moved due to this implicit call to `.into_iter()`, in previous iteration of loop\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list2`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n5   |         for j in &list2 {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    list1.iter().any(|x| list2.contains(x))\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    list1.iter().any(|x| list2.contains(x))\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    list1.iter().any(|x| list2.contains(x))\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    list1.iter().any(|x| list2.contains(x))\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    for i in list1 {\n        for j in list2 {\n            if i == j {\n                return true;\n            }\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list2`\n   --> /tmp/tmp2r_84mzj.rs:4:18\n    |\n2   | fn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    |                                   ----- move occurs because `list2` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     for i in list1 {\n4   |         for j in list2 {\n    |                  ^^^^^ `list2` moved due to this implicit call to `.into_iter()`, in previous iteration of loop\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list2`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |         for j in &list2 {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    for i in list1 {\n        for j in list2 {\n            if i == j {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list2`\n   --> /tmp/tmpa0lyn4uj.rs:4:18\n    |\n2   | fn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    |                                   ----- move occurs because `list2` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     for i in list1 {\n4   |         for j in list2 {\n    |                  ^^^^^ `list2` moved due to this implicit call to `.into_iter()`, in previous iteration of loop\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list2`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |         for j in &list2 {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    for i in list1 {\n        for j in list2 {\n            if i == j {\n                return true;\n            }\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list2`\n   --> /tmp/tmp2r_84mzj.rs:4:18\n    |\n2   | fn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    |                                   ----- move occurs because `list2` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     for i in list1 {\n4   |         for j in list2 {\n    |                  ^^^^^ `list2` moved due to this implicit call to `.into_iter()`, in previous iteration of loop\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list2`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |         for j in &list2 {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    for i in list1 {\n        for j in list2 {\n            if i == j {\n                return true;\n            }\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list2`\n   --> /tmp/tmp2r_84mzj.rs:4:18\n    |\n2   | fn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    |                                   ----- move occurs because `list2` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     for i in list1 {\n4   |         for j in list2 {\n    |                  ^^^^^ `list2` moved due to this implicit call to `.into_iter()`, in previous iteration of loop\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list2`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |         for j in &list2 {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    list1.iter().any(|x| list2.contains(x))\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    let mut result = false;\n    for i in list1 {\n        for j in list2 {\n            if i == j {\n                result = true;\n                break;\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list2`\n   --> /tmp/tmpkl_3w5_y.rs:5:18\n    |\n2   | fn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    |                                   ----- move occurs because `list2` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n5   |         for j in list2 {\n    |                  ^^^^^ `list2` moved due to this implicit call to `.into_iter()`, in previous iteration of loop\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list2`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n5   |         for j in &list2 {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    for x in list1 {\n        for y in list2 {\n            if x == y {\n                return true;\n            }\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list2`\n   --> /tmp/tmpb_ruvjot.rs:4:18\n    |\n2   | fn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    |                                   ----- move occurs because `list2` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     for x in list1 {\n4   |         for y in list2 {\n    |                  ^^^^^ `list2` moved due to this implicit call to `.into_iter()`, in previous iteration of loop\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list2`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |         for y in &list2 {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    let mut result = false;\n    for i in list1 {\n        for j in list2 {\n            if i == j {\n                result = true;\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list2`\n   --> /tmp/tmpiilizagw.rs:5:18\n    |\n2   | fn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    |                                   ----- move occurs because `list2` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n5   |         for j in list2 {\n    |                  ^^^^^ `list2` moved due to this implicit call to `.into_iter()`, in previous iteration of loop\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list2`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n5   |         for j in &list2 {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    list1.iter().any(|x| list2.contains(x))\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    for i in list1 {\n        for j in list2 {\n            if i == j {\n                return true;\n            }\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list2`\n   --> /tmp/tmp2r_84mzj.rs:4:18\n    |\n2   | fn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    |                                   ----- move occurs because `list2` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     for i in list1 {\n4   |         for j in list2 {\n    |                  ^^^^^ `list2` moved due to this implicit call to `.into_iter()`, in previous iteration of loop\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list2`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |         for j in &list2 {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    list1.iter().any(|x| list2.contains(x))\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    for i in list1 {\n        for j in list2 {\n            if i == j {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list2`\n   --> /tmp/tmpa0lyn4uj.rs:4:18\n    |\n2   | fn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    |                                   ----- move occurs because `list2` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     for i in list1 {\n4   |         for j in list2 {\n    |                  ^^^^^ `list2` moved due to this implicit call to `.into_iter()`, in previous iteration of loop\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list2`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |         for j in &list2 {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    for i in list1 {\n        for j in list2 {\n            if i == j {\n                return true;\n            }\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list2`\n   --> /tmp/tmp2r_84mzj.rs:4:18\n    |\n2   | fn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    |                                   ----- move occurs because `list2` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     for i in list1 {\n4   |         for j in list2 {\n    |                  ^^^^^ `list2` moved due to this implicit call to `.into_iter()`, in previous iteration of loop\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list2`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |         for j in &list2 {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    for i in list1 {\n        for j in list2 {\n            if i == j {\n                return true;\n            }\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list2`\n   --> /tmp/tmp2r_84mzj.rs:4:18\n    |\n2   | fn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    |                                   ----- move occurs because `list2` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     for i in list1 {\n4   |         for j in list2 {\n    |                  ^^^^^ `list2` moved due to this implicit call to `.into_iter()`, in previous iteration of loop\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list2`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |         for j in &list2 {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    list1.iter().any(|x| list2.contains(x))\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    let mut result = false;\n    for i in list1 {\n        for j in list2 {\n            if i == j {\n                result = true;\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list2`\n   --> /tmp/tmpiilizagw.rs:5:18\n    |\n2   | fn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    |                                   ----- move occurs because `list2` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n5   |         for j in list2 {\n    |                  ^^^^^ `list2` moved due to this implicit call to `.into_iter()`, in previous iteration of loop\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list2`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n5   |         for j in &list2 {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    list1.iter().any(|x| list2.contains(x))\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    for i in list1 {\n        for j in list2 {\n            if i == j {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list2`\n   --> /tmp/tmpa0lyn4uj.rs:4:18\n    |\n2   | fn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    |                                   ----- move occurs because `list2` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     for i in list1 {\n4   |         for j in list2 {\n    |                  ^^^^^ `list2` moved due to this implicit call to `.into_iter()`, in previous iteration of loop\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list2`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |         for j in &list2 {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    let mut result = false;\n    for i in list1 {\n        for j in list2 {\n            if i == j {\n                result = true;\n                break;\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list2`\n   --> /tmp/tmpkl_3w5_y.rs:5:18\n    |\n2   | fn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    |                                   ----- move occurs because `list2` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n5   |         for j in list2 {\n    |                  ^^^^^ `list2` moved due to this implicit call to `.into_iter()`, in previous iteration of loop\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list2`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n5   |         for j in &list2 {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    for item in list1 {\n        if list2.contains(&item) {\n            return true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1666123212,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    for i in list1 {\n        for j in list2 {\n            if i == j {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list2`\n   --> /tmp/tmpa0lyn4uj.rs:4:18\n    |\n2   | fn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    |                                   ----- move occurs because `list2` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     for i in list1 {\n4   |         for j in list2 {\n    |                  ^^^^^ `list2` moved due to this implicit call to `.into_iter()`, in previous iteration of loop\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list2`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |         for j in &list2 {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    for i in list1 {\n        for j in list2 {\n            if i == j {\n                return true;\n            }\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list2`\n   --> /tmp/tmp2r_84mzj.rs:4:18\n    |\n2   | fn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    |                                   ----- move occurs because `list2` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     for i in list1 {\n4   |         for j in list2 {\n    |                  ^^^^^ `list2` moved due to this implicit call to `.into_iter()`, in previous iteration of loop\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list2`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |         for j in &list2 {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    for item in list1 {\n        if list2.contains(&item) {\n            return true;\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1666123212,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    list1.iter().any(|x| list2.contains(x))\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    let mut result = false;\n    for i in list1.iter() {\n        for j in list2.iter() {\n            if i == j {\n                result = true;\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1666123212,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    list1.iter().any(|x| list2.contains(x))\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    list1.iter().any(|x| list2.contains(x))\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    for i in list1 {\n        for j in list2 {\n            if i == j {\n                return true;\n            }\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list2`\n   --> /tmp/tmp2r_84mzj.rs:4:18\n    |\n2   | fn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    |                                   ----- move occurs because `list2` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     for i in list1 {\n4   |         for j in list2 {\n    |                  ^^^^^ `list2` moved due to this implicit call to `.into_iter()`, in previous iteration of loop\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list2`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |         for j in &list2 {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    for i in list1 {\n        for j in list2 {\n            if i == j {\n                return true;\n            }\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list2`\n   --> /tmp/tmp2r_84mzj.rs:4:18\n    |\n2   | fn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    |                                   ----- move occurs because `list2` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     for i in list1 {\n4   |         for j in list2 {\n    |                  ^^^^^ `list2` moved due to this implicit call to `.into_iter()`, in previous iteration of loop\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list2`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |         for j in &list2 {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    list1.iter().any(|x| list2.contains(x))\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    for i in list1 {\n        for j in list2 {\n            if i == j {\n                return true;\n            }\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list2`\n   --> /tmp/tmp2r_84mzj.rs:4:18\n    |\n2   | fn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    |                                   ----- move occurs because `list2` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     for i in list1 {\n4   |         for j in list2 {\n    |                  ^^^^^ `list2` moved due to this implicit call to `.into_iter()`, in previous iteration of loop\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list2`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |         for j in &list2 {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    list1.iter().any(|x| list2.contains(x))\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    for i in list1 {\n        for j in list2 {\n            if i == j {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list2`\n   --> /tmp/tmpa0lyn4uj.rs:4:18\n    |\n2   | fn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    |                                   ----- move occurs because `list2` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     for i in list1 {\n4   |         for j in list2 {\n    |                  ^^^^^ `list2` moved due to this implicit call to `.into_iter()`, in previous iteration of loop\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list2`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |         for j in &list2 {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    for i in list1 {\n        for j in list2 {\n            if i == j {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list2`\n   --> /tmp/tmpa0lyn4uj.rs:4:18\n    |\n2   | fn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    |                                   ----- move occurs because `list2` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     for i in list1 {\n4   |         for j in list2 {\n    |                  ^^^^^ `list2` moved due to this implicit call to `.into_iter()`, in previous iteration of loop\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list2`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |         for j in &list2 {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    list1.iter().any(|x| list2.contains(x))\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    let mut result = false;\n    for i in list1 {\n        for j in list2 {\n            if i == j {\n                result = true;\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list2`\n   --> /tmp/tmpiilizagw.rs:5:18\n    |\n2   | fn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    |                                   ----- move occurs because `list2` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n5   |         for j in list2 {\n    |                  ^^^^^ `list2` moved due to this implicit call to `.into_iter()`, in previous iteration of loop\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list2`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n5   |         for j in &list2 {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    list1.iter().any(|x| list2.contains(x))\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    list1.iter().any(|x| list2.contains(x))\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    for i in list1 {\n        for j in list2 {\n            if i == j {\n                return true;\n            }\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list2`\n   --> /tmp/tmp2r_84mzj.rs:4:18\n    |\n2   | fn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    |                                   ----- move occurs because `list2` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     for i in list1 {\n4   |         for j in list2 {\n    |                  ^^^^^ `list2` moved due to this implicit call to `.into_iter()`, in previous iteration of loop\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list2`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |         for j in &list2 {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    for i in list1 {\n        for j in list2 {\n            if i == j {\n                return true;\n            }\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list2`\n   --> /tmp/tmp2r_84mzj.rs:4:18\n    |\n2   | fn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    |                                   ----- move occurs because `list2` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     for i in list1 {\n4   |         for j in list2 {\n    |                  ^^^^^ `list2` moved due to this implicit call to `.into_iter()`, in previous iteration of loop\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list2`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |         for j in &list2 {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    for i in list1 {\n        for j in list2 {\n            if i == j {\n                return true;\n            }\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list2`\n   --> /tmp/tmp2r_84mzj.rs:4:18\n    |\n2   | fn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    |                                   ----- move occurs because `list2` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     for i in list1 {\n4   |         for j in list2 {\n    |                  ^^^^^ `list2` moved due to this implicit call to `.into_iter()`, in previous iteration of loop\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list2`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |         for j in &list2 {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    list1.iter().any(|x| list2.contains(x))\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    list1.iter().any(|x| list2.contains(x))\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    for i in list1 {\n        for j in list2 {\n            if i == j {\n                return true;\n            }\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list2`\n   --> /tmp/tmp2r_84mzj.rs:4:18\n    |\n2   | fn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    |                                   ----- move occurs because `list2` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     for i in list1 {\n4   |         for j in list2 {\n    |                  ^^^^^ `list2` moved due to this implicit call to `.into_iter()`, in previous iteration of loop\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list2`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |         for j in &list2 {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    for i in list1 {\n        for j in list2 {\n            if i == j {\n                return true;\n            }\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list2`\n   --> /tmp/tmp2r_84mzj.rs:4:18\n    |\n2   | fn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    |                                   ----- move occurs because `list2` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     for i in list1 {\n4   |         for j in list2 {\n    |                  ^^^^^ `list2` moved due to this implicit call to `.into_iter()`, in previous iteration of loop\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list2`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |         for j in &list2 {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    for i in list1 {\n        for j in list2 {\n            if i == j {\n                return true;\n            }\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list2`\n   --> /tmp/tmp2r_84mzj.rs:4:18\n    |\n2   | fn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    |                                   ----- move occurs because `list2` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     for i in list1 {\n4   |         for j in list2 {\n    |                  ^^^^^ `list2` moved due to this implicit call to `.into_iter()`, in previous iteration of loop\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list2`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |         for j in &list2 {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    for i in list1 {\n        for j in list2 {\n            if i == j {\n                return true;\n            }\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list2`\n   --> /tmp/tmp2r_84mzj.rs:4:18\n    |\n2   | fn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    |                                   ----- move occurs because `list2` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     for i in list1 {\n4   |         for j in list2 {\n    |                  ^^^^^ `list2` moved due to this implicit call to `.into_iter()`, in previous iteration of loop\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list2`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |         for j in &list2 {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    list1.iter().any(|x| list2.contains(x))\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    list1.iter().any(|x| list2.contains(x))\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    let mut result = false;\n    for i in list1 {\n        for j in list2 {\n            if i == j {\n                result = true;\n                break;\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list2`\n   --> /tmp/tmpkl_3w5_y.rs:5:18\n    |\n2   | fn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    |                                   ----- move occurs because `list2` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n5   |         for j in list2 {\n    |                  ^^^^^ `list2` moved due to this implicit call to `.into_iter()`, in previous iteration of loop\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list2`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n5   |         for j in &list2 {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    let mut result = false;\n    for i in list1 {\n        for j in list2 {\n            if i == j {\n                result = true;\n                break;\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list2`\n   --> /tmp/tmpkl_3w5_y.rs:5:18\n    |\n2   | fn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    |                                   ----- move occurs because `list2` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n5   |         for j in list2 {\n    |                  ^^^^^ `list2` moved due to this implicit call to `.into_iter()`, in previous iteration of loop\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list2`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n5   |         for j in &list2 {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    for i in list1 {\n        for j in list2 {\n            if i == j {\n                return true;\n            }\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list2`\n   --> /tmp/tmp2r_84mzj.rs:4:18\n    |\n2   | fn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    |                                   ----- move occurs because `list2` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     for i in list1 {\n4   |         for j in list2 {\n    |                  ^^^^^ `list2` moved due to this implicit call to `.into_iter()`, in previous iteration of loop\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list2`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |         for j in &list2 {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    for i in list1 {\n        for j in list2 {\n            if i == j {\n                return true;\n            }\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list2`\n   --> /tmp/tmp2r_84mzj.rs:4:18\n    |\n2   | fn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    |                                   ----- move occurs because `list2` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     for i in list1 {\n4   |         for j in list2 {\n    |                  ^^^^^ `list2` moved due to this implicit call to `.into_iter()`, in previous iteration of loop\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list2`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |         for j in &list2 {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    for i in list1 {\n        for j in list2 {\n            if i == j {\n                return true;\n            }\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list2`\n   --> /tmp/tmp2r_84mzj.rs:4:18\n    |\n2   | fn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    |                                   ----- move occurs because `list2` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     for i in list1 {\n4   |         for j in list2 {\n    |                  ^^^^^ `list2` moved due to this implicit call to `.into_iter()`, in previous iteration of loop\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list2`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |         for j in &list2 {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    for i in list1 {\n        for j in list2 {\n            if i == j {\n                return true;\n            }\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list2`\n   --> /tmp/tmp2r_84mzj.rs:4:18\n    |\n2   | fn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    |                                   ----- move occurs because `list2` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     for i in list1 {\n4   |         for j in list2 {\n    |                  ^^^^^ `list2` moved due to this implicit call to `.into_iter()`, in previous iteration of loop\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list2`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |         for j in &list2 {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    list1.iter().any(|x| list2.contains(x))\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    for i in list1 {\n        for j in list2 {\n            if i == j {\n                return true;\n            }\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list2`\n   --> /tmp/tmp2r_84mzj.rs:4:18\n    |\n2   | fn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    |                                   ----- move occurs because `list2` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     for i in list1 {\n4   |         for j in list2 {\n    |                  ^^^^^ `list2` moved due to this implicit call to `.into_iter()`, in previous iteration of loop\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list2`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |         for j in &list2 {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    for i in list1 {\n        for j in list2 {\n            if i == j {\n                return true;\n            }\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list2`\n   --> /tmp/tmp2r_84mzj.rs:4:18\n    |\n2   | fn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    |                                   ----- move occurs because `list2` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     for i in list1 {\n4   |         for j in list2 {\n    |                  ^^^^^ `list2` moved due to this implicit call to `.into_iter()`, in previous iteration of loop\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list2`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |         for j in &list2 {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    for i in list1 {\n        for j in list2 {\n            if i == j {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list2`\n   --> /tmp/tmpa0lyn4uj.rs:4:18\n    |\n2   | fn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    |                                   ----- move occurs because `list2` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     for i in list1 {\n4   |         for j in list2 {\n    |                  ^^^^^ `list2` moved due to this implicit call to `.into_iter()`, in previous iteration of loop\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list2`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |         for j in &list2 {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    let mut result = false;\n    for item in list1 {\n        for item2 in list2 {\n            if item == item2 {\n                result = true;\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1666123212,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list2`\n   --> /tmp/tmp6ojhpck1.rs:5:22\n    |\n2   | fn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    |                                   ----- move occurs because `list2` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n5   |         for item2 in list2 {\n    |                      ^^^^^ `list2` moved due to this implicit call to `.into_iter()`, in previous iteration of loop\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list2`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n5   |         for item2 in &list2 {\n    |                      +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    list1.iter().any(|x| list2.contains(x))\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    let mut result = false;\n    for i in list1 {\n        for j in list2 {\n            if i == j {\n                result = true;\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list2`\n   --> /tmp/tmpiilizagw.rs:5:18\n    |\n2   | fn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    |                                   ----- move occurs because `list2` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n5   |         for j in list2 {\n    |                  ^^^^^ `list2` moved due to this implicit call to `.into_iter()`, in previous iteration of loop\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list2`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n5   |         for j in &list2 {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    list1.iter().any(|x| list2.contains(x))\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    list1.iter().any(|x| list2.contains(x))\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    list1.iter().any(|x| list2.contains(x))\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    for i in list1 {\n        for j in list2 {\n            if i == j {\n                return true;\n            }\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list2`\n   --> /tmp/tmp2r_84mzj.rs:4:18\n    |\n2   | fn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    |                                   ----- move occurs because `list2` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     for i in list1 {\n4   |         for j in list2 {\n    |                  ^^^^^ `list2` moved due to this implicit call to `.into_iter()`, in previous iteration of loop\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list2`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |         for j in &list2 {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    for i in list1 {\n        for j in list2 {\n            if i == j {\n                return true;\n            }\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list2`\n   --> /tmp/tmp2r_84mzj.rs:4:18\n    |\n2   | fn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    |                                   ----- move occurs because `list2` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     for i in list1 {\n4   |         for j in list2 {\n    |                  ^^^^^ `list2` moved due to this implicit call to `.into_iter()`, in previous iteration of loop\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list2`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |         for j in &list2 {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    for item in list1 {\n        for item2 in list2 {\n            if item == item2 {\n                return true;\n            }\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list2`\n   --> /tmp/tmp434u2m42.rs:4:22\n    |\n2   | fn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    |                                   ----- move occurs because `list2` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     for item in list1 {\n4   |         for item2 in list2 {\n    |                      ^^^^^ `list2` moved due to this implicit call to `.into_iter()`, in previous iteration of loop\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list2`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |         for item2 in &list2 {\n    |                      +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    list1.iter().any(|x| list2.contains(x))\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    for i in list1 {\n        for j in list2 {\n            if i == j {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list2`\n   --> /tmp/tmpa0lyn4uj.rs:4:18\n    |\n2   | fn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    |                                   ----- move occurs because `list2` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     for i in list1 {\n4   |         for j in list2 {\n    |                  ^^^^^ `list2` moved due to this implicit call to `.into_iter()`, in previous iteration of loop\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list2`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |         for j in &list2 {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    for i in list1 {\n        for j in list2 {\n            if i == j {\n                return true;\n            }\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list2`\n   --> /tmp/tmp2r_84mzj.rs:4:18\n    |\n2   | fn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    |                                   ----- move occurs because `list2` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     for i in list1 {\n4   |         for j in list2 {\n    |                  ^^^^^ `list2` moved due to this implicit call to `.into_iter()`, in previous iteration of loop\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list2`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |         for j in &list2 {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    list1.iter().any(|x| list2.contains(x))\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    for i in list1 {\n        for j in list2 {\n            if i == j {\n                return true;\n            }\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list2`\n   --> /tmp/tmp2r_84mzj.rs:4:18\n    |\n2   | fn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    |                                   ----- move occurs because `list2` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     for i in list1 {\n4   |         for j in list2 {\n    |                  ^^^^^ `list2` moved due to this implicit call to `.into_iter()`, in previous iteration of loop\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list2`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |         for j in &list2 {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    list1.iter().any(|x| list2.contains(x))\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    list1.iter().any(|x| list2.contains(x))\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    let mut result = false;\n    for i in list1 {\n        for j in list2 {\n            if i == j {\n                result = true;\n                break;\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list2`\n   --> /tmp/tmpkl_3w5_y.rs:5:18\n    |\n2   | fn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    |                                   ----- move occurs because `list2` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n5   |         for j in list2 {\n    |                  ^^^^^ `list2` moved due to this implicit call to `.into_iter()`, in previous iteration of loop\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list2`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n5   |         for j in &list2 {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    for i in list1 {\n        for j in list2 {\n            if i == j {\n                return true;\n            }\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list2`\n   --> /tmp/tmp2r_84mzj.rs:4:18\n    |\n2   | fn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    |                                   ----- move occurs because `list2` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     for i in list1 {\n4   |         for j in list2 {\n    |                  ^^^^^ `list2` moved due to this implicit call to `.into_iter()`, in previous iteration of loop\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list2`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |         for j in &list2 {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    for i in list1 {\n        for j in list2 {\n            if i == j {\n                return true;\n            }\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list2`\n   --> /tmp/tmp2r_84mzj.rs:4:18\n    |\n2   | fn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    |                                   ----- move occurs because `list2` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     for i in list1 {\n4   |         for j in list2 {\n    |                  ^^^^^ `list2` moved due to this implicit call to `.into_iter()`, in previous iteration of loop\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list2`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |         for j in &list2 {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    let mut result = false;\n    for i in list1 {\n        for j in list2 {\n            if i == j {\n                result = true;\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list2`\n   --> /tmp/tmpiilizagw.rs:5:18\n    |\n2   | fn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    |                                   ----- move occurs because `list2` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n5   |         for j in list2 {\n    |                  ^^^^^ `list2` moved due to this implicit call to `.into_iter()`, in previous iteration of loop\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list2`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n5   |         for j in &list2 {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    let mut result = false;\n    for i in list1.iter() {\n        for j in list2.iter() {\n            if i == j {\n                result = true;\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1666123212,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    list1.iter().any(|x| list2.contains(x))\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    list1.iter().any(|x| list2.contains(x))\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    for i in list1 {\n        for j in list2 {\n            if i == j {\n                return true;\n            }\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list2`\n   --> /tmp/tmp2r_84mzj.rs:4:18\n    |\n2   | fn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    |                                   ----- move occurs because `list2` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     for i in list1 {\n4   |         for j in list2 {\n    |                  ^^^^^ `list2` moved due to this implicit call to `.into_iter()`, in previous iteration of loop\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list2`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |         for j in &list2 {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    list1.iter().any(|x| list2.contains(x))\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    for i in list1 {\n        for j in list2 {\n            if i == j {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list2`\n   --> /tmp/tmpa0lyn4uj.rs:4:18\n    |\n2   | fn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    |                                   ----- move occurs because `list2` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     for i in list1 {\n4   |         for j in list2 {\n    |                  ^^^^^ `list2` moved due to this implicit call to `.into_iter()`, in previous iteration of loop\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list2`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |         for j in &list2 {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    let mut result = false;\n    for i in list1 {\n        for j in list2 {\n            if i == j {\n                result = true;\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list2`\n   --> /tmp/tmpiilizagw.rs:5:18\n    |\n2   | fn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    |                                   ----- move occurs because `list2` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n5   |         for j in list2 {\n    |                  ^^^^^ `list2` moved due to this implicit call to `.into_iter()`, in previous iteration of loop\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list2`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n5   |         for j in &list2 {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    let mut result: bool = false;\n    for i in list1 {\n        for j in list2 {\n            if i == j {\n                result = true;\n                break;\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1666123212,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list2`\n   --> /tmp/tmpkb25s6ac.rs:5:18\n    |\n2   | fn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    |                                   ----- move occurs because `list2` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n5   |         for j in list2 {\n    |                  ^^^^^ `list2` moved due to this implicit call to `.into_iter()`, in previous iteration of loop\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list2`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n5   |         for j in &list2 {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    for i in list1 {\n        for j in list2 {\n            if i == j {\n                return true;\n            }\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list2`\n   --> /tmp/tmp2r_84mzj.rs:4:18\n    |\n2   | fn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    |                                   ----- move occurs because `list2` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     for i in list1 {\n4   |         for j in list2 {\n    |                  ^^^^^ `list2` moved due to this implicit call to `.into_iter()`, in previous iteration of loop\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list2`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |         for j in &list2 {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    for i in list1 {\n        for j in list2 {\n            if i == j {\n                return true;\n            }\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list2`\n   --> /tmp/tmp2r_84mzj.rs:4:18\n    |\n2   | fn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    |                                   ----- move occurs because `list2` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     for i in list1 {\n4   |         for j in list2 {\n    |                  ^^^^^ `list2` moved due to this implicit call to `.into_iter()`, in previous iteration of loop\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list2`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |         for j in &list2 {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    let mut result = false;\n    for i in list1 {\n        for j in list2 {\n            if i == j {\n                result = true;\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list2`\n   --> /tmp/tmpiilizagw.rs:5:18\n    |\n2   | fn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    |                                   ----- move occurs because `list2` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n5   |         for j in list2 {\n    |                  ^^^^^ `list2` moved due to this implicit call to `.into_iter()`, in previous iteration of loop\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list2`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n5   |         for j in &list2 {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    let mut result = false;\n    for i in list1 {\n        for j in list2 {\n            if i == j {\n                result = true;\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list2`\n   --> /tmp/tmpiilizagw.rs:5:18\n    |\n2   | fn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    |                                   ----- move occurs because `list2` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n5   |         for j in list2 {\n    |                  ^^^^^ `list2` moved due to this implicit call to `.into_iter()`, in previous iteration of loop\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list2`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n5   |         for j in &list2 {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    for i in list1 {\n        for j in list2 {\n            if i == j {\n                return true;\n            }\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list2`\n   --> /tmp/tmp2r_84mzj.rs:4:18\n    |\n2   | fn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    |                                   ----- move occurs because `list2` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     for i in list1 {\n4   |         for j in list2 {\n    |                  ^^^^^ `list2` moved due to this implicit call to `.into_iter()`, in previous iteration of loop\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list2`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |         for j in &list2 {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    for i in list1 {\n        for j in list2 {\n            if i == j {\n                return true;\n            }\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list2`\n   --> /tmp/tmp2r_84mzj.rs:4:18\n    |\n2   | fn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    |                                   ----- move occurs because `list2` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     for i in list1 {\n4   |         for j in list2 {\n    |                  ^^^^^ `list2` moved due to this implicit call to `.into_iter()`, in previous iteration of loop\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list2`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |         for j in &list2 {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    list1.iter().any(|x| list2.contains(x))\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    list1.iter().any(|x| list2.contains(x))\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    let mut result = false;\n    for i in list1 {\n        for j in list2 {\n            if i == j {\n                result = true;\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list2`\n   --> /tmp/tmpiilizagw.rs:5:18\n    |\n2   | fn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    |                                   ----- move occurs because `list2` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n5   |         for j in list2 {\n    |                  ^^^^^ `list2` moved due to this implicit call to `.into_iter()`, in previous iteration of loop\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list2`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n5   |         for j in &list2 {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    let mut result = false;\n    for i in list1 {\n        for j in list2 {\n            if i == j {\n                result = true;\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list2`\n   --> /tmp/tmpiilizagw.rs:5:18\n    |\n2   | fn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    |                                   ----- move occurs because `list2` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n5   |         for j in list2 {\n    |                  ^^^^^ `list2` moved due to this implicit call to `.into_iter()`, in previous iteration of loop\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list2`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n5   |         for j in &list2 {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    let mut result = false;\n    for i in list1 {\n        for j in list2 {\n            if i == j {\n                result = true;\n                break;\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list2`\n   --> /tmp/tmpkl_3w5_y.rs:5:18\n    |\n2   | fn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    |                                   ----- move occurs because `list2` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n5   |         for j in list2 {\n    |                  ^^^^^ `list2` moved due to this implicit call to `.into_iter()`, in previous iteration of loop\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list2`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n5   |         for j in &list2 {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    for i in list1 {\n        for j in list2 {\n            if i == j {\n                return true;\n            }\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list2`\n   --> /tmp/tmp2r_84mzj.rs:4:18\n    |\n2   | fn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    |                                   ----- move occurs because `list2` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     for i in list1 {\n4   |         for j in list2 {\n    |                  ^^^^^ `list2` moved due to this implicit call to `.into_iter()`, in previous iteration of loop\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list2`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |         for j in &list2 {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    list1.iter().any(|x| list2.contains(x))\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    list1.iter().any(|x| list2.contains(x))\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    for i in list1 {\n        for j in list2 {\n            if i == j {\n                return true;\n            }\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list2`\n   --> /tmp/tmp2r_84mzj.rs:4:18\n    |\n2   | fn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    |                                   ----- move occurs because `list2` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     for i in list1 {\n4   |         for j in list2 {\n    |                  ^^^^^ `list2` moved due to this implicit call to `.into_iter()`, in previous iteration of loop\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list2`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |         for j in &list2 {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    list1.iter().any(|x| list2.contains(x))\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    let mut result = false;\n    for i in list1 {\n        for j in list2 {\n            if i == j {\n                result = true;\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list2`\n   --> /tmp/tmpiilizagw.rs:5:18\n    |\n2   | fn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    |                                   ----- move occurs because `list2` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n5   |         for j in list2 {\n    |                  ^^^^^ `list2` moved due to this implicit call to `.into_iter()`, in previous iteration of loop\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list2`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n5   |         for j in &list2 {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    let mut result = false;\n    for i in list1 {\n        for j in list2 {\n            if i == j {\n                result = true;\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list2`\n   --> /tmp/tmpiilizagw.rs:5:18\n    |\n2   | fn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    |                                   ----- move occurs because `list2` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n5   |         for j in list2 {\n    |                  ^^^^^ `list2` moved due to this implicit call to `.into_iter()`, in previous iteration of loop\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list2`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n5   |         for j in &list2 {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    for i in list1 {\n        for j in list2 {\n            if i == j {\n                return true;\n            }\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list2`\n   --> /tmp/tmp2r_84mzj.rs:4:18\n    |\n2   | fn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    |                                   ----- move occurs because `list2` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     for i in list1 {\n4   |         for j in list2 {\n    |                  ^^^^^ `list2` moved due to this implicit call to `.into_iter()`, in previous iteration of loop\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list2`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |         for j in &list2 {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    let mut result = false;\n    for i in list1 {\n        for j in list2 {\n            if i == j {\n                result = true;\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list2`\n   --> /tmp/tmpiilizagw.rs:5:18\n    |\n2   | fn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    |                                   ----- move occurs because `list2` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n5   |         for j in list2 {\n    |                  ^^^^^ `list2` moved due to this implicit call to `.into_iter()`, in previous iteration of loop\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list2`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n5   |         for j in &list2 {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    for item in list1 {\n        for item2 in list2 {\n            if item == item2 {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1666123212,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list2`\n   --> /tmp/tmptjxbct2y.rs:4:22\n    |\n2   | fn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    |                                   ----- move occurs because `list2` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     for item in list1 {\n4   |         for item2 in list2 {\n    |                      ^^^^^ `list2` moved due to this implicit call to `.into_iter()`, in previous iteration of loop\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list2`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |         for item2 in &list2 {\n    |                      +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    list1.iter().any(|x| list2.contains(x))\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    list1.iter().any(|x| list2.contains(x))\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    for i in list1 {\n        for j in list2 {\n            if i == j {\n                return true;\n            }\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list2`\n   --> /tmp/tmp2r_84mzj.rs:4:18\n    |\n2   | fn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    |                                   ----- move occurs because `list2` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     for i in list1 {\n4   |         for j in list2 {\n    |                  ^^^^^ `list2` moved due to this implicit call to `.into_iter()`, in previous iteration of loop\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list2`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |         for j in &list2 {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    let mut result = false;\n    for i in list1 {\n        for j in list2 {\n            if i == j {\n                result = true;\n                break;\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list2`\n   --> /tmp/tmpkl_3w5_y.rs:5:18\n    |\n2   | fn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    |                                   ----- move occurs because `list2` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n5   |         for j in list2 {\n    |                  ^^^^^ `list2` moved due to this implicit call to `.into_iter()`, in previous iteration of loop\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list2`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n5   |         for j in &list2 {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    let mut result = false;\n    for i in list1 {\n        for j in list2 {\n            if i == j {\n                result = true;\n                break;\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list2`\n   --> /tmp/tmpkl_3w5_y.rs:5:18\n    |\n2   | fn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    |                                   ----- move occurs because `list2` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n5   |         for j in list2 {\n    |                  ^^^^^ `list2` moved due to this implicit call to `.into_iter()`, in previous iteration of loop\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list2`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n5   |         for j in &list2 {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    for i in list1 {\n        for j in list2 {\n            if i == j {\n                return true;\n            }\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list2`\n   --> /tmp/tmp2r_84mzj.rs:4:18\n    |\n2   | fn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    |                                   ----- move occurs because `list2` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     for i in list1 {\n4   |         for j in list2 {\n    |                  ^^^^^ `list2` moved due to this implicit call to `.into_iter()`, in previous iteration of loop\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list2`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |         for j in &list2 {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    for i in list1 {\n        for j in list2 {\n            if i == j {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list2`\n   --> /tmp/tmpa0lyn4uj.rs:4:18\n    |\n2   | fn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    |                                   ----- move occurs because `list2` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     for i in list1 {\n4   |         for j in list2 {\n    |                  ^^^^^ `list2` moved due to this implicit call to `.into_iter()`, in previous iteration of loop\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list2`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |         for j in &list2 {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    list1.iter().any(|x| list2.contains(x))\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    for i in list1 {\n        for j in list2 {\n            if i == j {\n                return true;\n            }\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list2`\n   --> /tmp/tmp2r_84mzj.rs:4:18\n    |\n2   | fn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    |                                   ----- move occurs because `list2` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     for i in list1 {\n4   |         for j in list2 {\n    |                  ^^^^^ `list2` moved due to this implicit call to `.into_iter()`, in previous iteration of loop\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list2`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |         for j in &list2 {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    let mut result = false;\n    for i in list1 {\n        for j in list2 {\n            if i == j {\n                result = true;\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list2`\n   --> /tmp/tmpiilizagw.rs:5:18\n    |\n2   | fn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    |                                   ----- move occurs because `list2` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n5   |         for j in list2 {\n    |                  ^^^^^ `list2` moved due to this implicit call to `.into_iter()`, in previous iteration of loop\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list2`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n5   |         for j in &list2 {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    for i in list1 {\n        for j in list2 {\n            if i == j {\n                return true;\n            }\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list2`\n   --> /tmp/tmp2r_84mzj.rs:4:18\n    |\n2   | fn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    |                                   ----- move occurs because `list2` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     for i in list1 {\n4   |         for j in list2 {\n    |                  ^^^^^ `list2` moved due to this implicit call to `.into_iter()`, in previous iteration of loop\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list2`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |         for j in &list2 {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    let mut result = false;\n    for i in list1 {\n        for j in list2 {\n            if i == j {\n                result = true;\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list2`\n   --> /tmp/tmpiilizagw.rs:5:18\n    |\n2   | fn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    |                                   ----- move occurs because `list2` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n5   |         for j in list2 {\n    |                  ^^^^^ `list2` moved due to this implicit call to `.into_iter()`, in previous iteration of loop\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list2`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n5   |         for j in &list2 {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    for i in list1 {\n        for j in list2 {\n            if i == j {\n                return true;\n            }\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list2`\n   --> /tmp/tmp2r_84mzj.rs:4:18\n    |\n2   | fn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    |                                   ----- move occurs because `list2` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     for i in list1 {\n4   |         for j in list2 {\n    |                  ^^^^^ `list2` moved due to this implicit call to `.into_iter()`, in previous iteration of loop\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list2`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |         for j in &list2 {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    let mut result = false;\n    for i in list1 {\n        for j in list2 {\n            if i == j {\n                result = true;\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list2`\n   --> /tmp/tmpiilizagw.rs:5:18\n    |\n2   | fn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    |                                   ----- move occurs because `list2` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n5   |         for j in list2 {\n    |                  ^^^^^ `list2` moved due to this implicit call to `.into_iter()`, in previous iteration of loop\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list2`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n5   |         for j in &list2 {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    list1.iter().any(|&x| list2.contains(&x))\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1666123212,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    list1.iter().any(|x| list2.contains(x))\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    for i in list1 {\n        for j in list2 {\n            if i == j {\n                return true;\n            }\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list2`\n   --> /tmp/tmp2r_84mzj.rs:4:18\n    |\n2   | fn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    |                                   ----- move occurs because `list2` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     for i in list1 {\n4   |         for j in list2 {\n    |                  ^^^^^ `list2` moved due to this implicit call to `.into_iter()`, in previous iteration of loop\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list2`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |         for j in &list2 {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    list1.iter().any(|x| list2.contains(x))\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    for i in list1 {\n        for j in list2 {\n            if i == j {\n                return true;\n            }\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list2`\n   --> /tmp/tmp2r_84mzj.rs:4:18\n    |\n2   | fn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    |                                   ----- move occurs because `list2` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     for i in list1 {\n4   |         for j in list2 {\n    |                  ^^^^^ `list2` moved due to this implicit call to `.into_iter()`, in previous iteration of loop\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list2`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |         for j in &list2 {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    list1.iter().any(|x| list2.contains(x))\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    for item in list1 {\n        for item2 in list2 {\n            if item == item2 {\n                return true;\n            }\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list2`\n   --> /tmp/tmp434u2m42.rs:4:22\n    |\n2   | fn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    |                                   ----- move occurs because `list2` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     for item in list1 {\n4   |         for item2 in list2 {\n    |                      ^^^^^ `list2` moved due to this implicit call to `.into_iter()`, in previous iteration of loop\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list2`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |         for item2 in &list2 {\n    |                      +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    for i in list1 {\n        for j in list2 {\n            if i == j {\n                return true;\n            }\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list2`\n   --> /tmp/tmp2r_84mzj.rs:4:18\n    |\n2   | fn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    |                                   ----- move occurs because `list2` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     for i in list1 {\n4   |         for j in list2 {\n    |                  ^^^^^ `list2` moved due to this implicit call to `.into_iter()`, in previous iteration of loop\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list2`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |         for j in &list2 {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    list1.iter().any(|x| list2.contains(x))\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    let mut result = false;\n    for i in list1 {\n        for j in list2 {\n            if i == j {\n                result = true;\n                break;\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list2`\n   --> /tmp/tmpkl_3w5_y.rs:5:18\n    |\n2   | fn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    |                                   ----- move occurs because `list2` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n5   |         for j in list2 {\n    |                  ^^^^^ `list2` moved due to this implicit call to `.into_iter()`, in previous iteration of loop\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list2`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n5   |         for j in &list2 {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    list1.iter().any(|x| list2.contains(x))\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    for i in list1 {\n        for j in list2 {\n            if i == j {\n                return true;\n            }\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list2`\n   --> /tmp/tmp2r_84mzj.rs:4:18\n    |\n2   | fn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    |                                   ----- move occurs because `list2` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     for i in list1 {\n4   |         for j in list2 {\n    |                  ^^^^^ `list2` moved due to this implicit call to `.into_iter()`, in previous iteration of loop\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list2`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |         for j in &list2 {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    list1.iter().any(|x| list2.contains(x))\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    for i in list1 {\n        for j in list2 {\n            if i == j {\n                return true;\n            }\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list2`\n   --> /tmp/tmp2r_84mzj.rs:4:18\n    |\n2   | fn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    |                                   ----- move occurs because `list2` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     for i in list1 {\n4   |         for j in list2 {\n    |                  ^^^^^ `list2` moved due to this implicit call to `.into_iter()`, in previous iteration of loop\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list2`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |         for j in &list2 {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    let mut result = false;\n    for i in list1 {\n        for j in list2 {\n            if i == j {\n                result = true;\n                break;\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list2`\n   --> /tmp/tmpkl_3w5_y.rs:5:18\n    |\n2   | fn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    |                                   ----- move occurs because `list2` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n5   |         for j in list2 {\n    |                  ^^^^^ `list2` moved due to this implicit call to `.into_iter()`, in previous iteration of loop\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list2`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n5   |         for j in &list2 {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    for i in list1 {\n        for j in list2 {\n            if i == j {\n                return true;\n            }\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list2`\n   --> /tmp/tmp2r_84mzj.rs:4:18\n    |\n2   | fn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    |                                   ----- move occurs because `list2` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     for i in list1 {\n4   |         for j in list2 {\n    |                  ^^^^^ `list2` moved due to this implicit call to `.into_iter()`, in previous iteration of loop\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list2`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |         for j in &list2 {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    let mut result = false;\n    for i in list1 {\n        for j in list2 {\n            if i == j {\n                result = true;\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list2`\n   --> /tmp/tmpiilizagw.rs:5:18\n    |\n2   | fn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    |                                   ----- move occurs because `list2` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n5   |         for j in list2 {\n    |                  ^^^^^ `list2` moved due to this implicit call to `.into_iter()`, in previous iteration of loop\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list2`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n5   |         for j in &list2 {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    let mut result = false;\n    for i in list1 {\n        for j in list2 {\n            if i == j {\n                result = true;\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list2`\n   --> /tmp/tmpiilizagw.rs:5:18\n    |\n2   | fn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    |                                   ----- move occurs because `list2` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n5   |         for j in list2 {\n    |                  ^^^^^ `list2` moved due to this implicit call to `.into_iter()`, in previous iteration of loop\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list2`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n5   |         for j in &list2 {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    list1.iter().any(|x| list2.contains(x))\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    list1.iter().any(|x| list2.contains(x))\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    list1.iter().any(|x| list2.contains(x))\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    for i in list1 {\n        for j in list2 {\n            if i == j {\n                return true;\n            }\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list2`\n   --> /tmp/tmp2r_84mzj.rs:4:18\n    |\n2   | fn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    |                                   ----- move occurs because `list2` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     for i in list1 {\n4   |         for j in list2 {\n    |                  ^^^^^ `list2` moved due to this implicit call to `.into_iter()`, in previous iteration of loop\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list2`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |         for j in &list2 {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    for i in list1 {\n        for j in list2 {\n            if i == j {\n                return true;\n            }\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list2`\n   --> /tmp/tmp2r_84mzj.rs:4:18\n    |\n2   | fn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    |                                   ----- move occurs because `list2` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     for i in list1 {\n4   |         for j in list2 {\n    |                  ^^^^^ `list2` moved due to this implicit call to `.into_iter()`, in previous iteration of loop\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list2`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |         for j in &list2 {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    let mut result = false;\n    for i in list1 {\n        for j in list2 {\n            if i == j {\n                result = true;\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list2`\n   --> /tmp/tmpiilizagw.rs:5:18\n    |\n2   | fn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    |                                   ----- move occurs because `list2` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n5   |         for j in list2 {\n    |                  ^^^^^ `list2` moved due to this implicit call to `.into_iter()`, in previous iteration of loop\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list2`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n5   |         for j in &list2 {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    let mut result = false;\n    for i in list1 {\n        for j in list2 {\n            if i == j {\n                result = true;\n                break;\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list2`\n   --> /tmp/tmpkl_3w5_y.rs:5:18\n    |\n2   | fn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    |                                   ----- move occurs because `list2` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n5   |         for j in list2 {\n    |                  ^^^^^ `list2` moved due to this implicit call to `.into_iter()`, in previous iteration of loop\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list2`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n5   |         for j in &list2 {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    list1.iter().any(|x| list2.contains(x))\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    for i in list1 {\n        for j in list2 {\n            if i == j {\n                return true;\n            }\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list2`\n   --> /tmp/tmp2r_84mzj.rs:4:18\n    |\n2   | fn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    |                                   ----- move occurs because `list2` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     for i in list1 {\n4   |         for j in list2 {\n    |                  ^^^^^ `list2` moved due to this implicit call to `.into_iter()`, in previous iteration of loop\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list2`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |         for j in &list2 {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    let mut result = false;\n    for i in list1 {\n        for j in list2 {\n            if i == j {\n                result = true;\n                break;\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list2`\n   --> /tmp/tmpkl_3w5_y.rs:5:18\n    |\n2   | fn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    |                                   ----- move occurs because `list2` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n5   |         for j in list2 {\n    |                  ^^^^^ `list2` moved due to this implicit call to `.into_iter()`, in previous iteration of loop\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list2`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n5   |         for j in &list2 {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    for i in list1 {\n        for j in list2 {\n            if i == j {\n                return true;\n            }\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list2`\n   --> /tmp/tmp2r_84mzj.rs:4:18\n    |\n2   | fn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    |                                   ----- move occurs because `list2` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     for i in list1 {\n4   |         for j in list2 {\n    |                  ^^^^^ `list2` moved due to this implicit call to `.into_iter()`, in previous iteration of loop\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list2`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |         for j in &list2 {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    for i in list1 {\n        for j in list2 {\n            if i == j {\n                return true;\n            }\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list2`\n   --> /tmp/tmp2r_84mzj.rs:4:18\n    |\n2   | fn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    |                                   ----- move occurs because `list2` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     for i in list1 {\n4   |         for j in list2 {\n    |                  ^^^^^ `list2` moved due to this implicit call to `.into_iter()`, in previous iteration of loop\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list2`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |         for j in &list2 {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    for i in list1 {\n        for j in list2 {\n            if i == j {\n                return true;\n            }\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list2`\n   --> /tmp/tmp2r_84mzj.rs:4:18\n    |\n2   | fn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    |                                   ----- move occurs because `list2` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     for i in list1 {\n4   |         for j in list2 {\n    |                  ^^^^^ `list2` moved due to this implicit call to `.into_iter()`, in previous iteration of loop\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list2`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |         for j in &list2 {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    for i in list1 {\n        for j in list2 {\n            if i == j {\n                return true;\n            }\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list2`\n   --> /tmp/tmp2r_84mzj.rs:4:18\n    |\n2   | fn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    |                                   ----- move occurs because `list2` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     for i in list1 {\n4   |         for j in list2 {\n    |                  ^^^^^ `list2` moved due to this implicit call to `.into_iter()`, in previous iteration of loop\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list2`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |         for j in &list2 {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    let mut result = false;\n    for i in list1 {\n        for j in list2 {\n            if i == j {\n                result = true;\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list2`\n   --> /tmp/tmpiilizagw.rs:5:18\n    |\n2   | fn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    |                                   ----- move occurs because `list2` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n5   |         for j in list2 {\n    |                  ^^^^^ `list2` moved due to this implicit call to `.into_iter()`, in previous iteration of loop\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list2`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n5   |         for j in &list2 {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    list1.iter().any(|x| list2.contains(x))\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    list1.iter().any(|x| list2.contains(x))\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    list1.iter().any(|x| list2.contains(x))\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    list1.iter().any(|x| list2.contains(x))\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    for i in list1 {\n        for j in list2 {\n            if i == j {\n                return true;\n            }\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list2`\n   --> /tmp/tmp2r_84mzj.rs:4:18\n    |\n2   | fn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    |                                   ----- move occurs because `list2` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     for i in list1 {\n4   |         for j in list2 {\n    |                  ^^^^^ `list2` moved due to this implicit call to `.into_iter()`, in previous iteration of loop\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list2`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |         for j in &list2 {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    let mut result = false;\n    for i in list1 {\n        for j in list2 {\n            if i == j {\n                result = true;\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list2`\n   --> /tmp/tmpiilizagw.rs:5:18\n    |\n2   | fn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    |                                   ----- move occurs because `list2` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n5   |         for j in list2 {\n    |                  ^^^^^ `list2` moved due to this implicit call to `.into_iter()`, in previous iteration of loop\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list2`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n5   |         for j in &list2 {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    for i in list1 {\n        for j in list2 {\n            if i == j {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list2`\n   --> /tmp/tmpa0lyn4uj.rs:4:18\n    |\n2   | fn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    |                                   ----- move occurs because `list2` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     for i in list1 {\n4   |         for j in list2 {\n    |                  ^^^^^ `list2` moved due to this implicit call to `.into_iter()`, in previous iteration of loop\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list2`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |         for j in &list2 {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    for i in list1 {\n        for j in list2 {\n            if i == j {\n                return true;\n            }\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list2`\n   --> /tmp/tmp2r_84mzj.rs:4:18\n    |\n2   | fn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    |                                   ----- move occurs because `list2` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     for i in list1 {\n4   |         for j in list2 {\n    |                  ^^^^^ `list2` moved due to this implicit call to `.into_iter()`, in previous iteration of loop\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list2`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |         for j in &list2 {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    let mut result = false;\n    for i in list1 {\n        for j in list2 {\n            if i == j {\n                result = true;\n                break;\n            }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list2`\n   --> /tmp/tmpkl_3w5_y.rs:5:18\n    |\n2   | fn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    |                                   ----- move occurs because `list2` has type `Vec<isize>`, which does not implement the `Copy` trait\n...\n5   |         for j in list2 {\n    |                  ^^^^^ `list2` moved due to this implicit call to `.into_iter()`, in previous iteration of loop\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list2`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n5   |         for j in &list2 {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    list1.iter().any(|x| list2.contains(x))\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to check whether any value in a sequence exists in a sequence or not.\nfn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    for i in list1 {\n        for j in list2 {\n            if i == j {\n                return true;\n            }\n        }\n    }\n    false\n}\n\nfn main() {\n    let candidate = overlapping;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], vec![6, 7, 8, 9]), false);\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), false);\n    assert_eq!(candidate(vec![1, 4, 5], vec![1, 4, 5]), true);\n}\n",
      "timestamp": 1665510066,
      "stdout": "",
      "stderr": "error[E0382]: use of moved value: `list2`\n   --> /tmp/tmp2r_84mzj.rs:4:18\n    |\n2   | fn overlapping(list1: Vec<isize>, list2: Vec<isize>) -> bool {\n    |                                   ----- move occurs because `list2` has type `Vec<isize>`, which does not implement the `Copy` trait\n3   |     for i in list1 {\n4   |         for j in list2 {\n    |                  ^^^^^ `list2` moved due to this implicit call to `.into_iter()`, in previous iteration of loop\n    |\nnote: this function takes ownership of the receiver `self`, which moves `list2`\nhelp: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n4   |         for j in &list2 {\n    |                  +\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0382`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}