{
  "name": "mbpp_784_mul_even_odd",
  "language": "rs",
  "prompt": "/// Write a function to find the product of first even and odd number of a given list.\nfn mul_even_odd(list1: Vec<isize>) -> isize {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_784_mul_even_odd.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\nfn main() {\n    let candidate = mul_even_odd;\n    assert_eq!(candidate(vec![1, 3, 5, 7, 4, 1, 6, 8]), 4);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![1, 5, 7, 9, 10]), 10);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    let mut even = 0;\n    let mut odd = 0;\n    let mut flag = false;\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i;\n            flag = true;\n            break;\n        }\n    }\n    if flag {\n        for i in list1 {\n            if i % 2 != 0 {\n                odd = i;\n                break;\n            }\n        }\n    }\n    even * odd",
    "    let mut even = 0;\n    let mut odd = 0;\n    let mut count = 0;\n    for i in list1 {\n        if count == 0 {\n            even = i;\n            count += 1;\n        } else if count == 1 {\n            odd = i;\n            break;\n        }\n    }\n    even * odd",
    "    let mut even = 0;\n    let mut odd = 0;\n    let mut count = 0;\n    for i in list1 {\n        if i % 2 == 0 {\n            if count == 0 {\n                even = i;\n                count += 1;\n            }\n        } else {\n            if count == 1 {\n                odd = i;\n                break;\n            }\n        }\n    }\n    even * odd",
    "    let mut even = None;\n    let mut odd = None;\n    for i in list1 {\n        if i % 2 == 0 {\n            if even.is_none() {\n                even = Some(i);\n            }\n        } else {\n            if odd.is_none() {\n                odd = Some(i);\n            }\n        }\n    }\n    even.unwrap_or(1) * odd.unwrap_or(1)",
    "    let mut even = 0;\n    let mut odd = 0;\n    let mut flag = true;\n    for i in list1 {\n        if flag {\n            even = i;\n            flag = false;\n        } else {\n            odd = i;\n            flag = true;\n        }\n    }\n    even * odd",
    "    let mut even_odd_mul = 1;\n    let mut even_odd_count = 0;\n    for i in list1 {\n        if (i % 2 == 0 || i % 2 == 1) && even_odd_count < 2 {\n            even_odd_mul *= i;\n            even_odd_count += 1;\n        }\n    }\n    even_odd_mul",
    "    let mut even_odd = list1.iter().enumerate().filter(|&(i, _)| i % 2 == 0);\n    let even = even_odd.next().unwrap().1;\n    let odd = even_odd.next().unwrap().1;\n    even * odd",
    "    let mut even_odd_list: Vec<isize> = Vec::new();\n    for i in list1 {\n        if i % 2 == 0 {\n            even_odd_list.push(i);\n        }\n    }\n    let mut odd_even_list: Vec<isize> = Vec::new();\n    for i in list1 {\n        if i % 2 != 0 {\n            odd_even_list.push(i);\n        }\n    }\n    let even_odd_list_len = even_odd_list.len();\n    let odd_even_list_len = odd_even_list.len();\n    let mut even_odd_list_sum: isize = 0;\n    let mut odd_even_list_sum: isize = 0;\n    if even_odd_list_len > 0 {\n        even_odd_list_sum = even_odd_list[0];\n    }\n    if odd_even_list_len > 0 {\n        odd_even_list_sum = odd_even_list[0];\n    }\n    even_odd_list_sum * odd_even_list_sum",
    "    let mut even: isize = 1;\n    let mut odd: isize = 1;\n    for i in 0..list1.len() {\n        if i % 2 == 0 {\n            even *= list1[i];\n        } else {\n            odd *= list1[i];\n        }\n    }\n    even * odd",
    "    let mut even_odd_list = Vec::new();\n    for i in list1 {\n        if i % 2 == 0 {\n            even_odd_list.push(i);\n        }\n    }\n    let mut odd_even_list = Vec::new();\n    for i in list1 {\n        if i % 2 != 0 {\n            odd_even_list.push(i);\n        }\n    }\n    even_odd_list[0] * odd_even_list[0]",
    "    let mut even = None;\n    let mut odd = None;\n    for i in list1 {\n        if i % 2 == 0 {\n            if even.is_none() {\n                even = Some(i);\n            }\n        } else {\n            if odd.is_none() {\n                odd = Some(i);\n            }\n        }\n    }\n    match (even, odd) {\n        (Some(e), Some(o)) => e * o,\n        _ => 0,\n    }",
    "    let mut even = 0;\n    let mut odd = 0;\n    let mut flag = true;\n    for i in list1 {\n        if flag {\n            even = i;\n            flag = false;\n        } else {\n            odd = i;\n            break;\n        }\n    }\n    even * odd",
    "    let mut even = 0;\n    let mut odd = 0;\n    let mut flag = true;\n    for i in list1 {\n        if flag {\n            even = i;\n            flag = false;\n        } else {\n            odd = i;\n            break;\n        }\n    }\n    even * odd",
    "    let mut even_odd_mul = 1;\n    let mut even_odd_mul_flag = false;\n    for i in list1 {\n        if i % 2 == 0 {\n            if even_odd_mul_flag == false {\n                even_odd_mul = even_odd_mul * i;\n                even_odd_mul_flag = true;\n            } else {\n                break;\n            }\n        } else {\n            if even_odd_mul_flag == true {\n                even_odd_mul = even_odd_mul * i;\n                break;\n            }\n        }\n    }\n    even_odd_mul",
    "    let mut even_odd_mul = 1;\n    let mut even_odd_count = 0;\n    for i in list1 {\n        if even_odd_count == 2 {\n            break;\n        }\n        if i % 2 == 0 {\n            even_odd_mul *= i;\n            even_odd_count += 1;\n        } else if i % 2 != 0 {\n            even_odd_mul *= i;\n            even_odd_count += 1;\n        }\n    }\n    even_odd_mul",
    "    let mut even = 0;\n    let mut odd = 0;\n    let mut even_flag = false;\n    let mut odd_flag = false;\n    for i in list1 {\n        if i % 2 == 0 && !even_flag {\n            even = i;\n            even_flag = true;\n        } else if i % 2 != 0 && !odd_flag {\n            odd = i;\n            odd_flag = true;\n        }\n        if even_flag && odd_flag {\n            break;\n        }\n    }\n    even * odd",
    "    let mut even = 0;\n    let mut odd = 0;\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i;\n            break;\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i;\n            break;\n        }\n    }\n    even * odd",
    "    let mut even = 0;\n    let mut odd = 0;\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i;\n            break;\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i;\n            break;\n        }\n    }\n    even * odd",
    "    let mut even = 0;\n    let mut odd = 0;\n    let mut i = 0;\n    while i < list1.len() {\n        if list1[i] % 2 == 0 {\n            even = list1[i];\n            break;\n        }\n        i += 1;\n    }\n    i = 0;\n    while i < list1.len() {\n        if list1[i] % 2 != 0 {\n            odd = list1[i];\n            break;\n        }\n        i += 1;\n    }\n    even * odd",
    "    let mut even = 0;\n    let mut odd = 0;\n    for (i, x) in list1.iter().enumerate() {\n        if i % 2 == 0 {\n            even = even + x;\n        } else {\n            odd = odd + x;\n        }\n    }\n    even * odd"
  ]
}