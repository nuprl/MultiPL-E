{
  "name": "mbpp_637_noprofit_noloss",
  "language": "rs",
  "prompt": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_637_noprofit_noloss.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    if actual_cost == sale_amount {\n        true\n    } else {\n        false\n    }\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    if actual_cost == sale_amount {\n        return true;\n    }\n    false\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    let profit = sale_amount - actual_cost;\n    profit == 0\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1666123492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to check whether the given amount has no profit and no loss\nfn noprofit_noloss(actual_cost: isize, sale_amount: isize) -> bool {\n    actual_cost == sale_amount\n}\n\nfn main() {\n    let candidate = noprofit_noloss;\n    assert_eq!(candidate(1500, 1200), false);\n    assert_eq!(candidate(100, 100), true);\n    assert_eq!(candidate(2000, 5000), false);\n}\n",
      "timestamp": 1665510446,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}