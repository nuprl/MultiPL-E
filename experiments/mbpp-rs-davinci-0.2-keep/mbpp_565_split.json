{
  "name": "mbpp_565_split",
  "language": "rs",
  "prompt": "/// Write a python function to split a string into characters.\nfn split(word: String) -> Vec<String> {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_565_split.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\nfn main() {\n    let candidate = split;\n    assert_eq!(candidate(String::from(\"python\")), vec![String::from(\"p\"), String::from(\"y\"), String::from(\"t\"), String::from(\"h\"), String::from(\"o\"), String::from(\"n\")]);\n    assert_eq!(candidate(String::from(\"Name\")), vec![String::from(\"N\"), String::from(\"a\"), String::from(\"m\"), String::from(\"e\")]);\n    assert_eq!(candidate(String::from(\"program\")), vec![String::from(\"p\"), String::from(\"r\"), String::from(\"o\"), String::from(\"g\"), String::from(\"r\"), String::from(\"a\"), String::from(\"m\")]);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    let mut chars: Vec<String> = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars",
    "    word.chars().map(|c| c.to_string()).collect()",
    "    let mut chars: Vec<String> = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars",
    "    word.chars().map(|c| c.to_string()).collect()",
    "    word.chars().map(|c| c.to_string()).collect()",
    "    word.chars().map(|c| c.to_string()).collect()",
    "    word.chars().map(|c| c.to_string()).collect()",
    "    let mut chars: Vec<String> = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars",
    "    word.chars().map(|c| c.to_string()).collect()",
    "    let mut result = Vec::new();\n    for c in word.chars() {\n        result.push(c.to_string());\n    }\n    result",
    "    let mut result = Vec::new();\n    for c in word.chars() {\n        result.push(c.to_string());\n    }\n    result",
    "    word.chars().map(|c| c.to_string()).collect()",
    "    let mut result = Vec::new();\n    for c in word.chars() {\n        result.push(c.to_string());\n    }\n    result",
    "    let mut chars = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars",
    "    let mut result = Vec::new();\n    for c in word.chars() {\n        result.push(c.to_string());\n    }\n    result",
    "    word.split(\"\").filter(|s| s != &\"\").map(|s| s.to_string()).collect()",
    "    let mut chars: Vec<String> = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars",
    "    let mut result = Vec::new();\n    for c in word.chars() {\n        result.push(c.to_string());\n    }\n    result",
    "    word.chars().map(|c| c.to_string()).collect()",
    "    word.chars().map(|c| c.to_string()).collect()",
    "    let mut result = Vec::new();\n    for c in word.chars() {\n        result.push(c.to_string());\n    }\n    result",
    "    let mut chars: Vec<String> = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars",
    "    word.chars().map(|c| c.to_string()).collect()",
    "    word.chars().map(|c| c.to_string()).collect()",
    "    let mut chars: Vec<String> = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars",
    "    let mut result = Vec::new();\n    for c in word.chars() {\n        result.push(c.to_string());\n    }\n    result",
    "    word.chars().map(|c| c.to_string()).collect()",
    "    let mut chars = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars",
    "    word.chars().map(|c| c.to_string()).collect()",
    "    word.chars().map(|c| c.to_string()).collect()",
    "    word.chars().map(|c| c.to_string()).collect()",
    "    word.chars().map(|c| c.to_string()).collect()",
    "    word.chars().map(|c| c.to_string()).collect()",
    "    word.chars().map(|c| c.to_string()).collect()",
    "    let mut chars: Vec<String> = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars",
    "    word.chars().map(|c| c.to_string()).collect()",
    "    word.chars().map(|c| c.to_string()).collect()",
    "    let mut chars = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars",
    "    word.chars().map(|c| c.to_string()).collect()",
    "    let mut chars: Vec<String> = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars",
    "    word.chars().map(|c| c.to_string()).collect()",
    "    let mut result = Vec::new();\n    for c in word.chars() {\n        result.push(c.to_string());\n    }\n    result",
    "    word.chars().map(|c| c.to_string()).collect()",
    "    let mut chars = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars",
    "    let mut result = Vec::new();\n    for c in word.chars() {\n        result.push(c.to_string());\n    }\n    result",
    "    word.chars().map(|c| c.to_string()).collect()",
    "    word.chars().map(|c| c.to_string()).collect()",
    "    word.chars().map(|c| c.to_string()).collect()",
    "    let mut chars: Vec<String> = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars",
    "    word.chars().map(|c| c.to_string()).collect()",
    "    let mut chars: Vec<String> = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars",
    "    word.chars().map(|c| c.to_string()).collect()",
    "    let mut chars: Vec<String> = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars",
    "    let mut result = Vec::new();\n    for c in word.chars() {\n        result.push(c.to_string());\n    }\n    result",
    "    word.chars().map(|c| c.to_string()).collect()",
    "    let mut result = Vec::new();\n    for c in word.chars() {\n        result.push(c.to_string());\n    }\n    result",
    "    word.chars().map(|c| c.to_string()).collect()",
    "    word.chars().map(|c| c.to_string()).collect()",
    "    word.chars().map(|c| c.to_string()).collect()",
    "    word.chars().map(|c| c.to_string()).collect()",
    "    let mut chars: Vec<String> = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars",
    "    word.chars().map(|c| c.to_string()).collect()",
    "    word.chars().map(|c| c.to_string()).collect()",
    "    let mut chars = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars",
    "    word.chars().map(|c| c.to_string()).collect()",
    "    let mut chars = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars",
    "    let mut chars: Vec<String> = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars",
    "    let mut chars: Vec<String> = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars",
    "    word.chars().map(|c| c.to_string()).collect()",
    "    let mut chars: Vec<String> = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars",
    "    let mut chars: Vec<String> = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars",
    "    let mut chars: Vec<String> = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars",
    "    let mut chars: Vec<String> = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars",
    "    word.chars().map(|c| c.to_string()).collect()",
    "    word.chars().map(|c| c.to_string()).collect()",
    "    let mut chars: Vec<String> = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars",
    "    word.chars().map(|c| c.to_string()).collect()",
    "    let mut chars = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars",
    "    let mut chars: Vec<String> = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars",
    "    let mut chars: Vec<String> = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars",
    "    word.chars().map(|c| c.to_string()).collect()",
    "    let mut chars: Vec<String> = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars",
    "    word.chars().map(|c| c.to_string()).collect()",
    "    word.chars().map(|c| c.to_string()).collect()",
    "    let mut chars = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars",
    "    word.chars().map(|c| c.to_string()).collect()",
    "    let mut chars: Vec<String> = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars",
    "    let mut chars: Vec<String> = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars",
    "    let mut result = Vec::new();\n    for c in word.chars() {\n        result.push(c.to_string());\n    }\n    result",
    "    word.chars().map(|c| c.to_string()).collect()",
    "    word.chars().map(|c| c.to_string()).collect()",
    "    word.chars().map(|c| c.to_string()).collect()",
    "    let mut chars: Vec<String> = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars",
    "    word.chars().map(|c| c.to_string()).collect()",
    "    word.chars().map(|c| c.to_string()).collect()",
    "    word.chars().map(|c| c.to_string()).collect()",
    "    let mut chars = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars",
    "    word.chars().map(|c| c.to_string()).collect()",
    "    let mut chars: Vec<String> = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars",
    "    word.chars().map(|c| c.to_string()).collect()",
    "    let mut chars: Vec<String> = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars",
    "    let mut result = Vec::new();\n    for c in word.chars() {\n        result.push(c.to_string());\n    }\n    result",
    "    word.chars().map(|c| c.to_string()).collect()",
    "    let mut result = Vec::new();\n    for c in word.chars() {\n        result.push(c.to_string());\n    }\n    result",
    "    word.chars().map(|c| c.to_string()).collect()",
    "    let mut result = Vec::new();\n    for c in word.chars() {\n        result.push(c.to_string());\n    }\n    result",
    "    let mut chars = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars",
    "    word.chars().map(|c| c.to_string()).collect()",
    "    word.chars().map(|c| c.to_string()).collect()",
    "    word.chars().map(|c| c.to_string()).collect()",
    "    word.chars().map(|c| c.to_string()).collect()",
    "    word.chars().map(|c| c.to_string()).collect()",
    "    let mut chars: Vec<String> = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars",
    "    word.chars().map(|c| c.to_string()).collect()",
    "    let mut chars = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars",
    "    word.chars().map(|c| c.to_string()).collect()",
    "    word.chars().map(|c| c.to_string()).collect()",
    "    let mut chars: Vec<String> = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars",
    "    word.chars().map(|c| c.to_string()).collect()",
    "    word.chars().map(|c| c.to_string()).collect()",
    "    word.chars().map(|c| c.to_string()).collect()",
    "    let mut result = Vec::new();\n    for c in word.chars() {\n        result.push(c.to_string());\n    }\n    result",
    "    word.chars().map(|c| c.to_string()).collect()",
    "    word.chars().map(|c| c.to_string()).collect()",
    "    let mut result = Vec::new();\n    for c in word.chars() {\n        result.push(c.to_string());\n    }\n    result",
    "    word.chars().map(|c| c.to_string()).collect()",
    "    word.chars().map(|c| c.to_string()).collect()",
    "    word.chars().map(|c| c.to_string()).collect()",
    "    let mut result: Vec<String> = Vec::new();\n    for c in word.chars() {\n        result.push(c.to_string());\n    }\n    result",
    "    word.chars().map(|c| c.to_string()).collect()",
    "    let mut chars = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars",
    "    let mut chars: Vec<String> = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars",
    "    let mut result = Vec::new();\n    for c in word.chars() {\n        result.push(c.to_string());\n    }\n    result",
    "    let mut chars = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars",
    "    word.chars().map(|c| c.to_string()).collect()",
    "    let mut chars: Vec<String> = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars",
    "    word.chars().map(|c| c.to_string()).collect()",
    "    word.chars().map(|c| c.to_string()).collect()",
    "    let mut chars: Vec<String> = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars",
    "    word.chars().map(|c| c.to_string()).collect()",
    "    word.chars().map(|c| c.to_string()).collect()",
    "    let mut chars: Vec<String> = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars",
    "    word.chars().map(|c| c.to_string()).collect()",
    "    let mut result = Vec::new();\n    for c in word.chars() {\n        result.push(c.to_string());\n    }\n    result",
    "    word.chars().map(|c| c.to_string()).collect()",
    "    word.chars().map(|c| c.to_string()).collect()",
    "    word.chars().map(|c| c.to_string()).collect()",
    "    let mut chars: Vec<String> = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars",
    "    let mut result = Vec::new();\n    for c in word.chars() {\n        result.push(c.to_string());\n    }\n    result",
    "    let mut chars: Vec<String> = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars",
    "    let mut chars: Vec<String> = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars",
    "    let mut result = Vec::new();\n    for c in word.chars() {\n        result.push(c.to_string());\n    }\n    result",
    "    word.chars().map(|c| c.to_string()).collect()",
    "    let mut result = Vec::new();\n    for c in word.chars() {\n        result.push(c.to_string());\n    }\n    result",
    "    word.chars().map(|c| c.to_string()).collect()",
    "    let mut chars: Vec<String> = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars",
    "    word.chars().map(|c| c.to_string()).collect()",
    "    let mut chars = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars",
    "    word.chars().map(|c| c.to_string()).collect()",
    "    let mut chars = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars",
    "    word.chars().map(|c| c.to_string()).collect()",
    "    word.chars().map(|c| c.to_string()).collect()",
    "    let mut chars = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars",
    "    let mut chars: Vec<String> = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars",
    "    let mut result = Vec::new();\n    for c in word.chars() {\n        result.push(c.to_string());\n    }\n    result",
    "    let mut chars: Vec<String> = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars",
    "    let mut chars: Vec<String> = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars",
    "    word.chars().map(|c| c.to_string()).collect()",
    "    word.chars().map(|c| c.to_string()).collect()",
    "    word.chars().map(|c| c.to_string()).collect()",
    "    word.chars().map(|c| c.to_string()).collect()",
    "    let mut chars: Vec<String> = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars",
    "    let mut result = Vec::new();\n    for c in word.chars() {\n        result.push(c.to_string());\n    }\n    result",
    "    word.chars().map(|c| c.to_string()).collect()",
    "    word.chars().map(|c| c.to_string()).collect()",
    "    let mut chars: Vec<String> = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars",
    "    let mut chars: Vec<String> = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars",
    "    let mut result = Vec::new();\n    for c in word.chars() {\n        result.push(c.to_string());\n    }\n    result",
    "    word.chars().map(|c| c.to_string()).collect()",
    "    word.chars().map(|c| c.to_string()).collect()",
    "    word.chars().map(|c| c.to_string()).collect()",
    "    let mut chars = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars",
    "    let mut result: Vec<String> = Vec::new();\n    for c in word.chars() {\n        result.push(c.to_string());\n    }\n    result",
    "    word.chars().map(|c| c.to_string()).collect()",
    "    word.chars().map(|c| c.to_string()).collect()",
    "    let mut chars = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars",
    "    word.chars().map(|c| c.to_string()).collect()",
    "    let mut vec: Vec<String> = Vec::new();\n    for c in word.chars() {\n        vec.push(c.to_string());\n    }\n    vec",
    "    let mut result = Vec::new();\n    for c in word.chars() {\n        result.push(c.to_string());\n    }\n    result",
    "    let mut chars = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars",
    "    word.chars().map(|c| c.to_string()).collect()",
    "    let mut chars = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars",
    "    let mut vec = Vec::new();\n    for c in word.chars() {\n        vec.push(c.to_string());\n    }\n    vec",
    "    let mut chars: Vec<String> = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars",
    "    word.chars().map(|c| c.to_string()).collect()",
    "    word.chars().map(|c| c.to_string()).collect()",
    "    word.chars().map(|c| c.to_string()).collect()",
    "    let mut result = Vec::new();\n    for c in word.chars() {\n        result.push(c.to_string());\n    }\n    result",
    "    word.chars().map(|c| c.to_string()).collect()",
    "    let mut chars: Vec<String> = Vec::new();\n    for c in word.chars() {\n        chars.push(c.to_string());\n    }\n    chars"
  ]
}