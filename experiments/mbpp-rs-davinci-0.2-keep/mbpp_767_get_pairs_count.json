{
  "name": "mbpp_767_get_pairs_count",
  "language": "rs",
  "prompt": "/// Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nfn get_pairs_count(arr: Vec<isize>, sum: isize) -> isize {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_767_get_pairs_count.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\nfn main() {\n    let candidate = get_pairs_count;\n    assert_eq!(candidate(vec![1, 1, 1, 1], 2), 6);\n    assert_eq!(candidate(vec![1, 5, 7, -1, 5], 6), 3);\n    assert_eq!(candidate(vec![1, -2, 3], 1), 1);\n    assert_eq!(candidate(vec![-1, -2, 3], -3), 1);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count",
    "    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count",
    "    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count",
    "    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count",
    "    let mut count = 0;\n    let mut hash = HashMap::new();\n\n    for i in 0..arr.len() {\n        let diff = sum - arr[i];\n        if hash.contains_key(&diff) {\n            count += 1;\n        }\n        hash.insert(arr[i], i);\n    }\n\n    count",
    "    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count",
    "    let mut count = 0;\n    let mut map = HashMap::new();\n    for i in 0..arr.len() {\n        if map.contains_key(&(sum - arr[i])) {\n            count += 1;\n        }\n        map.insert(arr[i], i);\n    }\n    count",
    "    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count",
    "    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count",
    "    let mut count = 0;\n    let mut map: HashMap<isize, isize> = HashMap::new();\n    for i in 0..arr.len() {\n        if map.contains_key(&(sum - arr[i])) {\n            count += map.get(&(sum - arr[i])).unwrap();\n        }\n        let mut val = 1;\n        if map.contains_key(&arr[i]) {\n            val = map.get(&arr[i]).unwrap() + 1;\n        }\n        map.insert(arr[i], val);\n    }\n    count",
    "    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count",
    "    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count",
    "    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count",
    "    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count",
    "    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count",
    "    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i+1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count",
    "    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count",
    "    let mut count = 0;\n    let mut map = HashMap::new();\n    for i in 0..arr.len() {\n        let diff = sum - arr[i];\n        if map.contains_key(&diff) {\n            count += 1;\n        }\n        map.insert(arr[i], i);\n    }\n    count",
    "    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count",
    "    let mut count = 0;\n    for i in 0..arr.len() {\n        for j in i + 1..arr.len() {\n            if arr[i] + arr[j] == sum {\n                count += 1;\n            }\n        }\n    }\n    count"
  ]
}