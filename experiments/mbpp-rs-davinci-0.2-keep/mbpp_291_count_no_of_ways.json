{
  "name": "mbpp_291_count_no_of_ways",
  "language": "rs",
  "prompt": "/// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfn count_no_of_ways(n: isize, k: isize) -> isize {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_291_count_no_of_ways.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\nfn main() {\n    let candidate = count_no_of_ways;\n    assert_eq!(candidate(2, 4), 16);\n    assert_eq!(candidate(3, 2), 6);\n    assert_eq!(candidate(4, 4), 228);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    if n == 0 {\n        return 0;\n    }\n    if n == 1 {\n        return k;\n    }\n    let mut same = k;\n    let mut diff = k * (k - 1);\n    for _ in 3..=n {\n        let temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    same + diff",
    "    if n == 0 {\n        return 0;\n    }\n    if n == 1 {\n        return k;\n    }\n    let mut same = k;\n    let mut diff = k * (k - 1);\n    for _ in 3..=n {\n        let temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    same + diff",
    "    let mut same = 0;\n    let mut diff = k;\n    let mut total = k;\n\n    for _ in 1..n {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n\n    total",
    "    let mut same = 0;\n    let mut diff = k;\n    let mut total = k;\n    for _ in 1..n {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n    total",
    "    if n == 0 {\n        return 0;\n    }\n    if n == 1 {\n        return k;\n    }\n    let mut same = k;\n    let mut diff = k * (k - 1);\n    for _ in 3..=n {\n        let temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    same + diff",
    "    let mut same = 0;\n    let mut diff = k;\n    for _ in 1..n {\n        let temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    same + diff",
    "    let mut same = k;\n    let mut diff = k * (k - 1);\n    let mut total = same + diff;\n    for _ in 3..n {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n    total",
    "    let mut same = 0;\n    let mut diff = k;\n    let mut total = k;\n    for _ in 1..n {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n    total",
    "    if n == 0 {\n        return 0;\n    }\n    if n == 1 {\n        return k;\n    }\n    let mut same = k;\n    let mut diff = k * (k - 1);\n    for _ in 3..=n {\n        let temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    same + diff",
    "    if n == 0 {\n        return 0;\n    }\n    if n == 1 {\n        return k;\n    }\n    let mut same = k;\n    let mut diff = k * (k - 1);\n    for _ in 3..=n {\n        let temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    same + diff",
    "    let mut same = 0;\n    let mut diff = k;\n    let mut total = same + diff;\n    for _ in 1..n {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n    total",
    "    if n == 0 {\n        return 0;\n    }\n    if n == 1 {\n        return k;\n    }\n    if n == 2 {\n        return k * k;\n    }\n    let mut same = k;\n    let mut diff = k * (k - 1);\n    for _ in 3..=n {\n        let temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    same + diff",
    "    let mut same = 0;\n    let mut diff = k;\n    let mut total = k;\n    for _ in 1..n {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n    total",
    "    let mut same = 0;\n    let mut diff = k;\n    let mut total = same + diff;\n    for _ in 1..n {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n    total",
    "    let mut same = 0;\n    let mut diff = k;\n    let mut total = k;\n    for _ in 1..n {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n    total",
    "    let mut same = 0;\n    let mut diff = k;\n    let mut total = k;\n    for _ in 1..n {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n    total",
    "    let mut same = k;\n    let mut diff = k * (k - 1);\n    let mut total = same + diff;\n    for _ in 3..=n {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n    total",
    "    let mut same = 0;\n    let mut diff = k;\n    let mut total = k;\n    for _ in 1..n {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n    total",
    "    if n == 0 {\n        return 0;\n    }\n    if n == 1 {\n        return k;\n    }\n    let mut same = k;\n    let mut diff = k * (k - 1);\n    for _ in 3..=n {\n        let temp = diff;\n        diff = (same + diff) * (k - 1);\n        same = temp;\n    }\n    same + diff",
    "    let mut same = 0;\n    let mut diff = k;\n    let mut total = k;\n    for _ in 2..n {\n        same = diff;\n        diff = total * (k - 1);\n        total = same + diff;\n    }\n    total"
  ]
}