{
  "name": "mbpp_447_cube_nums",
  "language": "rs",
  "prompt": "/// Write a function to find cubes of individual elements in a list.\nfn cube_nums(nums: Vec<isize>) -> Vec<isize> {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_447_cube_nums.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\nfn main() {\n    let candidate = cube_nums;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), vec![1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]);\n    assert_eq!(candidate(vec![10, 20, 30]), vec![1000, 8000, 27000]);\n    assert_eq!(candidate(vec![12, 15]), vec![1728, 3375]);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    nums.iter().map(|x| x * x * x).collect()",
    "    nums.iter().map(|x| x * x * x).collect()",
    "    nums.iter().map(|x| x * x * x).collect()",
    "    let mut result = Vec::new();\n    for num in nums {\n        result.push(num * num * num);\n    }\n    result",
    "    nums.iter().map(|x| x.pow(3)).collect()",
    "    nums.iter().map(|x| x.pow(3)).collect()",
    "    nums.iter().map(|x| x.pow(3)).collect()",
    "    let mut cubes = Vec::new();\n    for num in nums {\n        cubes.push(num * num * num);\n    }\n    cubes",
    "    nums.iter().map(|x| x * x * x).collect()",
    "    nums.iter().map(|x| x.pow(3)).collect()",
    "    nums.iter().map(|x| x.pow(3)).collect()",
    "    nums.iter().map(|x| x.pow(3)).collect()",
    "    nums.iter().map(|x| x * x * x).collect()",
    "    nums.iter().map(|x| x * x * x).collect()",
    "    nums.iter().map(|x| x.pow(3)).collect()",
    "    nums.iter().map(|x| x.pow(3)).collect()",
    "    nums.iter().map(|x| x * x * x).collect()",
    "    nums.iter().map(|x| x * x * x).collect()",
    "    nums.iter().map(|x| x.pow(3)).collect()",
    "    nums.iter().map(|x| x.pow(3)).collect()"
  ]
}