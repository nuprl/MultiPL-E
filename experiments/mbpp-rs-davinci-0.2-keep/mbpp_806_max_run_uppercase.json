{
  "name": "mbpp_806_max_run_uppercase",
  "language": "rs",
  "prompt": "/// Write a function to find maximum run of uppercase characters in the given string.\nfn max_run_uppercase(test_str: String) -> isize {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_806_max_run_uppercase.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\nfn main() {\n    let candidate = max_run_uppercase;\n    assert_eq!(candidate(String::from(\"GeMKSForGERksISBESt\")), 5);\n    assert_eq!(candidate(String::from(\"PrECIOusMOVemENTSYT\")), 6);\n    assert_eq!(candidate(String::from(\"GooGLEFluTTER\")), 4);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    let mut max_run = 0;\n    let mut curr_run = 0;\n\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            curr_run += 1;\n        } else {\n            if curr_run > max_run {\n                max_run = curr_run;\n            }\n            curr_run = 0;\n        }\n    }\n\n    if curr_run > max_run {\n        max_run = curr_run;\n    }\n\n    max_run",
    "    let mut max_run = 0;\n    let mut cur_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            cur_run += 1;\n        } else {\n            if cur_run > max_run {\n                max_run = cur_run;\n            }\n            cur_run = 0;\n        }\n    }\n    if cur_run > max_run {\n        max_run = cur_run;\n    }\n    max_run as isize",
    "    let mut max_run = 0;\n    let mut current_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            current_run += 1;\n        } else {\n            if current_run > max_run {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run;\n    }\n    max_run as isize",
    "    let mut max_run = 0;\n    let mut run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            run += 1;\n        } else {\n            if run > max_run {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    if run > max_run {\n        max_run = run;\n    }\n    max_run",
    "    let mut max_run = 0;\n    let mut current_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            current_run += 1;\n        } else {\n            if current_run > max_run {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run;\n    }\n    max_run as isize",
    "    let mut max_run = 0;\n    let mut run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            run += 1;\n            if run > max_run {\n                max_run = run;\n            }\n        } else {\n            run = 0;\n        }\n    }\n    max_run",
    "    let mut max_run = 0;\n    let mut current_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            current_run += 1;\n        } else {\n            if current_run > max_run {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run;\n    }\n    max_run as isize",
    "    let mut max_run = 0;\n    let mut cur_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            cur_run += 1;\n        } else {\n            if cur_run > max_run {\n                max_run = cur_run;\n            }\n            cur_run = 0;\n        }\n    }\n    if cur_run > max_run {\n        max_run = cur_run;\n    }\n    max_run as isize",
    "    let mut max_run = 0;\n    let mut run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            run += 1;\n        } else {\n            if run > max_run {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    if run > max_run {\n        max_run = run;\n    }\n    max_run",
    "    let mut max_run = 0;\n    let mut run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            run += 1;\n        } else {\n            if run > max_run {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    if run > max_run {\n        max_run = run;\n    }\n    max_run",
    "    let mut max_run = 0;\n    let mut cur_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            cur_run += 1;\n        } else {\n            if cur_run > max_run {\n                max_run = cur_run;\n            }\n            cur_run = 0;\n        }\n    }\n    if cur_run > max_run {\n        max_run = cur_run;\n    }\n    max_run as isize",
    "    let mut max_run = 0;\n    let mut current_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            current_run += 1;\n        } else {\n            if current_run > max_run {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run;\n    }\n    max_run as isize",
    "    let mut max_run = 0;\n    let mut current_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            current_run += 1;\n            if current_run > max_run {\n                max_run = current_run;\n            }\n        } else {\n            current_run = 0;\n        }\n    }\n    max_run",
    "    let mut max_run = 0;\n    let mut current_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            current_run += 1;\n        } else {\n            if current_run > max_run {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run;\n    }\n    max_run as isize",
    "    let mut max_run = 0;\n    let mut current_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            current_run += 1;\n        } else {\n            if current_run > max_run {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run;\n    }\n    max_run as isize",
    "    let mut max_run = 0;\n    let mut current_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            current_run += 1;\n        } else {\n            if current_run > max_run {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run;\n    }\n    max_run as isize",
    "    let mut max_run = 0;\n    let mut current_run = 0;\n\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            current_run += 1;\n        } else {\n            if current_run > max_run {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n\n    if current_run > max_run {\n        max_run = current_run;\n    }\n\n    max_run as isize",
    "    let mut max_run = 0;\n    let mut run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            run += 1;\n        } else {\n            if run > max_run {\n                max_run = run;\n            }\n            run = 0;\n        }\n    }\n    if run > max_run {\n        max_run = run;\n    }\n    max_run",
    "    let mut max_run = 0;\n    let mut current_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            current_run += 1;\n        } else {\n            if current_run > max_run {\n                max_run = current_run;\n            }\n            current_run = 0;\n        }\n    }\n    if current_run > max_run {\n        max_run = current_run;\n    }\n    max_run as isize",
    "    let mut max_run = 0;\n    let mut curr_run = 0;\n    for c in test_str.chars() {\n        if c.is_uppercase() {\n            curr_run += 1;\n        } else {\n            if curr_run > max_run {\n                max_run = curr_run;\n            }\n            curr_run = 0;\n        }\n    }\n    if curr_run > max_run {\n        max_run = curr_run;\n    }\n    max_run as isize"
  ]
}