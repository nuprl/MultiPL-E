{
  "name": "mbpp_125_find_length",
  "language": "rs",
  "prompt": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_125_find_length.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    let mut max_diff = 0;\n    let mut count_0 = 0;\n    let mut count_1 = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n        max_diff = max_diff.max(count_1 - count_0);\n    }\n    max_diff",
    "    let mut max_length = 0;\n    let mut count = 0;\n    let mut hash_map = HashMap::new();\n    hash_map.insert(0, -1);\n\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count += 1;\n        } else {\n            count -= 1;\n        }\n\n        if hash_map.contains_key(&count) {\n            max_length = max(max_length, i as isize - hash_map[&count]);\n        } else {\n            hash_map.insert(count, i as isize);\n        }\n    }\n\n    max_length",
    "    let mut max_diff = 0;\n    let mut count_0 = 0;\n    let mut count_1 = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n        let diff = (count_0 - count_1).abs();\n        if diff > max_diff {\n            max_diff = diff;\n        }\n    }\n    max_diff as isize",
    "    let mut max_diff = 0;\n    let mut diff = 0;\n    for c in string.chars() {\n        if c == '0' {\n            diff += 1;\n        } else {\n            diff -= 1;\n        }\n        if diff < 0 {\n            diff = 0;\n        }\n        if diff > max_diff {\n            max_diff = diff;\n        }\n    }\n    max_diff",
    "    let mut max_len = 0;\n    let mut count = 0;\n    let mut hash_map = HashMap::new();\n    hash_map.insert(0, -1);\n\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count += 1;\n        } else {\n            count -= 1;\n        }\n\n        if hash_map.contains_key(&count) {\n            max_len = max(max_len, i as isize - hash_map.get(&count).unwrap());\n        } else {\n            hash_map.insert(count, i as isize);\n        }\n    }\n\n    max_len",
    "    let mut max_diff = 0;\n    let mut diff = 0;\n    for c in string.chars() {\n        if c == '0' {\n            diff += 1;\n        } else {\n            diff -= 1;\n        }\n        if diff < 0 {\n            diff = 0;\n        }\n        if diff > max_diff {\n            max_diff = diff;\n        }\n    }\n    max_diff",
    "    let mut max_len: isize = 0;\n    let mut count_zero: isize = 0;\n    let mut count_one: isize = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        if count_zero == count_one {\n            max_len = std::cmp::max(max_len, count_zero + count_one);\n        }\n    }\n    count_zero = 0;\n    count_one = 0;\n    for c in string.chars().rev() {\n        if c == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        if count_zero == count_one {\n            max_len = std::cmp::max(max_len, count_zero + count_one);\n        }\n    }\n    max_len",
    "    let mut max_len = 0;\n    let mut count = 0;\n    let mut map = HashMap::new();\n    map.insert(0, -1);\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count -= 1;\n        } else {\n            count += 1;\n        }\n        if map.contains_key(&count) {\n            max_len = max(max_len, i as isize - map[&count]);\n        } else {\n            map.insert(count, i as isize);\n        }\n    }\n    max_len",
    "    let mut max_diff = 0;\n    let mut zeros = 0;\n    let mut ones = 0;\n    for c in string.chars() {\n        if c == '0' {\n            zeros += 1;\n        } else {\n            ones += 1;\n        }\n        if zeros == ones {\n            max_diff = std::cmp::max(max_diff, zeros * 2);\n        }\n    }\n    zeros = 0;\n    ones = 0;\n    for c in string.chars().rev() {\n        if c == '0' {\n            zeros += 1;\n        } else {\n            ones += 1;\n        }\n        if zeros == ones {\n            max_diff = std::cmp::max(max_diff, zeros * 2);\n        }\n    }\n    max_diff as isize",
    "    let mut max_diff = 0;\n    let mut count_0 = 0;\n    let mut count_1 = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n        max_diff = max(max_diff, count_0 - count_1);\n    }\n    max_diff as isize",
    "    let mut max_diff = 0;\n    let mut count_0 = 0;\n    let mut count_1 = 0;\n    for i in 0..string.len() {\n        if string.chars().nth(i).unwrap() == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n        if count_0 == count_1 {\n            max_diff = max(max_diff, count_0 + count_1);\n        }\n    }\n    for i in 0..string.len() {\n        if string.chars().nth(i).unwrap() == '0' {\n            count_0 -= 1;\n        } else {\n            count_1 -= 1;\n        }\n        if count_0 == count_1 {\n            max_diff = max(max_diff, count_0 + count_1);\n        }\n    }\n    max_diff as isize",
    "    let mut max_diff = 0;\n    let mut count = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count += 1;\n        } else {\n            count -= 1;\n        }\n        if count < 0 {\n            count = 0;\n        }\n        max_diff = max_diff.max(count);\n    }\n    max_diff",
    "    let mut max_len = 0;\n    let mut count = 0;\n    let mut map = std::collections::HashMap::new();\n    map.insert(0, -1);\n    for (i, c) in string.chars().enumerate() {\n        count += if c == '0' { 1 } else { -1 };\n        if let Some(j) = map.get(&count) {\n            max_len = std::cmp::max(max_len, i as isize - j);\n        } else {\n            map.insert(count, i as isize);\n        }\n    }\n    max_len",
    "    let mut max_length = 0;\n    let mut count = 0;\n    let mut map = std::collections::HashMap::new();\n    map.insert(0, -1);\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count -= 1;\n        } else {\n            count += 1;\n        }\n        if map.contains_key(&count) {\n            max_length = std::cmp::max(max_length, i as isize - map[&count]);\n        } else {\n            map.insert(count, i as isize);\n        }\n    }\n    max_length",
    "    let mut max_diff = 0;\n    let mut curr_diff = 0;\n    for c in string.chars() {\n        if c == '0' {\n            curr_diff += 1;\n        } else {\n            curr_diff -= 1;\n        }\n        if curr_diff < 0 {\n            curr_diff = 0;\n        }\n        if curr_diff > max_diff {\n            max_diff = curr_diff;\n        }\n    }\n    max_diff as isize",
    "    let mut max_diff = 0;\n    let mut zeros = 0;\n    let mut ones = 0;\n    for c in string.chars() {\n        if c == '0' {\n            zeros += 1;\n        } else {\n            ones += 1;\n        }\n        let diff = (zeros - ones).abs();\n        if diff > max_diff {\n            max_diff = diff;\n        }\n    }\n    max_diff as isize",
    "    let mut max_diff = 0;\n    let mut count = 0;\n    let mut zeros = 0;\n    let mut ones = 0;\n    for c in string.chars() {\n        if c == '0' {\n            zeros += 1;\n        } else {\n            ones += 1;\n        }\n        count += 1;\n        if zeros == ones {\n            max_diff = std::cmp::max(max_diff, count);\n        }\n    }\n    zeros = 0;\n    ones = 0;\n    count = 0;\n    for c in string.chars().rev() {\n        if c == '0' {\n            zeros += 1;\n        } else {\n            ones += 1;\n        }\n        count += 1;\n        if zeros == ones {\n            max_diff = std::cmp::max(max_diff, count);\n        }\n    }\n    max_diff as isize",
    "    let mut max_diff = 0;\n    let mut count_0 = 0;\n    let mut count_1 = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n        max_diff = max_diff.max(count_0 - count_1);\n    }\n    max_diff as isize",
    "    let mut max_len = 0;\n    let mut count = 0;\n    let mut map = HashMap::new();\n    map.insert(0, -1);\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count -= 1;\n        } else {\n            count += 1;\n        }\n        if map.contains_key(&count) {\n            max_len = max(max_len, i as isize - map[&count]);\n        } else {\n            map.insert(count, i as isize);\n        }\n    }\n    max_len",
    "    let mut max_diff = 0;\n    let mut count_of_0 = 0;\n    let mut count_of_1 = 0;\n    for i in 0..string.len() {\n        if string.chars().nth(i).unwrap() == '0' {\n            count_of_0 += 1;\n        } else {\n            count_of_1 += 1;\n        }\n        if count_of_0 == count_of_1 {\n            max_diff = std::cmp::max(max_diff, count_of_0);\n        }\n    }\n    max_diff as isize",
    "    let mut max_diff = 0;\n    let mut count_of_1 = 0;\n    let mut count_of_0 = 0;\n    for i in 0..string.len() {\n        if string.chars().nth(i).unwrap() == '1' {\n            count_of_1 += 1;\n        } else {\n            count_of_0 += 1;\n        }\n        if count_of_1 == count_of_0 {\n            max_diff = std::cmp::max(max_diff, count_of_1 + count_of_0);\n        }\n    }\n    count_of_1 = 0;\n    count_of_0 = 0;\n    for i in (0..string.len()).rev() {\n        if string.chars().nth(i).unwrap() == '1' {\n            count_of_1 += 1;\n        } else {\n            count_of_0 += 1;\n        }\n        if count_of_1 == count_of_0 {\n            max_diff = std::cmp::max(max_diff, count_of_1 + count_of_0);\n        }\n    }\n    max_diff as isize",
    "    let mut max_diff = 0;\n    let mut count_zero = 0;\n    let mut count_one = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        if count_zero == count_one {\n            max_diff = std::cmp::max(max_diff, count_zero + count_one);\n        }\n    }\n    count_zero = 0;\n    count_one = 0;\n    for c in string.chars().rev() {\n        if c == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        if count_zero == count_one {\n            max_diff = std::cmp::max(max_diff, count_zero + count_one);\n        }\n    }\n    max_diff as isize",
    "    let mut max_length = 0;\n    let mut count = 0;\n    let mut hash = HashMap::new();\n    hash.insert(0, -1);\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count += 1;\n        } else {\n            count -= 1;\n        }\n        if hash.contains_key(&count) {\n            max_length = max(max_length, i as isize - hash.get(&count).unwrap());\n        } else {\n            hash.insert(count, i as isize);\n        }\n    }\n    max_length",
    "    let mut zeros = 0;\n    let mut ones = 0;\n    let mut max_diff = 0;\n    let mut diff = 0;\n    for c in string.chars() {\n        if c == '0' {\n            zeros += 1;\n        } else {\n            ones += 1;\n        }\n        diff = zeros - ones;\n        if diff < 0 {\n            diff = -diff;\n        }\n        if diff > max_diff {\n            max_diff = diff;\n        }\n    }\n    max_diff as isize",
    "    let mut max_diff = 0;\n    let mut count_0 = 0;\n    let mut count_1 = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n        let diff = (count_0 - count_1).abs();\n        if diff > max_diff {\n            max_diff = diff;\n        }\n    }\n    max_diff as isize",
    "    let mut max_len = 0;\n    let mut count = 0;\n    let mut hash_map = HashMap::new();\n    hash_map.insert(0, -1);\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count -= 1;\n        } else {\n            count += 1;\n        }\n        if hash_map.contains_key(&count) {\n            max_len = max(max_len, i as isize - hash_map[&count]);\n        } else {\n            hash_map.insert(count, i as isize);\n        }\n    }\n    max_len",
    "    let mut max_len = 0;\n    let mut count = 0;\n    let mut map = HashMap::new();\n    map.insert(0, -1);\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count += 1;\n        } else {\n            count -= 1;\n        }\n        if map.contains_key(&count) {\n            max_len = max(max_len, i as isize - map[&count]);\n        } else {\n            map.insert(count, i as isize);\n        }\n    }\n    max_len",
    "    let mut max_diff = 0;\n    let mut zero_count = 0;\n    let mut one_count = 0;\n\n    for c in string.chars() {\n        if c == '0' {\n            zero_count += 1;\n        } else {\n            one_count += 1;\n        }\n\n        max_diff = max(max_diff, zero_count - one_count);\n        if max_diff < 0 {\n            max_diff = 0;\n            zero_count = 0;\n            one_count = 0;\n        }\n    }\n\n    max_diff",
    "    let mut max_diff = 0;\n    let mut count_zero = 0;\n    let mut count_one = 0;\n\n    for c in string.chars() {\n        if c == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n\n        if count_zero == count_one {\n            max_diff = std::cmp::max(max_diff, count_zero + count_one);\n        }\n    }\n\n    count_zero = 0;\n    count_one = 0;\n\n    for c in string.chars().rev() {\n        if c == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n\n        if count_zero == count_one {\n            max_diff = std::cmp::max(max_diff, count_zero + count_one);\n        }\n    }\n\n    max_diff as isize",
    "    let mut max_diff = 0;\n    let mut count_zero = 0;\n    let mut count_one = 0;\n    for ch in string.chars() {\n        if ch == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        if count_zero == count_one {\n            max_diff = std::cmp::max(max_diff, count_zero + count_one);\n        }\n    }\n    count_zero = 0;\n    count_one = 0;\n    for ch in string.chars().rev() {\n        if ch == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        if count_zero == count_one {\n            max_diff = std::cmp::max(max_diff, count_zero + count_one);\n        }\n    }\n    max_diff as isize",
    "    let mut max_diff = 0;\n    let mut count_0 = 0;\n    let mut count_1 = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n        max_diff = max_diff.max(count_0 - count_1);\n    }\n    max_diff as isize",
    "    let mut max_diff = 0;\n    let mut count_zero = 0;\n    let mut count_one = 0;\n    for ch in string.chars() {\n        if ch == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        let diff = (count_zero - count_one).abs();\n        if diff > max_diff {\n            max_diff = diff;\n        }\n    }\n    max_diff as isize",
    "    let mut max_diff = 0;\n    let mut count = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count -= 1;\n        } else {\n            count += 1;\n        }\n        if count < 0 {\n            count = 0;\n        }\n        if count > max_diff {\n            max_diff = count;\n        }\n    }\n    max_diff",
    "    let mut max_diff = 0;\n    let mut count_zero = 0;\n    let mut count_one = 0;\n    for i in 0..string.len() {\n        if string.chars().nth(i).unwrap() == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        if count_zero == count_one {\n            max_diff = std::cmp::max(max_diff, count_zero + count_one);\n        }\n    }\n    count_zero = 0;\n    count_one = 0;\n    for i in (0..string.len()).rev() {\n        if string.chars().nth(i).unwrap() == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        if count_zero == count_one {\n            max_diff = std::cmp::max(max_diff, count_zero + count_one);\n        }\n    }\n    max_diff as isize",
    "    let mut max_diff = 0;\n    let mut zeros = 0;\n    let mut ones = 0;\n\n    for c in string.chars() {\n        if c == '0' {\n            zeros += 1;\n        } else {\n            ones += 1;\n        }\n\n        let diff = zeros - ones;\n        if diff < 0 {\n            zeros = 0;\n            ones = 0;\n        } else {\n            max_diff = std::cmp::max(max_diff, diff);\n        }\n    }\n\n    max_diff as isize",
    "    let mut max_len = 0;\n    let mut count = 0;\n    let mut hash = HashMap::new();\n    hash.insert(0, -1);\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count += 1;\n        } else {\n            count -= 1;\n        }\n        if hash.contains_key(&count) {\n            max_len = max_len.max(i as isize - hash.get(&count).unwrap());\n        } else {\n            hash.insert(count, i as isize);\n        }\n    }\n    max_len",
    "    let mut max_diff = 0;\n    let mut count_0 = 0;\n    let mut count_1 = 0;\n    for ch in string.chars() {\n        if ch == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n        max_diff = max_diff.max(count_1 - count_0);\n    }\n    max_diff",
    "    let mut max_diff = 0;\n    let mut count_zero = 0;\n    let mut count_one = 0;\n    for i in 0..string.len() {\n        if string.chars().nth(i).unwrap() == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        if count_zero == count_one {\n            max_diff = std::cmp::max(max_diff, count_zero + count_one);\n        }\n    }\n    count_zero = 0;\n    count_one = 0;\n    for i in (0..string.len()).rev() {\n        if string.chars().nth(i).unwrap() == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        if count_zero == count_one {\n            max_diff = std::cmp::max(max_diff, count_zero + count_one);\n        }\n    }\n    max_diff as isize",
    "    let mut max_diff = 0;\n    let mut count_one = 0;\n    let mut count_zero = 0;\n\n    for c in string.chars() {\n        if c == '1' {\n            count_one += 1;\n        } else {\n            count_zero += 1;\n        }\n\n        if count_one == count_zero {\n            max_diff = std::cmp::max(max_diff, count_one + count_zero);\n        }\n    }\n\n    count_one = 0;\n    count_zero = 0;\n\n    for c in string.chars().rev() {\n        if c == '1' {\n            count_one += 1;\n        } else {\n            count_zero += 1;\n        }\n\n        if count_one == count_zero {\n            max_diff = std::cmp::max(max_diff, count_one + count_zero);\n        }\n    }\n\n    max_diff as isize",
    "    let mut max_diff = 0;\n    let mut count_zero = 0;\n    let mut count_one = 0;\n    for ch in string.chars() {\n        if ch == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        max_diff = max_diff.max(count_one - count_zero);\n    }\n    max_diff",
    "    let mut max_length = 0;\n    let mut count = 0;\n    let mut map = HashMap::new();\n    map.insert(0, -1);\n\n    for (i, ch) in string.chars().enumerate() {\n        if ch == '0' {\n            count -= 1;\n        } else {\n            count += 1;\n        }\n\n        if map.contains_key(&count) {\n            max_length = max(max_length, i as isize - map.get(&count).unwrap());\n        } else {\n            map.insert(count, i as isize);\n        }\n    }\n\n    max_length",
    "    let mut max_len = 0;\n    let mut count = 0;\n    let mut hash_map = HashMap::new();\n    hash_map.insert(0, -1);\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count -= 1;\n        } else {\n            count += 1;\n        }\n        if hash_map.contains_key(&count) {\n            max_len = max(max_len, i as isize - hash_map[&count]);\n        } else {\n            hash_map.insert(count, i as isize);\n        }\n    }\n    max_len",
    "    let mut max_diff = 0;\n    let mut count_0 = 0;\n    let mut count_1 = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n        if count_0 == count_1 {\n            max_diff = std::cmp::max(max_diff, count_0 * 2);\n        }\n    }\n    count_0 = 0;\n    count_1 = 0;\n    for c in string.chars().rev() {\n        if c == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n        if count_0 == count_1 {\n            max_diff = std::cmp::max(max_diff, count_0 * 2);\n        }\n    }\n    max_diff as isize",
    "    let mut max_len = 0;\n    let mut count = 0;\n    let mut hash = HashMap::new();\n    hash.insert(0, -1);\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count += 1;\n        } else {\n            count -= 1;\n        }\n        if hash.contains_key(&count) {\n            max_len = max(max_len, i as isize - hash[&count]);\n        } else {\n            hash.insert(count, i as isize);\n        }\n    }\n    max_len",
    "    let mut max_diff = 0;\n    let mut diff = 0;\n    let mut zeros = 0;\n    let mut ones = 0;\n\n    for c in string.chars() {\n        if c == '0' {\n            zeros += 1;\n        } else {\n            ones += 1;\n        }\n        diff = zeros - ones;\n        if diff < 0 {\n            diff = -diff;\n        }\n        if diff > max_diff {\n            max_diff = diff;\n        }\n    }\n\n    max_diff as isize",
    "    let mut max_len = 0;\n    let mut count = 0;\n    let mut map = HashMap::new();\n    map.insert(0, -1);\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count -= 1;\n        } else {\n            count += 1;\n        }\n        if map.contains_key(&count) {\n            max_len = max(max_len, i as isize - map[&count]);\n        } else {\n            map.insert(count, i as isize);\n        }\n    }\n    max_len",
    "    let mut max_diff = 0;\n    let mut count_zeros = 0;\n    let mut count_ones = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_zeros += 1;\n        } else {\n            count_ones += 1;\n        }\n        max_diff = max_diff.max(count_ones - count_zeros);\n        if count_zeros > count_ones {\n            count_zeros = 0;\n            count_ones = 0;\n        }\n    }\n    max_diff as isize",
    "    let mut max_diff = 0;\n    let mut count_zero = 0;\n    let mut count_one = 0;\n    for i in 0..string.len() {\n        if string.chars().nth(i).unwrap() == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        if count_zero == count_one {\n            max_diff = std::cmp::max(max_diff, count_zero + count_one);\n        }\n    }\n    count_zero = 0;\n    count_one = 0;\n    for i in (0..string.len()).rev() {\n        if string.chars().nth(i).unwrap() == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        if count_zero == count_one {\n            max_diff = std::cmp::max(max_diff, count_zero + count_one);\n        }\n    }\n    max_diff as isize",
    "    let mut max_len = 0;\n    let mut count_zero = 0;\n    let mut count_one = 0;\n\n    for i in 0..string.len() {\n        let c = string.chars().nth(i).unwrap();\n        if c == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n\n        if count_zero == count_one {\n            max_len = std::cmp::max(max_len, count_zero + count_one);\n        }\n    }\n\n    max_len as isize",
    "    let mut max_length = 0;\n    let mut count = 0;\n    let mut hash_map = HashMap::new();\n    hash_map.insert(0, -1);\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count += 1;\n        } else {\n            count -= 1;\n        }\n\n        if hash_map.contains_key(&count) {\n            max_length = max(max_length, i as isize - hash_map[&count]);\n        } else {\n            hash_map.insert(count, i as isize);\n        }\n    }\n\n    max_length",
    "    let mut max_len = 0;\n    let mut count = 0;\n    let mut map = HashMap::new();\n    map.insert(0, -1);\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count -= 1;\n        } else {\n            count += 1;\n        }\n        if map.contains_key(&count) {\n            max_len = max_len.max(i as isize - *map.get(&count).unwrap());\n        } else {\n            map.insert(count, i as isize);\n        }\n    }\n    max_len",
    "    let mut max_len = 0;\n    let mut count = 0;\n    let mut hash = HashMap::new();\n    hash.insert(0, -1);\n\n    for (i, c) in string.chars().enumerate() {\n        count += if c == '0' { -1 } else { 1 };\n\n        if hash.contains_key(&count) {\n            max_len = max_len.max(i as isize - hash[&count]);\n        } else {\n            hash.insert(count, i as isize);\n        }\n    }\n\n    max_len",
    "    let mut max_diff = 0;\n    let mut count_zero = 0;\n    let mut count_one = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        max_diff = max_diff.max(count_zero - count_one);\n    }\n    max_diff as isize",
    "    let mut max_length = 0;\n    let mut count = 0;\n    let mut hash_map = HashMap::new();\n    hash_map.insert(0, -1);\n\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count += 1;\n        } else {\n            count -= 1;\n        }\n\n        if hash_map.contains_key(&count) {\n            max_length = max(max_length, i as isize - hash_map[&count]);\n        } else {\n            hash_map.insert(count, i as isize);\n        }\n    }\n\n    max_length",
    "    let mut max_diff = 0;\n    let mut zeros = 0;\n    let mut ones = 0;\n    for c in string.chars() {\n        if c == '0' {\n            zeros += 1;\n        } else {\n            ones += 1;\n        }\n        max_diff = max_diff.max(zeros - ones);\n    }\n    max_diff",
    "    let mut max_len = 0;\n    let mut count = 0;\n    let mut map: HashMap<isize, isize> = HashMap::new();\n    map.insert(0, -1);\n\n    for (i, c) in string.chars().enumerate() {\n        count += if c == '0' { 1 } else { -1 };\n        if map.contains_key(&count) {\n            max_len = max(max_len, i as isize - map.get(&count).unwrap());\n        } else {\n            map.insert(count, i as isize);\n        }\n    }\n    max_len",
    "    let mut max_diff = 0;\n    let mut count_zero = 0;\n    let mut count_one = 0;\n\n    for c in string.chars() {\n        if c == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n\n        if count_zero == count_one {\n            max_diff = std::cmp::max(max_diff, count_zero + count_one);\n        }\n    }\n\n    count_zero = 0;\n    count_one = 0;\n\n    for c in string.chars().rev() {\n        if c == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n\n        if count_zero == count_one {\n            max_diff = std::cmp::max(max_diff, count_zero + count_one);\n        }\n    }\n\n    max_diff as isize",
    "    let mut max_diff = 0;\n    let mut cur_diff = 0;\n\n    for c in string.chars() {\n        if c == '0' {\n            cur_diff += 1;\n        } else {\n            cur_diff -= 1;\n        }\n\n        if cur_diff < 0 {\n            cur_diff = 0;\n        }\n\n        if cur_diff > max_diff {\n            max_diff = cur_diff;\n        }\n    }\n\n    max_diff as isize",
    "    let mut max_len = 0;\n    let mut count = 0;\n    let mut hash = HashMap::new();\n    hash.insert(0, -1);\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count += 1;\n        } else {\n            count -= 1;\n        }\n        if hash.contains_key(&count) {\n            max_len = max(max_len, i as isize - hash.get(&count).unwrap());\n        } else {\n            hash.insert(count, i as isize);\n        }\n    }\n    max_len",
    "    let mut max_diff = 0;\n    let mut count_zero = 0;\n    let mut count_one = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        max_diff = max_diff.max(count_zero - count_one);\n    }\n    max_diff as isize",
    "    let mut max_diff = 0;\n    let mut count_0 = 0;\n    let mut count_1 = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n        max_diff = max_diff.max(count_1 - count_0);\n    }\n    max_diff",
    "    let mut max_len = 0;\n    let mut count = 0;\n    let mut hash = HashMap::new();\n    hash.insert(0, -1);\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count -= 1;\n        } else {\n            count += 1;\n        }\n        if hash.contains_key(&count) {\n            max_len = max(max_len, i as isize - hash[&count]);\n        } else {\n            hash.insert(count, i as isize);\n        }\n    }\n    max_len",
    "    let mut max_len = 0;\n    let mut count = 0;\n    let mut map = HashMap::new();\n    map.insert(0, -1);\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count += 1;\n        } else {\n            count -= 1;\n        }\n        if map.contains_key(&count) {\n            max_len = max(max_len, i as isize - map[&count]);\n        } else {\n            map.insert(count, i as isize);\n        }\n    }\n    max_len",
    "    let mut max_diff = 0;\n    let mut count_zero = 0;\n    let mut count_one = 0;\n    let mut diff = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        diff = count_zero - count_one;\n        if diff < 0 {\n            diff = -diff;\n        }\n        if diff > max_diff {\n            max_diff = diff;\n        }\n    }\n    max_diff as isize",
    "    let mut max_len = 0;\n    let mut count_zero = 0;\n    let mut count_one = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        if count_zero == count_one {\n            max_len = std::cmp::max(max_len, count_zero + count_one);\n        }\n    }\n    count_zero = 0;\n    count_one = 0;\n    for c in string.chars().rev() {\n        if c == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        if count_zero == count_one {\n            max_len = std::cmp::max(max_len, count_zero + count_one);\n        }\n    }\n    max_len as isize",
    "    let mut max_length = 0;\n    let mut count = 0;\n    let mut hash_map: HashMap<isize, isize> = HashMap::new();\n    hash_map.insert(0, -1);\n\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count += 1;\n        } else {\n            count -= 1;\n        }\n\n        if hash_map.contains_key(&count) {\n            max_length = max(max_length, i as isize - hash_map[&count]);\n        } else {\n            hash_map.insert(count, i as isize);\n        }\n    }\n\n    max_length",
    "    let mut max_length = 0;\n    let mut count = 0;\n    let mut hash_map: HashMap<isize, isize> = HashMap::new();\n    hash_map.insert(0, -1);\n\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count += 1;\n        } else {\n            count -= 1;\n        }\n\n        if hash_map.contains_key(&count) {\n            max_length = max(max_length, i as isize - hash_map.get(&count).unwrap());\n        } else {\n            hash_map.insert(count, i as isize);\n        }\n    }\n\n    max_length",
    "    let mut max_len = 0;\n    let mut count = 0;\n    let mut map = std::collections::HashMap::new();\n    map.insert(0, -1);\n\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count -= 1;\n        } else {\n            count += 1;\n        }\n\n        if map.contains_key(&count) {\n            max_len = std::cmp::max(max_len, i as isize - map.get(&count).unwrap());\n        } else {\n            map.insert(count, i as isize);\n        }\n    }\n\n    max_len",
    "    let mut max_len = 0;\n    let mut count = 0;\n    let mut map = HashMap::new();\n    map.insert(0, -1);\n\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count += 1;\n        } else {\n            count -= 1;\n        }\n\n        if map.contains_key(&count) {\n            max_len = max(max_len, i as isize - map[&count]);\n        } else {\n            map.insert(count, i as isize);\n        }\n    }\n\n    max_len",
    "    let mut max_diff = 0;\n    let mut count_0 = 0;\n    let mut count_1 = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n        max_diff = std::cmp::max(max_diff, count_0 - count_1);\n    }\n    max_diff as isize",
    "    let mut max_length = 0;\n    let mut count = 0;\n    let mut hash_map: HashMap<isize, isize> = HashMap::new();\n    hash_map.insert(0, -1);\n\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count -= 1;\n        } else {\n            count += 1;\n        }\n\n        if let Some(j) = hash_map.get(&count) {\n            max_length = std::cmp::max(max_length, i as isize - j);\n        } else {\n            hash_map.insert(count, i as isize);\n        }\n    }\n\n    max_length",
    "    let mut max_diff = 0;\n    let mut count_zero = 0;\n    let mut count_one = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        let diff = (count_zero - count_one).abs();\n        if diff > max_diff {\n            max_diff = diff;\n        }\n    }\n    max_diff as isize",
    "    let mut max_len = 0;\n    let mut count = 0;\n    let mut map = HashMap::new();\n    map.insert(0, -1);\n\n    for (i, ch) in string.chars().enumerate() {\n        if ch == '0' {\n            count -= 1;\n        } else {\n            count += 1;\n        }\n\n        if map.contains_key(&count) {\n            max_len = max(max_len, i as isize - map[&count]);\n        } else {\n            map.insert(count, i as isize);\n        }\n    }\n\n    max_len",
    "    let mut max_diff = 0;\n    let mut count_zero = 0;\n    let mut count_one = 0;\n\n    for c in string.chars() {\n        if c == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n\n        if count_zero == count_one {\n            max_diff = std::cmp::max(max_diff, count_zero + count_one);\n        }\n    }\n\n    count_zero = 0;\n    count_one = 0;\n\n    for c in string.chars().rev() {\n        if c == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n\n        if count_zero == count_one {\n            max_diff = std::cmp::max(max_diff, count_zero + count_one);\n        }\n    }\n\n    max_diff as isize",
    "    let mut max_diff = 0;\n    let mut zeros = 0;\n    let mut ones = 0;\n    for c in string.chars() {\n        if c == '0' {\n            zeros += 1;\n        } else {\n            ones += 1;\n        }\n        max_diff = max_diff.max(zeros - ones);\n    }\n    max_diff",
    "    let mut max_diff = 0;\n    let mut count_zero = 0;\n    let mut count_one = 0;\n    for i in 0..string.len() {\n        if string.chars().nth(i).unwrap() == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        if count_zero == count_one {\n            max_diff = std::cmp::max(max_diff, count_zero);\n        }\n    }\n    max_diff as isize",
    "    let mut max_len = 0;\n    let mut count = 0;\n    let mut map: HashMap<isize, isize> = HashMap::new();\n    map.insert(0, -1);\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count += 1;\n        } else {\n            count -= 1;\n        }\n        if map.contains_key(&count) {\n            max_len = max(max_len, i as isize - map.get(&count).unwrap());\n        } else {\n            map.insert(count, i as isize);\n        }\n    }\n    max_len",
    "    let mut max_len = 0;\n    let mut count = 0;\n    let mut hash_map = HashMap::new();\n    hash_map.insert(0, -1);\n\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count += 1;\n        } else {\n            count -= 1;\n        }\n\n        if hash_map.contains_key(&count) {\n            max_len = max(max_len, i as isize - hash_map[&count]);\n        } else {\n            hash_map.insert(count, i as isize);\n        }\n    }\n\n    max_len",
    "    let mut max_diff = 0;\n    let mut count_0 = 0;\n    let mut count_1 = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n        if count_0 == count_1 {\n            max_diff = std::cmp::max(max_diff, count_0 + count_1);\n        }\n    }\n    count_0 = 0;\n    count_1 = 0;\n    for c in string.chars().rev() {\n        if c == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n        if count_0 == count_1 {\n            max_diff = std::cmp::max(max_diff, count_0 + count_1);\n        }\n    }\n    max_diff as isize",
    "    let mut max_len = 0;\n    let mut count = 0;\n    let mut map = HashMap::new();\n    map.insert(0, -1);\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count += 1;\n        } else {\n            count -= 1;\n        }\n        if map.contains_key(&count) {\n            max_len = max(max_len, i as isize - map[&count]);\n        } else {\n            map.insert(count, i as isize);\n        }\n    }\n    max_len",
    "    let mut max_len = 0;\n    let mut count = 0;\n    let mut map = HashMap::new();\n    map.insert(0, -1);\n\n    for (i, c) in string.chars().enumerate() {\n        count += if c == '0' { 1 } else { -1 };\n        if map.contains_key(&count) {\n            max_len = std::cmp::max(max_len, i as isize - map.get(&count).unwrap());\n        } else {\n            map.insert(count, i as isize);\n        }\n    }\n\n    max_len",
    "    let mut max_length = 0;\n    let mut count = 0;\n    let mut hash_map = HashMap::new();\n    hash_map.insert(0, -1);\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count -= 1;\n        } else {\n            count += 1;\n        }\n        if hash_map.contains_key(&count) {\n            max_length = max(max_length, i as isize - hash_map[&count]);\n        } else {\n            hash_map.insert(count, i as isize);\n        }\n    }\n    max_length",
    "    let mut max_diff = 0;\n    let mut curr_diff = 0;\n    for c in string.chars() {\n        if c == '0' {\n            curr_diff += 1;\n        } else {\n            curr_diff -= 1;\n        }\n        if curr_diff < 0 {\n            curr_diff = 0;\n        }\n        max_diff = max(max_diff, curr_diff);\n    }\n    max_diff",
    "    let mut max_length = 0;\n    let mut count = 0;\n    let mut hash_map: HashMap<isize, isize> = HashMap::new();\n    hash_map.insert(0, -1);\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count += 1;\n        } else {\n            count -= 1;\n        }\n        if hash_map.contains_key(&count) {\n            max_length = max(max_length, i as isize - hash_map.get(&count).unwrap());\n        } else {\n            hash_map.insert(count, i as isize);\n        }\n    }\n    max_length",
    "    let mut max_diff = 0;\n    let mut count_zero = 0;\n    let mut count_one = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        if count_zero == count_one {\n            max_diff = std::cmp::max(max_diff, count_zero + count_one);\n        }\n    }\n    count_zero = 0;\n    count_one = 0;\n    for c in string.chars().rev() {\n        if c == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        if count_zero == count_one {\n            max_diff = std::cmp::max(max_diff, count_zero + count_one);\n        }\n    }\n    max_diff as isize",
    "    let mut max_length = 0;\n    let mut count = 0;\n    let mut hash_map = HashMap::new();\n    hash_map.insert(0, -1);\n\n    for (i, ch) in string.chars().enumerate() {\n        if ch == '1' {\n            count += 1;\n        } else {\n            count -= 1;\n        }\n\n        if hash_map.contains_key(&count) {\n            max_length = max(max_length, i as isize - hash_map[&count]);\n        } else {\n            hash_map.insert(count, i as isize);\n        }\n    }\n\n    max_length",
    "    let mut max_length: isize = 0;\n    let mut count: isize = 0;\n    let mut hash_map: HashMap<isize, isize> = HashMap::new();\n    hash_map.insert(0, -1);\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count += 1;\n        } else {\n            count -= 1;\n        }\n        if hash_map.contains_key(&count) {\n            max_length = max_length.max(i as isize - hash_map.get(&count).unwrap());\n        } else {\n            hash_map.insert(count, i as isize);\n        }\n    }\n    max_length",
    "    let mut max_len = 0;\n    let mut count = 0;\n    let mut hash = HashMap::new();\n    hash.insert(0, -1);\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count += 1;\n        } else {\n            count -= 1;\n        }\n        if hash.contains_key(&count) {\n            max_len = max(max_len, i as isize - hash[&count]);\n        } else {\n            hash.insert(count, i as isize);\n        }\n    }\n    max_len",
    "    let mut max_diff = 0;\n    let mut diff = 0;\n    for c in string.chars() {\n        if c == '1' {\n            diff += 1;\n        } else {\n            diff -= 1;\n        }\n        if diff < 0 {\n            diff = 0;\n        }\n        if diff > max_diff {\n            max_diff = diff;\n        }\n    }\n    max_diff",
    "    let mut max_len = 0;\n    let mut count = 0;\n    let mut hash = HashMap::new();\n    hash.insert(0, -1);\n\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count += 1;\n        } else {\n            count -= 1;\n        }\n\n        if hash.contains_key(&count) {\n            max_len = max(max_len, i as isize - hash[&count]);\n        } else {\n            hash.insert(count, i as isize);\n        }\n    }\n\n    max_len",
    "    let mut max_diff = 0;\n    let mut count_zero = 0;\n    let mut count_one = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        let diff = (count_zero - count_one).abs();\n        if diff > max_diff {\n            max_diff = diff;\n        }\n    }\n    max_diff as isize",
    "    let mut max_len = 0;\n    let mut count = 0;\n    let mut map: HashMap<isize, isize> = HashMap::new();\n\n    map.insert(0, -1);\n\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count += 1;\n        } else {\n            count -= 1;\n        }\n\n        if map.contains_key(&count) {\n            max_len = max(max_len, i as isize - map.get(&count).unwrap());\n        } else {\n            map.insert(count, i as isize);\n        }\n    }\n\n    max_len",
    "    let mut max_diff = 0;\n    let mut count_zero = 0;\n    let mut count_one = 0;\n\n    for c in string.chars() {\n        if c == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n\n        let diff = (count_zero - count_one).abs();\n        if diff > max_diff {\n            max_diff = diff;\n        }\n    }\n\n    max_diff as isize",
    "    let mut max_diff = 0;\n    let mut count_zero = 0;\n    let mut count_one = 0;\n    for i in 0..string.len() {\n        if string.chars().nth(i).unwrap() == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        if count_zero == count_one {\n            max_diff = std::cmp::max(max_diff, count_zero * 2);\n        }\n    }\n    count_zero = 0;\n    count_one = 0;\n    for i in (0..string.len()).rev() {\n        if string.chars().nth(i).unwrap() == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        if count_zero == count_one {\n            max_diff = std::cmp::max(max_diff, count_zero * 2);\n        }\n    }\n    max_diff as isize",
    "    let mut max_diff = 0;\n    let mut count_0 = 0;\n    let mut count_1 = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n        max_diff = max_diff.max(count_1 - count_0);\n        if count_0 == count_1 {\n            count_0 = 0;\n            count_1 = 0;\n        }\n    }\n    max_diff as isize",
    "    let mut max_length = 0;\n    let mut count = 0;\n    let mut hash = HashMap::new();\n    hash.insert(0, -1);\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count -= 1;\n        } else {\n            count += 1;\n        }\n        if hash.contains_key(&count) {\n            max_length = max(max_length, i as isize - hash[&count]);\n        } else {\n            hash.insert(count, i as isize);\n        }\n    }\n    max_length",
    "    let mut max_diff = 0;\n    let mut count_0 = 0;\n    let mut count_1 = 0;\n    for i in 0..string.len() {\n        if string.chars().nth(i).unwrap() == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n        if count_0 == count_1 {\n            max_diff = std::cmp::max(max_diff, count_0 + count_1);\n        }\n    }\n    count_0 = 0;\n    count_1 = 0;\n    for i in (0..string.len()).rev() {\n        if string.chars().nth(i).unwrap() == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n        if count_0 == count_1 {\n            max_diff = std::cmp::max(max_diff, count_0 + count_1);\n        }\n    }\n    max_diff as isize",
    "    let mut max_diff = 0;\n    let mut count_zero = 0;\n    let mut count_one = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        let diff = (count_zero - count_one).abs();\n        if diff > max_diff {\n            max_diff = diff;\n        }\n    }\n    max_diff as isize",
    "    let mut max_diff = 0;\n    let mut count_0 = 0;\n    let mut count_1 = 0;\n\n    for c in string.chars() {\n        if c == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n\n        let diff = (count_0 - count_1).abs();\n        if diff > max_diff {\n            max_diff = diff;\n        }\n    }\n\n    max_diff as isize",
    "    let mut max_diff = 0;\n    let mut diff = 0;\n    for c in string.chars() {\n        if c == '0' {\n            diff -= 1;\n        } else {\n            diff += 1;\n        }\n        if diff < 0 {\n            diff = 0;\n        }\n        max_diff = max_diff.max(diff);\n    }\n    max_diff",
    "    let mut max_len = 0;\n    let mut count = 0;\n    let mut hash = HashMap::new();\n    hash.insert(0, -1);\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count -= 1;\n        } else {\n            count += 1;\n        }\n\n        if hash.contains_key(&count) {\n            max_len = max(max_len, i as isize - hash[&count]);\n        } else {\n            hash.insert(count, i as isize);\n        }\n    }\n    max_len",
    "    let mut max_diff = 0;\n    let mut count_0 = 0;\n    let mut count_1 = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n        max_diff = std::cmp::max(max_diff, count_0 - count_1);\n    }\n    max_diff as isize",
    "    let mut max_diff = 0;\n    let mut count_0 = 0;\n    let mut count_1 = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n        max_diff = max_diff.max(count_0 - count_1);\n    }\n    max_diff",
    "    let mut max_len = 0;\n    let mut count = 0;\n    let mut hash = HashMap::new();\n    hash.insert(0, -1);\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count += 1;\n        } else {\n            count -= 1;\n        }\n        if hash.contains_key(&count) {\n            max_len = max(max_len, i as isize - hash.get(&count).unwrap());\n        } else {\n            hash.insert(count, i as isize);\n        }\n    }\n    max_len",
    "    let mut zeros = 0;\n    let mut ones = 0;\n    let mut max_diff = 0;\n    for c in string.chars() {\n        if c == '0' {\n            zeros += 1;\n        } else {\n            ones += 1;\n        }\n        if zeros == ones {\n            max_diff = std::cmp::max(max_diff, zeros * 2);\n        }\n    }\n    zeros = 0;\n    ones = 0;\n    for c in string.chars().rev() {\n        if c == '0' {\n            zeros += 1;\n        } else {\n            ones += 1;\n        }\n        if zeros == ones {\n            max_diff = std::cmp::max(max_diff, zeros * 2);\n        }\n    }\n    max_diff as isize",
    "    let mut max_diff = 0;\n    let mut count_of_0 = 0;\n    let mut count_of_1 = 0;\n\n    for c in string.chars() {\n        if c == '0' {\n            count_of_0 += 1;\n        } else {\n            count_of_1 += 1;\n        }\n\n        if count_of_0 == count_of_1 {\n            max_diff = std::cmp::max(max_diff, count_of_0 + count_of_1);\n        }\n    }\n\n    count_of_0 = 0;\n    count_of_1 = 0;\n\n    for c in string.chars().rev() {\n        if c == '0' {\n            count_of_0 += 1;\n        } else {\n            count_of_1 += 1;\n        }\n\n        if count_of_0 == count_of_1 {\n            max_diff = std::cmp::max(max_diff, count_of_0 + count_of_1);\n        }\n    }\n\n    max_diff as isize",
    "    let mut max_length = 0;\n    let mut count = 0;\n    let mut map: HashMap<isize, isize> = HashMap::new();\n    map.insert(0, -1);\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count -= 1;\n        } else {\n            count += 1;\n        }\n        if map.contains_key(&count) {\n            max_length = max(max_length, i as isize - map.get(&count).unwrap());\n        } else {\n            map.insert(count, i as isize);\n        }\n    }\n    max_length",
    "    let mut max_diff = 0;\n    let mut count = 0;\n    for ch in string.chars() {\n        if ch == '0' {\n            count += 1;\n        } else {\n            count -= 1;\n        }\n        if count < 0 {\n            count = 0;\n        }\n        max_diff = std::cmp::max(max_diff, count);\n    }\n    max_diff as isize",
    "    let mut max_len = 0;\n    let mut count = 0;\n    let mut map = HashMap::new();\n    map.insert(0, -1);\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count += 1;\n        } else {\n            count -= 1;\n        }\n        if map.contains_key(&count) {\n            max_len = max(max_len, i as isize - map[&count]);\n        } else {\n            map.insert(count, i as isize);\n        }\n    }\n    max_len",
    "    let mut max_diff = 0;\n    let mut zero_count = 0;\n    let mut one_count = 0;\n    for c in string.chars() {\n        if c == '0' {\n            zero_count += 1;\n        } else {\n            one_count += 1;\n        }\n        max_diff = std::cmp::max(max_diff, zero_count - one_count);\n        if max_diff < 0 {\n            zero_count = 0;\n            one_count = 0;\n        }\n    }\n    max_diff",
    "    let mut max_len = 0;\n    let mut count = 0;\n    let mut hash = HashMap::new();\n    hash.insert(0, -1);\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count += 1;\n        } else {\n            count -= 1;\n        }\n        if hash.contains_key(&count) {\n            max_len = max(max_len, i as isize - hash[&count]);\n        } else {\n            hash.insert(count, i as isize);\n        }\n    }\n    max_len",
    "    let mut max_diff = 0;\n    let mut diff = 0;\n    for c in string.chars() {\n        if c == '0' {\n            diff += 1;\n        } else {\n            diff -= 1;\n        }\n        if diff < 0 {\n            diff = 0;\n        }\n        if diff > max_diff {\n            max_diff = diff;\n        }\n    }\n    max_diff",
    "    let mut max_diff = 0;\n    let mut count_zero = 0;\n    let mut count_one = 0;\n\n    for c in string.chars() {\n        if c == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n\n        if count_zero == count_one {\n            max_diff = std::cmp::max(max_diff, count_zero + count_one);\n        }\n    }\n\n    count_zero = 0;\n    count_one = 0;\n\n    for c in string.chars().rev() {\n        if c == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n\n        if count_zero == count_one {\n            max_diff = std::cmp::max(max_diff, count_zero + count_one);\n        }\n    }\n\n    max_diff as isize",
    "    let mut max_len = 0;\n    let mut count = 0;\n    let mut map = HashMap::new();\n    map.insert(0, -1);\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count += 1;\n        } else {\n            count -= 1;\n        }\n        if map.contains_key(&count) {\n            max_len = max(max_len, i as isize - map[&count]);\n        } else {\n            map.insert(count, i as isize);\n        }\n    }\n    max_len",
    "    let mut max_diff = 0;\n    let mut count_zero = 0;\n    let mut count_one = 0;\n    for ch in string.chars() {\n        if ch == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        max_diff = max_diff.max(count_zero - count_one);\n    }\n    max_diff",
    "    let mut max_diff = 0;\n    let mut count_0 = 0;\n    let mut count_1 = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n        max_diff = max_diff.max(count_1 - count_0);\n    }\n    max_diff",
    "    let mut max_diff = 0;\n    let mut diff = 0;\n    for c in string.chars() {\n        if c == '0' {\n            diff += 1;\n        } else {\n            diff -= 1;\n        }\n        if diff < 0 {\n            diff = 0;\n        }\n        if diff > max_diff {\n            max_diff = diff;\n        }\n    }\n    max_diff",
    "    let mut max_length = 0;\n    let mut count = 0;\n    let mut hash_map = HashMap::new();\n    hash_map.insert(0, -1);\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count += 1;\n        } else {\n            count -= 1;\n        }\n        if let Some(j) = hash_map.get(&count) {\n            max_length = max(max_length, i as isize - j);\n        } else {\n            hash_map.insert(count, i as isize);\n        }\n    }\n    max_length",
    "    let mut max_diff: isize = 0;\n    let mut count_zero: isize = 0;\n    let mut count_one: isize = 0;\n    let mut diff: isize = 0;\n    let mut i: usize = 0;\n    let mut j: usize = 0;\n    let mut n: usize = string.len();\n\n    while i < n {\n        if string.chars().nth(i).unwrap() == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        diff = count_zero - count_one;\n        if diff < 0 {\n            diff = -diff;\n        }\n        if diff > max_diff {\n            max_diff = diff;\n        }\n        i += 1;\n    }\n    max_diff",
    "    let mut max_len = 0;\n    let mut count = 0;\n    let mut map = HashMap::new();\n    map.insert(0, -1);\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count -= 1;\n        } else {\n            count += 1;\n        }\n        if map.contains_key(&count) {\n            max_len = max(max_len, i as isize - map[&count]);\n        } else {\n            map.insert(count, i as isize);\n        }\n    }\n    max_len",
    "    let mut max_diff = 0;\n    let mut count_0 = 0;\n    let mut count_1 = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n        let diff = (count_0 - count_1).abs();\n        if diff > max_diff {\n            max_diff = diff;\n        }\n    }\n    max_diff as isize",
    "    let mut max_length = 0;\n    let mut count = 0;\n    let mut hash_map = HashMap::new();\n    hash_map.insert(0, -1);\n\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count -= 1;\n        } else {\n            count += 1;\n        }\n\n        if let Some(j) = hash_map.get(&count) {\n            max_length = max(max_length, i as isize - j);\n        } else {\n            hash_map.insert(count, i as isize);\n        }\n    }\n\n    max_length",
    "    let mut max_diff = 0;\n    let mut count_zero = 0;\n    let mut count_one = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        max_diff = max_diff.max(count_one - count_zero);\n        if count_one < count_zero {\n            count_one = 0;\n            count_zero = 0;\n        }\n    }\n    max_diff as isize",
    "    let mut max_len = 0;\n    let mut count = 0;\n    let mut map = HashMap::new();\n    map.insert(0, -1);\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count -= 1;\n        } else {\n            count += 1;\n        }\n        if map.contains_key(&count) {\n            max_len = max(max_len, i as isize - map[&count]);\n        } else {\n            map.insert(count, i as isize);\n        }\n    }\n    max_len",
    "    let mut max_length = 0;\n    let mut count = 0;\n    let mut hash = HashMap::new();\n    hash.insert(0, -1);\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count -= 1;\n        } else {\n            count += 1;\n        }\n        if hash.contains_key(&count) {\n            max_length = max(max_length, i as isize - hash[&count]);\n        } else {\n            hash.insert(count, i as isize);\n        }\n    }\n    max_length",
    "    let mut max_diff = 0;\n    let mut count_0 = 0;\n    let mut count_1 = 0;\n    let mut i = 0;\n    let mut j = 0;\n    while j < string.len() {\n        if string.chars().nth(j).unwrap() == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n        let diff = count_0 - count_1;\n        if diff < 0 {\n            i = j + 1;\n            count_0 = 0;\n            count_1 = 0;\n        } else {\n            max_diff = max(max_diff, diff);\n        }\n        j += 1;\n    }\n    max_diff as isize",
    "    let mut max_diff = 0;\n    let mut count_0 = 0;\n    let mut count_1 = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n        max_diff = max_diff.max(count_1 - count_0);\n        if count_0 == count_1 {\n            count_0 = 0;\n            count_1 = 0;\n        }\n    }\n    max_diff as isize",
    "    let mut max_diff = 0;\n    let mut diff = 0;\n    let mut count_0 = 0;\n    let mut count_1 = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n        diff = count_0 - count_1;\n        if diff > max_diff {\n            max_diff = diff;\n        }\n    }\n    max_diff",
    "    let mut max_diff = 0;\n    let mut count_zeros = 0;\n    let mut count_ones = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_zeros += 1;\n        } else {\n            count_ones += 1;\n        }\n        let diff = (count_zeros - count_ones).abs();\n        if diff > max_diff {\n            max_diff = diff;\n        }\n    }\n    max_diff as isize",
    "    let mut max_diff = 0;\n    let mut diff = 0;\n    for c in string.chars() {\n        if c == '0' {\n            diff += 1;\n        } else {\n            diff -= 1;\n        }\n        if diff < 0 {\n            diff = 0;\n        }\n        if diff > max_diff {\n            max_diff = diff;\n        }\n    }\n    max_diff",
    "    let mut max_diff = 0;\n    let mut count_zero = 0;\n    let mut count_one = 0;\n\n    for c in string.chars() {\n        if c == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n\n        if count_zero == count_one {\n            max_diff = std::cmp::max(max_diff, count_zero + count_one);\n        }\n    }\n\n    count_zero = 0;\n    count_one = 0;\n\n    for c in string.chars().rev() {\n        if c == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n\n        if count_zero == count_one {\n            max_diff = std::cmp::max(max_diff, count_zero + count_one);\n        }\n    }\n\n    max_diff as isize",
    "    let mut max_diff: isize = 0;\n    let mut count_0: isize = 0;\n    let mut count_1: isize = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n        max_diff = max_diff.max(count_0 - count_1);\n    }\n    max_diff",
    "    let mut count = 0;\n    let mut max = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count += 1;\n        } else {\n            count -= 1;\n        }\n        if count < 0 {\n            count = 0;\n        }\n        max = max.max(count);\n    }\n    max as isize",
    "    let mut max_len = 0;\n    let mut count = 0;\n    let mut map = HashMap::new();\n    map.insert(0, -1);\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count -= 1;\n        } else {\n            count += 1;\n        }\n        if map.contains_key(&count) {\n            max_len = max(max_len, i as isize - map[&count]);\n        } else {\n            map.insert(count, i as isize);\n        }\n    }\n    max_len",
    "    let mut max_diff = 0;\n    let mut diff = 0;\n    for c in string.chars() {\n        if c == '0' {\n            diff += 1;\n        } else {\n            diff -= 1;\n        }\n        if diff < 0 {\n            diff = 0;\n        }\n        if diff > max_diff {\n            max_diff = diff;\n        }\n    }\n    max_diff",
    "    let mut max_length: isize = 0;\n    let mut count: isize = 0;\n    let mut hash_map: HashMap<isize, isize> = HashMap::new();\n    hash_map.insert(0, -1);\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count += 1;\n        } else {\n            count -= 1;\n        }\n        if hash_map.contains_key(&count) {\n            max_length = max(max_length, i as isize - hash_map[&count]);\n        } else {\n            hash_map.insert(count, i as isize);\n        }\n    }\n    max_length",
    "    let mut max_length = 0;\n    let mut count = 0;\n    let mut hash_map: HashMap<isize, isize> = HashMap::new();\n    hash_map.insert(0, -1);\n\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count -= 1;\n        } else {\n            count += 1;\n        }\n\n        if hash_map.contains_key(&count) {\n            max_length = max(max_length, i as isize - hash_map.get(&count).unwrap());\n        } else {\n            hash_map.insert(count, i as isize);\n        }\n    }\n\n    max_length",
    "    let mut max_diff = 0;\n    let mut count_0 = 0;\n    let mut count_1 = 0;\n\n    for i in 0..string.len() {\n        if string.chars().nth(i).unwrap() == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n\n        if count_0 == count_1 {\n            max_diff = std::cmp::max(max_diff, count_0 + count_1);\n        }\n    }\n\n    count_0 = 0;\n    count_1 = 0;\n\n    for i in (0..string.len()).rev() {\n        if string.chars().nth(i).unwrap() == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n\n        if count_0 == count_1 {\n            max_diff = std::cmp::max(max_diff, count_0 + count_1);\n        }\n    }\n\n    max_diff as isize",
    "    let mut max_len = 0;\n    let mut count = 0;\n    let mut hash = HashMap::new();\n    hash.insert(0, -1);\n    for (i, c) in string.chars().enumerate() {\n        count += if c == '0' { -1 } else { 1 };\n        if hash.contains_key(&count) {\n            max_len = std::cmp::max(max_len, i as isize - hash[&count]);\n        } else {\n            hash.insert(count, i as isize);\n        }\n    }\n    max_len",
    "    let mut max_diff = 0;\n    let mut count_0 = 0;\n    let mut count_1 = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n        max_diff = std::cmp::max(max_diff, count_0 - count_1);\n    }\n    max_diff as isize",
    "    let mut max_len = 0;\n    let mut count = 0;\n    let mut map: HashMap<isize, isize> = HashMap::new();\n    map.insert(0, -1);\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count -= 1;\n        } else {\n            count += 1;\n        }\n        if map.contains_key(&count) {\n            max_len = max(max_len, i as isize - map[&count]);\n        } else {\n            map.insert(count, i as isize);\n        }\n    }\n    max_len",
    "    let mut max_len = 0;\n    let mut count = 0;\n    let mut hash = HashMap::new();\n    hash.insert(0, -1);\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count -= 1;\n        } else {\n            count += 1;\n        }\n        if hash.contains_key(&count) {\n            max_len = max(max_len, i as isize - hash[&count]);\n        } else {\n            hash.insert(count, i as isize);\n        }\n    }\n    max_len",
    "    let mut max_diff = 0;\n    let mut count_zero = 0;\n    let mut count_one = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        max_diff = max(max_diff, count_zero - count_one);\n    }\n    max_diff as isize",
    "    let mut max_diff = 0;\n    let mut count_zero = 0;\n    let mut count_one = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        max_diff = max_diff.max(count_zero - count_one);\n    }\n    max_diff",
    "    let mut max_diff = 0;\n    let mut count = 0;\n    for ch in string.chars() {\n        if ch == '0' {\n            count += 1;\n        } else {\n            count -= 1;\n        }\n        if count < 0 {\n            count = 0;\n        }\n        max_diff = max_diff.max(count);\n    }\n    max_diff as isize",
    "    let mut max_diff = 0;\n    let mut count_1 = 0;\n    let mut count_0 = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n        if count_1 == count_0 {\n            max_diff = std::cmp::max(max_diff, count_1 + count_0);\n        }\n    }\n    count_1 = 0;\n    count_0 = 0;\n    for c in string.chars().rev() {\n        if c == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n        if count_1 == count_0 {\n            max_diff = std::cmp::max(max_diff, count_1 + count_0);\n        }\n    }\n    max_diff as isize",
    "    let mut max_diff = 0;\n    let mut count_zero = 0;\n    let mut count_one = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        max_diff = max(max_diff, count_zero - count_one);\n    }\n    max_diff as isize",
    "    let mut max_len = 0;\n    let mut count_0 = 0;\n    let mut count_1 = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n        if count_0 == count_1 {\n            max_len = std::cmp::max(max_len, count_0 + count_1);\n        }\n    }\n    count_0 = 0;\n    count_1 = 0;\n    for c in string.chars().rev() {\n        if c == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n        if count_0 == count_1 {\n            max_len = std::cmp::max(max_len, count_0 + count_1);\n        }\n    }\n    max_len as isize",
    "    let mut max_diff = 0;\n    let mut count_zero = 0;\n    let mut count_one = 0;\n    for c in string.chars() {\n        match c {\n            '0' => count_zero += 1,\n            '1' => count_one += 1,\n            _ => panic!(\"Invalid character\"),\n        }\n        max_diff = max_diff.max(count_zero - count_one);\n        count_one = count_one.max(count_zero);\n    }\n    max_diff as isize",
    "    let mut max_diff = 0;\n    let mut count_0 = 0;\n    let mut count_1 = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n        if count_0 == count_1 {\n            max_diff = std::cmp::max(max_diff, count_0 + count_1);\n        }\n    }\n    count_0 = 0;\n    count_1 = 0;\n    for c in string.chars().rev() {\n        if c == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n        if count_0 == count_1 {\n            max_diff = std::cmp::max(max_diff, count_0 + count_1);\n        }\n    }\n    max_diff as isize",
    "    let mut max_length = 0;\n    let mut count = 0;\n    let mut map = HashMap::new();\n    map.insert(0, -1);\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count -= 1;\n        } else {\n            count += 1;\n        }\n        if map.contains_key(&count) {\n            max_length = max(max_length, i as isize - map[&count]);\n        } else {\n            map.insert(count, i as isize);\n        }\n    }\n    max_length",
    "    let mut max_len = 0;\n    let mut count = 0;\n    let mut hash = HashMap::new();\n    hash.insert(0, -1);\n\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count += 1;\n        } else {\n            count -= 1;\n        }\n\n        if hash.contains_key(&count) {\n            max_len = max(max_len, i as isize - hash.get(&count).unwrap());\n        } else {\n            hash.insert(count, i as isize);\n        }\n    }\n\n    max_len",
    "    let mut max_diff = 0;\n    let mut diff = 0;\n    let mut zero_count = 0;\n    let mut one_count = 0;\n\n    for c in string.chars() {\n        if c == '0' {\n            zero_count += 1;\n        } else {\n            one_count += 1;\n        }\n\n        diff = zero_count - one_count;\n\n        if diff < 0 {\n            diff = -diff;\n        }\n\n        if diff > max_diff {\n            max_diff = diff;\n        }\n    }\n\n    max_diff as isize",
    "    let mut max_length = 0;\n    let mut count = 0;\n    let mut map: HashMap<isize, isize> = HashMap::new();\n    map.insert(0, -1);\n\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count += 1;\n        } else {\n            count -= 1;\n        }\n\n        if map.contains_key(&count) {\n            max_length = max_length.max(i as isize - map.get(&count).unwrap());\n        } else {\n            map.insert(count, i as isize);\n        }\n    }\n\n    max_length",
    "    let mut max_diff = 0;\n    let mut count_0 = 0;\n    let mut count_1 = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n        max_diff = max_diff.max(count_0 - count_1);\n    }\n    max_diff as isize",
    "    let mut max_diff = 0;\n    let mut count_0 = 0;\n    let mut count_1 = 0;\n    for ch in string.chars() {\n        if ch == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n        max_diff = max_diff.max(count_0 - count_1);\n    }\n    max_diff",
    "    let mut max_diff = 0;\n    let mut count_zero = 0;\n    let mut count_one = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        if count_zero == count_one {\n            max_diff = std::cmp::max(max_diff, count_zero + count_one);\n        }\n    }\n    count_zero = 0;\n    count_one = 0;\n    for c in string.chars().rev() {\n        if c == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        if count_zero == count_one {\n            max_diff = std::cmp::max(max_diff, count_zero + count_one);\n        }\n    }\n    max_diff as isize",
    "    let mut max_length = 0;\n    let mut count = 0;\n    let mut hash = HashMap::new();\n    hash.insert(0, -1);\n\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count += 1;\n        } else {\n            count -= 1;\n        }\n\n        if hash.contains_key(&count) {\n            max_length = std::cmp::max(max_length, i as isize - hash.get(&count).unwrap());\n        } else {\n            hash.insert(count, i as isize);\n        }\n    }\n\n    max_length",
    "    let mut max_len = 0;\n    let mut count = 0;\n    let mut hash = HashMap::new();\n    hash.insert(0, -1);\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count += 1;\n        } else {\n            count -= 1;\n        }\n        if hash.contains_key(&count) {\n            max_len = max(max_len, i as isize - hash[&count]);\n        } else {\n            hash.insert(count, i as isize);\n        }\n    }\n    max_len",
    "    let mut max_diff = 0;\n    let mut curr_diff = 0;\n    for c in string.chars() {\n        if c == '0' {\n            curr_diff += 1;\n        } else {\n            curr_diff -= 1;\n        }\n        if curr_diff < 0 {\n            curr_diff = 0;\n        }\n        if curr_diff > max_diff {\n            max_diff = curr_diff;\n        }\n    }\n    max_diff",
    "    let mut max_length = 0;\n    let mut count = 0;\n    let mut hash = HashMap::new();\n    hash.insert(0, -1);\n\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count -= 1;\n        } else {\n            count += 1;\n        }\n\n        if hash.contains_key(&count) {\n            max_length = max(max_length, i as isize - hash[&count]);\n        } else {\n            hash.insert(count, i as isize);\n        }\n    }\n\n    max_length",
    "    let mut max_len = 0;\n    let mut count = 0;\n    let mut hash_map: HashMap<isize, isize> = HashMap::new();\n    hash_map.insert(0, -1);\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count -= 1;\n        } else {\n            count += 1;\n        }\n        if hash_map.contains_key(&count) {\n            max_len = max(max_len, i as isize - hash_map.get(&count).unwrap());\n        } else {\n            hash_map.insert(count, i as isize);\n        }\n    }\n    max_len",
    "    let mut max_length = 0;\n    let mut count = 0;\n    let mut hash_map = HashMap::new();\n    hash_map.insert(0, -1);\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count -= 1;\n        } else {\n            count += 1;\n        }\n        if hash_map.contains_key(&count) {\n            max_length = max(max_length, i as isize - hash_map[&count]);\n        } else {\n            hash_map.insert(count, i as isize);\n        }\n    }\n    max_length",
    "    let mut max_len = 0;\n    let mut count = 0;\n    let mut hash = HashMap::new();\n    hash.insert(0, -1);\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count += 1;\n        } else {\n            count -= 1;\n        }\n        if hash.contains_key(&count) {\n            max_len = max(max_len, i as isize - hash[&count]);\n        } else {\n            hash.insert(count, i as isize);\n        }\n    }\n    max_len",
    "    let mut max_len = 0;\n    let mut count = 0;\n    let mut map: HashMap<isize, isize> = HashMap::new();\n    map.insert(0, -1);\n\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count -= 1;\n        } else {\n            count += 1;\n        }\n\n        if map.contains_key(&count) {\n            max_len = max(max_len, i as isize - map.get(&count).unwrap());\n        } else {\n            map.insert(count, i as isize);\n        }\n    }\n\n    max_len",
    "    let mut max_diff = 0;\n    let mut count_0 = 0;\n    let mut count_1 = 0;\n    for i in 0..string.len() {\n        if string.chars().nth(i).unwrap() == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n        if count_0 == count_1 {\n            max_diff = std::cmp::max(max_diff, count_0 + count_1);\n        }\n    }\n    count_0 = 0;\n    count_1 = 0;\n    for i in (0..string.len()).rev() {\n        if string.chars().nth(i).unwrap() == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n        if count_0 == count_1 {\n            max_diff = std::cmp::max(max_diff, count_0 + count_1);\n        }\n    }\n    max_diff as isize",
    "    let mut max_diff = 0;\n    let mut count_zero = 0;\n    let mut count_one = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        max_diff = max(max_diff, count_zero - count_one);\n    }\n    max_diff as isize",
    "    let mut max_diff = 0;\n    let mut count_zero = 0;\n    let mut count_one = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        max_diff = max_diff.max(count_one - count_zero);\n    }\n    max_diff",
    "    let mut max_length = 0;\n    let mut count = 0;\n    let mut hash = HashMap::new();\n    hash.insert(0, -1);\n\n    for (i, c) in string.chars().enumerate() {\n        if c == '1' {\n            count += 1;\n        } else {\n            count -= 1;\n        }\n\n        if hash.contains_key(&count) {\n            max_length = max(max_length, i as isize - hash[&count]);\n        } else {\n            hash.insert(count, i as isize);\n        }\n    }\n\n    max_length",
    "    let mut max_diff = 0;\n    let mut count_1 = 0;\n    let mut count_0 = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n        max_diff = max_diff.max(count_1 - count_0);\n    }\n    max_diff as isize",
    "    let mut max_len = 0;\n    let mut count_zero = 0;\n    let mut count_one = 0;\n    for i in 0..string.len() {\n        if string.chars().nth(i).unwrap() == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        if count_zero == count_one {\n            max_len = std::cmp::max(max_len, count_zero * 2);\n        }\n    }\n    max_len as isize",
    "    let mut max_diff = 0;\n    let mut count_0 = 0;\n    let mut count_1 = 0;\n    for ch in string.chars() {\n        if ch == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n        max_diff = std::cmp::max(max_diff, count_0 - count_1);\n    }\n    max_diff as isize",
    "    let mut max_len: isize = 0;\n    let mut count: isize = 0;\n    let mut hash_map: HashMap<isize, isize> = HashMap::new();\n    hash_map.insert(0, -1);\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count += 1;\n        } else {\n            count -= 1;\n        }\n        if hash_map.contains_key(&count) {\n            max_len = max(max_len, i as isize - hash_map[&count]);\n        } else {\n            hash_map.insert(count, i as isize);\n        }\n    }\n    max_len",
    "    let mut max_diff = 0;\n    let mut count_0 = 0;\n    let mut count_1 = 0;\n\n    for i in 0..string.len() {\n        for j in i..string.len() {\n            if string.chars().nth(j).unwrap() == '0' {\n                count_0 += 1;\n            } else {\n                count_1 += 1;\n            }\n            let diff = (count_0 - count_1).abs();\n            if diff > max_diff {\n                max_diff = diff;\n            }\n        }\n        count_0 = 0;\n        count_1 = 0;\n    }\n    max_diff as isize",
    "    let mut max_len = 0;\n    let mut count = 0;\n    let mut map = HashMap::new();\n    map.insert(0, -1);\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count -= 1;\n        } else {\n            count += 1;\n        }\n        if map.contains_key(&count) {\n            max_len = max(max_len, i as isize - *map.get(&count).unwrap());\n        } else {\n            map.insert(count, i as isize);\n        }\n    }\n    max_len",
    "    let mut max_len = 0;\n    let mut count = 0;\n    let mut map = HashMap::new();\n    map.insert(0, -1);\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count -= 1;\n        } else {\n            count += 1;\n        }\n        if map.contains_key(&count) {\n            max_len = max(max_len, i as isize - map.get(&count).unwrap());\n        } else {\n            map.insert(count, i as isize);\n        }\n    }\n    max_len",
    "    let mut max_len = 0;\n    let mut count = 0;\n    let mut hash = HashMap::new();\n    hash.insert(0, -1);\n    for (i, c) in string.chars().enumerate() {\n        if c == '1' {\n            count += 1;\n        } else {\n            count -= 1;\n        }\n        if hash.contains_key(&count) {\n            max_len = max(max_len, i as isize - hash.get(&count).unwrap());\n        } else {\n            hash.insert(count, i as isize);\n        }\n    }\n    max_len",
    "    let mut max_len = 0;\n    let mut count = 0;\n    let mut hash = HashMap::new();\n    hash.insert(0, -1);\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count -= 1;\n        } else {\n            count += 1;\n        }\n        if hash.contains_key(&count) {\n            max_len = max(max_len, i as isize - hash[&count]);\n        } else {\n            hash.insert(count, i as isize);\n        }\n    }\n    max_len",
    "    let mut max_diff = 0;\n    let mut count_zero = 0;\n    let mut count_one = 0;\n\n    for c in string.chars() {\n        if c == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n\n        let diff = count_zero - count_one;\n        if diff < 0 {\n            count_zero = 0;\n            count_one = 0;\n        } else {\n            max_diff = max_diff.max(diff);\n        }\n    }\n\n    max_diff",
    "    let mut max_diff = 0;\n    let mut count_zero = 0;\n    let mut count_one = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        max_diff = max_diff.max(count_one - count_zero);\n    }\n    max_diff",
    "    let mut max_diff = 0;\n    let mut count_zero = 0;\n    let mut count_one = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        max_diff = max_diff.max(count_zero - count_one);\n    }\n    max_diff",
    "    let mut max_diff = 0;\n    let mut count_zero = 0;\n    let mut count_one = 0;\n    for i in 0..string.len() {\n        if string.chars().nth(i).unwrap() == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        if count_zero == count_one {\n            max_diff = std::cmp::max(max_diff, count_zero + count_one);\n        }\n    }\n    count_zero = 0;\n    count_one = 0;\n    for i in (0..string.len()).rev() {\n        if string.chars().nth(i).unwrap() == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        if count_zero == count_one {\n            max_diff = std::cmp::max(max_diff, count_zero + count_one);\n        }\n    }\n    max_diff as isize",
    "    let mut max_diff = 0;\n    let mut count = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count += 1;\n        } else {\n            count -= 1;\n        }\n        if count < 0 {\n            count = 0;\n        }\n        max_diff = max_diff.max(count);\n    }\n    max_diff",
    "    let mut max_diff = 0;\n    let mut count_0 = 0;\n    let mut count_1 = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n        max_diff = std::cmp::max(max_diff, count_0 - count_1);\n    }\n    max_diff as isize",
    "    let mut max_diff = 0;\n    let mut count_0 = 0;\n    let mut count_1 = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n        max_diff = std::cmp::max(max_diff, count_0 - count_1);\n    }\n    max_diff as isize",
    "    let mut max_len = 0;\n    let mut count = 0;\n    let mut map = HashMap::new();\n    map.insert(0, -1);\n    for (i, c) in string.chars().enumerate() {\n        count += if c == '0' { 1 } else { -1 };\n        if map.contains_key(&count) {\n            max_len = max_len.max(i as isize - map[&count]);\n        } else {\n            map.insert(count, i as isize);\n        }\n    }\n    max_len",
    "    let mut max_length = 0;\n    let mut count_zero = 0;\n    let mut count_one = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        if count_zero == count_one {\n            max_length = std::cmp::max(max_length, count_zero + count_one);\n        }\n    }\n    count_zero = 0;\n    count_one = 0;\n    for c in string.chars().rev() {\n        if c == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        if count_zero == count_one {\n            max_length = std::cmp::max(max_length, count_zero + count_one);\n        }\n    }\n    max_length as isize",
    "    let mut max_diff = 0;\n    let mut count_0 = 0;\n    let mut count_1 = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n        max_diff = max_diff.max(count_0 - count_1);\n    }\n    max_diff as isize",
    "    let mut max_diff = 0;\n    let mut zeros = 0;\n    let mut ones = 0;\n    for c in string.chars() {\n        if c == '0' {\n            zeros += 1;\n        } else {\n            ones += 1;\n        }\n        if zeros == ones {\n            max_diff = std::cmp::max(max_diff, zeros * 2);\n        }\n    }\n    zeros = 0;\n    ones = 0;\n    for c in string.chars().rev() {\n        if c == '0' {\n            zeros += 1;\n        } else {\n            ones += 1;\n        }\n        if zeros == ones {\n            max_diff = std::cmp::max(max_diff, zeros * 2);\n        }\n    }\n    max_diff as isize",
    "    let mut max_diff = 0;\n    let mut count_zero = 0;\n    let mut count_one = 0;\n    for i in 0..string.len() {\n        if string.chars().nth(i).unwrap() == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        if count_zero == count_one {\n            max_diff = std::cmp::max(max_diff, count_zero + count_one);\n        }\n    }\n    count_zero = 0;\n    count_one = 0;\n    for i in (0..string.len()).rev() {\n        if string.chars().nth(i).unwrap() == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        if count_zero == count_one {\n            max_diff = std::cmp::max(max_diff, count_zero + count_one);\n        }\n    }\n    max_diff as isize",
    "    let mut max_length = 0;\n    let mut count = 0;\n    let mut hash = HashMap::new();\n    hash.insert(0, -1);\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count -= 1;\n        } else {\n            count += 1;\n        }\n        if let Some(j) = hash.get(&count) {\n            max_length = max(max_length, i as isize - j);\n        } else {\n            hash.insert(count, i as isize);\n        }\n    }\n    max_length",
    "    let mut max_diff = 0;\n    let mut count_0 = 0;\n    let mut count_1 = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n        if count_0 == count_1 {\n            max_diff = std::cmp::max(max_diff, count_0 + count_1);\n        }\n    }\n    count_0 = 0;\n    count_1 = 0;\n    for c in string.chars().rev() {\n        if c == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n        if count_0 == count_1 {\n            max_diff = std::cmp::max(max_diff, count_0 + count_1);\n        }\n    }\n    max_diff as isize",
    "    let mut max_diff = 0;\n    let mut count_0 = 0;\n    let mut count_1 = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n        max_diff = std::cmp::max(max_diff, count_0 - count_1);\n    }\n    max_diff as isize",
    "    let mut max_length = 0;\n    let mut count = 0;\n    let mut hash = HashMap::new();\n    hash.insert(0, -1);\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count -= 1;\n        } else {\n            count += 1;\n        }\n        if hash.contains_key(&count) {\n            max_length = max_length.max(i as isize - hash[&count]);\n        } else {\n            hash.insert(count, i as isize);\n        }\n    }\n    max_length",
    "    let mut max_diff = 0;\n    let mut count_zero = 0;\n    let mut count_one = 0;\n\n    for c in string.chars() {\n        if c == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n\n        if count_zero == count_one {\n            max_diff = std::cmp::max(max_diff, count_zero + count_one);\n        }\n    }\n\n    count_zero = 0;\n    count_one = 0;\n\n    for c in string.chars().rev() {\n        if c == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n\n        if count_zero == count_one {\n            max_diff = std::cmp::max(max_diff, count_zero + count_one);\n        }\n    }\n\n    max_diff as isize",
    "    let mut max_diff = 0;\n    let mut count_0 = 0;\n    let mut count_1 = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n        max_diff = max_diff.max(count_0 - count_1);\n    }\n    max_diff",
    "    let mut max_diff = 0;\n    let mut count_zero = 0;\n    let mut count_one = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        let diff = (count_zero - count_one).abs();\n        if diff > max_diff {\n            max_diff = diff;\n        }\n    }\n    max_diff as isize",
    "    let mut max_len = 0;\n    let mut count_0 = 0;\n    let mut count_1 = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n        if count_0 == count_1 {\n            max_len = std::cmp::max(max_len, count_0 + count_1);\n        }\n    }\n    count_0 = 0;\n    count_1 = 0;\n    for c in string.chars().rev() {\n        if c == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n        if count_0 == count_1 {\n            max_len = std::cmp::max(max_len, count_0 + count_1);\n        }\n    }\n    max_len as isize",
    "    let mut max_diff = 0;\n    let mut diff = 0;\n    for c in string.chars() {\n        if c == '0' {\n            diff += 1;\n        } else {\n            diff -= 1;\n        }\n        if diff < 0 {\n            diff = 0;\n        }\n        if diff > max_diff {\n            max_diff = diff;\n        }\n    }\n    max_diff as isize",
    "    let mut max_length = 0;\n    let mut count = 0;\n    let mut hash_map = HashMap::new();\n    hash_map.insert(0, -1);\n\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count += 1;\n        } else {\n            count -= 1;\n        }\n\n        if hash_map.contains_key(&count) {\n            max_length = max(max_length, i as isize - hash_map[&count]);\n        } else {\n            hash_map.insert(count, i as isize);\n        }\n    }\n\n    max_length"
  ]
}