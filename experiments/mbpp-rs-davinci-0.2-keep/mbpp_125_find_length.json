{
  "name": "mbpp_125_find_length",
  "language": "rs",
  "prompt": "/// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfn find_length(string: String) -> isize {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_125_find_length.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\nfn main() {\n    let candidate = find_length;\n    assert_eq!(candidate(String::from(\"11000010001\")), 6);\n    assert_eq!(candidate(String::from(\"10111\")), 1);\n    assert_eq!(candidate(String::from(\"11011101100101\")), 2);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    let mut max_diff = 0;\n    let mut count_0 = 0;\n    let mut count_1 = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n        max_diff = max_diff.max(count_1 - count_0);\n    }\n    max_diff",
    "    let mut max_length = 0;\n    let mut count = 0;\n    let mut hash_map = HashMap::new();\n    hash_map.insert(0, -1);\n\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count += 1;\n        } else {\n            count -= 1;\n        }\n\n        if hash_map.contains_key(&count) {\n            max_length = max(max_length, i as isize - hash_map[&count]);\n        } else {\n            hash_map.insert(count, i as isize);\n        }\n    }\n\n    max_length",
    "    let mut max_diff = 0;\n    let mut count_0 = 0;\n    let mut count_1 = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n        let diff = (count_0 - count_1).abs();\n        if diff > max_diff {\n            max_diff = diff;\n        }\n    }\n    max_diff as isize",
    "    let mut max_diff = 0;\n    let mut diff = 0;\n    for c in string.chars() {\n        if c == '0' {\n            diff += 1;\n        } else {\n            diff -= 1;\n        }\n        if diff < 0 {\n            diff = 0;\n        }\n        if diff > max_diff {\n            max_diff = diff;\n        }\n    }\n    max_diff",
    "    let mut max_len = 0;\n    let mut count = 0;\n    let mut hash_map = HashMap::new();\n    hash_map.insert(0, -1);\n\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count += 1;\n        } else {\n            count -= 1;\n        }\n\n        if hash_map.contains_key(&count) {\n            max_len = max(max_len, i as isize - hash_map.get(&count).unwrap());\n        } else {\n            hash_map.insert(count, i as isize);\n        }\n    }\n\n    max_len",
    "    let mut max_diff = 0;\n    let mut diff = 0;\n    for c in string.chars() {\n        if c == '0' {\n            diff += 1;\n        } else {\n            diff -= 1;\n        }\n        if diff < 0 {\n            diff = 0;\n        }\n        if diff > max_diff {\n            max_diff = diff;\n        }\n    }\n    max_diff",
    "    let mut max_len: isize = 0;\n    let mut count_zero: isize = 0;\n    let mut count_one: isize = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        if count_zero == count_one {\n            max_len = std::cmp::max(max_len, count_zero + count_one);\n        }\n    }\n    count_zero = 0;\n    count_one = 0;\n    for c in string.chars().rev() {\n        if c == '0' {\n            count_zero += 1;\n        } else {\n            count_one += 1;\n        }\n        if count_zero == count_one {\n            max_len = std::cmp::max(max_len, count_zero + count_one);\n        }\n    }\n    max_len",
    "    let mut max_len = 0;\n    let mut count = 0;\n    let mut map = HashMap::new();\n    map.insert(0, -1);\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count -= 1;\n        } else {\n            count += 1;\n        }\n        if map.contains_key(&count) {\n            max_len = max(max_len, i as isize - map[&count]);\n        } else {\n            map.insert(count, i as isize);\n        }\n    }\n    max_len",
    "    let mut max_diff = 0;\n    let mut zeros = 0;\n    let mut ones = 0;\n    for c in string.chars() {\n        if c == '0' {\n            zeros += 1;\n        } else {\n            ones += 1;\n        }\n        if zeros == ones {\n            max_diff = std::cmp::max(max_diff, zeros * 2);\n        }\n    }\n    zeros = 0;\n    ones = 0;\n    for c in string.chars().rev() {\n        if c == '0' {\n            zeros += 1;\n        } else {\n            ones += 1;\n        }\n        if zeros == ones {\n            max_diff = std::cmp::max(max_diff, zeros * 2);\n        }\n    }\n    max_diff as isize",
    "    let mut max_diff = 0;\n    let mut count_0 = 0;\n    let mut count_1 = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n        max_diff = max(max_diff, count_0 - count_1);\n    }\n    max_diff as isize",
    "    let mut max_diff = 0;\n    let mut count_0 = 0;\n    let mut count_1 = 0;\n    for i in 0..string.len() {\n        if string.chars().nth(i).unwrap() == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n        if count_0 == count_1 {\n            max_diff = max(max_diff, count_0 + count_1);\n        }\n    }\n    for i in 0..string.len() {\n        if string.chars().nth(i).unwrap() == '0' {\n            count_0 -= 1;\n        } else {\n            count_1 -= 1;\n        }\n        if count_0 == count_1 {\n            max_diff = max(max_diff, count_0 + count_1);\n        }\n    }\n    max_diff as isize",
    "    let mut max_diff = 0;\n    let mut count = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count += 1;\n        } else {\n            count -= 1;\n        }\n        if count < 0 {\n            count = 0;\n        }\n        max_diff = max_diff.max(count);\n    }\n    max_diff",
    "    let mut max_len = 0;\n    let mut count = 0;\n    let mut map = std::collections::HashMap::new();\n    map.insert(0, -1);\n    for (i, c) in string.chars().enumerate() {\n        count += if c == '0' { 1 } else { -1 };\n        if let Some(j) = map.get(&count) {\n            max_len = std::cmp::max(max_len, i as isize - j);\n        } else {\n            map.insert(count, i as isize);\n        }\n    }\n    max_len",
    "    let mut max_length = 0;\n    let mut count = 0;\n    let mut map = std::collections::HashMap::new();\n    map.insert(0, -1);\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count -= 1;\n        } else {\n            count += 1;\n        }\n        if map.contains_key(&count) {\n            max_length = std::cmp::max(max_length, i as isize - map[&count]);\n        } else {\n            map.insert(count, i as isize);\n        }\n    }\n    max_length",
    "    let mut max_diff = 0;\n    let mut curr_diff = 0;\n    for c in string.chars() {\n        if c == '0' {\n            curr_diff += 1;\n        } else {\n            curr_diff -= 1;\n        }\n        if curr_diff < 0 {\n            curr_diff = 0;\n        }\n        if curr_diff > max_diff {\n            max_diff = curr_diff;\n        }\n    }\n    max_diff as isize",
    "    let mut max_diff = 0;\n    let mut zeros = 0;\n    let mut ones = 0;\n    for c in string.chars() {\n        if c == '0' {\n            zeros += 1;\n        } else {\n            ones += 1;\n        }\n        let diff = (zeros - ones).abs();\n        if diff > max_diff {\n            max_diff = diff;\n        }\n    }\n    max_diff as isize",
    "    let mut max_diff = 0;\n    let mut count = 0;\n    let mut zeros = 0;\n    let mut ones = 0;\n    for c in string.chars() {\n        if c == '0' {\n            zeros += 1;\n        } else {\n            ones += 1;\n        }\n        count += 1;\n        if zeros == ones {\n            max_diff = std::cmp::max(max_diff, count);\n        }\n    }\n    zeros = 0;\n    ones = 0;\n    count = 0;\n    for c in string.chars().rev() {\n        if c == '0' {\n            zeros += 1;\n        } else {\n            ones += 1;\n        }\n        count += 1;\n        if zeros == ones {\n            max_diff = std::cmp::max(max_diff, count);\n        }\n    }\n    max_diff as isize",
    "    let mut max_diff = 0;\n    let mut count_0 = 0;\n    let mut count_1 = 0;\n    for c in string.chars() {\n        if c == '0' {\n            count_0 += 1;\n        } else {\n            count_1 += 1;\n        }\n        max_diff = max_diff.max(count_0 - count_1);\n    }\n    max_diff as isize",
    "    let mut max_len = 0;\n    let mut count = 0;\n    let mut map = HashMap::new();\n    map.insert(0, -1);\n    for (i, c) in string.chars().enumerate() {\n        if c == '0' {\n            count -= 1;\n        } else {\n            count += 1;\n        }\n        if map.contains_key(&count) {\n            max_len = max(max_len, i as isize - map[&count]);\n        } else {\n            map.insert(count, i as isize);\n        }\n    }\n    max_len",
    "    let mut max_diff = 0;\n    let mut count_of_0 = 0;\n    let mut count_of_1 = 0;\n    for i in 0..string.len() {\n        if string.chars().nth(i).unwrap() == '0' {\n            count_of_0 += 1;\n        } else {\n            count_of_1 += 1;\n        }\n        if count_of_0 == count_of_1 {\n            max_diff = std::cmp::max(max_diff, count_of_0);\n        }\n    }\n    max_diff as isize"
  ]
}