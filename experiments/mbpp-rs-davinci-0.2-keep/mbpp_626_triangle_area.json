{
  "name": "mbpp_626_triangle_area",
  "language": "rs",
  "prompt": "/// Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\nfn triangle_area(r: isize) -> Option<isize> {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_626_triangle_area.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(-1), None);\n    assert_eq!(candidate(0), Some(0));\n    assert_eq!(candidate(2), Some(4));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    unimplemented!()",
    "    let a = r / 2;\n    let b = r / 2;\n    let c = (r * r - a * a - b * b).sqrt();\n    if c.is_nan() {\n        None\n    } else {\n        Some((a * b * c) as isize)\n    }",
    "    unimplemented!()",
    "    let h = r * 2;\n    let a = h * h;\n    let b = r * r;\n    let c = (a - b).sqrt();\n    let s = (h + c + r) / 2;\n    let area = (s * (s - h) * (s - c) * (s - r)).sqrt();\n    Some(area as isize)",
    "    let a = r.pow(2) * 3.14159265358979323846264338327950288419716939937510582097494459230781640628620899862803482534211706798214808651328230664709384460955058223172535940812848111745028410270193852110555964462294895493038196442881097566593344612847564823378678316527120190914564856692346034861045432664821339360726024914127372458700660631558817488152092096282925409171536436789259036001133053054882046652138414695194151160943305727036575959195309218611738193261179310511854807446237996274956735188575272489122793818301194912983367336244065664308602139494639522473719070217986094370277053921717629317675238467481846766940513200056812714526356082778577134275778960917363717872146844090122495343014654958537105079227968925892354201995611212902196086403441815981362977477130996051870721134999999837297804995105973173281609631859502445945534690830264252230825334468503526193118817101000313783875288658753320838142061717766914730359825349042875546873115956286388235378759375195778185778053217122680661300192787661119590921642019893809525720106548586327886593615338182796823030195203530185296899577362259941389124972177528347913151557485724245415069595082953311686172785588907509838175463746493931925",
    "    let a = r;\n    let b = r;\n    let c = r * 2;\n    let s = (a + b + c) / 2;\n    let area = (s * (s - a) * (s - b) * (s - c)).sqrt() as isize;\n    Some(area)",
    "    let a = r / 2;\n    let b = r;\n    let c = (a * a + b * b).sqrt();\n    let s = (a + b + c) / 2;\n    let area = (s * (s - a) * (s - b) * (s - c)).sqrt();\n    if area.is_finite() {\n        Some(area as isize)\n    } else {\n        None\n    }",
    "    let a = r / 2;\n    let b = r / 2;\n    let c = r;\n    let p = (a + b + c) / 2;\n    let area = (p * (p - a) * (p - b) * (p - c)) as f64;\n    if area > 0.0 {\n        Some((area.sqrt() as isize) * 2)\n    } else {\n        None\n    }",
    "    let a = r.pow(2) * (3 as f64).sqrt() / 4.0;\n    if a.is_finite() {\n        Some(a as isize)\n    } else {\n        None\n    }",
    "    let r = r as f64;\n    let a = r / 2.0;\n    let b = r.sqrt();\n    let c = (a * a + b * b).sqrt();\n    let s = (a + b + c) / 2.0;\n    let area = (s * (s - a) * (s - b) * (s - c)).sqrt();\n    if area.is_finite() {\n        Some(area as isize)\n    } else {\n        None\n    }",
    "    unimplemented!()",
    "    unimplemented!()",
    "    let r = r as f64;\n    let a = r * 2.0 * std::f64::consts::PI / 3.0;\n    let s = a.powi(2) * (3.0_f64).sqrt() / 4.0;\n    Some(s as isize)",
    "    let h = r * 2;\n    let a = h * h;\n    let b = r * r;\n    let c = (a - b) / 2;\n    let d = (a + b) / 2;\n    let e = (c * d) / 2;\n    if e > 0 {\n        Some(e)\n    } else {\n        None\n    }",
    "    let a = r / 2;\n    let b = r / 2;\n    let c = r;\n    let s = (a + b + c) / 2;\n    let area = (s * (s - a) * (s - b) * (s - c)).sqrt();\n    if area.is_nan() {\n        None\n    } else {\n        Some(area as isize)\n    }",
    "    let a = r.pow(2) * (3 as f64).sqrt() / 4.0;\n    let a = a.round() as isize;\n    if a > 0 {\n        Some(a)\n    } else {\n        None\n    }",
    "    let a = r.pow(2) * (3 as f64).sqrt() / 4.0;\n    if a.is_finite() {\n        Some(a as isize)\n    } else {\n        None\n    }",
    "    let a = r.pow(2) * (3 as f64).sqrt() / 4.0;\n    if a.is_finite() {\n        Some(a as isize)\n    } else {\n        None\n    }",
    "    if r <= 0 {\n        return None;\n    }\n    let s = r * 2;\n    let a = (s * s) / 2;\n    Some(a)",
    "    let a = r / 2;\n    let b = r / 2;\n    let c = (r * r - a * a).sqrt() as isize;\n    let p = (a + b + c) / 2;\n    let area = (p * (p - a) * (p - b) * (p - c)).sqrt() as isize;\n    Some(area)",
    "    unimplemented!()",
    "    let a = r.pow(2) * 3.14159265358979323846264338327950288419716939937510582097494459230781640628620899862803482534211706798214808651328230664709384460955058223172535940812848111745028410270193852110555964462294895493038196442881097566593344612847564823378678316527120190914564856692346034861045432664821339360726024914127372458700660631558817488152092096282925409171536436789259036001133053054882046652138414695194151160943305727036575959195309218611738193261179310511854807446237996274956735188575272489122793818301194912983367336244065664308602139494639522473719070217986094370277053921717629317675238467481846766940513200056812714526356082778577134275778960917363717872146844090122495343014654958537105079227968925892354201995611212902196086403441815981362977477130996051870721134999999837297804995105973173281609631859502445945534690830264252230825334468503526193118817101000313783875288658753320838142061717766914730359825349042875546873115956286388235378759375195778185778053217122680661300192787661119590921642019893809525720106548586327886593615338182796823030195203530185296899577362259941389124972177528347913151557485724245415069595082953311686172785588907509838175463746493931925",
    "    let a = r * 2;\n    let b = r * 2;\n    let c = (a.pow(2) + b.pow(2)).sqrt();\n    let s = (a + b + c) / 2.0;\n    let area = (s * (s - a) * (s - b) * (s - c)).sqrt();\n    if area.is_finite() {\n        Some(area as isize)\n    } else {\n        None\n    }",
    "    unimplemented!()",
    "    let a = r as f64;\n    let b = r as f64;\n    let c = (2.0 * a).sqrt();\n    let s = (a + b + c) / 2.0;\n    let area = (s * (s - a) * (s - b) * (s - c)).sqrt();\n    if area.is_finite() {\n        Some(area as isize)\n    } else {\n        None\n    }",
    "    let h = r * 2;\n    let a = h * h;\n    let b = r * r;\n    let c = (a - b) / 2;\n    let d = (a + b) / 2;\n    let e = (c * d) / 2;\n    if e > 0 {\n        Some(e)\n    } else {\n        None\n    }",
    "    let a = r.pow(2) * (3 as f64).sqrt() / 4.0;\n    if a.is_finite() {\n        Some(a as isize)\n    } else {\n        None\n    }",
    "    let a = r as f64;\n    let b = a / 2.0;\n    let c = a;\n    let s = (a + b + c) / 2.0;\n    let area = (s * (s - a) * (s - b) * (s - c)).sqrt();\n    if area.is_finite() {\n        Some(area as isize)\n    } else {\n        None\n    }",
    "    let a = r * 2;\n    let b = r * 2;\n    let c = (r * 2).pow(2) - (r * 2).pow(2);\n    let s = (a + b + c) / 2;\n    let area = (s * (s - a) * (s - b) * (s - c)).sqrt();\n    if area.is_nan() {\n        None\n    } else {\n        Some(area as isize)\n    }",
    "    unimplemented!()",
    "    let a = r.pow(2) * (3 as f64).sqrt() / 4.0;\n    if a.is_finite() {\n        Some(a as isize)\n    } else {\n        None\n    }",
    "    if r <= 0 {\n        return None;\n    }\n    let h = r * 2;\n    let a = h * h;\n    let b = r * r;\n    let c = (a - b) / 2;\n    Some(c)",
    "    let h = r * 2;\n    let w = (h / 2) as f64;\n    let area = (w * w.sqrt() / 2.0) as isize;\n    Some(area)",
    "    unimplemented!()",
    "    let x = r / 2;\n    let y = (r * r - x * x).sqrt();\n    let area = x * y / 2;\n    if area.is_finite() {\n        Some(area as isize)\n    } else {\n        None\n    }",
    "    let a = r.pow(2) * (3.0_f64).sqrt() / 4.0;\n    if a.is_finite() {\n        Some(a as isize)\n    } else {\n        None\n    }",
    "    let a = r / 2;\n    let b = r;\n    let c = (a.pow(2) + b.pow(2)).sqrt();\n    let s = (a + b + c) / 2;\n    let area = (s * (s - a) * (s - b) * (s - c)).sqrt();\n    if area.is_nan() {\n        None\n    } else {\n        Some(area as isize)\n    }",
    "    let a = r / 2;\n    let b = r;\n    let c = (a.pow(2) + b.pow(2)).sqrt();\n    let s = (a + b + c) / 2;\n    let area = (s * (s - a) * (s - b) * (s - c)).sqrt();\n    if area.is_finite() {\n        Some(area as isize)\n    } else {\n        None\n    }",
    "    unimplemented!()",
    "    let a = r / 2;\n    let b = r;\n    let c = (a * a + b * b).sqrt() as isize;\n    let s = (a + b + c) / 2;\n    let area = (s * (s - a) * (s - b) * (s - c)).sqrt() as isize;\n    Some(area)",
    "    let a = r.pow(2) * (3 as f64).sqrt() / 4.0;\n    if a.is_finite() {\n        Some(a as isize)\n    } else {\n        None\n    }",
    "    let a = (r as f64).sqrt() / 2.0;\n    let b = r as f64 / 2.0;\n    let c = (a * a + b * b).sqrt();\n    let s = (a + b + c) / 2.0;\n    let area = (s * (s - a) * (s - b) * (s - c)).sqrt();\n    if area.is_finite() {\n        Some(area as isize)\n    } else {\n        None\n    }",
    "    unimplemented!()",
    "    let a = r / 2;\n    let b = r / 2;\n    let c = (r * r - a * a).sqrt() as isize;\n    let s = (a + b + c) / 2;\n    let area = (s * (s - a) * (s - b) * (s - c)).sqrt() as isize;\n    Some(area)",
    "    let a = r as f64;\n    let b = a / 2.0;\n    let c = (a * a - b * b).sqrt();\n    let s = (a + b + c) / 2.0;\n    let area = (s * (s - a) * (s - b) * (s - c)).sqrt();\n    if area.is_finite() {\n        Some(area as isize)\n    } else {\n        None\n    }",
    "    let a = r.pow(2) * (3 as f64).sqrt() / 4.0;\n    if a.is_finite() {\n        Some(a as isize)\n    } else {\n        None\n    }",
    "    let a = r * 2;\n    let b = r * 2;\n    let c = (r * 2).pow(2) - (r * 2).pow(2);\n    let s = (a + b + c) / 2;\n    let area = (s * (s - a) * (s - b) * (s - c)).sqrt();\n    if area.is_nan() {\n        None\n    } else {\n        Some(area as isize)\n    }",
    "    let a = r.pow(2) * (PI / 2.0).sin() / 2.0;\n    Some(a as isize)",
    "    let s = r * 2;\n    let h = (s * s - r * r).sqrt();\n    Some((h * r) / 2)",
    "    let r = r as f64;\n    let a = r * r * PI / 2.0;\n    let h = (a / r) * 2.0;\n    let s = h * r / 2.0;\n    Some(s as isize)",
    "    let a = r * 2;\n    let b = r * 2;\n    let c = (a.pow(2) + b.pow(2)).sqrt();\n    let s = (a + b + c) / 2.0;\n    let area = (s * (s - a) * (s - b) * (s - c)).sqrt();\n    if area.is_finite() {\n        Some(area as isize)\n    } else {\n        None\n    }",
    "    let a = r * 2;\n    let b = r * 2;\n    let c = (r * 2).pow(2) - (r * 2).pow(2);\n    let s = (a + b + c) / 2;\n    let area = (s * (s - a) * (s - b) * (s - c)).sqrt();\n    if area.is_nan() {\n        None\n    } else {\n        Some(area as isize)\n    }",
    "    let a = r / 2;\n    let b = (r * r - a * a).sqrt() as isize;\n    let c = r - a - b;\n    let p = (a + b + c) / 2;\n    let area = (p * (p - a) * (p - b) * (p - c)).sqrt() as isize;\n    if area == 0 {\n        None\n    } else {\n        Some(area)\n    }",
    "    let r = r as f64;\n    let a = r / 2.0;\n    let b = r;\n    let c = (a.powi(2) + b.powi(2)).sqrt();\n    let s = (a + b + c) / 2.0;\n    let area = (s * (s - a) * (s - b) * (s - c)).sqrt();\n    if area.is_finite() {\n        Some(area as isize)\n    } else {\n        None\n    }",
    "    let h = r * 2;\n    let a = (h * h) / 2;\n    if a > 0 {\n        Some(a)\n    } else {\n        None\n    }",
    "    let a = r.pow(2) * (3 as f64).sqrt() / 4.0;\n    if a.is_finite() {\n        Some(a as isize)\n    } else {\n        None\n    }",
    "    let a = r.pow(2) * (PI as isize).pow(2) / 4;\n    let b = (r.pow(2) - (r / 2).pow(2)).sqrt();\n    let c = (r.pow(2) - (r / 2).pow(2)).sqrt();\n    let s = (a + b + c) / 2;\n    let area = (s * (s - a) * (s - b) * (s - c)).sqrt();\n    if area.is_finite() {\n        Some(area as isize)\n    } else {\n        None\n    }",
    "    unimplemented!()",
    "    let h = r * 2;\n    let w = (h * h - r * r).sqrt() as isize;\n    Some(w * h / 2)",
    "    let a = r / 2;\n    let b = r;\n    let c = (a.pow(2) + b.pow(2)).sqrt();\n    let s = (a + b + c) / 2;\n    let area = (s * (s - a) * (s - b) * (s - c)).sqrt();\n    if area.is_nan() {\n        None\n    } else {\n        Some(area as isize)\n    }",
    "    let a = r.pow(2) * 3.14 / 2.0;\n    let b = (a / 2.0).sqrt();\n    let c = (a - b).sqrt();\n    let s = (a + b + c) / 2.0;\n    let area = (s * (s - a) * (s - b) * (s - c)).sqrt();\n    if area.is_finite() {\n        Some(area as isize)\n    } else {\n        None\n    }",
    "    let r = r as f64;\n    let a = r / 2.0;\n    let b = r / 2.0;\n    let c = (a.powi(2) + b.powi(2)).sqrt();\n    let s = (a + b + c) / 2.0;\n    let area = (s * (s - a) * (s - b) * (s - c)).sqrt();\n    if area.is_finite() {\n        Some(area as isize)\n    } else {\n        None\n    }",
    "    let r = r as f64;\n    let a = r / 2.0;\n    let b = r.sqrt();\n    let c = r;\n    let s = (a + b + c) / 2.0;\n    let area = s * (s - a) * (s - b) * (s - c);\n    if area > 0.0 {\n        Some((area.sqrt() * 100.0).round() as isize)\n    } else {\n        None\n    }",
    "    let h = r * 2;\n    let a = h * h;\n    let b = r * r;\n    let c = (a - b) / 2;\n    let d = (a + b) / 2;\n    let e = (c * d) / 2;\n    if e > 0 {\n        Some(e)\n    } else {\n        None\n    }",
    "    let a = r as f64;\n    let b = a / 2.0;\n    let c = (a * a - b * b).sqrt();\n    let s = (a + b + c) / 2.0;\n    let area = (s * (s - a) * (s - b) * (s - c)).sqrt();\n    if area.is_finite() {\n        Some(area as isize)\n    } else {\n        None\n    }",
    "    let a = r / 2;\n    let b = r;\n    let c = (a * a + b * b).sqrt() as isize;\n    let s = (a + b + c) / 2;\n    let area = (s * (s - a) * (s - b) * (s - c)).sqrt() as isize;\n    Some(area)",
    "    let a = r.pow(2) * (3 as f64).sqrt() / 4.0;\n    let b = a.floor() as isize;\n    if a == b as f64 {\n        Some(b)\n    } else {\n        None\n    }",
    "    let a = r.pow(2) * (3 as f64).sqrt() / 4.0;\n    if a.is_finite() {\n        Some(a as isize)\n    } else {\n        None\n    }",
    "    unimplemented!()",
    "    let a = r as f64;\n    let b = a / 2.0;\n    let c = (a * a - b * b).sqrt();\n    let s = (a + b + c) / 2.0;\n    let area = (s * (s - a) * (s - b) * (s - c)).sqrt();\n    if area.is_finite() {\n        Some(area as isize)\n    } else {\n        None\n    }",
    "    let r = r as f64;\n    let a = r / 2.0;\n    let b = r;\n    let c = (a.powi(2) + b.powi(2)).sqrt();\n    let s = (a + b + c) / 2.0;\n    let area = (s * (s - a) * (s - b) * (s - c)).sqrt();\n    if area.is_finite() {\n        Some(area as isize)\n    } else {\n        None\n    }",
    "    unimplemented!()",
    "    unimplemented!()",
    "    let a = r / 2;\n    let b = r / 2;\n    let c = r;\n    let s = (a + b + c) / 2;\n    let area = (s * (s - a) * (s - b) * (s - c)).sqrt() as isize;\n    Some(area)",
    "    let a = r.pow(2) * (PI / 2.0).sin() / 2.0;\n    let b = r.pow(2) * (PI / 2.0).cos() / 2.0;\n    let c = r.pow(2) - a.pow(2) - b.pow(2);\n    let c = c.sqrt();\n    let s = (a + b + c) / 2.0;\n    let area = (s * (s - a) * (s - b) * (s - c)).sqrt();\n    if area.is_nan() {\n        None\n    } else {\n        Some(area as isize)\n    }",
    "    let r = r as f64;\n    let a = r / 2.0;\n    let b = r;\n    let c = (a.powi(2) + b.powi(2)).sqrt();\n    let s = (a + b + c) / 2.0;\n    let area = (s * (s - a) * (s - b) * (s - c)).sqrt();\n    Some(area as isize)",
    "    let h = r * 2;\n    let w = (r * 2).sqrt();\n    if w > h {\n        None\n    } else {\n        Some((w * h) / 2)\n    }",
    "    let a = r * 2;\n    let b = r * 2;\n    let c = (r * 2).pow(2) - (r * 2).pow(2);\n    let p = (a + b + c) / 2;\n    let s = (p * (p - a) * (p - b) * (p - c)).sqrt();\n    if s.is_nan() {\n        None\n    } else {\n        Some(s as isize)\n    }",
    "    let a = r.pow(2) * 3.14159265358979323846264338327950288419716939937510582097494459230781640628620899862803482534211706798214808651328230664709384460955058223172535940812848111745028410270193852110555964462294895493038196442881097566593344612847564823378678316527120190914564856692346034861045432664821339360726024914127372458700660631558817488152092096282925409171536436789259036001133053054882046652138414695194151160943305727036575959195309218611738193261179310511854807446237996274956735188575272489122793818301194912983367336244065664308602139494639522473719070217986094370277053921717629317675238467481846766940513200056812714526356082778577134275778960917363717872146844090122495343014654958537105079227968925892354201995611212902196086403441815981362977477130996051870721134999999837297804995105973173281609631859502445945534690830264252230825334468503526193118817101000313783875288658753320838142061717766914730359825349042875546873115956286388235378759375195778185778053217122680661300192787661119590921642019893809525720106548586327886593615338182796823030195203530185296899577362259941389124972177528347913151557485724245415069595082953311686172785588907509838175463746493931925",
    "    if r <= 0 {\n        return None;\n    }\n    let h = r * 2;\n    let a = h * h / 2;\n    Some(a)",
    "    let a = r / 2;\n    let b = r / 2;\n    let c = (r * r - a * a).sqrt() as isize;\n    let s = (a + b + c) / 2;\n    Some((s * (s - a) * (s - b) * (s - c)).sqrt() as isize)",
    "    let a = r.pow(2) * (PI / 2.0).sin();\n    let b = r.pow(2) * (PI / 2.0).cos();\n    let c = r.pow(2) * (PI / 2.0).tan();\n    let s = (a + b + c) / 2.0;\n    let area = (s * (s - a) * (s - b) * (s - c)).sqrt();\n    if area.is_finite() {\n        Some(area as isize)\n    } else {\n        None\n    }",
    "    let a = r.pow(2) * (3 as f64).sqrt() / 4.0;\n    if a.is_finite() {\n        Some(a as isize)\n    } else {\n        None\n    }",
    "    let a = r as f64;\n    let b = r as f64;\n    let c = (2.0 * r) as f64;\n\n    let s = (a + b + c) / 2.0;\n\n    let area = (s * (s - a) * (s - b) * (s - c)).sqrt();\n\n    if area.is_finite() {\n        Some(area as isize)\n    } else {\n        None\n    }",
    "    unimplemented!()",
    "    let h = r * (2f64).sqrt() / 2f64;\n    let area = (r as f64 * h) / 2f64;\n    if area.is_finite() {\n        Some(area as isize)\n    } else {\n        None\n    }",
    "    let a = r.pow(2) * (3 as f64).sqrt() / 4.0;\n    if a.is_finite() {\n        Some(a as isize)\n    } else {\n        None\n    }",
    "    let r = r as f64;\n    let a = r / 2.0;\n    let b = r.sqrt();\n    let c = r;\n    let s = (a + b + c) / 2.0;\n    let area = s * (s - a) * (s - b) * (s - c);\n    if area < 0.0 {\n        None\n    } else {\n        Some(area as isize)\n    }",
    "    let a = r.pow(2) * (3 as f64).sqrt() / 4.0;\n    if a.is_finite() {\n        Some(a as isize)\n    } else {\n        None\n    }",
    "    let a = r / 2;\n    let b = r / 2;\n    let c = (a.pow(2) + b.pow(2)).sqrt();\n    let s = (a + b + c) / 2;\n    let area = (s * (s - a) * (s - b) * (s - c)).sqrt();\n    if area.is_finite() {\n        Some(area as isize)\n    } else {\n        None\n    }",
    "    let r = r as f64;\n    let h = r * (2.0f64).sqrt() / 2.0;\n    let area = (r * h) / 2.0;\n    if area.is_finite() {\n        Some(area as isize)\n    } else {\n        None\n    }",
    "    let a = r as f64;\n    let b = a / 2.0;\n    let c = a;\n    let s = (a + b + c) / 2.0;\n    let area = (s * (s - a) * (s - b) * (s - c)).sqrt();\n    if area.is_finite() {\n        Some(area as isize)\n    } else {\n        None\n    }",
    "    let mut max_area = 0;\n    for i in 1..r {\n        for j in 1..r {\n            let k = (i.pow(2) + j.pow(2)).sqrt();\n            if k.is_integer() && k <= r {\n                let area = (i * j * k) / 2;\n                if area > max_area {\n                    max_area = area;\n                }\n            }\n        }\n    }\n    if max_area > 0 {\n        Some(max_area as isize)\n    } else {\n        None\n    }",
    "    let a = r * r;\n    let b = r * r;\n    let c = (2 * r) * (2 * r);\n    let p = (a + b + c) / 2;\n    let area = (p * (p - a) * (p - b) * (p - c)) as f64;\n    if area < 0.0 {\n        None\n    } else {\n        Some(area.sqrt() as isize)\n    }",
    "    let r = r as f64;\n    let a = r.powi(2) * (2.0 * PI - 3.0).sqrt() / 4.0;\n    if a.is_finite() {\n        Some(a as isize)\n    } else {\n        None\n    }",
    "    unimplemented!()",
    "    let a = r as f64;\n    let h = a * (2.0f64).sqrt() / 2.0;\n    let area = (a * h) / 2.0;\n    if area.is_finite() {\n        Some(area as isize)\n    } else {\n        None\n    }",
    "    let a = r;\n    let b = r;\n    let c = (r * r * 2).sqrt();\n    let s = (a + b + c) / 2;\n    let area = (s * (s - a) * (s - b) * (s - c)).sqrt();\n    if area.is_nan() {\n        None\n    } else {\n        Some(area as isize)\n    }",
    "    let a = r / 2;\n    let b = r / 2;\n    let c = (r * r - a * a).sqrt() as isize;\n    let s = (a + b + c) / 2;\n    let area = (s * (s - a) * (s - b) * (s - c)).sqrt() as isize;\n    if area > 0 {\n        Some(area)\n    } else {\n        None\n    }",
    "    let r = r as f64;\n    let a = r / 2.0;\n    let b = r;\n    let c = (a * a + b * b).sqrt();\n    let s = (a + b + c) / 2.0;\n    let area = (s * (s - a) * (s - b) * (s - c)).sqrt();\n    if area.is_finite() {\n        Some(area as isize)\n    } else {\n        None\n    }",
    "    let a = r / 2;\n    let b = (r * r - a * a).sqrt() as isize;\n    let c = r - a - b;\n    if a + b > c && a + c > b && b + c > a {\n        Some((a * b * c) / 2)\n    } else {\n        None\n    }",
    "    let a = r as f64;\n    let b = a / 2.0;\n    let c = a;\n    let s = (a + b + c) / 2.0;\n    let area = (s * (s - a) * (s - b) * (s - c)).sqrt();\n    if area.is_finite() {\n        Some(area as isize)\n    } else {\n        None\n    }",
    "    let a = r.pow(2) * (PI / 2.0).sin();\n    let b = r.pow(2) * (PI / 2.0).cos();\n    let c = r.pow(2) * (PI / 2.0).tan();\n    let s = (a + b + c) / 2.0;\n    let area = (s * (s - a) * (s - b) * (s - c)).sqrt();\n    if area.is_finite() {\n        Some(area as isize)\n    } else {\n        None\n    }",
    "    let a = r as f64;\n    let b = a / 2.0;\n    let c = b;\n    let s = (a + b + c) / 2.0;\n    let area = (s * (s - a) * (s - b) * (s - c)).sqrt();\n    if area.is_finite() {\n        Some(area as isize)\n    } else {\n        None\n    }",
    "    let a = r * 2;\n    let b = r * 2;\n    let c = (a.pow(2) + b.pow(2)).sqrt();\n    let s = (a + b + c) / 2.0;\n    let area = (s * (s - a) * (s - b) * (s - c)).sqrt();\n    Some(area as isize)",
    "    let a = r * 2;\n    let b = r * 2;\n    let c = (a.pow(2) + b.pow(2)).sqrt();\n    let s = (a + b + c) / 2;\n    let area = (s * (s - a) * (s - b) * (s - c)).sqrt();\n    if area.is_nan() {\n        None\n    } else {\n        Some(area as isize)\n    }",
    "    let h = r * 2;\n    let a = h * h;\n    let b = r * r;\n    let c = a - b;\n    let c = (c as f64).sqrt() as isize;\n    let area = (c * h) / 2;\n    Some(area)",
    "    unimplemented!()",
    "    unimplemented!()",
    "    let a = r * 2;\n    let b = r * 2;\n    let c = (a.pow(2) + b.pow(2)).sqrt();\n    let s = (a + b + c) / 2;\n    let area = (s * (s - a) * (s - b) * (s - c)).sqrt();\n    if area.is_finite() {\n        Some(area as isize)\n    } else {\n        None\n    }",
    "    unimplemented!()",
    "    let a = r as f64;\n    let b = a / 2.0;\n    let c = b;\n    let s = (a + b + c) / 2.0;\n    let area = (s * (s - a) * (s - b) * (s - c)).sqrt();\n    if area.is_finite() {\n        Some(area as isize)\n    } else {\n        None\n    }",
    "    let a = r / 2;\n    let b = r / 2;\n    let c = r;\n    let s = (a + b + c) / 2;\n    let area = (s * (s - a) * (s - b) * (s - c)).sqrt();\n    if area.is_nan() {\n        None\n    } else {\n        Some(area as isize)\n    }",
    "    let a = r / 2;\n    let b = r / 2;\n    let c = (r * r + r * r).sqrt();\n    let s = (a + b + c) / 2;\n    let area = (s * (s - a) * (s - b) * (s - c)).sqrt();\n    Some(area as isize)",
    "    let a = r.pow(2) * (3.0_f64).sqrt() / 4.0;\n    if a.is_finite() {\n        Some(a as isize)\n    } else {\n        None\n    }",
    "    let a = r.pow(2) * (PI / 2.0).sin();\n    let b = r.pow(2) * (PI / 2.0).cos();\n    let c = r.pow(2) * (PI / 2.0).sin();\n    let s = (a + b + c) / 2.0;\n    let area = (s * (s - a) * (s - b) * (s - c)).sqrt();\n    if area.is_nan() {\n        None\n    } else {\n        Some(area as isize)\n    }",
    "    let a = r.pow(2) * (3 as f64).sqrt() / 4.0;\n    if a.is_finite() {\n        Some(a as isize)\n    } else {\n        None\n    }",
    "    let a = r as f64;\n    let b = a / 2.0;\n    let c = b;\n    let s = (a + b + c) / 2.0;\n    let area = (s * (s - a) * (s - b) * (s - c)).sqrt();\n    if area.is_nan() {\n        None\n    } else {\n        Some(area as isize)\n    }",
    "    let a = r.pow(2) * (PI / 2.0).sin();\n    let b = r.pow(2) * (PI / 2.0).cos();\n    let c = r.pow(2) * (PI / 2.0).tan();\n    let s = (a + b + c) / 2.0;\n    let area = (s * (s - a) * (s - b) * (s - c)).sqrt();\n    if area.is_finite() {\n        Some(area as isize)\n    } else {\n        None\n    }",
    "    let a = r.pow(2) * (PI / 2.0).sin();\n    let b = r.pow(2) * (PI / 2.0).cos();\n    let c = r.pow(2) * (PI / 2.0).tan();\n    let s = (a + b + c) / 2.0;\n    let area = (s * (s - a) * (s - b) * (s - c)).sqrt();\n    if area.is_finite() {\n        Some(area as isize)\n    } else {\n        None\n    }",
    "    let h = r * 2;\n    let a = h.pow(2) - r.pow(2);\n    let b = h.pow(2) - (r / 2).pow(2);\n    let c = h.pow(2) - ((r / 2) + 1).pow(2);\n    let s = (a + b + c) / 2;\n    let area = (s * (s - a) * (s - b) * (s - c)).sqrt();\n    if area.is_nan() {\n        None\n    } else {\n        Some(area as isize)\n    }",
    "    let h = r * 2;\n    let w = (h * h - r * r).sqrt();\n    if w.is_nan() {\n        None\n    } else {\n        Some((w * h / 2) as isize)\n    }",
    "    let a = r * 2;\n    let b = r * 2;\n    let c = (a.pow(2) + b.pow(2)).sqrt();\n    let s = (a + b + c) / 2.0;\n    let area = (s * (s - a) * (s - b) * (s - c)).sqrt();\n    if area.is_finite() {\n        Some(area as isize)\n    } else {\n        None\n    }",
    "    let a = r.pow(2) * (3 as f64).sqrt() / 4.0;\n    if a.is_finite() {\n        Some(a as isize)\n    } else {\n        None\n    }",
    "    let s = r * 2;\n    let a = s * s;\n    let b = (s / 2) * (s / 2);\n    let c = (s / 2) * (s / 2);\n    let p = (a + b + c) / 2;\n    let area = (p * (p - a) * (p - b) * (p - c)).sqrt() as isize;\n    Some(area)",
    "    let a = r / 2;\n    let b = r / 2;\n    let c = (r * r + r * r).sqrt();\n    let s = (a + b + c) / 2;\n    let area = (s * (s - a) * (s - b) * (s - c)).sqrt();\n    if area.is_nan() {\n        None\n    } else {\n        Some(area as isize)\n    }",
    "    let s = r * 2;\n    let a = s * s;\n    let b = (s / 2) * (s / 2);\n    let c = (s / 2) * (s / 2);\n    let p = (a + b + c) / 2;\n    let area = (p * (p - a) * (p - b) * (p - c)).sqrt();\n    if area.is_nan() {\n        None\n    } else {\n        Some(area as isize)\n    }",
    "    unimplemented!()",
    "    let a = r.pow(2) * 3.14159265358979323846264338327950288419716939937510582097494459230781640628620899862803482534211706798214808651328230664709384460955058223172535940812848111745028410270193852110555964462294895493038196442881097566593344612847564823378678316527120190914564856692346034861045432664821339360726024914127372458700660631558817488152092096282925409171536436789259036001133053054882046652138414695194151160943305727036575959195309218611738193261179310511854807446237996274956735188575272489122793818301194912983367336244065664308602139494639522473719070217986094370277053921717629317675238467481846766940513200056812714526356082778577134275778960917363717872146844090122495343014654958537105079227968925892354201995611212902196086403441815981362977477130996051870721134999999837297804995105973173281609631859502445945534690830264252230825334468503526193118817101000313783875288658753320838142061717766914730359825349042875546873115956286388235378759375195778185778053217122680661300192787661119590921642019893809525720106548586327886593615338182796823030195203530185296899577362259941389124972177528347913151557485724245415069595082953311686172785588907509838175463746493931925",
    "    let a = r / 2;\n    let b = r;\n    let c = (a.pow(2) + b.pow(2)).sqrt();\n    let s = (a + b + c) / 2;\n    let area = (s * (s - a) * (s - b) * (s - c)).sqrt();\n    if area.is_nan() {\n        None\n    } else {\n        Some(area as isize)\n    }",
    "    let a = r / 2;\n    let b = r / 2;\n    let c = (r * r - a * a - b * b).sqrt() as isize;\n    if a + b > c {\n        Some((a * b * c) / 2)\n    } else {\n        None\n    }",
    "    let a = r.pow(2) * (3 as f64).sqrt() / 4.0;\n    if a.is_finite() {\n        Some(a as isize)\n    } else {\n        None\n    }",
    "    let a = r as f64;\n    let b = a / 2.0;\n    let c = b;\n    let s = (a + b + c) / 2.0;\n    let area = (s * (s - a) * (s - b) * (s - c)).sqrt();\n    if area.is_finite() {\n        Some(area as isize)\n    } else {\n        None\n    }",
    "    unimplemented!()",
    "    unimplemented!()",
    "    let a = r / 2;\n    let b = r / 2;\n    let c = (a.pow(2) + b.pow(2)).sqrt();\n    let s = (a + b + c) / 2;\n    let area = (s * (s - a) * (s - b) * (s - c)).sqrt();\n    if area.is_finite() {\n        Some(area as isize)\n    } else {\n        None\n    }",
    "    unimplemented!()",
    "    let a = r as f64;\n    let b = a / 2.0;\n    let c = b;\n    let s = (a + b + c) / 2.0;\n    let area = (s * (s - a) * (s - b) * (s - c)).sqrt();\n    Some(area as isize)",
    "    unimplemented!()",
    "    let a = r.pow(2) * 3.14159265358979323846264338327950288419716939937510582097494459230781640628620899862803482534211706798214808651328230664709384460955058223172535940812848111745028410270193852110555964462294895493038196442881097566593344612847564823378678316527120190914564856692346034861045432664821339360726024914127372458700660631558817488152092096282925409171536436789259036001133053054882046652138414695194151160943305727036575959195309218611738193261179310511854807446237996274956735188575272489122793818301194912983367336244065664308602139494639522473719070217986094370277053921717629317675238467481846766940513200056812714526356082778577134275778960917363717872146844090122495343014654958537105079227968925892354201995611212902196086403441815981362977477130996051870721134999999837297804995105973173281609631859502445945534690830264252230825334468503526193118817101000313783875288658753320838142061717766914730359825349042875546873115956286388235378759375195778185778053217122680661300192787661119590921642019893809525720106548586327886593615338182796823030195203530185296899577362259941389124972177528347913151557485724245415069595082953311686172785588907509838175463746493931925",
    "    let h = r * 2;\n    let a = (r * r) as f64;\n    let b = (h * h) as f64;\n    let c = (a + b).sqrt();\n    let s = (c + a + b) / 2.0;\n    let area = (s * (s - c) * (s - a) * (s - b)).sqrt();\n    if area.is_finite() {\n        Some(area as isize)\n    } else {\n        None\n    }",
    "    let a = r * 2;\n    let b = r * 2;\n    let c = (r * 2).pow(2) - (r * 2).pow(2);\n    let s = (a + b + c) / 2;\n    let area = (s * (s - a) * (s - b) * (s - c)).sqrt();\n    if area.is_nan() {\n        None\n    } else {\n        Some(area as isize)\n    }",
    "    unimplemented!()",
    "    let a = r.pow(2) * (3 as f64).sqrt() / 4.0;\n    if a.is_finite() {\n        Some(a as isize)\n    } else {\n        None\n    }",
    "    let a = r.pow(2) * (3.0 as f64).sqrt() / 4.0;\n    if a > 0.0 {\n        Some(a as isize)\n    } else {\n        None\n    }",
    "    let r = r as f64;\n    let h = r * (2.0f64).sqrt() / 2.0;\n    let a = r * h / 2.0;\n    if a.is_finite() {\n        Some(a as isize)\n    } else {\n        None\n    }",
    "    let a = r / 2;\n    let b = r / 2;\n    let c = (a.pow(2) + b.pow(2)).sqrt();\n\n    let s = (a + b + c) / 2;\n    let area = (s * (s - a) * (s - b) * (s - c)).sqrt();\n\n    if area.is_finite() {\n        Some(area as isize)\n    } else {\n        None\n    }",
    "    let a = r.pow(2) * 3.14159265358979323846264338327950288419716939937510582097494459230781640628620899862803482534211706798214808651328230664709384460955058223172535940812848111745028410270193852110555964462294895493038196442881097566593344612847564823378678316527120190914564856692346034861045432664821339360726024914127372458700660631558817488152092096282925409171536436789259036001133053054882046652138414695194151160943305727036575959195309218611738193261179310511854807446237996274956735188575272489122793818301194912983367336244065664308602139494639522473719070217986094370277053921717629317675238467481846766940513200056812714526356082778577134275778960917363717872146844090122495343014654958537105079227968925892354201995611212902196086403441815981362977477130996051870721134999999837297804995105973173281609631859502445945534690830264252230825334468503526193118817101000313783875288658753320838142061717766914730359825349042875546873115956286388235378759375195778185778053217122680661300192787661119590921642019893809525720106548586327886593615338182796823030195203530185296899577362259941389124972177528347913151557485724245415069595082953311686172785588907509838175463746493931925",
    "    let h = r * 2;\n    let w = (r * 2).sqrt();\n    let area = (h * w) / 2;\n    Some(area as isize)",
    "    unimplemented!()",
    "    let a = r.pow(2);\n    let b = (r / 2).pow(2);\n    let c = (r / 2).pow(2);\n    let s = (a + b + c) / 2;\n    let area = (s * (s - a) * (s - b) * (s - c)).sqrt();\n    if area.is_nan() {\n        None\n    } else {\n        Some(area as isize)\n    }",
    "    let a = r.pow(2) * (3 as f64).sqrt() / 4.0;\n    if a < 0.0 {\n        None\n    } else {\n        Some(a as isize)\n    }",
    "    let a = r.pow(2) * 3.14159265358979323846264338327950288419716939937510582097494459230781640628620899862803482534211706798214808651328230664709384460955058223172535940812848111745028410270193852110555964462294895493038196442881097566593344612847564823378678316527120190914564856692346034861045432664821339360726024914127372458700660631558817488152092096282925409171536436789259036001133053054882046652138414695194151160943305727036575959195309218611738193261179310511854807446237996274956735188575272489122793818301194912983367336244065664308602139494639522473719070217986094370277053921717629317675238467481846766940513200056812714526356082778577134275778960917363717872146844090122495343014654958537105079227968925892354201995611212902196086403441815981362977477130996051870721134999999837297804995105973173281609631859502445945534690830264252230825334468503526193118817101000313783875288658753320838142061717766914730359825349042875546873115956286388235378759375195778185778053217122680661300192787661119590921642019893809525720106548586327886593615338182796823030195203530185296899577362259941389124972177528347913151557485724245415069595082953311686172785588907509838175463746493931925",
    "    let a = r * 2;\n    let b = r * 2;\n    let c = (a.pow(2) + b.pow(2)).sqrt();\n    let s = (a + b + c) / 2;\n    let area = (s * (s - a) * (s - b) * (s - c)).sqrt();\n    if area.is_finite() {\n        Some(area.round() as isize)\n    } else {\n        None\n    }",
    "    let a = r / 2;\n    let b = (r * r - a * a).sqrt();\n    let c = r;\n    let s = (a + b + c) / 2;\n    let area = (s * (s - a) * (s - b) * (s - c)).sqrt();\n    if area.is_finite() {\n        Some(area as isize)\n    } else {\n        None\n    }",
    "    let a = r.pow(2) * (PI / 2.0).sin();\n    let b = r.pow(2) * (PI / 2.0).cos();\n    let c = (a.pow(2) + b.pow(2) - 2.0 * a * b * (PI / 2.0).cos()).sqrt();\n    let s = (a + b + c) / 2.0;\n    let area = (s * (s - a) * (s - b) * (s - c)).sqrt();\n    if area.is_finite() {\n        Some(area as isize)\n    } else {\n        None\n    }",
    "    unimplemented!()",
    "    unimplemented!()",
    "    unimplemented!()",
    "    let a = r as f64;\n    let b = a / 2.0;\n    let c = (a * a - b * b).sqrt();\n    let s = (a + b + c) / 2.0;\n    let area = (s * (s - a) * (s - b) * (s - c)).sqrt();\n    if area.is_finite() {\n        Some(area as isize)\n    } else {\n        None\n    }",
    "    let h = r * 2;\n    let a = (h * h) / 2;\n    let b = (r * r) / 2;\n    let c = a - b;\n    let s = (a + b + c) / 2;\n    let area = (s * (s - a) * (s - b) * (s - c)).sqrt() as isize;\n    Some(area)",
    "    unimplemented!()",
    "    let a = r as f64;\n    let b = a / 2.0;\n    let c = (a * a - b * b).sqrt();\n    let s = (a + b + c) / 2.0;\n    let area = (s * (s - a) * (s - b) * (s - c)).sqrt();\n    if area.is_finite() {\n        Some(area as isize)\n    } else {\n        None\n    }",
    "    let a = r.pow(2) * (3 as f64).sqrt() / 4.0;\n    if a.is_finite() {\n        Some(a as isize)\n    } else {\n        None\n    }",
    "    let a = r as f64;\n    let b = a / 2.0;\n    let c = a.sqrt();\n    let s = (a + b + c) / 2.0;\n    let area = (s * (s - a) * (s - b) * (s - c)).sqrt();\n    if area.is_finite() {\n        Some(area as isize)\n    } else {\n        None\n    }",
    "    let a = r / 2;\n    let b = r / 2;\n    let c = (r * r - a * a).sqrt() as isize;\n    let s = (a + b + c) / 2;\n    let area = (s * (s - a) * (s - b) * (s - c)).sqrt() as isize;\n    if area == 0 {\n        None\n    } else {\n        Some(area)\n    }",
    "    let a = r.pow(2) * (3 as f64).sqrt() / 4.0;\n    if a.is_finite() {\n        Some(a as isize)\n    } else {\n        None\n    }",
    "    let h = r * 2;\n    let a = h * h;\n    let b = r * r;\n    let c = (a - b) / 4;\n    let area = (c * h) / 2;\n    if area > 0 {\n        Some(area)\n    } else {\n        None\n    }",
    "    let s = r as f64;\n    let h = (s * s - (s / 2.0).powi(2)) as isize;\n    if h > 0 {\n        Some(h * r / 2)\n    } else {\n        None\n    }",
    "    let a = r * r * (3 as f64).sqrt() / 4.0;\n    if a.is_finite() {\n        Some(a as isize)\n    } else {\n        None\n    }",
    "    let a = r.pow(2) * (3 as f64).sqrt() / 4.0;\n    if a.is_finite() {\n        Some(a as isize)\n    } else {\n        None\n    }",
    "    unimplemented!()",
    "    let a = r.pow(2) * (3 as f64).sqrt() / 4.0;\n    if a.is_finite() {\n        Some(a as isize)\n    } else {\n        None\n    }",
    "    let a = r * 2;\n    let b = r * 2;\n    let c = (a.pow(2) + b.pow(2)).sqrt();\n    let s = (a + b + c) / 2;\n    let area = (s * (s - a) * (s - b) * (s - c)).sqrt();\n    if area.is_nan() {\n        None\n    } else {\n        Some(area as isize)\n    }",
    "    unimplemented!()",
    "    let a = r.pow(2) * (3 as f64).sqrt() / 4.0;\n    if a.is_finite() {\n        Some(a as isize)\n    } else {\n        None\n    }",
    "    let a = r / 2;\n    let b = r / 2;\n    let c = (a.pow(2) + b.pow(2)).sqrt();\n    let s = (a + b + c) / 2;\n    let area = (s * (s - a) * (s - b) * (s - c)).sqrt();\n    Some(area as isize)",
    "    let a = r.pow(2) * (3 as f64).sqrt() / 4.0;\n    if a.is_finite() {\n        Some(a as isize)\n    } else {\n        None\n    }",
    "    let a = r.pow(2) * (3 as f64).sqrt() / 4.0;\n    if a.is_finite() {\n        Some(a as isize)\n    } else {\n        None\n    }",
    "    let h = r * 2;\n    let a = (h * h) / 2;\n    if a > 0 {\n        Some(a)\n    } else {\n        None\n    }",
    "    let a = r as f64;\n    let b = a / 2.0;\n    let c = b;\n    let s = (a + b + c) / 2.0;\n    let area = (s * (s - a) * (s - b) * (s - c)).sqrt();\n    if area.is_finite() {\n        Some(area as isize)\n    } else {\n        None\n    }",
    "    let r = r as f64;\n    let a = r / 2.0;\n    let b = r / 2.0;\n    let c = (a.powi(2) + b.powi(2)).sqrt();\n    let s = (a + b + c) / 2.0;\n    let area = (s * (s - a) * (s - b) * (s - c)).sqrt();\n    if area.is_finite() {\n        Some(area as isize)\n    } else {\n        None\n    }",
    "    unimplemented!()",
    "    let a = r / 2;\n    let b = r;\n    let c = (a.pow(2) + b.pow(2)).sqrt();\n    let s = (a + b + c) / 2;\n    let area = (s * (s - a) * (s - b) * (s - c)).sqrt();\n    if area.is_finite() {\n        Some(area as isize)\n    } else {\n        None\n    }",
    "    let a = r / 2;\n    let b = r / 2;\n    let c = (r * r - a * a - b * b).sqrt() as isize;\n    if c > 0 {\n        let s = (a + b + c) / 2;\n        Some((s * (s - a) * (s - b) * (s - c)).sqrt() as isize)\n    } else {\n        None\n    }",
    "    unimplemented!()",
    "    let a = r / 2;\n    let b = r;\n    let c = (a.pow(2) + b.pow(2)).sqrt();\n    let s = (a + b + c) / 2;\n    let area = (s * (s - a) * (s - b) * (s - c)).sqrt();\n    if area.is_finite() {\n        Some(area as isize)\n    } else {\n        None\n    }",
    "    unimplemented!()",
    "    unimplemented!()",
    "    let h = r * 2;\n    let a = h * h;\n    let b = r * r;\n    let c = (a - b) / 2;\n    if c > 0 {\n        Some(c)\n    } else {\n        None\n    }",
    "    unimplemented!()",
    "    let a = r as f64;\n    let s = a * a * PI;\n    let h = 2.0 * a * (1.0 - (2.0f64).sqrt() / 2.0);\n    let area = s * h / 2.0;\n    Some(area as isize)",
    "    let a = r.pow(2) * (3 as f64).sqrt() / 4.0;\n    if a.is_finite() {\n        Some(a as isize)\n    } else {\n        None\n    }",
    "    let h = r * 2;\n    let w = (h * h - r * r).sqrt() as isize;\n    Some(w * h / 2)",
    "    let a = r.pow(2) * (PI as isize).pow(2) / 4;\n    let b = (PI as isize) * r / 2;\n    let c = (PI as isize) * r;\n    let s = (a + b + c) / 2;\n    let area = (s * (s - a) * (s - b) * (s - c)).sqrt();\n    if area.is_nan() {\n        None\n    } else {\n        Some(area as isize)\n    }",
    "    let a = r * 2;\n    let b = r * 2;\n    let c = (a.pow(2) + b.pow(2)).sqrt();\n    let s = (a + b + c) / 2;\n    let area = (s * (s - a) * (s - b) * (s - c)).sqrt();\n    if area.is_finite() {\n        Some(area as isize)\n    } else {\n        None\n    }",
    "    let h = r * 2;\n    let w = r * 2;\n    let a = h * w / 2;\n    Some(a)",
    "    let a = r.pow(2) * (3 as f64).sqrt() / 4.0;\n    if a.is_finite() {\n        Some(a as isize)\n    } else {\n        None\n    }",
    "    let a = r / 2;\n    let b = r / 2;\n    let c = (r * r - a * a).sqrt() as isize;\n    let s = (a + b + c) / 2;\n    let area = (s * (s - a) * (s - b) * (s - c)).sqrt() as isize;\n    if area == 0 {\n        None\n    } else {\n        Some(area)\n    }",
    "    let a = r.pow(2) * (3 as f64).sqrt() / 4.0;\n    let b = a.floor() as isize;\n    if a == b as f64 {\n        Some(b)\n    } else {\n        None\n    }"
  ]
}