{
  "name": "mbpp_113_check_integer",
  "language": "rs",
  "prompt": "/// Write a function to check if a string represents an integer or not.\nfn check_integer(text: String) -> bool {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_113_check_integer.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\nfn main() {\n    let candidate = check_integer;\n    assert_eq!(candidate(String::from(\"python\")), false);\n    assert_eq!(candidate(String::from(\"1\")), true);\n    assert_eq!(candidate(String::from(\"12345\")), true);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    text.parse::<i32>().is_ok()",
    "    let mut chars = text.chars();\n    let mut first_char = chars.next();\n    if first_char == Some('-') || first_char == Some('+') {\n        first_char = chars.next();\n    }\n    if first_char.is_none() {\n        return false;\n    }\n    for c in chars {\n        if !c.is_digit(10) {\n            return false;\n        }\n    }\n    return true;",
    "    let mut chars = text.chars();\n    let mut is_integer = false;\n    let mut is_negative = false;\n\n    if let Some(c) = chars.next() {\n        if c == '-' {\n            is_negative = true;\n        } else if c.is_digit(10) {\n            is_integer = true;\n        } else {\n            return false;\n        }\n    }\n\n    for c in chars {\n        if !c.is_digit(10) {\n            return false;\n        }\n    }\n\n    if is_negative && text.len() == 1 {\n        return false;\n    }\n\n    is_integer",
    "    let mut chars = text.chars();\n    let mut is_integer = false;\n    let mut is_negative = false;\n    let mut is_positive = false;\n    let mut has_decimal = false;\n    let mut has_exponent = false;\n    let mut has_exponent_sign = false;\n    let mut has_exponent_value = false;\n    let mut has_exponent_decimal = false;\n    let mut has_exponent_decimal_value = false;\n\n    while let Some(c) = chars.next() {\n        match c {\n            '-' => {\n                if is_negative || is_positive || has_decimal || has_exponent {\n                    return false;\n                }\n                is_negative = true;\n            }\n            '+' => {\n                if is_negative || is_positive || has_decimal || has_exponent {\n                    return false;\n                }\n                is_positive = true;\n            }\n            '.' => {\n                if has_decimal || has_exponent {\n                    return false;\n                }\n                has_decimal = true;\n            }\n            'e' => {\n                if has_exponent {\n                    return false;\n                }\n                has_exponent = true;\n            }\n            '-' | '+' => {\n                if has_exponent_sign || has_exponent_value || has_exponent_decimal {\n                    return false;\n                }\n                has_exponent_sign = true;\n            }\n            '.' => {\n                if has_exponent_decimal || has_exponent_decimal_value {\n                    return false;\n                }\n                has_exponent_decimal = true;\n            }\n            '0'..='9' => {\n                if has_exponent {\n                    if has_exponent_decimal {\n                        has_exponent_decimal_value = true;\n                    } else {\n                        has_exponent_value = true;\n                    }\n                } else {\n                    is_integer = true;\n                }\n            }\n            _ => return false,\n        }\n    }\n\n    if has_",
    "    let mut chars = text.chars();\n    if chars.next().unwrap() == '-' {\n        chars.next();\n    }\n    chars.all(|c| c.is_digit(10))",
    "    let mut is_integer = true;\n    let mut is_negative = false;\n    let mut is_positive = false;\n    let mut is_decimal = false;\n    let mut is_exponent = false;\n    let mut is_exponent_sign = false;\n    let mut is_exponent_number = false;\n    let mut is_exponent_decimal = false;\n    let mut is_exponent_decimal_number = false;\n    let mut is_exponent_decimal_number_after = false;\n    let mut is_exponent_decimal_number_after_number = false;\n    let mut is_exponent_decimal_number_after_decimal = false;\n    let mut is_exponent_decimal_number_after_decimal_number = false;\n    let mut is_exponent_decimal_number_after_decimal_number_after = false;\n    let mut is_exponent_decimal_number_after_decimal_number_after_number = false;\n    let mut is_exponent_decimal_number_after_decimal_number_after_decimal = false;\n    let mut is_exponent_decimal_number_after_decimal_number_after_decimal_number = false;\n    let mut is_exponent_decimal_number_after_decimal_number_after_decimal_number_after = false;\n    let mut is_exponent_decimal_number_after_decimal_number_after_decimal_number_after_number = false;\n    let mut is_exponent_decimal_number_after_decimal_number_after_decimal_number_after_decimal = false;\n    let mut is_exponent_decimal_number_after_decimal_number_after_decimal_number_after_decimal_number = false;\n    let mut is_exponent_decimal_number_after_decimal_number_after_decimal_number_after_decimal_number_after = false;\n    let mut is_exponent_decimal_number_after_decimal_number_after_decimal_number_after_decimal_number_",
    "    let mut chars = text.chars();\n    let mut first = chars.next();\n    if first == Some('-') {\n        first = chars.next();\n    }\n    if first == Some('0') {\n        return chars.next().is_none();\n    }\n    if first.is_none() {\n        return false;\n    }\n    for c in chars {\n        if !c.is_digit(10) {\n            return false;\n        }\n    }\n    true",
    "    text.parse::<i32>().is_ok()",
    "    let mut chars = text.chars();\n    let mut first = chars.next();\n    if first == Some('-') {\n        first = chars.next();\n    }\n    if first == None {\n        return false;\n    }\n    for c in chars {\n        if !c.is_digit(10) {\n            return false;\n        }\n    }\n    true",
    "    let mut chars = text.chars();\n    let mut first = chars.next();\n    if first == Some('-') {\n        first = chars.next();\n    }\n    if first == None {\n        return false;\n    }\n    for c in chars {\n        if !c.is_digit(10) {\n            return false;\n        }\n    }\n    true",
    "    let mut chars = text.chars();\n    let first_char = chars.next();\n    match first_char {\n        Some(c) => {\n            if c == '-' || c == '+' {\n                chars.all(|c| c.is_digit(10))\n            } else {\n                first_char.unwrap().is_digit(10) && chars.all(|c| c.is_digit(10))\n            }\n        }\n        None => false,\n    }",
    "    let mut chars = text.chars();\n    let mut is_integer = true;\n\n    if let Some(c) = chars.next() {\n        if c == '-' {\n            if let Some(c) = chars.next() {\n                if c.is_digit(10) {\n                    for c in chars {\n                        if !c.is_digit(10) {\n                            is_integer = false;\n                            break;\n                        }\n                    }\n                } else {\n                    is_integer = false;\n                }\n            } else {\n                is_integer = false;\n            }\n        } else if c.is_digit(10) {\n            for c in chars {\n                if !c.is_digit(10) {\n                    is_integer = false;\n                    break;\n                }\n            }\n        } else {\n            is_integer = false;\n        }\n    } else {\n        is_integer = false;\n    }\n\n    is_integer",
    "    let mut chars = text.chars();\n    let mut first_char = chars.next();\n    if first_char == Some('-') || first_char == Some('+') {\n        first_char = chars.next();\n    }\n    if first_char == None {\n        return false;\n    }\n    for c in chars {\n        if !c.is_digit(10) {\n            return false;\n        }\n    }\n    true",
    "    let mut chars = text.chars();\n    if let Some(c) = chars.next() {\n        if c == '-' {\n            if let Some(c) = chars.next() {\n                if c.is_digit(10) {\n                    for c in chars {\n                        if !c.is_digit(10) {\n                            return false;\n                        }\n                    }\n                    return true;\n                }\n            }\n        } else if c.is_digit(10) {\n            for c in chars {\n                if !c.is_digit(10) {\n                    return false;\n                }\n            }\n            return true;\n        }\n    }\n    false",
    "    let mut chars = text.chars();\n    let mut is_integer = true;\n    let mut has_sign = false;\n    let mut has_digit = false;\n\n    while let Some(c) = chars.next() {\n        if c == '-' || c == '+' {\n            if has_sign || has_digit {\n                is_integer = false;\n                break;\n            } else {\n                has_sign = true;\n            }\n        } else if c.is_digit(10) {\n            has_digit = true;\n        } else {\n            is_integer = false;\n            break;\n        }\n    }\n\n    is_integer",
    "    let mut chars = text.chars();\n    let mut is_integer = true;\n\n    if let Some(c) = chars.next() {\n        if c == '-' {\n            if let Some(c) = chars.next() {\n                if !c.is_digit(10) {\n                    is_integer = false;\n                }\n            } else {\n                is_integer = false;\n            }\n        } else if !c.is_digit(10) {\n            is_integer = false;\n        }\n    } else {\n        is_integer = false;\n    }\n\n    while let Some(c) = chars.next() {\n        if !c.is_digit(10) {\n            is_integer = false;\n            break;\n        }\n    }\n\n    is_integer",
    "    let mut chars = text.chars();\n    let mut is_integer = true;\n    let mut is_negative = false;\n    let mut is_started = false;\n    while let Some(c) = chars.next() {\n        if c == '-' {\n            if is_started {\n                is_integer = false;\n                break;\n            }\n            is_negative = true;\n            is_started = true;\n        } else if c.is_digit(10) {\n            is_started = true;\n        } else {\n            is_integer = false;\n            break;\n        }\n    }\n    is_integer && is_started && !is_negative",
    "    let mut chars = text.chars();\n    let mut first = chars.next();\n    if first == Some('-') {\n        first = chars.next();\n    }\n    if first == None {\n        return false;\n    }\n    for c in chars {\n        if !c.is_digit(10) {\n            return false;\n        }\n    }\n    true",
    "    let mut chars = text.chars();\n    let mut first = chars.next();\n    if first == Some('-') {\n        first = chars.next();\n    }\n    if first == None {\n        return false;\n    }\n    while let Some(c) = first {\n        if !c.is_digit(10) {\n            return false;\n        }\n        first = chars.next();\n    }\n    true",
    "    let mut chars = text.chars();\n    match chars.next() {\n        None => false,\n        Some(c) => {\n            if c == '-' {\n                match chars.next() {\n                    None => false,\n                    Some(c) => c.is_digit(10),\n                }\n            } else {\n                c.is_digit(10)\n            }\n        }\n    }"
  ]
}