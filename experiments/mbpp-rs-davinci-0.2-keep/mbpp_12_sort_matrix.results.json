{
  "name": "mbpp_12_sort_matrix",
  "language": "rs",
  "prompt": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_12_sort_matrix.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by_key(|row| row.iter().sum());\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "error[E0282]: type annotations needed\n --> /tmp/tmpchjn8_xt.rs:4:7\n  |\n4 |     M.sort_by_key(|row| row.iter().sum());\n  |       ^^^^^^^^^^^ cannot infer type for type parameter `K` declared on the associated function `sort_by_key`\n  |\nhelp: consider specifying the type argument in the method call\n  |\n4 |     M.sort_by_key(|row| row.iter().sum::<S>());\n  |                                       +++++\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0282`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| {\n        let a_sum: isize = a.iter().sum();\n        let b_sum: isize = b.iter().sum();\n        a_sum.cmp(&b_sum)\n    });\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510441,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by_key(|row| row.iter().sum());\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "error[E0282]: type annotations needed\n --> /tmp/tmpchjn8_xt.rs:4:7\n  |\n4 |     M.sort_by_key(|row| row.iter().sum());\n  |       ^^^^^^^^^^^ cannot infer type for type parameter `K` declared on the associated function `sort_by_key`\n  |\nhelp: consider specifying the type argument in the method call\n  |\n4 |     M.sort_by_key(|row| row.iter().sum::<S>());\n  |                                       +++++\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0282`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut sorted = M.clone();\n    sorted.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    sorted\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510441,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by_key(|row| row.iter().sum::<isize>());\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by_key(|row| row.iter().sum::<isize>());\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by_key(|row| row.iter().sum::<isize>());\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by_key(|row| row.iter().sum());\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "error[E0282]: type annotations needed\n --> /tmp/tmpchjn8_xt.rs:4:7\n  |\n4 |     M.sort_by_key(|row| row.iter().sum());\n  |       ^^^^^^^^^^^ cannot infer type for type parameter `K` declared on the associated function `sort_by_key`\n  |\nhelp: consider specifying the type argument in the method call\n  |\n4 |     M.sort_by_key(|row| row.iter().sum::<S>());\n  |                                       +++++\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0282`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by_key(|row| row.iter().sum::<isize>());\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| {\n        let a_sum: isize = a.iter().sum();\n        let b_sum: isize = b.iter().sum();\n        a_sum.cmp(&b_sum)\n    });\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510441,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by_key(|r| r.iter().sum());\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1666123522,
      "stdout": "",
      "stderr": "error[E0282]: type annotations needed\n --> /tmp/tmpdte8uwvf.rs:4:7\n  |\n4 |     M.sort_by_key(|r| r.iter().sum());\n  |       ^^^^^^^^^^^ cannot infer type for type parameter `K` declared on the associated function `sort_by_key`\n  |\nhelp: consider specifying the type argument in the method call\n  |\n4 |     M.sort_by_key(|r| r.iter().sum::<S>());\n  |                                   +++++\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0282`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| {\n        let a_sum: isize = a.iter().sum();\n        let b_sum: isize = b.iter().sum();\n        a_sum.cmp(&b_sum)\n    });\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510441,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by_key(|row| row.iter().sum::<isize>());\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by_key(|r| r.iter().sum::<isize>());\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1666123521,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by_key(|row| row.iter().sum());\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "error[E0282]: type annotations needed\n --> /tmp/tmpchjn8_xt.rs:4:7\n  |\n4 |     M.sort_by_key(|row| row.iter().sum());\n  |       ^^^^^^^^^^^ cannot infer type for type parameter `K` declared on the associated function `sort_by_key`\n  |\nhelp: consider specifying the type argument in the method call\n  |\n4 |     M.sort_by_key(|row| row.iter().sum::<S>());\n  |                                       +++++\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0282`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| {\n        let a_sum: isize = a.iter().sum();\n        let b_sum: isize = b.iter().sum();\n        a_sum.cmp(&b_sum)\n    });\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510441,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by_key(|row| row.iter().sum::<isize>());\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| {\n        let a_sum: isize = a.iter().sum();\n        let b_sum: isize = b.iter().sum();\n        a_sum.cmp(&b_sum)\n    });\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510441,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| {\n        let a_sum: isize = a.iter().sum();\n        let b_sum: isize = b.iter().sum();\n        a_sum.cmp(&b_sum)\n    });\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510441,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    let mut sums = vec![];\n    for row in M.iter() {\n        let mut sum = 0;\n        for &x in row.iter() {\n            sum += x;\n        }\n        sums.push(sum);\n    }\n    for i in 0..M.len() {\n        for j in i..M.len() {\n            if sums[i] > sums[j] {\n                sums.swap(i, j);\n                M.swap(i, j);\n            }\n        }\n    }\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1666123522,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by_key(|row| row.iter().sum::<isize>());\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| {\n        let a_sum: isize = a.iter().sum();\n        let b_sum: isize = b.iter().sum();\n        a_sum.cmp(&b_sum)\n    });\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510441,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by_key(|x| x.iter().sum::<isize>());\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1666123522,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    let mut sums: Vec<(usize, isize)> = M.iter().enumerate().map(|(i, row)| (i, row.iter().sum())).collect();\n    sums.sort_by(|(_, a), (_, b)| a.cmp(b));\n    let mut sorted_matrix = vec![];\n    for (i, _) in sums {\n        sorted_matrix.push(M.remove(i));\n    }\n    sorted_matrix\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1666123522,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'removal index (is 1) should be < len (is 1)', /tmp/tmpwbecouzr.rs:8:30\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by_key(|x| x.iter().sum::<isize>());\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1666123522,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by_key(|row| row.iter().sum());\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "error[E0282]: type annotations needed\n --> /tmp/tmpchjn8_xt.rs:4:7\n  |\n4 |     M.sort_by_key(|row| row.iter().sum());\n  |       ^^^^^^^^^^^ cannot infer type for type parameter `K` declared on the associated function `sort_by_key`\n  |\nhelp: consider specifying the type argument in the method call\n  |\n4 |     M.sort_by_key(|row| row.iter().sum::<S>());\n  |                                       +++++\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0282`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by_key(|row| row.iter().sum::<isize>());\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by_key(|row| row.iter().sum::<isize>());\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| {\n        let a_sum: isize = a.iter().sum();\n        let b_sum: isize = b.iter().sum();\n        a_sum.cmp(&b_sum)\n    });\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510441,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by_key(|row| row.iter().sum::<isize>());\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    let mut sums = M.iter().map(|row| row.iter().sum()).collect::<Vec<isize>>();\n    M.sort_by(|a, b| sums[M.iter().position(|r| r == a).unwrap()].cmp(&sums[M.iter().position(|r| r == b).unwrap()]));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1666123522,
      "stdout": "",
      "stderr": "warning: variable does not need to be mutable\n --> /tmp/tmpf14245c6.rs:4:9\n  |\n4 |     let mut sums = M.iter().map(|row| row.iter().sum()).collect::<Vec<isize>>();\n  |         ----^^^^\n  |         |\n  |         help: remove this `mut`\n  |\n  = note: `#[warn(unused_mut)]` on by default\n\nerror[E0502]: cannot borrow `M` as immutable because it is also borrowed as mutable\n --> /tmp/tmpf14245c6.rs:5:15\n  |\n5 |     M.sort_by(|a, b| sums[M.iter().position(|r| r == a).unwrap()].cmp(&sums[M.iter().position(|r| r == b).unwrap()]));\n  |     ----------^^^^^^-------------------------------------------------------------------------------------------------\n  |     | |       |           |\n  |     | |       |           second borrow occurs due to use of `M` in closure\n  |     | |       immutable borrow occurs here\n  |     | mutable borrow later used by call\n  |     mutable borrow occurs here\n\nerror: aborting due to previous error; 1 warning emitted\n\nFor more information about this error, try `rustc --explain E0502`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| {\n        let a_sum: isize = a.iter().sum();\n        let b_sum: isize = b.iter().sum();\n        a_sum.cmp(&b_sum)\n    });\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510441,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| {\n        let a_sum: isize = a.iter().sum();\n        let b_sum: isize = b.iter().sum();\n        a_sum.cmp(&b_sum)\n    });\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510441,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by_key(|row| row.iter().sum::<isize>());\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| {\n        let a_sum: isize = a.iter().sum();\n        let b_sum: isize = b.iter().sum();\n        a_sum.cmp(&b_sum)\n    });\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510441,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    let n = M.len();\n    let m = M[0].len();\n    let mut sums = vec![0; n];\n    for i in 0..n {\n        for j in 0..m {\n            sums[i] += M[i][j];\n        }\n    }\n    for i in 0..n {\n        for j in i..n {\n            if sums[i] > sums[j] {\n                sums.swap(i, j);\n                M.swap(i, j);\n            }\n        }\n    }\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1666123522,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by_key(|row| row.iter().sum::<isize>());\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by_key(|row| row.iter().sum::<isize>());\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by_key(|row| row.iter().sum());\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "error[E0282]: type annotations needed\n --> /tmp/tmpchjn8_xt.rs:4:7\n  |\n4 |     M.sort_by_key(|row| row.iter().sum());\n  |       ^^^^^^^^^^^ cannot infer type for type parameter `K` declared on the associated function `sort_by_key`\n  |\nhelp: consider specifying the type argument in the method call\n  |\n4 |     M.sort_by_key(|row| row.iter().sum::<S>());\n  |                                       +++++\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0282`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by_key(|row| row.iter().sum());\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "error[E0282]: type annotations needed\n --> /tmp/tmpchjn8_xt.rs:4:7\n  |\n4 |     M.sort_by_key(|row| row.iter().sum());\n  |       ^^^^^^^^^^^ cannot infer type for type parameter `K` declared on the associated function `sort_by_key`\n  |\nhelp: consider specifying the type argument in the method call\n  |\n4 |     M.sort_by_key(|row| row.iter().sum::<S>());\n  |                                       +++++\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0282`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by_key(|row| row.iter().sum());\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "error[E0282]: type annotations needed\n --> /tmp/tmpchjn8_xt.rs:4:7\n  |\n4 |     M.sort_by_key(|row| row.iter().sum());\n  |       ^^^^^^^^^^^ cannot infer type for type parameter `K` declared on the associated function `sort_by_key`\n  |\nhelp: consider specifying the type argument in the method call\n  |\n4 |     M.sort_by_key(|row| row.iter().sum::<S>());\n  |                                       +++++\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0282`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by_key(|row| row.iter().sum::<isize>());\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfn sort_matrix(M: Vec<Vec<isize>>) -> Vec<Vec<isize>> {\n    let mut M = M;\n    M.sort_by(|a, b| a.iter().sum::<isize>().cmp(&b.iter().sum::<isize>()));\n    M\n}\n\nfn main() {\n    let candidate = sort_matrix;\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![2, 4, 5], vec![1, 1, 1]]), vec![vec![1, 1, 1], vec![1, 2, 3], vec![2, 4, 5]]);\n    assert_eq!(candidate(vec![vec![1, 2, 3], vec![-2, 4, -5], vec![1, -1, 1]]), vec![vec![-2, 4, -5], vec![1, -1, 1], vec![1, 2, 3]]);\n    assert_eq!(candidate(vec![vec![5, 8, 9], vec![6, 4, 3], vec![2, 1, 4]]), vec![vec![2, 1, 4], vec![6, 4, 3], vec![5, 8, 9]]);\n}\n",
      "timestamp": 1665510440,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}