{
  "name": "mbpp_564_count_Pairs",
  "language": "rs",
  "prompt": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_564_count_Pairs.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count: isize = 0;\n    for i in 0..n {\n        for j in i+1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp008cepve.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp008cepve.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i+1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmpnly5i2u2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmpnly5i2u2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i+1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmpnly5i2u2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmpnly5i2u2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i+1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmpnly5i2u2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmpnly5i2u2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i as usize] != arr[j as usize] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1666122665,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count: isize = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1666122664,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmpwbg453wb.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmpwbg453wb.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i+1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmpnly5i2u2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmpnly5i2u2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in 0..n {\n            if arr[i as usize] != arr[j as usize] {\n                count += 1;\n            }\n        }\n    }\n    count / 2\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1666122665,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in 0..n {\n            if i != j && arr[i as usize] != arr[j as usize] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1666122665,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `2`', /tmp/tmpv5hpa9fq.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i+1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmpnly5i2u2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmpnly5i2u2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in 0..n {\n            if i != j && arr[i as usize] != arr[j as usize] {\n                count += 1;\n            }\n        }\n    }\n    count / 2\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1666122665,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i+1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmpnly5i2u2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmpnly5i2u2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i+1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmpnly5i2u2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmpnly5i2u2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i+1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmpnly5i2u2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmpnly5i2u2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i+1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmpnly5i2u2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmpnly5i2u2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in 0..n {\n            if i != j && arr[i as usize] != arr[j as usize] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1666122665,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `2`', /tmp/tmpv5hpa9fq.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut c = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                c += 1;\n            }\n        }\n    }\n    c\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1666122664,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmpqlg1e1ou.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmpqlg1e1ou.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in 0..n {\n            if i != j && arr[i as usize] != arr[j as usize] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1666122665,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `2`', /tmp/tmpv5hpa9fq.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in 0..n {\n            if i != j && arr[i as usize] != arr[j as usize] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1666122665,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `2`', /tmp/tmpv5hpa9fq.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count: isize = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1666122664,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmpwbg453wb.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmpwbg453wb.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in 0..n {\n            if arr[i as usize] != arr[j as usize] {\n                count += 1;\n            }\n        }\n    }\n    return count / 2;\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1666122665,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    // Write your code here\n    let mut count = 0;\n    for i in 0..n {\n        for j in i+1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1666122664,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmpx61qzmzx.rs:7:16\n  |\n7 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmpx61qzmzx.rs:7:26\n  |\n7 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in 0..n {\n            if arr[i as usize] != arr[j as usize] {\n                count += 1;\n            }\n        }\n    }\n    count / 2\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1666122665,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in 0..n {\n            if i != j && arr[i as usize] != arr[j as usize] {\n                count += 1;\n            }\n        }\n    }\n    count / 2\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1666122665,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    return count;\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1666122664,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp_w3x0df5.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp_w3x0df5.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i+1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmpnly5i2u2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmpnly5i2u2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count: isize = 0;\n    for i in 0..n {\n        for j in 0..n {\n            if arr[i as usize] != arr[j as usize] {\n                count += 1;\n            }\n        }\n    }\n    count / 2\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1666122665,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i+1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmpnly5i2u2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmpnly5i2u2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count: isize = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1666122664,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmpwbg453wb.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmpwbg453wb.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i+1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmpnly5i2u2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmpnly5i2u2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count: isize = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1666122664,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmpwbg453wb.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmpwbg453wb.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count: isize = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1666122664,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmpwbg453wb.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmpwbg453wb.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i+1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmpnly5i2u2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmpnly5i2u2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count: isize = 0;\n    for i in 0..n {\n        for j in 0..n {\n            if i != j && arr[i as usize] != arr[j as usize] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1666122665,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `4`,\n right: `2`', /tmp/tmpls705_8c.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nfn count_Pairs(arr: Vec<isize>, n: isize) -> isize {\n    let mut count = 0;\n    for i in 0..n {\n        for j in i + 1..n {\n            if arr[i] != arr[j] {\n                count += 1;\n            }\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate = count_Pairs;\n    assert_eq!(candidate(vec![1, 2, 1], 3), 2);\n    assert_eq!(candidate(vec![1, 1, 1, 1], 4), 0);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5], 5), 10);\n}\n",
      "timestamp": 1665510009,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:16\n  |\n6 |             if arr[i] != arr[j] {\n  |                ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp1z91ira2.rs:6:26\n  |\n6 |             if arr[i] != arr[j] {\n  |                          ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}