{
  "name": "mbpp_282_sub_list",
  "language": "rs",
  "prompt": "/// Write a function to subtract two lists element-wise.\nfn sub_list(nums1: Vec<isize>, nums2: Vec<isize>) -> Vec<isize> {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_282_sub_list.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\nfn main() {\n    let candidate = sub_list;\n    assert_eq!(candidate(vec![1, 2, 3], vec![4, 5, 6]), vec![-3, -3, -3]);\n    assert_eq!(candidate(vec![1, 2], vec![3, 4]), vec![-2, -2]);\n    assert_eq!(candidate(vec![90, 120], vec![50, 70]), vec![40, 50]);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    let mut result = Vec::new();\n    for i in 0..nums1.len() {\n        result.push(nums1[i] - nums2[i]);\n    }\n    result",
    "    nums1.iter().zip(nums2.iter()).map(|(x, y)| x - y).collect()",
    "    let mut result = Vec::new();\n    for (x, y) in nums1.iter().zip(nums2.iter()) {\n        result.push(x - y);\n    }\n    result",
    "    let mut result = Vec::new();\n    for (a, b) in nums1.iter().zip(nums2.iter()) {\n        result.push(a - b);\n    }\n    result",
    "    nums1.iter().zip(nums2.iter()).map(|(x, y)| x - y).collect()",
    "    nums1.iter().zip(nums2).map(|(x, y)| x - y).collect()",
    "    let mut result = Vec::new();\n    for (x, y) in nums1.iter().zip(nums2.iter()) {\n        result.push(x - y);\n    }\n    result",
    "    let mut result = Vec::new();\n    for (i, j) in nums1.iter().zip(nums2.iter()) {\n        result.push(i - j);\n    }\n    result",
    "    let mut result = vec![];\n    for i in 0..nums1.len() {\n        result.push(nums1[i] - nums2[i]);\n    }\n    result",
    "    let mut result = Vec::new();\n    for i in 0..nums1.len() {\n        result.push(nums1[i] - nums2[i]);\n    }\n    result",
    "    nums1.iter().zip(nums2).map(|(x, y)| x - y).collect()",
    "    nums1.iter().zip(nums2).map(|(x, y)| x - y).collect()",
    "    nums1.iter().zip(nums2.iter()).map(|(x, y)| x - y).collect()",
    "    let mut result = Vec::new();\n    for i in 0..nums1.len() {\n        result.push(nums1[i] - nums2[i]);\n    }\n    result",
    "    let mut result = Vec::new();\n    for i in 0..nums1.len() {\n        result.push(nums1[i] - nums2[i]);\n    }\n    result",
    "    let mut result = Vec::new();\n    for i in 0..nums1.len() {\n        result.push(nums1[i] - nums2[i]);\n    }\n    result",
    "    nums1.iter().zip(nums2.iter()).map(|(x, y)| x - y).collect()",
    "    nums1.iter().zip(nums2.iter()).map(|(x, y)| x - y).collect()",
    "    nums1.iter().zip(nums2.iter()).map(|(a, b)| a - b).collect()",
    "    nums1.iter().zip(nums2.iter()).map(|(x, y)| x - y).collect()",
    "    nums1.iter().zip(nums2.iter()).map(|(x, y)| x - y).collect()",
    "    let mut result = Vec::new();\n    for (i, j) in nums1.iter().zip(nums2.iter()) {\n        result.push(i - j);\n    }\n    result",
    "    nums1.iter().zip(nums2.iter()).map(|(a, b)| a - b).collect()",
    "    let mut result = Vec::new();\n    for (i, j) in nums1.iter().zip(nums2.iter()) {\n        result.push(i - j);\n    }\n    result",
    "    let mut result = Vec::new();\n    for (i, j) in nums1.iter().zip(nums2.iter()) {\n        result.push(i - j);\n    }\n    result",
    "    nums1.iter().zip(nums2.iter()).map(|(x, y)| x - y).collect()",
    "    let mut result = Vec::new();\n    for i in 0..nums1.len() {\n        result.push(nums1[i] - nums2[i]);\n    }\n    result",
    "    let mut result = Vec::new();\n    for (n1, n2) in nums1.iter().zip(nums2.iter()) {\n        result.push(n1 - n2);\n    }\n    result",
    "    nums1.iter().zip(nums2).map(|(a, b)| a - b).collect()",
    "    nums1.iter().zip(nums2.iter()).map(|(x, y)| x - y).collect()",
    "    nums1.iter().zip(nums2.iter()).map(|(x, y)| x - y).collect()",
    "    let mut result = Vec::new();\n    for (x, y) in nums1.iter().zip(nums2.iter()) {\n        result.push(x - y);\n    }\n    result",
    "    let mut result = Vec::new();\n    for (i, j) in nums1.iter().zip(nums2.iter()) {\n        result.push(i - j);\n    }\n    result",
    "    nums1.iter().zip(nums2.iter()).map(|(a, b)| a - b).collect()",
    "    let mut result = Vec::new();\n    for (x, y) in nums1.iter().zip(nums2.iter()) {\n        result.push(x - y);\n    }\n    result",
    "    let mut result = Vec::new();\n    for i in 0..nums1.len() {\n        result.push(nums1[i] - nums2[i]);\n    }\n    result",
    "    nums1.iter().zip(nums2.iter()).map(|(a, b)| a - b).collect()",
    "    nums1.iter().zip(nums2.iter()).map(|(a, b)| a - b).collect()",
    "    let mut res = Vec::new();\n    for (i, j) in nums1.iter().zip(nums2.iter()) {\n        res.push(i - j);\n    }\n    res",
    "    let mut result = Vec::new();\n    for (a, b) in nums1.iter().zip(nums2.iter()) {\n        result.push(a - b);\n    }\n    result",
    "    nums1.iter().zip(nums2.iter()).map(|(a, b)| a - b).collect()",
    "    nums1.iter().zip(nums2.iter()).map(|(x, y)| x - y).collect()",
    "    let mut result = Vec::new();\n    for i in 0..nums1.len() {\n        result.push(nums1[i] - nums2[i]);\n    }\n    result",
    "    nums1.iter().zip(nums2.iter()).map(|(x, y)| x - y).collect()",
    "    nums1.iter().zip(nums2.iter()).map(|(x, y)| x - y).collect()",
    "    nums1.iter().zip(nums2.iter()).map(|(x, y)| x - y).collect()",
    "    let mut result = Vec::new();\n    for (x, y) in nums1.iter().zip(nums2.iter()) {\n        result.push(x - y);\n    }\n    result",
    "    nums1.iter().zip(nums2.iter()).map(|(x, y)| x - y).collect()",
    "    let mut result = Vec::new();\n    for i in 0..nums1.len() {\n        result.push(nums1[i] - nums2[i]);\n    }\n    result",
    "    nums1.iter().zip(nums2.iter()).map(|(x, y)| x - y).collect()",
    "    nums1.iter().zip(nums2.iter()).map(|(x, y)| x - y).collect()",
    "    let mut result = Vec::new();\n    for i in 0..nums1.len() {\n        result.push(nums1[i] - nums2[i]);\n    }\n    result",
    "    let mut result = Vec::new();\n    for i in 0..nums1.len() {\n        result.push(nums1[i] - nums2[i]);\n    }\n    result",
    "    nums1.iter().zip(nums2.iter()).map(|(x, y)| x - y).collect()",
    "    nums1.iter().zip(nums2.iter()).map(|(x, y)| x - y).collect()",
    "    nums1.iter().zip(nums2).map(|(x, y)| x - y).collect()",
    "    let mut result = Vec::new();\n    for (x, y) in nums1.iter().zip(nums2.iter()) {\n        result.push(x - y);\n    }\n    result",
    "    nums1.iter().zip(nums2.iter()).map(|(x, y)| x - y).collect()",
    "    nums1.iter().zip(nums2).map(|(x, y)| x - y).collect()",
    "    nums1.iter().zip(nums2.iter()).map(|(x, y)| x - y).collect()",
    "    let mut result = Vec::new();\n    for (x, y) in nums1.iter().zip(nums2.iter()) {\n        result.push(x - y);\n    }\n    result",
    "    nums1.iter().zip(nums2.iter()).map(|(x, y)| x - y).collect()",
    "    nums1.into_iter().zip(nums2).map(|(x, y)| x - y).collect()",
    "    nums1.iter().zip(nums2).map(|(x, y)| x - y).collect()",
    "    nums1.iter().zip(nums2.iter()).map(|(a, b)| a - b).collect()",
    "    let mut result = Vec::new();\n    for (i, j) in nums1.iter().zip(nums2.iter()) {\n        result.push(i - j);\n    }\n    result",
    "    nums1.iter().zip(nums2.iter()).map(|(x, y)| x - y).collect()",
    "    let mut result = Vec::new();\n    for (a, b) in nums1.iter().zip(nums2.iter()) {\n        result.push(a - b);\n    }\n    result",
    "    nums1.iter().zip(nums2).map(|(a, b)| a - b).collect()",
    "    let mut result = Vec::new();\n    for i in 0..nums1.len() {\n        result.push(nums1[i] - nums2[i]);\n    }\n    result",
    "    let mut result = Vec::new();\n    for i in 0..nums1.len() {\n        result.push(nums1[i] - nums2[i]);\n    }\n    result",
    "    nums1.iter().zip(nums2).map(|(x, y)| x - y).collect()",
    "    nums1.iter().zip(nums2).map(|(a, b)| a - b).collect()",
    "    nums1.iter().zip(nums2.iter()).map(|(x, y)| x - y).collect()",
    "    nums1.iter().zip(nums2.iter()).map(|(x, y)| x - y).collect()",
    "    nums1.iter().zip(nums2.iter()).map(|(x, y)| x - y).collect()",
    "    let mut result = Vec::new();\n    for i in 0..nums1.len() {\n        result.push(nums1[i] - nums2[i]);\n    }\n    result",
    "    let mut result = Vec::new();\n    for i in 0..nums1.len() {\n        result.push(nums1[i] - nums2[i]);\n    }\n    result",
    "    nums1.iter().zip(nums2).map(|(a, b)| a - b).collect()",
    "    nums1.iter().zip(nums2.iter()).map(|(x, y)| x - y).collect()",
    "    let mut result = Vec::new();\n    for i in 0..nums1.len() {\n        result.push(nums1[i] - nums2[i]);\n    }\n    result",
    "    let mut result = Vec::new();\n    for i in 0..nums1.len() {\n        result.push(nums1[i] - nums2[i]);\n    }\n    result",
    "    let mut result = Vec::new();\n    for (i, j) in nums1.iter().zip(nums2.iter()) {\n        result.push(i - j);\n    }\n    result",
    "    let mut result = Vec::new();\n    for i in 0..nums1.len() {\n        result.push(nums1[i] - nums2[i]);\n    }\n    result",
    "    nums1.iter().zip(nums2.iter()).map(|(a, b)| a - b).collect()",
    "    let mut result = Vec::new();\n    for i in 0..nums1.len() {\n        result.push(nums1[i] - nums2[i]);\n    }\n    result",
    "    let mut result = Vec::new();\n    for i in 0..nums1.len() {\n        result.push(nums1[i] - nums2[i]);\n    }\n    result",
    "    nums1.iter().zip(nums2.iter()).map(|(x, y)| x - y).collect()",
    "    let mut ret = Vec::new();\n    for (i, j) in nums1.iter().zip(nums2.iter()) {\n        ret.push(i - j);\n    }\n    ret",
    "    nums1.iter().zip(nums2.iter()).map(|(x, y)| x - y).collect()",
    "    let mut result = Vec::new();\n    for i in 0..nums1.len() {\n        result.push(nums1[i] - nums2[i]);\n    }\n    result",
    "    let mut res = Vec::new();\n    for i in 0..nums1.len() {\n        res.push(nums1[i] - nums2[i]);\n    }\n    res",
    "    let mut result = Vec::new();\n    for (a, b) in nums1.iter().zip(nums2.iter()) {\n        result.push(a - b);\n    }\n    result",
    "    nums1.iter().zip(nums2.iter()).map(|(x, y)| x - y).collect()",
    "    nums1.iter().zip(nums2.iter()).map(|(x, y)| x - y).collect()",
    "    let mut result = Vec::new();\n    for (i, j) in nums1.iter().zip(nums2.iter()) {\n        result.push(i - j);\n    }\n    result",
    "    nums1.iter().zip(nums2).map(|(a, b)| a - b).collect()",
    "    let mut result = Vec::new();\n    for i in 0..nums1.len() {\n        result.push(nums1[i] - nums2[i]);\n    }\n    result",
    "    nums1.iter().zip(nums2.iter()).map(|(a, b)| a - b).collect()",
    "    let mut result = Vec::new();\n    for i in 0..nums1.len() {\n        result.push(nums1[i] - nums2[i]);\n    }\n    result",
    "    let mut result = Vec::new();\n    for (x, y) in nums1.iter().zip(nums2.iter()) {\n        result.push(x - y);\n    }\n    result",
    "    let mut res = Vec::new();\n    for i in 0..nums1.len() {\n        res.push(nums1[i] - nums2[i]);\n    }\n    res",
    "    nums1.iter().zip(nums2.iter()).map(|(a, b)| a - b).collect()",
    "    let mut nums1 = nums1;\n    let mut nums2 = nums2;\n    let mut res = Vec::new();\n    while !nums1.is_empty() && !nums2.is_empty() {\n        let n1 = nums1.pop().unwrap();\n        let n2 = nums2.pop().unwrap();\n        res.push(n1 - n2);\n    }\n    res.reverse();\n    res",
    "    nums1.iter().zip(nums2).map(|(a, b)| a - b).collect()",
    "    nums1.iter().zip(nums2.iter()).map(|(a, b)| a - b).collect()",
    "    let mut result = Vec::new();\n    for i in 0..nums1.len() {\n        result.push(nums1[i] - nums2[i]);\n    }\n    result",
    "    nums1.iter().zip(nums2.iter()).map(|(a, b)| a - b).collect()",
    "    nums1.iter().zip(nums2.iter()).map(|(a, b)| a - b).collect()",
    "    let mut res = Vec::new();\n    for (i, j) in nums1.iter().zip(nums2.iter()) {\n        res.push(i - j);\n    }\n    res",
    "    nums1.iter().zip(nums2.iter()).map(|(x, y)| x - y).collect()",
    "    let mut result = Vec::new();\n    for i in 0..nums1.len() {\n        result.push(nums1[i] - nums2[i]);\n    }\n    result",
    "    nums1.iter().zip(nums2).map(|(x, y)| x - y).collect()",
    "    let mut res = Vec::new();\n    for (i, j) in nums1.iter().zip(nums2.iter()) {\n        res.push(i - j);\n    }\n    res",
    "    let mut result = Vec::new();\n    for i in 0..nums1.len() {\n        result.push(nums1[i] - nums2[i]);\n    }\n    result",
    "    let mut result = Vec::new();\n    for i in 0..nums1.len() {\n        result.push(nums1[i] - nums2[i]);\n    }\n    result",
    "    let mut result = Vec::new();\n    for (i, j) in nums1.iter().zip(nums2.iter()) {\n        result.push(i - j);\n    }\n    result",
    "    let mut result = Vec::new();\n    for (a, b) in nums1.iter().zip(nums2.iter()) {\n        result.push(a - b);\n    }\n    result",
    "    nums1.iter().zip(nums2.iter()).map(|(x, y)| x - y).collect()",
    "    let mut result = Vec::new();\n    for (x, y) in nums1.iter().zip(nums2.iter()) {\n        result.push(x - y);\n    }\n    result",
    "    nums1.iter().zip(nums2.iter()).map(|(x, y)| x - y).collect()",
    "    let mut result = Vec::new();\n    for i in 0..nums1.len() {\n        result.push(nums1[i] - nums2[i]);\n    }\n    result",
    "    let mut result = Vec::new();\n    for (i, j) in nums1.iter().zip(nums2.iter()) {\n        result.push(i - j);\n    }\n    result",
    "    nums1.iter().zip(nums2.iter()).map(|(x, y)| x - y).collect()",
    "    let mut result = Vec::new();\n    for (i, j) in nums1.iter().zip(nums2.iter()) {\n        result.push(i - j);\n    }\n    result",
    "    nums1.iter().zip(nums2).map(|(x, y)| x - y).collect()",
    "    nums1.into_iter().zip(nums2.into_iter()).map(|(x, y)| x - y).collect()",
    "    let mut result = Vec::new();\n    for i in 0..nums1.len() {\n        result.push(nums1[i] - nums2[i]);\n    }\n    result",
    "    let mut result = Vec::new();\n    for (x, y) in nums1.iter().zip(nums2.iter()) {\n        result.push(x - y);\n    }\n    result",
    "    let mut res = Vec::new();\n    for (i, j) in nums1.iter().zip(nums2.iter()) {\n        res.push(i - j);\n    }\n    res",
    "    let mut result = Vec::new();\n    for i in 0..nums1.len() {\n        result.push(nums1[i] - nums2[i]);\n    }\n    result",
    "    let mut result = Vec::new();\n    for (a, b) in nums1.iter().zip(nums2.iter()) {\n        result.push(a - b);\n    }\n    result",
    "    let mut result = Vec::new();\n    for (x, y) in nums1.iter().zip(nums2.iter()) {\n        result.push(x - y);\n    }\n    result",
    "    nums1.iter().zip(nums2.iter()).map(|(x, y)| x - y).collect()",
    "    nums1.iter().zip(nums2).map(|(a, b)| a - b).collect()",
    "    nums1.iter().zip(nums2.iter()).map(|(a, b)| a - b).collect()",
    "    let mut result = Vec::new();\n    for i in 0..nums1.len() {\n        result.push(nums1[i] - nums2[i]);\n    }\n    result",
    "    let mut result = Vec::new();\n    for (a, b) in nums1.iter().zip(nums2.iter()) {\n        result.push(a - b);\n    }\n    result",
    "    let mut result = Vec::new();\n    for (i, j) in nums1.iter().zip(nums2.iter()) {\n        result.push(i - j);\n    }\n    result",
    "    nums1.into_iter().zip(nums2).map(|(a, b)| a - b).collect()",
    "    nums1.iter().zip(nums2.iter()).map(|(x, y)| x - y).collect()",
    "    nums1.iter().zip(nums2.iter()).map(|(x, y)| x - y).collect()",
    "    nums1.iter().zip(nums2.iter()).map(|(a, b)| a - b).collect()",
    "    let mut result = Vec::new();\n    for (i, j) in nums1.iter().zip(nums2.iter()) {\n        result.push(i - j);\n    }\n    result",
    "    nums1.iter().zip(nums2).map(|(a, b)| a - b).collect()",
    "    nums1.iter().zip(nums2).map(|(a, b)| a - b).collect()",
    "    let mut result = Vec::new();\n    for (i, j) in nums1.iter().zip(nums2.iter()) {\n        result.push(i - j);\n    }\n    result",
    "    nums1.iter().zip(nums2.iter()).map(|(x, y)| x - y).collect()",
    "    let mut result = Vec::new();\n    for (i, j) in nums1.iter().zip(nums2.iter()) {\n        result.push(i - j);\n    }\n    result",
    "    let mut result = Vec::new();\n    for (i, j) in nums1.iter().zip(nums2.iter()) {\n        result.push(i - j);\n    }\n    result",
    "    nums1.iter().zip(nums2.iter()).map(|(x, y)| x - y).collect()",
    "    let mut res = Vec::new();\n    for (i, j) in nums1.iter().zip(nums2.iter()) {\n        res.push(i - j);\n    }\n    res",
    "    nums1.iter().zip(nums2.iter()).map(|(x, y)| x - y).collect()",
    "    nums1.iter().zip(nums2.iter()).map(|(x, y)| x - y).collect()",
    "    let mut result = Vec::new();\n    for i in 0..nums1.len() {\n        result.push(nums1[i] - nums2[i]);\n    }\n    result",
    "    let mut result = Vec::new();\n    for (a, b) in nums1.iter().zip(nums2.iter()) {\n        result.push(a - b);\n    }\n    result",
    "    let mut result = Vec::new();\n    for (i, j) in nums1.iter().zip(nums2.iter()) {\n        result.push(i - j);\n    }\n    result",
    "    nums1.iter().zip(nums2.iter()).map(|(x, y)| x - y).collect()",
    "    let mut result = Vec::new();\n    for (a, b) in nums1.iter().zip(nums2.iter()) {\n        result.push(a - b);\n    }\n    result",
    "    nums1.iter().zip(nums2).map(|(x, y)| x - y).collect()",
    "    nums1.iter().zip(nums2.iter()).map(|(x, y)| x - y).collect()",
    "    let mut result = Vec::new();\n    for (i, j) in nums1.iter().zip(nums2.iter()) {\n        result.push(i - j);\n    }\n    result",
    "    nums1.iter().zip(nums2.iter()).map(|(x, y)| x - y).collect()",
    "    let mut result = Vec::new();\n    for i in 0..nums1.len() {\n        result.push(nums1[i] - nums2[i]);\n    }\n    result",
    "    nums1.into_iter().zip(nums2.into_iter()).map(|(x, y)| x - y).collect()",
    "    let mut result = Vec::new();\n    for (i, j) in nums1.iter().zip(nums2.iter()) {\n        result.push(i - j);\n    }\n    result",
    "    let mut result: Vec<isize> = Vec::new();\n    for (i, j) in nums1.iter().zip(nums2.iter()) {\n        result.push(i - j);\n    }\n    result",
    "    nums1.into_iter().zip(nums2).map(|(a, b)| a - b).collect()",
    "    let mut result = Vec::new();\n    for i in 0..nums1.len() {\n        result.push(nums1[i] - nums2[i]);\n    }\n    result",
    "    nums1.iter().zip(nums2.iter()).map(|(a, b)| a - b).collect()",
    "    let mut result = Vec::new();\n    for i in 0..nums1.len() {\n        result.push(nums1[i] - nums2[i]);\n    }\n    result",
    "    let mut result = Vec::new();\n    for (i, j) in nums1.iter().zip(nums2.iter()) {\n        result.push(i - j);\n    }\n    result",
    "    let mut res = Vec::new();\n    for (i, j) in nums1.iter().zip(nums2.iter()) {\n        res.push(i - j);\n    }\n    res",
    "    nums1.iter().zip(nums2.iter()).map(|(a, b)| a - b).collect()",
    "    let mut result = Vec::new();\n    for i in 0..nums1.len() {\n        result.push(nums1[i] - nums2[i]);\n    }\n    result",
    "    let mut result = Vec::new();\n    for (x, y) in nums1.iter().zip(nums2.iter()) {\n        result.push(x - y);\n    }\n    result",
    "    nums1.iter().zip(nums2).map(|(x, y)| x - y).collect()",
    "    let mut result = Vec::new();\n    for (i, j) in nums1.iter().zip(nums2.iter()) {\n        result.push(i - j);\n    }\n    result",
    "    let mut res = Vec::new();\n    for i in 0..nums1.len() {\n        res.push(nums1[i] - nums2[i]);\n    }\n    res",
    "    nums1.iter().zip(nums2.iter()).map(|(a, b)| a - b).collect()",
    "    let mut res = Vec::new();\n    for i in 0..nums1.len() {\n        res.push(nums1[i] - nums2[i]);\n    }\n    res",
    "    let mut result = Vec::new();\n    for (i, j) in nums1.iter().zip(nums2.iter()) {\n        result.push(i - j);\n    }\n    result",
    "    let mut result = Vec::new();\n    for (a, b) in nums1.iter().zip(nums2.iter()) {\n        result.push(a - b);\n    }\n    result",
    "    nums1.iter().zip(nums2).map(|(x, y)| x - y).collect()",
    "    nums1.iter().zip(nums2.iter()).map(|(a, b)| a - b).collect()",
    "    nums1.iter().zip(nums2.iter()).map(|(x, y)| x - y).collect()",
    "    let mut result = Vec::new();\n    for (i, j) in nums1.iter().zip(nums2.iter()) {\n        result.push(i - j);\n    }\n    result",
    "    nums1.iter().zip(nums2.iter()).map(|(x, y)| x - y).collect()",
    "    let mut result = Vec::new();\n    for (a, b) in nums1.iter().zip(nums2.iter()) {\n        result.push(a - b);\n    }\n    result",
    "    nums1.iter().zip(nums2.iter()).map(|(a, b)| a - b).collect()",
    "    nums1.iter().zip(nums2.iter()).map(|(x, y)| x - y).collect()",
    "    let mut result = Vec::new();\n    for (i, j) in nums1.iter().zip(nums2.iter()) {\n        result.push(i - j);\n    }\n    result",
    "    nums1.iter().zip(nums2).map(|(a, b)| a - b).collect()",
    "    nums1.iter().zip(nums2.iter()).map(|(x, y)| x - y).collect()",
    "    let mut result = Vec::new();\n    for (i, j) in nums1.iter().zip(nums2.iter()) {\n        result.push(i - j);\n    }\n    result",
    "    let mut result = Vec::new();\n    for i in 0..nums1.len() {\n        result.push(nums1[i] - nums2[i]);\n    }\n    result",
    "    let mut result = Vec::new();\n    for i in 0..nums1.len() {\n        result.push(nums1[i] - nums2[i]);\n    }\n    result",
    "    let mut result = Vec::new();\n    for (x, y) in nums1.iter().zip(nums2.iter()) {\n        result.push(x - y);\n    }\n    result",
    "    nums1.iter().zip(nums2.iter()).map(|(x, y)| x - y).collect()",
    "    nums1.iter().zip(nums2.iter()).map(|(x, y)| x - y).collect()"
  ]
}