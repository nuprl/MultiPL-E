{
  "name": "mbpp_751_check_min_heap",
  "language": "rs",
  "prompt": "/// Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nfn check_min_heap(arr: Vec<isize>) -> bool {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_751_check_min_heap.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\nfn main() {\n    let candidate = check_min_heap;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6]), true);\n    assert_eq!(candidate(vec![2, 3, 4, 5, 10, 15]), true);\n    assert_eq!(candidate(vec![2, 10, 4, 5, 3, 15]), false);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    let mut i = 0;\n    let n = arr.len();\n\n    while i < n {\n        let left = 2 * i + 1;\n        let right = 2 * i + 2;\n\n        if left < n && arr[left] < arr[i] {\n            return false;\n        }\n\n        if right < n && arr[right] < arr[i] {\n            return false;\n        }\n\n        i += 1;\n    }\n\n    true",
    "    let mut i = 0;\n    let n = arr.len();\n\n    while i < n {\n        let left = 2 * i + 1;\n        let right = 2 * i + 2;\n\n        if left < n && arr[left] < arr[i] {\n            return false;\n        }\n\n        if right < n && arr[right] < arr[i] {\n            return false;\n        }\n\n        i += 1;\n    }\n\n    true",
    "    let mut i = 0;\n    while i < arr.len() {\n        let left = 2 * i + 1;\n        let right = 2 * i + 2;\n        if left < arr.len() && arr[i] > arr[left] {\n            return false;\n        }\n        if right < arr.len() && arr[i] > arr[right] {\n            return false;\n        }\n        i += 1;\n    }\n    true",
    "    let mut i = 0;\n    let mut left = 2 * i + 1;\n    let mut right = 2 * i + 2;\n    let mut is_min_heap = true;\n\n    while left < arr.len() && is_min_heap {\n        if arr[i] > arr[left] {\n            is_min_heap = false;\n        }\n        i += 1;\n        left = 2 * i + 1;\n        right = 2 * i + 2;\n    }\n\n    is_min_heap",
    "    let mut i = 0;\n    let mut n = arr.len();\n    while i < n {\n        let left = 2 * i + 1;\n        let right = 2 * i + 2;\n        if left < n && arr[i] > arr[left] {\n            return false;\n        }\n        if right < n && arr[i] > arr[right] {\n            return false;\n        }\n        i += 1;\n    }\n    true",
    "    let mut i = 0;\n    let len = arr.len();\n    while i < len {\n        if 2 * i + 1 < len && arr[i] > arr[2 * i + 1] {\n            return false;\n        }\n        if 2 * i + 2 < len && arr[i] > arr[2 * i + 2] {\n            return false;\n        }\n        i += 1;\n    }\n    true",
    "    for i in 0..arr.len() {\n        let left = 2 * i + 1;\n        let right = 2 * i + 2;\n        if left < arr.len() && arr[i] > arr[left] {\n            return false;\n        }\n        if right < arr.len() && arr[i] > arr[right] {\n            return false;\n        }\n    }\n    true",
    "    let n = arr.len();\n    for i in 0..n {\n        if 2 * i + 1 < n && arr[i] > arr[2 * i + 1] {\n            return false;\n        }\n        if 2 * i + 2 < n && arr[i] > arr[2 * i + 2] {\n            return false;\n        }\n    }\n    true",
    "    let mut i = 0;\n    let n = arr.len();\n    while i < n {\n        let left = 2 * i + 1;\n        let right = 2 * i + 2;\n        if left < n && arr[i] > arr[left] {\n            return false;\n        }\n        if right < n && arr[i] > arr[right] {\n            return false;\n        }\n        i += 1;\n    }\n    true",
    "    let mut i = 0;\n    let mut n = arr.len();\n    while i < n {\n        let left = 2 * i + 1;\n        let right = 2 * i + 2;\n        if left < n && arr[i] > arr[left] {\n            return false;\n        }\n        if right < n && arr[i] > arr[right] {\n            return false;\n        }\n        i += 1;\n    }\n    true",
    "    let mut i = 0;\n    let mut n = arr.len();\n    while i < n {\n        let left = 2 * i + 1;\n        let right = 2 * i + 2;\n        if left < n && arr[left] < arr[i] {\n            return false;\n        }\n        if right < n && arr[right] < arr[i] {\n            return false;\n        }\n        i += 1;\n    }\n    true",
    "    let mut i = 0;\n    let mut n = arr.len();\n    while i < n {\n        let left = 2 * i + 1;\n        let right = 2 * i + 2;\n        if left < n && arr[i] > arr[left] {\n            return false;\n        }\n        if right < n && arr[i] > arr[right] {\n            return false;\n        }\n        i += 1;\n    }\n    true",
    "    let mut i = 0;\n    let mut j = 1;\n    let mut k = 2;\n    let mut is_heap = true;\n    while i < arr.len() {\n        if j < arr.len() && arr[i] > arr[j] {\n            is_heap = false;\n            break;\n        }\n        if k < arr.len() && arr[i] > arr[k] {\n            is_heap = false;\n            break;\n        }\n        i += 1;\n        j = 2 * i + 1;\n        k = 2 * i + 2;\n    }\n    is_heap",
    "    let mut i = 0;\n    let n = arr.len();\n    while i < n {\n        let left = 2 * i + 1;\n        let right = 2 * i + 2;\n        if left < n && arr[left] < arr[i] {\n            return false;\n        }\n        if right < n && arr[right] < arr[i] {\n            return false;\n        }\n        i += 1;\n    }\n    true",
    "    let mut i = 0;\n    let n = arr.len();\n    while i < n {\n        let left = 2 * i + 1;\n        let right = 2 * i + 2;\n        if left < n && arr[i] > arr[left] {\n            return false;\n        }\n        if right < n && arr[i] > arr[right] {\n            return false;\n        }\n        i += 1;\n    }\n    true",
    "    let mut i = 0;\n    let mut n = arr.len();\n    while i < n {\n        let left = 2 * i + 1;\n        let right = 2 * i + 2;\n        if left < n && arr[i] > arr[left] {\n            return false;\n        }\n        if right < n && arr[i] > arr[right] {\n            return false;\n        }\n        i += 1;\n    }\n    true",
    "    let mut i = 0;\n    let n = arr.len() as isize;\n    while i < n {\n        let left = 2 * i + 1;\n        let right = 2 * i + 2;\n        if left < n && arr[left as usize] < arr[i as usize] {\n            return false;\n        }\n        if right < n && arr[right as usize] < arr[i as usize] {\n            return false;\n        }\n        i += 1;\n    }\n    true",
    "    let mut i = 0;\n    let n = arr.len();\n    while i < n {\n        let left_child = 2 * i + 1;\n        let right_child = 2 * i + 2;\n        if left_child < n && arr[i] > arr[left_child] {\n            return false;\n        }\n        if right_child < n && arr[i] > arr[right_child] {\n            return false;\n        }\n        i += 1;\n    }\n    true",
    "    let mut i = 0;\n    let mut n = arr.len();\n    while i < n {\n        let left = 2 * i + 1;\n        let right = 2 * i + 2;\n        if left < n && arr[left] < arr[i] {\n            return false;\n        }\n        if right < n && arr[right] < arr[i] {\n            return false;\n        }\n        i += 1;\n    }\n    true",
    "    let mut is_min_heap = true;\n    let mut i = 0;\n    while i < arr.len() {\n        let left = 2 * i + 1;\n        let right = 2 * i + 2;\n        if left < arr.len() && arr[i] > arr[left] {\n            is_min_heap = false;\n            break;\n        }\n        if right < arr.len() && arr[i] > arr[right] {\n            is_min_heap = false;\n            break;\n        }\n        i += 1;\n    }\n    is_min_heap"
  ]
}