{
  "name": "mbpp_164_are_equivalent",
  "language": "rs",
  "prompt": "/// Write a function to determine if the sum of the divisors of two integers are the same.\nfn are_equivalent(num1: isize, num2: isize) -> bool {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_164_are_equivalent.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\nfn main() {\n    let candidate = are_equivalent;\n    assert_eq!(candidate(36, 57), false);\n    assert_eq!(candidate(2, 4), false);\n    assert_eq!(candidate(23, 47), true);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    let sum1 = sum_divisors(num1);\n    let sum2 = sum_divisors(num2);\n    sum1 == sum2",
    "    let sum1 = sum_divisors(num1);\n    let sum2 = sum_divisors(num2);\n    sum1 == sum2",
    "    let sum1 = sum_divisors(num1);\n    let sum2 = sum_divisors(num2);\n    sum1 == sum2",
    "    sum_divisors(num1) == sum_divisors(num2)",
    "    let sum1 = sum_divisors(num1);\n    let sum2 = sum_divisors(num2);\n    sum1 == sum2",
    "    let sum1 = sum_divisors(num1);\n    let sum2 = sum_divisors(num2);\n    sum1 == sum2",
    "    let sum_divisors1 = sum_divisors(num1);\n    let sum_divisors2 = sum_divisors(num2);\n    sum_divisors1 == sum_divisors2",
    "    let divisors1 = get_divisors(num1);\n    let divisors2 = get_divisors(num2);\n\n    divisors1.iter().sum::<isize>() == divisors2.iter().sum::<isize>()",
    "    let sum1 = sum_divisors(num1);\n    let sum2 = sum_divisors(num2);\n    sum1 == sum2",
    "    let divisors1 = get_divisors(num1);\n    let divisors2 = get_divisors(num2);\n    divisors1.iter().sum::<isize>() == divisors2.iter().sum::<isize>()",
    "    let sum1 = sum_of_divisors(num1);\n    let sum2 = sum_of_divisors(num2);\n    sum1 == sum2",
    "    let divisors1 = get_divisors(num1);\n    let divisors2 = get_divisors(num2);\n    let sum1 = divisors1.iter().fold(0, |acc, &x| acc + x);\n    let sum2 = divisors2.iter().fold(0, |acc, &x| acc + x);\n    sum1 == sum2",
    "    let sum1 = sum_divisors(num1);\n    let sum2 = sum_divisors(num2);\n    sum1 == sum2",
    "    let sum1 = sum_divisors(num1);\n    let sum2 = sum_divisors(num2);\n    sum1 == sum2",
    "    let divisors1 = divisors(num1);\n    let divisors2 = divisors(num2);\n\n    divisors1 == divisors2",
    "    sum_divisors(num1) == sum_divisors(num2)",
    "    let sum1 = sum_divisors(num1);\n    let sum2 = sum_divisors(num2);\n    sum1 == sum2",
    "    let sum_divisors1 = sum_divisors(num1);\n    let sum_divisors2 = sum_divisors(num2);\n    sum_divisors1 == sum_divisors2",
    "    let sum1 = sum_divisors(num1);\n    let sum2 = sum_divisors(num2);\n    sum1 == sum2",
    "    sum_divisors(num1) == sum_divisors(num2)",
    "    let sum1 = sum_divisors(num1);\n    let sum2 = sum_divisors(num2);\n    sum1 == sum2",
    "    let divisors1 = divisors(num1);\n    let divisors2 = divisors(num2);\n\n    divisors1.iter().sum::<isize>() == divisors2.iter().sum::<isize>()",
    "    let sum1 = sum_divisors(num1);\n    let sum2 = sum_divisors(num2);\n    sum1 == sum2",
    "    let divisors1 = get_divisors(num1);\n    let divisors2 = get_divisors(num2);\n\n    divisors1.iter().sum::<isize>() == divisors2.iter().sum::<isize>()",
    "    let sum1 = sum_divisors(num1);\n    let sum2 = sum_divisors(num2);\n    sum1 == sum2",
    "    let divisors1 = get_divisors(num1);\n    let divisors2 = get_divisors(num2);\n    let sum1 = divisors1.iter().fold(0, |sum, x| sum + x);\n    let sum2 = divisors2.iter().fold(0, |sum, x| sum + x);\n    sum1 == sum2",
    "    let sum1 = sum_divisors(num1);\n    let sum2 = sum_divisors(num2);\n    sum1 == sum2",
    "    let sum1 = sum_divisors(num1);\n    let sum2 = sum_divisors(num2);\n    sum1 == sum2",
    "    let sum1 = sum_divisors(num1);\n    let sum2 = sum_divisors(num2);\n    sum1 == sum2",
    "    let divisors1 = divisors(num1);\n    let divisors2 = divisors(num2);\n    divisors1.iter().sum::<isize>() == divisors2.iter().sum::<isize>()",
    "    let sum1 = sum_of_divisors(num1);\n    let sum2 = sum_of_divisors(num2);\n    sum1 == sum2",
    "    let sum1 = sum_divisors(num1);\n    let sum2 = sum_divisors(num2);\n    sum1 == sum2",
    "    let sum1 = sum_of_divisors(num1);\n    let sum2 = sum_of_divisors(num2);\n    sum1 == sum2",
    "    let sum1 = sum_divisors(num1);\n    let sum2 = sum_divisors(num2);\n    sum1 == sum2",
    "    let sum1 = sum_divisors(num1);\n    let sum2 = sum_divisors(num2);\n    sum1 == sum2",
    "    let divisors1 = get_divisors(num1);\n    let divisors2 = get_divisors(num2);\n    divisors1.iter().sum::<isize>() == divisors2.iter().sum::<isize>()",
    "    let sum1 = sum_divisors(num1);\n    let sum2 = sum_divisors(num2);\n    sum1 == sum2",
    "    let divisors1 = get_divisors(num1);\n    let divisors2 = get_divisors(num2);\n    divisors1.iter().sum::<isize>() == divisors2.iter().sum::<isize>()",
    "    let divisors1 = get_divisors(num1);\n    let divisors2 = get_divisors(num2);\n    divisors1.iter().sum::<isize>() == divisors2.iter().sum::<isize>()",
    "    let sum1 = sum_divisors(num1);\n    let sum2 = sum_divisors(num2);\n    sum1 == sum2",
    "    let sum1 = sum_divisors(num1);\n    let sum2 = sum_divisors(num2);\n    sum1 == sum2",
    "    let sum1 = sum_divisors(num1);\n    let sum2 = sum_divisors(num2);\n    sum1 == sum2",
    "    let sum1 = sum_divisors(num1);\n    let sum2 = sum_divisors(num2);\n    sum1 == sum2",
    "    let sum1 = sum_divisors(num1);\n    let sum2 = sum_divisors(num2);\n    sum1 == sum2",
    "    let divisors1 = get_divisors(num1);\n    let divisors2 = get_divisors(num2);\n\n    divisors1.iter().sum::<isize>() == divisors2.iter().sum::<isize>()",
    "    let divisors1 = divisors(num1);\n    let divisors2 = divisors(num2);\n    divisors1.iter().sum::<isize>() == divisors2.iter().sum::<isize>()",
    "    let divisors1 = divisors(num1);\n    let divisors2 = divisors(num2);\n    divisors1.iter().sum::<isize>() == divisors2.iter().sum::<isize>()",
    "    let sum1 = sum_divisors(num1);\n    let sum2 = sum_divisors(num2);\n    sum1 == sum2",
    "    let sum1 = sum_divisors(num1);\n    let sum2 = sum_divisors(num2);\n    sum1 == sum2",
    "    let sum1 = sum_divisors(num1);\n    let sum2 = sum_divisors(num2);\n    sum1 == sum2",
    "    let sum1 = sum_of_divisors(num1);\n    let sum2 = sum_of_divisors(num2);\n    sum1 == sum2",
    "    let sum1 = sum_divisors(num1);\n    let sum2 = sum_divisors(num2);\n    sum1 == sum2",
    "    let sum1 = sum_divisors(num1);\n    let sum2 = sum_divisors(num2);\n    sum1 == sum2",
    "    let sum_divisors1 = sum_divisors(num1);\n    let sum_divisors2 = sum_divisors(num2);\n    sum_divisors1 == sum_divisors2",
    "    let sum1 = sum_divisors(num1);\n    let sum2 = sum_divisors(num2);\n    sum1 == sum2",
    "    let sum1 = sum_divisors(num1);\n    let sum2 = sum_divisors(num2);\n    sum1 == sum2",
    "    let sum1 = sum_divisors(num1);\n    let sum2 = sum_divisors(num2);\n    sum1 == sum2",
    "    let sum1 = sum_divisors(num1);\n    let sum2 = sum_divisors(num2);\n    sum1 == sum2",
    "    let divisors1 = get_divisors(num1);\n    let divisors2 = get_divisors(num2);\n    let sum1 = divisors1.iter().sum();\n    let sum2 = divisors2.iter().sum();\n    sum1 == sum2",
    "    let sum1 = sum_divisors(num1);\n    let sum2 = sum_divisors(num2);\n    sum1 == sum2",
    "    let sum1 = sum_divisors(num1);\n    let sum2 = sum_divisors(num2);\n    sum1 == sum2",
    "    let sum1 = sum_divisors(num1);\n    let sum2 = sum_divisors(num2);\n    sum1 == sum2",
    "    let sum1 = sum_divisors(num1);\n    let sum2 = sum_divisors(num2);\n    sum1 == sum2",
    "    let sum1 = sum_divisors(num1);\n    let sum2 = sum_divisors(num2);\n    sum1 == sum2",
    "    let sum1 = sum_divisors(num1);\n    let sum2 = sum_divisors(num2);\n    sum1 == sum2",
    "    let sum1 = sum_divisors(num1);\n    let sum2 = sum_divisors(num2);\n    sum1 == sum2",
    "    let sum1 = sum_of_divisors(num1);\n    let sum2 = sum_of_divisors(num2);\n    sum1 == sum2",
    "    let divisors1 = get_divisors(num1);\n    let divisors2 = get_divisors(num2);\n    divisors1.iter().sum::<isize>() == divisors2.iter().sum::<isize>()",
    "    let divisors1 = get_divisors(num1);\n    let divisors2 = get_divisors(num2);\n\n    divisors1.iter().sum::<isize>() == divisors2.iter().sum::<isize>()",
    "    let sum1 = sum_divisors(num1);\n    let sum2 = sum_divisors(num2);\n    sum1 == sum2",
    "    let sum1 = sum_divisors(num1);\n    let sum2 = sum_divisors(num2);\n    sum1 == sum2",
    "    let divisors1 = get_divisors(num1);\n    let divisors2 = get_divisors(num2);\n\n    let sum1 = divisors1.iter().fold(0, |acc, x| acc + x);\n    let sum2 = divisors2.iter().fold(0, |acc, x| acc + x);\n\n    sum1 == sum2",
    "    let divisors1 = divisors(num1);\n    let divisors2 = divisors(num2);\n    divisors1.iter().sum::<isize>() == divisors2.iter().sum::<isize>()",
    "    let divisors1 = get_divisors(num1);\n    let divisors2 = get_divisors(num2);\n    let sum1 = divisors1.iter().fold(0, |acc, x| acc + x);\n    let sum2 = divisors2.iter().fold(0, |acc, x| acc + x);\n    sum1 == sum2",
    "    let sum1 = sum_divisors(num1);\n    let sum2 = sum_divisors(num2);\n    sum1 == sum2",
    "    let sum1 = sum_of_divisors(num1);\n    let sum2 = sum_of_divisors(num2);\n    sum1 == sum2",
    "    let sum1 = sum_divisors(num1);\n    let sum2 = sum_divisors(num2);\n    sum1 == sum2",
    "    let sum1 = sum_divisors(num1);\n    let sum2 = sum_divisors(num2);\n    sum1 == sum2",
    "    let divisors1 = get_divisors(num1);\n    let divisors2 = get_divisors(num2);\n    divisors1.iter().sum::<isize>() == divisors2.iter().sum::<isize>()",
    "    let sum1 = sum_divisors(num1);\n    let sum2 = sum_divisors(num2);\n    sum1 == sum2",
    "    let divisors1 = divisors(num1);\n    let divisors2 = divisors(num2);\n    divisors1.iter().sum::<isize>() == divisors2.iter().sum::<isize>()",
    "    let divisors1 = divisors(num1);\n    let divisors2 = divisors(num2);\n\n    divisors1.iter().sum::<isize>() == divisors2.iter().sum::<isize>()",
    "    let sum1 = sum_of_divisors(num1);\n    let sum2 = sum_of_divisors(num2);\n    sum1 == sum2",
    "    let sum1 = sum_divisors(num1);\n    let sum2 = sum_divisors(num2);\n    sum1 == sum2",
    "    let sum1 = sum_divisors(num1);\n    let sum2 = sum_divisors(num2);\n    sum1 == sum2",
    "    let divisors1 = divisors(num1);\n    let divisors2 = divisors(num2);\n    divisors1.iter().sum::<isize>() == divisors2.iter().sum::<isize>()",
    "    let sum1 = sum_divisors(num1);\n    let sum2 = sum_divisors(num2);\n    sum1 == sum2",
    "    let sum1 = sum_divisors(num1);\n    let sum2 = sum_divisors(num2);\n    sum1 == sum2",
    "    let divisors1 = get_divisors(num1);\n    let divisors2 = get_divisors(num2);\n    let sum1 = divisors1.iter().sum();\n    let sum2 = divisors2.iter().sum();\n    sum1 == sum2",
    "    let sum1 = sum_divisors(num1);\n    let sum2 = sum_divisors(num2);\n    sum1 == sum2",
    "    let divisors1 = divisors(num1);\n    let divisors2 = divisors(num2);\n    divisors1.iter().sum::<isize>() == divisors2.iter().sum::<isize>()",
    "    let sum1 = sum_of_divisors(num1);\n    let sum2 = sum_of_divisors(num2);\n    sum1 == sum2",
    "    let sum1 = sum_divisors(num1);\n    let sum2 = sum_divisors(num2);\n    sum1 == sum2",
    "    let divisors1 = divisors(num1);\n    let divisors2 = divisors(num2);\n    divisors1.iter().sum::<isize>() == divisors2.iter().sum::<isize>()",
    "    let sum1 = sum_divisors(num1);\n    let sum2 = sum_divisors(num2);\n    sum1 == sum2",
    "    let sum1 = sum_divisors(num1);\n    let sum2 = sum_divisors(num2);\n    sum1 == sum2",
    "    let sum1 = sum_divisors(num1);\n    let sum2 = sum_divisors(num2);\n    sum1 == sum2",
    "    let divisors1 = get_divisors(num1);\n    let divisors2 = get_divisors(num2);\n    divisors1.iter().sum::<isize>() == divisors2.iter().sum::<isize>()",
    "    let divisors1 = get_divisors(num1);\n    let divisors2 = get_divisors(num2);\n    let sum1: isize = divisors1.iter().sum();\n    let sum2: isize = divisors2.iter().sum();\n    sum1 == sum2",
    "    let divisors1 = get_divisors(num1);\n    let divisors2 = get_divisors(num2);\n    divisors1.iter().sum::<isize>() == divisors2.iter().sum::<isize>()",
    "    let sum1 = sum_divisors(num1);\n    let sum2 = sum_divisors(num2);\n    sum1 == sum2",
    "    let sum1 = sum_divisors(num1);\n    let sum2 = sum_divisors(num2);\n    sum1 == sum2",
    "    let sum1 = sum_of_divisors(num1);\n    let sum2 = sum_of_divisors(num2);\n    sum1 == sum2",
    "    let sum1 = sum_divisors(num1);\n    let sum2 = sum_divisors(num2);\n    sum1 == sum2",
    "    let mut num1_divisors = Vec::new();\n    let mut num2_divisors = Vec::new();\n\n    for i in 1..num1 {\n        if num1 % i == 0 {\n            num1_divisors.push(i);\n        }\n    }\n\n    for i in 1..num2 {\n        if num2 % i == 0 {\n            num2_divisors.push(i);\n        }\n    }\n\n    let num1_sum: isize = num1_divisors.iter().sum();\n    let num2_sum: isize = num2_divisors.iter().sum();\n\n    num1_sum == num2_sum",
    "    let sum1 = sum_divisors(num1);\n    let sum2 = sum_divisors(num2);\n    sum1 == sum2",
    "    let sum1 = sum_divisors(num1);\n    let sum2 = sum_divisors(num2);\n    sum1 == sum2",
    "    let sum1 = sum_of_divisors(num1);\n    let sum2 = sum_of_divisors(num2);\n    sum1 == sum2",
    "    let mut divisors1 = Vec::new();\n    let mut divisors2 = Vec::new();\n    for i in 1..num1 {\n        if num1 % i == 0 {\n            divisors1.push(i);\n        }\n    }\n    for i in 1..num2 {\n        if num2 % i == 0 {\n            divisors2.push(i);\n        }\n    }\n    let sum1 = divisors1.iter().fold(0, |acc, x| acc + x);\n    let sum2 = divisors2.iter().fold(0, |acc, x| acc + x);\n    sum1 == sum2",
    "    let sum1 = sum_divisors(num1);\n    let sum2 = sum_divisors(num2);\n    sum1 == sum2",
    "    let sum1 = sum_divisors(num1);\n    let sum2 = sum_divisors(num2);\n    sum1 == sum2",
    "    let sum1 = sum_divisors(num1);\n    let sum2 = sum_divisors(num2);\n    sum1 == sum2",
    "    let sum1 = sum_divisors(num1);\n    let sum2 = sum_divisors(num2);\n    sum1 == sum2",
    "    let sum1 = sum_divisors(num1);\n    let sum2 = sum_divisors(num2);\n    sum1 == sum2",
    "    let sum1 = sum_divisors(num1);\n    let sum2 = sum_divisors(num2);\n    sum1 == sum2",
    "    let mut sum1 = 0;\n    let mut sum2 = 0;\n    for i in 1..num1 {\n        if num1 % i == 0 {\n            sum1 += i;\n        }\n    }\n    for i in 1..num2 {\n        if num2 % i == 0 {\n            sum2 += i;\n        }\n    }\n    sum1 == sum2",
    "    let sum1 = sum_divisors(num1);\n    let sum2 = sum_divisors(num2);\n    sum1 == sum2",
    "    let divisors1 = divisors(num1);\n    let divisors2 = divisors(num2);\n    let sum1 = divisors1.iter().fold(0, |acc, x| acc + x);\n    let sum2 = divisors2.iter().fold(0, |acc, x| acc + x);\n    sum1 == sum2",
    "    let sum1 = sum_divisors(num1);\n    let sum2 = sum_divisors(num2);\n    sum1 == sum2",
    "    let divisors1 = get_divisors(num1);\n    let divisors2 = get_divisors(num2);\n\n    divisors1.iter().sum::<isize>() == divisors2.iter().sum::<isize>()",
    "    let sum1 = sum_divisors(num1);\n    let sum2 = sum_divisors(num2);\n    sum1 == sum2",
    "    let sum1 = sum_divisors(num1);\n    let sum2 = sum_divisors(num2);\n    sum1 == sum2",
    "    let sum1 = sum_divisors(num1);\n    let sum2 = sum_divisors(num2);\n    sum1 == sum2",
    "    let sum1 = sum_of_divisors(num1);\n    let sum2 = sum_of_divisors(num2);\n    sum1 == sum2",
    "    let sum1 = sum_divisors(num1);\n    let sum2 = sum_divisors(num2);\n    sum1 == sum2",
    "    let sum1 = sum_of_divisors(num1);\n    let sum2 = sum_of_divisors(num2);\n    sum1 == sum2",
    "    let divisors1 = divisors(num1);\n    let divisors2 = divisors(num2);\n    divisors1.iter().sum::<isize>() == divisors2.iter().sum::<isize>()",
    "    let divisors1 = divisors(num1);\n    let divisors2 = divisors(num2);\n\n    divisors1.iter().sum::<isize>() == divisors2.iter().sum::<isize>()",
    "    let sum1 = sum_divisors(num1);\n    let sum2 = sum_divisors(num2);\n    sum1 == sum2",
    "    let sum1 = sum_of_divisors(num1);\n    let sum2 = sum_of_divisors(num2);\n    sum1 == sum2",
    "    let sum1 = sum_divisors(num1);\n    let sum2 = sum_divisors(num2);\n    sum1 == sum2",
    "    let divisors1 = divisors(num1);\n    let divisors2 = divisors(num2);\n    let sum1 = divisors1.iter().fold(0, |acc, x| acc + x);\n    let sum2 = divisors2.iter().fold(0, |acc, x| acc + x);\n    sum1 == sum2",
    "    let sum1 = sum_divisors(num1);\n    let sum2 = sum_divisors(num2);\n    sum1 == sum2",
    "    let sum1 = sum_divisors(num1);\n    let sum2 = sum_divisors(num2);\n    sum1 == sum2",
    "    let sum1 = sum_of_divisors(num1);\n    let sum2 = sum_of_divisors(num2);\n    sum1 == sum2",
    "    let sum1 = sum_divisors(num1);\n    let sum2 = sum_divisors(num2);\n    sum1 == sum2",
    "    let sum1 = sum_divisors(num1);\n    let sum2 = sum_divisors(num2);\n    sum1 == sum2",
    "    let sum1 = sum_divisors(num1);\n    let sum2 = sum_divisors(num2);\n    sum1 == sum2",
    "    let sum1 = sum_divisors(num1);\n    let sum2 = sum_divisors(num2);\n    sum1 == sum2",
    "    let sum1 = sum_divisors(num1);\n    let sum2 = sum_divisors(num2);\n    sum1 == sum2",
    "    let sum1 = sum_divisors(num1);\n    let sum2 = sum_divisors(num2);\n    sum1 == sum2",
    "    let sum1 = sum_divisors(num1);\n    let sum2 = sum_divisors(num2);\n    sum1 == sum2",
    "    let sum1 = sum_divisors(num1);\n    let sum2 = sum_divisors(num2);\n    sum1 == sum2",
    "    let sum1 = sum_divisors(num1);\n    let sum2 = sum_divisors(num2);\n    sum1 == sum2",
    "    let sum1 = sum_divisors(num1);\n    let sum2 = sum_divisors(num2);\n    sum1 == sum2",
    "    let sum1 = sum_divisors(num1);\n    let sum2 = sum_divisors(num2);\n    sum1 == sum2",
    "    let divisors1 = divisors(num1);\n    let divisors2 = divisors(num2);\n    divisors1.iter().sum::<isize>() == divisors2.iter().sum::<isize>()",
    "    let sum1 = sum_divisors(num1);\n    let sum2 = sum_divisors(num2);\n    sum1 == sum2",
    "    let divisors1 = get_divisors(num1);\n    let divisors2 = get_divisors(num2);\n    divisors1.iter().sum::<isize>() == divisors2.iter().sum::<isize>()",
    "    let sum1 = sum_divisors(num1);\n    let sum2 = sum_divisors(num2);\n    sum1 == sum2",
    "    let sum1 = sum_divisors(num1);\n    let sum2 = sum_divisors(num2);\n    sum1 == sum2",
    "    let sum1 = sum_divisors(num1);\n    let sum2 = sum_divisors(num2);\n    sum1 == sum2",
    "    let sum1 = sum_divisors(num1);\n    let sum2 = sum_divisors(num2);\n    sum1 == sum2",
    "    let sum1 = sum_divisors(num1);\n    let sum2 = sum_divisors(num2);\n    sum1 == sum2",
    "    let sum1 = sum_divisors(num1);\n    let sum2 = sum_divisors(num2);\n    sum1 == sum2",
    "    let sum1 = sum_divisors(num1);\n    let sum2 = sum_divisors(num2);\n    sum1 == sum2",
    "    let sum1 = sum_divisors(num1);\n    let sum2 = sum_divisors(num2);\n    sum1 == sum2",
    "    let divisors1 = get_divisors(num1);\n    let divisors2 = get_divisors(num2);\n    divisors1.iter().sum::<isize>() == divisors2.iter().sum::<isize>()",
    "    let sum1 = sum_divisors(num1);\n    let sum2 = sum_divisors(num2);\n    sum1 == sum2",
    "    let sum1 = sum_divisors(num1);\n    let sum2 = sum_divisors(num2);\n    sum1 == sum2",
    "    let sum1 = sum_divisors(num1);\n    let sum2 = sum_divisors(num2);\n    sum1 == sum2",
    "    let sum1 = sum_divisors(num1);\n    let sum2 = sum_divisors(num2);\n    sum1 == sum2",
    "    let divisors1 = divisors(num1);\n    let divisors2 = divisors(num2);\n    divisors1.iter().sum::<isize>() == divisors2.iter().sum::<isize>()",
    "    let sum1 = sum_divisors(num1);\n    let sum2 = sum_divisors(num2);\n    sum1 == sum2",
    "    let sum1 = sum_divisors(num1);\n    let sum2 = sum_divisors(num2);\n    sum1 == sum2",
    "    let sum1 = sum_divisors(num1);\n    let sum2 = sum_divisors(num2);\n    sum1 == sum2",
    "    let sum1 = sum_divisors(num1);\n    let sum2 = sum_divisors(num2);\n    sum1 == sum2",
    "    let divisors1 = divisors(num1);\n    let divisors2 = divisors(num2);\n    divisors1.iter().sum::<isize>() == divisors2.iter().sum::<isize>()",
    "    let sum1 = sum_divisors(num1);\n    let sum2 = sum_divisors(num2);\n    sum1 == sum2",
    "    let sum1 = sum_divisors(num1);\n    let sum2 = sum_divisors(num2);\n    sum1 == sum2",
    "    let divisors1 = get_divisors(num1);\n    let divisors2 = get_divisors(num2);\n    let sum1 = divisors1.iter().fold(0, |acc, x| acc + x);\n    let sum2 = divisors2.iter().fold(0, |acc, x| acc + x);\n    sum1 == sum2",
    "    let divisors1 = get_divisors(num1);\n    let divisors2 = get_divisors(num2);\n    divisors1.iter().sum::<isize>() == divisors2.iter().sum::<isize>()",
    "    let divisors1 = divisors(num1);\n    let divisors2 = divisors(num2);\n    divisors1.iter().sum::<isize>() == divisors2.iter().sum::<isize>()",
    "    sum_divisors(num1) == sum_divisors(num2)",
    "    let sum1 = sum_divisors(num1);\n    let sum2 = sum_divisors(num2);\n    sum1 == sum2",
    "    let sum1 = sum_divisors(num1);\n    let sum2 = sum_divisors(num2);\n    sum1 == sum2",
    "    let sum1 = sum_divisors(num1);\n    let sum2 = sum_divisors(num2);\n    sum1 == sum2",
    "    let divisors1 = divisors(num1);\n    let divisors2 = divisors(num2);\n    divisors1.iter().sum::<isize>() == divisors2.iter().sum::<isize>()",
    "    let sum1 = sum_divisors(num1);\n    let sum2 = sum_divisors(num2);\n    sum1 == sum2",
    "    let sum_divisors1 = sum_divisors(num1);\n    let sum_divisors2 = sum_divisors(num2);\n    sum_divisors1 == sum_divisors2",
    "    let sum1 = sum_divisors(num1);\n    let sum2 = sum_divisors(num2);\n    sum1 == sum2",
    "    let sum1 = sum_divisors(num1);\n    let sum2 = sum_divisors(num2);\n    sum1 == sum2",
    "    sum_divisors(num1) == sum_divisors(num2)",
    "    let sum1 = sum_divisors(num1);\n    let sum2 = sum_divisors(num2);\n    sum1 == sum2",
    "    let sum1 = sum_divisors(num1);\n    let sum2 = sum_divisors(num2);\n    sum1 == sum2",
    "    let sum1 = sum_divisors(num1);\n    let sum2 = sum_divisors(num2);\n    sum1 == sum2",
    "    let sum1 = sum_divisors(num1);\n    let sum2 = sum_divisors(num2);\n    sum1 == sum2",
    "    let sum1 = sum_divisors(num1);\n    let sum2 = sum_divisors(num2);\n    sum1 == sum2",
    "    let sum1 = sum_divisors(num1);\n    let sum2 = sum_divisors(num2);\n    sum1 == sum2",
    "    let divisors1 = get_divisors(num1);\n    let divisors2 = get_divisors(num2);\n    divisors1.iter().sum::<isize>() == divisors2.iter().sum::<isize>()",
    "    let sum1 = sum_divisors(num1);\n    let sum2 = sum_divisors(num2);\n    sum1 == sum2",
    "    let divisors1 = get_divisors(num1);\n    let divisors2 = get_divisors(num2);\n    divisors1.iter().sum::<isize>() == divisors2.iter().sum::<isize>()",
    "    let sum1 = sum_divisors(num1);\n    let sum2 = sum_divisors(num2);\n    sum1 == sum2",
    "    let sum1 = sum_divisors(num1);\n    let sum2 = sum_divisors(num2);\n    sum1 == sum2",
    "    let divisors1 = get_divisors(num1);\n    let divisors2 = get_divisors(num2);\n    divisors1.iter().sum::<isize>() == divisors2.iter().sum::<isize>()",
    "    let sum1 = sum_divisors(num1);\n    let sum2 = sum_divisors(num2);\n    sum1 == sum2",
    "    let sum1 = sum_divisors(num1);\n    let sum2 = sum_divisors(num2);\n    sum1 == sum2",
    "    let divisors1 = get_divisors(num1);\n    let divisors2 = get_divisors(num2);\n    let sum1 = divisors1.iter().sum();\n    let sum2 = divisors2.iter().sum();\n    sum1 == sum2",
    "    let sum1 = sum_divisors(num1);\n    let sum2 = sum_divisors(num2);\n    sum1 == sum2",
    "    let divisors1 = divisors(num1);\n    let divisors2 = divisors(num2);\n    divisors1.iter().fold(0, |sum, x| sum + x) == divisors2.iter().fold(0, |sum, x| sum + x)"
  ]
}