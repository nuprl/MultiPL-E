{
  "name": "mbpp_638_wind_chill",
  "language": "rs",
  "prompt": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_638_wind_chill.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let w = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    w.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let wci = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    wci.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let w = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    w.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let wci = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    wci.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let w = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    w.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let w = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    w.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let wci = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    wci.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let w = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    w.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let wci = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    wci.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let w = 13.12 + (0.6215 * t) - (11.37 * v.powf(0.16)) + (0.3965 * t * v.powf(0.16));\n    w.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let w = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    w.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let wci = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    wci.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let wci = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    wci.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let wci = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    wci.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let w = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    w.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let wci = 13.12 + (0.6215 * t) - (11.37 * v.powf(0.16)) + (0.3965 * t * v.powf(0.16));\n    wci.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let w = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    w.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let wci = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    wci.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let wci = 13.12 + (0.6215 * t) - (11.37 * v.powf(0.16)) + (0.3965 * t * v.powf(0.16));\n    wci.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let wci = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    wci.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let w = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    w.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let w = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    w.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let wci = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    wci.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let w = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    w.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let wc = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    wc.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1666124156,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    if v < 4.8 || t > 10.0 {\n        return t;\n    }\n    let v = v as f64;\n    let t = t as f64;\n    let wci = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    wci.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1666124155,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp0w1trldq.rs:3:12\n  |\n3 |     if v < 4.8 || t > 10.0 {\n  |            ^^^ expected `isize`, found floating-point number\n\nerror[E0308]: mismatched types\n --> /tmp/tmp0w1trldq.rs:3:23\n  |\n3 |     if v < 4.8 || t > 10.0 {\n  |                       ^^^^ expected `isize`, found floating-point number\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let w = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    w.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let wci = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    wci.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let w = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    w.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let wci = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    wci.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let wci = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    wci.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let wci = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    wci.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let wci = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    wci.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let w = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    w.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let mut w = 13.12 + 0.6215 * t - 11.37 * (v as f64).powf(0.16) + 0.3965 * t * (v as f64).powf(0.16);\n    w = w.round() as isize;\n    if w < t {\n        w = t;\n    }\n    w\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1666124155,
      "stdout": "",
      "stderr": "error[E0277]: cannot multiply `{float}` by `isize`\n --> /tmp/tmpu6wqbici.rs:3:32\n  |\n3 |     let mut w = 13.12 + 0.6215 * t - 11.37 * (v as f64).powf(0.16) + 0.3965 * t * (v as f64).powf(0.16);\n  |                                ^ no implementation for `{float} * isize`\n  |\n  = help: the trait `Mul<isize>` is not implemented for `{float}`\n  = help: the following other types implement trait `Mul<Rhs>`:\n            <&'a f32 as Mul<f32>>\n            <&'a f64 as Mul<f64>>\n            <&'a i128 as Mul<i128>>\n            <&'a i16 as Mul<i16>>\n            <&'a i32 as Mul<i32>>\n            <&'a i64 as Mul<i64>>\n            <&'a i8 as Mul<i8>>\n            <&'a isize as Mul<isize>>\n          and 49 others\n\nerror[E0277]: cannot multiply `{float}` by `isize`\n --> /tmp/tmpu6wqbici.rs:3:77\n  |\n3 |     let mut w = 13.12 + 0.6215 * t - 11.37 * (v as f64).powf(0.16) + 0.3965 * t * (v as f64).powf(0.16);\n  |                                                                             ^ no implementation for `{float} * isize`\n  |\n  = help: the trait `Mul<isize>` is not implemented for `{float}`\n  = help: the following other types implement trait `Mul<Rhs>`:\n            <&'a f32 as Mul<f32>>\n            <&'a f64 as Mul<f64>>\n            <&'a i128 as Mul<i128>>\n            <&'a i16 as Mul<i16>>\n            <&'a i32 as Mul<i32>>\n            <&'a i64 as Mul<i64>>\n            <&'a i8 as Mul<i8>>\n            <&'a isize as Mul<isize>>\n          and 49 others\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let w = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    w.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    ((13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16)).round()) as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let w = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    w.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let wci = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    wci.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let wci = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    wci.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let wci = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    wci.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let w = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    w.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let w = 13.12 + 0.6215 * t - 11.37 * (v.powf(0.16)) + 0.3965 * t * (v.powf(0.16));\n    w.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1666124156,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let w = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    w.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let wci = 13.12 + (0.6215 * t) - (11.37 * v.powf(0.16)) + (0.3965 * t * v.powf(0.16));\n    wci.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let wci = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    wci.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let w = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    w.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let wci = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    wci.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let w = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    w.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let w = 13.12 + 0.6215 * t - 11.37 * (v.powf(0.16)) + 0.3965 * t * (v.powf(0.16));\n    w.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1666124156,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let wci = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    wci.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let wci = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    wci.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let w = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    w.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let wci = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    wci.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let wci = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    wci.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let wci = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    wci.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let wci = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    wci.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let wci = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    wci.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let wci = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    wci.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let wci = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    wci.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let wci = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    wci.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let wci = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    wci.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    (13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16)).round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1666124156,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let w = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    w.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let wci = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    wci.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let w = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    w.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let w = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    w.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let w = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    w.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let wci = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    wci.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let w = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    w.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let w = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    w.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let w = 13.12 + 0.6215 * t - 11.37 * (v * 0.277778).powf(0.16) + 0.3965 * t * (v * 0.277778).powf(0.16);\n    w.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1666124157,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `39`,\n right: `40`', /tmp/tmpracy0k2c.rs:11:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let w = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    w.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let wci = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    wci.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let w = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    w.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let w = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    w.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let w = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    w.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let wci = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    wci.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    if v < 4.8 {\n        return t;\n    }\n    let v = v as f64;\n    let t = t as f64;\n    let wci = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    wci.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1666124155,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmphgxj2p2o.rs:3:12\n  |\n3 |     if v < 4.8 {\n  |            ^^^ expected `isize`, found floating-point number\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let w = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    w.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let w = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    w.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let wci = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    wci.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let wc = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    wc.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1666124156,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let w = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    w.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let w = 13.12 + 0.6215 * t - 11.37 * (v.powf(0.16)) + 0.3965 * t * (v.powf(0.16));\n    w.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1666124156,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let wci = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    wci.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let wci = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    wci.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let w = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    w.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    ((13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16)).round()) as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let w = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    w.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let wci = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    wci.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let wci = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    wci.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let w = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    w.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let wci = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    wci.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let wci = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    wci.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    (13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16)).round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1666124156,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let w = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    w.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let w = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    w.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let w = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    w.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let w = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    w.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let wci = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    wci.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let w = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    w.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let wc = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    wc.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1666124156,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let w = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    w.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let w = 13.12 + (0.6215 * t) - (11.37 * (v.powf(0.16))) + (0.3965 * t * (v.powf(0.16)));\n    w.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1666124157,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let wci = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    wci.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let wci = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    wci.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let wci = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    wci.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let w = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    w.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let w = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    w.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let w = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    w.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let mut wci = 13.12 + 0.6215 * t - 11.37 * v.pow(0.16) + 0.3965 * t * v.pow(0.16);\n    wci = wci.round() as isize;\n    if wci < 0 {\n        0\n    } else {\n        wci\n    }\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1666124157,
      "stdout": "",
      "stderr": "error[E0277]: cannot multiply `{float}` by `isize`\n --> /tmp/tmp72lljh3q.rs:3:34\n  |\n3 |     let mut wci = 13.12 + 0.6215 * t - 11.37 * v.pow(0.16) + 0.3965 * t * v.pow(0.16);\n  |                                  ^ no implementation for `{float} * isize`\n  |\n  = help: the trait `Mul<isize>` is not implemented for `{float}`\n  = help: the following other types implement trait `Mul<Rhs>`:\n            <&'a f32 as Mul<f32>>\n            <&'a f64 as Mul<f64>>\n            <&'a i128 as Mul<i128>>\n            <&'a i16 as Mul<i16>>\n            <&'a i32 as Mul<i32>>\n            <&'a i64 as Mul<i64>>\n            <&'a i8 as Mul<i8>>\n            <&'a isize as Mul<isize>>\n          and 49 others\n\nerror[E0308]: mismatched types\n --> /tmp/tmp72lljh3q.rs:3:54\n  |\n3 |     let mut wci = 13.12 + 0.6215 * t - 11.37 * v.pow(0.16) + 0.3965 * t * v.pow(0.16);\n  |                                                      ^^^^ expected `u32`, found floating-point number\n\nerror[E0277]: cannot multiply `{float}` by `isize`\n --> /tmp/tmp72lljh3q.rs:3:46\n  |\n3 |     let mut wci = 13.12 + 0.6215 * t - 11.37 * v.pow(0.16) + 0.3965 * t * v.pow(0.16);\n  |                                              ^ no implementation for `{float} * isize`\n  |\n  = help: the trait `Mul<isize>` is not implemented for `{float}`\n  = help: the following other types implement trait `Mul<Rhs>`:\n            <&'a f32 as Mul<f32>>\n            <&'a f64 as Mul<f64>>\n            <&'a i128 as Mul<i128>>\n            <&'a i16 as Mul<i16>>\n            <&'a i32 as Mul<i32>>\n            <&'a i64 as Mul<i64>>\n            <&'a i8 as Mul<i8>>\n            <&'a isize as Mul<isize>>\n          and 49 others\n\nerror[E0277]: cannot multiply `{float}` by `isize`\n --> /tmp/tmp72lljh3q.rs:3:69\n  |\n3 |     let mut wci = 13.12 + 0.6215 * t - 11.37 * v.pow(0.16) + 0.3965 * t * v.pow(0.16);\n  |                                                                     ^ no implementation for `{float} * isize`\n  |\n  = help: the trait `Mul<isize>` is not implemented for `{float}`\n  = help: the following other typ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    (13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16)).round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1666124156,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let wci = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    wci.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let wci = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    wci.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let w = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    w.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let w = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    w.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let w = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    w.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let wci = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    wci.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let wc = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    wc.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1666124156,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let w = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    w.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let w = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    w.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let w = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    w.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let w = 13.12 + 0.6215 * t - 11.37 * (v.powf(0.16)) + 0.3965 * t * (v.powf(0.16));\n    w.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1666124156,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let w = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    w.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let w = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    w.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let w = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    w.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    (13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16)).round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1666124156,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let wci = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    wci.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let wci = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    wci.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let w = 13.12 + 0.6215 * t - 11.37 * (v.powf(0.16)) + 0.3965 * t * (v.powf(0.16));\n    w.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1666124156,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let wci = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    wci.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let wci = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    wci.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let wci = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    wci.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let wci = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    wci.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let w = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    w.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let w = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    w.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    if v < 4.8 {\n        return t;\n    }\n    let v = v as f64;\n    let t = t as f64;\n    let w = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    w.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1666124157,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9azfio0s.rs:3:12\n  |\n3 |     if v < 4.8 {\n  |            ^^^ expected `isize`, found floating-point number\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    if v < 4.8 {\n        return t;\n    }\n    let v = v as f64;\n    let t = t as f64;\n    let w = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    w.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1666124157,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9azfio0s.rs:3:12\n  |\n3 |     if v < 4.8 {\n  |            ^^^ expected `isize`, found floating-point number\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let wci = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    wci.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let w = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    w.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let wci = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    wci.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let w = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    w.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let wci = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    wci.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let w = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    w.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let w = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    w.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let wci = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    wci.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let w = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    w.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let w = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    w.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let wci = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    wci.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    if v < 4.8 {\n        return t;\n    }\n    let v = v as f64;\n    let t = t as f64;\n    let wci = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    wci.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1666124155,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmphgxj2p2o.rs:3:12\n  |\n3 |     if v < 4.8 {\n  |            ^^^ expected `isize`, found floating-point number\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let w = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    w.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let wci = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    wci.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let w = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    w.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let w = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    w.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let wc = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    wc.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1666124156,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    ((13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16)) * 10.0).round() as isize / 10\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1666124157,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let wci = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    wci.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let w = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    w.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let wci = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    wci.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let w = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    w.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let w = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    w.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let wci = 13.12 + 0.6215 * t - 11.37 * (v.powf(0.16)) + 0.3965 * t * (v.powf(0.16));\n    wci.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1666124156,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let wci = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    wci.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let w = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    w.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let wci = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    wci.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let w = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    w.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let w = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    w.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let wci = 13.12 + (0.6215 * t) - (11.37 * v.powf(0.16)) + (0.3965 * t * v.powf(0.16));\n    wci.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    if v < 4.8 {\n        return t;\n    }\n    let v = v as f64;\n    let t = t as f64;\n    let w = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    w.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1666124157,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9azfio0s.rs:3:12\n  |\n3 |     if v < 4.8 {\n  |            ^^^ expected `isize`, found floating-point number\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let w = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    w.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let wci = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    wci.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let w = 13.12 + 0.6215 * t - 11.37 * (v.powf(0.16)) + 0.3965 * t * (v.powf(0.16));\n    w.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1666124156,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let w = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    w.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    if v < 4.8 {\n        return t;\n    }\n    let v = v as f64;\n    let t = t as f64;\n    let w = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    w.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1666124157,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp9azfio0s.rs:3:12\n  |\n3 |     if v < 4.8 {\n  |            ^^^ expected `isize`, found floating-point number\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let wci = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    wci.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let w = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    w.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let wci = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    wci.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let w = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    w.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let w = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    w.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let w = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    w.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let w = 13.12 + 0.6215 * t - 11.37 * (v.powf(0.16)) + 0.3965 * t * (v.powf(0.16));\n    w.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1666124156,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let wci = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    wci.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let w = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    w.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    if v < 4.8 || t > 10.0 {\n        return t;\n    }\n    let v = v as f64;\n    let t = t as f64;\n    let wci = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    wci.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1666124155,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp0w1trldq.rs:3:12\n  |\n3 |     if v < 4.8 || t > 10.0 {\n  |            ^^^ expected `isize`, found floating-point number\n\nerror[E0308]: mismatched types\n --> /tmp/tmp0w1trldq.rs:3:23\n  |\n3 |     if v < 4.8 || t > 10.0 {\n  |                       ^^^^ expected `isize`, found floating-point number\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let wci = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    wci.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let w = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    w.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let w = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    w.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let wci = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    wci.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let wci = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    wci.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let wc = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    wc.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1666124156,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    ((13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16)) * 10.0).round() as isize / 10\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1666124157,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let wci = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    wci.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    if v < 4.8 || t > 10.0 {\n        return t;\n    }\n    let v = v as f64;\n    let t = t as f64;\n    let wci = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    wci.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1666124155,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp0w1trldq.rs:3:12\n  |\n3 |     if v < 4.8 || t > 10.0 {\n  |            ^^^ expected `isize`, found floating-point number\n\nerror[E0308]: mismatched types\n --> /tmp/tmp0w1trldq.rs:3:23\n  |\n3 |     if v < 4.8 || t > 10.0 {\n  |                       ^^^^ expected `isize`, found floating-point number\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0308`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let wci = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    wci.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let w = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    w.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let wci = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    wci.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let wci = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    wci.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let wci = 13.12 + (0.6215 * t) - (11.37 * v.powf(0.16)) + (0.3965 * t * v.powf(0.16));\n    wci.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfn wind_chill(v: isize, t: isize) -> isize {\n    let v = v as f64;\n    let t = t as f64;\n    let wci = 13.12 + 0.6215 * t - 11.37 * v.powf(0.16) + 0.3965 * t * v.powf(0.16);\n    wci.round() as isize\n}\n\nfn main() {\n    let candidate = wind_chill;\n    assert_eq!(candidate(120, 35), 40);\n    assert_eq!(candidate(40, 20), 19);\n    assert_eq!(candidate(10, 8), 6);\n}\n",
      "timestamp": 1665517132,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}