{
  "name": "mbpp_743_rotate_right",
  "language": "rs",
  "prompt": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_743_rotate_right.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut list = list;\n    let mut m = m;\n    let n = list.len() as isize;\n    if m > n {\n        m = m % n;\n    }\n    let mut i = 0;\n    while i < m {\n        let temp = list[n - 1];\n        for j in (1..n).rev() {\n            list[j] = list[j - 1];\n        }\n        list[0] = temp;\n        i += 1;\n    }\n    list\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpeccf7b3_.rs:11:20\n   |\n11 |         let temp = list[n - 1];\n   |                    ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpeccf7b3_.rs:13:13\n   |\n13 |             list[j] = list[j - 1];\n   |             ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpeccf7b3_.rs:13:23\n   |\n13 |             list[j] = list[j - 1];\n   |                       ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut i = 0;\n    while i < list.len() {\n        result.push(list[((i as isize) + m) as usize % list.len()]);\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665517287,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[4, 5, 6, 7, 8, 9, 10, 1, 2, 3]`,\n right: `[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]`', /tmp/tmpcg0bpwhl.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut i = 0;\n    let n = list.len() as isize;\n    while i < n {\n        result.push(list[((i + m) % n) as usize]);\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665517287,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[4, 5, 6, 7, 8, 9, 10, 1, 2, 3]`,\n right: `[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]`', /tmp/tmp_y1opqoz.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    let mut list_len = list.len();\n    let mut m = m % list_len;\n    for i in 0..list_len {\n        result.push(list[(list_len - m + i) % list_len]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpe58er30_.rs:5:21\n  |\n5 |     let mut m = m % list_len;\n  |                     ^^^^^^^^ expected `isize`, found `usize`\n\nerror[E0277]: cannot mod `isize` by `usize`\n --> /tmp/tmpe58er30_.rs:5:19\n  |\n5 |     let mut m = m % list_len;\n  |                   ^ no implementation for `isize % usize`\n  |\n  = help: the trait `Rem<usize>` is not implemented for `isize`\n  = help: the following other types implement trait `Rem<Rhs>`:\n            <&'a f32 as Rem<f32>>\n            <&'a f64 as Rem<f64>>\n            <&'a i128 as Rem<i128>>\n            <&'a i16 as Rem<i16>>\n            <&'a i32 as Rem<i32>>\n            <&'a i64 as Rem<i64>>\n            <&'a i8 as Rem<i8>>\n            <&'a isize as Rem<isize>>\n          and 54 others\n\nerror[E0308]: mismatched types\n --> /tmp/tmpe58er30_.rs:7:38\n  |\n7 |         result.push(list[(list_len - m + i) % list_len]);\n  |                                      ^ expected `usize`, found `isize`\n\nerror[E0277]: cannot subtract `isize` from `usize`\n --> /tmp/tmpe58er30_.rs:7:36\n  |\n7 |         result.push(list[(list_len - m + i) % list_len]);\n  |                                    ^ no implementation for `usize - isize`\n  |\n  = help: the trait `Sub<isize>` is not implemented for `usize`\n  = help: the following other types implement trait `Sub<Rhs>`:\n            <&'a f32 as Sub<f32>>\n            <&'a f64 as Sub<f64>>\n            <&'a i128 as Sub<i128>>\n            <&'a i16 as Sub<i16>>\n            <&'a i32 as Sub<i32>>\n            <&'a i64 as Sub<i64>>\n            <&'a i8 as Sub<i8>>\n            <&'a isize as Sub<isize>>\n          and 48 others\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut new_list = Vec::new();\n    let len = list.len();\n    for i in 0..len {\n        new_list.push(list[(i + m as usize) % len]);\n    }\n    new_list\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665517287,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[4, 5, 6, 7, 8, 9, 10, 1, 2, 3]`,\n right: `[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]`', /tmp/tmpp6v6018t.rs:13:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut new_list = Vec::new();\n    let n = list.len();\n    for i in 0..n {\n        new_list.push(list[((i + m) % n) as usize]);\n    }\n    new_list\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp_6ow774c.rs:6:34\n  |\n6 |         new_list.push(list[((i + m) % n) as usize]);\n  |                                  ^ expected `usize`, found `isize`\n\nerror[E0277]: cannot add `isize` to `usize`\n --> /tmp/tmp_6ow774c.rs:6:32\n  |\n6 |         new_list.push(list[((i + m) % n) as usize]);\n  |                                ^ no implementation for `usize + isize`\n  |\n  = help: the trait `Add<isize>` is not implemented for `usize`\n  = help: the following other types implement trait `Add<Rhs>`:\n            <&'a f32 as Add<f32>>\n            <&'a f64 as Add<f64>>\n            <&'a i128 as Add<i128>>\n            <&'a i16 as Add<i16>>\n            <&'a i32 as Add<i32>>\n            <&'a i64 as Add<i64>>\n            <&'a i8 as Add<i8>>\n            <&'a isize as Add<isize>>\n          and 48 others\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut list = list;\n    let mut m = m;\n    while m > 0 {\n        let last = list.pop().unwrap();\n        list.insert(0, last);\n        m -= 1;\n    }\n    list\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665517287,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut list = list;\n    let mut m = m;\n    while m > 0 {\n        let last_item = list.pop().unwrap();\n        list.insert(0, last_item);\n        m -= 1;\n    }\n    list\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665517287,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut list = list;\n    let mut m = m;\n    if m > 0 {\n        while m > 0 {\n            let last_element = list.pop().unwrap();\n            list.insert(0, last_element);\n            m -= 1;\n        }\n    }\n    list\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665517287,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut list = list;\n    let mut m = m;\n    let n = list.len() as isize;\n    m = m % n;\n    if m == 0 {\n        return list;\n    }\n    let mut gcd = gcd(m, n);\n    while gcd != 0 {\n        let temp = list[(n - gcd) as usize];\n        let mut j = n - gcd;\n        while j >= gcd {\n            list[j as usize] = list[(j - gcd) as usize];\n            j -= gcd;\n        }\n        list[(gcd - 1) as usize] = temp;\n        gcd -= 1;\n    }\n    list\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `gcd` in this scope\n  --> /tmp/tmpplhzoz99.rs:10:19\n   |\n10 |     let mut gcd = gcd(m, n);\n   |                   ^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut list = list;\n    let mut m = m;\n    let len = list.len();\n    if m > len as isize {\n        m = m % len as isize;\n    }\n    let mut i = 0;\n    while i < m {\n        let last = list.pop().unwrap();\n        list.insert(0, last);\n        i += 1;\n    }\n    list\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665517287,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let len = list.len();\n    for i in 0..len {\n        result.push(list[(i + m as usize) % len]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665517287,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[4, 5, 6, 7, 8, 9, 10, 1, 2, 3]`,\n right: `[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]`', /tmp/tmpi90q9pp3.rs:13:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut rotated_list: Vec<isize> = Vec::new();\n    let mut list_len = list.len();\n    let mut m = m;\n    if m > list_len as isize {\n        m = m % list_len as isize;\n    }\n    for i in 0..list_len {\n        rotated_list.push(list[(i + list_len - m as usize) % list_len]);\n    }\n    rotated_list\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665517287,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut new_list = Vec::new();\n    let mut list = list.clone();\n    let mut m = m;\n    while m > 0 {\n        let last = list.pop().unwrap();\n        new_list.push(last);\n        m -= 1;\n    }\n    new_list.reverse();\n    list.append(&mut new_list);\n    list\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665517287,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]`,\n right: `[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]`', /tmp/tmppgs8wn4b.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    let mut m = m;\n    let mut list = list;\n    let n = list.len() as isize;\n    if m > n {\n        m = m % n;\n    }\n    for i in 0..n {\n        result.push(list[(n - m + i) as usize % n as usize]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut list = list;\n    let mut m = m;\n    let n = list.len() as isize;\n    m = m % n;\n    for _ in 0..m {\n        let last = list.pop().unwrap();\n        result.push(last);\n    }\n    for i in list {\n        result.push(i);\n    }\n    result\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665517287,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[10, 9, 8, 1, 2, 3, 4, 5, 6, 7]`,\n right: `[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]`', /tmp/tmp21pq6f2f.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut list = list;\n    let mut m = m;\n    let len = list.len();\n    let mut i = 0;\n    while i < m {\n        let temp = list[len - 1];\n        for j in (0..len).rev() {\n            list[j] = list[j - 1];\n        }\n        list[0] = temp;\n        i += 1;\n    }\n    list\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665517287,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to subtract with overflow', /tmp/tmpq8ieh938.rs:10:28\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let len = list.len();\n    for i in 0..len {\n        result.push(list[(i + m as usize) % len]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665517287,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[4, 5, 6, 7, 8, 9, 10, 1, 2, 3]`,\n right: `[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]`', /tmp/tmpi90q9pp3.rs:13:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut list = list.clone();\n    list.reverse();\n    for _ in 0..m {\n        let last = list.pop().unwrap();\n        result.push(last);\n    }\n    result.reverse();\n    result.append(&mut list);\n    result\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[3, 2, 1, 10, 9, 8, 7, 6, 5, 4]`,\n right: `[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]`', /tmp/tmphbptxyr2.rs:17:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut list = list;\n    let mut m = m;\n    let len = list.len();\n    if m > len as isize {\n        m = m % len as isize;\n    }\n    let mut new_list = Vec::new();\n    for i in 0..len {\n        let index = (i as isize + m) % len as isize;\n        new_list.push(list[index as usize]);\n    }\n    new_list\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665517287,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[4, 5, 6, 7, 8, 9, 10, 1, 2, 3]`,\n right: `[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]`', /tmp/tmpflz6wmr5.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut rotated = Vec::new();\n    let len = list.len() as isize;\n    for i in 0..len {\n        rotated.push(list[((i + m) % len) as usize]);\n    }\n    rotated\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122585,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[4, 5, 6, 7, 8, 9, 10, 1, 2, 3]`,\n right: `[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]`', /tmp/tmp77tu1w57.rs:13:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut list = list;\n    let mut m = m;\n    let len = list.len() as isize;\n    m = m % len;\n    if m == 0 {\n        return list;\n    }\n    let mut i = 0;\n    let mut j = len - 1;\n    while i < j {\n        list.swap(i as usize, j as usize);\n        i += 1;\n        j -= 1;\n    }\n    i = 0;\n    j = m - 1;\n    while i < j {\n        list.swap(i as usize, j as usize);\n        i += 1;\n        j -= 1;\n    }\n    i = m;\n    j = len - 1;\n    while i < j {\n        list.swap(i as usize, j as usize);\n        i += 1;\n        j -= 1;\n    }\n    list\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122585,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut rotated_list = Vec::new();\n    for i in 0..list.len() {\n        rotated_list.push(list[(i + m as usize) % list.len()]);\n    }\n    rotated_list\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122585,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[4, 5, 6, 7, 8, 9, 10, 1, 2, 3]`,\n right: `[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]`', /tmp/tmpitsujlbl.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut rotated_list = list.clone();\n    let n = list.len();\n    for i in 0..n {\n        rotated_list[(i + m as usize) % n] = list[i];\n    }\n    rotated_list\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122585,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let len = list.len() as isize;\n    for i in 0..len {\n        result.push(list[(i + m) % len as isize]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122585,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmpgiihsus1.rs:6:21\n  |\n6 |         result.push(list[(i + m) % len as isize]);\n  |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut list = list;\n    let mut m = m;\n    let n = list.len() as isize;\n    m = m % n;\n    if m == 0 {\n        return list;\n    }\n    let mut i = 0;\n    while i < m {\n        let temp = list[n - 1];\n        for j in (1..n).rev() {\n            list[j] = list[j - 1];\n        }\n        list[0] = temp;\n        i += 1;\n    }\n    list\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122585,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp0mt94y08.rs:12:20\n   |\n12 |         let temp = list[n - 1];\n   |                    ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp0mt94y08.rs:14:13\n   |\n14 |             list[j] = list[j - 1];\n   |             ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp0mt94y08.rs:14:23\n   |\n14 |             list[j] = list[j - 1];\n   |                       ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut list = list;\n    let mut m = m;\n    let n = list.len() as isize;\n    m = m % n;\n    for _ in 0..m {\n        let last = list.pop().unwrap();\n        list.insert(0, last);\n    }\n    list\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122585,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let n = list.len();\n    for i in 0..n {\n        result.push(list[(i + m as usize) % n]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122585,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[4, 5, 6, 7, 8, 9, 10, 1, 2, 3]`,\n right: `[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]`', /tmp/tmp9vq09zxa.rs:13:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut new_list = Vec::new();\n    let len = list.len() as isize;\n    for i in 0..len {\n        new_list.push(list[((i + m) % len) as usize]);\n    }\n    new_list\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122585,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[4, 5, 6, 7, 8, 9, 10, 1, 2, 3]`,\n right: `[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]`', /tmp/tmp2n2j0ha_.rs:13:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut list = list;\n    let mut m = m;\n    let n = list.len() as isize;\n    m = m % n;\n    let mut i = 0;\n    while i < m {\n        let temp = list[n - 1];\n        for j in (0..n - 1).rev() {\n            list[j + 1] = list[j];\n        }\n        list[0] = temp;\n        i += 1;\n    }\n    list\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122585,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp8q49s74n.rs:9:20\n  |\n9 |         let temp = list[n - 1];\n  |                    ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp8q49s74n.rs:11:13\n   |\n11 |             list[j + 1] = list[j];\n   |             ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp8q49s74n.rs:11:27\n   |\n11 |             list[j + 1] = list[j];\n   |                           ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut list = list;\n    let mut m = m;\n    let n = list.len() as isize;\n    m = m % n;\n    if m == 0 {\n        return list;\n    }\n    let mut temp = Vec::new();\n    for i in n - m..n {\n        temp.push(list[i as usize]);\n    }\n    for i in 0..n - m {\n        list[(i + m) as usize] = list[i as usize];\n    }\n    for i in 0..m {\n        list[i as usize] = temp[i as usize];\n    }\n    list\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122585,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[8, 9, 10, 1, 2, 3, 1, 2, 3, 1]`,\n right: `[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]`', /tmp/tmpd38qdgcn.rs:25:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let len = list.len() as isize;\n    for i in 0..len {\n        let index = (i + m) % len;\n        result.push(list[index as usize]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122585,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[4, 5, 6, 7, 8, 9, 10, 1, 2, 3]`,\n right: `[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]`', /tmp/tmps8na6jw3.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut list = list;\n    let mut m = m;\n    let len = list.len() as isize;\n    if m > len {\n        m = m % len;\n    }\n    let mut i = 0;\n    while i < m {\n        let last = list.pop().unwrap();\n        list.insert(0, last);\n        i += 1;\n    }\n    list\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122585,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    let mut list_len = list.len();\n    let mut m = m % list_len;\n    let mut i = 0;\n    while i < list_len {\n        result.push(list[(i + m) % list_len]);\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122585,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpzbkdugcp.rs:5:21\n  |\n5 |     let mut m = m % list_len;\n  |                     ^^^^^^^^ expected `isize`, found `usize`\n\nerror[E0277]: cannot mod `isize` by `usize`\n --> /tmp/tmpzbkdugcp.rs:5:19\n  |\n5 |     let mut m = m % list_len;\n  |                   ^ no implementation for `isize % usize`\n  |\n  = help: the trait `Rem<usize>` is not implemented for `isize`\n  = help: the following other types implement trait `Rem<Rhs>`:\n            <&'a f32 as Rem<f32>>\n            <&'a f64 as Rem<f64>>\n            <&'a i128 as Rem<i128>>\n            <&'a i16 as Rem<i16>>\n            <&'a i32 as Rem<i32>>\n            <&'a i64 as Rem<i64>>\n            <&'a i8 as Rem<i8>>\n            <&'a isize as Rem<isize>>\n          and 54 others\n\nerror[E0308]: mismatched types\n --> /tmp/tmpzbkdugcp.rs:8:31\n  |\n8 |         result.push(list[(i + m) % list_len]);\n  |                               ^ expected `usize`, found `isize`\n\nerror[E0277]: cannot add `isize` to `usize`\n --> /tmp/tmpzbkdugcp.rs:8:29\n  |\n8 |         result.push(list[(i + m) % list_len]);\n  |                             ^ no implementation for `usize + isize`\n  |\n  = help: the trait `Add<isize>` is not implemented for `usize`\n  = help: the following other types implement trait `Add<Rhs>`:\n            <&'a f32 as Add<f32>>\n            <&'a f64 as Add<f64>>\n            <&'a i128 as Add<i128>>\n            <&'a i16 as Add<i16>>\n            <&'a i32 as Add<i32>>\n            <&'a i64 as Add<i64>>\n            <&'a i8 as Add<i8>>\n            <&'a isize as Add<isize>>\n          and 48 others\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let n = list.len();\n    for i in 0..n {\n        result.push(list[(i + m as usize) % n]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122585,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[4, 5, 6, 7, 8, 9, 10, 1, 2, 3]`,\n right: `[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]`', /tmp/tmp9vq09zxa.rs:13:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut list = list;\n    let mut m = m;\n    let mut i = 0;\n    while m > 0 {\n        let tmp = list[i];\n        list[i] = list[i + 1];\n        list[i + 1] = tmp;\n        i += 1;\n        m -= 1;\n    }\n    list\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122585,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[2, 3, 4, 1, 5, 6, 7, 8, 9, 10]`,\n right: `[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]`', /tmp/tmpxiwrt5_a.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut list = list;\n    let mut m = m;\n    while m > 0 {\n        let last = list.pop().unwrap();\n        list.insert(0, last);\n        m -= 1;\n    }\n    list\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665517287,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let n = list.len();\n    for i in 0..n {\n        result.push(list[(i + m) as usize % n]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122585,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpvxxzxfuo.rs:6:31\n  |\n6 |         result.push(list[(i + m) as usize % n]);\n  |                               ^ expected `usize`, found `isize`\n\nerror[E0277]: cannot add `isize` to `usize`\n --> /tmp/tmpvxxzxfuo.rs:6:29\n  |\n6 |         result.push(list[(i + m) as usize % n]);\n  |                             ^ no implementation for `usize + isize`\n  |\n  = help: the trait `Add<isize>` is not implemented for `usize`\n  = help: the following other types implement trait `Add<Rhs>`:\n            <&'a f32 as Add<f32>>\n            <&'a f64 as Add<f64>>\n            <&'a i128 as Add<i128>>\n            <&'a i16 as Add<i16>>\n            <&'a i32 as Add<i32>>\n            <&'a i64 as Add<i64>>\n            <&'a i8 as Add<i8>>\n            <&'a isize as Add<isize>>\n          and 48 others\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut list = list;\n    let mut m = m;\n    let n = list.len() as isize;\n    m = m % n;\n    let mut i = 0;\n    let mut j = n - 1;\n    while i < j {\n        list.swap(i as usize, j as usize);\n        i += 1;\n        j -= 1;\n    }\n    i = 0;\n    j = m - 1;\n    while i < j {\n        list.swap(i as usize, j as usize);\n        i += 1;\n        j -= 1;\n    }\n    i = m;\n    j = n - 1;\n    while i < j {\n        list.swap(i as usize, j as usize);\n        i += 1;\n        j -= 1;\n    }\n    list\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122585,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..list.len() {\n        result.push(list[(i + m as usize) % list.len()]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122585,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[4, 5, 6, 7, 8, 9, 10, 1, 2, 3]`,\n right: `[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]`', /tmp/tmp9rlw8pk_.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut new_list = Vec::new();\n    let len = list.len();\n    for i in 0..len {\n        new_list.push(list[(i + m as usize) % len]);\n    }\n    new_list\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665517287,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[4, 5, 6, 7, 8, 9, 10, 1, 2, 3]`,\n right: `[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]`', /tmp/tmpp6v6018t.rs:13:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut list = list;\n    let mut m = m;\n    let n = list.len() as isize;\n    m = m % n;\n    reverse(&mut list, 0, n - m - 1);\n    reverse(&mut list, n - m, n - 1);\n    reverse(&mut list, 0, n - 1);\n    list\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122585,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `reverse` in this scope\n --> /tmp/tmpy5uj4xr2.rs:7:5\n  |\n7 |     reverse(&mut list, 0, n - m - 1);\n  |     ^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function `reverse` in this scope\n --> /tmp/tmpy5uj4xr2.rs:8:5\n  |\n8 |     reverse(&mut list, n - m, n - 1);\n  |     ^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function `reverse` in this scope\n --> /tmp/tmpy5uj4xr2.rs:9:5\n  |\n9 |     reverse(&mut list, 0, n - 1);\n  |     ^^^^^^^ not found in this scope\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..list.len() {\n        result.push(list[(i + m as usize) % list.len()]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122585,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[4, 5, 6, 7, 8, 9, 10, 1, 2, 3]`,\n right: `[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]`', /tmp/tmp9rlw8pk_.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut new_list = list.clone();\n    let n = list.len() as isize;\n    let m = m % n;\n    for i in 0..n {\n        new_list[(i + m) as usize % n as usize] = list[i as usize];\n    }\n    new_list\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122585,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut list = list;\n    let mut m = m;\n    let len = list.len();\n    if m > len as isize {\n        m = m % len as isize;\n    }\n    let mut i = 0;\n    while i < m {\n        let last_element = list.pop().unwrap();\n        list.insert(0, last_element);\n        i += 1;\n    }\n    list\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122585,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut list = list;\n    let n = list.len() as isize;\n    let m = m % n;\n    let mut i = 0;\n    while i < m {\n        let temp = list[n - 1];\n        for j in (1..n).rev() {\n            list[j] = list[j - 1];\n        }\n        list[0] = temp;\n        i += 1;\n    }\n    list\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122585,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmpwve6ene5.rs:8:20\n  |\n8 |         let temp = list[n - 1];\n  |                    ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpwve6ene5.rs:10:13\n   |\n10 |             list[j] = list[j - 1];\n   |             ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpwve6ene5.rs:10:23\n   |\n10 |             list[j] = list[j - 1];\n   |                       ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut new_list = Vec::new();\n    let len = list.len();\n    for i in 0..len {\n        new_list.push(list[(i + m as usize) % len]);\n    }\n    new_list\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665517287,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[4, 5, 6, 7, 8, 9, 10, 1, 2, 3]`,\n right: `[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]`', /tmp/tmpp6v6018t.rs:13:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut list = list;\n    let mut m = m;\n    while m > 0 {\n        let last = list.pop().unwrap();\n        result.push(last);\n        m -= 1;\n    }\n    list.append(&mut result);\n    list\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122585,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5, 6, 7, 10, 9, 8]`,\n right: `[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]`', /tmp/tmpoc9jsmz1.rs:17:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    let n = list.len() as isize;\n    for i in 0..n {\n        result.push(list[((i + m) % n) as usize]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122585,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[4, 5, 6, 7, 8, 9, 10, 1, 2, 3]`,\n right: `[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]`', /tmp/tmpgiygbavl.rs:13:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut list = list;\n    let mut m = m;\n    let n = list.len() as isize;\n    if m > n {\n        m = m % n;\n    }\n    for _ in 0..m {\n        let last = list.pop().unwrap();\n        list.insert(0, last);\n    }\n    list\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122586,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut rotated_list = Vec::new();\n    let len = list.len() as isize;\n    for i in 0..len {\n        rotated_list.push(list[(i + m) % len as isize]);\n    }\n    rotated_list\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122585,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmpuv68eeno.rs:6:27\n  |\n6 |         rotated_list.push(list[(i + m) % len as isize]);\n  |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let len = list.len();\n    for i in 0..len {\n        result.push(list[(i + m as usize) % len]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665517287,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[4, 5, 6, 7, 8, 9, 10, 1, 2, 3]`,\n right: `[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]`', /tmp/tmpi90q9pp3.rs:13:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..list.len() {\n        let index = (i as isize + m) % list.len() as isize;\n        result.push(list[index as usize]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122586,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[4, 5, 6, 7, 8, 9, 10, 1, 2, 3]`,\n right: `[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]`', /tmp/tmpiro7wocq.rs:13:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let len = list.len() as isize;\n    for i in 0..len {\n        result.push(list[((i + m) % len) as usize]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122586,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[4, 5, 6, 7, 8, 9, 10, 1, 2, 3]`,\n right: `[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]`', /tmp/tmpd0walfdd.rs:13:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut list = list;\n    let mut m = m;\n    while m > 0 {\n        let x = list.pop().unwrap();\n        list.insert(0, x);\n        m -= 1;\n    }\n    list\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122586,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut list = list;\n    let mut m = m;\n    while m > 0 {\n        let last = list.pop().unwrap();\n        result.push(last);\n        m -= 1;\n    }\n    let mut result = result.iter().rev().cloned().collect::<Vec<isize>>();\n    result.append(&mut list);\n    result\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122586,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut list = list;\n    let mut m = m;\n    let n = list.len() as isize;\n    let mut i = 0;\n    while m > 0 {\n        let temp = list[n - 1];\n        while i < n - 1 {\n            list[n - 1 - i] = list[n - 2 - i];\n            i += 1;\n        }\n        list[0] = temp;\n        i = 0;\n        m -= 1;\n    }\n    list\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122585,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmpzmpbhmjf.rs:8:20\n  |\n8 |         let temp = list[n - 1];\n  |                    ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzmpbhmjf.rs:10:13\n   |\n10 |             list[n - 1 - i] = list[n - 2 - i];\n   |             ^^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzmpbhmjf.rs:10:31\n   |\n10 |             list[n - 1 - i] = list[n - 2 - i];\n   |                               ^^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut list = list;\n    let mut m = m;\n    let n = list.len() as isize;\n    if m > n {\n        m = m % n;\n    }\n    let mut i = 0;\n    while i < m {\n        let temp = list[n - 1];\n        for j in (0..n - 1).rev() {\n            list[j + 1] = list[j];\n        }\n        list[0] = temp;\n        i += 1;\n    }\n    list\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122585,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmphgexenyf.rs:11:20\n   |\n11 |         let temp = list[n - 1];\n   |                    ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmphgexenyf.rs:13:13\n   |\n13 |             list[j + 1] = list[j];\n   |             ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmphgexenyf.rs:13:27\n   |\n13 |             list[j + 1] = list[j];\n   |                           ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut list = list;\n    let mut m = m;\n    let n = list.len() as isize;\n    m = m % n;\n    if m == 0 {\n        return list;\n    }\n    let mut i = 0;\n    while i < m {\n        let temp = list[n - 1];\n        for j in (0..n - 1).rev() {\n            list[j + 1] = list[j];\n        }\n        list[0] = temp;\n        i += 1;\n    }\n    list\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122585,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzttodgfv.rs:12:20\n   |\n12 |         let temp = list[n - 1];\n   |                    ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzttodgfv.rs:14:13\n   |\n14 |             list[j + 1] = list[j];\n   |             ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzttodgfv.rs:14:27\n   |\n14 |             list[j + 1] = list[j];\n   |                           ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut list = list;\n    let mut m = m;\n    let n = list.len() as isize;\n    if m > n {\n        m = m % n;\n    }\n    for i in 0..n {\n        let index = (i + n - m) % n;\n        result.push(list[index as usize]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122586,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut list = list;\n    let mut m = m;\n    if m > list.len() as isize {\n        m = m % list.len() as isize;\n    }\n    let mut i = 0;\n    while i < m {\n        let last = list.pop().unwrap();\n        list.insert(0, last);\n        i += 1;\n    }\n    list\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122586,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    let len = list.len();\n    for i in 0..len {\n        result.push(list[(i + m as usize) % len]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122586,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[4, 5, 6, 7, 8, 9, 10, 1, 2, 3]`,\n right: `[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]`', /tmp/tmpbivu9b2s.rs:13:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let n = list.len() as isize;\n    for i in 0..n {\n        result.push(list[(i + m) % n as usize]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122585,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpby4e1l05.rs:6:36\n  |\n6 |         result.push(list[(i + m) % n as usize]);\n  |                                    ^^^^^^^^^^ expected `isize`, found `usize`\n\nerror[E0277]: cannot mod `isize` by `usize`\n --> /tmp/tmpby4e1l05.rs:6:34\n  |\n6 |         result.push(list[(i + m) % n as usize]);\n  |                                  ^ no implementation for `isize % usize`\n  |\n  = help: the trait `Rem<usize>` is not implemented for `isize`\n  = help: the following other types implement trait `Rem<Rhs>`:\n            <&'a f32 as Rem<f32>>\n            <&'a f64 as Rem<f64>>\n            <&'a i128 as Rem<i128>>\n            <&'a i16 as Rem<i16>>\n            <&'a i32 as Rem<i32>>\n            <&'a i64 as Rem<i64>>\n            <&'a i8 as Rem<i8>>\n            <&'a isize as Rem<isize>>\n          and 54 others\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmpby4e1l05.rs:6:21\n  |\n6 |         result.push(list[(i + m) % n as usize]);\n  |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut list = list;\n    let mut m = m;\n    let n = list.len() as isize;\n    if m > n {\n        m = m % n;\n    }\n    let mut i = 0;\n    while i < m {\n        let last = list.pop().unwrap();\n        list.insert(0, last);\n        i += 1;\n    }\n    list\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122586,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut list = list;\n    let n = list.len() as isize;\n    let m = m % n;\n    let mut i = 0;\n    while i < m {\n        let temp = list[n - 1];\n        for j in (0..n - 1).rev() {\n            list[j + 1] = list[j];\n        }\n        list[0] = temp;\n        i += 1;\n    }\n    list\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122586,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp_c08rp1l.rs:8:20\n  |\n8 |         let temp = list[n - 1];\n  |                    ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp_c08rp1l.rs:10:13\n   |\n10 |             list[j + 1] = list[j];\n   |             ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp_c08rp1l.rs:10:27\n   |\n10 |             list[j + 1] = list[j];\n   |                           ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let n = list.len() as isize;\n    for i in 0..n {\n        result.push(list[((i + m) % n) as usize]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122586,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[4, 5, 6, 7, 8, 9, 10, 1, 2, 3]`,\n right: `[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]`', /tmp/tmpk2f3c3m7.rs:13:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut list = list;\n    let mut m = m;\n    let n = list.len() as isize;\n    m = m % n;\n    reverse(&mut list, 0, n - m - 1);\n    reverse(&mut list, n - m, n - 1);\n    reverse(&mut list, 0, n - 1);\n    list\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122585,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `reverse` in this scope\n --> /tmp/tmpy5uj4xr2.rs:7:5\n  |\n7 |     reverse(&mut list, 0, n - m - 1);\n  |     ^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function `reverse` in this scope\n --> /tmp/tmpy5uj4xr2.rs:8:5\n  |\n8 |     reverse(&mut list, n - m, n - 1);\n  |     ^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find function `reverse` in this scope\n --> /tmp/tmpy5uj4xr2.rs:9:5\n  |\n9 |     reverse(&mut list, 0, n - 1);\n  |     ^^^^^^^ not found in this scope\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let len = list.len() as isize;\n    for i in 0..len {\n        let index = (i + m) % len;\n        result.push(list[index as usize]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122585,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[4, 5, 6, 7, 8, 9, 10, 1, 2, 3]`,\n right: `[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]`', /tmp/tmps8na6jw3.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    let mut list_iter = list.iter();\n    let mut i = 0;\n    while i < m {\n        let item = list_iter.next();\n        if item.is_none() {\n            list_iter = list.iter();\n        }\n        i += 1;\n    }\n    for item in list_iter {\n        result.push(*item);\n    }\n    for item in list.iter() {\n        result.push(*item);\n    }\n    result\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122586,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]`,\n right: `[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]`', /tmp/tmpqlegtn_g.rs:24:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut list = list;\n    let mut m = m;\n    let n = list.len() as isize;\n    m = m % n;\n    let mut i = 0;\n    while i < m {\n        let last = list.pop().unwrap();\n        list.insert(0, last);\n        i += 1;\n    }\n    list\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122586,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut list = list;\n    let mut m = m;\n    if m < 0 {\n        m = list.len() as isize + m;\n    }\n    let mut i = 0;\n    while i < m {\n        let x = list.pop().unwrap();\n        result.push(x);\n        i += 1;\n    }\n    result.reverse();\n    list.append(&mut result);\n    list\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122586,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]`,\n right: `[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]`', /tmp/tmp0k2l0kot.rs:22:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut i = 0;\n    let mut j = list.len() - m as usize;\n    while j < list.len() {\n        result.push(list[j]);\n        j += 1;\n    }\n    while i < list.len() - m as usize {\n        result.push(list[i]);\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122586,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut new_list = Vec::new();\n    let len = list.len() as isize;\n    for i in 0..len {\n        new_list.push(list[(i + m) as usize % len as usize]);\n    }\n    new_list\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122586,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[4, 5, 6, 7, 8, 9, 10, 1, 2, 3]`,\n right: `[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]`', /tmp/tmpbv5sg4__.rs:13:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut new_list = Vec::new();\n    let len = list.len();\n    for i in 0..len {\n        new_list.push(list[(i + m as usize) % len]);\n    }\n    new_list\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665517287,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[4, 5, 6, 7, 8, 9, 10, 1, 2, 3]`,\n right: `[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]`', /tmp/tmpp6v6018t.rs:13:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut list = list;\n    let mut m = m;\n    let n = list.len() as isize;\n    if m > n {\n        m = m % n;\n    }\n    let mut i = 0;\n    while i < m {\n        let temp = list[n - 1];\n        for j in (1..n).rev() {\n            list[j] = list[j - 1];\n        }\n        list[0] = temp;\n        i += 1;\n    }\n    list\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpeccf7b3_.rs:11:20\n   |\n11 |         let temp = list[n - 1];\n   |                    ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpeccf7b3_.rs:13:13\n   |\n13 |             list[j] = list[j - 1];\n   |             ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpeccf7b3_.rs:13:23\n   |\n13 |             list[j] = list[j - 1];\n   |                       ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut list = list.clone();\n    let len = list.len() as isize;\n    let m = m % len;\n    for _ in 0..m {\n        let last = list.pop().unwrap();\n        result.push(last);\n    }\n    list.append(&mut result);\n    list\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122586,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5, 6, 7, 10, 9, 8]`,\n right: `[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]`', /tmp/tmprz8krq5f.rs:17:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut list = list;\n    let mut m = m;\n    let len = list.len();\n    if m > len as isize {\n        m = m % len as isize;\n    }\n    let mut new_list = Vec::new();\n    for i in 0..len {\n        new_list.push(list[(i + m as usize) % len]);\n    }\n    new_list\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122586,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[4, 5, 6, 7, 8, 9, 10, 1, 2, 3]`,\n right: `[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]`', /tmp/tmpueziyxmq.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut list = list;\n    for _ in 0..m {\n        let last = list.pop().unwrap();\n        result.push(last);\n    }\n    list.append(&mut result);\n    list\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122586,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5, 6, 7, 10, 9, 8]`,\n right: `[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]`', /tmp/tmpv9mahg6h.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut list = list;\n    let mut m = m;\n    let n = list.len() as isize;\n    if m > n {\n        m = m % n;\n    }\n    let mut i = 0;\n    while i < m {\n        let temp = list[n - 1];\n        for j in (1..n).rev() {\n            list[j] = list[j - 1];\n        }\n        list[0] = temp;\n        i += 1;\n    }\n    list\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpeccf7b3_.rs:11:20\n   |\n11 |         let temp = list[n - 1];\n   |                    ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpeccf7b3_.rs:13:13\n   |\n13 |             list[j] = list[j - 1];\n   |             ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpeccf7b3_.rs:13:23\n   |\n13 |             list[j] = list[j - 1];\n   |                       ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut list = list;\n    let mut m = m;\n    let len = list.len();\n    if m > len as isize {\n        m = m % len as isize;\n    }\n    let mut i = 0;\n    while i < m {\n        let temp = list[len - 1];\n        for j in (0..len).rev() {\n            list[j] = list[j - 1];\n        }\n        list[0] = temp;\n        i += 1;\n    }\n    list\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122586,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to subtract with overflow', /tmp/tmptjfe2w3m.rs:13:28\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut n = list.len();\n\n    while i < n {\n        j = i;\n        k = 0;\n        while k < m {\n            if j == n {\n                j = 0;\n            }\n            result.push(list[j]);\n            j += 1;\n            k += 1;\n        }\n        i += m;\n    }\n    result\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122586,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n  --> /tmp/tmpi2dvk3mc.rs:20:14\n   |\n20 |         i += m;\n   |              ^ expected `usize`, found `isize`\n\nerror[E0277]: cannot add-assign `isize` to `usize`\n  --> /tmp/tmpi2dvk3mc.rs:20:11\n   |\n20 |         i += m;\n   |           ^^ no implementation for `usize += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented for `usize`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and 20 others\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut list = list;\n    let n = list.len();\n    let m = m % n;\n    for _ in 0..m {\n        let temp = list[n - 1];\n        for i in (1..n).rev() {\n            list[i] = list[i - 1];\n        }\n        list[0] = temp;\n    }\n    list\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122586,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmphgfmj_d4.rs:5:17\n  |\n5 |     let m = m % n;\n  |                 ^ expected `isize`, found `usize`\n\nerror[E0277]: cannot mod `isize` by `usize`\n --> /tmp/tmphgfmj_d4.rs:5:15\n  |\n5 |     let m = m % n;\n  |               ^ no implementation for `isize % usize`\n  |\n  = help: the trait `Rem<usize>` is not implemented for `isize`\n  = help: the following other types implement trait `Rem<Rhs>`:\n            <&'a f32 as Rem<f32>>\n            <&'a f64 as Rem<f64>>\n            <&'a i128 as Rem<i128>>\n            <&'a i16 as Rem<i16>>\n            <&'a i32 as Rem<i32>>\n            <&'a i64 as Rem<i64>>\n            <&'a i8 as Rem<i8>>\n            <&'a isize as Rem<isize>>\n          and 54 others\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let len = list.len();\n    for i in 0..len {\n        result.push(list[(i + m as usize) % len]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665517287,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[4, 5, 6, 7, 8, 9, 10, 1, 2, 3]`,\n right: `[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]`', /tmp/tmpi90q9pp3.rs:13:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut list = list;\n    let mut m = m;\n    let len = list.len() as isize;\n    if m > len {\n        m = m % len;\n    }\n    let mut i = 0;\n    while i < m {\n        let temp = list.pop().unwrap();\n        list.insert(0, temp);\n        i += 1;\n    }\n    list\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122586,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut new_list: Vec<isize> = Vec::new();\n    let len = list.len() as isize;\n    for i in 0..len {\n        new_list.push(list[((i + m) % len) as usize]);\n    }\n    new_list\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122586,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[4, 5, 6, 7, 8, 9, 10, 1, 2, 3]`,\n right: `[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]`', /tmp/tmp5058tvsv.rs:13:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut list = list;\n    let mut m = m;\n    let n = list.len() as isize;\n    m = m % n;\n    let mut i = 0;\n    while i < m {\n        let last = list.pop().unwrap();\n        list.insert(0, last);\n        i += 1;\n    }\n    list\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122586,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut list = list;\n    let mut m = m;\n    while m > 0 {\n        let last = list.pop().unwrap();\n        result.push(last);\n        m -= 1;\n    }\n    list.append(&mut result);\n    list\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122585,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5, 6, 7, 10, 9, 8]`,\n right: `[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]`', /tmp/tmpoc9jsmz1.rs:17:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut list = list;\n    let mut m = m;\n    let mut i = 0;\n\n    while m > 0 {\n        let temp = list[list.len() - 1];\n        while i < list.len() {\n            let temp2 = list[i];\n            list[i] = temp;\n            temp = temp2;\n            i += 1;\n        }\n        i = 0;\n        m -= 1;\n    }\n    list\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122586,
      "stdout": "",
      "stderr": "error[E0384]: cannot assign twice to immutable variable `temp`\n  --> /tmp/tmp0dn_ds0y.rs:12:13\n   |\n8  |         let temp = list[list.len() - 1];\n   |             ----\n   |             |\n   |             first assignment to `temp`\n   |             help: consider making this binding mutable: `mut temp`\n...\n12 |             temp = temp2;\n   |             ^^^^^^^^^^^^ cannot assign twice to immutable variable\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0384`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    let mut i: isize = 0;\n    let mut j: isize = 0;\n    let mut k: isize = 0;\n\n    while i < m {\n        i += 1;\n    }\n\n    while j < list.len() as isize {\n        result.push(list[i as usize]);\n        i += 1;\n        j += 1;\n        if i == list.len() as isize {\n            i = 0;\n        }\n    }\n\n    return result;\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122586,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[4, 5, 6, 7, 8, 9, 10, 1, 2, 3]`,\n right: `[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]`', /tmp/tmp4nj2u481.rs:26:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut res = Vec::new();\n    let mut list = list.clone();\n    let mut m = m;\n    while m > 0 {\n        res.push(list.pop().unwrap());\n        m -= 1;\n    }\n    res.reverse();\n    res.append(&mut list);\n    res\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122586,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let len = list.len();\n    for i in 0..len {\n        result.push(list[(i + len - m as usize) % len]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122586,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut list = list;\n    let mut m = m;\n    while m > 0 {\n        let last = list.pop().unwrap();\n        result.push(last);\n        m -= 1;\n    }\n    let mut result = result.into_iter().rev().collect::<Vec<isize>>();\n    result.append(&mut list);\n    result\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122586,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut list = list;\n    let n = list.len();\n    let m = m as usize;\n    let mut i = 0;\n    while i < m {\n        let x = list.pop().unwrap();\n        list.insert(0, x);\n        i += 1;\n    }\n    list\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122586,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut list = list;\n    let mut m = m;\n    let n = list.len() as isize;\n    if m > n {\n        m = m % n;\n    }\n    let mut i = 0;\n    while i < m {\n        let temp = list[n - 1];\n        for j in (1..n).rev() {\n            list[j] = list[j - 1];\n        }\n        list[0] = temp;\n        i += 1;\n    }\n    list\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpeccf7b3_.rs:11:20\n   |\n11 |         let temp = list[n - 1];\n   |                    ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpeccf7b3_.rs:13:13\n   |\n13 |             list[j] = list[j - 1];\n   |             ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpeccf7b3_.rs:13:23\n   |\n13 |             list[j] = list[j - 1];\n   |                       ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut list = list;\n    let mut m = m;\n    while m > 0 {\n        let last = list.pop().unwrap();\n        list.insert(0, last);\n        m -= 1;\n    }\n    list\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665517287,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut list = list;\n    let mut m = m;\n    while m > 0 {\n        let last = list.pop().unwrap();\n        result.push(last);\n        m -= 1;\n    }\n    list.append(&mut result);\n    list\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122585,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5, 6, 7, 10, 9, 8]`,\n right: `[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]`', /tmp/tmpoc9jsmz1.rs:17:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut list = list;\n    let mut m = m;\n    let len = list.len();\n    if m > len as isize {\n        m = m % len as isize;\n    }\n    let mut i = 0;\n    while i < m {\n        let temp = list[len - 1];\n        for j in (0..len - 1).rev() {\n            list[j + 1] = list[j];\n        }\n        list[0] = temp;\n        i += 1;\n    }\n    list\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122586,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut list = list;\n    let mut m = m;\n    let len = list.len();\n    if m > len as isize {\n        m = m % len as isize;\n    }\n    let mut result = Vec::new();\n    for i in 0..len {\n        let index = (i + m as usize) % len;\n        result.push(list[index]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122586,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[4, 5, 6, 7, 8, 9, 10, 1, 2, 3]`,\n right: `[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]`', /tmp/tmp48vlodkf.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let len = list.len() as isize;\n    for i in 0..len {\n        result.push(list[(i + m) % len as isize]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122585,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmpgiihsus1.rs:6:21\n  |\n6 |         result.push(list[(i + m) % len as isize]);\n  |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    let mut list_len = list.len();\n    let mut m = m % list_len;\n    for i in 0..list_len {\n        result.push(list[(list_len - m + i) % list_len]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpe58er30_.rs:5:21\n  |\n5 |     let mut m = m % list_len;\n  |                     ^^^^^^^^ expected `isize`, found `usize`\n\nerror[E0277]: cannot mod `isize` by `usize`\n --> /tmp/tmpe58er30_.rs:5:19\n  |\n5 |     let mut m = m % list_len;\n  |                   ^ no implementation for `isize % usize`\n  |\n  = help: the trait `Rem<usize>` is not implemented for `isize`\n  = help: the following other types implement trait `Rem<Rhs>`:\n            <&'a f32 as Rem<f32>>\n            <&'a f64 as Rem<f64>>\n            <&'a i128 as Rem<i128>>\n            <&'a i16 as Rem<i16>>\n            <&'a i32 as Rem<i32>>\n            <&'a i64 as Rem<i64>>\n            <&'a i8 as Rem<i8>>\n            <&'a isize as Rem<isize>>\n          and 54 others\n\nerror[E0308]: mismatched types\n --> /tmp/tmpe58er30_.rs:7:38\n  |\n7 |         result.push(list[(list_len - m + i) % list_len]);\n  |                                      ^ expected `usize`, found `isize`\n\nerror[E0277]: cannot subtract `isize` from `usize`\n --> /tmp/tmpe58er30_.rs:7:36\n  |\n7 |         result.push(list[(list_len - m + i) % list_len]);\n  |                                    ^ no implementation for `usize - isize`\n  |\n  = help: the trait `Sub<isize>` is not implemented for `usize`\n  = help: the following other types implement trait `Sub<Rhs>`:\n            <&'a f32 as Sub<f32>>\n            <&'a f64 as Sub<f64>>\n            <&'a i128 as Sub<i128>>\n            <&'a i16 as Sub<i16>>\n            <&'a i32 as Sub<i32>>\n            <&'a i64 as Sub<i64>>\n            <&'a i8 as Sub<i8>>\n            <&'a isize as Sub<isize>>\n          and 48 others\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut list = list;\n    let mut m = m;\n    let len = list.len() as isize;\n    if m > len {\n        m = m % len;\n    }\n    let mut i = 0;\n    while i < m {\n        let temp = list[len - 1];\n        for j in (1..len).rev() {\n            list[j] = list[j - 1];\n        }\n        list[0] = temp;\n        i += 1;\n    }\n    list\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122586,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpw67ktfoi.rs:11:20\n   |\n11 |         let temp = list[len - 1];\n   |                    ^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpw67ktfoi.rs:13:13\n   |\n13 |             list[j] = list[j - 1];\n   |             ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpw67ktfoi.rs:13:23\n   |\n13 |             list[j] = list[j - 1];\n   |                       ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut list = list;\n    let mut m = m;\n    let n = list.len() as isize;\n    if m > n {\n        m = m % n;\n    }\n    let mut i = 0;\n    while i < m {\n        let temp = list[n - 1];\n        for j in (1..n).rev() {\n            list[j] = list[j - 1];\n        }\n        list[0] = temp;\n        i += 1;\n    }\n    list\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpeccf7b3_.rs:11:20\n   |\n11 |         let temp = list[n - 1];\n   |                    ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpeccf7b3_.rs:13:13\n   |\n13 |             list[j] = list[j - 1];\n   |             ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpeccf7b3_.rs:13:23\n   |\n13 |             list[j] = list[j - 1];\n   |                       ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut new_list = Vec::new();\n    let n = list.len();\n    let m = m % n;\n    for i in 0..n {\n        new_list.push(list[(i + m) % n]);\n    }\n    new_list\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122586,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpxbn1ienm.rs:5:17\n  |\n5 |     let m = m % n;\n  |                 ^ expected `isize`, found `usize`\n\nerror[E0277]: cannot mod `isize` by `usize`\n --> /tmp/tmpxbn1ienm.rs:5:15\n  |\n5 |     let m = m % n;\n  |               ^ no implementation for `isize % usize`\n  |\n  = help: the trait `Rem<usize>` is not implemented for `isize`\n  = help: the following other types implement trait `Rem<Rhs>`:\n            <&'a f32 as Rem<f32>>\n            <&'a f64 as Rem<f64>>\n            <&'a i128 as Rem<i128>>\n            <&'a i16 as Rem<i16>>\n            <&'a i32 as Rem<i32>>\n            <&'a i64 as Rem<i64>>\n            <&'a i8 as Rem<i8>>\n            <&'a isize as Rem<isize>>\n          and 54 others\n\nerror[E0308]: mismatched types\n --> /tmp/tmpxbn1ienm.rs:7:33\n  |\n7 |         new_list.push(list[(i + m) % n]);\n  |                                 ^ expected `usize`, found `isize`\n\nerror[E0277]: cannot add `isize` to `usize`\n --> /tmp/tmpxbn1ienm.rs:7:31\n  |\n7 |         new_list.push(list[(i + m) % n]);\n  |                               ^ no implementation for `usize + isize`\n  |\n  = help: the trait `Add<isize>` is not implemented for `usize`\n  = help: the following other types implement trait `Add<Rhs>`:\n            <&'a f32 as Add<f32>>\n            <&'a f64 as Add<f64>>\n            <&'a i128 as Add<i128>>\n            <&'a i16 as Add<i16>>\n            <&'a i32 as Add<i32>>\n            <&'a i64 as Add<i64>>\n            <&'a i8 as Add<i8>>\n            <&'a isize as Add<isize>>\n          and 48 others\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut list = list;\n    let mut m = m;\n    let len = list.len();\n    if len == 0 {\n        return list;\n    }\n    if m < 0 {\n        m = m + len as isize;\n    }\n    let mut i = 0;\n    while i < m {\n        let last = list.pop().unwrap();\n        list.insert(0, last);\n        i += 1;\n    }\n    list\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122586,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut list = list.clone();\n    let n = list.len() as isize;\n    let m = m % n;\n    for i in 0..n {\n        let index = (i + m) % n;\n        result.push(list[index as usize]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122586,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[4, 5, 6, 7, 8, 9, 10, 1, 2, 3]`,\n right: `[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]`', /tmp/tmp9jxb7bhw.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut list = list;\n    let mut m = m;\n    while m > 0 {\n        let last = list.pop().unwrap();\n        result.push(last);\n        m -= 1;\n    }\n    result.reverse();\n    list.append(&mut result);\n    list\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122586,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]`,\n right: `[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]`', /tmp/tmp8snojjs2.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut list = list;\n    let mut m = m;\n    let n = list.len() as isize;\n    if m > n {\n        m = m % n;\n    }\n    let mut i = 0;\n    while i < m {\n        let temp = list[n - 1];\n        for j in (1..n).rev() {\n            list[j] = list[j - 1];\n        }\n        list[0] = temp;\n        i += 1;\n    }\n    list\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpeccf7b3_.rs:11:20\n   |\n11 |         let temp = list[n - 1];\n   |                    ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpeccf7b3_.rs:13:13\n   |\n13 |             list[j] = list[j - 1];\n   |             ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpeccf7b3_.rs:13:23\n   |\n13 |             list[j] = list[j - 1];\n   |                       ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut list = list;\n    let mut m = m;\n    if m > list.len() as isize {\n        m = m % list.len() as isize;\n    }\n    for _ in 0..m {\n        let last = list.pop().unwrap();\n        result.push(last);\n    }\n    result.append(&mut list);\n    result\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122586,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[10, 9, 8, 1, 2, 3, 4, 5, 6, 7]`,\n right: `[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]`', /tmp/tmpjtgwm73f.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let len = list.len() as isize;\n    let m = m % len;\n    for i in 0..len {\n        let index = (i + m) % len;\n        result.push(list[index as usize]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122586,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[4, 5, 6, 7, 8, 9, 10, 1, 2, 3]`,\n right: `[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]`', /tmp/tmpxh4n9pxr.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut result = vec![];\n    for i in 0..list.len() {\n        result.push(list[(i + m as usize) % list.len()]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122586,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[4, 5, 6, 7, 8, 9, 10, 1, 2, 3]`,\n right: `[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]`', /tmp/tmpgmrje0yx.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut list = list;\n    let mut m = m;\n    let mut result: Vec<isize> = Vec::new();\n    let n = list.len() as isize;\n    if m > n {\n        m = m % n;\n    }\n    for i in 0..n {\n        result.push(list[(n - m + i) as usize % n as usize]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122586,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut rotated_list = Vec::new();\n    let mut list_length = list.len();\n    let mut m = m % list_length;\n    for i in 0..list_length {\n        rotated_list.push(list[(list_length - m + i) % list_length]);\n    }\n    rotated_list\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122586,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmpi86latkd.rs:5:21\n  |\n5 |     let mut m = m % list_length;\n  |                     ^^^^^^^^^^^ expected `isize`, found `usize`\n\nerror[E0277]: cannot mod `isize` by `usize`\n --> /tmp/tmpi86latkd.rs:5:19\n  |\n5 |     let mut m = m % list_length;\n  |                   ^ no implementation for `isize % usize`\n  |\n  = help: the trait `Rem<usize>` is not implemented for `isize`\n  = help: the following other types implement trait `Rem<Rhs>`:\n            <&'a f32 as Rem<f32>>\n            <&'a f64 as Rem<f64>>\n            <&'a i128 as Rem<i128>>\n            <&'a i16 as Rem<i16>>\n            <&'a i32 as Rem<i32>>\n            <&'a i64 as Rem<i64>>\n            <&'a i8 as Rem<i8>>\n            <&'a isize as Rem<isize>>\n          and 54 others\n\nerror[E0308]: mismatched types\n --> /tmp/tmpi86latkd.rs:7:47\n  |\n7 |         rotated_list.push(list[(list_length - m + i) % list_length]);\n  |                                               ^ expected `usize`, found `isize`\n\nerror[E0277]: cannot subtract `isize` from `usize`\n --> /tmp/tmpi86latkd.rs:7:45\n  |\n7 |         rotated_list.push(list[(list_length - m + i) % list_length]);\n  |                                             ^ no implementation for `usize - isize`\n  |\n  = help: the trait `Sub<isize>` is not implemented for `usize`\n  = help: the following other types implement trait `Sub<Rhs>`:\n            <&'a f32 as Sub<f32>>\n            <&'a f64 as Sub<f64>>\n            <&'a i128 as Sub<i128>>\n            <&'a i16 as Sub<i16>>\n            <&'a i32 as Sub<i32>>\n            <&'a i64 as Sub<i64>>\n            <&'a i8 as Sub<i8>>\n            <&'a isize as Sub<isize>>\n          and 48 others\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut list = list;\n    let mut m = m;\n    let n = list.len() as isize;\n    m = m % n;\n    if m == 0 {\n        return list;\n    }\n    let mut temp = Vec::new();\n    for i in 0..m {\n        temp.push(list[(n - m + i) as usize]);\n    }\n    for i in (m..n).rev() {\n        list[i as usize] = list[(i - m) as usize];\n    }\n    for i in 0..m {\n        list[i as usize] = temp[i as usize];\n    }\n    list\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122586,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut list = list;\n    let mut m = m;\n    let n = list.len();\n    if m > n as isize {\n        m = m % n as isize;\n    }\n    let mut i = 0;\n    while i < m {\n        let x = list.pop().unwrap();\n        list.insert(0, x);\n        i += 1;\n    }\n    list\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122586,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut list = list;\n    let n = list.len() as isize;\n    let m = m % n;\n    let mut i = 0;\n    while i < m {\n        let temp = list[n - 1];\n        for j in (1..n).rev() {\n            list[j] = list[j - 1];\n        }\n        list[0] = temp;\n        i += 1;\n    }\n    list\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122585,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmpwve6ene5.rs:8:20\n  |\n8 |         let temp = list[n - 1];\n  |                    ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpwve6ene5.rs:10:13\n   |\n10 |             list[j] = list[j - 1];\n   |             ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpwve6ene5.rs:10:23\n   |\n10 |             list[j] = list[j - 1];\n   |                       ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let len = list.len();\n    let m = m % len as isize;\n    for i in 0..len {\n        result.push(list[(i + m as usize) % len]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122586,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[4, 5, 6, 7, 8, 9, 10, 1, 2, 3]`,\n right: `[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]`', /tmp/tmp_ce_iw2z.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut list = list;\n    let mut m = m;\n    while m > 0 {\n        let last = list.pop().unwrap();\n        list.insert(0, last);\n        m -= 1;\n    }\n    list\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665517287,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut list = list;\n    let mut m = m;\n    while m > 0 {\n        let last = list.pop().unwrap();\n        list.insert(0, last);\n        m -= 1;\n    }\n    list\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665517287,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    let mut list = list;\n    let mut m = m;\n    while m > 0 {\n        let last = list.pop().unwrap();\n        result.push(last);\n        m -= 1;\n    }\n    list.append(&mut result);\n    list\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122586,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5, 6, 7, 10, 9, 8]`,\n right: `[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]`', /tmp/tmpoy6iz2i5.rs:17:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..list.len() {\n        let index = (i as isize + m) % list.len() as isize;\n        result.push(list[index as usize]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122586,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[4, 5, 6, 7, 8, 9, 10, 1, 2, 3]`,\n right: `[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]`', /tmp/tmpiro7wocq.rs:13:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut list = list;\n    let mut m = m;\n    let n = list.len() as isize;\n    m = m % n;\n    if m == 0 {\n        return list;\n    }\n    let mut gcd = gcd(n, m);\n    while gcd != 0 {\n        let temp = list[(n - gcd) as usize];\n        let mut j = n - gcd;\n        while j >= gcd {\n            list[(j as usize)] = list[(j - gcd) as usize];\n            j -= gcd;\n        }\n        list[(gcd as usize)] = temp;\n        gcd -= 1;\n    }\n    list\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122586,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `gcd` in this scope\n  --> /tmp/tmppacv8wce.rs:10:19\n   |\n10 |     let mut gcd = gcd(n, m);\n   |                   ^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..list.len() {\n        let index = (i as isize + m) % list.len() as isize;\n        result.push(list[index as usize]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122586,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[4, 5, 6, 7, 8, 9, 10, 1, 2, 3]`,\n right: `[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]`', /tmp/tmpiro7wocq.rs:13:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut new_list = list.clone();\n    let n = new_list.len() as isize;\n    let m = m % n;\n    let mut i = 0;\n    while i < m {\n        let temp = new_list[n - 1];\n        new_list.remove(n - 1);\n        new_list.insert(0, temp);\n        i += 1;\n    }\n    new_list\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122586,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmpflpoaie2.rs:8:20\n  |\n8 |         let temp = new_list[n - 1];\n  |                    ^^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpflpoaie2.rs:9:25\n  |\n9 |         new_list.remove(n - 1);\n  |                         ^^^^^ expected `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n  |\n9 |         new_list.remove((n - 1).try_into().unwrap());\n  |                         +     +++++++++++++++++++++\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut list = list;\n    let mut m = m;\n    while m > 0 {\n        let x = list.pop().unwrap();\n        list.insert(0, x);\n        m -= 1;\n    }\n    list\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122586,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut list = list;\n    let mut m = m;\n    if m > list.len() as isize {\n        m = m % list.len() as isize;\n    }\n    let mut i = 0;\n    while i < m {\n        let last = list.pop().unwrap();\n        list.insert(0, last);\n        i += 1;\n    }\n    list\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122586,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut list = list;\n    let mut m = m;\n    if m > list.len() as isize {\n        m = m % list.len() as isize;\n    }\n    for _ in 0..m {\n        let last = list.pop().unwrap();\n        result.push(last);\n    }\n    result.append(&mut list);\n    result\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122586,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[10, 9, 8, 1, 2, 3, 4, 5, 6, 7]`,\n right: `[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]`', /tmp/tmpjtgwm73f.rs:19:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut list = list;\n    let m = m % list.len() as isize;\n    for _ in 0..m {\n        let last = list.pop().unwrap();\n        result.push(last);\n    }\n    result.append(&mut list);\n    result\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122586,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[10, 9, 8, 1, 2, 3, 4, 5, 6, 7]`,\n right: `[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]`', /tmp/tmp7707v6fo.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut new_list = Vec::new();\n    for i in 0..list.len() {\n        new_list.push(list[(i + m as usize) % list.len()]);\n    }\n    new_list\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122586,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[4, 5, 6, 7, 8, 9, 10, 1, 2, 3]`,\n right: `[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]`', /tmp/tmp6ggphcip.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut list = list;\n    let mut m = m;\n    while m > 0 {\n        let last = list.pop().unwrap();\n        result.push(last);\n        m -= 1;\n    }\n    let mut result = result.iter().rev().cloned().collect::<Vec<isize>>();\n    result.append(&mut list);\n    result\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122586,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut new_list = Vec::new();\n    let len = list.len() as isize;\n    let m = m % len;\n    for i in 0..len {\n        new_list.push(list[(len - m + i) as usize % len as usize]);\n    }\n    new_list\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122586,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut list = list;\n    let mut m = m;\n    while m > 0 {\n        let last = list.pop().unwrap();\n        result.push(last);\n        m -= 1;\n    }\n    list.append(&mut result);\n    list\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122585,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5, 6, 7, 10, 9, 8]`,\n right: `[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]`', /tmp/tmpoc9jsmz1.rs:17:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut list = list;\n    let mut m = m;\n    let n = list.len() as isize;\n    m = m % n;\n    let mut gcd = gcd(m, n);\n    while gcd > 0 {\n        let j = n - m;\n        let mut temp = list[j as usize];\n        let mut i = j;\n        while i != 0 {\n            list[i as usize] = list[(i - m) as usize];\n            i = i - m;\n        }\n        list[0] = temp;\n        gcd = gcd - 1;\n    }\n    list\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122586,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `gcd` in this scope\n --> /tmp/tmpkz1wvfwt.rs:7:19\n  |\n7 |     let mut gcd = gcd(m, n);\n  |                   ^^^ not found in this scope\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut list = list;\n    let mut m = m;\n    let n = list.len() as isize;\n    if m > n {\n        m = m % n;\n    }\n    let mut i = 0;\n    while i < m {\n        let temp = list[n - 1];\n        for j in (1..n).rev() {\n            list[j] = list[j - 1];\n        }\n        list[0] = temp;\n        i += 1;\n    }\n    list\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpeccf7b3_.rs:11:20\n   |\n11 |         let temp = list[n - 1];\n   |                    ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpeccf7b3_.rs:13:13\n   |\n13 |             list[j] = list[j - 1];\n   |             ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpeccf7b3_.rs:13:23\n   |\n13 |             list[j] = list[j - 1];\n   |                       ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut list_len = list.len() as isize;\n    let mut m = m % list_len;\n    if m < 0 {\n        m = m + list_len;\n    }\n    for i in 0..list_len {\n        result.push(list[(list_len - m + i) as usize % list.len()]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122586,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut list = list;\n    let mut m = m;\n    let n = list.len() as isize;\n    if m > n {\n        m = m % n;\n    }\n    let mut i = 0;\n    while i < m {\n        let temp = list[n - 1];\n        for j in (1..n).rev() {\n            list[j] = list[j - 1];\n        }\n        list[0] = temp;\n        i += 1;\n    }\n    list\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpeccf7b3_.rs:11:20\n   |\n11 |         let temp = list[n - 1];\n   |                    ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpeccf7b3_.rs:13:13\n   |\n13 |             list[j] = list[j - 1];\n   |             ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpeccf7b3_.rs:13:23\n   |\n13 |             list[j] = list[j - 1];\n   |                       ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut res = Vec::new();\n    let mut list = list;\n    let len = list.len();\n    for _ in 0..m {\n        let last = list.pop().unwrap();\n        res.push(last);\n    }\n    res.append(&mut list);\n    res\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122586,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[10, 9, 8, 1, 2, 3, 4, 5, 6, 7]`,\n right: `[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]`', /tmp/tmp3e3n4s1t.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut result = list.clone();\n    for _ in 0..m {\n        let last = result.pop().unwrap();\n        result.insert(0, last);\n    }\n    result\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122586,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut new_list = Vec::new();\n    let len = list.len() as isize;\n    for i in 0..len {\n        new_list.push(list[((i + m) % len) as usize]);\n    }\n    new_list\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122585,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[4, 5, 6, 7, 8, 9, 10, 1, 2, 3]`,\n right: `[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]`', /tmp/tmp2n2j0ha_.rs:13:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut list = list;\n    let mut m = m;\n    while m > 0 {\n        let last = list.pop().unwrap();\n        result.insert(0, last);\n        m -= 1;\n    }\n    list.append(&mut result);\n    list\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122586,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]`,\n right: `[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]`', /tmp/tmpdabxnfmr.rs:17:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut list = list;\n    let mut m = m;\n    while m > 0 {\n        let last = list.pop().unwrap();\n        result.push(last);\n        m -= 1;\n    }\n    result.reverse();\n    list.append(&mut result);\n    list\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122586,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]`,\n right: `[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]`', /tmp/tmp8snojjs2.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut new_list = list.clone();\n    let mut m = m;\n    while m > 0 {\n        let last = new_list.pop().unwrap();\n        new_list.insert(0, last);\n        m -= 1;\n    }\n    new_list\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122586,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut list = list;\n    let mut m = m;\n    if m < 0 {\n        m = list.len() as isize + m;\n    }\n    let mut i = 0;\n    while i < m {\n        let last = list.pop().unwrap();\n        list.insert(0, last);\n        i += 1;\n    }\n    list\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122586,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    let n = list.len();\n    for i in 0..n {\n        result.push(list[(i + m as usize) % n]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122586,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[4, 5, 6, 7, 8, 9, 10, 1, 2, 3]`,\n right: `[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]`', /tmp/tmpfy2btsgu.rs:13:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let n = list.len() as isize;\n    for i in 0..n {\n        result.push(list[((i + m) % n) as usize]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122586,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[4, 5, 6, 7, 8, 9, 10, 1, 2, 3]`,\n right: `[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]`', /tmp/tmpk2f3c3m7.rs:13:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut list = list;\n    let n = list.len() as isize;\n    let m = m % n;\n    let mut i = 0;\n    while i < m {\n        let x = list.pop().unwrap();\n        list.insert(0, x);\n        i += 1;\n    }\n    list\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122586,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut index = 0;\n    for i in 0..list.len() {\n        index = (i + m as usize) % list.len();\n        result.push(list[index]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122586,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[4, 5, 6, 7, 8, 9, 10, 1, 2, 3]`,\n right: `[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]`', /tmp/tmp8p4_yr05.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut list = list;\n    let mut m = m;\n    while m > 0 {\n        let last = list.pop().unwrap();\n        list.insert(0, last);\n        m -= 1;\n    }\n    list\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665517287,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut list = list;\n    let mut m = m;\n    let n = list.len() as isize;\n    m = m % n;\n    for _ in 0..m {\n        let last = list.pop().unwrap();\n        list.insert(0, last);\n    }\n    list\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122585,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut list = list;\n    let mut m = m;\n    let n = list.len() as isize;\n    if m > n {\n        m = m % n;\n    }\n    for _ in 0..m {\n        let last = list.pop().unwrap();\n        list.insert(0, last);\n    }\n    list\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122586,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut list = list;\n    let mut i = 0;\n    while i < m {\n        let last = list.pop().unwrap();\n        result.push(last);\n        i = i + 1;\n    }\n    let mut i = 0;\n    while i < list.len() {\n        result.push(list[i]);\n        i = i + 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122586,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[10, 9, 8, 1, 2, 3, 4, 5, 6, 7]`,\n right: `[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]`', /tmp/tmp9pkbwlzb.rs:21:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let len = list.len() as isize;\n    for i in 0..len {\n        result.push(list[((i + m) % len) as usize]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122586,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[4, 5, 6, 7, 8, 9, 10, 1, 2, 3]`,\n right: `[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]`', /tmp/tmpd0walfdd.rs:13:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut i = 0;\n    let mut j = 0;\n    let len = list.len();\n    while i < len {\n        if j < m {\n            result.push(list[len - m + j]);\n        } else {\n            result.push(list[j - m]);\n        }\n        i += 1;\n        j += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122586,
      "stdout": "",
      "stderr": "error[E0308]: mismatched types\n --> /tmp/tmp1kzkjyc2.rs:9:36\n  |\n9 |             result.push(list[len - m + j]);\n  |                                    ^ expected `usize`, found `isize`\n\nerror[E0277]: cannot subtract `isize` from `usize`\n --> /tmp/tmp1kzkjyc2.rs:9:34\n  |\n9 |             result.push(list[len - m + j]);\n  |                                  ^ no implementation for `usize - isize`\n  |\n  = help: the trait `Sub<isize>` is not implemented for `usize`\n  = help: the following other types implement trait `Sub<Rhs>`:\n            <&'a f32 as Sub<f32>>\n            <&'a f64 as Sub<f64>>\n            <&'a i128 as Sub<i128>>\n            <&'a i16 as Sub<i16>>\n            <&'a i32 as Sub<i32>>\n            <&'a i64 as Sub<i64>>\n            <&'a i8 as Sub<i8>>\n            <&'a isize as Sub<isize>>\n          and 48 others\n\nerror[E0308]: mismatched types\n --> /tmp/tmp1kzkjyc2.rs:9:40\n  |\n9 |             result.push(list[len - m + j]);\n  |                                        ^ expected `usize`, found `isize`\n\nerror[E0277]: cannot add `isize` to `usize`\n --> /tmp/tmp1kzkjyc2.rs:9:38\n  |\n9 |             result.push(list[len - m + j]);\n  |                                      ^ no implementation for `usize + isize`\n  |\n  = help: the trait `Add<isize>` is not implemented for `usize`\n  = help: the following other types implement trait `Add<Rhs>`:\n            <&'a f32 as Add<f32>>\n            <&'a f64 as Add<f64>>\n            <&'a i128 as Add<i128>>\n            <&'a i16 as Add<i16>>\n            <&'a i32 as Add<i32>>\n            <&'a i64 as Add<i64>>\n            <&'a i8 as Add<i8>>\n            <&'a isize as Add<isize>>\n          and 48 others\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp1kzkjyc2.rs:11:25\n   |\n11 |             result.push(list[j - m]);\n   |                         ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   =",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut list = list;\n    let mut m = m;\n    while m > 0 {\n        let temp = list.pop().unwrap();\n        list.insert(0, temp);\n        m -= 1;\n    }\n    list\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122586,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut list = list;\n    let mut m = m;\n    let mut i = 0;\n    while m > 0 {\n        let temp = list[list.len() - 1];\n        for i in (0..list.len()).rev() {\n            list[i] = list[i - 1];\n        }\n        list[0] = temp;\n        m -= 1;\n    }\n    list\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122586,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to subtract with overflow', /tmp/tmpk9g2ha8n.rs:9:28\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut new_list = Vec::new();\n    let len = list.len() as isize;\n    for i in 0..len {\n        new_list.push(list[((i + m) % len) as usize]);\n    }\n    new_list\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122585,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[4, 5, 6, 7, 8, 9, 10, 1, 2, 3]`,\n right: `[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]`', /tmp/tmp2n2j0ha_.rs:13:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut list = list;\n    let m = m % list.len() as isize;\n    let mut i = 0;\n    while i < m {\n        let last = list.pop().unwrap();\n        list.insert(0, last);\n        i += 1;\n    }\n    list\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122586,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut result = list.clone();\n    let len = result.len();\n    for i in 0..len {\n        result[(i + m as usize) % len] = list[i];\n    }\n    result\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122586,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut rotated = Vec::new();\n    let n = list.len() as isize;\n    for i in 0..n {\n        rotated.push(list[((i + m) % n) as usize]);\n    }\n    rotated\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122586,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[4, 5, 6, 7, 8, 9, 10, 1, 2, 3]`,\n right: `[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]`', /tmp/tmpk_p0tm5z.rs:13:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut list = list;\n    let len = list.len() as isize;\n    let m = m % len;\n    let mut temp = Vec::new();\n    for i in 0..m {\n        temp.push(list[(len - m + i) as usize]);\n    }\n    for i in 0..(len - m) {\n        list[(len - m + i) as usize] = list[i as usize];\n    }\n    for i in 0..m {\n        list[i as usize] = temp[i as usize];\n    }\n    list\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122586,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'index out of bounds: the len is 10 but the index is 10', /tmp/tmpbiq4b_tl.rs:11:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut list = list;\n    let mut m = m;\n    let n = list.len() as isize;\n    m = m % n;\n    if m == 0 {\n        return list;\n    }\n    let mut i = 0;\n    while i < m {\n        let temp = list[n - 1];\n        for j in (0..n - 1).rev() {\n            list[j + 1] = list[j];\n        }\n        list[0] = temp;\n        i += 1;\n    }\n    list\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122585,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzttodgfv.rs:12:20\n   |\n12 |         let temp = list[n - 1];\n   |                    ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzttodgfv.rs:14:13\n   |\n14 |             list[j + 1] = list[j];\n   |             ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzttodgfv.rs:14:27\n   |\n14 |             list[j + 1] = list[j];\n   |                           ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let len = list.len() as isize;\n    for i in 0..len {\n        let index = (i + m) % len;\n        result.push(list[index as usize]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122585,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[4, 5, 6, 7, 8, 9, 10, 1, 2, 3]`,\n right: `[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]`', /tmp/tmps8na6jw3.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut list = list;\n    let mut m = m;\n    let n = list.len() as isize;\n    m = m % n;\n    for _ in 0..m {\n        let x = list.pop().unwrap();\n        list.insert(0, x);\n    }\n    list\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122586,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    let mut i = 0;\n    let mut j = list.len() - 1;\n    while i < list.len() {\n        if j < 0 {\n            j = list.len() - 1;\n        }\n        result.push(list[j as usize]);\n        i += 1;\n        j -= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122586,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'attempt to subtract with overflow', /tmp/tmptb49e6ct.rs:12:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let len = list.len();\n    for i in 0..len {\n        result.push(list[(i + m as usize) % len]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665517287,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[4, 5, 6, 7, 8, 9, 10, 1, 2, 3]`,\n right: `[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]`', /tmp/tmpi90q9pp3.rs:13:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut list = list;\n    let mut m = m;\n    let len = list.len();\n    let mut i = 0;\n    while i < m {\n        let last = list.pop().unwrap();\n        list.insert(0, last);\n        i += 1;\n    }\n    list\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122586,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut new_list = Vec::new();\n    let mut index = 0;\n    for i in 0..list.len() {\n        index = (i + m as usize) % list.len();\n        new_list.push(list[index]);\n    }\n    new_list\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122586,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[4, 5, 6, 7, 8, 9, 10, 1, 2, 3]`,\n right: `[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]`', /tmp/tmpz6ziadub.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut list = list;\n    let mut m = m;\n    let len = list.len();\n    if m > 0 {\n        m = m % len as isize;\n        for _ in 0..m {\n            let last = list.pop().unwrap();\n            list.insert(0, last);\n        }\n    }\n    list\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122586,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut res = Vec::new();\n    let n = list.len() as isize;\n    for i in 0..n {\n        res.push(list[((i + m) % n) as usize]);\n    }\n    res\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122586,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[4, 5, 6, 7, 8, 9, 10, 1, 2, 3]`,\n right: `[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]`', /tmp/tmpncwh_pm8.rs:13:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut i = 0;\n    while i < list.len() {\n        result.push(list[((i as isize) + m) as usize % list.len()]);\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665517287,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[4, 5, 6, 7, 8, 9, 10, 1, 2, 3]`,\n right: `[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]`', /tmp/tmpcg0bpwhl.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut index = 0;\n    for i in 0..list.len() {\n        index = (i + m as usize) % list.len();\n        result.push(list[index]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122586,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[4, 5, 6, 7, 8, 9, 10, 1, 2, 3]`,\n right: `[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]`', /tmp/tmp8p4_yr05.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut list = list;\n    let mut m = m;\n    let len = list.len() as isize;\n    m = m % len;\n    if m == 0 {\n        return list;\n    }\n    let mut temp = Vec::new();\n    for i in 0..m {\n        temp.push(list[(len - m + i) as usize]);\n    }\n    for i in (m..len).rev() {\n        list[i as usize] = list[(i - m) as usize];\n    }\n    for i in 0..m {\n        list[i as usize] = temp[i as usize];\n    }\n    list\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122587,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut list = list;\n    let mut m = m;\n    let len = list.len() as isize;\n    m = m % len;\n    if m < 0 {\n        m = m + len;\n    }\n    let mut i = 0;\n    while i < m {\n        let last = list.pop().unwrap();\n        list.insert(0, last);\n        i += 1;\n    }\n    list\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122587,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut list = list;\n    let mut m = m;\n    let n = list.len() as isize;\n    if m > n {\n        m = m % n;\n    }\n    let mut i = 0;\n    while i < m {\n        let x = list.pop().unwrap();\n        list.insert(0, x);\n        i += 1;\n    }\n    list\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122587,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut list = list;\n    let mut m = m;\n    let len = list.len();\n    if m > len as isize {\n        m = m % len as isize;\n    }\n    let mut temp = Vec::new();\n    for i in 0..m {\n        temp.push(list[len - m as usize + i as usize]);\n    }\n    for i in 0..len - m as usize {\n        list[len - i as usize - 1] = list[len - m as usize - i as usize - 1];\n    }\n    for i in 0..m {\n        list[i as usize] = temp[i as usize];\n    }\n    list\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122587,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..list.len() {\n        let index = (i as isize + m) % list.len() as isize;\n        result.push(list[index as usize]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122586,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[4, 5, 6, 7, 8, 9, 10, 1, 2, 3]`,\n right: `[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]`', /tmp/tmpiro7wocq.rs:13:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut list = list;\n    for _ in 0..m {\n        let last = list.pop().unwrap();\n        result.push(last);\n    }\n    result.append(&mut list);\n    result\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122587,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[10, 9, 8, 1, 2, 3, 4, 5, 6, 7]`,\n right: `[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]`', /tmp/tmpsjug8jjw.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut new_list = list.clone();\n    let len = new_list.len() as isize;\n    let m = m % len;\n    let mut i = 0;\n    while i < m {\n        let temp = new_list[len - 1];\n        for j in (0..len - 1).rev() {\n            new_list[j + 1] = new_list[j];\n        }\n        new_list[0] = temp;\n        i += 1;\n    }\n    new_list\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122586,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmpr8xn9rww.rs:8:20\n  |\n8 |         let temp = new_list[len - 1];\n  |                    ^^^^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpr8xn9rww.rs:10:13\n   |\n10 |             new_list[j + 1] = new_list[j];\n   |             ^^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpr8xn9rww.rs:10:31\n   |\n10 |             new_list[j + 1] = new_list[j];\n   |                               ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut new_list = Vec::new();\n    for i in 0..list.len() {\n        new_list.push(list[(i + m as usize) % list.len()]);\n    }\n    new_list\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122586,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[4, 5, 6, 7, 8, 9, 10, 1, 2, 3]`,\n right: `[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]`', /tmp/tmp6ggphcip.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut list = list;\n    let mut m = m;\n    let n = list.len() as isize;\n    if m > n {\n        m = m % n;\n    }\n    let mut i = n - m;\n    while i > 0 {\n        let temp = list[i as usize];\n        list[i as usize] = list[(i - 1) as usize];\n        list[(i - 1) as usize] = temp;\n        i -= 1;\n    }\n    list\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122587,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[8, 1, 2, 3, 4, 5, 6, 7, 9, 10]`,\n right: `[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]`', /tmp/tmpv1eivrkb.rs:21:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut list = list;\n    let mut m = m;\n    let n = list.len() as isize;\n    m = m % n;\n    let mut i = 0;\n    while i < m {\n        let temp = list[n - 1];\n        for j in (1..n).rev() {\n            list[j] = list[j - 1];\n        }\n        list[0] = temp;\n        i += 1;\n    }\n    list\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122586,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmptp3j24qf.rs:9:20\n  |\n9 |         let temp = list[n - 1];\n  |                    ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmptp3j24qf.rs:11:13\n   |\n11 |             list[j] = list[j - 1];\n   |             ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmptp3j24qf.rs:11:23\n   |\n11 |             list[j] = list[j - 1];\n   |                       ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut result = list.clone();\n    let n = result.len() as isize;\n    for i in 0..n {\n        let j = (i + m) % n;\n        result[j as usize] = list[i as usize];\n    }\n    result\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122587,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut list = list;\n    let mut m = m;\n    let n = list.len() as isize;\n    m = m % n;\n    let mut i = 0;\n    while i < m {\n        let temp = list[n - 1];\n        for j in (0..n - 1).rev() {\n            list[j + 1] = list[j];\n        }\n        list[0] = temp;\n        i += 1;\n    }\n    list\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122585,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n --> /tmp/tmp8q49s74n.rs:9:20\n  |\n9 |         let temp = list[n - 1];\n  |                    ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n  = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp8q49s74n.rs:11:13\n   |\n11 |             list[j + 1] = list[j];\n   |             ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp8q49s74n.rs:11:27\n   |\n11 |             list[j + 1] = list[j];\n   |                           ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut list = list;\n    let mut m = m;\n    let n = list.len() as isize;\n    if m > n {\n        m = m % n;\n    }\n    let mut i = 0;\n    while i < m {\n        let temp = list[n - 1];\n        for j in (1..n).rev() {\n            list[j] = list[j - 1];\n        }\n        list[0] = temp;\n        i += 1;\n    }\n    list\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1665517286,
      "stdout": "",
      "stderr": "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpeccf7b3_.rs:11:20\n   |\n11 |         let temp = list[n - 1];\n   |                    ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpeccf7b3_.rs:13:13\n   |\n13 |             list[j] = list[j - 1];\n   |             ^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpeccf7b3_.rs:13:23\n   |\n13 |             list[j] = list[j - 1];\n   |                       ^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut i = 0;\n    let mut j = list.len() - 1;\n    while i < list.len() {\n        result.push(list[j]);\n        j = (j + m as usize) % list.len();\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122587,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[10, 3, 6, 9, 2, 5, 8, 1, 4, 7]`,\n right: `[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]`', /tmp/tmpei2u0kx0.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    for i in 0..list.len() {\n        result.push(list[(i + m as usize) % list.len()]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122585,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[4, 5, 6, 7, 8, 9, 10, 1, 2, 3]`,\n right: `[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]`', /tmp/tmp9rlw8pk_.rs:12:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut list = list;\n    let len = list.len() as isize;\n    let m = m % len;\n    let mut i = 0;\n    while i < m {\n        let temp = list.pop().unwrap();\n        list.insert(0, temp);\n        i += 1;\n    }\n    list\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122587,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut index = 0;\n    for i in 0..list.len() {\n        index = (i + m as usize) % list.len();\n        result.push(list[index]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122586,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[4, 5, 6, 7, 8, 9, 10, 1, 2, 3]`,\n right: `[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]`', /tmp/tmp8p4_yr05.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut list = list;\n    let mut m = m;\n    while m > 0 {\n        let last = list.pop().unwrap();\n        result.push(last);\n        m -= 1;\n    }\n    result.reverse();\n    list.append(&mut result);\n    list\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122586,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]`,\n right: `[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]`', /tmp/tmp8snojjs2.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut result: Vec<isize> = Vec::new();\n    let mut list_len = list.len() as isize;\n    let mut m = m % list_len;\n    if m < 0 {\n        m = m + list_len;\n    }\n    for i in 0..list_len {\n        result.push(list[(i + m) as usize % list.len()]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122587,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[4, 5, 6, 7, 8, 9, 10, 1, 2, 3]`,\n right: `[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]`', /tmp/tmp3_l3yno5.rs:17:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut rotated_list = list.clone();\n    for _ in 0..m {\n        let last_element = rotated_list.pop().unwrap();\n        rotated_list.insert(0, last_element);\n    }\n    rotated_list\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122587,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut list = list;\n    let mut m = m;\n    let mut i = 0;\n    let mut j = 0;\n    let mut temp = 0;\n    let mut n = list.len() as isize;\n    m = m % n;\n    while i < gcd(m, n) {\n        temp = list[i as usize];\n        j = i;\n        while true {\n            let k = j + m;\n            if k >= n {\n                k = k - n;\n            }\n            if k == i {\n                break;\n            }\n            list[j as usize] = list[k as usize];\n            j = k;\n        }\n        list[j as usize] = temp;\n        i += 1;\n    }\n    list\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122586,
      "stdout": "",
      "stderr": "error[E0425]: cannot find function `gcd` in this scope\n  --> /tmp/tmpahgnimwx.rs:10:15\n   |\n10 |     while i < gcd(m, n) {\n   |               ^^^ not found in this scope\n\nwarning: denote infinite loops with `loop { ... }`\n  --> /tmp/tmpahgnimwx.rs:13:9\n   |\n13 |         while true {\n   |         ^^^^^^^^^^ help: use `loop`\n   |\n   = note: `#[warn(while_true)]` on by default\n\nerror: aborting due to previous error; 1 warning emitted\n\nFor more information about this error, try `rustc --explain E0425`.\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut list_iter = list.iter();\n    let mut m_iter = m;\n\n    while m_iter > 0 {\n        let item = list_iter.next().unwrap();\n        result.push(*item);\n        m_iter -= 1;\n    }\n\n    let mut list_iter = list.iter();\n    while m_iter < 0 {\n        let item = list_iter.next().unwrap();\n        result.push(*item);\n        m_iter += 1;\n    }\n\n    result\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122587,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3]`,\n right: `[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]`', /tmp/tmp8bjaxm8e.rs:25:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut list = list;\n    let mut m = m;\n    while m > 0 {\n        let temp = list.pop().unwrap();\n        result.push(temp);\n        m -= 1;\n    }\n    result.reverse();\n    list.append(&mut result);\n    list\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122587,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]`,\n right: `[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]`', /tmp/tmpakw2yx6l.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut list = list;\n    let mut m = m;\n    if m < 0 {\n        m = list.len() as isize + m;\n    }\n    let mut temp = Vec::new();\n    for i in 0..m {\n        temp.push(list.pop().unwrap());\n    }\n    list.append(&mut temp);\n    list\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122587,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5, 6, 7, 10, 9, 8]`,\n right: `[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]`', /tmp/tmpnj14gvlm.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut index = 0;\n    for i in m..list.len() as isize {\n        result.push(list[i as usize]);\n        index += 1;\n    }\n    for i in 0..m {\n        result.push(list[i as usize]);\n        index += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122587,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[4, 5, 6, 7, 8, 9, 10, 1, 2, 3]`,\n right: `[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]`', /tmp/tmpbn2yk1uy.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut list = list;\n    for _ in 0..m {\n        let last = list.pop().unwrap();\n        result.push(last);\n    }\n    list.append(&mut result);\n    list\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122586,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5, 6, 7, 10, 9, 8]`,\n right: `[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]`', /tmp/tmpv9mahg6h.rs:15:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let len = list.len();\n    for i in 0..len {\n        result.push(list[(i + len - m as usize) % len]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122586,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut list = list;\n    let mut m = m;\n    while m > 0 {\n        let last = list.pop().unwrap();\n        result.push(last);\n        m -= 1;\n    }\n    result.append(&mut list);\n    result\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122587,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[10, 9, 8, 1, 2, 3, 4, 5, 6, 7]`,\n right: `[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]`', /tmp/tmp5561opsi.rs:17:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut list = list;\n    let mut m = m;\n    let mut temp = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut n = list.len();\n    while m > 0 {\n        temp = list[n - 1];\n        for i in (0..n - 1).rev() {\n            list[i + 1] = list[i];\n        }\n        list[0] = temp;\n        m -= 1;\n    }\n    list\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122587,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nfn rotate_right(list: Vec<isize>, m: isize) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut list = list;\n    let mut m = m;\n    while m > 0 {\n        let last = list.pop().unwrap();\n        result.push(last);\n        m -= 1;\n    }\n    result.reverse();\n    list.append(&mut result);\n    list\n}\n\nfn main() {\n    let candidate = rotate_right;\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3), vec![8, 9, 10, 1, 2, 3, 4, 5, 6, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), vec![9, 10, 1, 2, 3, 4, 5, 6, 7, 8]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5), vec![6, 7, 8, 9, 10, 1, 2, 3, 4, 5]);\n}\n",
      "timestamp": 1666122586,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]`,\n right: `[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]`', /tmp/tmp8snojjs2.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    }
  ]
}