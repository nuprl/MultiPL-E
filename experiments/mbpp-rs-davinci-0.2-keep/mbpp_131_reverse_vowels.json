{
  "name": "mbpp_131_reverse_vowels",
  "language": "rs",
  "prompt": "/// Write a python function to reverse only the vowels of a given string (where y is not a vowel).\nfn reverse_vowels(str1: String) -> String {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_131_reverse_vowels.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\nfn main() {\n    let candidate = reverse_vowels;\n    assert_eq!(candidate(String::from(\"Python\")), String::from(\"Python\"));\n    assert_eq!(candidate(String::from(\"USA\")), String::from(\"ASU\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"ab\"));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    let mut str2 = str1.clone();\n    let mut i = 0;\n    let mut j = str2.len() - 1;\n    while i < j {\n        if is_vowel(str2.chars().nth(i).unwrap()) && is_vowel(str2.chars().nth(j).unwrap()) {\n            str2.replace_range(i..i + 1, &str2.chars().nth(j).unwrap().to_string());\n            str2.replace_range(j..j + 1, &str2.chars().nth(i).unwrap().to_string());\n            i += 1;\n            j -= 1;\n        } else if is_vowel(str2.chars().nth(i).unwrap()) {\n            j -= 1;\n        } else if is_vowel(str2.chars().nth(j).unwrap()) {\n            i += 1;\n        } else {\n            i += 1;\n            j -= 1;\n        }\n    }\n    str2",
    "    let mut str1 = str1.chars().collect::<Vec<char>>();\n    let mut i = 0;\n    let mut j = str1.len() - 1;\n    while i < j {\n        if !is_vowel(str1[i]) {\n            i += 1;\n            continue;\n        }\n        if !is_vowel(str1[j]) {\n            j -= 1;\n            continue;\n        }\n        str1.swap(i, j);\n        i += 1;\n        j -= 1;\n    }\n    str1.into_iter().collect::<String>()",
    "    let vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut str1_chars: Vec<char> = str1.chars().collect();\n    let mut i = 0;\n    let mut j = str1_chars.len() - 1;\n    while i < j {\n        if vowels.contains(&str1_chars[i]) && vowels.contains(&str1_chars[j]) {\n            str1_chars.swap(i, j);\n            i += 1;\n            j -= 1;\n        } else if vowels.contains(&str1_chars[i]) {\n            j -= 1;\n        } else if vowels.contains(&str1_chars[j]) {\n            i += 1;\n        } else {\n            i += 1;\n            j -= 1;\n        }\n    }\n    str1_chars.iter().collect()",
    "    let mut str2 = String::new();\n    let mut vowels: Vec<char> = Vec::new();\n    for c in str1.chars() {\n        if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' {\n            vowels.push(c);\n        }\n    }\n    vowels.reverse();\n    let mut i = 0;\n    for c in str1.chars() {\n        if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' {\n            str2.push(vowels[i]);\n            i += 1;\n        } else {\n            str2.push(c);\n        }\n    }\n    str2",
    "    let mut str2 = str1.chars().collect::<Vec<char>>();\n    let mut i = 0;\n    let mut j = str2.len() - 1;\n    while i < j {\n        if !is_vowel(str2[i]) {\n            i += 1;\n            continue;\n        }\n        if !is_vowel(str2[j]) {\n            j -= 1;\n            continue;\n        }\n        str2.swap(i, j);\n        i += 1;\n        j -= 1;\n    }\n    str2.iter().collect()",
    "    let mut str2 = str1.clone();\n    let mut str2_chars = str2.chars().collect::<Vec<char>>();\n    let mut i = 0;\n    let mut j = str2_chars.len() - 1;\n    while i < j {\n        if !is_vowel(str2_chars[i]) {\n            i += 1;\n            continue;\n        }\n        if !is_vowel(str2_chars[j]) {\n            j -= 1;\n            continue;\n        }\n        str2_chars.swap(i, j);\n        i += 1;\n        j -= 1;\n    }\n    str2_chars.into_iter().collect()",
    "    let mut str2 = String::new();\n    let mut vowels: Vec<char> = Vec::new();\n    for c in str1.chars() {\n        if c.is_ascii_lowercase() && (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            vowels.push(c);\n        }\n    }\n    vowels.reverse();\n    let mut i = 0;\n    for c in str1.chars() {\n        if c.is_ascii_lowercase() && (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            str2.push(vowels[i]);\n            i += 1;\n        } else {\n            str2.push(c);\n        }\n    }\n    str2",
    "    let mut str2 = str1.clone();\n    let mut i = 0;\n    let mut j = str1.len() - 1;\n    while i < j {\n        if !is_vowel(str1.chars().nth(i).unwrap()) {\n            i += 1;\n            continue;\n        }\n        if !is_vowel(str1.chars().nth(j).unwrap()) {\n            j -= 1;\n            continue;\n        }\n        let tmp = str2.chars().nth(i).unwrap();\n        str2.replace_range(i..i + 1, &str2.chars().nth(j).unwrap().to_string());\n        str2.replace_range(j..j + 1, &tmp.to_string());\n        i += 1;\n        j -= 1;\n    }\n    str2",
    "    let mut str2 = String::new();\n    let mut vowels = String::new();\n    for c in str1.chars() {\n        if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' {\n            vowels.push(c);\n        }\n    }\n    let mut vowels_rev = vowels.chars().rev();\n    for c in str1.chars() {\n        if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' {\n            str2.push(vowels_rev.next().unwrap());\n        } else {\n            str2.push(c);\n        }\n    }\n    str2",
    "    let mut chars: Vec<char> = str1.chars().collect();\n    let mut i = 0;\n    let mut j = chars.len() - 1;\n    while i < j {\n        if !is_vowel(chars[i]) {\n            i += 1;\n        } else if !is_vowel(chars[j]) {\n            j -= 1;\n        } else {\n            chars.swap(i, j);\n            i += 1;\n            j -= 1;\n        }\n    }\n    chars.into_iter().collect()",
    "    let mut str2 = str1.clone();\n    let mut i = 0;\n    let mut j = str1.len() - 1;\n    while i < j {\n        if !is_vowel(str1.chars().nth(i).unwrap()) {\n            i += 1;\n            continue;\n        }\n        if !is_vowel(str1.chars().nth(j).unwrap()) {\n            j -= 1;\n            continue;\n        }\n        str2.replace_range(i..i + 1, &str1[j..j + 1]);\n        str2.replace_range(j..j + 1, &str1[i..i + 1]);\n        i += 1;\n        j -= 1;\n    }\n    str2",
    "    let mut str2 = String::new();\n    let mut vowels: Vec<char> = Vec::new();\n    for c in str1.chars() {\n        if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' {\n            vowels.push(c);\n        }\n    }\n    vowels.reverse();\n    let mut i = 0;\n    for c in str1.chars() {\n        if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' {\n            str2.push(vowels[i]);\n            i += 1;\n        } else {\n            str2.push(c);\n        }\n    }\n    str2",
    "    let mut chars: Vec<char> = str1.chars().collect();\n    let mut i = 0;\n    let mut j = chars.len() - 1;\n    while i < j {\n        if !is_vowel(chars[i]) {\n            i += 1;\n            continue;\n        }\n        if !is_vowel(chars[j]) {\n            j -= 1;\n            continue;\n        }\n        chars.swap(i, j);\n        i += 1;\n        j -= 1;\n    }\n    chars.into_iter().collect()",
    "    let mut chars: Vec<char> = str1.chars().collect();\n    let mut i = 0;\n    let mut j = str1.len() - 1;\n    while i < j {\n        while i < j && !is_vowel(chars[i]) {\n            i += 1;\n        }\n        while i < j && !is_vowel(chars[j]) {\n            j -= 1;\n        }\n        if i < j {\n            chars.swap(i, j);\n            i += 1;\n            j -= 1;\n        }\n    }\n    chars.into_iter().collect()",
    "    let mut str2 = str1.clone();\n    let mut i = 0;\n    let mut j = str1.len() - 1;\n    while i < j {\n        if !is_vowel(str1.chars().nth(i).unwrap()) {\n            i += 1;\n            continue;\n        }\n        if !is_vowel(str1.chars().nth(j).unwrap()) {\n            j -= 1;\n            continue;\n        }\n        str2.replace_range(i..i + 1, &str1.chars().nth(j).unwrap().to_string());\n        str2.replace_range(j..j + 1, &str1.chars().nth(i).unwrap().to_string());\n        i += 1;\n        j -= 1;\n    }\n    str2",
    "    let mut str2 = str1.clone();\n    let mut str3 = str1.clone();\n    let mut str4 = String::new();\n    let mut str5 = String::new();\n    let mut str6 = String::new();\n    let mut str7 = String::new();\n    let mut str8 = String::new();\n    let mut str9 = String::new();\n    let mut str10 = String::new();\n    let mut str11 = String::new();\n    let mut str12 = String::new();\n    let mut str13 = String::new();\n    let mut str14 = String::new();\n    let mut str15 = String::new();\n    let mut str16 = String::new();\n    let mut str17 = String::new();\n    let mut str18 = String::new();\n    let mut str19 = String::new();\n    let mut str20 = String::new();\n    let mut str21 = String::new();\n    let mut str22 = String::new();\n    let mut str23 = String::new();\n    let mut str24 = String::new();\n    let mut str25 = String::new();\n    let mut str26 = String::new();\n    let mut str27 = String::new();\n    let mut str28 = String::new();\n    let mut str29 = String::new();\n    let mut str30 = String::new();\n    let mut str31 = String::new();\n    let mut str32 = String::new();\n    let mut str33 = String::new();\n    let mut str34 = String::new();\n    let mut str35 = String::new();\n    let mut str36 = String::new();\n    let mut str37 = String::new();\n    let mut str38 = String::new();\n    let mut str39 = String::new();\n    let mut str40 = String::new();\n    let mut str41 = String::new();\n    let mut str42 = String::new();\n    let mut str43 = String::new();\n    let mut str44 = String::new();\n    let mut str45 = String::new();\n    let mut str46 = String::new();\n    let mut str47 = String::new();\n    let mut",
    "    let mut str1_chars: Vec<char> = str1.chars().collect();\n    let mut vowels: Vec<char> = Vec::new();\n    let mut vowel_indices: Vec<usize> = Vec::new();\n    for (i, c) in str1_chars.iter().enumerate() {\n        if is_vowel(*c) {\n            vowels.push(*c);\n            vowel_indices.push(i);\n        }\n    }\n    for (i, c) in vowel_indices.iter().enumerate() {\n        str1_chars[*c] = vowels[vowels.len() - 1 - i];\n    }\n    str1_chars.iter().collect()",
    "    let mut chars: Vec<char> = str1.chars().collect();\n    let mut i = 0;\n    let mut j = chars.len() - 1;\n    while i < j {\n        if !is_vowel(chars[i]) {\n            i += 1;\n            continue;\n        }\n        if !is_vowel(chars[j]) {\n            j -= 1;\n            continue;\n        }\n        chars.swap(i, j);\n        i += 1;\n        j -= 1;\n    }\n    chars.into_iter().collect()",
    "    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let mut str2 = String::new();\n    let mut stack: Vec<char> = Vec::new();\n    for c in str1.chars() {\n        if vowels.contains(&c) {\n            stack.push(c);\n        }\n    }\n    for c in str1.chars() {\n        if vowels.contains(&c) {\n            str2.push(stack.pop().unwrap());\n        } else {\n            str2.push(c);\n        }\n    }\n    str2",
    "    let mut chars: Vec<char> = str1.chars().collect();\n    let mut i: usize = 0;\n    let mut j: usize = chars.len() - 1;\n    while i < j {\n        if !is_vowel(chars[i]) {\n            i += 1;\n            continue;\n        }\n        if !is_vowel(chars[j]) {\n            j -= 1;\n            continue;\n        }\n        chars.swap(i, j);\n        i += 1;\n        j -= 1;\n    }\n    chars.into_iter().collect()"
  ]
}