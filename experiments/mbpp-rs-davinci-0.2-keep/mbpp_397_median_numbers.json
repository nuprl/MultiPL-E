{
  "name": "mbpp_397_median_numbers",
  "language": "rs",
  "prompt": "/// Write a function to find the median of three numbers.\nfn median_numbers(a: isize, b: isize, c: isize) -> f64 {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_397_median_numbers.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\nfn main() {\n    let candidate = median_numbers;\n    assert_eq!(candidate(25, 55, 65), 55.0);\n    assert_eq!(candidate(20, 10, 30), 20.0);\n    assert_eq!(candidate(15, 45, 75), 45.0);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let mid = v.len() / 2;\n    if v.len() % 2 == 0 {\n        (v[mid] + v[mid - 1]) as f64 / 2.0\n    } else {\n        v[mid] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let mid = v.len() / 2;\n    if v.len() % 2 == 0 {\n        (v[mid] + v[mid - 1]) as f64 / 2.0\n    } else {\n        v[mid] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    (v[1] + v[2]) as f64 / 2.0",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    v[1] as f64",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let mid = v.len() / 2;\n    if v.len() % 2 == 0 {\n        (v[mid - 1] + v[mid]) as f64 / 2.0\n    } else {\n        v[mid] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    (v[1] as f64 + v[2] as f64) / 2.0",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    if v.len() % 2 == 0 {\n        (v[v.len() / 2] + v[(v.len() / 2) - 1]) as f64 / 2.0\n    } else {\n        v[v.len() / 2] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let mid = v.len() / 2;\n    if v.len() % 2 == 0 {\n        (v[mid] + v[mid - 1]) as f64 / 2.0\n    } else {\n        v[mid] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    if v.len() % 2 == 0 {\n        let mid = v.len() / 2;\n        (v[mid - 1] + v[mid]) as f64 / 2.0\n    } else {\n        v[v.len() / 2] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    if v.len() % 2 == 0 {\n        let mid = v.len() / 2;\n        (v[mid] + v[mid - 1]) as f64 / 2.0\n    } else {\n        v[v.len() / 2] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    if v.len() % 2 == 0 {\n        let mid = v.len() / 2;\n        (v[mid] + v[mid - 1]) as f64 / 2.0\n    } else {\n        v[v.len() / 2] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let median = v[1];\n    let mut sum = 0;\n    for i in v.iter() {\n        sum += i;\n    }\n    let mean = sum as f64 / v.len() as f64;\n    mean",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let mid = v.len() / 2;\n    if v.len() % 2 == 0 {\n        (v[mid] + v[mid - 1]) as f64 / 2.0\n    } else {\n        v[mid] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    (v[1] + v[2]) as f64 / 2.0",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    (v[1] + v[2]) as f64 / 2.0",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    if v.len() % 2 == 0 {\n        (v[v.len() / 2] + v[v.len() / 2 - 1]) as f64 / 2.0\n    } else {\n        v[v.len() / 2] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    v[1] as f64",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    (v[1] + v[2]) as f64 / 2.0",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    if v.len() % 2 == 0 {\n        (v[v.len() / 2] + v[v.len() / 2 - 1]) as f64 / 2.0\n    } else {\n        v[v.len() / 2] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    (v[1] + v[2]) as f64 / 2.0",
    "    let mut arr = [a, b, c];\n    arr.sort();\n    (arr[1] + arr[2]) as f64 / 2.0",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    v[1] as f64",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let mid = v.len() / 2;\n    if v.len() % 2 == 0 {\n        (v[mid - 1] + v[mid]) as f64 / 2.0\n    } else {\n        v[mid] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    (v[1] as f64 + v[2] as f64) / 2.0",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let mid = v.len() / 2;\n    if v.len() % 2 == 0 {\n        (v[mid] + v[mid - 1]) as f64 / 2.0\n    } else {\n        v[mid] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let mid = v.len() / 2;\n    if v.len() % 2 == 0 {\n        (v[mid] + v[mid - 1]) as f64 / 2.0\n    } else {\n        v[mid] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let len = v.len();\n    if len % 2 == 0 {\n        let mid = len / 2;\n        (v[mid] + v[mid - 1]) as f64 / 2.0\n    } else {\n        v[len / 2] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    v[1] as f64",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    if v.len() % 2 == 0 {\n        (v[v.len() / 2] + v[v.len() / 2 - 1]) as f64 / 2.0\n    } else {\n        v[v.len() / 2] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    if v.len() % 2 == 0 {\n        let mid = v.len() / 2;\n        (v[mid] + v[mid - 1]) as f64 / 2.0\n    } else {\n        v[v.len() / 2] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let mid = v.len() / 2;\n    if v.len() % 2 == 0 {\n        (v[mid] + v[mid - 1]) as f64 / 2.0\n    } else {\n        v[mid] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    if v.len() % 2 == 0 {\n        let mid = v.len() / 2;\n        (v[mid] + v[mid - 1]) as f64 / 2.0\n    } else {\n        v[v.len() / 2] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let mid = v.len() / 2;\n    if v.len() % 2 == 0 {\n        (v[mid] + v[mid - 1]) as f64 / 2.0\n    } else {\n        v[mid] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    if v.len() % 2 == 0 {\n        let mid = v.len() / 2;\n        (v[mid] + v[mid - 1]) as f64 / 2.0\n    } else {\n        v[v.len() / 2] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    if v.len() % 2 == 0 {\n        (v[v.len() / 2] + v[v.len() / 2 - 1]) as f64 / 2.0\n    } else {\n        v[v.len() / 2] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    (v[1] + v[2]) as f64 / 2.0",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let mid = v.len() / 2;\n    if v.len() % 2 == 0 {\n        (v[mid - 1] + v[mid]) as f64 / 2.0\n    } else {\n        v[mid] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    if v.len() % 2 == 0 {\n        let mid = v.len() / 2;\n        (v[mid] + v[mid - 1]) as f64 / 2.0\n    } else {\n        v[v.len() / 2] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    if v.len() % 2 == 0 {\n        (v[v.len() / 2 - 1] + v[v.len() / 2]) as f64 / 2.0\n    } else {\n        v[v.len() / 2] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    (v[1] + v[2]) as f64 / 2.0",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let mid = v.len() / 2;\n    if v.len() % 2 == 0 {\n        (v[mid] as f64 + v[mid - 1] as f64) / 2.0\n    } else {\n        v[mid] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    v[1] as f64",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let mid = v.len() / 2;\n    if v.len() % 2 == 0 {\n        (v[mid - 1] + v[mid]) as f64 / 2.0\n    } else {\n        v[mid] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    if v.len() % 2 == 0 {\n        (v[v.len() / 2] + v[v.len() / 2 - 1]) as f64 / 2.0\n    } else {\n        v[v.len() / 2] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    if v.len() % 2 == 0 {\n        let mid = v.len() / 2;\n        (v[mid] + v[mid - 1]) as f64 / 2.0\n    } else {\n        v[v.len() / 2] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    v[1] as f64",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let mid = v.len() / 2;\n    if v.len() % 2 == 0 {\n        (v[mid - 1] + v[mid]) as f64 / 2.0\n    } else {\n        v[mid] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let mid = v.len() / 2;\n    if v.len() % 2 == 0 {\n        (v[mid] + v[mid - 1]) as f64 / 2.0\n    } else {\n        v[mid] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let mid = v.len() / 2;\n    if v.len() % 2 == 0 {\n        (v[mid] + v[mid - 1]) as f64 / 2.0\n    } else {\n        v[mid] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let m = v[1];\n    let n = v[2] - v[0];\n    let p = m as f64 / n as f64;\n    p",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let mid = v.len() / 2;\n    if v.len() % 2 == 0 {\n        (v[mid] + v[mid - 1]) as f64 / 2.0\n    } else {\n        v[mid] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    if v.len() % 2 == 0 {\n        let mid = v.len() / 2;\n        (v[mid] + v[mid - 1]) as f64 / 2.0\n    } else {\n        v[v.len() / 2] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let mid = v.len() / 2;\n    if v.len() % 2 == 0 {\n        (v[mid - 1] + v[mid]) as f64 / 2.0\n    } else {\n        v[mid] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let len = v.len();\n    if len % 2 == 0 {\n        let mid = len / 2;\n        (v[mid] + v[mid - 1]) as f64 / 2.0\n    } else {\n        v[len / 2] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    if v.len() % 2 == 0 {\n        (v[v.len() / 2 - 1] + v[v.len() / 2]) as f64 / 2.0\n    } else {\n        v[v.len() / 2] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let mid = v.len() / 2;\n    if v.len() % 2 == 0 {\n        (v[mid - 1] + v[mid]) as f64 / 2.0\n    } else {\n        v[mid] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    if v.len() % 2 == 0 {\n        (v[v.len() / 2 - 1] + v[v.len() / 2]) as f64 / 2.0\n    } else {\n        v[v.len() / 2] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let n = v.len();\n    if n % 2 == 0 {\n        let m = n / 2;\n        (v[m - 1] + v[m]) as f64 / 2.0\n    } else {\n        v[n / 2] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let mid = v.len() / 2;\n    if v.len() % 2 == 0 {\n        (v[mid] + v[mid - 1]) as f64 / 2.0\n    } else {\n        v[mid] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let mid = v.len() / 2;\n    if v.len() % 2 == 0 {\n        (v[mid] + v[mid - 1]) as f64 / 2.0\n    } else {\n        v[mid] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let median = v[1];\n    let median_index = v.iter().position(|&x| x == median).unwrap();\n    let median_index = median_index as f64;\n    let length = v.len() as f64;\n    let median_index = median_index + 1.0;\n    median_index / length",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let (a, b, c) = (v[0], v[1], v[2]);\n    if a == b && b == c {\n        a as f64\n    } else if a == b {\n        b as f64\n    } else if b == c {\n        b as f64\n    } else if a == c {\n        a as f64\n    } else {\n        b as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    if v.len() % 2 == 0 {\n        (v[v.len() / 2] + v[(v.len() / 2) - 1]) as f64 / 2.0\n    } else {\n        v[v.len() / 2] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let mid = v.len() / 2;\n    if v.len() % 2 == 0 {\n        (v[mid] + v[mid - 1]) as f64 / 2.0\n    } else {\n        v[mid] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let mid = v.len() / 2;\n    if v.len() % 2 == 0 {\n        (v[mid] + v[mid - 1]) as f64 / 2.0\n    } else {\n        v[mid] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    if v.len() % 2 == 0 {\n        (v[v.len() / 2] + v[v.len() / 2 - 1]) as f64 / 2.0\n    } else {\n        v[v.len() / 2] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let mid = v.len() / 2;\n    if v.len() % 2 == 0 {\n        (v[mid] + v[mid - 1]) as f64 / 2.0\n    } else {\n        v[mid] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let mid = v.len() / 2;\n    if v.len() % 2 == 0 {\n        (v[mid - 1] + v[mid]) as f64 / 2.0\n    } else {\n        v[mid] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    if v.len() % 2 == 0 {\n        let mid = v.len() / 2;\n        (v[mid] + v[mid - 1]) as f64 / 2.0\n    } else {\n        v[v.len() / 2] as f64\n    }",
    "    let mut numbers = [a, b, c];\n    numbers.sort();\n    if numbers.len() % 2 == 0 {\n        let mid = numbers.len() / 2;\n        (numbers[mid - 1] + numbers[mid]) as f64 / 2.0\n    } else {\n        numbers[numbers.len() / 2] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let mid = v.len() / 2;\n    if v.len() % 2 == 0 {\n        (v[mid] + v[mid - 1]) as f64 / 2.0\n    } else {\n        v[mid] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let mid = v.len() / 2;\n    if v.len() % 2 == 0 {\n        (v[mid - 1] + v[mid]) as f64 / 2.0\n    } else {\n        v[mid] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    if v.len() % 2 == 0 {\n        (v[v.len() / 2 - 1] + v[v.len() / 2]) as f64 / 2.0\n    } else {\n        v[v.len() / 2] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let mid = v.len() / 2;\n    if v.len() % 2 == 0 {\n        (v[mid] + v[mid - 1]) as f64 / 2.0\n    } else {\n        v[mid] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    (v[1] + v[2]) as f64 / 2.0",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    (v[1] + v[2]) as f64 / 2.0",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let mid = v.len() / 2;\n    if v.len() % 2 == 0 {\n        (v[mid] + v[mid - 1]) as f64 / 2.0\n    } else {\n        v[mid] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    if v.len() % 2 == 0 {\n        (v[v.len() / 2] + v[v.len() / 2 - 1]) as f64 / 2.0\n    } else {\n        v[v.len() / 2] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    if v.len() % 2 == 0 {\n        (v[v.len() / 2] + v[v.len() / 2 - 1]) as f64 / 2.0\n    } else {\n        v[v.len() / 2] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let mid = v.len() / 2;\n    if v.len() % 2 == 0 {\n        (v[mid] + v[mid - 1]) as f64 / 2.0\n    } else {\n        v[mid] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    if v.len() % 2 == 0 {\n        let mid = v.len() / 2;\n        (v[mid] + v[mid - 1]) as f64 / 2.0\n    } else {\n        v[v.len() / 2] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    (v[1] as f64 + v[2] as f64) / 2.0",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let mid = v.len() / 2;\n    if v.len() % 2 == 0 {\n        (v[mid - 1] + v[mid]) as f64 / 2.0\n    } else {\n        v[mid] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    if v.len() % 2 == 0 {\n        let mid = v.len() / 2;\n        (v[mid] + v[mid - 1]) as f64 / 2.0\n    } else {\n        v[v.len() / 2] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let mid = v.len() / 2;\n    if v.len() % 2 == 0 {\n        (v[mid] + v[mid - 1]) as f64 / 2.0\n    } else {\n        v[mid] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    if v.len() % 2 == 0 {\n        let mid = v.len() / 2;\n        (v[mid] + v[mid - 1]) as f64 / 2.0\n    } else {\n        v[v.len() / 2] as f64\n    }",
    "    let mut numbers = vec![a, b, c];\n    numbers.sort();\n    let mid = numbers.len() / 2;\n    if numbers.len() % 2 == 0 {\n        (numbers[mid] + numbers[mid - 1]) as f64 / 2.0\n    } else {\n        numbers[mid] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    v[1] as f64",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    v[1] as f64",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    if v.len() % 2 == 0 {\n        let mid = v.len() / 2;\n        (v[mid] + v[mid - 1]) as f64 / 2.0\n    } else {\n        v[v.len() / 2] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let mid = v.len() / 2;\n    if v.len() % 2 == 0 {\n        (v[mid] + v[mid - 1]) as f64 / 2.0\n    } else {\n        v[mid] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    (v[1] + v[2]) as f64 / 2.0",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let mid = v.len() / 2;\n    if v.len() % 2 == 0 {\n        (v[mid] + v[mid - 1]) as f64 / 2.0\n    } else {\n        v[mid] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let mid = v[1];\n    if v[0] == v[2] {\n        mid as f64\n    } else {\n        (v[0] + v[2]) as f64 / 2.0\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let mid = v.len() / 2;\n    if v.len() % 2 == 0 {\n        (v[mid] + v[mid - 1]) as f64 / 2.0\n    } else {\n        v[mid] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    if v.len() % 2 == 0 {\n        (v[v.len() / 2] + v[v.len() / 2 - 1]) as f64 / 2.0\n    } else {\n        v[v.len() / 2] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    (v[1] + v[2]) as f64 / 2.0",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    v[1] as f64",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    if v.len() % 2 == 0 {\n        let mid = v.len() / 2;\n        (v[mid] + v[mid - 1]) as f64 / 2.0\n    } else {\n        v[v.len() / 2] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    (v[1] + v[2]) as f64 / 2.0",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    if v.len() % 2 == 0 {\n        (v[v.len() / 2] + v[v.len() / 2 - 1]) as f64 / 2.0\n    } else {\n        v[v.len() / 2] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let mid = v.len() / 2;\n    if v.len() % 2 == 0 {\n        (v[mid - 1] + v[mid]) as f64 / 2.0\n    } else {\n        v[mid] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let mid = v.len() / 2;\n    if v.len() % 2 == 0 {\n        (v[mid - 1] + v[mid]) as f64 / 2.0\n    } else {\n        v[mid] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let mid = v.len() / 2;\n    if v.len() % 2 == 0 {\n        (v[mid] + v[mid - 1]) as f64 / 2.0\n    } else {\n        v[mid] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let mid = v.len() / 2;\n    if v.len() % 2 == 0 {\n        let sum = v[mid] + v[mid - 1];\n        sum as f64 / 2.0\n    } else {\n        v[mid] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let mid = v.len() / 2;\n    if v.len() % 2 == 0 {\n        (v[mid] + v[mid - 1]) as f64 / 2.0\n    } else {\n        v[mid] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    if v.len() % 2 == 0 {\n        (v[v.len() / 2] + v[(v.len() / 2) - 1]) as f64 / 2.0\n    } else {\n        v[v.len() / 2] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    (v[1] as f64 + v[2] as f64) / 2.0",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    if v.len() % 2 == 0 {\n        (v[v.len() / 2] + v[v.len() / 2 - 1]) as f64 / 2.0\n    } else {\n        v[v.len() / 2] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let mid = v[1];\n    let median = if v[0] == v[2] {\n        v[0] as f64\n    } else if v[0] == mid || v[2] == mid {\n        mid as f64\n    } else {\n        (v[0] + v[2]) as f64 / 2.0\n    };\n    median",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    (v[1] as f64 + v[2] as f64) / 2.0",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    if v.len() % 2 == 0 {\n        let mid = v.len() / 2;\n        (v[mid] + v[mid - 1]) as f64 / 2.0\n    } else {\n        v[v.len() / 2] as f64\n    }",
    "    let mut nums = vec![a, b, c];\n    nums.sort();\n    let len = nums.len();\n    if len % 2 == 0 {\n        (nums[len / 2] + nums[len / 2 - 1]) as f64 / 2.0\n    } else {\n        nums[len / 2] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    if v.len() % 2 == 0 {\n        (v[v.len() / 2] + v[v.len() / 2 - 1]) as f64 / 2.0\n    } else {\n        v[v.len() / 2] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    (v[1] + v[2]) as f64 / 2.0",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let mid = v.len() / 2;\n    if v.len() % 2 == 0 {\n        (v[mid] + v[mid - 1]) as f64 / 2.0\n    } else {\n        v[mid] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    v[1] as f64",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let mid = v.len() / 2;\n    if v.len() % 2 == 0 {\n        (v[mid - 1] + v[mid]) as f64 / 2.0\n    } else {\n        v[mid] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    (v[1] as f64 + v[2] as f64) / 2.0",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let mid = v.len() / 2;\n    if v.len() % 2 == 0 {\n        (v[mid] + v[mid - 1]) as f64 / 2.0\n    } else {\n        v[mid] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let mid = v.len() / 2;\n    if v.len() % 2 == 0 {\n        (v[mid] + v[mid - 1]) as f64 / 2.0\n    } else {\n        v[mid] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let mid = v[1];\n    if v[0] == v[2] {\n        mid as f64\n    } else {\n        (v[0] + v[2]) as f64 / 2.0\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let mid = v.len() / 2;\n    if v.len() % 2 == 0 {\n        (v[mid - 1] + v[mid]) as f64 / 2.0\n    } else {\n        v[mid] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let mid = v.len() / 2;\n    if v.len() % 2 == 0 {\n        (v[mid] + v[mid - 1]) as f64 / 2.0\n    } else {\n        v[mid] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let median = v[1];\n    let median_f = median as f64;\n    median_f",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    if v.len() % 2 == 0 {\n        (v[v.len() / 2] + v[(v.len() / 2) - 1]) as f64 / 2.0\n    } else {\n        v[v.len() / 2] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    if v.len() % 2 == 0 {\n        (v[v.len() / 2] + v[v.len() / 2 - 1]) as f64 / 2.0\n    } else {\n        v[v.len() / 2] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let mid = v.len() / 2;\n    if v.len() % 2 == 0 {\n        (v[mid] + v[mid - 1]) as f64 / 2.0\n    } else {\n        v[mid] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let mid = v.len() / 2;\n    if v.len() % 2 == 0 {\n        (v[mid] + v[mid - 1]) as f64 / 2.0\n    } else {\n        v[mid] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let mid = v.len() / 2;\n    if v.len() % 2 == 0 {\n        (v[mid] + v[mid - 1]) as f64 / 2.0\n    } else {\n        v[mid] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let mid = v.len() / 2;\n    if v.len() % 2 == 0 {\n        (v[mid] + v[mid - 1]) as f64 / 2.0\n    } else {\n        v[mid] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let mid = v.len() / 2;\n    if v.len() % 2 == 0 {\n        (v[mid] + v[mid - 1]) as f64 / 2.0\n    } else {\n        v[mid] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    v[1] as f64",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    if v.len() % 2 == 0 {\n        (v[v.len() / 2] + v[v.len() / 2 - 1]) as f64 / 2.0\n    } else {\n        v[v.len() / 2] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    if v.len() % 2 == 0 {\n        (v[v.len() / 2] + v[v.len() / 2 - 1]) as f64 / 2.0\n    } else {\n        v[v.len() / 2] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    if v.len() % 2 == 0 {\n        (v[v.len() / 2] + v[v.len() / 2 - 1]) as f64 / 2.0\n    } else {\n        v[v.len() / 2] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    v[1] as f64",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    v[1] as f64",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    (v[1] + v[2]) as f64 / 2.0",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    if v.len() % 2 == 0 {\n        let mid = v.len() / 2;\n        (v[mid - 1] + v[mid]) as f64 / 2.0\n    } else {\n        v[v.len() / 2] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    median(&v)",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let mid = v.len() / 2;\n    if v.len() % 2 == 0 {\n        (v[mid] + v[mid - 1]) as f64 / 2.0\n    } else {\n        v[mid] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let mid = v.len() / 2;\n    if v.len() % 2 == 0 {\n        (v[mid] + v[mid - 1]) as f64 / 2.0\n    } else {\n        v[mid] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    (v[1] + v[2]) as f64 / 2.0",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let mid = v.len() / 2;\n    if v.len() % 2 == 0 {\n        (v[mid] + v[mid - 1]) as f64 / 2.0\n    } else {\n        v[mid] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    if v.len() % 2 == 0 {\n        (v[v.len() / 2] + v[v.len() / 2 - 1]) as f64 / 2.0\n    } else {\n        v[v.len() / 2] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    (v[1] + v[2]) as f64 / 2.0",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    if v.len() % 2 == 0 {\n        let mid = v.len() / 2;\n        (v[mid] + v[mid - 1]) as f64 / 2.0\n    } else {\n        v[v.len() / 2] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    (v[1] + v[2]) as f64 / 2.0",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    if v.len() % 2 == 0 {\n        (v[v.len() / 2] + v[v.len() / 2 - 1]) as f64 / 2.0\n    } else {\n        v[v.len() / 2] as f64\n    }",
    "    let mut arr = [a, b, c];\n    arr.sort();\n    median(&arr)",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let mid = v.len() / 2;\n    if v.len() % 2 == 0 {\n        (v[mid] + v[mid - 1]) as f64 / 2.0\n    } else {\n        v[mid] as f64\n    }",
    "    let mut numbers = [a, b, c];\n    numbers.sort();\n    if numbers.len() % 2 == 0 {\n        let mid = numbers.len() / 2;\n        (numbers[mid] + numbers[mid - 1]) as f64 / 2.0\n    } else {\n        numbers[numbers.len() / 2] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    (v[1] + v[2]) as f64 / 2.0",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    (v[1] as f64 + v[2] as f64) / 2.0",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    v[1] as f64",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let mid = v.len() / 2;\n    if v.len() % 2 == 0 {\n        (v[mid] + v[mid - 1]) as f64 / 2.0\n    } else {\n        v[mid] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let mid = v.len() / 2;\n    if v.len() % 2 == 0 {\n        (v[mid] + v[mid - 1]) as f64 / 2.0\n    } else {\n        v[mid] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    (v[1] as f64 + v[2] as f64) / 2.0",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let mid = v.len() / 2;\n    if v.len() % 2 == 0 {\n        (v[mid] + v[mid - 1]) as f64 / 2.0\n    } else {\n        v[mid] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let mid = v.len() / 2;\n    if v.len() % 2 == 0 {\n        (v[mid - 1] + v[mid]) as f64 / 2.0\n    } else {\n        v[mid] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    (v[1] as f64)",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    if v.len() % 2 == 0 {\n        (v[v.len() / 2 - 1] + v[v.len() / 2]) as f64 / 2.0\n    } else {\n        v[v.len() / 2] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    v[1] as f64",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    if v.len() % 2 == 0 {\n        (v[v.len() / 2] + v[v.len() / 2 - 1]) as f64 / 2.0\n    } else {\n        v[v.len() / 2] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    if v.len() % 2 == 0 {\n        let mid = v.len() / 2;\n        (v[mid] + v[mid - 1]) as f64 / 2.0\n    } else {\n        v[v.len() / 2] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let mid = v.len() / 2;\n    if v.len() % 2 == 0 {\n        (v[mid] + v[mid - 1]) as f64 / 2.0\n    } else {\n        v[mid] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    (v[1] as f64 + v[2] as f64) / 2.0",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    if v.len() % 2 == 0 {\n        (v[v.len() / 2] + v[v.len() / 2 - 1]) as f64 / 2.0\n    } else {\n        v[v.len() / 2] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    v[1] as f64",
    "    let mut arr = [a, b, c];\n    arr.sort();\n    let mid = arr.len() / 2;\n    if arr.len() % 2 == 0 {\n        (arr[mid] + arr[mid - 1]) as f64 / 2.0\n    } else {\n        arr[mid] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    if v.len() % 2 == 0 {\n        (v[v.len() / 2] + v[(v.len() / 2) - 1]) as f64 / 2.0\n    } else {\n        v[v.len() / 2] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let len = v.len();\n    if len % 2 == 0 {\n        (v[len / 2] + v[len / 2 - 1]) as f64 / 2.0\n    } else {\n        v[len / 2] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    if v.len() % 2 == 0 {\n        (v[v.len() / 2 - 1] + v[v.len() / 2]) as f64 / 2.0\n    } else {\n        v[v.len() / 2] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    (v[1] + v[2]) as f64 / 2.0",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    if v.len() % 2 == 0 {\n        (v[v.len() / 2] + v[(v.len() / 2) - 1]) as f64 / 2.0\n    } else {\n        v[v.len() / 2] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    v[1] as f64",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let median = v[1];\n    median as f64",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let mid = v.len() / 2;\n    if v.len() % 2 == 0 {\n        (v[mid] + v[mid - 1]) as f64 / 2.0\n    } else {\n        v[mid] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    (v[1] + v[2]) as f64 / 2.0",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let mid = v[1];\n    let sum = v.iter().sum::<isize>();\n    let mean = sum as f64 / v.len() as f64;\n    if mid == a || mid == c {\n        mean\n    } else {\n        mid as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let mid = v.len() / 2;\n    if v.len() % 2 == 0 {\n        (v[mid] + v[mid - 1]) as f64 / 2.0\n    } else {\n        v[mid] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let mid = v.len() / 2;\n    if v.len() % 2 == 0 {\n        (v[mid] + v[mid - 1]) as f64 / 2.0\n    } else {\n        v[mid] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let mid = v.len() / 2;\n    if v.len() % 2 == 0 {\n        (v[mid] + v[mid - 1]) as f64 / 2.0\n    } else {\n        v[mid] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    v[1] as f64",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    v[1] as f64",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let mid = v.len() / 2;\n    if v.len() % 2 == 0 {\n        (v[mid] + v[mid - 1]) as f64 / 2.0\n    } else {\n        v[mid] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    if v.len() % 2 == 0 {\n        let mid = v.len() / 2;\n        (v[mid] + v[mid - 1]) as f64 / 2.0\n    } else {\n        v[v.len() / 2] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let n = v.len() as f64;\n    if n % 2.0 == 0.0 {\n        (v[(n / 2.0) as usize] + v[(n / 2.0 - 1.0) as usize]) as f64 / 2.0\n    } else {\n        v[(n / 2.0) as usize] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    if v.len() % 2 == 0 {\n        let mid = v.len() / 2;\n        (v[mid] + v[mid - 1]) as f64 / 2.0\n    } else {\n        v[v.len() / 2] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let mid = v.len() / 2;\n    if v.len() % 2 == 0 {\n        (v[mid - 1] + v[mid]) as f64 / 2.0\n    } else {\n        v[mid] as f64\n    }",
    "    let mut v = [a, b, c];\n    v.sort();\n    if v.len() % 2 == 0 {\n        (v[v.len() / 2 - 1] + v[v.len() / 2]) as f64 / 2.0\n    } else {\n        v[v.len() / 2] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    if v.len() % 2 == 0 {\n        (v[v.len() / 2] + v[(v.len() / 2) - 1]) as f64 / 2.0\n    } else {\n        v[v.len() / 2] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let mid = v.len() / 2;\n    if v.len() % 2 == 0 {\n        (v[mid - 1] + v[mid]) as f64 / 2.0\n    } else {\n        v[mid] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    if v.len() % 2 == 0 {\n        (v[v.len() / 2] + v[v.len() / 2 - 1]) as f64 / 2.0\n    } else {\n        v[v.len() / 2] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    (v[1] + v[2]) as f64 / 2.0",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    v[1] as f64",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    v[1] as f64",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let mid = v[1];\n    if v[0] == v[2] {\n        mid as f64\n    } else {\n        ((v[0] + v[2]) as f64) / 2.0\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    if v.len() % 2 == 0 {\n        let mid = v.len() / 2;\n        (v[mid - 1] + v[mid]) as f64 / 2.0\n    } else {\n        v[v.len() / 2] as f64\n    }"
  ]
}