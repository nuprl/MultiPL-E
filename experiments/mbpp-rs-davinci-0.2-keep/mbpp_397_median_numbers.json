{
  "name": "mbpp_397_median_numbers",
  "language": "rs",
  "prompt": "/// Write a function to find the median of three numbers.\nfn median_numbers(a: isize, b: isize, c: isize) -> f64 {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_397_median_numbers.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\nfn main() {\n    let candidate = median_numbers;\n    assert_eq!(candidate(25, 55, 65), 55.0);\n    assert_eq!(candidate(20, 10, 30), 20.0);\n    assert_eq!(candidate(15, 45, 75), 45.0);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let mid = v.len() / 2;\n    if v.len() % 2 == 0 {\n        (v[mid] + v[mid - 1]) as f64 / 2.0\n    } else {\n        v[mid] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let mid = v.len() / 2;\n    if v.len() % 2 == 0 {\n        (v[mid] + v[mid - 1]) as f64 / 2.0\n    } else {\n        v[mid] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    (v[1] + v[2]) as f64 / 2.0",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    v[1] as f64",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let mid = v.len() / 2;\n    if v.len() % 2 == 0 {\n        (v[mid - 1] + v[mid]) as f64 / 2.0\n    } else {\n        v[mid] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    (v[1] as f64 + v[2] as f64) / 2.0",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    if v.len() % 2 == 0 {\n        (v[v.len() / 2] + v[(v.len() / 2) - 1]) as f64 / 2.0\n    } else {\n        v[v.len() / 2] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let mid = v.len() / 2;\n    if v.len() % 2 == 0 {\n        (v[mid] + v[mid - 1]) as f64 / 2.0\n    } else {\n        v[mid] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    if v.len() % 2 == 0 {\n        let mid = v.len() / 2;\n        (v[mid - 1] + v[mid]) as f64 / 2.0\n    } else {\n        v[v.len() / 2] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    if v.len() % 2 == 0 {\n        let mid = v.len() / 2;\n        (v[mid] + v[mid - 1]) as f64 / 2.0\n    } else {\n        v[v.len() / 2] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    if v.len() % 2 == 0 {\n        let mid = v.len() / 2;\n        (v[mid] + v[mid - 1]) as f64 / 2.0\n    } else {\n        v[v.len() / 2] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let median = v[1];\n    let mut sum = 0;\n    for i in v.iter() {\n        sum += i;\n    }\n    let mean = sum as f64 / v.len() as f64;\n    mean",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    let mid = v.len() / 2;\n    if v.len() % 2 == 0 {\n        (v[mid] + v[mid - 1]) as f64 / 2.0\n    } else {\n        v[mid] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    (v[1] + v[2]) as f64 / 2.0",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    (v[1] + v[2]) as f64 / 2.0",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    if v.len() % 2 == 0 {\n        (v[v.len() / 2] + v[v.len() / 2 - 1]) as f64 / 2.0\n    } else {\n        v[v.len() / 2] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    v[1] as f64",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    (v[1] + v[2]) as f64 / 2.0",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    if v.len() % 2 == 0 {\n        (v[v.len() / 2] + v[v.len() / 2 - 1]) as f64 / 2.0\n    } else {\n        v[v.len() / 2] as f64\n    }",
    "    let mut v = vec![a, b, c];\n    v.sort();\n    (v[1] + v[2]) as f64 / 2.0"
  ]
}