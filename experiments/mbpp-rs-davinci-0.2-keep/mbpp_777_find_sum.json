{
  "name": "mbpp_777_find_sum",
  "language": "rs",
  "prompt": "/// Write a python function to find the sum of non-repeated elements in a given list.\nfn find_sum(arr: Vec<isize>) -> isize {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_777_find_sum.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\nfn main() {\n    let candidate = find_sum;\n    assert_eq!(candidate(vec![1, 2, 3, 1, 1, 4, 5, 6]), 21);\n    assert_eq!(candidate(vec![1, 10, 9, 4, 2, 10, 10, 45, 4]), 71);\n    assert_eq!(candidate(vec![12, 10, 9, 45, 2, 10, 10, 45, 10]), 78);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    let mut sum = 0;\n    let mut seen = HashSet::new();\n    for i in arr {\n        if !seen.contains(&i) {\n            sum += i;\n            seen.insert(i);\n        }\n    }\n    sum",
    "    let mut sum = 0;\n    let mut seen = HashSet::new();\n    for i in arr {\n        if !seen.contains(&i) {\n            sum += i;\n            seen.insert(i);\n        }\n    }\n    sum",
    "    let mut sum = 0;\n    let mut seen = HashSet::new();\n    for i in arr {\n        if !seen.contains(&i) {\n            sum += i;\n            seen.insert(i);\n        }\n    }\n    sum",
    "    let mut sum = 0;\n    let mut seen = HashSet::new();\n    for i in arr {\n        if !seen.contains(&i) {\n            sum += i;\n            seen.insert(i);\n        }\n    }\n    sum",
    "    let mut sum = 0;\n    for i in arr {\n        if arr.iter().filter(|&x| *x == i).count() == 1 {\n            sum += i;\n        }\n    }\n    sum",
    "    let mut sum = 0;\n    let mut set = HashSet::new();\n    for i in arr {\n        if !set.contains(&i) {\n            sum += i;\n            set.insert(i);\n        }\n    }\n    sum",
    "    let mut sum = 0;\n    for i in arr {\n        if arr.iter().filter(|&x| *x == i).count() == 1 {\n            sum += i;\n        }\n    }\n    sum",
    "    let mut sum = 0;\n    for i in arr {\n        if arr.iter().filter(|&x| *x == i).count() == 1 {\n            sum += i;\n        }\n    }\n    sum",
    "    let mut sum = 0;\n    let mut set = HashSet::new();\n    for i in arr {\n        if !set.contains(&i) {\n            sum += i;\n            set.insert(i);\n        }\n    }\n    sum",
    "    let mut sum = 0;\n    let mut set = HashSet::new();\n    for i in arr {\n        if !set.contains(&i) {\n            sum += i;\n            set.insert(i);\n        }\n    }\n    sum",
    "    let mut sum = 0;\n    let mut set = HashSet::new();\n    for i in arr {\n        if !set.contains(&i) {\n            sum += i;\n            set.insert(i);\n        }\n    }\n    sum",
    "    let mut sum = 0;\n    for i in arr {\n        if !arr.contains(&i) {\n            sum += i;\n        }\n    }\n    sum",
    "    let mut sum = 0;\n    for i in arr {\n        if arr.iter().filter(|&x| *x == i).count() == 1 {\n            sum += i;\n        }\n    }\n    sum",
    "    let mut sum = 0;\n    let mut set = HashSet::new();\n    for i in arr {\n        if !set.contains(&i) {\n            sum += i;\n            set.insert(i);\n        }\n    }\n    sum",
    "    let mut sum = 0;\n    for i in arr {\n        if arr.iter().filter(|&x| *x == i).count() == 1 {\n            sum += i;\n        }\n    }\n    sum",
    "    let mut sum = 0;\n    for i in arr {\n        if arr.iter().filter(|&x| *x == i).count() == 1 {\n            sum += i;\n        }\n    }\n    sum",
    "    let mut sum = 0;\n    for i in arr {\n        if arr.iter().filter(|&x| *x == i).count() == 1 {\n            sum += i;\n        }\n    }\n    sum",
    "    let mut sum = 0;\n    let mut seen = HashSet::new();\n    for num in arr {\n        if !seen.contains(&num) {\n            sum += num;\n            seen.insert(num);\n        }\n    }\n    sum",
    "    let mut sum = 0;\n    let mut seen = HashSet::new();\n    for i in arr {\n        if !seen.contains(&i) {\n            sum += i;\n            seen.insert(i);\n        }\n    }\n    sum",
    "    let mut sum = 0;\n    let mut seen = HashSet::new();\n    for i in arr {\n        if !seen.contains(&i) {\n            sum += i;\n            seen.insert(i);\n        }\n    }\n    sum"
  ]
}