{
  "name": "mbpp_735_toggle_middle_bits",
  "language": "rs",
  "prompt": "/// Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nfn toggle_middle_bits(n: isize) -> isize {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_735_toggle_middle_bits.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\nfn main() {\n    let candidate = toggle_middle_bits;\n    assert_eq!(candidate(9), 15);\n    assert_eq!(candidate(10), 12);\n    assert_eq!(candidate(11), 13);\n    assert_eq!(candidate(65), 127);\n    assert_eq!(candidate(77), 115);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    let mut n = n;\n    let mut mask = 1 << 1;\n    while mask < n {\n        n ^= mask;\n        mask <<= 1;\n    }\n    n",
    "    let mut n = n;\n    let mut mask = 0b10;\n    while mask < n {\n        n ^= mask;\n        mask <<= 1;\n    }\n    n",
    "    let mut mask = 0b11;\n    let mut result = n;\n    let mut i = 1;\n    while mask <= n {\n        result ^= mask;\n        mask <<= 2;\n        i += 1;\n    }\n    result",
    "    let mut m = n;\n    let mut i = 1;\n    while i < 64 {\n        m ^= 1 << i;\n        i += 2;\n    }\n    m",
    "    let mut n = n;\n    let mut mask = 0;\n    let mut i = 0;\n    while i < 31 {\n        mask = mask | (1 << i);\n        i += 2;\n    }\n    n ^= mask;\n    n",
    "    let mut result = n;\n    let mut i = 1;\n    while i < (n.count_ones() - 1) {\n        result ^= 1 << i;\n        i += 1;\n    }\n    result",
    "    let mut mask = 0b10;\n    let mut result = n;\n    while mask < n {\n        result ^= mask;\n        mask <<= 1;\n    }\n    result",
    "    let mut m = n;\n    let mut i = 1;\n    while i < (n.count_ones() - 1) {\n        m ^= 1 << i;\n        i += 1;\n    }\n    m",
    "    let mut mask = 0b11;\n    let mut result = n;\n    let mut i = 0;\n    while mask < n {\n        let bit = (n & mask) >> i;\n        if bit == 0 {\n            result |= mask;\n        } else {\n            result &= !mask;\n        }\n        mask <<= 1;\n        i += 1;\n    }\n    result",
    "    let mut n = n;\n    let mut mask = 0b10;\n    while mask < n {\n        n = n ^ mask;\n        mask = mask << 1;\n    }\n    n",
    "    let mut mask = 1;\n    while mask < n {\n        n ^= mask;\n        mask <<= 1;\n    }\n    n",
    "    let mask = (1 << (n.trailing_zeros() - 1)) - 1;\n    n ^ mask",
    "    let mut n = n;\n    let mut mask = 1;\n    while mask < n {\n        n ^= mask;\n        mask <<= 1;\n    }\n    n",
    "    let mut mask = 0b11;\n    let mut result = 0;\n    let mut i = 0;\n    while mask <= n {\n        let bit = (n & mask) >> i;\n        result |= bit << i;\n        mask <<= 2;\n        i += 2;\n    }\n    result",
    "    let mut m = n;\n    let mut i = 0;\n    while m > 0 {\n        if i != 0 && i != (n.count_ones() as usize) {\n            m ^= 1 << i;\n        }\n        i += 1;\n        m >>= 1;\n    }\n    n",
    "    let mut n = n;\n    let mut first_bit = n & 1;\n    n = n >> 1;\n    while n > 0 {\n        let last_bit = n & 1;\n        n = n >> 1;\n        let new_bit = if last_bit == 1 { 0 } else { 1 };\n        n = n | (new_bit << 1);\n    }\n    n = n | (first_bit << 1);\n    n",
    "    let mut m = n;\n    let mut i = 0;\n    while m > 0 {\n        if i != 0 && i != (n.count_ones() - 1) {\n            m ^= 1 << i;\n        }\n        i += 1;\n        m >>= 1;\n    }\n    n",
    "    let mut n = n;\n    let mut mask = 0b10;\n    while mask < n {\n        n ^= mask;\n        mask <<= 1;\n    }\n    n",
    "    let mut mask = 0b11;\n    let mut result = 0;\n    let mut i = 0;\n    while mask < n {\n        if (n & mask) == 0 {\n            result |= mask;\n        }\n        mask <<= 1;\n        i += 1;\n    }\n    result",
    "    let mut n = n;\n    let mut mask = 0b10;\n    while mask < n {\n        n ^= mask;\n        mask <<= 1;\n    }\n    n"
  ]
}