{
  "name": "mbpp_244_next_Perfect_Square",
  "language": "rs",
  "prompt": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_244_next_Perfect_Square.py",
  "prompt_terminology": "verbatim",
  "tests": "}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    return i * i;\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i < N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `9`,\n right: `16`', /tmp/tmpxqwo3vur.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    return i * i;\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut n = N;\n    let mut i = 1;\n    while i * i <= n {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i < N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `9`,\n right: `16`', /tmp/tmpxqwo3vur.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut num = N;\n    while num % 2 == 0 {\n        num /= 2;\n    }\n    if num % 2 == 1 {\n        return -1;\n    }\n    num /= 2;\n    return num * num;\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `-1`,\n right: `36`', /tmp/tmpxbc2biv8.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    return i * i;\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    return i * i;\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    let mut result = 0;\n    while result < N {\n        result = i * i;\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `9`,\n right: `16`', /tmp/tmpmf8ufvq9.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i < N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `9`,\n right: `16`', /tmp/tmpxqwo3vur.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i < N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `9`,\n right: `16`', /tmp/tmpxqwo3vur.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    return i * i;\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i: isize = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1666122796,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    return i * i;\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    return i * i;\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i < N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `9`,\n right: `16`', /tmp/tmpxqwo3vur.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    return i * i;\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    return i * i;\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    let mut square = 0;\n    while square < N {\n        square = i * i;\n        i += 1;\n    }\n    square\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1666122796,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `9`,\n right: `16`', /tmp/tmpyz7jk0yr.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i < N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `9`,\n right: `16`', /tmp/tmpxqwo3vur.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i < N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `9`,\n right: `16`', /tmp/tmpxqwo3vur.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 0;\n    while i * i < N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1666122796,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `9`,\n right: `16`', /tmp/tmpvj1gkodc.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i < N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `9`,\n right: `16`', /tmp/tmpxqwo3vur.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    return i * i;\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    return i * i;\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    return i * i;\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    return i * i;\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    return i * i;\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    return i * i;\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    return i * i;\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i: isize = 1;\n    while i * i < N {\n        i += 1;\n    }\n    return i * i;\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1666122796,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `9`,\n right: `16`', /tmp/tmpamhk96g4.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i < N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `9`,\n right: `16`', /tmp/tmpxqwo3vur.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i < N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `9`,\n right: `16`', /tmp/tmpxqwo3vur.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    return i * i;\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    return i * i;\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    return i * i;\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    return i * i;\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i < N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `9`,\n right: `16`', /tmp/tmpxqwo3vur.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i < N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `9`,\n right: `16`', /tmp/tmpxqwo3vur.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i < N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `9`,\n right: `16`', /tmp/tmpxqwo3vur.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i: isize = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    return i * i;\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1666122796,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    return i * i;\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    return i * i;\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i < N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `9`,\n right: `16`', /tmp/tmpxqwo3vur.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    return i * i;\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    return i * i;\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    return i * i;\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    return i * i;\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    return i * i;\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    return i * i;\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    return i * i;\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    return i * i;\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    return i * i;\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    let mut result = 0;\n    while i * i <= N {\n        i += 1;\n    }\n    result = i * i;\n    result\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1666122796,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    return i * i;\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    let mut result = 0;\n    while result < N {\n        result = i * i;\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `9`,\n right: `16`', /tmp/tmpmf8ufvq9.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i < N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `9`,\n right: `16`', /tmp/tmpxqwo3vur.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut n = N;\n    while n % 2 == 0 {\n        n /= 2;\n    }\n    while n % 3 == 0 {\n        n /= 3;\n    }\n    while n % 5 == 0 {\n        n /= 5;\n    }\n    if n == 1 {\n        return N;\n    }\n    let mut i = N + 1;\n    while i % 2 == 0 {\n        i += 1;\n    }\n    while i % 3 == 0 {\n        i += 1;\n    }\n    while i % 5 == 0 {\n        i += 1;\n    }\n    while i % n != 0 {\n        i += 1;\n    }\n    return i;\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1666122796,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `42`,\n right: `36`', /tmp/tmpcazq7ui3.rs:34:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    let mut result = 0;\n    while i * i <= N {\n        result = i * i;\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1666122796,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `25`,\n right: `36`', /tmp/tmpgf5uahwa.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    return i * i;\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    return i * i;\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i < N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `9`,\n right: `16`', /tmp/tmpxqwo3vur.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i < N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `9`,\n right: `16`', /tmp/tmpxqwo3vur.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    return i * i;\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    return i * i;\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    return i * i;\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i < N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `9`,\n right: `16`', /tmp/tmpxqwo3vur.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 0;\n    while i * i < N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1666122796,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `9`,\n right: `16`', /tmp/tmpvj1gkodc.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    return i * i;\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    return i * i;\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    return i * i;\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    let mut result = 0;\n    while i * i <= N {\n        i += 1;\n    }\n    result = i * i;\n    result\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1666122796,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i < N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `9`,\n right: `16`', /tmp/tmpxqwo3vur.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i < N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `9`,\n right: `16`', /tmp/tmpxqwo3vur.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    return i * i;\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i < N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left: `9`,\n right: `16`', /tmp/tmpxqwo3vur.rs:14:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n",
      "exit_code": 101,
      "status": "Exception"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    return i * i;\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    return i * i;\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    return i * i;\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    return i * i;\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "/// Write a python function to find the next perfect square greater than a given number.\nfn next_Perfect_Square(N: isize) -> isize {\n    let mut i = 1;\n    while i * i <= N {\n        i += 1;\n    }\n    i * i\n}\n\nfn main() {\n    let candidate = next_Perfect_Square;\n    assert_eq!(candidate(35), 36);\n    assert_eq!(candidate(6), 9);\n    assert_eq!(candidate(9), 16);\n}\n",
      "timestamp": 1665517313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}